
nucleo-H753ZI_Aula6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2b4  0800b2b4  0000c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2bc  0800b2bc  0000c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b2c0  0800b2c0  0000c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b2c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800b328  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b388  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000521c  24000124  0800b3e8  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005340  0800b3e8  0000d340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a0f9  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005129  00000000  00000000  0003724b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e08  00000000  00000000  0003c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001742  00000000  00000000  0003e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc6d  00000000  00000000  0003f8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260e4  00000000  00000000  0007c52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178081  00000000  00000000  000a2613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021a694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  0021a6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00222b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b104 	.word	0x0800b104

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800b104 	.word	0x0800b104

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_ETH_Init+0x80>)
 8000676:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <MX_ETH_Init+0x84>)
 8000678:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ETH_Init+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000688:	22e1      	movs	r2, #225	@ 0xe1
 800068a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_ETH_Init+0x88>)
 800068e:	2200      	movs	r2, #0
 8000690:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_ETH_Init+0x88>)
 8000694:	2200      	movs	r2, #0
 8000696:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_ETH_Init+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <MX_ETH_Init+0x88>)
 80006a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <MX_ETH_Init+0x8c>)
 80006ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_ETH_Init+0x90>)
 80006b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006b8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ETH_Init+0x80>)
 80006c0:	f001 f9a0 	bl	8001a04 <HAL_ETH_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006ca:	f000 fd19 	bl	8001100 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ce:	2238      	movs	r2, #56	@ 0x38
 80006d0:	2100      	movs	r1, #0
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <MX_ETH_Init+0x94>)
 80006d4:	f00a f840 	bl	800a758 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_ETH_Init+0x94>)
 80006da:	2221      	movs	r2, #33	@ 0x21
 80006dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_ETH_Init+0x94>)
 80006e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_ETH_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	24000178 	.word	0x24000178
 80006f4:	40028000 	.word	0x40028000
 80006f8:	24000228 	.word	0x24000228
 80006fc:	240000c4 	.word	0x240000c4
 8000700:	24000064 	.word	0x24000064
 8000704:	24000140 	.word	0x24000140

08000708 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	@ 0x38
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a59      	ldr	r2, [pc, #356]	@ (800088c <HAL_ETH_MspInit+0x184>)
 8000726:	4293      	cmp	r3, r2
 8000728:	f040 80ab 	bne.w	8000882 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800072e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000732:	4a57      	ldr	r2, [pc, #348]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000738:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073c:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000746:	623b      	str	r3, [r7, #32]
 8000748:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800074a:	4b51      	ldr	r3, [pc, #324]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800074c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000750:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000756:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800075a:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800075c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000768:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800076a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076e:	4a48      	ldr	r2, [pc, #288]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000774:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800077a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <HAL_ETH_MspInit+0x188>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007fe:	2332      	movs	r3, #50	@ 0x32
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080e:	230b      	movs	r3, #11
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <HAL_ETH_MspInit+0x18c>)
 800081a:	f001 fd27 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800081e:	2386      	movs	r3, #134	@ 0x86
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082e:	230b      	movs	r3, #11
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4817      	ldr	r0, [pc, #92]	@ (8000898 <HAL_ETH_MspInit+0x190>)
 800083a:	f001 fd17 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	@ (800089c <HAL_ETH_MspInit+0x194>)
 800085c:	f001 fd06 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000860:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <HAL_ETH_MspInit+0x198>)
 800087e:	f001 fcf5 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	@ 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40028000 	.word	0x40028000
 8000890:	58024400 	.word	0x58024400
 8000894:	58020800 	.word	0x58020800
 8000898:	58020000 	.word	0x58020000
 800089c:	58020400 	.word	0x58020400
 80008a0:	58021800 	.word	0x58021800

080008a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer1 */
  Timer1Handle = osTimerNew(CallbackTimer1, osTimerPeriodic, NULL, &Timer1_attributes);
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_FREERTOS_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	4815      	ldr	r0, [pc, #84]	@ (8000904 <MX_FREERTOS_Init+0x60>)
 80008b0:	f006 ff1e 	bl	80076f0 <osTimerNew>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <MX_FREERTOS_Init+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueuePrint */
  QueuePrintHandle = osMessageQueueNew (16, sizeof(message_t), &QueuePrint_attributes);
 80008ba:	4a14      	ldr	r2, [pc, #80]	@ (800090c <MX_FREERTOS_Init+0x68>)
 80008bc:	216c      	movs	r1, #108	@ 0x6c
 80008be:	2010      	movs	r0, #16
 80008c0:	f006 ffc0 	bl	8007844 <osMessageQueueNew>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_FREERTOS_Init+0x6c>)
 80008c8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <MX_FREERTOS_Init+0x70>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4812      	ldr	r0, [pc, #72]	@ (8000918 <MX_FREERTOS_Init+0x74>)
 80008d0:	f006 fe4c 	bl	800756c <osThreadNew>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a11      	ldr	r2, [pc, #68]	@ (800091c <MX_FREERTOS_Init+0x78>)
 80008d8:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80008da:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <MX_FREERTOS_Init+0x7c>)
 80008dc:	2100      	movs	r1, #0
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_FREERTOS_Init+0x80>)
 80008e0:	f006 fe44 	bl	800756c <osThreadNew>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <MX_FREERTOS_Init+0x84>)
 80008e8:	6013      	str	r3, [r2, #0]

  /* creation of TaskGateKeeper */
  TaskGateKeeperHandle = osThreadNew(StartTaskGateKeeper, NULL, &TaskGateKeeper_attributes);
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <MX_FREERTOS_Init+0x88>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4810      	ldr	r0, [pc, #64]	@ (8000930 <MX_FREERTOS_Init+0x8c>)
 80008f0:	f006 fe3c 	bl	800756c <osThreadNew>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <MX_FREERTOS_Init+0x90>)
 80008f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	0800b238 	.word	0x0800b238
 8000904:	08000a25 	.word	0x08000a25
 8000908:	24000240 	.word	0x24000240
 800090c:	0800b220 	.word	0x0800b220
 8000910:	2400023c 	.word	0x2400023c
 8000914:	0800b1b4 	.word	0x0800b1b4
 8000918:	08000939 	.word	0x08000939
 800091c:	24000230 	.word	0x24000230
 8000920:	0800b1d8 	.word	0x0800b1d8
 8000924:	08000985 	.word	0x08000985
 8000928:	24000234 	.word	0x24000234
 800092c:	0800b1fc 	.word	0x0800b1fc
 8000930:	080009d1 	.word	0x080009d1
 8000934:	24000238 	.word	0x24000238

08000938 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	@ 0x78
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */

  message_t xMes;
  xMes.cNumTask = '1';
 8000940:	2331      	movs	r3, #49	@ 0x31
 8000942:	733b      	strb	r3, [r7, #12]
  sprintf(&xMes.cMes[0], "Mensagem Task 1");
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	3301      	adds	r3, #1
 800094a:	490c      	ldr	r1, [pc, #48]	@ (800097c <StartTask1+0x44>)
 800094c:	4618      	mov	r0, r3
 800094e:	f009 fee3 	bl	800a718 <siprintf>
  xMes.iCount = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, (TickType_t)osWaitForever);
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <StartTask1+0x48>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	f107 010c 	add.w	r1, r7, #12
 800095e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000962:	2200      	movs	r2, #0
 8000964:	f006 ffe2 	bl	800792c <osMessageQueuePut>
	xMes.iCount++;
 8000968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800096a:	3301      	adds	r3, #1
 800096c:	677b      	str	r3, [r7, #116]	@ 0x74
    osDelay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f006 fe8d 	bl	8007690 <osDelay>
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, (TickType_t)osWaitForever);
 8000976:	bf00      	nop
 8000978:	e7ed      	b.n	8000956 <StartTask1+0x1e>
 800097a:	bf00      	nop
 800097c:	0800b150 	.word	0x0800b150
 8000980:	2400023c 	.word	0x2400023c

08000984 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	@ 0x78
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  message_t xMes;
  xMes.cNumTask = '2';
 800098c:	2332      	movs	r3, #50	@ 0x32
 800098e:	733b      	strb	r3, [r7, #12]
  sprintf(&xMes.cMes[0], "Mensagem Task 2");
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	3301      	adds	r3, #1
 8000996:	490c      	ldr	r1, [pc, #48]	@ (80009c8 <StartTask2+0x44>)
 8000998:	4618      	mov	r0, r3
 800099a:	f009 febd 	bl	800a718 <siprintf>
  xMes.iCount = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <StartTask2+0x48>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	f107 010c 	add.w	r1, r7, #12
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ae:	2200      	movs	r2, #0
 80009b0:	f006 ffbc 	bl	800792c <osMessageQueuePut>
	xMes.iCount++;
 80009b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009b6:	3301      	adds	r3, #1
 80009b8:	677b      	str	r3, [r7, #116]	@ 0x74
	osDelay(1000);
 80009ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009be:	f006 fe67 	bl	8007690 <osDelay>
	osMessageQueuePut(QueuePrintHandle, &xMes, 0, osWaitForever);
 80009c2:	bf00      	nop
 80009c4:	e7ed      	b.n	80009a2 <StartTask2+0x1e>
 80009c6:	bf00      	nop
 80009c8:	0800b160 	.word	0x0800b160
 80009cc:	2400023c 	.word	0x2400023c

080009d0 <StartTaskGateKeeper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGateKeeper */
void StartTaskGateKeeper(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09e      	sub	sp, #120	@ 0x78
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGateKeeper */
  message_t xMes;


  osTimerStart(Timer1Handle, 1000U);
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <StartTaskGateKeeper+0x48>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009e0:	4618      	mov	r0, r3
 80009e2:	f006 ff01 	bl	80077e8 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {

	osMessageQueueGet(QueuePrintHandle, &xMes, 0, osWaitForever);
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <StartTaskGateKeeper+0x4c>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	f107 010c 	add.w	r1, r7, #12
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009f2:	2200      	movs	r2, #0
 80009f4:	f006 fffa 	bl	80079ec <osMessageQueueGet>

	// Remake using UART_Transmit, for training use UART from FreeRTOS from scrath
	printf_("Task: %c, Msg: %s, Count = %d \n\r", xMes.cNumTask, xMes.cMes, xMes.iCount);
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	4618      	mov	r0, r3
 80009fc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	460b      	mov	r3, r1
 8000a06:	4601      	mov	r1, r0
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <StartTaskGateKeeper+0x50>)
 8000a0a:	f000 fabd 	bl	8000f88 <printf_>


	osDelay(100);
 8000a0e:	2064      	movs	r0, #100	@ 0x64
 8000a10:	f006 fe3e 	bl	8007690 <osDelay>
	osMessageQueueGet(QueuePrintHandle, &xMes, 0, osWaitForever);
 8000a14:	bf00      	nop
 8000a16:	e7e6      	b.n	80009e6 <StartTaskGateKeeper+0x16>
 8000a18:	24000240 	.word	0x24000240
 8000a1c:	2400023c 	.word	0x2400023c
 8000a20:	0800b170 	.word	0x0800b170

08000a24 <CallbackTimer1>:
  /* USER CODE END StartTaskGateKeeper */
}

/* CallbackTimer1 function */
void CallbackTimer1(void *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimer1 */

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <CallbackTimer1+0x18>)
 8000a30:	f001 fde5 	bl	80025fe <HAL_GPIO_TogglePin>

  /* USER CODE END CallbackTimer1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	58021000 	.word	0x58021000

08000a40 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b62      	ldr	r3, [pc, #392]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a60      	ldr	r2, [pc, #384]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b5e      	ldr	r3, [pc, #376]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a74:	4b5a      	ldr	r3, [pc, #360]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a59      	ldr	r2, [pc, #356]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b56      	ldr	r3, [pc, #344]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b53      	ldr	r3, [pc, #332]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a51      	ldr	r2, [pc, #324]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac0:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b44      	ldr	r3, [pc, #272]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	4a42      	ldr	r2, [pc, #264]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ade:	4b40      	ldr	r3, [pc, #256]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	4b3c      	ldr	r3, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	4a3b      	ldr	r2, [pc, #236]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afc:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a33      	ldr	r2, [pc, #204]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <MX_GPIO_Init+0x1a0>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b2e:	482d      	ldr	r0, [pc, #180]	@ (8000be4 <MX_GPIO_Init+0x1a4>)
 8000b30:	f001 fd4c 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b3a:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0x1a8>)
 8000b3c:	f001 fd46 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2102      	movs	r1, #2
 8000b44:	4829      	ldr	r0, [pc, #164]	@ (8000bec <MX_GPIO_Init+0x1ac>)
 8000b46:	f001 fd41 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4824      	ldr	r0, [pc, #144]	@ (8000bf0 <MX_GPIO_Init+0x1b0>)
 8000b60:	f001 fb84 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b64:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4819      	ldr	r0, [pc, #100]	@ (8000be4 <MX_GPIO_Init+0x1a4>)
 8000b7e:	f001 fb75 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <MX_GPIO_Init+0x1a8>)
 8000b9c:	f001 fb66 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x1b4>)
 8000bb6:	f001 fb59 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	@ (8000bec <MX_GPIO_Init+0x1ac>)
 8000bd2:	f001 fb4b 	bl	800226c <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	@ 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58020c00 	.word	0x58020c00
 8000bec:	58021000 	.word	0x58021000
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	if (str) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00a      	beq.n	8000c1e <printchar_+0x26>
		**str = (char)c;
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000c1c:	e005      	b.n	8000c2a <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000c1e:	4639      	mov	r1, r7
 8000c20:	230a      	movs	r3, #10
 8000c22:	2201      	movs	r2, #1
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <printchar_+0x3c>)
 8000c26:	f004 fff1 	bl	8005c0c <HAL_UART_Transmit>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24000294 	.word	0x24000294

08000c38 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000c48:	2400      	movs	r4, #0
 8000c4a:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	dd17      	ble.n	8000c84 <prints_+0x4c>
		register int len = 0;
 8000c54:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000c56:	68be      	ldr	r6, [r7, #8]
 8000c58:	e001      	b.n	8000c5e <prints_+0x26>
 8000c5a:	3501      	adds	r5, #1
 8000c5c:	3601      	adds	r6, #1
 8000c5e:	7833      	ldrb	r3, [r6, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1fa      	bne.n	8000c5a <prints_+0x22>
		if (len >= width) width = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429d      	cmp	r5, r3
 8000c68:	db02      	blt.n	8000c70 <prints_+0x38>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e002      	b.n	8000c76 <prints_+0x3e>
		else width -= len;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1b5b      	subs	r3, r3, r5
 8000c74:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <prints_+0x4c>
 8000c80:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d116      	bne.n	8000cbc <prints_+0x84>
		for ( ; width > 0; --width) {
 8000c8e:	e007      	b.n	8000ca0 <prints_+0x68>
			printchar_(out, padchar);
 8000c90:	4641      	mov	r1, r8
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff ffb0 	bl	8000bf8 <printchar_>
			++pc;
 8000c98:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dcf4      	bgt.n	8000c90 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000ca6:	e009      	b.n	8000cbc <prints_+0x84>
		printchar_(out, *string);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <printchar_>
		++pc;
 8000cb4:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f1      	bne.n	8000ca8 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000cc4:	e007      	b.n	8000cd6 <prints_+0x9e>
		printchar_(out, padchar);
 8000cc6:	4641      	mov	r1, r8
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ff95 	bl	8000bf8 <printchar_>
		++pc;
 8000cce:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dcf4      	bgt.n	8000cc6 <prints_+0x8e>
	}

	return pc;
 8000cdc:	4623      	mov	r3, r4
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ce8 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cec:	b089      	sub	sp, #36	@ 0x24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000cf8:	f04f 0900 	mov.w	r9, #0
 8000cfc:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000cfe:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <printi_+0x38>
		print_buf[0] = '0';
 8000d06:	2330      	movs	r3, #48	@ 0x30
 8000d08:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000d0e:	f107 0114 	add.w	r1, r7, #20
 8000d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff ff8e 	bl	8000c38 <prints_>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	e04a      	b.n	8000db6 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00a      	beq.n	8000d3c <printi_+0x54>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	d107      	bne.n	8000d3c <printi_+0x54>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da04      	bge.n	8000d3c <printi_+0x54>
		neg = 1;
 8000d32:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	425b      	negs	r3, r3
 8000d3a:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000d3c:	f107 0414 	add.w	r4, r7, #20
 8000d40:	340b      	adds	r4, #11
	*s = '\0';
 8000d42:	2300      	movs	r3, #0
 8000d44:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000d46:	e015      	b.n	8000d74 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	fbb5 f2f3 	udiv	r2, r5, r3
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	1aeb      	subs	r3, r5, r3
 8000d54:	4698      	mov	r8, r3
		if( t >= 10 )
 8000d56:	f1b8 0f09 	cmp.w	r8, #9
 8000d5a:	dd02      	ble.n	8000d62 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d5e:	3b3a      	subs	r3, #58	@ 0x3a
 8000d60:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000d62:	fa5f f388 	uxtb.w	r3, r8
 8000d66:	3c01      	subs	r4, #1
 8000d68:	3330      	adds	r3, #48	@ 0x30
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d1e7      	bne.n	8000d48 <printi_+0x60>
	}

	if (neg) {
 8000d78:	f1b9 0f00 	cmp.w	r9, #0
 8000d7c:	d013      	beq.n	8000da6 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00d      	beq.n	8000da0 <printi_+0xb8>
 8000d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d008      	beq.n	8000da0 <printi_+0xb8>
			printchar_(out, '-');
 8000d8e:	212d      	movs	r1, #45	@ 0x2d
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff ff31 	bl	8000bf8 <printchar_>
			++pc;
 8000d96:	3601      	adds	r6, #1
			--width;
 8000d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d9e:	e002      	b.n	8000da6 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000da0:	3c01      	subs	r4, #1
 8000da2:	232d      	movs	r3, #45	@ 0x2d
 8000da4:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000daa:	4621      	mov	r1, r4
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff ff43 	bl	8000c38 <prints_>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4433      	add	r3, r6
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000dc0 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc4:	b08a      	sub	sp, #40	@ 0x28
 8000dc6:	af04      	add	r7, sp, #16
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000dce:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000dd0:	e0c4      	b.n	8000f5c <print_+0x19c>
		if (*format == '%') {
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b25      	cmp	r3, #37	@ 0x25
 8000dd8:	f040 80b3 	bne.w	8000f42 <print_+0x182>
			++format;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000de2:	2600      	movs	r6, #0
 8000de4:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80bc 	beq.w	8000f68 <print_+0x1a8>
			if (*format == '%') goto out;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b25      	cmp	r3, #37	@ 0x25
 8000df6:	f000 80a6 	beq.w	8000f46 <print_+0x186>
			if (*format == '-') {
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b2d      	cmp	r3, #45	@ 0x2d
 8000e00:	d109      	bne.n	8000e16 <print_+0x56>
				++format;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000e08:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000e0a:	e004      	b.n	8000e16 <print_+0x56>
				++format;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000e12:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b30      	cmp	r3, #48	@ 0x30
 8000e1c:	d0f6      	beq.n	8000e0c <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000e1e:	e00b      	b.n	8000e38 <print_+0x78>
				width *= 10;
 8000e20:	462b      	mov	r3, r5
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	442b      	add	r3, r5
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	461d      	mov	r5, r3
				width += *format - '0';
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3b30      	subs	r3, #48	@ 0x30
 8000e30:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e3e:	d903      	bls.n	8000e48 <print_+0x88>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b39      	cmp	r3, #57	@ 0x39
 8000e46:	d9eb      	bls.n	8000e20 <print_+0x60>
			}
			if( *format == 's' ) {
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b73      	cmp	r3, #115	@ 0x73
 8000e4e:	d112      	bne.n	8000e76 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000e5a:	f1b8 0f00 	cmp.w	r8, #0
 8000e5e:	d001      	beq.n	8000e64 <print_+0xa4>
 8000e60:	4641      	mov	r1, r8
 8000e62:	e000      	b.n	8000e66 <print_+0xa6>
 8000e64:	4947      	ldr	r1, [pc, #284]	@ (8000f84 <print_+0x1c4>)
 8000e66:	4633      	mov	r3, r6
 8000e68:	462a      	mov	r2, r5
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff fee4 	bl	8000c38 <prints_>
 8000e70:	4603      	mov	r3, r0
 8000e72:	441c      	add	r4, r3
				continue;
 8000e74:	e06f      	b.n	8000f56 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b64      	cmp	r3, #100	@ 0x64
 8000e7c:	d10f      	bne.n	8000e9e <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	2361      	movs	r3, #97	@ 0x61
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	9601      	str	r6, [sp, #4]
 8000e8c:	9500      	str	r5, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	220a      	movs	r2, #10
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f7ff ff28 	bl	8000ce8 <printi_>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	441c      	add	r4, r3
				continue;
 8000e9c:	e05b      	b.n	8000f56 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b78      	cmp	r3, #120	@ 0x78
 8000ea4:	d10f      	bne.n	8000ec6 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1d1a      	adds	r2, r3, #4
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	2361      	movs	r3, #97	@ 0x61
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	9601      	str	r6, [sp, #4]
 8000eb4:	9500      	str	r5, [sp, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2210      	movs	r2, #16
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff ff14 	bl	8000ce8 <printi_>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	441c      	add	r4, r3
				continue;
 8000ec4:	e047      	b.n	8000f56 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b58      	cmp	r3, #88	@ 0x58
 8000ecc:	d10f      	bne.n	8000eee <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	2341      	movs	r3, #65	@ 0x41
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	9601      	str	r6, [sp, #4]
 8000edc:	9500      	str	r5, [sp, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff ff00 	bl	8000ce8 <printi_>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	441c      	add	r4, r3
				continue;
 8000eec:	e033      	b.n	8000f56 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b75      	cmp	r3, #117	@ 0x75
 8000ef4:	d10f      	bne.n	8000f16 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1d1a      	adds	r2, r3, #4
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	2361      	movs	r3, #97	@ 0x61
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	9601      	str	r6, [sp, #4]
 8000f04:	9500      	str	r5, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	220a      	movs	r2, #10
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff feec 	bl	8000ce8 <printi_>
 8000f10:	4603      	mov	r3, r0
 8000f12:	441c      	add	r4, r3
				continue;
 8000f14:	e01f      	b.n	8000f56 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b63      	cmp	r3, #99	@ 0x63
 8000f1c:	d11b      	bne.n	8000f56 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000f2e:	f107 0114 	add.w	r1, r7, #20
 8000f32:	4633      	mov	r3, r6
 8000f34:	462a      	mov	r2, r5
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff fe7e 	bl	8000c38 <prints_>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	441c      	add	r4, r3
				continue;
 8000f40:	e009      	b.n	8000f56 <print_+0x196>
			}
		}
		else {
		out:
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <print_+0x188>
			if (*format == '%') goto out;
 8000f46:	bf00      	nop
			printchar_(out, *format);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fe52 	bl	8000bf8 <printchar_>
			++pc;
 8000f54:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f af36 	bne.w	8000dd2 <print_+0x12>
 8000f66:	e000      	b.n	8000f6a <print_+0x1aa>
			if (*format == '\0') break;
 8000f68:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <print_+0x1b8>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000f78:	4623      	mov	r3, r4
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f84:	0800b194 	.word	0x0800b194

08000f88 <printf_>:

int printf_(const char *format, ...)
{
 8000f88:	b40f      	push	{r0, r1, r2, r3}
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6939      	ldr	r1, [r7, #16]
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ff10 	bl	8000dc0 <print_>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fac:	b004      	add	sp, #16
 8000fae:	4770      	bx	lr

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f000 fba6 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f810 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f7ff fd40 	bl	8000a40 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fc0:	f7ff fb56 	bl	8000670 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fc4:	f000 fa10 	bl	80013e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fc8:	f000 fac4 	bl	8001554 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f006 fa84 	bl	80074d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fd0:	f7ff fc68 	bl	80008a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd4:	f006 faa4 	bl	8007520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <main+0x28>

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	@ 0x70
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	224c      	movs	r2, #76	@ 0x4c
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f009 fbb4 	bl	800a758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f009 fbae 	bl	800a758 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f001 fc49 	bl	8002894 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <SystemClock_Config+0xf8>)
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	4a32      	ldr	r2, [pc, #200]	@ (80010d4 <SystemClock_Config+0xf8>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001012:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <SystemClock_Config+0xf8>)
 8001014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b2e      	ldr	r3, [pc, #184]	@ (80010d8 <SystemClock_Config+0xfc>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001024:	4a2c      	ldr	r2, [pc, #176]	@ (80010d8 <SystemClock_Config+0xfc>)
 8001026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <SystemClock_Config+0xfc>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001038:	bf00      	nop
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <SystemClock_Config+0xfc>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001046:	d1f8      	bne.n	800103a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001048:	2303      	movs	r3, #3
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800104c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001052:	2301      	movs	r3, #1
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001056:	2340      	movs	r3, #64	@ 0x40
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001066:	2318      	movs	r3, #24
 8001068:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800106e:	2304      	movs	r3, #4
 8001070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001076:	230c      	movs	r3, #12
 8001078:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800107a:	2300      	movs	r3, #0
 800107c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fc4e 	bl	8002928 <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001092:	f000 f835 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	233f      	movs	r3, #63	@ 0x3f
 8001098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f88e 	bl	80031dc <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xee>
  {
    Error_Handler();
 80010c6:	f000 f81b 	bl	8001100 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3770      	adds	r7, #112	@ 0x70
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58000400 	.word	0x58000400
 80010d8:	58024800 	.word	0x58024800

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ee:	f000 fb45 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40001000 	.word	0x40001000

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <Error_Handler+0x8>

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_MspInit+0x38>)
 8001114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_MspInit+0x38>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_MspInit+0x38>)
 8001124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	210f      	movs	r1, #15
 8001134:	f06f 0001 	mvn.w	r0, #1
 8001138:	f000 fc3c 	bl	80019b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	58024400 	.word	0x58024400

08001148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b090      	sub	sp, #64	@ 0x40
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d827      	bhi.n	80011a6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001156:	2200      	movs	r2, #0
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	2036      	movs	r0, #54	@ 0x36
 800115c:	f000 fc2a 	bl	80019b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001160:	2036      	movs	r0, #54	@ 0x36
 8001162:	f000 fc41 	bl	80019e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001166:	4a29      	ldr	r2, [pc, #164]	@ (800120c <HAL_InitTick+0xc4>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_InitTick+0xc8>)
 800116e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001172:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HAL_InitTick+0xc8>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <HAL_InitTick+0xc8>)
 800117e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118a:	f107 0210 	add.w	r2, r7, #16
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fbad 	bl	80038f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800119e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d106      	bne.n	80011b2 <HAL_InitTick+0x6a>
 80011a4:	e001      	b.n	80011aa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e02b      	b.n	8001202 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f002 fb77 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80011ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b2:	f002 fb73 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011be:	4a15      	ldr	r2, [pc, #84]	@ (8001214 <HAL_InitTick+0xcc>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_InitTick+0xd0>)
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_InitTick+0xd4>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_InitTick+0xd0>)
 80011d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <HAL_InitTick+0xd0>)
 80011da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_InitTick+0xd0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_InitTick+0xd0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <HAL_InitTick+0xd0>)
 80011ec:	f004 f9f0 	bl	80055d0 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d104      	bne.n	8001200 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <HAL_InitTick+0xd0>)
 80011f8:	f004 fa4c 	bl	8005694 <HAL_TIM_Base_Start_IT>
 80011fc:	4603      	mov	r3, r0
 80011fe:	e000      	b.n	8001202 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3740      	adds	r7, #64	@ 0x40
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000008 	.word	0x24000008
 8001210:	58024400 	.word	0x58024400
 8001214:	431bde83 	.word	0x431bde83
 8001218:	24000244 	.word	0x24000244
 800121c:	40001000 	.word	0x40001000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <TIM6_DAC_IRQHandler+0x10>)
 800125e:	f004 fa91 	bl	8005784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000244 	.word	0x24000244

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f009 faba 	bl	800a814 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24080000 	.word	0x24080000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	24000290 	.word	0x24000290
 80012d4:	24005340 	.word	0x24005340

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <SystemInit+0xe4>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a36      	ldr	r2, [pc, #216]	@ (80013bc <SystemInit+0xe4>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ec:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <SystemInit+0xe8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d807      	bhi.n	8001308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f8:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <SystemInit+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 030f 	bic.w	r3, r3, #15
 8001300:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <SystemInit+0xe8>)
 8001302:	f043 0307 	orr.w	r3, r3, #7
 8001306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <SystemInit+0xec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <SystemInit+0xec>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <SystemInit+0xec>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <SystemInit+0xec>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4929      	ldr	r1, [pc, #164]	@ (80013c4 <SystemInit+0xec>)
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <SystemInit+0xf0>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <SystemInit+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <SystemInit+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	4a21      	ldr	r2, [pc, #132]	@ (80013c0 <SystemInit+0xe8>)
 800133c:	f043 0307 	orr.w	r3, r3, #7
 8001340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <SystemInit+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001348:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <SystemInit+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <SystemInit+0xec>)
 8001356:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <SystemInit+0xf4>)
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <SystemInit+0xec>)
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <SystemInit+0xf8>)
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <SystemInit+0xec>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <SystemInit+0xfc>)
 8001364:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <SystemInit+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <SystemInit+0xec>)
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <SystemInit+0xfc>)
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <SystemInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <SystemInit+0xec>)
 800137a:	4a16      	ldr	r2, [pc, #88]	@ (80013d4 <SystemInit+0xfc>)
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <SystemInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <SystemInit+0xec>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <SystemInit+0xec>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <SystemInit+0xec>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <SystemInit+0x100>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <SystemInit+0x104>)
 800139c:	4013      	ands	r3, r2
 800139e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013a2:	d202      	bcs.n	80013aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <SystemInit+0x108>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <SystemInit+0x10c>)
 80013ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	52002000 	.word	0x52002000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013cc:	02020200 	.word	0x02020200
 80013d0:	01ff0000 	.word	0x01ff0000
 80013d4:	01010280 	.word	0x01010280
 80013d8:	5c001000 	.word	0x5c001000
 80013dc:	ffff0000 	.word	0xffff0000
 80013e0:	51008108 	.word	0x51008108
 80013e4:	52004000 	.word	0x52004000

080013e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <MX_USART3_UART_Init+0x94>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001432:	f004 fb9b 	bl	8005b6c <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800143c:	f7ff fe60 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001444:	f005 fc31 	bl	8006caa <HAL_UARTEx_SetTxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800144e:	f7ff fe57 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001456:	f005 fc66 	bl	8006d26 <HAL_UARTEx_SetRxFifoThreshold>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001460:	f7ff fe4e 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_USART3_UART_Init+0x90>)
 8001466:	f005 fbe7 	bl	8006c38 <HAL_UARTEx_DisableFifoMode>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001470:	f7ff fe46 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	24000294 	.word	0x24000294
 800147c:	40004800 	.word	0x40004800

08001480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0ba      	sub	sp, #232	@ 0xe8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	22c0      	movs	r2, #192	@ 0xc0
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 f959 	bl	800a758 <memset>
  if(uartHandle->Instance==USART3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <HAL_UART_MspInit+0xc8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d146      	bne.n	800153e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014b0:	f04f 0202 	mov.w	r2, #2
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fa56 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014d2:	f7ff fe15 	bl	8001100 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_UART_MspInit+0xcc>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <HAL_UART_MspInit+0xcc>)
 80014de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_UART_MspInit+0xcc>)
 80014e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_UART_MspInit+0xcc>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	4a14      	ldr	r2, [pc, #80]	@ (800154c <HAL_UART_MspInit+0xcc>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_UART_MspInit+0xcc>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001512:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800152c:	2307      	movs	r3, #7
 800152e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001532:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_UART_MspInit+0xd0>)
 800153a:	f000 fe97 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	37e8      	adds	r7, #232	@ 0xe8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40004800 	.word	0x40004800
 800154c:	58024400 	.word	0x58024400
 8001550:	58020c00 	.word	0x58020c00

08001554 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155a:	4a16      	ldr	r2, [pc, #88]	@ (80015b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800155c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001560:	2209      	movs	r2, #9
 8001562:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001566:	2202      	movs	r2, #2
 8001568:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001572:	2202      	movs	r2, #2
 8001574:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001578:	2201      	movs	r2, #1
 800157a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158a:	2201      	movs	r2, #1
 800158c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001590:	2201      	movs	r2, #1
 8001592:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159c:	f001 f849 	bl	8002632 <HAL_PCD_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80015a6:	f7ff fdab 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000328 	.word	0x24000328
 80015b4:	40080000 	.word	0x40080000

080015b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ba      	sub	sp, #232	@ 0xe8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	22c0      	movs	r2, #192	@ 0xc0
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f009 f8bd 	bl	800a758 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a30      	ldr	r2, [pc, #192]	@ (80016a4 <HAL_PCD_MspInit+0xec>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d159      	bne.n	800169c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f002 f9b9 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800160c:	f7ff fd78 	bl	8001100 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001610:	f001 f97a 	bl	8002908 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	4a23      	ldr	r2, [pc, #140]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001632:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800164c:	230a      	movs	r3, #10
 800164e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001656:	4619      	mov	r1, r3
 8001658:	4814      	ldr	r0, [pc, #80]	@ (80016ac <HAL_PCD_MspInit+0xf4>)
 800165a:	f000 fe07 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800165e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <HAL_PCD_MspInit+0xf4>)
 800167a:	f000 fdf7 	bl	800226c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 8001680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 8001686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800168a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_PCD_MspInit+0xf0>)
 8001690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800169c:	bf00      	nop
 800169e:	37e8      	adds	r7, #232	@ 0xe8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40080000 	.word	0x40080000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020000 	.word	0x58020000

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff fe10 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	@ (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f009 f89f 	bl	800a820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff fc65 	bl	8000fb0 <main>
  bx  lr
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80016f4:	0800b2c4 	.word	0x0800b2c4
  ldr r2, =_sbss
 80016f8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80016fc:	24005340 	.word	0x24005340

08001700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC3_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f947 	bl	800199e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001710:	f001 ff1a 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_Init+0x68>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	4913      	ldr	r1, [pc, #76]	@ (8001770 <HAL_Init+0x6c>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_Init+0x68>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <HAL_Init+0x6c>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <HAL_Init+0x70>)
 8001746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001748:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_Init+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	200f      	movs	r0, #15
 8001750:	f7ff fcfa 	bl	8001148 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e002      	b.n	8001764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff fcd5 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	0800b248 	.word	0x0800b248
 8001774:	24000004 	.word	0x24000004
 8001778:	24000000 	.word	0x24000000

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2400000c 	.word	0x2400000c
 80017a0:	2400080c 	.word	0x2400080c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2400080c 	.word	0x2400080c

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2400000c 	.word	0x2400000c

08001804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_GetREVID+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1b      	lsrs	r3, r3, #16
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	5c001000 	.word	0x5c001000

0800181c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800182c:	4904      	ldr	r1, [pc, #16]	@ (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58000400 	.word	0x58000400

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	4313      	orrs	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	05fa0000 	.word	0x05fa0000

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff4c 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c2:	f7ff ff63 	bl	800188c <__NVIC_GetPriorityGrouping>
 80019c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7ff ffb3 	bl	8001938 <NVIC_EncodePriority>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff82 	bl	80018e4 <__NVIC_SetPriority>
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff56 	bl	80018a8 <__NVIC_EnableIRQ>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e3      	b.n	8001bde <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2223      	movs	r2, #35	@ 0x23
 8001a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fe6d 	bl	8000708 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001be8 <HAL_ETH_Init+0x1e4>)
 8001a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a34:	4a6c      	ldr	r2, [pc, #432]	@ (8001be8 <HAL_ETH_Init+0x1e4>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001be8 <HAL_ETH_Init+0x1e4>)
 8001a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a1b      	ldrb	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fee1 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a5a:	e003      	b.n	8001a64 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a5c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a60:	f7ff fedc 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a64:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <HAL_ETH_Init+0x1e8>)
 8001a66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fe90 	bl	80017a4 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a86:	e011      	b.n	8001aac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a88:	f7ff fe8c 	bl	80017a4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a96:	d909      	bls.n	8001aac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	22e0      	movs	r2, #224	@ 0xe0
 8001aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e098      	b.n	8001bde <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e4      	bne.n	8001a88 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f89e 	bl	8001c00 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ac4:	f001 feba 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a49      	ldr	r2, [pc, #292]	@ (8001bf0 <HAL_ETH_Init+0x1ec>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa81 	bl	8001fe4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001aee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001afa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001afe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	22e0      	movs	r2, #224	@ 0xe0
 8001b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e05d      	b.n	8001bde <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_ETH_Init+0x1f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6952      	ldr	r2, [r2, #20]
 8001b36:	0051      	lsls	r1, r2, #1
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b42:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fae9 	bl	800211e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb2f 	bl	80021b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	3305      	adds	r3, #5
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021a      	lsls	r2, r3, #8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b9e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ba0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_ETH_Init+0x1f4>)
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_ETH_Init+0x1f8>)
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58000400 	.word	0x58000400
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	ffff8001 	.word	0xffff8001
 8001bf8:	0c020060 	.word	0x0c020060
 8001bfc:	0c20c000 	.word	0x0c20c000

08001c00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c1a:	f001 fe0f 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8001c1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d804      	bhi.n	8001c32 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e022      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d204      	bcs.n	8001c44 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e019      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d915      	bls.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d804      	bhi.n	8001c5e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e00c      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d804      	bhi.n	8001c70 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e003      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001c76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	02160ebf 	.word	0x02160ebf
 8001c90:	03938700 	.word	0x03938700
 8001c94:	05f5e0ff 	.word	0x05f5e0ff
 8001c98:	08f0d17f 	.word	0x08f0d17f
 8001c9c:	0ee6b27f 	.word	0x0ee6b27f

08001ca0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7b1b      	ldrb	r3, [r3, #12]
 8001cc0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7b5b      	ldrb	r3, [r3, #13]
 8001cc8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	7b9b      	ldrb	r3, [r3, #14]
 8001cd0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7bdb      	ldrb	r3, [r3, #15]
 8001cd8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	7c12      	ldrb	r2, [r2, #16]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d102      	bne.n	8001cea <ETH_SetMACConfig+0x4a>
 8001ce4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ce8:	e000      	b.n	8001cec <ETH_SetMACConfig+0x4c>
 8001cea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	7c52      	ldrb	r2, [r2, #17]
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d102      	bne.n	8001cfc <ETH_SetMACConfig+0x5c>
 8001cf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cfa:	e000      	b.n	8001cfe <ETH_SetMACConfig+0x5e>
 8001cfc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7c9b      	ldrb	r3, [r3, #18]
 8001d04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d06:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7f1b      	ldrb	r3, [r3, #28]
 8001d18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7f5b      	ldrb	r3, [r3, #29]
 8001d20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	7f92      	ldrb	r2, [r2, #30]
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d102      	bne.n	8001d32 <ETH_SetMACConfig+0x92>
 8001d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d30:	e000      	b.n	8001d34 <ETH_SetMACConfig+0x94>
 8001d32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7fdb      	ldrb	r3, [r3, #31]
 8001d3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d102      	bne.n	8001d4e <ETH_SetMACConfig+0xae>
 8001d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4c:	e000      	b.n	8001d50 <ETH_SetMACConfig+0xb0>
 8001d4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b56      	ldr	r3, [pc, #344]	@ (8001ecc <ETH_SetMACConfig+0x22c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001da0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d102      	bne.n	8001db2 <ETH_SetMACConfig+0x112>
 8001dac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001db0:	e000      	b.n	8001db4 <ETH_SetMACConfig+0x114>
 8001db2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001db4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4b42      	ldr	r3, [pc, #264]	@ (8001ed0 <ETH_SetMACConfig+0x230>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <ETH_SetMACConfig+0x234>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	430b      	orrs	r3, r1
 8001df4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001dfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d101      	bne.n	8001e12 <ETH_SetMACConfig+0x172>
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	e000      	b.n	8001e14 <ETH_SetMACConfig+0x174>
 8001e12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e26:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001e3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001e44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e52:	f023 0103 	bic.w	r1, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001e6a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d101      	bne.n	8001e8e <ETH_SetMACConfig+0x1ee>
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	e000      	b.n	8001e90 <ETH_SetMACConfig+0x1f0>
 8001e8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001e98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001ea2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001eb0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	00048083 	.word	0x00048083
 8001ed0:	c0f88000 	.word	0xc0f88000
 8001ed4:	fffffef0 	.word	0xfffffef0

08001ed8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <ETH_SetDMAConfig+0xf8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	6811      	ldr	r1, [r2, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001efe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <ETH_SetDMAConfig+0xfc>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f30:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7b5b      	ldrb	r3, [r3, #13]
 8001f36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <ETH_SetDMAConfig+0x100>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	430b      	orrs	r3, r1
 8001f58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f5c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	7d1b      	ldrb	r3, [r3, #20]
 8001f68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7f5b      	ldrb	r3, [r3, #29]
 8001f70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <ETH_SetDMAConfig+0x104>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f92:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
 8001f9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <ETH_SetDMAConfig+0x108>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	68f9      	ldr	r1, [r7, #12]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	ffff87fd 	.word	0xffff87fd
 8001fd4:	ffff2ffe 	.word	0xffff2ffe
 8001fd8:	fffec000 	.word	0xfffec000
 8001fdc:	ffc0efef 	.word	0xffc0efef
 8001fe0:	7fc0ffff 	.word	0x7fc0ffff

08001fe4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0a4      	sub	sp, #144	@ 0x90
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002024:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800202c:	2300      	movs	r3, #0
 800202e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800203c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002040:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800205e:	2300      	movs	r3, #0
 8002060:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002062:	2300      	movs	r3, #0
 8002064:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002066:	2300      	movs	r3, #0
 8002068:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800207c:	2320      	movs	r3, #32
 800207e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800208e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002094:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002098:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020be:	2300      	movs	r3, #0
 80020c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fde6 	bl	8001ca0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002104:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fee1 	bl	8001ed8 <ETH_SetDMAConfig>
}
 8002116:	bf00      	nop
 8002118:	3790      	adds	r7, #144	@ 0x90
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e01d      	b.n	8002168 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	3206      	adds	r2, #6
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d9de      	bls.n	800212c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217c:	461a      	mov	r2, r3
 800217e:	2303      	movs	r3, #3
 8002180:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002190:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e023      	b.n	8002206 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	3212      	adds	r2, #18
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d9d8      	bls.n	80021be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002232:	461a      	mov	r2, r3
 8002234:	2303      	movs	r3, #3
 8002236:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002246:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800225a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800227a:	4b89      	ldr	r3, [pc, #548]	@ (80024a0 <HAL_GPIO_Init+0x234>)
 800227c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227e:	e194      	b.n	80025aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8186 	beq.w	80025a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x44>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e6:	2201      	movs	r2, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b03      	cmp	r3, #3
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	69b9      	ldr	r1, [r7, #24]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80e0 	beq.w	80025a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e4:	4b2f      	ldr	r3, [pc, #188]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ea:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a29      	ldr	r2, [pc, #164]	@ (80024a8 <HAL_GPIO_Init+0x23c>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_GPIO_Init+0x240>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d052      	beq.n	80024d4 <HAL_GPIO_Init+0x268>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1f      	ldr	r2, [pc, #124]	@ (80024b0 <HAL_GPIO_Init+0x244>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x22e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <HAL_GPIO_Init+0x248>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x22a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1d      	ldr	r2, [pc, #116]	@ (80024b8 <HAL_GPIO_Init+0x24c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x226>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <HAL_GPIO_Init+0x250>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x222>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_GPIO_Init+0x254>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x21e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_GPIO_Init+0x258>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a19      	ldr	r2, [pc, #100]	@ (80024c8 <HAL_GPIO_Init+0x25c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_GPIO_Init+0x260>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x212>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_GPIO_Init+0x264>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x20e>
 8002476:	2309      	movs	r3, #9
 8002478:	e02d      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800247a:	230a      	movs	r3, #10
 800247c:	e02b      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800247e:	2308      	movs	r3, #8
 8002480:	e029      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002482:	2307      	movs	r3, #7
 8002484:	e027      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002486:	2306      	movs	r3, #6
 8002488:	e025      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800248a:	2305      	movs	r3, #5
 800248c:	e023      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800248e:	2304      	movs	r3, #4
 8002490:	e021      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002492:	2303      	movs	r3, #3
 8002494:	e01f      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002496:	2302      	movs	r3, #2
 8002498:	e01d      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800249a:	2301      	movs	r3, #1
 800249c:	e01b      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800249e:	bf00      	nop
 80024a0:	58000080 	.word	0x58000080
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58000400 	.word	0x58000400
 80024ac:	58020000 	.word	0x58020000
 80024b0:	58020400 	.word	0x58020400
 80024b4:	58020800 	.word	0x58020800
 80024b8:	58020c00 	.word	0x58020c00
 80024bc:	58021000 	.word	0x58021000
 80024c0:	58021400 	.word	0x58021400
 80024c4:	58021800 	.word	0x58021800
 80024c8:	58021c00 	.word	0x58021c00
 80024cc:	58022000 	.word	0x58022000
 80024d0:	58022400 	.word	0x58022400
 80024d4:	2300      	movs	r3, #0
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e6:	4938      	ldr	r1, [pc, #224]	@ (80025c8 <HAL_GPIO_Init+0x35c>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800251a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f ae63 	bne.w	8002280 <HAL_GPIO_Init+0x14>
  }
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	3724      	adds	r7, #36	@ 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	58000400 	.word	0x58000400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	041a      	lsls	r2, r3, #16
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43d9      	mvns	r1, r3
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	400b      	ands	r3, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af02      	add	r7, sp, #8
 8002638:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0fe      	b.n	8002842 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe ffad 	bl	80015b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f004 fc5a 	bl	8006f24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7c1a      	ldrb	r2, [r3, #16]
 8002678:	f88d 2000 	strb.w	r2, [sp]
 800267c:	3304      	adds	r3, #4
 800267e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002680:	f004 fbde 	bl	8006e40 <USB_CoreInit>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0d5      	b.n	8002842 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f004 fc52 	bl	8006f46 <USB_SetCurrentMode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0c6      	b.n	8002842 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e04a      	b.n	8002750 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3315      	adds	r3, #21
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3314      	adds	r3, #20
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	b298      	uxth	r0, r3
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	332e      	adds	r3, #46	@ 0x2e
 80026f6:	4602      	mov	r2, r0
 80026f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3318      	adds	r3, #24
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	331c      	adds	r3, #28
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3320      	adds	r3, #32
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3324      	adds	r3, #36	@ 0x24
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3af      	bcc.n	80026ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e044      	b.n	80027ea <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	3301      	adds	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	791b      	ldrb	r3, [r3, #4]
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3b5      	bcc.n	8002760 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7c1a      	ldrb	r2, [r3, #16]
 80027fc:	f88d 2000 	strb.w	r2, [sp]
 8002800:	3304      	adds	r3, #4
 8002802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002804:	f004 fbec 	bl	8006fe0 <USB_DevInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e013      	b.n	8002842 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7b1b      	ldrb	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f80b 	bl	800284c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f004 fda7 	bl	800738e <USB_DevDisconnect>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_PCDEx_ActivateLPM+0x44>)
 800287c:	4313      	orrs	r3, r2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	10000003 	.word	0x10000003

08002894 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00a      	beq.n	80028be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e01f      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e01d      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	490f      	ldr	r1, [pc, #60]	@ (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ce:	f7fe ff69 	bl	80017a4 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028d4:	e009      	b.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d6:	f7fe ff65 	bl	80017a4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028e4:	d901      	bls.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e007      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_PWREx_ConfigSupply+0x70>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f6:	d1ee      	bne.n	80028d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	58024800 	.word	0x58024800

08002908 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800290c:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	58024800 	.word	0x58024800

08002928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f000 bc48 	b.w	80031cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8088 	beq.w	8002a5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	4b99      	ldr	r3, [pc, #612]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002954:	4b96      	ldr	r3, [pc, #600]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295c:	2b10      	cmp	r3, #16
 800295e:	d007      	beq.n	8002970 <HAL_RCC_OscConfig+0x48>
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002962:	2b18      	cmp	r3, #24
 8002964:	d111      	bne.n	800298a <HAL_RCC_OscConfig+0x62>
 8002966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d10c      	bne.n	800298a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d06d      	beq.n	8002a58 <HAL_RCC_OscConfig+0x130>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d169      	bne.n	8002a58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f000 bc21 	b.w	80031cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x7a>
 8002994:	4b86      	ldr	r3, [pc, #536]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a85      	ldr	r2, [pc, #532]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x9c>
 80029aa:	4b81      	ldr	r3, [pc, #516]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a80      	ldr	r2, [pc, #512]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 80029ce:	4b78      	ldr	r3, [pc, #480]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a77      	ldr	r2, [pc, #476]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a74      	ldr	r2, [pc, #464]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd8>
 80029e8:	4b71      	ldr	r3, [pc, #452]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a70      	ldr	r2, [pc, #448]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fecc 	bl	80017a4 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fec8 	bl	80017a4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e3d4      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe feb8 	bl	80017a4 <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe feb4 	bl	80017a4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e3c0      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a4a:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x110>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80ca 	beq.w	8002bfc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a68:	4b51      	ldr	r3, [pc, #324]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a72:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_RCC_OscConfig+0x166>
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2b18      	cmp	r3, #24
 8002a82:	d156      	bne.n	8002b32 <HAL_RCC_OscConfig+0x20a>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d151      	bne.n	8002b32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8e:	4b48      	ldr	r3, [pc, #288]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e392      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aa6:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0219 	bic.w	r2, r3, #25
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	493f      	ldr	r1, [pc, #252]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe74 	bl	80017a4 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fe70 	bl	80017a4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e37c      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad2:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	f7fe fe91 	bl	8001804 <HAL_GetREVID>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d817      	bhi.n	8002b1c <HAL_RCC_OscConfig+0x1f4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b40      	cmp	r3, #64	@ 0x40
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_OscConfig+0x1de>
 8002af4:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002afc:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	e07a      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	031b      	lsls	r3, r3, #12
 8002b14:	4926      	ldr	r1, [pc, #152]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b1a:	e06f      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	4921      	ldr	r1, [pc, #132]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	e064      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d047      	beq.n	8002bca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0219 	bic.w	r2, r3, #25
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	491a      	ldr	r1, [pc, #104]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fe2a 	bl	80017a4 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fe26 	bl	80017a4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e332      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	f7fe fe47 	bl	8001804 <HAL_GetREVID>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d819      	bhi.n	8002bb4 <HAL_RCC_OscConfig+0x28c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b40      	cmp	r3, #64	@ 0x40
 8002b86:	d108      	bne.n	8002b9a <HAL_RCC_OscConfig+0x272>
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	e030      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	031b      	lsls	r3, r3, #12
 8002ba8:	4901      	ldr	r1, [pc, #4]	@ (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 8002bae:	e025      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	4997      	ldr	r1, [pc, #604]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b95      	ldr	r3, [pc, #596]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a94      	ldr	r2, [pc, #592]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fde5 	bl	80017a4 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fde1 	bl	80017a4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e2ed      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a9 	beq.w	8002d5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c14:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d007      	beq.n	8002c30 <HAL_RCC_OscConfig+0x308>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b18      	cmp	r3, #24
 8002c24:	d13a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x374>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d135      	bne.n	8002c9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c30:	4b7b      	ldr	r3, [pc, #492]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_OscConfig+0x320>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b80      	cmp	r3, #128	@ 0x80
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e2c1      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c48:	f7fe fddc 	bl	8001804 <HAL_GetREVID>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d817      	bhi.n	8002c86 <HAL_RCC_OscConfig+0x35e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d108      	bne.n	8002c70 <HAL_RCC_OscConfig+0x348>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c66:	4a6e      	ldr	r2, [pc, #440]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c6e:	e075      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c70:	4b6b      	ldr	r3, [pc, #428]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	4968      	ldr	r1, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c84:	e06a      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c86:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	4962      	ldr	r1, [pc, #392]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c9a:	e05f      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d042      	beq.n	8002d2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fd78 	bl	80017a4 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fd74 	bl	80017a4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e280      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cca:	4b55      	ldr	r3, [pc, #340]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cd6:	f7fe fd95 	bl	8001804 <HAL_GetREVID>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d817      	bhi.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d108      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3d6>
 8002cec:	4b4c      	ldr	r3, [pc, #304]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cfa:	6053      	str	r3, [r2, #4]
 8002cfc:	e02e      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
 8002cfe:	4b48      	ldr	r3, [pc, #288]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	4944      	ldr	r1, [pc, #272]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e023      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
 8002d14:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	493f      	ldr	r1, [pc, #252]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	e018      	b.n	8002d5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fd35 	bl	80017a4 <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fd31 	bl	80017a4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e23d      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d50:	4b33      	ldr	r3, [pc, #204]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d036      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d019      	beq.n	8002da4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d74:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fd12 	bl	80017a4 <HAL_GetTick>
 8002d80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fe fd0e 	bl	80017a4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e21a      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d96:	4b22      	ldr	r3, [pc, #136]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x45c>
 8002da2:	e018      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fcf8 	bl	80017a4 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fcf4 	bl	80017a4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e200      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d039      	beq.n	8002e56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dea:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002df4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fcd5 	bl	80017a4 <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfe:	f7fe fcd1 	bl	80017a4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1dd      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x4d6>
 8002e1c:	e01b      	b.n	8002e56 <HAL_RCC_OscConfig+0x52e>
 8002e1e:	bf00      	nop
 8002e20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e24:	4b9b      	ldr	r3, [pc, #620]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a9a      	ldr	r2, [pc, #616]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fcb8 	bl	80017a4 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e38:	f7fe fcb4 	bl	80017a4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1c0      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e4a:	4b92      	ldr	r3, [pc, #584]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8081 	beq.w	8002f66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e64:	4b8c      	ldr	r3, [pc, #560]	@ (8003098 <HAL_RCC_OscConfig+0x770>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a8b      	ldr	r2, [pc, #556]	@ (8003098 <HAL_RCC_OscConfig+0x770>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e70:	f7fe fc98 	bl	80017a4 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fc94 	bl	80017a4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1a0      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e8a:	4b83      	ldr	r3, [pc, #524]	@ (8003098 <HAL_RCC_OscConfig+0x770>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x584>
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eaa:	e02d      	b.n	8002f08 <HAL_RCC_OscConfig+0x5e0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002eb4:	4b77      	ldr	r3, [pc, #476]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a76      	ldr	r2, [pc, #472]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec0:	4b74      	ldr	r3, [pc, #464]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a73      	ldr	r2, [pc, #460]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x5e0>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c8>
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	4a6e      	ldr	r2, [pc, #440]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x5e0>
 8002ef0:	4b68      	ldr	r3, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef4:	4a67      	ldr	r2, [pc, #412]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efc:	4b65      	ldr	r3, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a64      	ldr	r2, [pc, #400]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe fc48 	bl	80017a4 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe fc44 	bl	80017a4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e14e      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2e:	4b59      	ldr	r3, [pc, #356]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCC_OscConfig+0x5f0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fc32 	bl	80017a4 <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fc2e 	bl	80017a4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e138      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ee      	bne.n	8002f44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 812d 	beq.w	80031ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f70:	4b48      	ldr	r3, [pc, #288]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f78:	2b18      	cmp	r3, #24
 8002f7a:	f000 80bd 	beq.w	80030f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	f040 809e 	bne.w	80030c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a41      	ldr	r2, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fc06 	bl	80017a4 <HAL_GetTick>
 8002f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fc02 	bl	80017a4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e10e      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fae:	4b39      	ldr	r3, [pc, #228]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fba:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fbe:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_RCC_OscConfig+0x774>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4931      	ldr	r1, [pc, #196]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003004:	4923      	ldr	r1, [pc, #140]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800300a:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003016:	4b1f      	ldr	r3, [pc, #124]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301a:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x778>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	491b      	ldr	r1, [pc, #108]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	f023 020c 	bic.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4917      	ldr	r1, [pc, #92]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800303c:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	f023 0202 	bic.w	r2, r3, #2
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	4912      	ldr	r1, [pc, #72]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800304e:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	4a10      	ldr	r2, [pc, #64]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305a:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_RCC_OscConfig+0x76c>)
 8003084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fb8b 	bl	80017a4 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003090:	e011      	b.n	80030b6 <HAL_RCC_OscConfig+0x78e>
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
 8003098:	58024800 	.word	0x58024800
 800309c:	fffffc0c 	.word	0xfffffc0c
 80030a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fb7e 	bl	80017a4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e08a      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x77c>
 80030c2:	e082      	b.n	80031ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b43      	ldr	r3, [pc, #268]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a42      	ldr	r2, [pc, #264]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fb68 	bl	80017a4 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fb64 	bl	80017a4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e070      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ea:	4b3a      	ldr	r3, [pc, #232]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x7b0>
 80030f6:	e068      	b.n	80031ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030fe:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	2b01      	cmp	r3, #1
 800310a:	d031      	beq.n	8003170 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d12a      	bne.n	8003170 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d122      	bne.n	8003170 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d11a      	bne.n	8003170 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0a5b      	lsrs	r3, r3, #9
 800313e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d111      	bne.n	8003170 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d108      	bne.n	8003170 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0e1b      	lsrs	r3, r3, #24
 8003162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e02b      	b.n	80031cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003174:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 8003176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800317e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d01f      	beq.n	80031ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003196:	f7fe fb05 	bl	80017a4 <HAL_GetTick>
 800319a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800319c:	bf00      	nop
 800319e:	f7fe fb01 	bl	80017a4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d0f9      	beq.n	800319e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80031ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_RCC_OscConfig+0x8b0>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031b6:	00d2      	lsls	r2, r2, #3
 80031b8:	4906      	ldr	r1, [pc, #24]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_RCC_OscConfig+0x8ac>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3730      	adds	r7, #48	@ 0x30
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	58024400 	.word	0x58024400
 80031d8:	ffff0007 	.word	0xffff0007

080031dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e19c      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b8a      	ldr	r3, [pc, #552]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d910      	bls.n	8003220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b87      	ldr	r3, [pc, #540]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 020f 	bic.w	r2, r3, #15
 8003206:	4985      	ldr	r1, [pc, #532]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b83      	ldr	r3, [pc, #524]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e184      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	4b7b      	ldr	r3, [pc, #492]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003238:	429a      	cmp	r2, r3
 800323a:	d908      	bls.n	800324e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800323c:	4b78      	ldr	r3, [pc, #480]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4975      	ldr	r1, [pc, #468]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800324a:	4313      	orrs	r3, r2
 800324c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003266:	429a      	cmp	r2, r3
 8003268:	d908      	bls.n	800327c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800326a:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	496a      	ldr	r1, [pc, #424]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	4b64      	ldr	r3, [pc, #400]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003294:	429a      	cmp	r2, r3
 8003296:	d908      	bls.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003298:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	495e      	ldr	r1, [pc, #376]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	4b59      	ldr	r3, [pc, #356]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d908      	bls.n	80032d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032c6:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4953      	ldr	r1, [pc, #332]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f023 020f 	bic.w	r2, r3, #15
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4947      	ldr	r1, [pc, #284]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003302:	4313      	orrs	r3, r2
 8003304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d055      	beq.n	80033be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003312:	4b43      	ldr	r3, [pc, #268]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4940      	ldr	r1, [pc, #256]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003320:	4313      	orrs	r3, r2
 8003322:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d107      	bne.n	800333c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800332c:	4b3c      	ldr	r3, [pc, #240]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d121      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0f6      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003344:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d115      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0ea      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800335c:	4b30      	ldr	r3, [pc, #192]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0de      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336c:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0d6      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800337c:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f023 0207 	bic.w	r2, r3, #7
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4925      	ldr	r1, [pc, #148]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338e:	f7fe fa09 	bl	80017a4 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003394:	e00a      	b.n	80033ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe fa05 	bl	80017a4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0be      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d1eb      	bne.n	8003396 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d208      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033da:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	490e      	ldr	r1, [pc, #56]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d214      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b08      	ldr	r3, [pc, #32]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 020f 	bic.w	r2, r3, #15
 8003402:	4906      	ldr	r1, [pc, #24]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b04      	ldr	r3, [pc, #16]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e086      	b.n	800352a <HAL_RCC_ClockConfig+0x34e>
 800341c:	52002000 	.word	0x52002000
 8003420:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800343c:	429a      	cmp	r2, r3
 800343e:	d208      	bcs.n	8003452 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003440:	4b3c      	ldr	r3, [pc, #240]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4939      	ldr	r1, [pc, #228]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 800344e:	4313      	orrs	r3, r2
 8003450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d010      	beq.n	8003480 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800346a:	429a      	cmp	r2, r3
 800346c:	d208      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800346e:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	492e      	ldr	r1, [pc, #184]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003498:	429a      	cmp	r2, r3
 800349a:	d208      	bcs.n	80034ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4922      	ldr	r1, [pc, #136]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d208      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4917      	ldr	r1, [pc, #92]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034dc:	f000 f834 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	4912      	ldr	r1, [pc, #72]	@ (8003538 <HAL_RCC_ClockConfig+0x35c>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_RCC_ClockConfig+0x358>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_RCC_ClockConfig+0x35c>)
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <HAL_RCC_ClockConfig+0x360>)
 8003512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003514:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <HAL_RCC_ClockConfig+0x364>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_RCC_ClockConfig+0x368>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fe12 	bl	8001148 <HAL_InitTick>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
 8003538:	0800b248 	.word	0x0800b248
 800353c:	24000004 	.word	0x24000004
 8003540:	24000000 	.word	0x24000000
 8003544:	24000008 	.word	0x24000008

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800354e:	4bb3      	ldr	r3, [pc, #716]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003556:	2b18      	cmp	r3, #24
 8003558:	f200 8155 	bhi.w	8003806 <HAL_RCC_GetSysClockFreq+0x2be>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <HAL_RCC_GetSysClockFreq+0x1c>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	080035c9 	.word	0x080035c9
 8003568:	08003807 	.word	0x08003807
 800356c:	08003807 	.word	0x08003807
 8003570:	08003807 	.word	0x08003807
 8003574:	08003807 	.word	0x08003807
 8003578:	08003807 	.word	0x08003807
 800357c:	08003807 	.word	0x08003807
 8003580:	08003807 	.word	0x08003807
 8003584:	080035ef 	.word	0x080035ef
 8003588:	08003807 	.word	0x08003807
 800358c:	08003807 	.word	0x08003807
 8003590:	08003807 	.word	0x08003807
 8003594:	08003807 	.word	0x08003807
 8003598:	08003807 	.word	0x08003807
 800359c:	08003807 	.word	0x08003807
 80035a0:	08003807 	.word	0x08003807
 80035a4:	080035f5 	.word	0x080035f5
 80035a8:	08003807 	.word	0x08003807
 80035ac:	08003807 	.word	0x08003807
 80035b0:	08003807 	.word	0x08003807
 80035b4:	08003807 	.word	0x08003807
 80035b8:	08003807 	.word	0x08003807
 80035bc:	08003807 	.word	0x08003807
 80035c0:	08003807 	.word	0x08003807
 80035c4:	080035fb 	.word	0x080035fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c8:	4b94      	ldr	r3, [pc, #592]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035d4:	4b91      	ldr	r3, [pc, #580]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	4a90      	ldr	r2, [pc, #576]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035e6:	e111      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ea:	61bb      	str	r3, [r7, #24]
      break;
 80035ec:	e10e      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035f0:	61bb      	str	r3, [r7, #24]
      break;
 80035f2:	e10b      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035f6:	61bb      	str	r3, [r7, #24]
      break;
 80035f8:	e108      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003604:	4b85      	ldr	r3, [pc, #532]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800360e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003610:	4b82      	ldr	r3, [pc, #520]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800361a:	4b80      	ldr	r3, [pc, #512]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	08db      	lsrs	r3, r3, #3
 8003620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80e1 	beq.w	8003800 <HAL_RCC_GetSysClockFreq+0x2b8>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b02      	cmp	r3, #2
 8003642:	f000 8083 	beq.w	800374c <HAL_RCC_GetSysClockFreq+0x204>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b02      	cmp	r3, #2
 800364a:	f200 80a1 	bhi.w	8003790 <HAL_RCC_GetSysClockFreq+0x248>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x114>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d056      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x1c0>
 800365a:	e099      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800365c:	4b6f      	ldr	r3, [pc, #444]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003668:	4b6c      	ldr	r3, [pc, #432]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	4a6b      	ldr	r2, [pc, #428]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003692:	4b62      	ldr	r3, [pc, #392]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036c2:	e087      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003830 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d6:	4b51      	ldr	r3, [pc, #324]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003706:	e065      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b40      	ldr	r3, [pc, #256]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a02 	vldr	s12, [r7, #8]
 800372e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800374a:	e043      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2f0>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003772:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800378e:	e021      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003834 <HAL_RCC_GetSysClockFreq+0x2ec>
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800382c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	0a5b      	lsrs	r3, r3, #9
 80037da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037de:	3301      	adds	r3, #1
 80037e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f8:	ee17 3a90 	vmov	r3, s15
 80037fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037fe:	e005      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
      break;
 8003804:	e002      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003806:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003808:	61bb      	str	r3, [r7, #24]
      break;
 800380a:	bf00      	nop
  }

  return sysclockfreq;
 800380c:	69bb      	ldr	r3, [r7, #24]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	@ 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	58024400 	.word	0x58024400
 8003820:	03d09000 	.word	0x03d09000
 8003824:	003d0900 	.word	0x003d0900
 8003828:	007a1200 	.word	0x007a1200
 800382c:	46000000 	.word	0x46000000
 8003830:	4c742400 	.word	0x4c742400
 8003834:	4a742400 	.word	0x4a742400
 8003838:	4af42400 	.word	0x4af42400

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003842:	f7ff fe81 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_RCC_GetHCLKFreq+0x50>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490f      	ldr	r1, [pc, #60]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x54>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_RCC_GetHCLKFreq+0x50>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	4a09      	ldr	r2, [pc, #36]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x54>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <HAL_RCC_GetHCLKFreq+0x58>)
 8003878:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800387a:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <HAL_RCC_GetHCLKFreq+0x5c>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_RCC_GetHCLKFreq+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	58024400 	.word	0x58024400
 8003890:	0800b248 	.word	0x0800b248
 8003894:	24000004 	.word	0x24000004
 8003898:	24000000 	.word	0x24000000

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038a0:	f7ff ffcc 	bl	800383c <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4904      	ldr	r1, [pc, #16]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	58024400 	.word	0x58024400
 80038c4:	0800b248 	.word	0x0800b248

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038cc:	f7ff ffb6 	bl	800383c <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	58024400 	.word	0x58024400
 80038f0:	0800b248 	.word	0x0800b248

080038f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	223f      	movs	r2, #63	@ 0x3f
 8003902:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0207 	and.w	r2, r3, #7
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003910:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800391c:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003934:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_RCC_GetClockConfig+0x7c>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_GetClockConfig+0x80>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	58024400 	.word	0x58024400
 8003974:	52002000 	.word	0x52002000

08003978 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b0ca      	sub	sp, #296	@ 0x128
 800397e:	af00      	add	r7, sp, #0
 8003980:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800398a:	2300      	movs	r3, #0
 800398c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800399c:	2500      	movs	r5, #0
 800399e:	ea54 0305 	orrs.w	r3, r4, r5
 80039a2:	d049      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039b4:	d828      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ba:	d01a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039c0:	d822      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ca:	d007      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039cc:	e01c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ce:	4bb8      	ldr	r3, [pc, #736]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	4ab7      	ldr	r2, [pc, #732]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039da:	e01a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	3308      	adds	r3, #8
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fc8f 	bl	8005308 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039f0:	e00f      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	3328      	adds	r3, #40	@ 0x28
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fd36 	bl	800546c <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a06:	e004      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a1a:	4ba5      	ldr	r3, [pc, #660]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a28:	4aa1      	ldr	r2, [pc, #644]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a44:	f04f 0900 	mov.w	r9, #0
 8003a48:	ea58 0309 	orrs.w	r3, r8, r9
 8003a4c:	d047      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d82a      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a75 	.word	0x08003a75
 8003a64:	08003a83 	.word	0x08003a83
 8003a68:	08003a99 	.word	0x08003a99
 8003a6c:	08003ab7 	.word	0x08003ab7
 8003a70:	08003ab7 	.word	0x08003ab7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b8e      	ldr	r3, [pc, #568]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	4a8d      	ldr	r2, [pc, #564]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a80:	e01a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	3308      	adds	r3, #8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 fc3c 	bl	8005308 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	3328      	adds	r3, #40	@ 0x28
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fce3 	bl	800546c <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aac:	e004      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac0:	4b7b      	ldr	r3, [pc, #492]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	f023 0107 	bic.w	r1, r3, #7
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	4a78      	ldr	r2, [pc, #480]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003aea:	f04f 0b00 	mov.w	fp, #0
 8003aee:	ea5a 030b 	orrs.w	r3, sl, fp
 8003af2:	d04c      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d030      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b04:	d829      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b08:	d02d      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b0c:	d825      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d018      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b12:	2b80      	cmp	r3, #128	@ 0x80
 8003b14:	d821      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b1e:	e01c      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b20:	4b63      	ldr	r3, [pc, #396]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	4a62      	ldr	r2, [pc, #392]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	3308      	adds	r3, #8
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 fbe6 	bl	8005308 <RCCEx_PLL2_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b42:	e011      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	3328      	adds	r3, #40	@ 0x28
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fc8d 	bl	800546c <RCCEx_PLL3_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b70:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ba4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d053      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bba:	d035      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bc0:	d82e      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bc6:	d031      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bcc:	d828      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd2:	d01a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd8:	d822      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be2:	d007      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003be4:	e01c      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be6:	4b32      	ldr	r3, [pc, #200]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	4a31      	ldr	r2, [pc, #196]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bf2:	e01c      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 fb83 	bl	8005308 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c08:	e011      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	3328      	adds	r3, #40	@ 0x28
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 fc2a 	bl	800546c <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e006      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c36:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c46:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d056      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c82:	d038      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c88:	d831      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c8e:	d034      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c94:	d82b      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca0:	d825      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cac:	e01f      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	4aa1      	ldr	r2, [pc, #644]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fb1c 	bl	8005308 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e011      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	3328      	adds	r3, #40	@ 0x28
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fbc3 	bl	800546c <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d04:	4b8e      	ldr	r3, [pc, #568]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d14:	4a8a      	ldr	r2, [pc, #552]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1a:	e003      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4313      	orrs	r3, r2
 8003d42:	d03a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	2b30      	cmp	r3, #48	@ 0x30
 8003d4c:	d01f      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d4e:	2b30      	cmp	r3, #48	@ 0x30
 8003d50:	d819      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d815      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d019      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d111      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d62:	4b77      	ldr	r3, [pc, #476]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4a76      	ldr	r2, [pc, #472]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d6e:	e011      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	3308      	adds	r3, #8
 8003d76:	2102      	movs	r1, #2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 fac5 	bl	8005308 <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d8c:	e002      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d9c:	4b68      	ldr	r3, [pc, #416]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	4a65      	ldr	r2, [pc, #404]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db0:	e003      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d051      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de4:	d035      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dea:	d82e      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003df0:	d031      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003df2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003df6:	d828      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfc:	d01a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e02:	d822      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0c:	d007      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e0e:	e01c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e10:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	3308      	adds	r3, #8
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fa6e 	bl	8005308 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e32:	e011      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	3328      	adds	r3, #40	@ 0x28
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fb15 	bl	800546c <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e60:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6e:	4a34      	ldr	r2, [pc, #208]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d056      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea8:	d033      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003eaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eae:	d82c      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003eb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eb4:	d02f      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eba:	d826      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ec0:	d02b      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ec6:	d820      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ecc:	d012      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed2:	d81a      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d022      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d115      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fa0e 	bl	8005308 <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e015      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3328      	adds	r3, #40	@ 0x28
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fab5 	bl	800546c <RCCEx_PLL3_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f08:	e00a      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f12:	bf00      	nop
 8003f14:	e004      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f36:	4a02      	ldr	r2, [pc, #8]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f3e:	bf00      	nop
 8003f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d055      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f78:	d033      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f7e:	d82c      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f84:	d02f      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8a:	d826      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f90:	d02b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f96:	d820      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f9c:	d012      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fa2:	d81a      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d022      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fac:	d115      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f9a6 	bl	8005308 <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e015      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	3328      	adds	r3, #40	@ 0x28
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fa4d 	bl	800546c <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ff8:	4ba3      	ldr	r3, [pc, #652]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004008:	4a9f      	ldr	r2, [pc, #636]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800400a:	430b      	orrs	r3, r1
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800402e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d037      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004042:	d00e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004048:	d816      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d018      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800404e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004052:	d111      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004054:	4b8c      	ldr	r3, [pc, #560]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	4a8b      	ldr	r2, [pc, #556]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004060:	e00f      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004066:	3308      	adds	r3, #8
 8004068:	2101      	movs	r1, #1
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f94c 	bl	8005308 <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800408a:	4b7f      	ldr	r3, [pc, #508]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800408c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a7b      	ldr	r2, [pc, #492]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409a:	430b      	orrs	r3, r1
 800409c:	6513      	str	r3, [r2, #80]	@ 0x50
 800409e:	e003      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4313      	orrs	r3, r2
 80040c6:	d039      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d81c      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040d2:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	08004115 	.word	0x08004115
 80040dc:	080040e9 	.word	0x080040e9
 80040e0:	080040f7 	.word	0x080040f7
 80040e4:	08004115 	.word	0x08004115
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4b67      	ldr	r3, [pc, #412]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	4a66      	ldr	r2, [pc, #408]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040f4:	e00f      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	3308      	adds	r3, #8
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f902 	bl	8005308 <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800410a:	e004      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800411e:	4b5a      	ldr	r3, [pc, #360]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	f023 0103 	bic.w	r1, r3, #3
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412c:	4a56      	ldr	r2, [pc, #344]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412e:	430b      	orrs	r3, r1
 8004130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004152:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	f000 809f 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415e:	4b4b      	ldr	r3, [pc, #300]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4a      	ldr	r2, [pc, #296]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004168:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800416a:	f7fd fb1b 	bl	80017a4 <HAL_GetTick>
 800416e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004172:	e00b      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fd fb16 	bl	80017a4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b64      	cmp	r3, #100	@ 0x64
 8004182:	d903      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418c:	4b3f      	ldr	r3, [pc, #252]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ed      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419c:	2b00      	cmp	r3, #0
 800419e:	d179      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041ac:	4053      	eors	r3, r2
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d015      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c2:	4b31      	ldr	r3, [pc, #196]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a30      	ldr	r2, [pc, #192]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041da:	4a2b      	ldr	r2, [pc, #172]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ee:	d118      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fad8 	bl	80017a4 <HAL_GetTick>
 80041f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041f8:	e00d      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fa:	f7fd fad3 	bl	80017a4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004204:	1ad2      	subs	r2, r2, r3
 8004206:	f241 3388 	movw	r3, #5000	@ 0x1388
 800420a:	429a      	cmp	r2, r3
 800420c:	d903      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004214:	e005      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004216:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0eb      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004226:	2b00      	cmp	r3, #0
 8004228:	d129      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423a:	d10e      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800423c:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800424c:	091a      	lsrs	r2, r3, #4
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004250:	4013      	ands	r3, r2
 8004252:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6113      	str	r3, [r2, #16]
 8004258:	e005      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800425a:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004260:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004264:	6113      	str	r3, [r2, #16]
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004268:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004276:	4a04      	ldr	r2, [pc, #16]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	e00e      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004286:	e009      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004288:	58024400 	.word	0x58024400
 800428c:	58024800 	.word	0x58024800
 8004290:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 0301 	and.w	r3, r2, #1
 80042a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f000 8089 	beq.w	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c4:	2b28      	cmp	r3, #40	@ 0x28
 80042c6:	d86b      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080043a9 	.word	0x080043a9
 80042d4:	080043a1 	.word	0x080043a1
 80042d8:	080043a1 	.word	0x080043a1
 80042dc:	080043a1 	.word	0x080043a1
 80042e0:	080043a1 	.word	0x080043a1
 80042e4:	080043a1 	.word	0x080043a1
 80042e8:	080043a1 	.word	0x080043a1
 80042ec:	080043a1 	.word	0x080043a1
 80042f0:	08004375 	.word	0x08004375
 80042f4:	080043a1 	.word	0x080043a1
 80042f8:	080043a1 	.word	0x080043a1
 80042fc:	080043a1 	.word	0x080043a1
 8004300:	080043a1 	.word	0x080043a1
 8004304:	080043a1 	.word	0x080043a1
 8004308:	080043a1 	.word	0x080043a1
 800430c:	080043a1 	.word	0x080043a1
 8004310:	0800438b 	.word	0x0800438b
 8004314:	080043a1 	.word	0x080043a1
 8004318:	080043a1 	.word	0x080043a1
 800431c:	080043a1 	.word	0x080043a1
 8004320:	080043a1 	.word	0x080043a1
 8004324:	080043a1 	.word	0x080043a1
 8004328:	080043a1 	.word	0x080043a1
 800432c:	080043a1 	.word	0x080043a1
 8004330:	080043a9 	.word	0x080043a9
 8004334:	080043a1 	.word	0x080043a1
 8004338:	080043a1 	.word	0x080043a1
 800433c:	080043a1 	.word	0x080043a1
 8004340:	080043a1 	.word	0x080043a1
 8004344:	080043a1 	.word	0x080043a1
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043a1 	.word	0x080043a1
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043a1 	.word	0x080043a1
 8004358:	080043a1 	.word	0x080043a1
 800435c:	080043a1 	.word	0x080043a1
 8004360:	080043a1 	.word	0x080043a1
 8004364:	080043a1 	.word	0x080043a1
 8004368:	080043a1 	.word	0x080043a1
 800436c:	080043a1 	.word	0x080043a1
 8004370:	080043a9 	.word	0x080043a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	3308      	adds	r3, #8
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 ffc3 	bl	8005308 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004388:	e00f      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	3328      	adds	r3, #40	@ 0x28
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f86a 	bl	800546c <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043b2:	4bbf      	ldr	r3, [pc, #764]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c0:	4abb      	ldr	r2, [pc, #748]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f002 0302 	and.w	r3, r2, #2
 80043dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	d041      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d824      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	0800444d 	.word	0x0800444d
 8004404:	08004419 	.word	0x08004419
 8004408:	0800442f 	.word	0x0800442f
 800440c:	0800444d 	.word	0x0800444d
 8004410:	0800444d 	.word	0x0800444d
 8004414:	0800444d 	.word	0x0800444d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	3308      	adds	r3, #8
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f000 ff71 	bl	8005308 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	3328      	adds	r3, #40	@ 0x28
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f818 	bl	800546c <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004442:	e004      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800444c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004456:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	f023 0107 	bic.w	r1, r3, #7
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004464:	4a92      	ldr	r2, [pc, #584]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004466:	430b      	orrs	r3, r1
 8004468:	6553      	str	r3, [r2, #84]	@ 0x54
 800446a:	e003      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f002 0304 	and.w	r3, r2, #4
 8004480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004484:	2300      	movs	r3, #0
 8004486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800448a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800448e:	460b      	mov	r3, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	d044      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449c:	2b05      	cmp	r3, #5
 800449e:	d825      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044a0:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044c1 	.word	0x080044c1
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	3308      	adds	r3, #8
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff1d 	bl	8005308 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	3328      	adds	r3, #40	@ 0x28
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ffc4 	bl	800546c <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fe:	4b6c      	ldr	r3, [pc, #432]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f023 0107 	bic.w	r1, r3, #7
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450e:	4a68      	ldr	r2, [pc, #416]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6593      	str	r3, [r2, #88]	@ 0x58
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f002 0320 	and.w	r3, r2, #32
 800452a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d055      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800454a:	d033      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800454c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004550:	d82c      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004556:	d02f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455c:	d826      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800455e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004562:	d02b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004564:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004568:	d820      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800456a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456e:	d012      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004574:	d81a      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d022      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800457a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800457e:	d115      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	3308      	adds	r3, #8
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 febd 	bl	8005308 <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004594:	e015      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	3328      	adds	r3, #40	@ 0x28
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 ff64 	bl	800546c <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045aa:	e00a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045b2:	e006      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045b4:	bf00      	nop
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045b8:	bf00      	nop
 80045ba:	e002      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ca:	4b39      	ldr	r3, [pc, #228]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	4a35      	ldr	r2, [pc, #212]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6553      	str	r3, [r2, #84]	@ 0x54
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004600:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d058      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004612:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004616:	d033      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004618:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800461c:	d82c      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004622:	d02f      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004628:	d826      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800462e:	d02b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004634:	d820      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463a:	d012      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004640:	d81a      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d022      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464a:	d115      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	3308      	adds	r3, #8
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe57 	bl	8005308 <RCCEx_PLL2_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004660:	e015      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	3328      	adds	r3, #40	@ 0x28
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fefe 	bl	800546c <RCCEx_PLL3_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004676:	e00a      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467e:	e006      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004680:	bf00      	nop
 8004682:	e004      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800468c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046a6:	4a02      	ldr	r2, [pc, #8]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046d6:	460b      	mov	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	d055      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046e8:	d033      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046ee:	d82c      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f4:	d02f      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fa:	d826      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004700:	d02b      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004702:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004706:	d820      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470c:	d012      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800470e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004712:	d81a      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d022      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471c:	d115      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	3308      	adds	r3, #8
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fdee 	bl	8005308 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004732:	e015      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	3328      	adds	r3, #40	@ 0x28
 800473a:	2102      	movs	r1, #2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fe95 	bl	800546c <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004748:	e00a      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004752:	bf00      	nop
 8004754:	e004      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004768:	4ba1      	ldr	r3, [pc, #644]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004778:	4a9d      	ldr	r2, [pc, #628]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800477a:	430b      	orrs	r3, r1
 800477c:	6593      	str	r3, [r2, #88]	@ 0x58
 800477e:	e003      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f002 0308 	and.w	r3, r2, #8
 8004794:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800479e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d01e      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	3328      	adds	r3, #40	@ 0x28
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fe54 	bl	800546c <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047d0:	4b87      	ldr	r3, [pc, #540]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e0:	4a83      	ldr	r2, [pc, #524]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f002 0310 	and.w	r3, r2, #16
 80047f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d01e      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004812:	d10c      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004818:	3328      	adds	r3, #40	@ 0x28
 800481a:	2102      	movs	r1, #2
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fe25 	bl	800546c <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482e:	4b70      	ldr	r3, [pc, #448]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483e:	4a6c      	ldr	r2, [pc, #432]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800485a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d03e      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800486c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004870:	d022      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004876:	d81b      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004880:	d00b      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004882:	e015      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	3308      	adds	r3, #8
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fd3b 	bl	8005308 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fde2 	bl	800546c <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c2:	4b4b      	ldr	r3, [pc, #300]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048d2:	4a47      	ldr	r2, [pc, #284]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048f0:	2300      	movs	r3, #0
 80048f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d03b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800490a:	d01f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800490c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004910:	d818      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004916:	d003      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800491c:	d007      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800491e:	e011      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004920:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4a32      	ldr	r2, [pc, #200]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800492c:	e00f      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	3328      	adds	r3, #40	@ 0x28
 8004934:	2101      	movs	r1, #1
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd98 	bl	800546c <RCCEx_PLL3_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004942:	e004      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800494c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004956:	4b26      	ldr	r3, [pc, #152]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004966:	4a22      	ldr	r2, [pc, #136]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004968:	430b      	orrs	r3, r1
 800496a:	6553      	str	r3, [r2, #84]	@ 0x54
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004982:	673b      	str	r3, [r7, #112]	@ 0x70
 8004984:	2300      	movs	r3, #0
 8004986:	677b      	str	r3, [r7, #116]	@ 0x74
 8004988:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800498c:	460b      	mov	r3, r1
 800498e:	4313      	orrs	r3, r2
 8004990:	d034      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a0:	d007      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049a2:	e011      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a4:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	4a11      	ldr	r2, [pc, #68]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049b0:	e00e      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	3308      	adds	r3, #8
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fca4 	bl	8005308 <RCCEx_PLL2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e6:	4a02      	ldr	r2, [pc, #8]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049ee:	bf00      	nop
 80049f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d00c      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	3328      	adds	r3, #40	@ 0x28
 8004a1e:	2102      	movs	r1, #2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fd23 	bl	800546c <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a40:	2300      	movs	r3, #0
 8004a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d038      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a5a:	d018      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a60:	d811      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a66:	d014      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6c:	d80b      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a76:	d106      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4bc3      	ldr	r3, [pc, #780]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	4ac2      	ldr	r2, [pc, #776]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a8c:	e004      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa0:	4bb9      	ldr	r3, [pc, #740]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab0:	4ab5      	ldr	r2, [pc, #724]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ab6:	e003      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ace:	2300      	movs	r3, #0
 8004ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ad2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004adc:	4baa      	ldr	r3, [pc, #680]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aea:	4aa7      	ldr	r2, [pc, #668]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afe:	2300      	movs	r3, #0
 8004b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b0c:	4b9e      	ldr	r3, [pc, #632]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b1c:	4a9a      	ldr	r2, [pc, #616]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b30:	2300      	movs	r3, #0
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b3e:	4b92      	ldr	r3, [pc, #584]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b42:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b60:	2300      	movs	r3, #0
 8004b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b6e:	4b86      	ldr	r3, [pc, #536]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	4a85      	ldr	r2, [pc, #532]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b78:	6113      	str	r3, [r2, #16]
 8004b7a:	4b83      	ldr	r3, [pc, #524]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b86:	4a80      	ldr	r2, [pc, #512]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ba8:	4b77      	ldr	r3, [pc, #476]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb6:	4a74      	ldr	r2, [pc, #464]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bdc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be8:	4a67      	ldr	r2, [pc, #412]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bea:	430b      	orrs	r3, r1
 8004bec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d011      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0e:	3308      	adds	r3, #8
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb78 	bl	8005308 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	2100      	movs	r1, #0
 8004c38:	6239      	str	r1, [r7, #32]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb58 	bl	8005308 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	2100      	movs	r1, #0
 8004c78:	61b9      	str	r1, [r7, #24]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb38 	bl	8005308 <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	3328      	adds	r3, #40	@ 0x28
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fbca 	bl	800546c <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	3328      	adds	r3, #40	@ 0x28
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fbaa 	bl	800546c <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	2100      	movs	r1, #0
 8004d38:	6039      	str	r1, [r7, #0]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d011      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4e:	3328      	adds	r3, #40	@ 0x28
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fb8a 	bl	800546c <RCCEx_PLL3_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d82:	46bd      	mov	sp, r7
 8004d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d88:	58024400 	.word	0x58024400

08004d8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d90:	f7fe fd54 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4904      	ldr	r1, [pc, #16]	@ (8004db4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58024400 	.word	0x58024400
 8004db4:	0800b248 	.word	0x0800b248

08004db8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	@ 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004dca:	4b9f      	ldr	r3, [pc, #636]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	0b1b      	lsrs	r3, r3, #12
 8004dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004de2:	4b99      	ldr	r3, [pc, #612]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8111 	beq.w	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	f000 8083 	beq.w	8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f200 80a1 	bhi.w	8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d056      	beq.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e22:	e099      	b.n	8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e24:	4b88      	ldr	r3, [pc, #544]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d02d      	beq.n	8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e30:	4b85      	ldr	r3, [pc, #532]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	4a84      	ldr	r2, [pc, #528]	@ (800504c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e8a:	e087      	b.n	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ece:	e065      	b.n	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b59      	ldr	r3, [pc, #356]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f12:	e043      	b.n	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b48      	ldr	r3, [pc, #288]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f56:	e021      	b.n	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6a:	4b37      	ldr	r3, [pc, #220]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	0a5b      	lsrs	r3, r3, #9
 8004fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc2:	ee17 2a90 	vmov	r2, s15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fca:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff0:	ee17 2a90 	vmov	r2, s15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ff8:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	0e1b      	lsrs	r3, r3, #24
 8004ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800500e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005012:	edd7 6a07 	vldr	s13, [r7, #28]
 8005016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	ee17 2a90 	vmov	r2, s15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005026:	e008      	b.n	800503a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
}
 800503a:	bf00      	nop
 800503c:	3724      	adds	r7, #36	@ 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	58024400 	.word	0x58024400
 800504c:	03d09000 	.word	0x03d09000
 8005050:	46000000 	.word	0x46000000
 8005054:	4c742400 	.word	0x4c742400
 8005058:	4a742400 	.word	0x4a742400
 800505c:	4af42400 	.word	0x4af42400

08005060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	@ 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005068:	4ba1      	ldr	r3, [pc, #644]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005072:	4b9f      	ldr	r3, [pc, #636]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005076:	0d1b      	lsrs	r3, r3, #20
 8005078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800507c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800507e:	4b9c      	ldr	r3, [pc, #624]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800508a:	4b99      	ldr	r3, [pc, #612]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8111 	beq.w	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	f000 8083 	beq.w	80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	f200 80a1 	bhi.w	8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d056      	beq.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050ca:	e099      	b.n	8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050cc:	4b88      	ldr	r3, [pc, #544]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02d      	beq.n	8005134 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050d8:	4b85      	ldr	r3, [pc, #532]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	4a84      	ldr	r2, [pc, #528]	@ (80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
 80050e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005102:	4b7b      	ldr	r3, [pc, #492]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005112:	ed97 6a03 	vldr	s12, [r7, #12]
 8005116:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005132:	e087      	b.n	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b6a      	ldr	r3, [pc, #424]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a03 	vldr	s12, [r7, #12]
 800515a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005176:	e065      	b.n	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	4b59      	ldr	r3, [pc, #356]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a03 	vldr	s12, [r7, #12]
 800519e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ba:	e043      	b.n	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ce:	4b48      	ldr	r3, [pc, #288]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051de:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051fe:	e021      	b.n	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	4b37      	ldr	r3, [pc, #220]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a03 	vldr	s12, [r7, #12]
 8005226:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005242:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005244:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	0a5b      	lsrs	r3, r3, #9
 800524a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800525a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800525e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526a:	ee17 2a90 	vmov	r2, s15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005272:	4b1f      	ldr	r3, [pc, #124]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005298:	ee17 2a90 	vmov	r2, s15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052a0:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80052be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c6:	ee17 2a90 	vmov	r2, s15
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	609a      	str	r2, [r3, #8]
}
 80052e2:	bf00      	nop
 80052e4:	3724      	adds	r7, #36	@ 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	58024400 	.word	0x58024400
 80052f4:	03d09000 	.word	0x03d09000
 80052f8:	46000000 	.word	0x46000000
 80052fc:	4c742400 	.word	0x4c742400
 8005300:	4a742400 	.word	0x4a742400
 8005304:	4af42400 	.word	0x4af42400

08005308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005316:	4b53      	ldr	r3, [pc, #332]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b03      	cmp	r3, #3
 8005320:	d101      	bne.n	8005326 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e099      	b.n	800545a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005326:	4b4f      	ldr	r3, [pc, #316]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a4e      	ldr	r2, [pc, #312]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800532c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fc fa37 	bl	80017a4 <HAL_GetTick>
 8005336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005338:	e008      	b.n	800534c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800533a:	f7fc fa33 	bl	80017a4 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e086      	b.n	800545a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800534c:	4b45      	ldr	r3, [pc, #276]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f0      	bne.n	800533a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005358:	4b42      	ldr	r3, [pc, #264]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	031b      	lsls	r3, r3, #12
 8005366:	493f      	ldr	r1, [pc, #252]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005368:	4313      	orrs	r3, r2
 800536a:	628b      	str	r3, [r1, #40]	@ 0x28
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	3b01      	subs	r3, #1
 8005372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	3b01      	subs	r3, #1
 800537c:	025b      	lsls	r3, r3, #9
 800537e:	b29b      	uxth	r3, r3
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	3b01      	subs	r3, #1
 8005388:	041b      	lsls	r3, r3, #16
 800538a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	3b01      	subs	r3, #1
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800539c:	4931      	ldr	r1, [pc, #196]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	492d      	ldr	r1, [pc, #180]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f023 0220 	bic.w	r2, r3, #32
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4928      	ldr	r1, [pc, #160]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053c6:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053cc:	f023 0310 	bic.w	r3, r3, #16
 80053d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053d2:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d6:	4b24      	ldr	r3, [pc, #144]	@ (8005468 <RCCEx_PLL2_Config+0x160>)
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	69d2      	ldr	r2, [r2, #28]
 80053de:	00d2      	lsls	r2, r2, #3
 80053e0:	4920      	ldr	r1, [pc, #128]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f043 0310 	orr.w	r3, r3, #16
 80053f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005404:	e00f      	b.n	8005426 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d106      	bne.n	800541a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800540c:	4b15      	ldr	r3, [pc, #84]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	4a14      	ldr	r2, [pc, #80]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005418:	e005      	b.n	8005426 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800541a:	4b12      	ldr	r3, [pc, #72]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005424:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005426:	4b0f      	ldr	r3, [pc, #60]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a0e      	ldr	r2, [pc, #56]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fc f9b7 	bl	80017a4 <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005438:	e008      	b.n	800544c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800543a:	f7fc f9b3 	bl	80017a4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <RCCEx_PLL2_Config+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	58024400 	.word	0x58024400
 8005468:	ffff0007 	.word	0xffff0007

0800546c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800547a:	4b53      	ldr	r3, [pc, #332]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b03      	cmp	r3, #3
 8005484:	d101      	bne.n	800548a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e099      	b.n	80055be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800548a:	4b4f      	ldr	r3, [pc, #316]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a4e      	ldr	r2, [pc, #312]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005496:	f7fc f985 	bl	80017a4 <HAL_GetTick>
 800549a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800549c:	e008      	b.n	80054b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800549e:	f7fc f981 	bl	80017a4 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e086      	b.n	80055be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054b0:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054bc:	4b42      	ldr	r3, [pc, #264]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	051b      	lsls	r3, r3, #20
 80054ca:	493f      	ldr	r1, [pc, #252]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	3b01      	subs	r3, #1
 80054e0:	025b      	lsls	r3, r3, #9
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005500:	4931      	ldr	r1, [pc, #196]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005502:	4313      	orrs	r3, r2
 8005504:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005506:	4b30      	ldr	r3, [pc, #192]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	492d      	ldr	r1, [pc, #180]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005514:	4313      	orrs	r3, r2
 8005516:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005518:	4b2b      	ldr	r3, [pc, #172]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	4928      	ldr	r1, [pc, #160]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005526:	4313      	orrs	r3, r2
 8005528:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800552a:	4b27      	ldr	r3, [pc, #156]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	4a26      	ldr	r2, [pc, #152]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005534:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005536:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800553a:	4b24      	ldr	r3, [pc, #144]	@ (80055cc <RCCEx_PLL3_Config+0x160>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	69d2      	ldr	r2, [r2, #28]
 8005542:	00d2      	lsls	r2, r2, #3
 8005544:	4920      	ldr	r1, [pc, #128]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800554a:	4b1f      	ldr	r3, [pc, #124]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800555c:	4b1a      	ldr	r3, [pc, #104]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005562:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005568:	e00f      	b.n	800558a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d106      	bne.n	800557e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005570:	4b15      	ldr	r3, [pc, #84]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005576:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800557a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800557c:	e005      	b.n	800558a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a11      	ldr	r2, [pc, #68]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005584:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005588:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800558a:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005596:	f7fc f905 	bl	80017a4 <HAL_GetTick>
 800559a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800559c:	e008      	b.n	80055b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800559e:	f7fc f901 	bl	80017a4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e006      	b.n	80055be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0f0      	beq.n	800559e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	ffff0007 	.word	0xffff0007

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e049      	b.n	8005676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f841 	bl	800567e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 f9e8 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e054      	b.n	8005756 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a26      	ldr	r2, [pc, #152]	@ (8005764 <HAL_TIM_Base_Start_IT+0xd0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d6:	d01d      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <HAL_TIM_Base_Start_IT+0xd4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	@ (800576c <HAL_TIM_Base_Start_IT+0xd8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <HAL_TIM_Base_Start_IT+0xdc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <HAL_TIM_Base_Start_IT+0xe0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <HAL_TIM_Base_Start_IT+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <HAL_TIM_Base_Start_IT+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d115      	bne.n	8005740 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_TIM_Base_Start_IT+0xec>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d015      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0xbe>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572c:	d011      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	e008      	b.n	8005752 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e000      	b.n	8005754 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40010400 	.word	0x40010400
 8005778:	40001800 	.word	0x40001800
 800577c:	40014000 	.word	0x40014000
 8005780:	00010007 	.word	0x00010007

08005784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0202 	mvn.w	r2, #2
 80057b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8e9 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8db 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8ec 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0204 	mvn.w	r2, #4
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8c3 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8b5 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f8c6 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d020      	beq.n	8005880 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0208 	mvn.w	r2, #8
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2204      	movs	r2, #4
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f89d 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f88f 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8a0 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d020      	beq.n	80058cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01b      	beq.n	80058cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0210 	mvn.w	r2, #16
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2208      	movs	r2, #8
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f877 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f869 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f87a 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0201 	mvn.w	r2, #1
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb fbf6 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f913 	bl	8005b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f90b 	bl	8005b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f834 	bl	80059ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f06f 0220 	mvn.w	r2, #32
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8d3 	bl	8005b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a46      	ldr	r2, [pc, #280]	@ (8005b10 <TIM_Base_SetConfig+0x12c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a43      	ldr	r2, [pc, #268]	@ (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a42      	ldr	r2, [pc, #264]	@ (8005b18 <TIM_Base_SetConfig+0x134>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a41      	ldr	r2, [pc, #260]	@ (8005b1c <TIM_Base_SetConfig+0x138>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a40      	ldr	r2, [pc, #256]	@ (8005b20 <TIM_Base_SetConfig+0x13c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a35      	ldr	r2, [pc, #212]	@ (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a44:	d01b      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a32      	ldr	r2, [pc, #200]	@ (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a31      	ldr	r2, [pc, #196]	@ (8005b18 <TIM_Base_SetConfig+0x134>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a30      	ldr	r2, [pc, #192]	@ (8005b1c <TIM_Base_SetConfig+0x138>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2f      	ldr	r2, [pc, #188]	@ (8005b20 <TIM_Base_SetConfig+0x13c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <TIM_Base_SetConfig+0x140>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <TIM_Base_SetConfig+0x144>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2c      	ldr	r2, [pc, #176]	@ (8005b2c <TIM_Base_SetConfig+0x148>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00f      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <TIM_Base_SetConfig+0x13c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <TIM_Base_SetConfig+0x140>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <TIM_Base_SetConfig+0x144>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a15      	ldr	r2, [pc, #84]	@ (8005b2c <TIM_Base_SetConfig+0x148>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d103      	bne.n	8005ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]
  }
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e042      	b.n	8005c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb fc75 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	@ 0x24
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fe1e 	bl	80067f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f8b3 	bl	8005d28 <UART_SetConfig>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e01b      	b.n	8005c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fe9d 	bl	800693c <UART_CheckIdleState>
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	@ 0x28
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d17b      	bne.n	8005d1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_Transmit+0x26>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e074      	b.n	8005d20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2221      	movs	r2, #33	@ 0x21
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c46:	f7fb fdad 	bl	80017a4 <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c64:	d108      	bne.n	8005c78 <HAL_UART_Transmit+0x6c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e003      	b.n	8005c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c80:	e030      	b.n	8005ce4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	@ 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 feff 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e03d      	b.n	8005d20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e007      	b.n	8005cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	781a      	ldrb	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1c8      	bne.n	8005c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fec8 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d2c:	b092      	sub	sp, #72	@ 0x48
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4bbe      	ldr	r3, [pc, #760]	@ (8006050 <UART_SetConfig+0x328>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4ab3      	ldr	r2, [pc, #716]	@ (8006054 <UART_SetConfig+0x32c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d90:	4313      	orrs	r3, r2
 8005d92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	4baf      	ldr	r3, [pc, #700]	@ (8006058 <UART_SetConfig+0x330>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	f023 010f 	bic.w	r1, r3, #15
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4aa6      	ldr	r2, [pc, #664]	@ (800605c <UART_SetConfig+0x334>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d177      	bne.n	8005eb8 <UART_SetConfig+0x190>
 8005dc8:	4ba5      	ldr	r3, [pc, #660]	@ (8006060 <UART_SetConfig+0x338>)
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd0:	2b28      	cmp	r3, #40	@ 0x28
 8005dd2:	d86d      	bhi.n	8005eb0 <UART_SetConfig+0x188>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0xb4>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e81 	.word	0x08005e81
 8005de0:	08005eb1 	.word	0x08005eb1
 8005de4:	08005eb1 	.word	0x08005eb1
 8005de8:	08005eb1 	.word	0x08005eb1
 8005dec:	08005eb1 	.word	0x08005eb1
 8005df0:	08005eb1 	.word	0x08005eb1
 8005df4:	08005eb1 	.word	0x08005eb1
 8005df8:	08005eb1 	.word	0x08005eb1
 8005dfc:	08005e89 	.word	0x08005e89
 8005e00:	08005eb1 	.word	0x08005eb1
 8005e04:	08005eb1 	.word	0x08005eb1
 8005e08:	08005eb1 	.word	0x08005eb1
 8005e0c:	08005eb1 	.word	0x08005eb1
 8005e10:	08005eb1 	.word	0x08005eb1
 8005e14:	08005eb1 	.word	0x08005eb1
 8005e18:	08005eb1 	.word	0x08005eb1
 8005e1c:	08005e91 	.word	0x08005e91
 8005e20:	08005eb1 	.word	0x08005eb1
 8005e24:	08005eb1 	.word	0x08005eb1
 8005e28:	08005eb1 	.word	0x08005eb1
 8005e2c:	08005eb1 	.word	0x08005eb1
 8005e30:	08005eb1 	.word	0x08005eb1
 8005e34:	08005eb1 	.word	0x08005eb1
 8005e38:	08005eb1 	.word	0x08005eb1
 8005e3c:	08005e99 	.word	0x08005e99
 8005e40:	08005eb1 	.word	0x08005eb1
 8005e44:	08005eb1 	.word	0x08005eb1
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005eb1 	.word	0x08005eb1
 8005e50:	08005eb1 	.word	0x08005eb1
 8005e54:	08005eb1 	.word	0x08005eb1
 8005e58:	08005eb1 	.word	0x08005eb1
 8005e5c:	08005ea1 	.word	0x08005ea1
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005eb1 	.word	0x08005eb1
 8005e68:	08005eb1 	.word	0x08005eb1
 8005e6c:	08005eb1 	.word	0x08005eb1
 8005e70:	08005eb1 	.word	0x08005eb1
 8005e74:	08005eb1 	.word	0x08005eb1
 8005e78:	08005eb1 	.word	0x08005eb1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e222      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e21e      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e21a      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e216      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e212      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005ea8:	2340      	movs	r3, #64	@ 0x40
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e20e      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e20a      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a69      	ldr	r2, [pc, #420]	@ (8006064 <UART_SetConfig+0x33c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d130      	bne.n	8005f24 <UART_SetConfig+0x1fc>
 8005ec2:	4b67      	ldr	r3, [pc, #412]	@ (8006060 <UART_SetConfig+0x338>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d826      	bhi.n	8005f1c <UART_SetConfig+0x1f4>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <UART_SetConfig+0x1ac>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e1ec      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e1e8      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e1e4      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e1e0      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e1dc      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e1d8      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e1d4      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a4f      	ldr	r2, [pc, #316]	@ (8006068 <UART_SetConfig+0x340>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d130      	bne.n	8005f90 <UART_SetConfig+0x268>
 8005f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8006060 <UART_SetConfig+0x338>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d826      	bhi.n	8005f88 <UART_SetConfig+0x260>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0x218>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e1b6      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e1b2      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e1ae      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e1aa      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e1a6      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f80:	2340      	movs	r3, #64	@ 0x40
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e1a2      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f88:	2380      	movs	r3, #128	@ 0x80
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e19e      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a35      	ldr	r2, [pc, #212]	@ (800606c <UART_SetConfig+0x344>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d130      	bne.n	8005ffc <UART_SetConfig+0x2d4>
 8005f9a:	4b31      	ldr	r3, [pc, #196]	@ (8006060 <UART_SetConfig+0x338>)
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d826      	bhi.n	8005ff4 <UART_SetConfig+0x2cc>
 8005fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <UART_SetConfig+0x284>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fca:	e180      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e17c      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e178      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e174      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e170      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005fec:	2340      	movs	r3, #64	@ 0x40
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e16c      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005ff4:	2380      	movs	r3, #128	@ 0x80
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e168      	b.n	80062ce <UART_SetConfig+0x5a6>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1b      	ldr	r2, [pc, #108]	@ (8006070 <UART_SetConfig+0x348>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d142      	bne.n	800608c <UART_SetConfig+0x364>
 8006006:	4b16      	ldr	r3, [pc, #88]	@ (8006060 <UART_SetConfig+0x338>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b05      	cmp	r3, #5
 8006010:	d838      	bhi.n	8006084 <UART_SetConfig+0x35c>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <UART_SetConfig+0x2f0>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
 8006020:	08006041 	.word	0x08006041
 8006024:	08006049 	.word	0x08006049
 8006028:	08006075 	.word	0x08006075
 800602c:	0800607d 	.word	0x0800607d
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e14a      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e146      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e142      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e13e      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006050:	cfff69f3 	.word	0xcfff69f3
 8006054:	58000c00 	.word	0x58000c00
 8006058:	11fff4ff 	.word	0x11fff4ff
 800605c:	40011000 	.word	0x40011000
 8006060:	58024400 	.word	0x58024400
 8006064:	40004400 	.word	0x40004400
 8006068:	40004800 	.word	0x40004800
 800606c:	40004c00 	.word	0x40004c00
 8006070:	40005000 	.word	0x40005000
 8006074:	2320      	movs	r3, #32
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e128      	b.n	80062ce <UART_SetConfig+0x5a6>
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e124      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e120      	b.n	80062ce <UART_SetConfig+0x5a6>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4acb      	ldr	r2, [pc, #812]	@ (80063c0 <UART_SetConfig+0x698>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d176      	bne.n	8006184 <UART_SetConfig+0x45c>
 8006096:	4bcb      	ldr	r3, [pc, #812]	@ (80063c4 <UART_SetConfig+0x69c>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800609e:	2b28      	cmp	r3, #40	@ 0x28
 80060a0:	d86c      	bhi.n	800617c <UART_SetConfig+0x454>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x380>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800617d 	.word	0x0800617d
 80060b0:	0800617d 	.word	0x0800617d
 80060b4:	0800617d 	.word	0x0800617d
 80060b8:	0800617d 	.word	0x0800617d
 80060bc:	0800617d 	.word	0x0800617d
 80060c0:	0800617d 	.word	0x0800617d
 80060c4:	0800617d 	.word	0x0800617d
 80060c8:	08006155 	.word	0x08006155
 80060cc:	0800617d 	.word	0x0800617d
 80060d0:	0800617d 	.word	0x0800617d
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	0800617d 	.word	0x0800617d
 80060dc:	0800617d 	.word	0x0800617d
 80060e0:	0800617d 	.word	0x0800617d
 80060e4:	0800617d 	.word	0x0800617d
 80060e8:	0800615d 	.word	0x0800615d
 80060ec:	0800617d 	.word	0x0800617d
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	0800617d 	.word	0x0800617d
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	0800617d 	.word	0x0800617d
 8006100:	0800617d 	.word	0x0800617d
 8006104:	0800617d 	.word	0x0800617d
 8006108:	08006165 	.word	0x08006165
 800610c:	0800617d 	.word	0x0800617d
 8006110:	0800617d 	.word	0x0800617d
 8006114:	0800617d 	.word	0x0800617d
 8006118:	0800617d 	.word	0x0800617d
 800611c:	0800617d 	.word	0x0800617d
 8006120:	0800617d 	.word	0x0800617d
 8006124:	0800617d 	.word	0x0800617d
 8006128:	0800616d 	.word	0x0800616d
 800612c:	0800617d 	.word	0x0800617d
 8006130:	0800617d 	.word	0x0800617d
 8006134:	0800617d 	.word	0x0800617d
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800617d 	.word	0x0800617d
 8006140:	0800617d 	.word	0x0800617d
 8006144:	0800617d 	.word	0x0800617d
 8006148:	08006175 	.word	0x08006175
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e0bc      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e0b8      	b.n	80062ce <UART_SetConfig+0x5a6>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e0b4      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e0b0      	b.n	80062ce <UART_SetConfig+0x5a6>
 800616c:	2320      	movs	r3, #32
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e0ac      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006174:	2340      	movs	r3, #64	@ 0x40
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e0a8      	b.n	80062ce <UART_SetConfig+0x5a6>
 800617c:	2380      	movs	r3, #128	@ 0x80
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e0a4      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a8f      	ldr	r2, [pc, #572]	@ (80063c8 <UART_SetConfig+0x6a0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d130      	bne.n	80061f0 <UART_SetConfig+0x4c8>
 800618e:	4b8d      	ldr	r3, [pc, #564]	@ (80063c4 <UART_SetConfig+0x69c>)
 8006190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b05      	cmp	r3, #5
 8006198:	d826      	bhi.n	80061e8 <UART_SetConfig+0x4c0>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <UART_SetConfig+0x478>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b9 	.word	0x080061b9
 80061a4:	080061c1 	.word	0x080061c1
 80061a8:	080061c9 	.word	0x080061c9
 80061ac:	080061d1 	.word	0x080061d1
 80061b0:	080061d9 	.word	0x080061d9
 80061b4:	080061e1 	.word	0x080061e1
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061be:	e086      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061c0:	2304      	movs	r3, #4
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c6:	e082      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061c8:	2308      	movs	r3, #8
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e07e      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061d0:	2310      	movs	r3, #16
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e07a      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061d8:	2320      	movs	r3, #32
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e076      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061e0:	2340      	movs	r3, #64	@ 0x40
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e072      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061e8:	2380      	movs	r3, #128	@ 0x80
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e06e      	b.n	80062ce <UART_SetConfig+0x5a6>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a75      	ldr	r2, [pc, #468]	@ (80063cc <UART_SetConfig+0x6a4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d130      	bne.n	800625c <UART_SetConfig+0x534>
 80061fa:	4b72      	ldr	r3, [pc, #456]	@ (80063c4 <UART_SetConfig+0x69c>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2b05      	cmp	r3, #5
 8006204:	d826      	bhi.n	8006254 <UART_SetConfig+0x52c>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0x4e4>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006225 	.word	0x08006225
 8006210:	0800622d 	.word	0x0800622d
 8006214:	08006235 	.word	0x08006235
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006245 	.word	0x08006245
 8006220:	0800624d 	.word	0x0800624d
 8006224:	2300      	movs	r3, #0
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622a:	e050      	b.n	80062ce <UART_SetConfig+0x5a6>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006232:	e04c      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e048      	b.n	80062ce <UART_SetConfig+0x5a6>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e044      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006244:	2320      	movs	r3, #32
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e040      	b.n	80062ce <UART_SetConfig+0x5a6>
 800624c:	2340      	movs	r3, #64	@ 0x40
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e03c      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e038      	b.n	80062ce <UART_SetConfig+0x5a6>
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5b      	ldr	r2, [pc, #364]	@ (80063d0 <UART_SetConfig+0x6a8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d130      	bne.n	80062c8 <UART_SetConfig+0x5a0>
 8006266:	4b57      	ldr	r3, [pc, #348]	@ (80063c4 <UART_SetConfig+0x69c>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b05      	cmp	r3, #5
 8006270:	d826      	bhi.n	80062c0 <UART_SetConfig+0x598>
 8006272:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <UART_SetConfig+0x550>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006291 	.word	0x08006291
 800627c:	08006299 	.word	0x08006299
 8006280:	080062a1 	.word	0x080062a1
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006296:	e01a      	b.n	80062ce <UART_SetConfig+0x5a6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e016      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e012      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e00e      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062b0:	2320      	movs	r3, #32
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e00a      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062b8:	2340      	movs	r3, #64	@ 0x40
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e006      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e002      	b.n	80062ce <UART_SetConfig+0x5a6>
 80062c8:	2380      	movs	r3, #128	@ 0x80
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a3f      	ldr	r2, [pc, #252]	@ (80063d0 <UART_SetConfig+0x6a8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	f040 80f8 	bne.w	80064ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062de:	2b20      	cmp	r3, #32
 80062e0:	dc46      	bgt.n	8006370 <UART_SetConfig+0x648>
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	f2c0 8082 	blt.w	80063ec <UART_SetConfig+0x6c4>
 80062e8:	3b02      	subs	r3, #2
 80062ea:	2b1e      	cmp	r3, #30
 80062ec:	d87e      	bhi.n	80063ec <UART_SetConfig+0x6c4>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x5cc>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006377 	.word	0x08006377
 80062f8:	080063ed 	.word	0x080063ed
 80062fc:	0800637f 	.word	0x0800637f
 8006300:	080063ed 	.word	0x080063ed
 8006304:	080063ed 	.word	0x080063ed
 8006308:	080063ed 	.word	0x080063ed
 800630c:	0800638f 	.word	0x0800638f
 8006310:	080063ed 	.word	0x080063ed
 8006314:	080063ed 	.word	0x080063ed
 8006318:	080063ed 	.word	0x080063ed
 800631c:	080063ed 	.word	0x080063ed
 8006320:	080063ed 	.word	0x080063ed
 8006324:	080063ed 	.word	0x080063ed
 8006328:	080063ed 	.word	0x080063ed
 800632c:	0800639f 	.word	0x0800639f
 8006330:	080063ed 	.word	0x080063ed
 8006334:	080063ed 	.word	0x080063ed
 8006338:	080063ed 	.word	0x080063ed
 800633c:	080063ed 	.word	0x080063ed
 8006340:	080063ed 	.word	0x080063ed
 8006344:	080063ed 	.word	0x080063ed
 8006348:	080063ed 	.word	0x080063ed
 800634c:	080063ed 	.word	0x080063ed
 8006350:	080063ed 	.word	0x080063ed
 8006354:	080063ed 	.word	0x080063ed
 8006358:	080063ed 	.word	0x080063ed
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063df 	.word	0x080063df
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d037      	beq.n	80063e4 <UART_SetConfig+0x6bc>
 8006374:	e03a      	b.n	80063ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006376:	f7fe fd09 	bl	8004d8c <HAL_RCCEx_GetD3PCLK1Freq>
 800637a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800637c:	e03c      	b.n	80063f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fd18 	bl	8004db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e034      	b.n	80063f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638e:	f107 0318 	add.w	r3, r7, #24
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fe64 	bl	8005060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800639c:	e02c      	b.n	80063f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800639e:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <UART_SetConfig+0x69c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <UART_SetConfig+0x69c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	08db      	lsrs	r3, r3, #3
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	4a07      	ldr	r2, [pc, #28]	@ (80063d4 <UART_SetConfig+0x6ac>)
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063bc:	e01c      	b.n	80063f8 <UART_SetConfig+0x6d0>
 80063be:	bf00      	nop
 80063c0:	40011400 	.word	0x40011400
 80063c4:	58024400 	.word	0x58024400
 80063c8:	40007800 	.word	0x40007800
 80063cc:	40007c00 	.word	0x40007c00
 80063d0:	58000c00 	.word	0x58000c00
 80063d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80063d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006650 <UART_SetConfig+0x928>)
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e00c      	b.n	80063f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063de:	4b9d      	ldr	r3, [pc, #628]	@ (8006654 <UART_SetConfig+0x92c>)
 80063e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e2:	e009      	b.n	80063f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ea:	e005      	b.n	80063f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 81de 	beq.w	80067bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	4a94      	ldr	r2, [pc, #592]	@ (8006658 <UART_SetConfig+0x930>)
 8006406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800640a:	461a      	mov	r2, r3
 800640c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006412:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006420:	429a      	cmp	r2, r3
 8006422:	d305      	bcc.n	8006430 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006436:	e1c1      	b.n	80067bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643a:	2200      	movs	r2, #0
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	60fa      	str	r2, [r7, #12]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	4a84      	ldr	r2, [pc, #528]	@ (8006658 <UART_SetConfig+0x930>)
 8006446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644a:	b29b      	uxth	r3, r3
 800644c:	2200      	movs	r2, #0
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800645a:	f7f9 ff91 	bl	8000380 <__aeabi_uldivmod>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	020b      	lsls	r3, r1, #8
 8006470:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006474:	0202      	lsls	r2, r0, #8
 8006476:	6979      	ldr	r1, [r7, #20]
 8006478:	6849      	ldr	r1, [r1, #4]
 800647a:	0849      	lsrs	r1, r1, #1
 800647c:	2000      	movs	r0, #0
 800647e:	460c      	mov	r4, r1
 8006480:	4605      	mov	r5, r0
 8006482:	eb12 0804 	adds.w	r8, r2, r4
 8006486:	eb43 0905 	adc.w	r9, r3, r5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	469a      	mov	sl, r3
 8006492:	4693      	mov	fp, r2
 8006494:	4652      	mov	r2, sl
 8006496:	465b      	mov	r3, fp
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	f7f9 ff70 	bl	8000380 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4613      	mov	r3, r2
 80064a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ae:	d308      	bcc.n	80064c2 <UART_SetConfig+0x79a>
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b6:	d204      	bcs.n	80064c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064be:	60da      	str	r2, [r3, #12]
 80064c0:	e17c      	b.n	80067bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064c8:	e178      	b.n	80067bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d2:	f040 80c5 	bne.w	8006660 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80064d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064da:	2b20      	cmp	r3, #32
 80064dc:	dc48      	bgt.n	8006570 <UART_SetConfig+0x848>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	db7b      	blt.n	80065da <UART_SetConfig+0x8b2>
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d879      	bhi.n	80065da <UART_SetConfig+0x8b2>
 80064e6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <UART_SetConfig+0x7c4>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	08006577 	.word	0x08006577
 80064f0:	0800657f 	.word	0x0800657f
 80064f4:	080065db 	.word	0x080065db
 80064f8:	080065db 	.word	0x080065db
 80064fc:	08006587 	.word	0x08006587
 8006500:	080065db 	.word	0x080065db
 8006504:	080065db 	.word	0x080065db
 8006508:	080065db 	.word	0x080065db
 800650c:	08006597 	.word	0x08006597
 8006510:	080065db 	.word	0x080065db
 8006514:	080065db 	.word	0x080065db
 8006518:	080065db 	.word	0x080065db
 800651c:	080065db 	.word	0x080065db
 8006520:	080065db 	.word	0x080065db
 8006524:	080065db 	.word	0x080065db
 8006528:	080065db 	.word	0x080065db
 800652c:	080065a7 	.word	0x080065a7
 8006530:	080065db 	.word	0x080065db
 8006534:	080065db 	.word	0x080065db
 8006538:	080065db 	.word	0x080065db
 800653c:	080065db 	.word	0x080065db
 8006540:	080065db 	.word	0x080065db
 8006544:	080065db 	.word	0x080065db
 8006548:	080065db 	.word	0x080065db
 800654c:	080065db 	.word	0x080065db
 8006550:	080065db 	.word	0x080065db
 8006554:	080065db 	.word	0x080065db
 8006558:	080065db 	.word	0x080065db
 800655c:	080065db 	.word	0x080065db
 8006560:	080065db 	.word	0x080065db
 8006564:	080065db 	.word	0x080065db
 8006568:	080065db 	.word	0x080065db
 800656c:	080065cd 	.word	0x080065cd
 8006570:	2b40      	cmp	r3, #64	@ 0x40
 8006572:	d02e      	beq.n	80065d2 <UART_SetConfig+0x8aa>
 8006574:	e031      	b.n	80065da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006576:	f7fd f991 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800657a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800657c:	e033      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800657e:	f7fd f9a3 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8006582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006584:	e02f      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fc14 	bl	8004db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006594:	e027      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006596:	f107 0318 	add.w	r3, r7, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fd60 	bl	8005060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a4:	e01f      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a6:	4b2d      	ldr	r3, [pc, #180]	@ (800665c <UART_SetConfig+0x934>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065b2:	4b2a      	ldr	r3, [pc, #168]	@ (800665c <UART_SetConfig+0x934>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	08db      	lsrs	r3, r3, #3
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	4a24      	ldr	r2, [pc, #144]	@ (8006650 <UART_SetConfig+0x928>)
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065c4:	e00f      	b.n	80065e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80065c6:	4b22      	ldr	r3, [pc, #136]	@ (8006650 <UART_SetConfig+0x928>)
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ca:	e00c      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065cc:	4b21      	ldr	r3, [pc, #132]	@ (8006654 <UART_SetConfig+0x92c>)
 80065ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d0:	e009      	b.n	80065e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e005      	b.n	80065e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80e7 	beq.w	80067bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	4a19      	ldr	r2, [pc, #100]	@ (8006658 <UART_SetConfig+0x930>)
 80065f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006600:	005a      	lsls	r2, r3, #1
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	441a      	add	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d916      	bls.n	8006648 <UART_SetConfig+0x920>
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d212      	bcs.n	8006648 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006624:	b29b      	uxth	r3, r3
 8006626:	f023 030f 	bic.w	r3, r3, #15
 800662a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	b29b      	uxth	r3, r3
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	b29a      	uxth	r2, r3
 8006638:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800663a:	4313      	orrs	r3, r2
 800663c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	e0b9      	b.n	80067bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800664e:	e0b5      	b.n	80067bc <UART_SetConfig+0xa94>
 8006650:	03d09000 	.word	0x03d09000
 8006654:	003d0900 	.word	0x003d0900
 8006658:	0800b258 	.word	0x0800b258
 800665c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006660:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006664:	2b20      	cmp	r3, #32
 8006666:	dc49      	bgt.n	80066fc <UART_SetConfig+0x9d4>
 8006668:	2b00      	cmp	r3, #0
 800666a:	db7c      	blt.n	8006766 <UART_SetConfig+0xa3e>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d87a      	bhi.n	8006766 <UART_SetConfig+0xa3e>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0x950>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006703 	.word	0x08006703
 800667c:	0800670b 	.word	0x0800670b
 8006680:	08006767 	.word	0x08006767
 8006684:	08006767 	.word	0x08006767
 8006688:	08006713 	.word	0x08006713
 800668c:	08006767 	.word	0x08006767
 8006690:	08006767 	.word	0x08006767
 8006694:	08006767 	.word	0x08006767
 8006698:	08006723 	.word	0x08006723
 800669c:	08006767 	.word	0x08006767
 80066a0:	08006767 	.word	0x08006767
 80066a4:	08006767 	.word	0x08006767
 80066a8:	08006767 	.word	0x08006767
 80066ac:	08006767 	.word	0x08006767
 80066b0:	08006767 	.word	0x08006767
 80066b4:	08006767 	.word	0x08006767
 80066b8:	08006733 	.word	0x08006733
 80066bc:	08006767 	.word	0x08006767
 80066c0:	08006767 	.word	0x08006767
 80066c4:	08006767 	.word	0x08006767
 80066c8:	08006767 	.word	0x08006767
 80066cc:	08006767 	.word	0x08006767
 80066d0:	08006767 	.word	0x08006767
 80066d4:	08006767 	.word	0x08006767
 80066d8:	08006767 	.word	0x08006767
 80066dc:	08006767 	.word	0x08006767
 80066e0:	08006767 	.word	0x08006767
 80066e4:	08006767 	.word	0x08006767
 80066e8:	08006767 	.word	0x08006767
 80066ec:	08006767 	.word	0x08006767
 80066f0:	08006767 	.word	0x08006767
 80066f4:	08006767 	.word	0x08006767
 80066f8:	08006759 	.word	0x08006759
 80066fc:	2b40      	cmp	r3, #64	@ 0x40
 80066fe:	d02e      	beq.n	800675e <UART_SetConfig+0xa36>
 8006700:	e031      	b.n	8006766 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006702:	f7fd f8cb 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8006706:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006708:	e033      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800670a:	f7fd f8dd 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 800670e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006710:	e02f      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fb4e 	bl	8004db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006720:	e027      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fc9a 	bl	8005060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006730:	e01f      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006732:	4b2d      	ldr	r3, [pc, #180]	@ (80067e8 <UART_SetConfig+0xac0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800673e:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <UART_SetConfig+0xac0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	4a28      	ldr	r2, [pc, #160]	@ (80067ec <UART_SetConfig+0xac4>)
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006750:	e00f      	b.n	8006772 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006752:	4b26      	ldr	r3, [pc, #152]	@ (80067ec <UART_SetConfig+0xac4>)
 8006754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006756:	e00c      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006758:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <UART_SetConfig+0xac8>)
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675c:	e009      	b.n	8006772 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006764:	e005      	b.n	8006772 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006770:	bf00      	nop
    }

    if (pclk != 0U)
 8006772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d021      	beq.n	80067bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <UART_SetConfig+0xacc>)
 800677e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006782:	461a      	mov	r2, r3
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	fbb3 f2f2 	udiv	r2, r3, r2
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	441a      	add	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d909      	bls.n	80067b6 <UART_SetConfig+0xa8e>
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a8:	d205      	bcs.n	80067b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60da      	str	r2, [r3, #12]
 80067b4:	e002      	b.n	80067bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3748      	adds	r7, #72	@ 0x48
 80067e0:	46bd      	mov	sp, r7
 80067e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	003d0900 	.word	0x003d0900
 80067f4:	0800b258 	.word	0x0800b258

080067f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01a      	beq.n	800690e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f6:	d10a      	bne.n	800690e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b098      	sub	sp, #96	@ 0x60
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800694c:	f7fa ff2a 	bl	80017a4 <HAL_GetTick>
 8006950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b08      	cmp	r3, #8
 800695e:	d12f      	bne.n	80069c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006968:	2200      	movs	r2, #0
 800696a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f88e 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d022      	beq.n	80069c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800698e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006998:	647b      	str	r3, [r7, #68]	@ 0x44
 800699a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800699e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e063      	b.n	8006a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d149      	bne.n	8006a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f857 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d03c      	beq.n	8006a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	623b      	str	r3, [r7, #32]
   return(result);
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e6      	bne.n	80069e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a3a:	61fa      	str	r2, [r7, #28]
 8006a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	69b9      	ldr	r1, [r7, #24]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	617b      	str	r3, [r7, #20]
   return(result);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e5      	bne.n	8006a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e012      	b.n	8006a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3758      	adds	r7, #88	@ 0x58
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa0:	e04f      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa8:	d04b      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fa fe7b 	bl	80017a4 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e04e      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d037      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b80      	cmp	r3, #128	@ 0x80
 8006ad6:	d034      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d031      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d110      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2208      	movs	r2, #8
 8006af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f839 	bl	8006b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2208      	movs	r2, #8
 8006afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e029      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d111      	bne.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f81f 	bl	8006b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e00f      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d0a0      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b095      	sub	sp, #84	@ 0x54
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c34 <UART_EndRxTransfer+0xc8>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d118      	bne.n	8006c14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f023 0310 	bic.w	r3, r3, #16
 8006bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6979      	ldr	r1, [r7, #20]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c28:	bf00      	nop
 8006c2a:	3754      	adds	r7, #84	@ 0x54
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	effffffe 	.word	0xeffffffe

08006c38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e027      	b.n	8006c9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	@ 0x24
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e02d      	b.n	8006d1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2224      	movs	r2, #36	@ 0x24
 8006cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f850 	bl	8006da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e02d      	b.n	8006d9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2224      	movs	r2, #36	@ 0x24
 8006d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f812 	bl	8006da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dc4:	e031      	b.n	8006e2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dca:	2310      	movs	r3, #16
 8006dcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	0e5b      	lsrs	r3, r3, #25
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	0f5b      	lsrs	r3, r3, #29
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	7b3a      	ldrb	r2, [r7, #12]
 8006df2:	4911      	ldr	r1, [pc, #68]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x94>)
 8006df4:	5c8a      	ldrb	r2, [r1, r2]
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dfa:	7b3a      	ldrb	r2, [r7, #12]
 8006dfc:	490f      	ldr	r1, [pc, #60]	@ (8006e3c <UARTEx_SetNbDataToProcess+0x98>)
 8006dfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	7b7a      	ldrb	r2, [r7, #13]
 8006e10:	4909      	ldr	r1, [pc, #36]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x94>)
 8006e12:	5c8a      	ldrb	r2, [r1, r2]
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e18:	7b7a      	ldrb	r2, [r7, #13]
 8006e1a:	4908      	ldr	r1, [pc, #32]	@ (8006e3c <UARTEx_SetNbDataToProcess+0x98>)
 8006e1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	0800b270 	.word	0x0800b270
 8006e3c:	0800b278 	.word	0x0800b278

08006e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e40:	b084      	sub	sp, #16
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	f107 001c 	add.w	r0, r7, #28
 8006e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d121      	bne.n	8006e9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f1c <USB_CoreInit+0xdc>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d105      	bne.n	8006e92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 faaa 	bl	80073ec <USB_CoreReset>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	e01b      	b.n	8006ed6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa9e 	bl	80073ec <USB_CoreReset>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006eb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ec8:	e005      	b.n	8006ed6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ed6:	7fbb      	ldrb	r3, [r7, #30]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d116      	bne.n	8006f0a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006eea:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <USB_CoreInit+0xe0>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f043 0206 	orr.w	r2, r3, #6
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f043 0220 	orr.w	r2, r3, #32
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f16:	b004      	add	sp, #16
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	ffbdffbf 	.word	0xffbdffbf
 8006f20:	03ee0000 	.word	0x03ee0000

08006f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f023 0201 	bic.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d115      	bne.n	8006f94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f74:	200a      	movs	r0, #10
 8006f76:	f7fa fc21 	bl	80017bc <HAL_Delay>
      ms += 10U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	330a      	adds	r3, #10
 8006f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa25 	bl	80073d0 <USB_GetMode>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d01e      	beq.n	8006fca <USB_SetCurrentMode+0x84>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f90:	d9f0      	bls.n	8006f74 <USB_SetCurrentMode+0x2e>
 8006f92:	e01a      	b.n	8006fca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d115      	bne.n	8006fc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fa6:	200a      	movs	r0, #10
 8006fa8:	f7fa fc08 	bl	80017bc <HAL_Delay>
      ms += 10U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	330a      	adds	r3, #10
 8006fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa0c 	bl	80073d0 <USB_GetMode>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <USB_SetCurrentMode+0x84>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fc2:	d9f0      	bls.n	8006fa6 <USB_SetCurrentMode+0x60>
 8006fc4:	e001      	b.n	8006fca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e005      	b.n	8006fd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006fce:	d101      	bne.n	8006fd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	e009      	b.n	8007014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3340      	adds	r3, #64	@ 0x40
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	2200      	movs	r2, #0
 800700c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b0e      	cmp	r3, #14
 8007018:	d9f2      	bls.n	8007000 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800701a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800701e:	2b00      	cmp	r3, #0
 8007020:	d11c      	bne.n	800705c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007030:	f043 0302 	orr.w	r3, r3, #2
 8007034:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e005      	b.n	8007068 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800706e:	461a      	mov	r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007074:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007078:	2b01      	cmp	r3, #1
 800707a:	d10d      	bne.n	8007098 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007084:	2100      	movs	r1, #0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f968 	bl	800735c <USB_SetDevSpeed>
 800708c:	e008      	b.n	80070a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800708e:	2101      	movs	r1, #1
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f963 	bl	800735c <USB_SetDevSpeed>
 8007096:	e003      	b.n	80070a0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007098:	2103      	movs	r1, #3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f95e 	bl	800735c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070a0:	2110      	movs	r1, #16
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8fa 	bl	800729c <USB_FlushTxFifo>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f924 	bl	8007300 <USB_FlushRxFifo>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c8:	461a      	mov	r2, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d4:	461a      	mov	r2, r3
 80070d6:	2300      	movs	r3, #0
 80070d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e0:	461a      	mov	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	e043      	b.n	8007174 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007102:	d118      	bne.n	8007136 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e013      	b.n	8007148 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	461a      	mov	r2, r3
 800712e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	e008      	b.n	8007148 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007142:	461a      	mov	r2, r3
 8007144:	2300      	movs	r3, #0
 8007146:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007154:	461a      	mov	r2, r3
 8007156:	2300      	movs	r3, #0
 8007158:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007166:	461a      	mov	r2, r3
 8007168:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800716c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3301      	adds	r3, #1
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007178:	461a      	mov	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4293      	cmp	r3, r2
 800717e:	d3b5      	bcc.n	80070ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	e043      	b.n	800720e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800719c:	d118      	bne.n	80071d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b0:	461a      	mov	r2, r3
 80071b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e013      	b.n	80071e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c6:	461a      	mov	r2, r3
 80071c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e008      	b.n	80071e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071dc:	461a      	mov	r2, r3
 80071de:	2300      	movs	r3, #0
 80071e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3301      	adds	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007212:	461a      	mov	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4293      	cmp	r3, r2
 8007218:	d3b5      	bcc.n	8007186 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800722c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800723a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800723c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f043 0210 	orr.w	r2, r3, #16
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <USB_DevInit+0x2b4>)
 8007256:	4313      	orrs	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800725c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f043 0208 	orr.w	r2, r3, #8
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007270:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <USB_DevInit+0x2b8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007290:	b004      	add	sp, #16
 8007292:	4770      	bx	lr
 8007294:	803c3800 	.word	0x803c3800
 8007298:	40000004 	.word	0x40000004

0800729c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b6:	d901      	bls.n	80072bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e01b      	b.n	80072f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	daf2      	bge.n	80072aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	019b      	lsls	r3, r3, #6
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072e0:	d901      	bls.n	80072e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e006      	b.n	80072f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d0f0      	beq.n	80072d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007318:	d901      	bls.n	800731e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e018      	b.n	8007350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	daf2      	bge.n	800730c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2210      	movs	r2, #16
 800732e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800733c:	d901      	bls.n	8007342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e006      	b.n	8007350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b10      	cmp	r3, #16
 800734c:	d0f0      	beq.n	8007330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800737c:	4313      	orrs	r3, r2
 800737e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073bc:	f043 0302 	orr.w	r3, r3, #2
 80073c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f003 0301 	and.w	r3, r3, #1
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007404:	d901      	bls.n	800740a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e01b      	b.n	8007442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	daf2      	bge.n	80073f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f043 0201 	orr.w	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800742e:	d901      	bls.n	8007434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e006      	b.n	8007442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b01      	cmp	r3, #1
 800743e:	d0f0      	beq.n	8007422 <USB_CoreReset+0x36>

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
	...

08007450 <__NVIC_SetPriority>:
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800745c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007460:	2b00      	cmp	r3, #0
 8007462:	db0a      	blt.n	800747a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	490c      	ldr	r1, [pc, #48]	@ (800749c <__NVIC_SetPriority+0x4c>)
 800746a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800746e:	0112      	lsls	r2, r2, #4
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	440b      	add	r3, r1
 8007474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007478:	e00a      	b.n	8007490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4908      	ldr	r1, [pc, #32]	@ (80074a0 <__NVIC_SetPriority+0x50>)
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	3b04      	subs	r3, #4
 8007488:	0112      	lsls	r2, r2, #4
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	440b      	add	r3, r1
 800748e:	761a      	strb	r2, [r3, #24]
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	e000e100 	.word	0xe000e100
 80074a0:	e000ed00 	.word	0xe000ed00

080074a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <SysTick_Handler+0x1c>)
 80074aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074ac:	f001 fff4 	bl	8009498 <xTaskGetSchedulerState>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074b6:	f002 feaf 	bl	800a218 <xPortSysTickHandler>
  }
}
 80074ba:	bf00      	nop
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000e010 	.word	0xe000e010

080074c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074c8:	2100      	movs	r1, #0
 80074ca:	f06f 0004 	mvn.w	r0, #4
 80074ce:	f7ff ffbf 	bl	8007450 <__NVIC_SetPriority>
#endif
}
 80074d2:	bf00      	nop
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074de:	f3ef 8305 	mrs	r3, IPSR
 80074e2:	603b      	str	r3, [r7, #0]
  return(result);
 80074e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074ea:	f06f 0305 	mvn.w	r3, #5
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	e00c      	b.n	800750c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <osKernelInitialize+0x44>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d105      	bne.n	8007506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074fa:	4b08      	ldr	r3, [pc, #32]	@ (800751c <osKernelInitialize+0x44>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007500:	2300      	movs	r3, #0
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	e002      	b.n	800750c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800750a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800750c:	687b      	ldr	r3, [r7, #4]
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	24000810 	.word	0x24000810

08007520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007526:	f3ef 8305 	mrs	r3, IPSR
 800752a:	603b      	str	r3, [r7, #0]
  return(result);
 800752c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007532:	f06f 0305 	mvn.w	r3, #5
 8007536:	607b      	str	r3, [r7, #4]
 8007538:	e010      	b.n	800755c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800753a:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <osKernelStart+0x48>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d109      	bne.n	8007556 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007542:	f7ff ffbf 	bl	80074c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007546:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <osKernelStart+0x48>)
 8007548:	2202      	movs	r2, #2
 800754a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800754c:	f001 fb40 	bl	8008bd0 <vTaskStartScheduler>
      stat = osOK;
 8007550:	2300      	movs	r3, #0
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	e002      	b.n	800755c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800755a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800755c:	687b      	ldr	r3, [r7, #4]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	24000810 	.word	0x24000810

0800756c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b08e      	sub	sp, #56	@ 0x38
 8007570:	af04      	add	r7, sp, #16
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007578:	2300      	movs	r3, #0
 800757a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800757c:	f3ef 8305 	mrs	r3, IPSR
 8007580:	617b      	str	r3, [r7, #20]
  return(result);
 8007582:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007584:	2b00      	cmp	r3, #0
 8007586:	d17e      	bne.n	8007686 <osThreadNew+0x11a>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d07b      	beq.n	8007686 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800758e:	2380      	movs	r3, #128	@ 0x80
 8007590:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007592:	2318      	movs	r3, #24
 8007594:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800759a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800759e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d045      	beq.n	8007632 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <osThreadNew+0x48>
        name = attr->name;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <osThreadNew+0x6e>
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b38      	cmp	r3, #56	@ 0x38
 80075cc:	d805      	bhi.n	80075da <osThreadNew+0x6e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <osThreadNew+0x72>
        return (NULL);
 80075da:	2300      	movs	r3, #0
 80075dc:	e054      	b.n	8007688 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00e      	beq.n	8007614 <osThreadNew+0xa8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80075fc:	d90a      	bls.n	8007614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <osThreadNew+0xa8>
        mem = 1;
 800760e:	2301      	movs	r3, #1
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	e010      	b.n	8007636 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10c      	bne.n	8007636 <osThreadNew+0xca>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <osThreadNew+0xca>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <osThreadNew+0xca>
          mem = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e001      	b.n	8007636 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d110      	bne.n	800765e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6a3a      	ldr	r2, [r7, #32]
 8007650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f001 f8c8 	bl	80087e8 <xTaskCreateStatic>
 8007658:	4603      	mov	r3, r0
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	e013      	b.n	8007686 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d110      	bne.n	8007686 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	b29a      	uxth	r2, r3
 8007668:	f107 0310 	add.w	r3, r7, #16
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f001 f916 	bl	80088a8 <xTaskCreate>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <osThreadNew+0x11a>
            hTask = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007686:	693b      	ldr	r3, [r7, #16]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	@ 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007698:	f3ef 8305 	mrs	r3, IPSR
 800769c:	60bb      	str	r3, [r7, #8]
  return(result);
 800769e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <osDelay+0x1c>
    stat = osErrorISR;
 80076a4:	f06f 0305 	mvn.w	r3, #5
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e007      	b.n	80076bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fa54 	bl	8008b64 <vTaskDelay>
    }
  }

  return (stat);
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f002 fbbc 	bl	8009e4c <pvTimerGetTimerID>
 80076d4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <TimerCallback+0x22>
    callb->func (callb->arg);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	6852      	ldr	r2, [r2, #4]
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
  }
}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08c      	sub	sp, #48	@ 0x30
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	460b      	mov	r3, r1
 80076fe:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	613b      	str	r3, [r7, #16]
  return(result);
 800770a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800770c:	2b00      	cmp	r3, #0
 800770e:	d163      	bne.n	80077d8 <osTimerNew+0xe8>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d060      	beq.n	80077d8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007716:	2008      	movs	r0, #8
 8007718:	f002 fe10 	bl	800a33c <pvPortMalloc>
 800771c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d059      	beq.n	80077d8 <osTimerNew+0xe8>
      callb->func = func;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e001      	b.n	8007740 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007744:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01c      	beq.n	800778a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <osTimerNew+0x6e>
          name = attr->name;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <osTimerNew+0x84>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2b2b      	cmp	r3, #43	@ 0x2b
 800776c:	d902      	bls.n	8007774 <osTimerNew+0x84>
          mem = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e00c      	b.n	800778e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <osTimerNew+0x9e>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <osTimerNew+0x9e>
            mem = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	e001      	b.n	800778e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10c      	bne.n	80077ae <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	4b12      	ldr	r3, [pc, #72]	@ (80077e4 <osTimerNew+0xf4>)
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	2101      	movs	r1, #1
 80077a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077a6:	f001 ffc4 	bl	8009732 <xTimerCreateStatic>
 80077aa:	6238      	str	r0, [r7, #32]
 80077ac:	e00b      	b.n	80077c6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d108      	bne.n	80077c6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80077b4:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <osTimerNew+0xf4>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	2101      	movs	r1, #1
 80077be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077c0:	f001 ff96 	bl	80096f0 <xTimerCreate>
 80077c4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <osTimerNew+0xe8>
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <osTimerNew+0xe8>
        vPortFree (callb);
 80077d2:	6978      	ldr	r0, [r7, #20]
 80077d4:	f002 fe80 	bl	800a4d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3728      	adds	r7, #40	@ 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	080076c7 	.word	0x080076c7

080077e8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f6:	f3ef 8305 	mrs	r3, IPSR
 80077fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80077fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <osTimerStart+0x22>
    stat = osErrorISR;
 8007802:	f06f 0305 	mvn.w	r3, #5
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e017      	b.n	800783a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007810:	f06f 0303 	mvn.w	r3, #3
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e010      	b.n	800783a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007818:	2300      	movs	r3, #0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2300      	movs	r3, #0
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	2104      	movs	r1, #4
 8007822:	6938      	ldr	r0, [r7, #16]
 8007824:	f002 f802 	bl	800982c <xTimerGenericCommand>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d102      	bne.n	8007834 <osTimerStart+0x4c>
      stat = osOK;
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e002      	b.n	800783a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007834:	f06f 0302 	mvn.w	r3, #2
 8007838:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	@ 0x28
 8007848:	af02      	add	r7, sp, #8
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007854:	f3ef 8305 	mrs	r3, IPSR
 8007858:	613b      	str	r3, [r7, #16]
  return(result);
 800785a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800785c:	2b00      	cmp	r3, #0
 800785e:	d15f      	bne.n	8007920 <osMessageQueueNew+0xdc>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d05c      	beq.n	8007920 <osMessageQueueNew+0xdc>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d059      	beq.n	8007920 <osMessageQueueNew+0xdc>
    mem = -1;
 800786c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007870:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d029      	beq.n	80078cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d012      	beq.n	80078a6 <osMessageQueueNew+0x62>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b4f      	cmp	r3, #79	@ 0x4f
 8007886:	d90e      	bls.n	80078a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	429a      	cmp	r2, r3
 800789e:	d302      	bcc.n	80078a6 <osMessageQueueNew+0x62>
        mem = 1;
 80078a0:	2301      	movs	r3, #1
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	e014      	b.n	80078d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <osMessageQueueNew+0x8c>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10c      	bne.n	80078d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d108      	bne.n	80078d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	e001      	b.n	80078d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d10b      	bne.n	80078ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	9100      	str	r1, [sp, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fa31 	bl	8007d4c <xQueueGenericCreateStatic>
 80078ea:	61f8      	str	r0, [r7, #28]
 80078ec:	e008      	b.n	8007900 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80078f4:	2200      	movs	r2, #0
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 faa4 	bl	8007e46 <xQueueGenericCreate>
 80078fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00c      	beq.n	8007920 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <osMessageQueueNew+0xd0>
        name = attr->name;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e001      	b.n	8007918 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	69f8      	ldr	r0, [r7, #28]
 800791c:	f000 ff06 	bl	800872c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007920:	69fb      	ldr	r3, [r7, #28]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007940:	2300      	movs	r3, #0
 8007942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007944:	f3ef 8305 	mrs	r3, IPSR
 8007948:	617b      	str	r3, [r7, #20]
  return(result);
 800794a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800794c:	2b00      	cmp	r3, #0
 800794e:	d028      	beq.n	80079a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <osMessageQueuePut+0x36>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <osMessageQueuePut+0x36>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007962:	f06f 0303 	mvn.w	r3, #3
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	e038      	b.n	80079dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800796e:	f107 0210 	add.w	r2, r7, #16
 8007972:	2300      	movs	r3, #0
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	69b8      	ldr	r0, [r7, #24]
 8007978:	f000 fbc6 	bl	8008108 <xQueueGenericSendFromISR>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d003      	beq.n	800798a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007982:	f06f 0302 	mvn.w	r3, #2
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e028      	b.n	80079dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d025      	beq.n	80079dc <osMessageQueuePut+0xb0>
 8007990:	4b15      	ldr	r3, [pc, #84]	@ (80079e8 <osMessageQueuePut+0xbc>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	e01c      	b.n	80079dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <osMessageQueuePut+0x82>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80079ae:	f06f 0303 	mvn.w	r3, #3
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e012      	b.n	80079dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079b6:	2300      	movs	r3, #0
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	69b8      	ldr	r0, [r7, #24]
 80079be:	f000 faa1 	bl	8007f04 <xQueueGenericSend>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d009      	beq.n	80079dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80079ce:	f06f 0301 	mvn.w	r3, #1
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e002      	b.n	80079dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80079d6:	f06f 0302 	mvn.w	r3, #2
 80079da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a02:	f3ef 8305 	mrs	r3, IPSR
 8007a06:	617b      	str	r3, [r7, #20]
  return(result);
 8007a08:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d028      	beq.n	8007a60 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <osMessageQueueGet+0x34>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <osMessageQueueGet+0x34>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007a20:	f06f 0303 	mvn.w	r3, #3
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e037      	b.n	8007a98 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a2c:	f107 0310 	add.w	r3, r7, #16
 8007a30:	461a      	mov	r2, r3
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	69b8      	ldr	r0, [r7, #24]
 8007a36:	f000 fce7 	bl	8008408 <xQueueReceiveFromISR>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d003      	beq.n	8007a48 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007a40:	f06f 0302 	mvn.w	r3, #2
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	e027      	b.n	8007a98 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d024      	beq.n	8007a98 <osMessageQueueGet+0xac>
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <osMessageQueueGet+0xb8>)
 8007a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	e01b      	b.n	8007a98 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <osMessageQueueGet+0x80>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007a6c:	f06f 0303 	mvn.w	r3, #3
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e011      	b.n	8007a98 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	69b8      	ldr	r0, [r7, #24]
 8007a7a:	f000 fbe3 	bl	8008244 <xQueueReceive>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d009      	beq.n	8007a98 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007a8a:	f06f 0301 	mvn.w	r3, #1
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	e002      	b.n	8007a98 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007a92:	f06f 0302 	mvn.w	r3, #2
 8007a96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a98:	69fb      	ldr	r3, [r7, #28]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4a07      	ldr	r2, [pc, #28]	@ (8007ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <vApplicationGetIdleTaskMemory+0x30>)
 8007abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2280      	movs	r2, #128	@ 0x80
 8007ac4:	601a      	str	r2, [r3, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	24000814 	.word	0x24000814
 8007ad8:	240008bc 	.word	0x240008bc

08007adc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a07      	ldr	r2, [pc, #28]	@ (8007b08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007aec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4a06      	ldr	r2, [pc, #24]	@ (8007b0c <vApplicationGetTimerTaskMemory+0x30>)
 8007af2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007afa:	601a      	str	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	24000abc 	.word	0x24000abc
 8007b0c:	24000b64 	.word	0x24000b64

08007b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f103 0208 	add.w	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f103 0208 	add.w	r2, r3, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc8:	d103      	bne.n	8007bd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e00c      	b.n	8007bec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e002      	b.n	8007be0 <vListInsert+0x2e>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d2f6      	bcs.n	8007bda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
}
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6892      	ldr	r2, [r2, #8]
 8007c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6852      	ldr	r2, [r2, #4]
 8007c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d103      	bne.n	8007c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	1e5a      	subs	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ca4:	f002 fa28 	bl	800a0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	68f9      	ldr	r1, [r7, #12]
 8007cb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	441a      	add	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	@ 0xff
 8007ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	22ff      	movs	r2, #255	@ 0xff
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d114      	bne.n	8007d24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01a      	beq.n	8007d38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3310      	adds	r3, #16
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fa00 	bl	800910c <xTaskRemoveFromEventList>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d012      	beq.n	8007d38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <xQueueGenericReset+0xd0>)
 8007d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	e009      	b.n	8007d38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3310      	adds	r3, #16
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fef1 	bl	8007b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3324      	adds	r3, #36	@ 0x24
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff feec 	bl	8007b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d38:	f002 fa10 	bl	800a15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d3c:	2301      	movs	r3, #1
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08e      	sub	sp, #56	@ 0x38
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10b      	bne.n	8007d78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	e7fd      	b.n	8007d74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10b      	bne.n	8007d96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <xQueueGenericCreateStatic+0x56>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <xQueueGenericCreateStatic+0x5a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <xQueueGenericCreateStatic+0x5c>
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	623b      	str	r3, [r7, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	e7fd      	b.n	8007dc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <xQueueGenericCreateStatic+0x84>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <xQueueGenericCreateStatic+0x88>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <xQueueGenericCreateStatic+0x8a>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	61fb      	str	r3, [r7, #28]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007df2:	2350      	movs	r3, #80	@ 0x50
 8007df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b50      	cmp	r3, #80	@ 0x50
 8007dfa:	d00b      	beq.n	8007e14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	61bb      	str	r3, [r7, #24]
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	e7fd      	b.n	8007e10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00d      	beq.n	8007e3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	4613      	mov	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f840 	bl	8007ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3730      	adds	r7, #48	@ 0x30
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08a      	sub	sp, #40	@ 0x28
 8007e4a:	af02      	add	r7, sp, #8
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	613b      	str	r3, [r7, #16]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3350      	adds	r3, #80	@ 0x50
 8007e80:	4618      	mov	r0, r3
 8007e82:	f002 fa5b 	bl	800a33c <pvPortMalloc>
 8007e86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d011      	beq.n	8007eb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	3350      	adds	r3, #80	@ 0x50
 8007e96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ea0:	79fa      	ldrb	r2, [r7, #7]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f805 	bl	8007ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
	}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e002      	b.n	8007ede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eea:	2101      	movs	r1, #1
 8007eec:	69b8      	ldr	r0, [r7, #24]
 8007eee:	f7ff fec3 	bl	8007c78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08e      	sub	sp, #56	@ 0x38
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f12:	2300      	movs	r3, #0
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericSend+0x34>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <xQueueGenericSend+0x42>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSend+0x46>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSend+0x48>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <xQueueGenericSend+0x64>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d103      	bne.n	8007f76 <xQueueGenericSend+0x72>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericSend+0x76>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericSend+0x78>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <xQueueGenericSend+0x94>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	623b      	str	r3, [r7, #32]
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f98:	f001 fa7e 	bl	8009498 <xTaskGetSchedulerState>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <xQueueGenericSend+0xa4>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <xQueueGenericSend+0xa8>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <xQueueGenericSend+0xaa>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10b      	bne.n	8007fca <xQueueGenericSend+0xc6>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	61fb      	str	r3, [r7, #28]
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	e7fd      	b.n	8007fc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fca:	f002 f895 	bl	800a0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <xQueueGenericSend+0xdc>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d129      	bne.n	8008034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fe6:	f000 fa91 	bl	800850c <prvCopyDataToQueue>
 8007fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff6:	3324      	adds	r3, #36	@ 0x24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 f887 	bl	800910c <xTaskRemoveFromEventList>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d013      	beq.n	800802c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b3f      	ldr	r3, [pc, #252]	@ (8008104 <xQueueGenericSend+0x200>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	e00a      	b.n	800802c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b39      	ldr	r3, [pc, #228]	@ (8008104 <xQueueGenericSend+0x200>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800802c:	f002 f896 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	e063      	b.n	80080fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800803a:	f002 f88f 	bl	800a15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800803e:	2300      	movs	r3, #0
 8008040:	e05c      	b.n	80080fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f8c1 	bl	80091d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008056:	f002 f881 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800805a:	f000 fe29 	bl	8008cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800805e:	f002 f84b 	bl	800a0f8 <vPortEnterCritical>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008068:	b25b      	sxtb	r3, r3
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800806e:	d103      	bne.n	8008078 <xQueueGenericSend+0x174>
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800807e:	b25b      	sxtb	r3, r3
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008084:	d103      	bne.n	800808e <xQueueGenericSend+0x18a>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800808e:	f002 f865 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f001 f8b0 	bl	8009200 <xTaskCheckForTimeOut>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d124      	bne.n	80080f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080a8:	f000 fb28 	bl	80086fc <prvIsQueueFull>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d018      	beq.n	80080e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	3310      	adds	r3, #16
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 ffd4 	bl	8009068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080c2:	f000 fab3 	bl	800862c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080c6:	f000 fe01 	bl	8008ccc <xTaskResumeAll>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f47f af7c 	bne.w	8007fca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80080d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008104 <xQueueGenericSend+0x200>)
 80080d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	e772      	b.n	8007fca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e6:	f000 faa1 	bl	800862c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ea:	f000 fdef 	bl	8008ccc <xTaskResumeAll>
 80080ee:	e76c      	b.n	8007fca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080f2:	f000 fa9b 	bl	800862c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f6:	f000 fde9 	bl	8008ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3738      	adds	r7, #56	@ 0x38
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b090      	sub	sp, #64	@ 0x40
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10b      	bne.n	8008138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueGenericSendFromISR+0x3e>
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <xQueueGenericSendFromISR+0x42>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <xQueueGenericSendFromISR+0x44>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d103      	bne.n	8008176 <xQueueGenericSendFromISR+0x6e>
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <xQueueGenericSendFromISR+0x72>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <xQueueGenericSendFromISR+0x74>
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	623b      	str	r3, [r7, #32]
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	e7fd      	b.n	8008194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008198:	f002 f88e 	bl	800a2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800819c:	f3ef 8211 	mrs	r2, BASEPRI
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	61fa      	str	r2, [r7, #28]
 80081b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d302      	bcc.n	80081ca <xQueueGenericSendFromISR+0xc2>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d12f      	bne.n	800822a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	68b9      	ldr	r1, [r7, #8]
 80081de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081e0:	f000 f994 	bl	800850c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081ec:	d112      	bne.n	8008214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d016      	beq.n	8008224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	3324      	adds	r3, #36	@ 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff86 	bl	800910c <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00e      	beq.n	8008224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e007      	b.n	8008224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008218:	3301      	adds	r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	b25a      	sxtb	r2, r3
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008228:	e001      	b.n	800822e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800823a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800823c:	4618      	mov	r0, r3
 800823e:	3740      	adds	r7, #64	@ 0x40
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	@ 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xQueueReceive+0x32>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	623b      	str	r3, [r7, #32]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <xQueueReceive+0x40>
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueReceive+0x44>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueReceive+0x46>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <xQueueReceive+0x62>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082a6:	f001 f8f7 	bl	8009498 <xTaskGetSchedulerState>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <xQueueReceive+0x72>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <xQueueReceive+0x76>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueReceive+0x78>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueReceive+0x94>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082d8:	f001 ff0e 	bl	800a0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01f      	beq.n	8008328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ec:	f000 f978 	bl	80085e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00f      	beq.n	8008320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	3310      	adds	r3, #16
 8008304:	4618      	mov	r0, r3
 8008306:	f000 ff01 	bl	800910c <xTaskRemoveFromEventList>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d007      	beq.n	8008320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008310:	4b3c      	ldr	r3, [pc, #240]	@ (8008404 <xQueueReceive+0x1c0>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008320:	f001 ff1c 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	e069      	b.n	80083fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800832e:	f001 ff15 	bl	800a15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008332:	2300      	movs	r3, #0
 8008334:	e062      	b.n	80083fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ff47 	bl	80091d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800834a:	f001 ff07 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800834e:	f000 fcaf 	bl	8008cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008352:	f001 fed1 	bl	800a0f8 <vPortEnterCritical>
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008362:	d103      	bne.n	800836c <xQueueReceive+0x128>
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008372:	b25b      	sxtb	r3, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x13e>
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008382:	f001 feeb 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008386:	1d3a      	adds	r2, r7, #4
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f000 ff36 	bl	8009200 <xTaskCheckForTimeOut>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d123      	bne.n	80083e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	f000 f998 	bl	80086d0 <prvIsQueueEmpty>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	3324      	adds	r3, #36	@ 0x24
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fe5a 	bl	8009068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b6:	f000 f939 	bl	800862c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ba:	f000 fc87 	bl	8008ccc <xTaskResumeAll>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d189      	bne.n	80082d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80083c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <xQueueReceive+0x1c0>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	e780      	b.n	80082d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083d8:	f000 f928 	bl	800862c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083dc:	f000 fc76 	bl	8008ccc <xTaskResumeAll>
 80083e0:	e77a      	b.n	80082d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	f000 f922 	bl	800862c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e8:	f000 fc70 	bl	8008ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ee:	f000 f96f 	bl	80086d0 <prvIsQueueEmpty>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f43f af6f 	beq.w	80082d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3730      	adds	r7, #48	@ 0x30
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08e      	sub	sp, #56	@ 0x38
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	623b      	str	r3, [r7, #32]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <xQueueReceiveFromISR+0x3c>
 800843c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <xQueueReceiveFromISR+0x40>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <xQueueReceiveFromISR+0x42>
 8008448:	2300      	movs	r3, #0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	61fb      	str	r3, [r7, #28]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008466:	f001 ff27 	bl	800a2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800846a:	f3ef 8211 	mrs	r2, BASEPRI
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	61ba      	str	r2, [r7, #24]
 8008480:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008482:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800848c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d02f      	beq.n	80084f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084a0:	f000 f89e 	bl	80085e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084b4:	d112      	bne.n	80084dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fe22 	bl	800910c <xTaskRemoveFromEventList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e007      	b.n	80084ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e0:	3301      	adds	r3, #1
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	b25a      	sxtb	r2, r3
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80084ec:	2301      	movs	r3, #1
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e001      	b.n	80084f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f383 8811 	msr	BASEPRI, r3
}
 8008500:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008504:	4618      	mov	r0, r3
 8008506:	3738      	adds	r7, #56	@ 0x38
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008520:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10d      	bne.n	8008546 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d14d      	bne.n	80085ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 ffcc 	bl	80094d4 <xTaskPriorityDisinherit>
 800853c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	e043      	b.n	80085ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d119      	bne.n	8008580 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6858      	ldr	r0, [r3, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008554:	461a      	mov	r2, r3
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	f002 f988 	bl	800a86c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008564:	441a      	add	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	d32b      	bcc.n	80085ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	e026      	b.n	80085ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68d8      	ldr	r0, [r3, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	461a      	mov	r2, r3
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	f002 f96e 	bl	800a86c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008598:	425b      	negs	r3, r3
 800859a:	441a      	add	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d207      	bcs.n	80085bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b4:	425b      	negs	r3, r3
 80085b6:	441a      	add	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d105      	bne.n	80085ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085d6:	697b      	ldr	r3, [r7, #20]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d018      	beq.n	8008624 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	441a      	add	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d303      	bcc.n	8008614 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68d9      	ldr	r1, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861c:	461a      	mov	r2, r3
 800861e:	6838      	ldr	r0, [r7, #0]
 8008620:	f002 f924 	bl	800a86c <memcpy>
	}
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008634:	f001 fd60 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800863e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008640:	e011      	b.n	8008666 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	d012      	beq.n	8008670 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3324      	adds	r3, #36	@ 0x24
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fd5c 	bl	800910c <xTaskRemoveFromEventList>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800865a:	f000 fe35 	bl	80092c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	3b01      	subs	r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dce9      	bgt.n	8008642 <prvUnlockQueue+0x16>
 800866e:	e000      	b.n	8008672 <prvUnlockQueue+0x46>
					break;
 8008670:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	22ff      	movs	r2, #255	@ 0xff
 8008676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800867a:	f001 fd6f 	bl	800a15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800867e:	f001 fd3b 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008688:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800868a:	e011      	b.n	80086b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d012      	beq.n	80086ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3310      	adds	r3, #16
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fd37 	bl	800910c <xTaskRemoveFromEventList>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086a4:	f000 fe10 	bl	80092c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dce9      	bgt.n	800868c <prvUnlockQueue+0x60>
 80086b8:	e000      	b.n	80086bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	22ff      	movs	r2, #255	@ 0xff
 80086c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086c4:	f001 fd4a 	bl	800a15c <vPortExitCritical>
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086d8:	f001 fd0e 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e001      	b.n	80086ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086ee:	f001 fd35 	bl	800a15c <vPortExitCritical>

	return xReturn;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008704:	f001 fcf8 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008710:	429a      	cmp	r2, r3
 8008712:	d102      	bne.n	800871a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008714:	2301      	movs	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e001      	b.n	800871e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800871e:	f001 fd1d 	bl	800a15c <vPortExitCritical>

	return xReturn;
 8008722:	68fb      	ldr	r3, [r7, #12]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	e014      	b.n	8008766 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800873c:	4a0f      	ldr	r2, [pc, #60]	@ (800877c <vQueueAddToRegistry+0x50>)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008748:	490c      	ldr	r1, [pc, #48]	@ (800877c <vQueueAddToRegistry+0x50>)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008752:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <vQueueAddToRegistry+0x50>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4413      	add	r3, r2
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800875e:	e006      	b.n	800876e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3301      	adds	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b07      	cmp	r3, #7
 800876a:	d9e7      	bls.n	800873c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	24000f64 	.word	0x24000f64

08008780 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008790:	f001 fcb2 	bl	800a0f8 <vPortEnterCritical>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800879a:	b25b      	sxtb	r3, r3
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a0:	d103      	bne.n	80087aa <vQueueWaitForMessageRestricted+0x2a>
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087b0:	b25b      	sxtb	r3, r3
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087b6:	d103      	bne.n	80087c0 <vQueueWaitForMessageRestricted+0x40>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087c0:	f001 fccc 	bl	800a15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	3324      	adds	r3, #36	@ 0x24
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fc6d 	bl	80090b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f7ff ff26 	bl	800862c <prvUnlockQueue>
	}
 80087e0:	bf00      	nop
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08e      	sub	sp, #56	@ 0x38
 80087ec:	af04      	add	r7, sp, #16
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <xTaskCreateStatic+0x2c>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	623b      	str	r3, [r7, #32]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <xTaskCreateStatic+0x4a>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	61fb      	str	r3, [r7, #28]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008832:	23a8      	movs	r3, #168	@ 0xa8
 8008834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2ba8      	cmp	r3, #168	@ 0xa8
 800883a:	d00b      	beq.n	8008854 <xTaskCreateStatic+0x6c>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61bb      	str	r3, [r7, #24]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008854:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01e      	beq.n	800889a <xTaskCreateStatic+0xb2>
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800886a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	2202      	movs	r2, #2
 8008870:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008874:	2300      	movs	r3, #0
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f851 	bl	8008934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008894:	f000 f8f6 	bl	8008a84 <prvAddNewTaskToReadyList>
 8008898:	e001      	b.n	800889e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800889e:	697b      	ldr	r3, [r7, #20]
	}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3728      	adds	r7, #40	@ 0x28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	@ 0x30
 80088ac:	af04      	add	r7, sp, #16
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088b8:	88fb      	ldrh	r3, [r7, #6]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fd3d 	bl	800a33c <pvPortMalloc>
 80088c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00e      	beq.n	80088e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088ca:	20a8      	movs	r0, #168	@ 0xa8
 80088cc:	f001 fd36 	bl	800a33c <pvPortMalloc>
 80088d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80088de:	e005      	b.n	80088ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088e0:	6978      	ldr	r0, [r7, #20]
 80088e2:	f001 fdf9 	bl	800a4d8 <vPortFree>
 80088e6:	e001      	b.n	80088ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f80f 	bl	8008934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008916:	69f8      	ldr	r0, [r7, #28]
 8008918:	f000 f8b4 	bl	8008a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800891c:	2301      	movs	r3, #1
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	e002      	b.n	8008928 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008926:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008928:	69bb      	ldr	r3, [r7, #24]
	}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	461a      	mov	r2, r3
 800894c:	21a5      	movs	r1, #165	@ 0xa5
 800894e:	f001 ff03 	bl	800a758 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800895c:	440b      	add	r3, r1
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	617b      	str	r3, [r7, #20]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01f      	beq.n	80089d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008994:	2300      	movs	r3, #0
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	e012      	b.n	80089c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	4413      	add	r3, r2
 80089a0:	7819      	ldrb	r1, [r3, #0]
 80089a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	3334      	adds	r3, #52	@ 0x34
 80089aa:	460a      	mov	r2, r1
 80089ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d006      	beq.n	80089c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	3301      	adds	r3, #1
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b0f      	cmp	r3, #15
 80089c4:	d9e9      	bls.n	800899a <prvInitialiseNewTask+0x66>
 80089c6:	e000      	b.n	80089ca <prvInitialiseNewTask+0x96>
			{
				break;
 80089c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089d2:	e003      	b.n	80089dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	2b37      	cmp	r3, #55	@ 0x37
 80089e0:	d901      	bls.n	80089e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089e2:	2337      	movs	r3, #55	@ 0x37
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	2200      	movs	r2, #0
 80089f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	3304      	adds	r3, #4
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff f8a7 	bl	8007b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	3318      	adds	r3, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff f8a2 	bl	8007b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	3354      	adds	r3, #84	@ 0x54
 8008a36:	224c      	movs	r2, #76	@ 0x4c
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 fe8c 	bl	800a758 <memset>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	4a0d      	ldr	r2, [pc, #52]	@ (8008a78 <prvInitialiseNewTask+0x144>)
 8008a44:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	4a0c      	ldr	r2, [pc, #48]	@ (8008a7c <prvInitialiseNewTask+0x148>)
 8008a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a80 <prvInitialiseNewTask+0x14c>)
 8008a50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	68f9      	ldr	r1, [r7, #12]
 8008a56:	69b8      	ldr	r0, [r7, #24]
 8008a58:	f001 fa1a 	bl	8009e90 <pxPortInitialiseStack>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a6e:	bf00      	nop
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	240051f8 	.word	0x240051f8
 8008a7c:	24005260 	.word	0x24005260
 8008a80:	240052c8 	.word	0x240052c8

08008a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a8c:	f001 fb34 	bl	800a0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a90:	4b2d      	ldr	r3, [pc, #180]	@ (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	4a2c      	ldr	r2, [pc, #176]	@ (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aa8:	4b27      	ldr	r3, [pc, #156]	@ (8008b48 <prvAddNewTaskToReadyList+0xc4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d110      	bne.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ab0:	f000 fc2e 	bl	8009310 <prvInitialiseTaskLists>
 8008ab4:	e00d      	b.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ab6:	4b26      	ldr	r3, [pc, #152]	@ (8008b50 <prvAddNewTaskToReadyList+0xcc>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008abe:	4b23      	ldr	r3, [pc, #140]	@ (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d802      	bhi.n	8008ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008acc:	4a1f      	ldr	r2, [pc, #124]	@ (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ad2:	4b20      	ldr	r3, [pc, #128]	@ (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008adc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b54 <prvAddNewTaskToReadyList+0xd0>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b58 <prvAddNewTaskToReadyList+0xd4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <prvAddNewTaskToReadyList+0x74>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af4:	4a18      	ldr	r2, [pc, #96]	@ (8008b58 <prvAddNewTaskToReadyList+0xd4>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a15      	ldr	r2, [pc, #84]	@ (8008b5c <prvAddNewTaskToReadyList+0xd8>)
 8008b06:	441a      	add	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7ff f82b 	bl	8007b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b14:	f001 fb22 	bl	800a15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b18:	4b0d      	ldr	r3, [pc, #52]	@ (8008b50 <prvAddNewTaskToReadyList+0xcc>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00e      	beq.n	8008b3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b20:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <prvAddNewTaskToReadyList+0xc8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d207      	bcs.n	8008b3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b60 <prvAddNewTaskToReadyList+0xdc>)
 8008b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	24001478 	.word	0x24001478
 8008b4c:	24000fa4 	.word	0x24000fa4
 8008b50:	24001484 	.word	0x24001484
 8008b54:	24001494 	.word	0x24001494
 8008b58:	24001480 	.word	0x24001480
 8008b5c:	24000fa8 	.word	0x24000fa8
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d018      	beq.n	8008ba8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b76:	4b14      	ldr	r3, [pc, #80]	@ (8008bc8 <vTaskDelay+0x64>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <vTaskDelay+0x32>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60bb      	str	r3, [r7, #8]
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	e7fd      	b.n	8008b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b96:	f000 f88b 	bl	8008cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fd09 	bl	80095b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ba2:	f000 f893 	bl	8008ccc <xTaskResumeAll>
 8008ba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d107      	bne.n	8008bbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <vTaskDelay+0x68>)
 8008bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	240014a0 	.word	0x240014a0
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	@ 0x28
 8008bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bde:	463a      	mov	r2, r7
 8008be0:	1d39      	adds	r1, r7, #4
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe ff5e 	bl	8007aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	460a      	mov	r2, r1
 8008bfe:	4924      	ldr	r1, [pc, #144]	@ (8008c90 <vTaskStartScheduler+0xc0>)
 8008c00:	4824      	ldr	r0, [pc, #144]	@ (8008c94 <vTaskStartScheduler+0xc4>)
 8008c02:	f7ff fdf1 	bl	80087e8 <xTaskCreateStatic>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4a23      	ldr	r2, [pc, #140]	@ (8008c98 <vTaskStartScheduler+0xc8>)
 8008c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c0c:	4b22      	ldr	r3, [pc, #136]	@ (8008c98 <vTaskStartScheduler+0xc8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c14:	2301      	movs	r3, #1
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	e001      	b.n	8008c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d102      	bne.n	8008c2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c24:	f000 fd1a 	bl	800965c <xTimerCreateTimerTask>
 8008c28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d11b      	bne.n	8008c68 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c44:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <vTaskStartScheduler+0xcc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3354      	adds	r3, #84	@ 0x54
 8008c4a:	4a15      	ldr	r2, [pc, #84]	@ (8008ca0 <vTaskStartScheduler+0xd0>)
 8008c4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <vTaskStartScheduler+0xd4>)
 8008c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c56:	4b14      	ldr	r3, [pc, #80]	@ (8008ca8 <vTaskStartScheduler+0xd8>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c5c:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <vTaskStartScheduler+0xdc>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c62:	f001 f9a5 	bl	8009fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c66:	e00f      	b.n	8008c88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c6e:	d10b      	bne.n	8008c88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <vTaskStartScheduler+0xb4>
}
 8008c88:	bf00      	nop
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	0800b19c 	.word	0x0800b19c
 8008c94:	080092e1 	.word	0x080092e1
 8008c98:	2400149c 	.word	0x2400149c
 8008c9c:	24000fa4 	.word	0x24000fa4
 8008ca0:	24000014 	.word	0x24000014
 8008ca4:	24001498 	.word	0x24001498
 8008ca8:	24001484 	.word	0x24001484
 8008cac:	2400147c 	.word	0x2400147c

08008cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cb4:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <vTaskSuspendAll+0x18>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	4a03      	ldr	r2, [pc, #12]	@ (8008cc8 <vTaskSuspendAll+0x18>)
 8008cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cbe:	bf00      	nop
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	240014a0 	.word	0x240014a0

08008ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cda:	4b42      	ldr	r3, [pc, #264]	@ (8008de4 <xTaskResumeAll+0x118>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <xTaskResumeAll+0x2e>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	603b      	str	r3, [r7, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cfa:	f001 f9fd 	bl	800a0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cfe:	4b39      	ldr	r3, [pc, #228]	@ (8008de4 <xTaskResumeAll+0x118>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	4a37      	ldr	r2, [pc, #220]	@ (8008de4 <xTaskResumeAll+0x118>)
 8008d06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d08:	4b36      	ldr	r3, [pc, #216]	@ (8008de4 <xTaskResumeAll+0x118>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d162      	bne.n	8008dd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d10:	4b35      	ldr	r3, [pc, #212]	@ (8008de8 <xTaskResumeAll+0x11c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d05e      	beq.n	8008dd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d18:	e02f      	b.n	8008d7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1a:	4b34      	ldr	r3, [pc, #208]	@ (8008dec <xTaskResumeAll+0x120>)
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3318      	adds	r3, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe ff7c 	bl	8007c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe ff77 	bl	8007c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008df0 <xTaskResumeAll+0x124>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d903      	bls.n	8008d4a <xTaskResumeAll+0x7e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	4a2a      	ldr	r2, [pc, #168]	@ (8008df0 <xTaskResumeAll+0x124>)
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4a27      	ldr	r2, [pc, #156]	@ (8008df4 <xTaskResumeAll+0x128>)
 8008d58:	441a      	add	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fe ff02 	bl	8007b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <xTaskResumeAll+0x12c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d302      	bcc.n	8008d7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d74:	4b21      	ldr	r3, [pc, #132]	@ (8008dfc <xTaskResumeAll+0x130>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dec <xTaskResumeAll+0x120>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1cb      	bne.n	8008d1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d88:	f000 fb66 	bl	8009458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008e00 <xTaskResumeAll+0x134>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d010      	beq.n	8008dba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d98:	f000 f846 	bl	8008e28 <xTaskIncrementTick>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008da2:	4b16      	ldr	r3, [pc, #88]	@ (8008dfc <xTaskResumeAll+0x130>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f1      	bne.n	8008d98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008db4:	4b12      	ldr	r3, [pc, #72]	@ (8008e00 <xTaskResumeAll+0x134>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dba:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <xTaskResumeAll+0x130>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e04 <xTaskResumeAll+0x138>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dd6:	f001 f9c1 	bl	800a15c <vPortExitCritical>

	return xAlreadyYielded;
 8008dda:	68bb      	ldr	r3, [r7, #8]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	240014a0 	.word	0x240014a0
 8008de8:	24001478 	.word	0x24001478
 8008dec:	24001438 	.word	0x24001438
 8008df0:	24001480 	.word	0x24001480
 8008df4:	24000fa8 	.word	0x24000fa8
 8008df8:	24000fa4 	.word	0x24000fa4
 8008dfc:	2400148c 	.word	0x2400148c
 8008e00:	24001488 	.word	0x24001488
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <xTaskGetTickCount+0x1c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e14:	687b      	ldr	r3, [r7, #4]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2400147c 	.word	0x2400147c

08008e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e32:	4b4f      	ldr	r3, [pc, #316]	@ (8008f70 <xTaskIncrementTick+0x148>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 8090 	bne.w	8008f5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008f74 <xTaskIncrementTick+0x14c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3301      	adds	r3, #1
 8008e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e44:	4a4b      	ldr	r2, [pc, #300]	@ (8008f74 <xTaskIncrementTick+0x14c>)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d121      	bne.n	8008e94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e50:	4b49      	ldr	r3, [pc, #292]	@ (8008f78 <xTaskIncrementTick+0x150>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	603b      	str	r3, [r7, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	e7fd      	b.n	8008e6e <xTaskIncrementTick+0x46>
 8008e72:	4b41      	ldr	r3, [pc, #260]	@ (8008f78 <xTaskIncrementTick+0x150>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	4b40      	ldr	r3, [pc, #256]	@ (8008f7c <xTaskIncrementTick+0x154>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f78 <xTaskIncrementTick+0x150>)
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	4a3e      	ldr	r2, [pc, #248]	@ (8008f7c <xTaskIncrementTick+0x154>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	4b3e      	ldr	r3, [pc, #248]	@ (8008f80 <xTaskIncrementTick+0x158>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f80 <xTaskIncrementTick+0x158>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	f000 fae2 	bl	8009458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e94:	4b3b      	ldr	r3, [pc, #236]	@ (8008f84 <xTaskIncrementTick+0x15c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d349      	bcc.n	8008f32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9e:	4b36      	ldr	r3, [pc, #216]	@ (8008f78 <xTaskIncrementTick+0x150>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea8:	4b36      	ldr	r3, [pc, #216]	@ (8008f84 <xTaskIncrementTick+0x15c>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eae:	601a      	str	r2, [r3, #0]
					break;
 8008eb0:	e03f      	b.n	8008f32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb2:	4b31      	ldr	r3, [pc, #196]	@ (8008f78 <xTaskIncrementTick+0x150>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d203      	bcs.n	8008ed2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eca:	4a2e      	ldr	r2, [pc, #184]	@ (8008f84 <xTaskIncrementTick+0x15c>)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ed0:	e02f      	b.n	8008f32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fea4 	bl	8007c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	3318      	adds	r3, #24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fe9b 	bl	8007c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	4b25      	ldr	r3, [pc, #148]	@ (8008f88 <xTaskIncrementTick+0x160>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d903      	bls.n	8008f02 <xTaskIncrementTick+0xda>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efe:	4a22      	ldr	r2, [pc, #136]	@ (8008f88 <xTaskIncrementTick+0x160>)
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008f8c <xTaskIncrementTick+0x164>)
 8008f10:	441a      	add	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fe fe26 	bl	8007b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f22:	4b1b      	ldr	r3, [pc, #108]	@ (8008f90 <xTaskIncrementTick+0x168>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3b8      	bcc.n	8008e9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f30:	e7b5      	b.n	8008e9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f32:	4b17      	ldr	r3, [pc, #92]	@ (8008f90 <xTaskIncrementTick+0x168>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f38:	4914      	ldr	r1, [pc, #80]	@ (8008f8c <xTaskIncrementTick+0x164>)
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	440b      	add	r3, r1
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d901      	bls.n	8008f4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f4e:	4b11      	ldr	r3, [pc, #68]	@ (8008f94 <xTaskIncrementTick+0x16c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f56:	2301      	movs	r3, #1
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	e004      	b.n	8008f66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f98 <xTaskIncrementTick+0x170>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	4a0d      	ldr	r2, [pc, #52]	@ (8008f98 <xTaskIncrementTick+0x170>)
 8008f64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f66:	697b      	ldr	r3, [r7, #20]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	240014a0 	.word	0x240014a0
 8008f74:	2400147c 	.word	0x2400147c
 8008f78:	24001430 	.word	0x24001430
 8008f7c:	24001434 	.word	0x24001434
 8008f80:	24001490 	.word	0x24001490
 8008f84:	24001498 	.word	0x24001498
 8008f88:	24001480 	.word	0x24001480
 8008f8c:	24000fa8 	.word	0x24000fa8
 8008f90:	24000fa4 	.word	0x24000fa4
 8008f94:	2400148c 	.word	0x2400148c
 8008f98:	24001488 	.word	0x24001488

08008f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8009050 <vTaskSwitchContext+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008faa:	4b2a      	ldr	r3, [pc, #168]	@ (8009054 <vTaskSwitchContext+0xb8>)
 8008fac:	2201      	movs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fb0:	e047      	b.n	8009042 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008fb2:	4b28      	ldr	r3, [pc, #160]	@ (8009054 <vTaskSwitchContext+0xb8>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb8:	4b27      	ldr	r3, [pc, #156]	@ (8009058 <vTaskSwitchContext+0xbc>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	e011      	b.n	8008fe4 <vTaskSwitchContext+0x48>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10b      	bne.n	8008fde <vTaskSwitchContext+0x42>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	607b      	str	r3, [r7, #4]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vTaskSwitchContext+0x3e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	491d      	ldr	r1, [pc, #116]	@ (800905c <vTaskSwitchContext+0xc0>)
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0e3      	beq.n	8008fc0 <vTaskSwitchContext+0x24>
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4a16      	ldr	r2, [pc, #88]	@ (800905c <vTaskSwitchContext+0xc0>)
 8009004:	4413      	add	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3308      	adds	r3, #8
 800901a:	429a      	cmp	r2, r3
 800901c:	d104      	bne.n	8009028 <vTaskSwitchContext+0x8c>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	4a0c      	ldr	r2, [pc, #48]	@ (8009060 <vTaskSwitchContext+0xc4>)
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	4a09      	ldr	r2, [pc, #36]	@ (8009058 <vTaskSwitchContext+0xbc>)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009038:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <vTaskSwitchContext+0xc4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3354      	adds	r3, #84	@ 0x54
 800903e:	4a09      	ldr	r2, [pc, #36]	@ (8009064 <vTaskSwitchContext+0xc8>)
 8009040:	6013      	str	r3, [r2, #0]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	240014a0 	.word	0x240014a0
 8009054:	2400148c 	.word	0x2400148c
 8009058:	24001480 	.word	0x24001480
 800905c:	24000fa8 	.word	0x24000fa8
 8009060:	24000fa4 	.word	0x24000fa4
 8009064:	24000014 	.word	0x24000014

08009068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	60fb      	str	r3, [r7, #12]
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	e7fd      	b.n	800908c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009090:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <vTaskPlaceOnEventList+0x48>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3318      	adds	r3, #24
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7fe fd8a 	bl	8007bb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800909e:	2101      	movs	r1, #1
 80090a0:	6838      	ldr	r0, [r7, #0]
 80090a2:	f000 fa87 	bl	80095b4 <prvAddCurrentTaskToDelayedList>
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	24000fa4 	.word	0x24000fa4

080090b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	617b      	str	r3, [r7, #20]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090de:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <vTaskPlaceOnEventListRestricted+0x54>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3318      	adds	r3, #24
 80090e4:	4619      	mov	r1, r3
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7fe fd3f 	bl	8007b6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	68b8      	ldr	r0, [r7, #8]
 80090fc:	f000 fa5a 	bl	80095b4 <prvAddCurrentTaskToDelayedList>
	}
 8009100:	bf00      	nop
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	24000fa4 	.word	0x24000fa4

0800910c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60fb      	str	r3, [r7, #12]
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	e7fd      	b.n	8009136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3318      	adds	r3, #24
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fd70 	bl	8007c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009144:	4b1d      	ldr	r3, [pc, #116]	@ (80091bc <xTaskRemoveFromEventList+0xb0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11d      	bne.n	8009188 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3304      	adds	r3, #4
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fd67 	bl	8007c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800915a:	4b19      	ldr	r3, [pc, #100]	@ (80091c0 <xTaskRemoveFromEventList+0xb4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d903      	bls.n	800916a <xTaskRemoveFromEventList+0x5e>
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009166:	4a16      	ldr	r2, [pc, #88]	@ (80091c0 <xTaskRemoveFromEventList+0xb4>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4a13      	ldr	r2, [pc, #76]	@ (80091c4 <xTaskRemoveFromEventList+0xb8>)
 8009178:	441a      	add	r2, r3
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3304      	adds	r3, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f7fe fcf2 	bl	8007b6a <vListInsertEnd>
 8009186:	e005      	b.n	8009194 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	3318      	adds	r3, #24
 800918c:	4619      	mov	r1, r3
 800918e:	480e      	ldr	r0, [pc, #56]	@ (80091c8 <xTaskRemoveFromEventList+0xbc>)
 8009190:	f7fe fceb 	bl	8007b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009198:	4b0c      	ldr	r3, [pc, #48]	@ (80091cc <xTaskRemoveFromEventList+0xc0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	429a      	cmp	r2, r3
 80091a0:	d905      	bls.n	80091ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091a2:	2301      	movs	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091a6:	4b0a      	ldr	r3, [pc, #40]	@ (80091d0 <xTaskRemoveFromEventList+0xc4>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	e001      	b.n	80091b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091b2:	697b      	ldr	r3, [r7, #20]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	240014a0 	.word	0x240014a0
 80091c0:	24001480 	.word	0x24001480
 80091c4:	24000fa8 	.word	0x24000fa8
 80091c8:	24001438 	.word	0x24001438
 80091cc:	24000fa4 	.word	0x24000fa4
 80091d0:	2400148c 	.word	0x2400148c

080091d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091dc:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <vTaskInternalSetTimeOutState+0x24>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091e4:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <vTaskInternalSetTimeOutState+0x28>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	24001490 	.word	0x24001490
 80091fc:	2400147c 	.word	0x2400147c

08009200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10b      	bne.n	8009228 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	613b      	str	r3, [r7, #16]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	60fb      	str	r3, [r7, #12]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009246:	f000 ff57 	bl	800a0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800924a:	4b1d      	ldr	r3, [pc, #116]	@ (80092c0 <xTaskCheckForTimeOut+0xc0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009262:	d102      	bne.n	800926a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	e023      	b.n	80092b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b15      	ldr	r3, [pc, #84]	@ (80092c4 <xTaskCheckForTimeOut+0xc4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d007      	beq.n	8009286 <xTaskCheckForTimeOut+0x86>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	429a      	cmp	r2, r3
 800927e:	d302      	bcc.n	8009286 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009280:	2301      	movs	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	e015      	b.n	80092b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	429a      	cmp	r2, r3
 800928e:	d20b      	bcs.n	80092a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	1ad2      	subs	r2, r2, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff ff99 	bl	80091d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	e004      	b.n	80092b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092b2:	f000 ff53 	bl	800a15c <vPortExitCritical>

	return xReturn;
 80092b6:	69fb      	ldr	r3, [r7, #28]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2400147c 	.word	0x2400147c
 80092c4:	24001490 	.word	0x24001490

080092c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092cc:	4b03      	ldr	r3, [pc, #12]	@ (80092dc <vTaskMissedYield+0x14>)
 80092ce:	2201      	movs	r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	2400148c 	.word	0x2400148c

080092e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092e8:	f000 f852 	bl	8009390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092ec:	4b06      	ldr	r3, [pc, #24]	@ (8009308 <prvIdleTask+0x28>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d9f9      	bls.n	80092e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092f4:	4b05      	ldr	r3, [pc, #20]	@ (800930c <prvIdleTask+0x2c>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009304:	e7f0      	b.n	80092e8 <prvIdleTask+0x8>
 8009306:	bf00      	nop
 8009308:	24000fa8 	.word	0x24000fa8
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009316:	2300      	movs	r3, #0
 8009318:	607b      	str	r3, [r7, #4]
 800931a:	e00c      	b.n	8009336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4a12      	ldr	r2, [pc, #72]	@ (8009370 <prvInitialiseTaskLists+0x60>)
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fbf0 	bl	8007b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3301      	adds	r3, #1
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b37      	cmp	r3, #55	@ 0x37
 800933a:	d9ef      	bls.n	800931c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800933c:	480d      	ldr	r0, [pc, #52]	@ (8009374 <prvInitialiseTaskLists+0x64>)
 800933e:	f7fe fbe7 	bl	8007b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009342:	480d      	ldr	r0, [pc, #52]	@ (8009378 <prvInitialiseTaskLists+0x68>)
 8009344:	f7fe fbe4 	bl	8007b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009348:	480c      	ldr	r0, [pc, #48]	@ (800937c <prvInitialiseTaskLists+0x6c>)
 800934a:	f7fe fbe1 	bl	8007b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800934e:	480c      	ldr	r0, [pc, #48]	@ (8009380 <prvInitialiseTaskLists+0x70>)
 8009350:	f7fe fbde 	bl	8007b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009354:	480b      	ldr	r0, [pc, #44]	@ (8009384 <prvInitialiseTaskLists+0x74>)
 8009356:	f7fe fbdb 	bl	8007b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800935a:	4b0b      	ldr	r3, [pc, #44]	@ (8009388 <prvInitialiseTaskLists+0x78>)
 800935c:	4a05      	ldr	r2, [pc, #20]	@ (8009374 <prvInitialiseTaskLists+0x64>)
 800935e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009360:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <prvInitialiseTaskLists+0x7c>)
 8009362:	4a05      	ldr	r2, [pc, #20]	@ (8009378 <prvInitialiseTaskLists+0x68>)
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	24000fa8 	.word	0x24000fa8
 8009374:	24001408 	.word	0x24001408
 8009378:	2400141c 	.word	0x2400141c
 800937c:	24001438 	.word	0x24001438
 8009380:	2400144c 	.word	0x2400144c
 8009384:	24001464 	.word	0x24001464
 8009388:	24001430 	.word	0x24001430
 800938c:	24001434 	.word	0x24001434

08009390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009396:	e019      	b.n	80093cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009398:	f000 feae 	bl	800a0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939c:	4b10      	ldr	r3, [pc, #64]	@ (80093e0 <prvCheckTasksWaitingTermination+0x50>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fc3b 	bl	8007c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <prvCheckTasksWaitingTermination+0x54>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4a0b      	ldr	r2, [pc, #44]	@ (80093e4 <prvCheckTasksWaitingTermination+0x54>)
 80093b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093b8:	4b0b      	ldr	r3, [pc, #44]	@ (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	4a0a      	ldr	r2, [pc, #40]	@ (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093c2:	f000 fecb 	bl	800a15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f810 	bl	80093ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093cc:	4b06      	ldr	r3, [pc, #24]	@ (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e1      	bne.n	8009398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	2400144c 	.word	0x2400144c
 80093e4:	24001478 	.word	0x24001478
 80093e8:	24001460 	.word	0x24001460

080093ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3354      	adds	r3, #84	@ 0x54
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 f9b5 	bl	800a768 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f863 	bl	800a4d8 <vPortFree>
				vPortFree( pxTCB );
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f860 	bl	800a4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009418:	e019      	b.n	800944e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009420:	2b01      	cmp	r3, #1
 8009422:	d103      	bne.n	800942c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f857 	bl	800a4d8 <vPortFree>
	}
 800942a:	e010      	b.n	800944e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009432:	2b02      	cmp	r3, #2
 8009434:	d00b      	beq.n	800944e <prvDeleteTCB+0x62>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <prvDeleteTCB+0x5e>
	}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800945e:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <prvResetNextTaskUnblockTime+0x38>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009468:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <prvResetNextTaskUnblockTime+0x3c>)
 800946a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009470:	e008      	b.n	8009484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009472:	4b07      	ldr	r3, [pc, #28]	@ (8009490 <prvResetNextTaskUnblockTime+0x38>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4a04      	ldr	r2, [pc, #16]	@ (8009494 <prvResetNextTaskUnblockTime+0x3c>)
 8009482:	6013      	str	r3, [r2, #0]
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	24001430 	.word	0x24001430
 8009494:	24001498 	.word	0x24001498

08009498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800949e:	4b0b      	ldr	r3, [pc, #44]	@ (80094cc <xTaskGetSchedulerState+0x34>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094a6:	2301      	movs	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	e008      	b.n	80094be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ac:	4b08      	ldr	r3, [pc, #32]	@ (80094d0 <xTaskGetSchedulerState+0x38>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094b4:	2302      	movs	r3, #2
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	e001      	b.n	80094be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094ba:	2300      	movs	r3, #0
 80094bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094be:	687b      	ldr	r3, [r7, #4]
	}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	24001484 	.word	0x24001484
 80094d0:	240014a0 	.word	0x240014a0

080094d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d058      	beq.n	800959c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094ea:	4b2f      	ldr	r3, [pc, #188]	@ (80095a8 <xTaskPriorityDisinherit+0xd4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d00b      	beq.n	800950c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	60fb      	str	r3, [r7, #12]
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	e7fd      	b.n	8009508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60bb      	str	r3, [r7, #8]
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800953e:	429a      	cmp	r2, r3
 8009540:	d02c      	beq.n	800959c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009546:	2b00      	cmp	r3, #0
 8009548:	d128      	bne.n	800959c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3304      	adds	r3, #4
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fb68 	bl	8007c24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956c:	4b0f      	ldr	r3, [pc, #60]	@ (80095ac <xTaskPriorityDisinherit+0xd8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d903      	bls.n	800957c <xTaskPriorityDisinherit+0xa8>
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4a0c      	ldr	r2, [pc, #48]	@ (80095ac <xTaskPriorityDisinherit+0xd8>)
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4a09      	ldr	r2, [pc, #36]	@ (80095b0 <xTaskPriorityDisinherit+0xdc>)
 800958a:	441a      	add	r2, r3
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7fe fae9 	bl	8007b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800959c:	697b      	ldr	r3, [r7, #20]
	}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	24000fa4 	.word	0x24000fa4
 80095ac:	24001480 	.word	0x24001480
 80095b0:	24000fa8 	.word	0x24000fa8

080095b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095be:	4b21      	ldr	r3, [pc, #132]	@ (8009644 <prvAddCurrentTaskToDelayedList+0x90>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c4:	4b20      	ldr	r3, [pc, #128]	@ (8009648 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fb2a 	bl	8007c24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d6:	d10a      	bne.n	80095ee <prvAddCurrentTaskToDelayedList+0x3a>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d007      	beq.n	80095ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095de:	4b1a      	ldr	r3, [pc, #104]	@ (8009648 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4819      	ldr	r0, [pc, #100]	@ (800964c <prvAddCurrentTaskToDelayedList+0x98>)
 80095e8:	f7fe fabf 	bl	8007b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095ec:	e026      	b.n	800963c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095f6:	4b14      	ldr	r3, [pc, #80]	@ (8009648 <prvAddCurrentTaskToDelayedList+0x94>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	429a      	cmp	r2, r3
 8009604:	d209      	bcs.n	800961a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b0f      	ldr	r3, [pc, #60]	@ (8009648 <prvAddCurrentTaskToDelayedList+0x94>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3304      	adds	r3, #4
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7fe facd 	bl	8007bb2 <vListInsert>
}
 8009618:	e010      	b.n	800963c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800961a:	4b0e      	ldr	r3, [pc, #56]	@ (8009654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <prvAddCurrentTaskToDelayedList+0x94>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3304      	adds	r3, #4
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fe fac3 	bl	8007bb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800962c:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	d202      	bcs.n	800963c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009636:	4a08      	ldr	r2, [pc, #32]	@ (8009658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6013      	str	r3, [r2, #0]
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2400147c 	.word	0x2400147c
 8009648:	24000fa4 	.word	0x24000fa4
 800964c:	24001464 	.word	0x24001464
 8009650:	24001434 	.word	0x24001434
 8009654:	24001430 	.word	0x24001430
 8009658:	24001498 	.word	0x24001498

0800965c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009666:	f000 fbb1 	bl	8009dcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800966a:	4b1d      	ldr	r3, [pc, #116]	@ (80096e0 <xTimerCreateTimerTask+0x84>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d021      	beq.n	80096b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800967a:	1d3a      	adds	r2, r7, #4
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fa29 	bl	8007adc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	9202      	str	r2, [sp, #8]
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	2302      	movs	r3, #2
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	460a      	mov	r2, r1
 800969c:	4911      	ldr	r1, [pc, #68]	@ (80096e4 <xTimerCreateTimerTask+0x88>)
 800969e:	4812      	ldr	r0, [pc, #72]	@ (80096e8 <xTimerCreateTimerTask+0x8c>)
 80096a0:	f7ff f8a2 	bl	80087e8 <xTaskCreateStatic>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4a11      	ldr	r2, [pc, #68]	@ (80096ec <xTimerCreateTimerTask+0x90>)
 80096a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096aa:	4b10      	ldr	r3, [pc, #64]	@ (80096ec <xTimerCreateTimerTask+0x90>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096b2:	2301      	movs	r3, #1
 80096b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	613b      	str	r3, [r7, #16]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096d4:	697b      	ldr	r3, [r7, #20]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	240014d4 	.word	0x240014d4
 80096e4:	0800b1a4 	.word	0x0800b1a4
 80096e8:	08009965 	.word	0x08009965
 80096ec:	240014d8 	.word	0x240014d8

080096f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80096fe:	202c      	movs	r0, #44	@ 0x2c
 8009700:	f000 fe1c 	bl	800a33c <pvPortMalloc>
 8009704:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00d      	beq.n	8009728 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f845 	bl	80097b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009728:	697b      	ldr	r3, [r7, #20]
	}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009732:	b580      	push	{r7, lr}
 8009734:	b08a      	sub	sp, #40	@ 0x28
 8009736:	af02      	add	r7, sp, #8
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009740:	232c      	movs	r3, #44	@ 0x2c
 8009742:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	2b2c      	cmp	r3, #44	@ 0x2c
 8009748:	d00b      	beq.n	8009762 <xTimerCreateStatic+0x30>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	61bb      	str	r3, [r7, #24]
}
 800975c:	bf00      	nop
 800975e:	bf00      	nop
 8009760:	e7fd      	b.n	800975e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009762:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <xTimerCreateStatic+0x50>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	617b      	str	r3, [r7, #20]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009784:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00d      	beq.n	80097a8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 f805 	bl	80097b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80097a8:	69fb      	ldr	r3, [r7, #28]
	}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	617b      	str	r3, [r7, #20]
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	e7fd      	b.n	80097da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01e      	beq.n	8009822 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80097e4:	f000 faf2 	bl	8009dcc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fc:	6a3a      	ldr	r2, [r7, #32]
 80097fe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe f9a3 	bl	8007b50 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009816:	f043 0304 	orr.w	r3, r3, #4
 800981a:	b2da      	uxtb	r2, r3
 800981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009822:	bf00      	nop
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	@ 0x28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800983a:	2300      	movs	r3, #0
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10b      	bne.n	800985c <xTimerGenericCommand+0x30>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	623b      	str	r3, [r7, #32]
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800985c:	4b19      	ldr	r3, [pc, #100]	@ (80098c4 <xTimerGenericCommand+0x98>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02a      	beq.n	80098ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2b05      	cmp	r3, #5
 8009874:	dc18      	bgt.n	80098a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009876:	f7ff fe0f 	bl	8009498 <xTaskGetSchedulerState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b02      	cmp	r3, #2
 800987e:	d109      	bne.n	8009894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009880:	4b10      	ldr	r3, [pc, #64]	@ (80098c4 <xTimerGenericCommand+0x98>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	f107 0110 	add.w	r1, r7, #16
 8009888:	2300      	movs	r3, #0
 800988a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988c:	f7fe fb3a 	bl	8007f04 <xQueueGenericSend>
 8009890:	6278      	str	r0, [r7, #36]	@ 0x24
 8009892:	e012      	b.n	80098ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009894:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <xTimerGenericCommand+0x98>)
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	f107 0110 	add.w	r1, r7, #16
 800989c:	2300      	movs	r3, #0
 800989e:	2200      	movs	r2, #0
 80098a0:	f7fe fb30 	bl	8007f04 <xQueueGenericSend>
 80098a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80098a6:	e008      	b.n	80098ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098a8:	4b06      	ldr	r3, [pc, #24]	@ (80098c4 <xTimerGenericCommand+0x98>)
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	f107 0110 	add.w	r1, r7, #16
 80098b0:	2300      	movs	r3, #0
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	f7fe fc28 	bl	8008108 <xQueueGenericSendFromISR>
 80098b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3728      	adds	r7, #40	@ 0x28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	240014d4 	.word	0x240014d4

080098c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d2:	4b23      	ldr	r3, [pc, #140]	@ (8009960 <prvProcessExpiredTimer+0x98>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	3304      	adds	r3, #4
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe f99f 	bl	8007c24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d023      	beq.n	800993c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	18d1      	adds	r1, r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	6978      	ldr	r0, [r7, #20]
 8009902:	f000 f8d5 	bl	8009ab0 <prvInsertTimerInActiveList>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d020      	beq.n	800994e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800990c:	2300      	movs	r3, #0
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	2300      	movs	r3, #0
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	2100      	movs	r1, #0
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7ff ff88 	bl	800982c <xTimerGenericCommand>
 800991c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d114      	bne.n	800994e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009942:	f023 0301 	bic.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	6978      	ldr	r0, [r7, #20]
 8009954:	4798      	blx	r3
}
 8009956:	bf00      	nop
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	240014cc 	.word	0x240014cc

08009964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f859 	bl	8009a28 <prvGetNextExpireTime>
 8009976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4619      	mov	r1, r3
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f805 	bl	800998c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009982:	f000 f8d7 	bl	8009b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009986:	bf00      	nop
 8009988:	e7f0      	b.n	800996c <prvTimerTask+0x8>
	...

0800998c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009996:	f7ff f98b 	bl	8008cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f866 	bl	8009a70 <prvSampleTimeNow>
 80099a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d130      	bne.n	8009a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <prvProcessTimerOrBlockTask+0x3c>
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d806      	bhi.n	80099c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099ba:	f7ff f987 	bl	8008ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff81 	bl	80098c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099c6:	e024      	b.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099ce:	4b13      	ldr	r3, [pc, #76]	@ (8009a1c <prvProcessTimerOrBlockTask+0x90>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <prvProcessTimerOrBlockTask+0x50>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <prvProcessTimerOrBlockTask+0x52>
 80099dc:	2300      	movs	r3, #0
 80099de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a20 <prvProcessTimerOrBlockTask+0x94>)
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	f7fe fec7 	bl	8008780 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099f2:	f7ff f96b 	bl	8008ccc <xTaskResumeAll>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099fc:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <prvProcessTimerOrBlockTask+0x98>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
}
 8009a0c:	e001      	b.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a0e:	f7ff f95d 	bl	8008ccc <xTaskResumeAll>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	240014d0 	.word	0x240014d0
 8009a20:	240014d4 	.word	0x240014d4
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a30:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <prvGetNextExpireTime+0x44>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <prvGetNextExpireTime+0x16>
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	e000      	b.n	8009a40 <prvGetNextExpireTime+0x18>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d105      	bne.n	8009a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <prvGetNextExpireTime+0x44>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e001      	b.n	8009a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	240014cc 	.word	0x240014cc

08009a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a78:	f7ff f9c6 	bl	8008e08 <xTaskGetTickCount>
 8009a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009aac <prvSampleTimeNow+0x3c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d205      	bcs.n	8009a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a88:	f000 f93a 	bl	8009d00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e002      	b.n	8009a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a9a:	4a04      	ldr	r2, [pc, #16]	@ (8009aac <prvSampleTimeNow+0x3c>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	240014dc 	.word	0x240014dc

08009ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d812      	bhi.n	8009afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d302      	bcc.n	8009aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	e01b      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009aea:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <prvInsertTimerInActiveList+0x7c>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3304      	adds	r3, #4
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fe f85c 	bl	8007bb2 <vListInsert>
 8009afa:	e012      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d206      	bcs.n	8009b12 <prvInsertTimerInActiveList+0x62>
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d302      	bcc.n	8009b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e007      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b12:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <prvInsertTimerInActiveList+0x80>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7fe f848 	bl	8007bb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b22:	697b      	ldr	r3, [r7, #20]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	240014d0 	.word	0x240014d0
 8009b30:	240014cc 	.word	0x240014cc

08009b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08e      	sub	sp, #56	@ 0x38
 8009b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b3a:	e0ce      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da19      	bge.n	8009b76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b42:	1d3b      	adds	r3, r7, #4
 8009b44:	3304      	adds	r3, #4
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	61fb      	str	r3, [r7, #28]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b6c:	6850      	ldr	r0, [r2, #4]
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	6892      	ldr	r2, [r2, #8]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f2c0 80ae 	blt.w	8009cda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d004      	beq.n	8009b94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe f848 	bl	8007c24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b94:	463b      	mov	r3, r7
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff ff6a 	bl	8009a70 <prvSampleTimeNow>
 8009b9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b09      	cmp	r3, #9
 8009ba2:	f200 8097 	bhi.w	8009cd4 <prvProcessReceivedCommands+0x1a0>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <prvProcessReceivedCommands+0x78>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bd5 	.word	0x08009bd5
 8009bb8:	08009c4b 	.word	0x08009c4b
 8009bbc:	08009c5f 	.word	0x08009c5f
 8009bc0:	08009cab 	.word	0x08009cab
 8009bc4:	08009bd5 	.word	0x08009bd5
 8009bc8:	08009bd5 	.word	0x08009bd5
 8009bcc:	08009c4b 	.word	0x08009c4b
 8009bd0:	08009c5f 	.word	0x08009c5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bda:	f043 0301 	orr.w	r3, r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	18d1      	adds	r1, r2, r3
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf4:	f7ff ff5c 	bl	8009ab0 <prvInsertTimerInActiveList>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d06c      	beq.n	8009cd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d061      	beq.n	8009cd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	441a      	add	r2, r3
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	2300      	movs	r3, #0
 8009c22:	2100      	movs	r1, #0
 8009c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c26:	f7ff fe01 	bl	800982c <xTimerGenericCommand>
 8009c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d152      	bne.n	8009cd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61bb      	str	r3, [r7, #24]
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	e7fd      	b.n	8009c46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c5c:	e03d      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	617b      	str	r3, [r7, #20]
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	e7fd      	b.n	8009c92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9c:	18d1      	adds	r1, r2, r3
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca4:	f7ff ff04 	bl	8009ab0 <prvInsertTimerInActiveList>
					break;
 8009ca8:	e017      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d103      	bne.n	8009cc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cba:	f000 fc0d 	bl	800a4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cbe:	e00c      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cd2:	e002      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <prvProcessReceivedCommands+0x1a6>
					break;
 8009cd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cda:	4b08      	ldr	r3, [pc, #32]	@ (8009cfc <prvProcessReceivedCommands+0x1c8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	1d39      	adds	r1, r7, #4
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe faae 	bl	8008244 <xQueueReceive>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f47f af26 	bne.w	8009b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	3730      	adds	r7, #48	@ 0x30
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	240014d4 	.word	0x240014d4

08009d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d06:	e049      	b.n	8009d9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d08:	4b2e      	ldr	r3, [pc, #184]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d12:	4b2c      	ldr	r3, [pc, #176]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fd ff7f 	bl	8007c24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02f      	beq.n	8009d9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4413      	add	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d90e      	bls.n	8009d6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fd ff24 	bl	8007bb2 <vListInsert>
 8009d6a:	e017      	b.n	8009d9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	2300      	movs	r3, #0
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	2100      	movs	r1, #0
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff fd58 	bl	800982c <xTimerGenericCommand>
 8009d7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	603b      	str	r3, [r7, #0]
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	e7fd      	b.n	8009d98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d9c:	4b09      	ldr	r3, [pc, #36]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1b0      	bne.n	8009d08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009da6:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dac:	4b06      	ldr	r3, [pc, #24]	@ (8009dc8 <prvSwitchTimerLists+0xc8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a04      	ldr	r2, [pc, #16]	@ (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009db2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009db4:	4a04      	ldr	r2, [pc, #16]	@ (8009dc8 <prvSwitchTimerLists+0xc8>)
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	6013      	str	r3, [r2, #0]
}
 8009dba:	bf00      	nop
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	240014cc 	.word	0x240014cc
 8009dc8:	240014d0 	.word	0x240014d0

08009dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dd2:	f000 f991 	bl	800a0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dd6:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d120      	bne.n	8009e20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dde:	4814      	ldr	r0, [pc, #80]	@ (8009e30 <prvCheckForValidListAndQueue+0x64>)
 8009de0:	f7fd fe96 	bl	8007b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009de4:	4813      	ldr	r0, [pc, #76]	@ (8009e34 <prvCheckForValidListAndQueue+0x68>)
 8009de6:	f7fd fe93 	bl	8007b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dea:	4b13      	ldr	r3, [pc, #76]	@ (8009e38 <prvCheckForValidListAndQueue+0x6c>)
 8009dec:	4a10      	ldr	r2, [pc, #64]	@ (8009e30 <prvCheckForValidListAndQueue+0x64>)
 8009dee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009df0:	4b12      	ldr	r3, [pc, #72]	@ (8009e3c <prvCheckForValidListAndQueue+0x70>)
 8009df2:	4a10      	ldr	r2, [pc, #64]	@ (8009e34 <prvCheckForValidListAndQueue+0x68>)
 8009df4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009df6:	2300      	movs	r3, #0
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	4b11      	ldr	r3, [pc, #68]	@ (8009e40 <prvCheckForValidListAndQueue+0x74>)
 8009dfc:	4a11      	ldr	r2, [pc, #68]	@ (8009e44 <prvCheckForValidListAndQueue+0x78>)
 8009dfe:	2110      	movs	r1, #16
 8009e00:	200a      	movs	r0, #10
 8009e02:	f7fd ffa3 	bl	8007d4c <xQueueGenericCreateStatic>
 8009e06:	4603      	mov	r3, r0
 8009e08:	4a08      	ldr	r2, [pc, #32]	@ (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e14:	4b05      	ldr	r3, [pc, #20]	@ (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	490b      	ldr	r1, [pc, #44]	@ (8009e48 <prvCheckForValidListAndQueue+0x7c>)
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fc86 	bl	800872c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e20:	f000 f99c 	bl	800a15c <vPortExitCritical>
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	240014d4 	.word	0x240014d4
 8009e30:	240014a4 	.word	0x240014a4
 8009e34:	240014b8 	.word	0x240014b8
 8009e38:	240014cc 	.word	0x240014cc
 8009e3c:	240014d0 	.word	0x240014d0
 8009e40:	24001580 	.word	0x24001580
 8009e44:	240014e0 	.word	0x240014e0
 8009e48:	0800b1ac 	.word	0x0800b1ac

08009e4c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60fb      	str	r3, [r7, #12]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009e76:	f000 f93f 	bl	800a0f8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009e80:	f000 f96c 	bl	800a15c <vPortExitCritical>

	return pvReturn;
 8009e84:	693b      	ldr	r3, [r7, #16]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f023 0201 	bic.w	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef4 <pxPortInitialiseStack+0x64>)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3b14      	subs	r3, #20
 8009eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f06f 0202 	mvn.w	r2, #2
 8009ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3b20      	subs	r3, #32
 8009ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	08009ef9 	.word	0x08009ef9

08009ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f02:	4b13      	ldr	r3, [pc, #76]	@ (8009f50 <prvTaskExitError+0x58>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f0a:	d00b      	beq.n	8009f24 <prvTaskExitError+0x2c>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	60fb      	str	r3, [r7, #12]
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	e7fd      	b.n	8009f20 <prvTaskExitError+0x28>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	60bb      	str	r3, [r7, #8]
}
 8009f36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f38:	bf00      	nop
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0fc      	beq.n	8009f3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	24000010 	.word	0x24000010
	...

08009f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <pxCurrentTCBConst2>)
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f380 8809 	msr	PSP, r0
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	4770      	bx	lr
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst2>:
 8009f80:	24000fa4 	.word	0x24000fa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f88:	4808      	ldr	r0, [pc, #32]	@ (8009fac <prvPortStartFirstTask+0x24>)
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f380 8808 	msr	MSP, r0
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8814 	msr	CONTROL, r0
 8009f9a:	b662      	cpsie	i
 8009f9c:	b661      	cpsie	f
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	df00      	svc	0
 8009fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009faa:	bf00      	nop
 8009fac:	e000ed08 	.word	0xe000ed08

08009fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fb6:	4b47      	ldr	r3, [pc, #284]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a47      	ldr	r2, [pc, #284]	@ (800a0d8 <xPortStartScheduler+0x128>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10b      	bne.n	8009fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	613b      	str	r3, [r7, #16]
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	e7fd      	b.n	8009fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fd8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a3f      	ldr	r2, [pc, #252]	@ (800a0dc <xPortStartScheduler+0x12c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d10b      	bne.n	8009ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	60fb      	str	r3, [r7, #12]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ffa:	4b39      	ldr	r3, [pc, #228]	@ (800a0e0 <xPortStartScheduler+0x130>)
 8009ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	22ff      	movs	r2, #255	@ 0xff
 800a00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4b31      	ldr	r3, [pc, #196]	@ (800a0e4 <xPortStartScheduler+0x134>)
 800a020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a022:	4b31      	ldr	r3, [pc, #196]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a024:	2207      	movs	r2, #7
 800a026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a028:	e009      	b.n	800a03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a02a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3b01      	subs	r3, #1
 800a030:	4a2d      	ldr	r2, [pc, #180]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a046:	2b80      	cmp	r3, #128	@ 0x80
 800a048:	d0ef      	beq.n	800a02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a04a:	4b27      	ldr	r3, [pc, #156]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1c3 0307 	rsb	r3, r3, #7
 800a052:	2b04      	cmp	r3, #4
 800a054:	d00b      	beq.n	800a06e <xPortStartScheduler+0xbe>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60bb      	str	r3, [r7, #8]
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	e7fd      	b.n	800a06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a078:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a080:	4a19      	ldr	r2, [pc, #100]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a08c:	4b17      	ldr	r3, [pc, #92]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a16      	ldr	r2, [pc, #88]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a098:	4b14      	ldr	r3, [pc, #80]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a13      	ldr	r2, [pc, #76]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0a4:	f000 f8da 	bl	800a25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0a8:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <xPortStartScheduler+0x140>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ae:	f000 f8f9 	bl	800a2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0be:	f7ff ff63 	bl	8009f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0c2:	f7fe ff6b 	bl	8008f9c <vTaskSwitchContext>
	prvTaskExitError();
 800a0c6:	f7ff ff17 	bl	8009ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed00 	.word	0xe000ed00
 800a0d8:	410fc271 	.word	0x410fc271
 800a0dc:	410fc270 	.word	0x410fc270
 800a0e0:	e000e400 	.word	0xe000e400
 800a0e4:	240015d0 	.word	0x240015d0
 800a0e8:	240015d4 	.word	0x240015d4
 800a0ec:	e000ed20 	.word	0xe000ed20
 800a0f0:	24000010 	.word	0x24000010
 800a0f4:	e000ef34 	.word	0xe000ef34

0800a0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	607b      	str	r3, [r7, #4]
}
 800a110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	4a0e      	ldr	r2, [pc, #56]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a124:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <vPortEnterCritical+0x60>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <vPortEnterCritical+0x4e>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <vPortEnterCritical+0x4a>
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	24000010 	.word	0x24000010
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <vPortExitCritical+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <vPortExitCritical+0x26>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	607b      	str	r3, [r7, #4]
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3b01      	subs	r3, #1
 800a188:	4a08      	ldr	r2, [pc, #32]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a18c:	4b07      	ldr	r3, [pc, #28]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <vPortExitCritical+0x44>
 800a194:	2300      	movs	r3, #0
 800a196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	24000010 	.word	0x24000010

0800a1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1b0:	f3ef 8009 	mrs	r0, PSP
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4b15      	ldr	r3, [pc, #84]	@ (800a210 <pxCurrentTCBConst>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f01e 0f10 	tst.w	lr, #16
 800a1c0:	bf08      	it	eq
 800a1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1d4:	f380 8811 	msr	BASEPRI, r0
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f7fe fedc 	bl	8008f9c <vTaskSwitchContext>
 800a1e4:	f04f 0000 	mov.w	r0, #0
 800a1e8:	f380 8811 	msr	BASEPRI, r0
 800a1ec:	bc09      	pop	{r0, r3}
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	6808      	ldr	r0, [r1, #0]
 800a1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f6:	f01e 0f10 	tst.w	lr, #16
 800a1fa:	bf08      	it	eq
 800a1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a200:	f380 8809 	msr	PSP, r0
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w

0800a210 <pxCurrentTCBConst>:
 800a210:	24000fa4 	.word	0x24000fa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop

0800a218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a232:	f7fe fdf9 	bl	8008e28 <xTaskIncrementTick>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a23c:	4b06      	ldr	r3, [pc, #24]	@ (800a258 <xPortSysTickHandler+0x40>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f383 8811 	msr	BASEPRI, r3
}
 800a24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a260:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <vPortSetupTimerInterrupt+0x38>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <vPortSetupTimerInterrupt+0x3c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a0a      	ldr	r2, [pc, #40]	@ (800a29c <vPortSetupTimerInterrupt+0x40>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	099b      	lsrs	r3, r3, #6
 800a278:	4a09      	ldr	r2, [pc, #36]	@ (800a2a0 <vPortSetupTimerInterrupt+0x44>)
 800a27a:	3b01      	subs	r3, #1
 800a27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a280:	2207      	movs	r2, #7
 800a282:	601a      	str	r2, [r3, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	e000e010 	.word	0xe000e010
 800a294:	e000e018 	.word	0xe000e018
 800a298:	24000000 	.word	0x24000000
 800a29c:	10624dd3 	.word	0x10624dd3
 800a2a0:	e000e014 	.word	0xe000e014

0800a2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2b4 <vPortEnableVFP+0x10>
 800a2a8:	6801      	ldr	r1, [r0, #0]
 800a2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ae:	6001      	str	r1, [r0, #0]
 800a2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2b2:	bf00      	nop
 800a2b4:	e000ed88 	.word	0xe000ed88

0800a2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2be:	f3ef 8305 	mrs	r3, IPSR
 800a2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b0f      	cmp	r3, #15
 800a2c8:	d915      	bls.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ca:	4a18      	ldr	r2, [pc, #96]	@ (800a32c <vPortValidateInterruptPriority+0x74>)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2d4:	4b16      	ldr	r3, [pc, #88]	@ (800a330 <vPortValidateInterruptPriority+0x78>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	7afa      	ldrb	r2, [r7, #11]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d20b      	bcs.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a334 <vPortValidateInterruptPriority+0x7c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <vPortValidateInterruptPriority+0x80>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d90b      	bls.n	800a31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	603b      	str	r3, [r7, #0]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortValidateInterruptPriority+0x62>
	}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	e000e3f0 	.word	0xe000e3f0
 800a330:	240015d0 	.word	0x240015d0
 800a334:	e000ed0c 	.word	0xe000ed0c
 800a338:	240015d4 	.word	0x240015d4

0800a33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	@ 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a348:	f7fe fcb2 	bl	8008cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a34c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a354:	f000 f924 	bl	800a5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a358:	4b5a      	ldr	r3, [pc, #360]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 8095 	bne.w	800a490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01e      	beq.n	800a3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a36c:	2208      	movs	r2, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d015      	beq.n	800a3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f023 0307 	bic.w	r3, r3, #7
 800a384:	3308      	adds	r3, #8
 800a386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <pvPortMalloc+0x6e>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	617b      	str	r3, [r7, #20]
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	e7fd      	b.n	800a3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d06f      	beq.n	800a490 <pvPortMalloc+0x154>
 800a3b0:	4b45      	ldr	r3, [pc, #276]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d86a      	bhi.n	800a490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ba:	4b44      	ldr	r3, [pc, #272]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3be:	4b43      	ldr	r3, [pc, #268]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3c4:	e004      	b.n	800a3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d903      	bls.n	800a3e2 <pvPortMalloc+0xa6>
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f1      	bne.n	800a3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3e2:	4b37      	ldr	r3, [pc, #220]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d051      	beq.n	800a490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	4413      	add	r3, r2
 800a3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	1ad2      	subs	r2, r2, r3
 800a406:	2308      	movs	r3, #8
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d920      	bls.n	800a450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <pvPortMalloc+0xfc>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	613b      	str	r3, [r7, #16]
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	1ad2      	subs	r2, r2, r3
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a44a:	69b8      	ldr	r0, [r7, #24]
 800a44c:	f000 f90a 	bl	800a664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a45e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d203      	bcs.n	800a472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a46a:	4b17      	ldr	r3, [pc, #92]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a486:	4b13      	ldr	r3, [pc, #76]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a11      	ldr	r2, [pc, #68]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a490:	f7fe fc1c 	bl	8008ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	60fb      	str	r3, [r7, #12]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3728      	adds	r7, #40	@ 0x28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	240051e0 	.word	0x240051e0
 800a4c4:	240051f4 	.word	0x240051f4
 800a4c8:	240051e4 	.word	0x240051e4
 800a4cc:	240051d8 	.word	0x240051d8
 800a4d0:	240051e8 	.word	0x240051e8
 800a4d4:	240051ec 	.word	0x240051ec

0800a4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04f      	beq.n	800a58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b25      	ldr	r3, [pc, #148]	@ (800a594 <vPortFree+0xbc>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <vPortFree+0x46>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00b      	beq.n	800a53e <vPortFree+0x66>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60bb      	str	r3, [r7, #8]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <vPortFree+0xbc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11a      	bne.n	800a58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	4b0e      	ldr	r3, [pc, #56]	@ (800a594 <vPortFree+0xbc>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	43db      	mvns	r3, r3
 800a55e:	401a      	ands	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a564:	f7fe fba4 	bl	8008cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <vPortFree+0xc0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4413      	add	r3, r2
 800a572:	4a09      	ldr	r2, [pc, #36]	@ (800a598 <vPortFree+0xc0>)
 800a574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a576:	6938      	ldr	r0, [r7, #16]
 800a578:	f000 f874 	bl	800a664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a57c:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <vPortFree+0xc4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	4a06      	ldr	r2, [pc, #24]	@ (800a59c <vPortFree+0xc4>)
 800a584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a586:	f7fe fba1 	bl	8008ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a58a:	bf00      	nop
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	240051f4 	.word	0x240051f4
 800a598:	240051e4 	.word	0x240051e4
 800a59c:	240051f0 	.word	0x240051f0

0800a5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a5aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <prvHeapInit+0xac>)
 800a5ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00c      	beq.n	800a5d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3307      	adds	r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a64c <prvHeapInit+0xac>)
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a650 <prvHeapInit+0xb0>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5de:	4b1c      	ldr	r3, [pc, #112]	@ (800a650 <prvHeapInit+0xb0>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <prvHeapInit+0xb4>)
 800a600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <prvHeapInit+0xb4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a60a:	4b12      	ldr	r3, [pc, #72]	@ (800a654 <prvHeapInit+0xb4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a620:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <prvHeapInit+0xb4>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4a0a      	ldr	r2, [pc, #40]	@ (800a658 <prvHeapInit+0xb8>)
 800a62e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4a09      	ldr	r2, [pc, #36]	@ (800a65c <prvHeapInit+0xbc>)
 800a636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a638:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <prvHeapInit+0xc0>)
 800a63a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a63e:	601a      	str	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	240015d8 	.word	0x240015d8
 800a650:	240051d8 	.word	0x240051d8
 800a654:	240051e0 	.word	0x240051e0
 800a658:	240051e8 	.word	0x240051e8
 800a65c:	240051e4 	.word	0x240051e4
 800a660:	240051f4 	.word	0x240051f4

0800a664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a66c:	4b28      	ldr	r3, [pc, #160]	@ (800a710 <prvInsertBlockIntoFreeList+0xac>)
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e002      	b.n	800a678 <prvInsertBlockIntoFreeList+0x14>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d8f7      	bhi.n	800a672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d108      	bne.n	800a6a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	441a      	add	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d118      	bne.n	800a6ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d00d      	beq.n	800a6e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e008      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e003      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d002      	beq.n	800a702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	240051d8 	.word	0x240051d8
 800a714:	240051e0 	.word	0x240051e0

0800a718 <siprintf>:
 800a718:	b40e      	push	{r1, r2, r3}
 800a71a:	b500      	push	{lr}
 800a71c:	b09c      	sub	sp, #112	@ 0x70
 800a71e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a720:	9002      	str	r0, [sp, #8]
 800a722:	9006      	str	r0, [sp, #24]
 800a724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a728:	4809      	ldr	r0, [pc, #36]	@ (800a750 <siprintf+0x38>)
 800a72a:	9107      	str	r1, [sp, #28]
 800a72c:	9104      	str	r1, [sp, #16]
 800a72e:	4909      	ldr	r1, [pc, #36]	@ (800a754 <siprintf+0x3c>)
 800a730:	f853 2b04 	ldr.w	r2, [r3], #4
 800a734:	9105      	str	r1, [sp, #20]
 800a736:	6800      	ldr	r0, [r0, #0]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	a902      	add	r1, sp, #8
 800a73c:	f000 f9f8 	bl	800ab30 <_svfiprintf_r>
 800a740:	9b02      	ldr	r3, [sp, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	b01c      	add	sp, #112	@ 0x70
 800a748:	f85d eb04 	ldr.w	lr, [sp], #4
 800a74c:	b003      	add	sp, #12
 800a74e:	4770      	bx	lr
 800a750:	24000014 	.word	0x24000014
 800a754:	ffff0208 	.word	0xffff0208

0800a758 <memset>:
 800a758:	4402      	add	r2, r0
 800a75a:	4603      	mov	r3, r0
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d100      	bne.n	800a762 <memset+0xa>
 800a760:	4770      	bx	lr
 800a762:	f803 1b01 	strb.w	r1, [r3], #1
 800a766:	e7f9      	b.n	800a75c <memset+0x4>

0800a768 <_reclaim_reent>:
 800a768:	4b29      	ldr	r3, [pc, #164]	@ (800a810 <_reclaim_reent+0xa8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4283      	cmp	r3, r0
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	4604      	mov	r4, r0
 800a772:	d04b      	beq.n	800a80c <_reclaim_reent+0xa4>
 800a774:	69c3      	ldr	r3, [r0, #28]
 800a776:	b1ab      	cbz	r3, 800a7a4 <_reclaim_reent+0x3c>
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	b16b      	cbz	r3, 800a798 <_reclaim_reent+0x30>
 800a77c:	2500      	movs	r5, #0
 800a77e:	69e3      	ldr	r3, [r4, #28]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	5959      	ldr	r1, [r3, r5]
 800a784:	2900      	cmp	r1, #0
 800a786:	d13b      	bne.n	800a800 <_reclaim_reent+0x98>
 800a788:	3504      	adds	r5, #4
 800a78a:	2d80      	cmp	r5, #128	@ 0x80
 800a78c:	d1f7      	bne.n	800a77e <_reclaim_reent+0x16>
 800a78e:	69e3      	ldr	r3, [r4, #28]
 800a790:	4620      	mov	r0, r4
 800a792:	68d9      	ldr	r1, [r3, #12]
 800a794:	f000 f878 	bl	800a888 <_free_r>
 800a798:	69e3      	ldr	r3, [r4, #28]
 800a79a:	6819      	ldr	r1, [r3, #0]
 800a79c:	b111      	cbz	r1, 800a7a4 <_reclaim_reent+0x3c>
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 f872 	bl	800a888 <_free_r>
 800a7a4:	6961      	ldr	r1, [r4, #20]
 800a7a6:	b111      	cbz	r1, 800a7ae <_reclaim_reent+0x46>
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 f86d 	bl	800a888 <_free_r>
 800a7ae:	69e1      	ldr	r1, [r4, #28]
 800a7b0:	b111      	cbz	r1, 800a7b8 <_reclaim_reent+0x50>
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 f868 	bl	800a888 <_free_r>
 800a7b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a7ba:	b111      	cbz	r1, 800a7c2 <_reclaim_reent+0x5a>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 f863 	bl	800a888 <_free_r>
 800a7c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c4:	b111      	cbz	r1, 800a7cc <_reclaim_reent+0x64>
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 f85e 	bl	800a888 <_free_r>
 800a7cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a7ce:	b111      	cbz	r1, 800a7d6 <_reclaim_reent+0x6e>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 f859 	bl	800a888 <_free_r>
 800a7d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a7d8:	b111      	cbz	r1, 800a7e0 <_reclaim_reent+0x78>
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 f854 	bl	800a888 <_free_r>
 800a7e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a7e2:	b111      	cbz	r1, 800a7ea <_reclaim_reent+0x82>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 f84f 	bl	800a888 <_free_r>
 800a7ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a7ec:	b111      	cbz	r1, 800a7f4 <_reclaim_reent+0x8c>
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 f84a 	bl	800a888 <_free_r>
 800a7f4:	6a23      	ldr	r3, [r4, #32]
 800a7f6:	b14b      	cbz	r3, 800a80c <_reclaim_reent+0xa4>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7fe:	4718      	bx	r3
 800a800:	680e      	ldr	r6, [r1, #0]
 800a802:	4620      	mov	r0, r4
 800a804:	f000 f840 	bl	800a888 <_free_r>
 800a808:	4631      	mov	r1, r6
 800a80a:	e7bb      	b.n	800a784 <_reclaim_reent+0x1c>
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	bf00      	nop
 800a810:	24000014 	.word	0x24000014

0800a814 <__errno>:
 800a814:	4b01      	ldr	r3, [pc, #4]	@ (800a81c <__errno+0x8>)
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	24000014 	.word	0x24000014

0800a820 <__libc_init_array>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	4d0d      	ldr	r5, [pc, #52]	@ (800a858 <__libc_init_array+0x38>)
 800a824:	4c0d      	ldr	r4, [pc, #52]	@ (800a85c <__libc_init_array+0x3c>)
 800a826:	1b64      	subs	r4, r4, r5
 800a828:	10a4      	asrs	r4, r4, #2
 800a82a:	2600      	movs	r6, #0
 800a82c:	42a6      	cmp	r6, r4
 800a82e:	d109      	bne.n	800a844 <__libc_init_array+0x24>
 800a830:	4d0b      	ldr	r5, [pc, #44]	@ (800a860 <__libc_init_array+0x40>)
 800a832:	4c0c      	ldr	r4, [pc, #48]	@ (800a864 <__libc_init_array+0x44>)
 800a834:	f000 fc66 	bl	800b104 <_init>
 800a838:	1b64      	subs	r4, r4, r5
 800a83a:	10a4      	asrs	r4, r4, #2
 800a83c:	2600      	movs	r6, #0
 800a83e:	42a6      	cmp	r6, r4
 800a840:	d105      	bne.n	800a84e <__libc_init_array+0x2e>
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	f855 3b04 	ldr.w	r3, [r5], #4
 800a848:	4798      	blx	r3
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7ee      	b.n	800a82c <__libc_init_array+0xc>
 800a84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a852:	4798      	blx	r3
 800a854:	3601      	adds	r6, #1
 800a856:	e7f2      	b.n	800a83e <__libc_init_array+0x1e>
 800a858:	0800b2bc 	.word	0x0800b2bc
 800a85c:	0800b2bc 	.word	0x0800b2bc
 800a860:	0800b2bc 	.word	0x0800b2bc
 800a864:	0800b2c0 	.word	0x0800b2c0

0800a868 <__retarget_lock_acquire_recursive>:
 800a868:	4770      	bx	lr

0800a86a <__retarget_lock_release_recursive>:
 800a86a:	4770      	bx	lr

0800a86c <memcpy>:
 800a86c:	440a      	add	r2, r1
 800a86e:	4291      	cmp	r1, r2
 800a870:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a874:	d100      	bne.n	800a878 <memcpy+0xc>
 800a876:	4770      	bx	lr
 800a878:	b510      	push	{r4, lr}
 800a87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a882:	4291      	cmp	r1, r2
 800a884:	d1f9      	bne.n	800a87a <memcpy+0xe>
 800a886:	bd10      	pop	{r4, pc}

0800a888 <_free_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4605      	mov	r5, r0
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d041      	beq.n	800a914 <_free_r+0x8c>
 800a890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a894:	1f0c      	subs	r4, r1, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	18e4      	addlt	r4, r4, r3
 800a89c:	f000 f8e0 	bl	800aa60 <__malloc_lock>
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <_free_r+0x90>)
 800a8a2:	6813      	ldr	r3, [r2, #0]
 800a8a4:	b933      	cbnz	r3, 800a8b4 <_free_r+0x2c>
 800a8a6:	6063      	str	r3, [r4, #4]
 800a8a8:	6014      	str	r4, [r2, #0]
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b0:	f000 b8dc 	b.w	800aa6c <__malloc_unlock>
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	d908      	bls.n	800a8ca <_free_r+0x42>
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	1821      	adds	r1, r4, r0
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf01      	itttt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	1809      	addeq	r1, r1, r0
 800a8c6:	6021      	streq	r1, [r4, #0]
 800a8c8:	e7ed      	b.n	800a8a6 <_free_r+0x1e>
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	b10b      	cbz	r3, 800a8d4 <_free_r+0x4c>
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	d9fa      	bls.n	800a8ca <_free_r+0x42>
 800a8d4:	6811      	ldr	r1, [r2, #0]
 800a8d6:	1850      	adds	r0, r2, r1
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d10b      	bne.n	800a8f4 <_free_r+0x6c>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	4401      	add	r1, r0
 800a8e0:	1850      	adds	r0, r2, r1
 800a8e2:	4283      	cmp	r3, r0
 800a8e4:	6011      	str	r1, [r2, #0]
 800a8e6:	d1e0      	bne.n	800a8aa <_free_r+0x22>
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	6053      	str	r3, [r2, #4]
 800a8ee:	4408      	add	r0, r1
 800a8f0:	6010      	str	r0, [r2, #0]
 800a8f2:	e7da      	b.n	800a8aa <_free_r+0x22>
 800a8f4:	d902      	bls.n	800a8fc <_free_r+0x74>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	e7d6      	b.n	800a8aa <_free_r+0x22>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	1821      	adds	r1, r4, r0
 800a900:	428b      	cmp	r3, r1
 800a902:	bf04      	itt	eq
 800a904:	6819      	ldreq	r1, [r3, #0]
 800a906:	685b      	ldreq	r3, [r3, #4]
 800a908:	6063      	str	r3, [r4, #4]
 800a90a:	bf04      	itt	eq
 800a90c:	1809      	addeq	r1, r1, r0
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	6054      	str	r4, [r2, #4]
 800a912:	e7ca      	b.n	800a8aa <_free_r+0x22>
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	2400533c 	.word	0x2400533c

0800a91c <sbrk_aligned>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	4e0f      	ldr	r6, [pc, #60]	@ (800a95c <sbrk_aligned+0x40>)
 800a920:	460c      	mov	r4, r1
 800a922:	6831      	ldr	r1, [r6, #0]
 800a924:	4605      	mov	r5, r0
 800a926:	b911      	cbnz	r1, 800a92e <sbrk_aligned+0x12>
 800a928:	f000 fba6 	bl	800b078 <_sbrk_r>
 800a92c:	6030      	str	r0, [r6, #0]
 800a92e:	4621      	mov	r1, r4
 800a930:	4628      	mov	r0, r5
 800a932:	f000 fba1 	bl	800b078 <_sbrk_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d103      	bne.n	800a942 <sbrk_aligned+0x26>
 800a93a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a93e:	4620      	mov	r0, r4
 800a940:	bd70      	pop	{r4, r5, r6, pc}
 800a942:	1cc4      	adds	r4, r0, #3
 800a944:	f024 0403 	bic.w	r4, r4, #3
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d0f8      	beq.n	800a93e <sbrk_aligned+0x22>
 800a94c:	1a21      	subs	r1, r4, r0
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fb92 	bl	800b078 <_sbrk_r>
 800a954:	3001      	adds	r0, #1
 800a956:	d1f2      	bne.n	800a93e <sbrk_aligned+0x22>
 800a958:	e7ef      	b.n	800a93a <sbrk_aligned+0x1e>
 800a95a:	bf00      	nop
 800a95c:	24005338 	.word	0x24005338

0800a960 <_malloc_r>:
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a964:	1ccd      	adds	r5, r1, #3
 800a966:	f025 0503 	bic.w	r5, r5, #3
 800a96a:	3508      	adds	r5, #8
 800a96c:	2d0c      	cmp	r5, #12
 800a96e:	bf38      	it	cc
 800a970:	250c      	movcc	r5, #12
 800a972:	2d00      	cmp	r5, #0
 800a974:	4606      	mov	r6, r0
 800a976:	db01      	blt.n	800a97c <_malloc_r+0x1c>
 800a978:	42a9      	cmp	r1, r5
 800a97a:	d904      	bls.n	800a986 <_malloc_r+0x26>
 800a97c:	230c      	movs	r3, #12
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	2000      	movs	r0, #0
 800a982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa5c <_malloc_r+0xfc>
 800a98a:	f000 f869 	bl	800aa60 <__malloc_lock>
 800a98e:	f8d8 3000 	ldr.w	r3, [r8]
 800a992:	461c      	mov	r4, r3
 800a994:	bb44      	cbnz	r4, 800a9e8 <_malloc_r+0x88>
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff ffbf 	bl	800a91c <sbrk_aligned>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	d158      	bne.n	800aa56 <_malloc_r+0xf6>
 800a9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9a8:	4627      	mov	r7, r4
 800a9aa:	2f00      	cmp	r7, #0
 800a9ac:	d143      	bne.n	800aa36 <_malloc_r+0xd6>
 800a9ae:	2c00      	cmp	r4, #0
 800a9b0:	d04b      	beq.n	800aa4a <_malloc_r+0xea>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	eb04 0903 	add.w	r9, r4, r3
 800a9bc:	f000 fb5c 	bl	800b078 <_sbrk_r>
 800a9c0:	4581      	cmp	r9, r0
 800a9c2:	d142      	bne.n	800aa4a <_malloc_r+0xea>
 800a9c4:	6821      	ldr	r1, [r4, #0]
 800a9c6:	1a6d      	subs	r5, r5, r1
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff ffa6 	bl	800a91c <sbrk_aligned>
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d03a      	beq.n	800aa4a <_malloc_r+0xea>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	442b      	add	r3, r5
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	f8d8 3000 	ldr.w	r3, [r8]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	bb62      	cbnz	r2, 800aa3c <_malloc_r+0xdc>
 800a9e2:	f8c8 7000 	str.w	r7, [r8]
 800a9e6:	e00f      	b.n	800aa08 <_malloc_r+0xa8>
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	1b52      	subs	r2, r2, r5
 800a9ec:	d420      	bmi.n	800aa30 <_malloc_r+0xd0>
 800a9ee:	2a0b      	cmp	r2, #11
 800a9f0:	d917      	bls.n	800aa22 <_malloc_r+0xc2>
 800a9f2:	1961      	adds	r1, r4, r5
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	6025      	str	r5, [r4, #0]
 800a9f8:	bf18      	it	ne
 800a9fa:	6059      	strne	r1, [r3, #4]
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	bf08      	it	eq
 800aa00:	f8c8 1000 	streq.w	r1, [r8]
 800aa04:	5162      	str	r2, [r4, r5]
 800aa06:	604b      	str	r3, [r1, #4]
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 f82f 	bl	800aa6c <__malloc_unlock>
 800aa0e:	f104 000b 	add.w	r0, r4, #11
 800aa12:	1d23      	adds	r3, r4, #4
 800aa14:	f020 0007 	bic.w	r0, r0, #7
 800aa18:	1ac2      	subs	r2, r0, r3
 800aa1a:	bf1c      	itt	ne
 800aa1c:	1a1b      	subne	r3, r3, r0
 800aa1e:	50a3      	strne	r3, [r4, r2]
 800aa20:	e7af      	b.n	800a982 <_malloc_r+0x22>
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	bf0c      	ite	eq
 800aa28:	f8c8 2000 	streq.w	r2, [r8]
 800aa2c:	605a      	strne	r2, [r3, #4]
 800aa2e:	e7eb      	b.n	800aa08 <_malloc_r+0xa8>
 800aa30:	4623      	mov	r3, r4
 800aa32:	6864      	ldr	r4, [r4, #4]
 800aa34:	e7ae      	b.n	800a994 <_malloc_r+0x34>
 800aa36:	463c      	mov	r4, r7
 800aa38:	687f      	ldr	r7, [r7, #4]
 800aa3a:	e7b6      	b.n	800a9aa <_malloc_r+0x4a>
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d1fb      	bne.n	800aa3c <_malloc_r+0xdc>
 800aa44:	2300      	movs	r3, #0
 800aa46:	6053      	str	r3, [r2, #4]
 800aa48:	e7de      	b.n	800aa08 <_malloc_r+0xa8>
 800aa4a:	230c      	movs	r3, #12
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 f80c 	bl	800aa6c <__malloc_unlock>
 800aa54:	e794      	b.n	800a980 <_malloc_r+0x20>
 800aa56:	6005      	str	r5, [r0, #0]
 800aa58:	e7d6      	b.n	800aa08 <_malloc_r+0xa8>
 800aa5a:	bf00      	nop
 800aa5c:	2400533c 	.word	0x2400533c

0800aa60 <__malloc_lock>:
 800aa60:	4801      	ldr	r0, [pc, #4]	@ (800aa68 <__malloc_lock+0x8>)
 800aa62:	f7ff bf01 	b.w	800a868 <__retarget_lock_acquire_recursive>
 800aa66:	bf00      	nop
 800aa68:	24005334 	.word	0x24005334

0800aa6c <__malloc_unlock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	@ (800aa74 <__malloc_unlock+0x8>)
 800aa6e:	f7ff befc 	b.w	800a86a <__retarget_lock_release_recursive>
 800aa72:	bf00      	nop
 800aa74:	24005334 	.word	0x24005334

0800aa78 <__ssputs_r>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	688e      	ldr	r6, [r1, #8]
 800aa7e:	461f      	mov	r7, r3
 800aa80:	42be      	cmp	r6, r7
 800aa82:	680b      	ldr	r3, [r1, #0]
 800aa84:	4682      	mov	sl, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	d82d      	bhi.n	800aae8 <__ssputs_r+0x70>
 800aa8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa94:	d026      	beq.n	800aae4 <__ssputs_r+0x6c>
 800aa96:	6965      	ldr	r5, [r4, #20]
 800aa98:	6909      	ldr	r1, [r1, #16]
 800aa9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa9e:	eba3 0901 	sub.w	r9, r3, r1
 800aaa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa6:	1c7b      	adds	r3, r7, #1
 800aaa8:	444b      	add	r3, r9
 800aaaa:	106d      	asrs	r5, r5, #1
 800aaac:	429d      	cmp	r5, r3
 800aaae:	bf38      	it	cc
 800aab0:	461d      	movcc	r5, r3
 800aab2:	0553      	lsls	r3, r2, #21
 800aab4:	d527      	bpl.n	800ab06 <__ssputs_r+0x8e>
 800aab6:	4629      	mov	r1, r5
 800aab8:	f7ff ff52 	bl	800a960 <_malloc_r>
 800aabc:	4606      	mov	r6, r0
 800aabe:	b360      	cbz	r0, 800ab1a <__ssputs_r+0xa2>
 800aac0:	6921      	ldr	r1, [r4, #16]
 800aac2:	464a      	mov	r2, r9
 800aac4:	f7ff fed2 	bl	800a86c <memcpy>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	6126      	str	r6, [r4, #16]
 800aad6:	6165      	str	r5, [r4, #20]
 800aad8:	444e      	add	r6, r9
 800aada:	eba5 0509 	sub.w	r5, r5, r9
 800aade:	6026      	str	r6, [r4, #0]
 800aae0:	60a5      	str	r5, [r4, #8]
 800aae2:	463e      	mov	r6, r7
 800aae4:	42be      	cmp	r6, r7
 800aae6:	d900      	bls.n	800aaea <__ssputs_r+0x72>
 800aae8:	463e      	mov	r6, r7
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	4632      	mov	r2, r6
 800aaee:	4641      	mov	r1, r8
 800aaf0:	f000 faa8 	bl	800b044 <memmove>
 800aaf4:	68a3      	ldr	r3, [r4, #8]
 800aaf6:	1b9b      	subs	r3, r3, r6
 800aaf8:	60a3      	str	r3, [r4, #8]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	4433      	add	r3, r6
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	2000      	movs	r0, #0
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	462a      	mov	r2, r5
 800ab08:	f000 fac6 	bl	800b098 <_realloc_r>
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d1e0      	bne.n	800aad4 <__ssputs_r+0x5c>
 800ab12:	6921      	ldr	r1, [r4, #16]
 800ab14:	4650      	mov	r0, sl
 800ab16:	f7ff feb7 	bl	800a888 <_free_r>
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	f8ca 3000 	str.w	r3, [sl]
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab26:	81a3      	strh	r3, [r4, #12]
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab2c:	e7e9      	b.n	800ab02 <__ssputs_r+0x8a>
	...

0800ab30 <_svfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	4698      	mov	r8, r3
 800ab36:	898b      	ldrh	r3, [r1, #12]
 800ab38:	061b      	lsls	r3, r3, #24
 800ab3a:	b09d      	sub	sp, #116	@ 0x74
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	460d      	mov	r5, r1
 800ab40:	4614      	mov	r4, r2
 800ab42:	d510      	bpl.n	800ab66 <_svfiprintf_r+0x36>
 800ab44:	690b      	ldr	r3, [r1, #16]
 800ab46:	b973      	cbnz	r3, 800ab66 <_svfiprintf_r+0x36>
 800ab48:	2140      	movs	r1, #64	@ 0x40
 800ab4a:	f7ff ff09 	bl	800a960 <_malloc_r>
 800ab4e:	6028      	str	r0, [r5, #0]
 800ab50:	6128      	str	r0, [r5, #16]
 800ab52:	b930      	cbnz	r0, 800ab62 <_svfiprintf_r+0x32>
 800ab54:	230c      	movs	r3, #12
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab5c:	b01d      	add	sp, #116	@ 0x74
 800ab5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab62:	2340      	movs	r3, #64	@ 0x40
 800ab64:	616b      	str	r3, [r5, #20]
 800ab66:	2300      	movs	r3, #0
 800ab68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6a:	2320      	movs	r3, #32
 800ab6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab74:	2330      	movs	r3, #48	@ 0x30
 800ab76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad14 <_svfiprintf_r+0x1e4>
 800ab7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab7e:	f04f 0901 	mov.w	r9, #1
 800ab82:	4623      	mov	r3, r4
 800ab84:	469a      	mov	sl, r3
 800ab86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8a:	b10a      	cbz	r2, 800ab90 <_svfiprintf_r+0x60>
 800ab8c:	2a25      	cmp	r2, #37	@ 0x25
 800ab8e:	d1f9      	bne.n	800ab84 <_svfiprintf_r+0x54>
 800ab90:	ebba 0b04 	subs.w	fp, sl, r4
 800ab94:	d00b      	beq.n	800abae <_svfiprintf_r+0x7e>
 800ab96:	465b      	mov	r3, fp
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	f7ff ff6b 	bl	800aa78 <__ssputs_r>
 800aba2:	3001      	adds	r0, #1
 800aba4:	f000 80a7 	beq.w	800acf6 <_svfiprintf_r+0x1c6>
 800aba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abaa:	445a      	add	r2, fp
 800abac:	9209      	str	r2, [sp, #36]	@ 0x24
 800abae:	f89a 3000 	ldrb.w	r3, [sl]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 809f 	beq.w	800acf6 <_svfiprintf_r+0x1c6>
 800abb8:	2300      	movs	r3, #0
 800abba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc2:	f10a 0a01 	add.w	sl, sl, #1
 800abc6:	9304      	str	r3, [sp, #16]
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abce:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd0:	4654      	mov	r4, sl
 800abd2:	2205      	movs	r2, #5
 800abd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd8:	484e      	ldr	r0, [pc, #312]	@ (800ad14 <_svfiprintf_r+0x1e4>)
 800abda:	f7f5 fb81 	bl	80002e0 <memchr>
 800abde:	9a04      	ldr	r2, [sp, #16]
 800abe0:	b9d8      	cbnz	r0, 800ac1a <_svfiprintf_r+0xea>
 800abe2:	06d0      	lsls	r0, r2, #27
 800abe4:	bf44      	itt	mi
 800abe6:	2320      	movmi	r3, #32
 800abe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abec:	0711      	lsls	r1, r2, #28
 800abee:	bf44      	itt	mi
 800abf0:	232b      	movmi	r3, #43	@ 0x2b
 800abf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf6:	f89a 3000 	ldrb.w	r3, [sl]
 800abfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800abfc:	d015      	beq.n	800ac2a <_svfiprintf_r+0xfa>
 800abfe:	9a07      	ldr	r2, [sp, #28]
 800ac00:	4654      	mov	r4, sl
 800ac02:	2000      	movs	r0, #0
 800ac04:	f04f 0c0a 	mov.w	ip, #10
 800ac08:	4621      	mov	r1, r4
 800ac0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac0e:	3b30      	subs	r3, #48	@ 0x30
 800ac10:	2b09      	cmp	r3, #9
 800ac12:	d94b      	bls.n	800acac <_svfiprintf_r+0x17c>
 800ac14:	b1b0      	cbz	r0, 800ac44 <_svfiprintf_r+0x114>
 800ac16:	9207      	str	r2, [sp, #28]
 800ac18:	e014      	b.n	800ac44 <_svfiprintf_r+0x114>
 800ac1a:	eba0 0308 	sub.w	r3, r0, r8
 800ac1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ac22:	4313      	orrs	r3, r2
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	46a2      	mov	sl, r4
 800ac28:	e7d2      	b.n	800abd0 <_svfiprintf_r+0xa0>
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	1d19      	adds	r1, r3, #4
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	9103      	str	r1, [sp, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bfbb      	ittet	lt
 800ac36:	425b      	neglt	r3, r3
 800ac38:	f042 0202 	orrlt.w	r2, r2, #2
 800ac3c:	9307      	strge	r3, [sp, #28]
 800ac3e:	9307      	strlt	r3, [sp, #28]
 800ac40:	bfb8      	it	lt
 800ac42:	9204      	strlt	r2, [sp, #16]
 800ac44:	7823      	ldrb	r3, [r4, #0]
 800ac46:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac48:	d10a      	bne.n	800ac60 <_svfiprintf_r+0x130>
 800ac4a:	7863      	ldrb	r3, [r4, #1]
 800ac4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac4e:	d132      	bne.n	800acb6 <_svfiprintf_r+0x186>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d1a      	adds	r2, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9203      	str	r2, [sp, #12]
 800ac58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac5c:	3402      	adds	r4, #2
 800ac5e:	9305      	str	r3, [sp, #20]
 800ac60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad24 <_svfiprintf_r+0x1f4>
 800ac64:	7821      	ldrb	r1, [r4, #0]
 800ac66:	2203      	movs	r2, #3
 800ac68:	4650      	mov	r0, sl
 800ac6a:	f7f5 fb39 	bl	80002e0 <memchr>
 800ac6e:	b138      	cbz	r0, 800ac80 <_svfiprintf_r+0x150>
 800ac70:	9b04      	ldr	r3, [sp, #16]
 800ac72:	eba0 000a 	sub.w	r0, r0, sl
 800ac76:	2240      	movs	r2, #64	@ 0x40
 800ac78:	4082      	lsls	r2, r0
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	3401      	adds	r4, #1
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	4824      	ldr	r0, [pc, #144]	@ (800ad18 <_svfiprintf_r+0x1e8>)
 800ac86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac8a:	2206      	movs	r2, #6
 800ac8c:	f7f5 fb28 	bl	80002e0 <memchr>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d036      	beq.n	800ad02 <_svfiprintf_r+0x1d2>
 800ac94:	4b21      	ldr	r3, [pc, #132]	@ (800ad1c <_svfiprintf_r+0x1ec>)
 800ac96:	bb1b      	cbnz	r3, 800ace0 <_svfiprintf_r+0x1b0>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	3307      	adds	r3, #7
 800ac9c:	f023 0307 	bic.w	r3, r3, #7
 800aca0:	3308      	adds	r3, #8
 800aca2:	9303      	str	r3, [sp, #12]
 800aca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca6:	4433      	add	r3, r6
 800aca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acaa:	e76a      	b.n	800ab82 <_svfiprintf_r+0x52>
 800acac:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb0:	460c      	mov	r4, r1
 800acb2:	2001      	movs	r0, #1
 800acb4:	e7a8      	b.n	800ac08 <_svfiprintf_r+0xd8>
 800acb6:	2300      	movs	r3, #0
 800acb8:	3401      	adds	r4, #1
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	4619      	mov	r1, r3
 800acbe:	f04f 0c0a 	mov.w	ip, #10
 800acc2:	4620      	mov	r0, r4
 800acc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc8:	3a30      	subs	r2, #48	@ 0x30
 800acca:	2a09      	cmp	r2, #9
 800accc:	d903      	bls.n	800acd6 <_svfiprintf_r+0x1a6>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c6      	beq.n	800ac60 <_svfiprintf_r+0x130>
 800acd2:	9105      	str	r1, [sp, #20]
 800acd4:	e7c4      	b.n	800ac60 <_svfiprintf_r+0x130>
 800acd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800acda:	4604      	mov	r4, r0
 800acdc:	2301      	movs	r3, #1
 800acde:	e7f0      	b.n	800acc2 <_svfiprintf_r+0x192>
 800ace0:	ab03      	add	r3, sp, #12
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	462a      	mov	r2, r5
 800ace6:	4b0e      	ldr	r3, [pc, #56]	@ (800ad20 <_svfiprintf_r+0x1f0>)
 800ace8:	a904      	add	r1, sp, #16
 800acea:	4638      	mov	r0, r7
 800acec:	f3af 8000 	nop.w
 800acf0:	1c42      	adds	r2, r0, #1
 800acf2:	4606      	mov	r6, r0
 800acf4:	d1d6      	bne.n	800aca4 <_svfiprintf_r+0x174>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	065b      	lsls	r3, r3, #25
 800acfa:	f53f af2d 	bmi.w	800ab58 <_svfiprintf_r+0x28>
 800acfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad00:	e72c      	b.n	800ab5c <_svfiprintf_r+0x2c>
 800ad02:	ab03      	add	r3, sp, #12
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	462a      	mov	r2, r5
 800ad08:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <_svfiprintf_r+0x1f0>)
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f000 f879 	bl	800ae04 <_printf_i>
 800ad12:	e7ed      	b.n	800acf0 <_svfiprintf_r+0x1c0>
 800ad14:	0800b280 	.word	0x0800b280
 800ad18:	0800b28a 	.word	0x0800b28a
 800ad1c:	00000000 	.word	0x00000000
 800ad20:	0800aa79 	.word	0x0800aa79
 800ad24:	0800b286 	.word	0x0800b286

0800ad28 <_printf_common>:
 800ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	4698      	mov	r8, r3
 800ad30:	688a      	ldr	r2, [r1, #8]
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	bfb8      	it	lt
 800ad3c:	4613      	movlt	r3, r2
 800ad3e:	6033      	str	r3, [r6, #0]
 800ad40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad44:	4607      	mov	r7, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	b10a      	cbz	r2, 800ad4e <_printf_common+0x26>
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	6033      	str	r3, [r6, #0]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	0699      	lsls	r1, r3, #26
 800ad52:	bf42      	ittt	mi
 800ad54:	6833      	ldrmi	r3, [r6, #0]
 800ad56:	3302      	addmi	r3, #2
 800ad58:	6033      	strmi	r3, [r6, #0]
 800ad5a:	6825      	ldr	r5, [r4, #0]
 800ad5c:	f015 0506 	ands.w	r5, r5, #6
 800ad60:	d106      	bne.n	800ad70 <_printf_common+0x48>
 800ad62:	f104 0a19 	add.w	sl, r4, #25
 800ad66:	68e3      	ldr	r3, [r4, #12]
 800ad68:	6832      	ldr	r2, [r6, #0]
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	42ab      	cmp	r3, r5
 800ad6e:	dc26      	bgt.n	800adbe <_printf_common+0x96>
 800ad70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	3b00      	subs	r3, #0
 800ad78:	bf18      	it	ne
 800ad7a:	2301      	movne	r3, #1
 800ad7c:	0692      	lsls	r2, r2, #26
 800ad7e:	d42b      	bmi.n	800add8 <_printf_common+0xb0>
 800ad80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad84:	4641      	mov	r1, r8
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c8      	blx	r9
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d01e      	beq.n	800adcc <_printf_common+0xa4>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6922      	ldr	r2, [r4, #16]
 800ad92:	f003 0306 	and.w	r3, r3, #6
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	bf02      	ittt	eq
 800ad9a:	68e5      	ldreq	r5, [r4, #12]
 800ad9c:	6833      	ldreq	r3, [r6, #0]
 800ad9e:	1aed      	subeq	r5, r5, r3
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	bf0c      	ite	eq
 800ada4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada8:	2500      	movne	r5, #0
 800adaa:	4293      	cmp	r3, r2
 800adac:	bfc4      	itt	gt
 800adae:	1a9b      	subgt	r3, r3, r2
 800adb0:	18ed      	addgt	r5, r5, r3
 800adb2:	2600      	movs	r6, #0
 800adb4:	341a      	adds	r4, #26
 800adb6:	42b5      	cmp	r5, r6
 800adb8:	d11a      	bne.n	800adf0 <_printf_common+0xc8>
 800adba:	2000      	movs	r0, #0
 800adbc:	e008      	b.n	800add0 <_printf_common+0xa8>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4652      	mov	r2, sl
 800adc2:	4641      	mov	r1, r8
 800adc4:	4638      	mov	r0, r7
 800adc6:	47c8      	blx	r9
 800adc8:	3001      	adds	r0, #1
 800adca:	d103      	bne.n	800add4 <_printf_common+0xac>
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	3501      	adds	r5, #1
 800add6:	e7c6      	b.n	800ad66 <_printf_common+0x3e>
 800add8:	18e1      	adds	r1, r4, r3
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	2030      	movs	r0, #48	@ 0x30
 800adde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ade2:	4422      	add	r2, r4
 800ade4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ade8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adec:	3302      	adds	r3, #2
 800adee:	e7c7      	b.n	800ad80 <_printf_common+0x58>
 800adf0:	2301      	movs	r3, #1
 800adf2:	4622      	mov	r2, r4
 800adf4:	4641      	mov	r1, r8
 800adf6:	4638      	mov	r0, r7
 800adf8:	47c8      	blx	r9
 800adfa:	3001      	adds	r0, #1
 800adfc:	d0e6      	beq.n	800adcc <_printf_common+0xa4>
 800adfe:	3601      	adds	r6, #1
 800ae00:	e7d9      	b.n	800adb6 <_printf_common+0x8e>
	...

0800ae04 <_printf_i>:
 800ae04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	7e0f      	ldrb	r7, [r1, #24]
 800ae0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae0c:	2f78      	cmp	r7, #120	@ 0x78
 800ae0e:	4691      	mov	r9, r2
 800ae10:	4680      	mov	r8, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	469a      	mov	sl, r3
 800ae16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae1a:	d807      	bhi.n	800ae2c <_printf_i+0x28>
 800ae1c:	2f62      	cmp	r7, #98	@ 0x62
 800ae1e:	d80a      	bhi.n	800ae36 <_printf_i+0x32>
 800ae20:	2f00      	cmp	r7, #0
 800ae22:	f000 80d2 	beq.w	800afca <_printf_i+0x1c6>
 800ae26:	2f58      	cmp	r7, #88	@ 0x58
 800ae28:	f000 80b9 	beq.w	800af9e <_printf_i+0x19a>
 800ae2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae34:	e03a      	b.n	800aeac <_printf_i+0xa8>
 800ae36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae3a:	2b15      	cmp	r3, #21
 800ae3c:	d8f6      	bhi.n	800ae2c <_printf_i+0x28>
 800ae3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae44 <_printf_i+0x40>)
 800ae40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800ae2d 	.word	0x0800ae2d
 800ae50:	0800ae2d 	.word	0x0800ae2d
 800ae54:	0800ae2d 	.word	0x0800ae2d
 800ae58:	0800ae2d 	.word	0x0800ae2d
 800ae5c:	0800aeb1 	.word	0x0800aeb1
 800ae60:	0800ae2d 	.word	0x0800ae2d
 800ae64:	0800ae2d 	.word	0x0800ae2d
 800ae68:	0800ae2d 	.word	0x0800ae2d
 800ae6c:	0800ae2d 	.word	0x0800ae2d
 800ae70:	0800afb1 	.word	0x0800afb1
 800ae74:	0800aedb 	.word	0x0800aedb
 800ae78:	0800af6b 	.word	0x0800af6b
 800ae7c:	0800ae2d 	.word	0x0800ae2d
 800ae80:	0800ae2d 	.word	0x0800ae2d
 800ae84:	0800afd3 	.word	0x0800afd3
 800ae88:	0800ae2d 	.word	0x0800ae2d
 800ae8c:	0800aedb 	.word	0x0800aedb
 800ae90:	0800ae2d 	.word	0x0800ae2d
 800ae94:	0800ae2d 	.word	0x0800ae2d
 800ae98:	0800af73 	.word	0x0800af73
 800ae9c:	6833      	ldr	r3, [r6, #0]
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6032      	str	r2, [r6, #0]
 800aea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aeac:	2301      	movs	r3, #1
 800aeae:	e09d      	b.n	800afec <_printf_i+0x1e8>
 800aeb0:	6833      	ldr	r3, [r6, #0]
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	1d19      	adds	r1, r3, #4
 800aeb6:	6031      	str	r1, [r6, #0]
 800aeb8:	0606      	lsls	r6, r0, #24
 800aeba:	d501      	bpl.n	800aec0 <_printf_i+0xbc>
 800aebc:	681d      	ldr	r5, [r3, #0]
 800aebe:	e003      	b.n	800aec8 <_printf_i+0xc4>
 800aec0:	0645      	lsls	r5, r0, #25
 800aec2:	d5fb      	bpl.n	800aebc <_printf_i+0xb8>
 800aec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	da03      	bge.n	800aed4 <_printf_i+0xd0>
 800aecc:	232d      	movs	r3, #45	@ 0x2d
 800aece:	426d      	negs	r5, r5
 800aed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aed4:	4859      	ldr	r0, [pc, #356]	@ (800b03c <_printf_i+0x238>)
 800aed6:	230a      	movs	r3, #10
 800aed8:	e011      	b.n	800aefe <_printf_i+0xfa>
 800aeda:	6821      	ldr	r1, [r4, #0]
 800aedc:	6833      	ldr	r3, [r6, #0]
 800aede:	0608      	lsls	r0, r1, #24
 800aee0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aee4:	d402      	bmi.n	800aeec <_printf_i+0xe8>
 800aee6:	0649      	lsls	r1, r1, #25
 800aee8:	bf48      	it	mi
 800aeea:	b2ad      	uxthmi	r5, r5
 800aeec:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeee:	4853      	ldr	r0, [pc, #332]	@ (800b03c <_printf_i+0x238>)
 800aef0:	6033      	str	r3, [r6, #0]
 800aef2:	bf14      	ite	ne
 800aef4:	230a      	movne	r3, #10
 800aef6:	2308      	moveq	r3, #8
 800aef8:	2100      	movs	r1, #0
 800aefa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aefe:	6866      	ldr	r6, [r4, #4]
 800af00:	60a6      	str	r6, [r4, #8]
 800af02:	2e00      	cmp	r6, #0
 800af04:	bfa2      	ittt	ge
 800af06:	6821      	ldrge	r1, [r4, #0]
 800af08:	f021 0104 	bicge.w	r1, r1, #4
 800af0c:	6021      	strge	r1, [r4, #0]
 800af0e:	b90d      	cbnz	r5, 800af14 <_printf_i+0x110>
 800af10:	2e00      	cmp	r6, #0
 800af12:	d04b      	beq.n	800afac <_printf_i+0x1a8>
 800af14:	4616      	mov	r6, r2
 800af16:	fbb5 f1f3 	udiv	r1, r5, r3
 800af1a:	fb03 5711 	mls	r7, r3, r1, r5
 800af1e:	5dc7      	ldrb	r7, [r0, r7]
 800af20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af24:	462f      	mov	r7, r5
 800af26:	42bb      	cmp	r3, r7
 800af28:	460d      	mov	r5, r1
 800af2a:	d9f4      	bls.n	800af16 <_printf_i+0x112>
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	d10b      	bne.n	800af48 <_printf_i+0x144>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	07df      	lsls	r7, r3, #31
 800af34:	d508      	bpl.n	800af48 <_printf_i+0x144>
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	6861      	ldr	r1, [r4, #4]
 800af3a:	4299      	cmp	r1, r3
 800af3c:	bfde      	ittt	le
 800af3e:	2330      	movle	r3, #48	@ 0x30
 800af40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800af48:	1b92      	subs	r2, r2, r6
 800af4a:	6122      	str	r2, [r4, #16]
 800af4c:	f8cd a000 	str.w	sl, [sp]
 800af50:	464b      	mov	r3, r9
 800af52:	aa03      	add	r2, sp, #12
 800af54:	4621      	mov	r1, r4
 800af56:	4640      	mov	r0, r8
 800af58:	f7ff fee6 	bl	800ad28 <_printf_common>
 800af5c:	3001      	adds	r0, #1
 800af5e:	d14a      	bne.n	800aff6 <_printf_i+0x1f2>
 800af60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af64:	b004      	add	sp, #16
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	f043 0320 	orr.w	r3, r3, #32
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	4833      	ldr	r0, [pc, #204]	@ (800b040 <_printf_i+0x23c>)
 800af74:	2778      	movs	r7, #120	@ 0x78
 800af76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	6831      	ldr	r1, [r6, #0]
 800af7e:	061f      	lsls	r7, r3, #24
 800af80:	f851 5b04 	ldr.w	r5, [r1], #4
 800af84:	d402      	bmi.n	800af8c <_printf_i+0x188>
 800af86:	065f      	lsls	r7, r3, #25
 800af88:	bf48      	it	mi
 800af8a:	b2ad      	uxthmi	r5, r5
 800af8c:	6031      	str	r1, [r6, #0]
 800af8e:	07d9      	lsls	r1, r3, #31
 800af90:	bf44      	itt	mi
 800af92:	f043 0320 	orrmi.w	r3, r3, #32
 800af96:	6023      	strmi	r3, [r4, #0]
 800af98:	b11d      	cbz	r5, 800afa2 <_printf_i+0x19e>
 800af9a:	2310      	movs	r3, #16
 800af9c:	e7ac      	b.n	800aef8 <_printf_i+0xf4>
 800af9e:	4827      	ldr	r0, [pc, #156]	@ (800b03c <_printf_i+0x238>)
 800afa0:	e7e9      	b.n	800af76 <_printf_i+0x172>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	f023 0320 	bic.w	r3, r3, #32
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	e7f6      	b.n	800af9a <_printf_i+0x196>
 800afac:	4616      	mov	r6, r2
 800afae:	e7bd      	b.n	800af2c <_printf_i+0x128>
 800afb0:	6833      	ldr	r3, [r6, #0]
 800afb2:	6825      	ldr	r5, [r4, #0]
 800afb4:	6961      	ldr	r1, [r4, #20]
 800afb6:	1d18      	adds	r0, r3, #4
 800afb8:	6030      	str	r0, [r6, #0]
 800afba:	062e      	lsls	r6, r5, #24
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	d501      	bpl.n	800afc4 <_printf_i+0x1c0>
 800afc0:	6019      	str	r1, [r3, #0]
 800afc2:	e002      	b.n	800afca <_printf_i+0x1c6>
 800afc4:	0668      	lsls	r0, r5, #25
 800afc6:	d5fb      	bpl.n	800afc0 <_printf_i+0x1bc>
 800afc8:	8019      	strh	r1, [r3, #0]
 800afca:	2300      	movs	r3, #0
 800afcc:	6123      	str	r3, [r4, #16]
 800afce:	4616      	mov	r6, r2
 800afd0:	e7bc      	b.n	800af4c <_printf_i+0x148>
 800afd2:	6833      	ldr	r3, [r6, #0]
 800afd4:	1d1a      	adds	r2, r3, #4
 800afd6:	6032      	str	r2, [r6, #0]
 800afd8:	681e      	ldr	r6, [r3, #0]
 800afda:	6862      	ldr	r2, [r4, #4]
 800afdc:	2100      	movs	r1, #0
 800afde:	4630      	mov	r0, r6
 800afe0:	f7f5 f97e 	bl	80002e0 <memchr>
 800afe4:	b108      	cbz	r0, 800afea <_printf_i+0x1e6>
 800afe6:	1b80      	subs	r0, r0, r6
 800afe8:	6060      	str	r0, [r4, #4]
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	2300      	movs	r3, #0
 800aff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aff4:	e7aa      	b.n	800af4c <_printf_i+0x148>
 800aff6:	6923      	ldr	r3, [r4, #16]
 800aff8:	4632      	mov	r2, r6
 800affa:	4649      	mov	r1, r9
 800affc:	4640      	mov	r0, r8
 800affe:	47d0      	blx	sl
 800b000:	3001      	adds	r0, #1
 800b002:	d0ad      	beq.n	800af60 <_printf_i+0x15c>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	079b      	lsls	r3, r3, #30
 800b008:	d413      	bmi.n	800b032 <_printf_i+0x22e>
 800b00a:	68e0      	ldr	r0, [r4, #12]
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	4298      	cmp	r0, r3
 800b010:	bfb8      	it	lt
 800b012:	4618      	movlt	r0, r3
 800b014:	e7a6      	b.n	800af64 <_printf_i+0x160>
 800b016:	2301      	movs	r3, #1
 800b018:	4632      	mov	r2, r6
 800b01a:	4649      	mov	r1, r9
 800b01c:	4640      	mov	r0, r8
 800b01e:	47d0      	blx	sl
 800b020:	3001      	adds	r0, #1
 800b022:	d09d      	beq.n	800af60 <_printf_i+0x15c>
 800b024:	3501      	adds	r5, #1
 800b026:	68e3      	ldr	r3, [r4, #12]
 800b028:	9903      	ldr	r1, [sp, #12]
 800b02a:	1a5b      	subs	r3, r3, r1
 800b02c:	42ab      	cmp	r3, r5
 800b02e:	dcf2      	bgt.n	800b016 <_printf_i+0x212>
 800b030:	e7eb      	b.n	800b00a <_printf_i+0x206>
 800b032:	2500      	movs	r5, #0
 800b034:	f104 0619 	add.w	r6, r4, #25
 800b038:	e7f5      	b.n	800b026 <_printf_i+0x222>
 800b03a:	bf00      	nop
 800b03c:	0800b291 	.word	0x0800b291
 800b040:	0800b2a2 	.word	0x0800b2a2

0800b044 <memmove>:
 800b044:	4288      	cmp	r0, r1
 800b046:	b510      	push	{r4, lr}
 800b048:	eb01 0402 	add.w	r4, r1, r2
 800b04c:	d902      	bls.n	800b054 <memmove+0x10>
 800b04e:	4284      	cmp	r4, r0
 800b050:	4623      	mov	r3, r4
 800b052:	d807      	bhi.n	800b064 <memmove+0x20>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	42a1      	cmp	r1, r4
 800b058:	d008      	beq.n	800b06c <memmove+0x28>
 800b05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b062:	e7f8      	b.n	800b056 <memmove+0x12>
 800b064:	4402      	add	r2, r0
 800b066:	4601      	mov	r1, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	d100      	bne.n	800b06e <memmove+0x2a>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b076:	e7f7      	b.n	800b068 <memmove+0x24>

0800b078 <_sbrk_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d06      	ldr	r5, [pc, #24]	@ (800b094 <_sbrk_r+0x1c>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	602b      	str	r3, [r5, #0]
 800b084:	f7f6 f8f2 	bl	800126c <_sbrk>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_sbrk_r+0x1a>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_sbrk_r+0x1a>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	24005330 	.word	0x24005330

0800b098 <_realloc_r>:
 800b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09c:	4680      	mov	r8, r0
 800b09e:	4615      	mov	r5, r2
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	b921      	cbnz	r1, 800b0ae <_realloc_r+0x16>
 800b0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	f7ff bc59 	b.w	800a960 <_malloc_r>
 800b0ae:	b92a      	cbnz	r2, 800b0bc <_realloc_r+0x24>
 800b0b0:	f7ff fbea 	bl	800a888 <_free_r>
 800b0b4:	2400      	movs	r4, #0
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	f000 f81a 	bl	800b0f4 <_malloc_usable_size_r>
 800b0c0:	4285      	cmp	r5, r0
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	d802      	bhi.n	800b0cc <_realloc_r+0x34>
 800b0c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0ca:	d8f4      	bhi.n	800b0b6 <_realloc_r+0x1e>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	f7ff fc46 	bl	800a960 <_malloc_r>
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d0ec      	beq.n	800b0b4 <_realloc_r+0x1c>
 800b0da:	42b5      	cmp	r5, r6
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4621      	mov	r1, r4
 800b0e0:	bf28      	it	cs
 800b0e2:	4632      	movcs	r2, r6
 800b0e4:	f7ff fbc2 	bl	800a86c <memcpy>
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fbcc 	bl	800a888 <_free_r>
 800b0f0:	463c      	mov	r4, r7
 800b0f2:	e7e0      	b.n	800b0b6 <_realloc_r+0x1e>

0800b0f4 <_malloc_usable_size_r>:
 800b0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f8:	1f18      	subs	r0, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bfbc      	itt	lt
 800b0fe:	580b      	ldrlt	r3, [r1, r0]
 800b100:	18c0      	addlt	r0, r0, r3
 800b102:	4770      	bx	lr

0800b104 <_init>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr

0800b110 <_fini>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr
