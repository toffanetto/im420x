
micro-ROS_stcubemx_component.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d8  080072d8  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072dc  080072dc  000082dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080072e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  20000010  080072f0  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ec4  080072f0  00009ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019173  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b78  00000000  00000000  000221b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00025d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001187  00000000  00000000  000273f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000372d  00000000  00000000  0002857f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017eb3  00000000  00000000  0002bcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db1ce  00000000  00000000  00043b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ed2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a0  00000000  00000000  0011ed70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00124e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007250 	.word	0x08007250

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007250 	.word	0x08007250

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc12 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f81c 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f924 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f8fa 	bl	8000708 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f8a0 	bl	8000658 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f8c8 	bl	80006ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 f8a4 	bl	8004668 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <main+0x38>)
 8000522:	2100      	movs	r1, #0
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <main+0x3c>)
 8000526:	f004 f909 	bl	800473c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <main+0x40>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f004 f8ce 	bl	80046d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x34>
 8000538:	0800728c 	.word	0x0800728c
 800053c:	080008b5 	.word	0x080008b5
 8000540:	20000534 	.word	0x20000534

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0ac      	sub	sp, #176	@ 0xb0
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800054e:	2234      	movs	r2, #52	@ 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fe42 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	225c      	movs	r2, #92	@ 0x5c
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f006 fe33 	bl	80071dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	4b35      	ldr	r3, [pc, #212]	@ (8000650 <SystemClock_Config+0x10c>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057e:	4a34      	ldr	r2, [pc, #208]	@ (8000650 <SystemClock_Config+0x10c>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000584:	6413      	str	r3, [r2, #64]	@ 0x40
 8000586:	4b32      	ldr	r3, [pc, #200]	@ (8000650 <SystemClock_Config+0x10c>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	4b2f      	ldr	r3, [pc, #188]	@ (8000654 <SystemClock_Config+0x110>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <SystemClock_Config+0x110>)
 800059c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000654 <SystemClock_Config+0x110>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ce:	23a8      	movs	r3, #168	@ 0xa8
 80005d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f98e 	bl	800290c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005f6:	f000 f977 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	66bb      	str	r3, [r7, #104]	@ 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060a:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000612:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fad1 	bl	8001bc0 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000624:	f000 f960 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800062e:	2300      	movs	r3, #0
 8000630:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fc0e 	bl	8001e58 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000642:	f000 f951 	bl	80008e8 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	37b0      	adds	r7, #176	@ 0xb0
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <MX_USART3_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000690:	f002 fdd4 	bl	800323c <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f925 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	40004800 	.word	0x40004800

080006ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ba:	2206      	movs	r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f0:	f001 f91d 	bl	800192e <HAL_PCD_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f8f5 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000012c 	.word	0x2000012c

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_DMA_Init+0x4c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <MX_DMA_Init+0x4c>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <MX_DMA_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2105      	movs	r1, #5
 800072e:	200c      	movs	r0, #12
 8000730:	f000 fc1a 	bl	8000f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000734:	200c      	movs	r0, #12
 8000736:	f000 fc33 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2105      	movs	r1, #5
 800073e:	200e      	movs	r0, #14
 8000740:	f000 fc12 	bl	8000f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000744:	200e      	movs	r0, #14
 8000746:	f000 fc2b 	bl	8000fa0 <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	@ 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a4a      	ldr	r2, [pc, #296]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a43      	ldr	r2, [pc, #268]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <MX_GPIO_Init+0x148>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b3d      	ldr	r3, [pc, #244]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a3c      	ldr	r2, [pc, #240]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a35      	ldr	r2, [pc, #212]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a2e      	ldr	r2, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_GPIO_Init+0x148>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a27      	ldr	r2, [pc, #156]	@ (80008a0 <MX_GPIO_Init+0x148>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_GPIO_Init+0x148>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0181 	movw	r1, #16513	@ 0x4081
 800081c:	4821      	ldr	r0, [pc, #132]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 800081e:	f001 f86d 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	@ 0x40
 8000826:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <MX_GPIO_Init+0x150>)
 8000828:	f001 f868 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_GPIO_Init+0x154>)
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0x158>)
 8000842:	f000 fec7 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000846:	f244 0381 	movw	r3, #16513	@ 0x4081
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000860:	f000 feb8 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000864:	2340      	movs	r3, #64	@ 0x40
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <MX_GPIO_Init+0x150>)
 800087c:	f000 feaa 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_GPIO_Init+0x150>)
 8000894:	f000 fe9e 	bl	80015d4 <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	@ 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	10110000 	.word	0x10110000
 80008b0:	40020800 	.word	0x40020800

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f003 ffe3 	bl	8004888 <osDelay>
 80008c2:	e7fb      	b.n	80008bc <StartDefaultTask+0x8>

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 fa4b 	bl	8000d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010000 	.word	0x40010000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fb15 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a4d      	ldr	r2, [pc, #308]	@ (8000aa0 <HAL_UART_MspInit+0x154>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8094 	bne.w	8000a98 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	4a4a      	ldr	r2, [pc, #296]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 800097a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800097e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000980:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b44      	ldr	r3, [pc, #272]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	4a43      	ldr	r2, [pc, #268]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 8000996:	f043 0308 	orr.w	r3, r3, #8
 800099a:	6313      	str	r3, [r2, #48]	@ 0x30
 800099c:	4b41      	ldr	r3, [pc, #260]	@ (8000aa4 <HAL_UART_MspInit+0x158>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4838      	ldr	r0, [pc, #224]	@ (8000aa8 <HAL_UART_MspInit+0x15c>)
 80009c6:	f000 fe05 	bl	80015d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80009ca:	4b38      	ldr	r3, [pc, #224]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009cc:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <HAL_UART_MspInit+0x164>)
 80009ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80009d0:	4b36      	ldr	r3, [pc, #216]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b34      	ldr	r3, [pc, #208]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009da:	2240      	movs	r2, #64	@ 0x40
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b31      	ldr	r3, [pc, #196]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80009f8:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <HAL_UART_MspInit+0x160>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009fe:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <HAL_UART_MspInit+0x160>)
 8000a00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a04:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <HAL_UART_MspInit+0x160>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000a0c:	4827      	ldr	r0, [pc, #156]	@ (8000aac <HAL_UART_MspInit+0x160>)
 8000a0e:	f000 fad5 	bl	8000fbc <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000a18:	f7ff ff66 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a23      	ldr	r2, [pc, #140]	@ (8000aac <HAL_UART_MspInit+0x160>)
 8000a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a22:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <HAL_UART_MspInit+0x160>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <HAL_UART_MspInit+0x16c>)
 8000a2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a48:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a64:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a6e:	f000 faa5 	bl	8000fbc <HAL_DMA_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8000a78:	f7ff ff36 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <HAL_UART_MspInit+0x168>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	2027      	movs	r0, #39	@ 0x27
 8000a8e:	f000 fa6b 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a92:	2027      	movs	r0, #39	@ 0x27
 8000a94:	f000 fa84 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004800 	.word	0x40004800
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	2000006c 	.word	0x2000006c
 8000ab0:	40026058 	.word	0x40026058
 8000ab4:	200000cc 	.word	0x200000cc
 8000ab8:	40026028 	.word	0x40026028

08000abc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000adc:	d13f      	bne.n	8000b5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000afa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <HAL_PCD_MspInit+0xb0>)
 8000b18:	f000 fd5c 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <HAL_PCD_MspInit+0xb0>)
 8000b32:	f000 fd4f 	bl	80015d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_PCD_MspInit+0xac>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	@ 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2019      	movs	r0, #25
 8000b86:	f000 f9ef 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b8a:	2019      	movs	r0, #25
 8000b8c:	f000 fa08 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_InitTick+0xa4>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <HAL_InitTick+0xa4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_InitTick+0xa4>)
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bac:	f107 0210 	add.w	r2, r7, #16
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f91c 	bl	8001df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bbc:	f001 f906 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc8:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <HAL_InitTick+0xa8>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_InitTick+0xac>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <HAL_InitTick+0xb0>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_InitTick+0xac>)
 8000bdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <HAL_InitTick+0xac>)
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_InitTick+0xac>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_InitTick+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <HAL_InitTick+0xac>)
 8000bf6:	f002 f8e3 	bl	8002dc0 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <HAL_InitTick+0xac>)
 8000c02:	f002 f912 	bl	8002e2a <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	@ 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20000538 	.word	0x20000538
 8000c20:	40010000 	.word	0x40010000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <DMA1_Stream1_IRQHandler+0x10>)
 8000c62:	f000 fa7b 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000cc 	.word	0x200000cc

08000c70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <DMA1_Stream3_IRQHandler+0x10>)
 8000c76:	f000 fa71 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000006c 	.word	0x2000006c

08000c84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c8a:	f002 f8f2 	bl	8002e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000538 	.word	0x20000538

08000c98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART3_IRQHandler+0x10>)
 8000c9e:	f002 fb1b 	bl	80032d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000002c 	.word	0x2000002c

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <SystemInit+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <SystemInit+0x28>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SystemInit+0x28>)
 8000cc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cde:	e003      	b.n	8000ce8 <LoopCopyDataInit>

08000ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ce6:	3104      	adds	r1, #4

08000ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce8:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cf0:	d3f6      	bcc.n	8000ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf4:	e002      	b.n	8000cfc <LoopFillZerobss>

08000cf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf8:	f842 3b04 	str.w	r3, [r2], #4

08000cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d00:	d3f9      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd3 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f006 fa71 	bl	80071ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fbf9 	bl	8000500 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d14:	080072e0 	.word	0x080072e0
  ldr  r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d1c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d20:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d24:	20004ec4 	.word	0x20004ec4

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f8fc 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff08 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fdc8 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000578 	.word	0x20000578

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000578 	.word	0x20000578

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fee6 	bl	8000d98 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e099      	b.n	800110c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff8:	e00f      	b.n	800101a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ffa:	f7ff fecd 	bl	8000d98 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b05      	cmp	r3, #5
 8001006:	d908      	bls.n	800101a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2220      	movs	r2, #32
 800100c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e078      	b.n	800110c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e8      	bne.n	8000ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_DMA_Init+0x158>)
 8001034:	4013      	ands	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	2b04      	cmp	r3, #4
 8001072:	d107      	bne.n	8001084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4313      	orrs	r3, r2
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4313      	orrs	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f023 0307 	bic.w	r3, r3, #7
 800109a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d117      	bne.n	80010de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fa0b 	bl	80014dc <DMA_CheckFifoParam>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2240      	movs	r2, #64	@ 0x40
 80010d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010da:	2301      	movs	r3, #1
 80010dc:	e016      	b.n	800110c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f9c2 	bl	8001470 <DMA_CalcBaseAndBitshift>
 80010ec:	4603      	mov	r3, r0
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f4:	223f      	movs	r2, #63	@ 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f010803f 	.word	0xf010803f

08001118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d004      	beq.n	8001136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00c      	b.n	8001150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2205      	movs	r2, #5
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001168:	4b8e      	ldr	r3, [pc, #568]	@ (80013a4 <HAL_DMA_IRQHandler+0x248>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a8e      	ldr	r2, [pc, #568]	@ (80013a8 <HAL_DMA_IRQHandler+0x24c>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0a9b      	lsrs	r3, r3, #10
 8001174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001186:	2208      	movs	r2, #8
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b4:	2208      	movs	r2, #8
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011cc:	2201      	movs	r2, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ea:	2201      	movs	r2, #1
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001202:	2204      	movs	r2, #4
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d012      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001220:	2204      	movs	r2, #4
 8001222:	409a      	lsls	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	2210      	movs	r2, #16
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d043      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03c      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001256:	2210      	movs	r2, #16
 8001258:	409a      	lsls	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d018      	beq.n	800129e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d024      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
 800128a:	e01f      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01b      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e016      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d0:	2220      	movs	r2, #32
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 808f 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8087 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f2:	2220      	movs	r2, #32
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d136      	bne.n	8001374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0216 	bic.w	r2, r2, #22
 8001314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_DMA_IRQHandler+0x1da>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0208 	bic.w	r2, r2, #8
 8001344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134a:	223f      	movs	r2, #63	@ 0x3f
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d07e      	beq.n	8001468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
        }
        return;
 8001372:	e079      	b.n	8001468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10d      	bne.n	80013ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001394:	2b00      	cmp	r3, #0
 8001396:	d031      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e02c      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
 80013bc:	e01e      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0210 	bic.w	r2, r2, #16
 80013da:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d022      	beq.n	8001456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	d307      	bcc.n	8001444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_DMA_IRQHandler+0x2cc>
 8001442:	e000      	b.n	8001446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001444:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
 8001466:	e000      	b.n	800146a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001468:	bf00      	nop
    }
  }
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	3b10      	subs	r3, #16
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <DMA_CalcBaseAndBitshift+0x68>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d909      	bls.n	80014b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	1d1a      	adds	r2, r3, #4
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80014b0:	e007      	b.n	80014c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	aaaaaaab 	.word	0xaaaaaaab
 80014d8:	080072c8 	.word	0x080072c8

080014dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d11f      	bne.n	8001536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d856      	bhi.n	80015aa <DMA_CheckFifoParam+0xce>
 80014fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <DMA_CheckFifoParam+0x28>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001515 	.word	0x08001515
 8001508:	08001527 	.word	0x08001527
 800150c:	08001515 	.word	0x08001515
 8001510:	080015ab 	.word	0x080015ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d046      	beq.n	80015ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001524:	e043      	b.n	80015ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800152e:	d140      	bne.n	80015b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001534:	e03d      	b.n	80015b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800153e:	d121      	bne.n	8001584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d837      	bhi.n	80015b6 <DMA_CheckFifoParam+0xda>
 8001546:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <DMA_CheckFifoParam+0x70>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	08001563 	.word	0x08001563
 8001554:	0800155d 	.word	0x0800155d
 8001558:	08001575 	.word	0x08001575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      break;
 8001560:	e030      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d025      	beq.n	80015ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001572:	e022      	b.n	80015ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800157c:	d11f      	bne.n	80015be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001582:	e01c      	b.n	80015be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d903      	bls.n	8001592 <DMA_CheckFifoParam+0xb6>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d003      	beq.n	8001598 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001590:	e018      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
      break;
 8001596:	e015      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00e      	beq.n	80015c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      break;
 80015a8:	e00b      	b.n	80015c2 <DMA_CheckFifoParam+0xe6>
      break;
 80015aa:	bf00      	nop
 80015ac:	e00a      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e008      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
 80015b4:	e006      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;
 80015b6:	bf00      	nop
 80015b8:	e004      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
 80015bc:	e002      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <DMA_CheckFifoParam+0xe8>
      break;
 80015c2:	bf00      	nop
    }
  } 
  
  return status; 
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e165      	b.n	80018bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8154 	bne.w	80018b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d00b      	beq.n	800162e <HAL_GPIO_Init+0x5a>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001622:	2b11      	cmp	r3, #17
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d130      	bne.n	8001690 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0xfc>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b12      	cmp	r3, #18
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80ae 	beq.w	80018b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b5d      	ldr	r3, [pc, #372]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	4a5c      	ldr	r2, [pc, #368]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001768:	6453      	str	r3, [r2, #68]	@ 0x44
 800176a:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <HAL_GPIO_Init+0x300>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a58      	ldr	r2, [pc, #352]	@ (80018d8 <HAL_GPIO_Init+0x304>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4f      	ldr	r2, [pc, #316]	@ (80018dc <HAL_GPIO_Init+0x308>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4e      	ldr	r2, [pc, #312]	@ (80018e0 <HAL_GPIO_Init+0x30c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4d      	ldr	r2, [pc, #308]	@ (80018e4 <HAL_GPIO_Init+0x310>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <HAL_GPIO_Init+0x314>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <HAL_GPIO_Init+0x318>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x20a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4a      	ldr	r2, [pc, #296]	@ (80018f0 <HAL_GPIO_Init+0x31c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x206>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a49      	ldr	r2, [pc, #292]	@ (80018f4 <HAL_GPIO_Init+0x320>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x202>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00c      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00a      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017da:	2305      	movs	r3, #5
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017de:	2304      	movs	r3, #4
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x21c>
 80017ee:	2300      	movs	r3, #0
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001800:	4935      	ldr	r1, [pc, #212]	@ (80018d8 <HAL_GPIO_Init+0x304>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180e:	4b3a      	ldr	r3, [pc, #232]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001832:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185c:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001886:	4a1c      	ldr	r2, [pc, #112]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b0:	4a11      	ldr	r2, [pc, #68]	@ (80018f8 <HAL_GPIO_Init+0x324>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b0f      	cmp	r3, #15
 80018c0:	f67f ae96 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40013800 	.word	0x40013800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40021400 	.word	0x40021400
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001918:	e003      	b.n	8001922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	619a      	str	r2, [r3, #24]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001930:	b08f      	sub	sp, #60	@ 0x3c
 8001932:	af0a      	add	r7, sp, #40	@ 0x28
 8001934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e116      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff f8ae 	bl	8000abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fc1b 	bl	80041ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	687e      	ldr	r6, [r7, #4]
 800198c:	466d      	mov	r5, sp
 800198e:	f106 0410 	add.w	r4, r6, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199e:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a2:	1d33      	adds	r3, r6, #4
 80019a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f002 fba6 	bl	80040f8 <USB_CoreInit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0d7      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fc09 	bl	80041dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e04a      	b.n	8001a66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333d      	adds	r3, #61	@ 0x3d
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	333c      	adds	r3, #60	@ 0x3c
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	b298      	uxth	r0, r3
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3342      	adds	r3, #66	@ 0x42
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333f      	adds	r3, #63	@ 0x3f
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3344      	adds	r3, #68	@ 0x44
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3348      	adds	r3, #72	@ 0x48
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	3350      	adds	r3, #80	@ 0x50
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	3301      	adds	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3af      	bcc.n	80019d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e044      	b.n	8001b00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3b5      	bcc.n	8001a76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	466d      	mov	r5, sp
 8001b14:	f106 0410 	add.w	r4, r6, #16
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b28:	1d33      	adds	r3, r6, #4
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f002 fb7f 	bl	8004230 <USB_DevInit>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e014      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f80a 	bl	8001b76 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fd21 	bl	80045ae <USB_DevDisconnect>

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b76 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	f043 0303 	orr.w	r3, r3, #3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f872 	bl	8000d98 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff f86e 	bl	8000d98 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 fbb1 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff02 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	080072b0 	.word	0x080072b0
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0a9b      	lsrs	r3, r3, #10
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	080072c0 	.word	0x080072c0

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd0:	f7ff ffdc 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0b5b      	lsrs	r3, r3, #13
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	080072c0 	.word	0x080072c0

08001df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	220f      	movs	r2, #15
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_RCC_GetClockConfig+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40023c00 	.word	0x40023c00

08001e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	@ 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e90:	4b6f      	ldr	r3, [pc, #444]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e96:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9e:	496c      	ldr	r1, [pc, #432]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ebe:	4b64      	ldr	r3, [pc, #400]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	4960      	ldr	r1, [pc, #384]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001edc:	2301      	movs	r3, #1
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eec:	4b58      	ldr	r3, [pc, #352]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4955      	ldr	r1, [pc, #340]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f28:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f36:	4946      	ldr	r1, [pc, #280]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f46:	d101      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 808a 	beq.w	800207a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a38      	ldr	r2, [pc, #224]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f82:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a33      	ldr	r2, [pc, #204]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ff03 	bl	8000d98 <HAL_GetTick>
 8001f92:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f96:	f7fe feff 	bl	8000d98 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e278      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fbc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d02f      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d028      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fda:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fe8:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d114      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fecd 	bl	8000d98 <HAL_GetTick>
 8001ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe fec9 	bl	8000d98 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e240      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002030:	d114      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002046:	4902      	ldr	r1, [pc, #8]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
 800204c:	e00c      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
 8002058:	42470e40 	.word	0x42470e40
 800205c:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002062:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002066:	6093      	str	r3, [r2, #8]
 8002068:	4b47      	ldr	r3, [pc, #284]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800206a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	4944      	ldr	r1, [pc, #272]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002076:	4313      	orrs	r3, r2
 8002078:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800208c:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800208e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800209c:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020be:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	492e      	ldr	r1, [pc, #184]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	4926      	ldr	r1, [pc, #152]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fe:	d101      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002100:	2301      	movs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002116:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	491a      	ldr	r1, [pc, #104]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d011      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002138:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002140:	4911      	ldr	r1, [pc, #68]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002152:	2301      	movs	r3, #1
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002164:	f040 80ff 	bne.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800216e:	f7fe fe13 	bl	8000d98 <HAL_GetTick>
 8002172:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002176:	f7fe fe0f 	bl	8000d98 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d907      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e188      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002188:	40023800 	.word	0x40023800
 800218c:	424711e0 	.word	0x424711e0
 8002190:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002194:	4b7e      	ldr	r3, [pc, #504]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ea      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d028      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d124      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021c8:	4b71      	ldr	r3, [pc, #452]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	3301      	adds	r3, #1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021da:	4b6d      	ldr	r3, [pc, #436]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e0:	0e1b      	lsrs	r3, r3, #24
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	431a      	orrs	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	3b01      	subs	r3, #1
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	431a      	orrs	r2, r3
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	071b      	lsls	r3, r3, #28
 800220a:	4961      	ldr	r1, [pc, #388]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	d035      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800223c:	d130      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800223e:	4b54      	ldr	r3, [pc, #336]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	3301      	adds	r3, #1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002250:	4b4f      	ldr	r3, [pc, #316]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002256:	0f1b      	lsrs	r3, r3, #28
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	431a      	orrs	r2, r3
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	071b      	lsls	r3, r3, #28
 8002280:	4943      	ldr	r1, [pc, #268]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002288:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800228e:	f023 021f 	bic.w	r2, r3, #31
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	493d      	ldr	r1, [pc, #244]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d029      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b4:	d124      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022b6:	4b36      	ldr	r3, [pc, #216]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022c8:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ce:	0f1b      	lsrs	r3, r3, #28
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	019b      	lsls	r3, r3, #6
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	431a      	orrs	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	071b      	lsls	r3, r3, #28
 80022f8:	4925      	ldr	r1, [pc, #148]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d016      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	019b      	lsls	r3, r3, #6
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	071b      	lsls	r3, r3, #28
 8002332:	4917      	ldr	r1, [pc, #92]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800233a:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe fd2a 	bl	8000d98 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002348:	f7fe fd26 	bl	8000d98 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e09f      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	2b01      	cmp	r3, #1
 800236a:	f040 8095 	bne.w	8002498 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002374:	f7fe fd10 	bl	8000d98 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800237a:	e00f      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800237c:	f7fe fd0c 	bl	8000d98 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d908      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e085      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	42470068 	.word	0x42470068
 8002398:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800239c:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a8:	d0e8      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x566>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02b      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d127      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	3301      	adds	r3, #1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	4928      	ldr	r1, [pc, #160]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800240a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	3b01      	subs	r3, #1
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	4922      	ldr	r1, [pc, #136]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002436:	d118      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	0e1b      	lsrs	r3, r3, #24
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	019b      	lsls	r3, r3, #6
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	4910      	ldr	r1, [pc, #64]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002470:	f7fe fc92 	bl	8000d98 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002478:	f7fe fc8e 	bl	8000d98 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e007      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002496:	d1ef      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3730      	adds	r7, #48	@ 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	42470070 	.word	0x42470070

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b0:	b0ae      	sub	sp, #184	@ 0xb8
 80024b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d2:	4bcb      	ldr	r3, [pc, #812]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	f200 8206 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x440>
 80024e0:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	0800251d 	.word	0x0800251d
 80024ec:	080028ed 	.word	0x080028ed
 80024f0:	080028ed 	.word	0x080028ed
 80024f4:	080028ed 	.word	0x080028ed
 80024f8:	08002525 	.word	0x08002525
 80024fc:	080028ed 	.word	0x080028ed
 8002500:	080028ed 	.word	0x080028ed
 8002504:	080028ed 	.word	0x080028ed
 8002508:	0800252d 	.word	0x0800252d
 800250c:	080028ed 	.word	0x080028ed
 8002510:	080028ed 	.word	0x080028ed
 8002514:	080028ed 	.word	0x080028ed
 8002518:	0800271d 	.word	0x0800271d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4bb9      	ldr	r3, [pc, #740]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x358>)
 800251e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002522:	e1e7      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4bb8      	ldr	r3, [pc, #736]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800252a:	e1e3      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800252c:	4bb4      	ldr	r3, [pc, #720]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002538:	4bb1      	ldr	r3, [pc, #708]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d071      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002544:	4bae      	ldr	r3, [pc, #696]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002550:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800256a:	4622      	mov	r2, r4
 800256c:	462b      	mov	r3, r5
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	0159      	lsls	r1, r3, #5
 8002578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257c:	0150      	lsls	r0, r2, #5
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4621      	mov	r1, r4
 8002584:	1a51      	subs	r1, r2, r1
 8002586:	6439      	str	r1, [r7, #64]	@ 0x40
 8002588:	4629      	mov	r1, r5
 800258a:	eb63 0301 	sbc.w	r3, r3, r1
 800258e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800259c:	4649      	mov	r1, r9
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	4641      	mov	r1, r8
 80025a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a6:	4641      	mov	r1, r8
 80025a8:	018a      	lsls	r2, r1, #6
 80025aa:	4641      	mov	r1, r8
 80025ac:	1a51      	subs	r1, r2, r1
 80025ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025b0:	4649      	mov	r1, r9
 80025b2:	eb63 0301 	sbc.w	r3, r3, r1
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025c4:	4649      	mov	r1, r9
 80025c6:	00cb      	lsls	r3, r1, #3
 80025c8:	4641      	mov	r1, r8
 80025ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ce:	4641      	mov	r1, r8
 80025d0:	00ca      	lsls	r2, r1, #3
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	4622      	mov	r2, r4
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025de:	462b      	mov	r3, r5
 80025e0:	460a      	mov	r2, r1
 80025e2:	eb42 0303 	adc.w	r3, r2, r3
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025f4:	4629      	mov	r1, r5
 80025f6:	024b      	lsls	r3, r1, #9
 80025f8:	4621      	mov	r1, r4
 80025fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fe:	4621      	mov	r1, r4
 8002600:	024a      	lsls	r2, r1, #9
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002610:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002614:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002618:	f7fd fdfa 	bl	8000210 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4613      	mov	r3, r2
 8002622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002626:	e067      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4b75      	ldr	r3, [pc, #468]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002634:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002642:	2300      	movs	r3, #0
 8002644:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002646:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4621      	mov	r1, r4
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002668:	4629      	mov	r1, r5
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800267c:	4649      	mov	r1, r9
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4641      	mov	r1, r8
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4641      	mov	r1, r8
 800268c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002690:	4649      	mov	r1, r9
 8002692:	eb63 0b01 	sbc.w	fp, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026aa:	4692      	mov	sl, r2
 80026ac:	469b      	mov	fp, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb1a 0303 	adds.w	r3, sl, r3
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	462b      	mov	r3, r5
 80026b8:	eb4b 0303 	adc.w	r3, fp, r3
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026ca:	4629      	mov	r1, r5
 80026cc:	028b      	lsls	r3, r1, #10
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d4:	4621      	mov	r1, r4
 80026d6:	028a      	lsls	r2, r1, #10
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e0:	2200      	movs	r2, #0
 80026e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80026e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80026e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026ea:	f7fd fd91 	bl	8000210 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4613      	mov	r3, r2
 80026f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f8:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	3301      	adds	r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800270a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800270e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800271a:	e0eb      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b38      	ldr	r3, [pc, #224]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002728:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d06b      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002734:	4b32      	ldr	r3, [pc, #200]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x354>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	2200      	movs	r2, #0
 800273c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800273e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002746:	663b      	str	r3, [r7, #96]	@ 0x60
 8002748:	2300      	movs	r3, #0
 800274a:	667b      	str	r3, [r7, #100]	@ 0x64
 800274c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	0159      	lsls	r1, r3, #5
 800275e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002762:	0150      	lsls	r0, r2, #5
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4621      	mov	r1, r4
 800276a:	1a51      	subs	r1, r2, r1
 800276c:	61b9      	str	r1, [r7, #24]
 800276e:	4629      	mov	r1, r5
 8002770:	eb63 0301 	sbc.w	r3, r3, r1
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002782:	4659      	mov	r1, fp
 8002784:	018b      	lsls	r3, r1, #6
 8002786:	4651      	mov	r1, sl
 8002788:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278c:	4651      	mov	r1, sl
 800278e:	018a      	lsls	r2, r1, #6
 8002790:	4651      	mov	r1, sl
 8002792:	ebb2 0801 	subs.w	r8, r2, r1
 8002796:	4659      	mov	r1, fp
 8002798:	eb63 0901 	sbc.w	r9, r3, r1
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b0:	4690      	mov	r8, r2
 80027b2:	4699      	mov	r9, r3
 80027b4:	4623      	mov	r3, r4
 80027b6:	eb18 0303 	adds.w	r3, r8, r3
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	462b      	mov	r3, r5
 80027be:	eb49 0303 	adc.w	r3, r9, r3
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027d0:	4629      	mov	r1, r5
 80027d2:	024b      	lsls	r3, r1, #9
 80027d4:	4621      	mov	r1, r4
 80027d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027da:	4621      	mov	r1, r4
 80027dc:	024a      	lsls	r2, r1, #9
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027e6:	2200      	movs	r2, #0
 80027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027f0:	f7fd fd0e 	bl	8000210 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027fe:	e065      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x420>
 8002800:	40023800 	.word	0x40023800
 8002804:	00f42400 	.word	0x00f42400
 8002808:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280c:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x458>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	2200      	movs	r2, #0
 8002814:	4618      	mov	r0, r3
 8002816:	4611      	mov	r1, r2
 8002818:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
 800281e:	2300      	movs	r3, #0
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
 8002822:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002826:	4642      	mov	r2, r8
 8002828:	464b      	mov	r3, r9
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4641      	mov	r1, r8
 8002840:	1a51      	subs	r1, r2, r1
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	4649      	mov	r1, r9
 8002846:	eb63 0301 	sbc.w	r3, r3, r1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002858:	4659      	mov	r1, fp
 800285a:	018b      	lsls	r3, r1, #6
 800285c:	4651      	mov	r1, sl
 800285e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002862:	4651      	mov	r1, sl
 8002864:	018a      	lsls	r2, r1, #6
 8002866:	4651      	mov	r1, sl
 8002868:	1a54      	subs	r4, r2, r1
 800286a:	4659      	mov	r1, fp
 800286c:	eb63 0501 	sbc.w	r5, r3, r1
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	00eb      	lsls	r3, r5, #3
 800287a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287e:	00e2      	lsls	r2, r4, #3
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	4643      	mov	r3, r8
 8002886:	18e3      	adds	r3, r4, r3
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	464b      	mov	r3, r9
 800288c:	eb45 0303 	adc.w	r3, r5, r3
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289e:	4629      	mov	r1, r5
 80028a0:	028b      	lsls	r3, r1, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a8:	4621      	mov	r1, r4
 80028aa:	028a      	lsls	r2, r1, #10
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028b4:	2200      	movs	r2, #0
 80028b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028be:	f7fd fca7 	bl	8000210 <__aeabi_uldivmod>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4613      	mov	r3, r2
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	0f1b      	lsrs	r3, r3, #28
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80028da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028ea:	e003      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	37b8      	adds	r7, #184	@ 0xb8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	00f42400 	.word	0x00f42400

0800290c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8083 	beq.w	8002a2c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002926:	4b95      	ldr	r3, [pc, #596]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d019      	beq.n	8002966 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002932:	4b92      	ldr	r3, [pc, #584]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800293e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d00c      	beq.n	8002966 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294c:	4b8b      	ldr	r3, [pc, #556]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002958:	4b88      	ldr	r3, [pc, #544]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002964:	d10b      	bne.n	800297e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002966:	4b85      	ldr	r3, [pc, #532]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x11e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d157      	bne.n	8002a2a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e216      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x8a>
 8002988:	4b7c      	ldr	r3, [pc, #496]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7b      	ldr	r2, [pc, #492]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e01d      	b.n	80029d2 <HAL_RCC_OscConfig+0xc6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0xae>
 80029a0:	4b76      	ldr	r3, [pc, #472]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a75      	ldr	r2, [pc, #468]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b73      	ldr	r3, [pc, #460]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a72      	ldr	r2, [pc, #456]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0xc6>
 80029ba:	4b70      	ldr	r3, [pc, #448]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6f      	ldr	r2, [pc, #444]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6c      	ldr	r2, [pc, #432]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d013      	beq.n	8002a02 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe f9dd 	bl	8000d98 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e2:	f7fe f9d9 	bl	8000d98 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	@ 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e1db      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f4:	4b61      	ldr	r3, [pc, #388]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0xd6>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe f9c9 	bl	8000d98 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f9c5 	bl	8000d98 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	@ 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1c7      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1c:	4b57      	ldr	r3, [pc, #348]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0xfe>
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d06f      	beq.n	8002b18 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a44:	4b4d      	ldr	r3, [pc, #308]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a50:	4b4a      	ldr	r3, [pc, #296]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5c:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d11c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a68:	4b44      	ldr	r3, [pc, #272]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a74:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x180>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e18f      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4938      	ldr	r1, [pc, #224]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa0:	e03a      	b.n	8002b18 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aaa:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f972 	bl	8000d98 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe f96e 	bl	8000d98 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e170      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b29      	ldr	r3, [pc, #164]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4925      	ldr	r1, [pc, #148]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
 8002aea:	e015      	b.n	8002b18 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe f951 	bl	8000d98 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe f94d 	bl	8000d98 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e14f      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d037      	beq.n	8002b94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d016      	beq.n	8002b5a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_RCC_OscConfig+0x278>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe f931 	bl	8000d98 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7fe f92d 	bl	8000d98 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e12f      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x22e>
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_RCC_OscConfig+0x278>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe f91a 	bl	8000d98 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe f916 	bl	8000d98 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e118      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	42470000 	.word	0x42470000
 8002b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b8a      	ldr	r3, [pc, #552]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e9      	bne.n	8002b68 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8097 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b83      	ldr	r3, [pc, #524]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	4a7e      	ldr	r2, [pc, #504]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b79      	ldr	r3, [pc, #484]	@ (8002db8 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b76      	ldr	r3, [pc, #472]	@ (8002db8 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a75      	ldr	r2, [pc, #468]	@ (8002db8 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f8d5 	bl	8000d98 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe f8d1 	bl	8000d98 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0d3      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b6c      	ldr	r3, [pc, #432]	@ (8002db8 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x31a>
 8002c18:	4b66      	ldr	r3, [pc, #408]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x354>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x33c>
 8002c2e:	4b61      	ldr	r3, [pc, #388]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	4a60      	ldr	r2, [pc, #384]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a5d      	ldr	r2, [pc, #372]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0x354>
 8002c48:	4b5a      	ldr	r3, [pc, #360]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a59      	ldr	r2, [pc, #356]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	4b57      	ldr	r3, [pc, #348]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a56      	ldr	r2, [pc, #344]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c5a:	f023 0304 	bic.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f896 	bl	8000d98 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe f892 	bl	8000d98 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e092      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ee      	beq.n	8002c70 <HAL_RCC_OscConfig+0x364>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f880 	bl	8000d98 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f87c 	bl	8000d98 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e07c      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb2:	4b40      	ldr	r3, [pc, #256]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ee      	bne.n	8002c9c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d068      	beq.n	8002daa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d060      	beq.n	8002da6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d145      	bne.n	8002d78 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <HAL_RCC_OscConfig+0x4b0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f851 	bl	8000d98 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe f84d 	bl	8000d98 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e04f      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	019b      	lsls	r3, r3, #6
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	3b01      	subs	r3, #1
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	071b      	lsls	r3, r3, #28
 8002d44:	491b      	ldr	r1, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <HAL_RCC_OscConfig+0x4b0>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe f822 	bl	8000d98 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe f81e 	bl	8000d98 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e020      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x44c>
 8002d76:	e018      	b.n	8002daa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <HAL_RCC_OscConfig+0x4b0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f80b 	bl	8000d98 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe f807 	bl	8000d98 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e009      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_OscConfig+0x4a8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x47a>
 8002da4:	e001      	b.n	8002daa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42470060 	.word	0x42470060

08002dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e01d      	b.n	8002e0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f815 	bl	8002e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f000 f968 	bl	80030d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d122      	bne.n	8002ece <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d11b      	bne.n	8002ece <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0202 	mvn.w	r2, #2
 8002e9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8ee 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002eba:	e005      	b.n	8002ec8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8e0 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8f1 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d122      	bne.n	8002f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d11b      	bne.n	8002f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0204 	mvn.w	r2, #4
 8002ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8c4 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002f0e:	e005      	b.n	8002f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8b6 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8c7 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d122      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11b      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0208 	mvn.w	r2, #8
 8002f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f89a 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002f62:	e005      	b.n	8002f70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f88c 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f89d 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d122      	bne.n	8002fca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d11b      	bne.n	8002fca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0210 	mvn.w	r2, #16
 8002f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f870 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002fb6:	e005      	b.n	8002fc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f862 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f873 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0201 	mvn.w	r2, #1
 8002fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fd fc67 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b80      	cmp	r3, #128	@ 0x80
 8003002:	d10e      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b80      	cmp	r3, #128	@ 0x80
 8003010:	d107      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f903 	bl	8003228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	2b40      	cmp	r3, #64	@ 0x40
 800302e:	d10e      	bne.n	800304e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	d107      	bne.n	800304e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f838 	bl	80030be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d10e      	bne.n	800307a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8cd 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a40      	ldr	r2, [pc, #256]	@ (80031e8 <TIM_Base_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f2:	d00f      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3d      	ldr	r2, [pc, #244]	@ (80031ec <TIM_Base_SetConfig+0x118>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00b      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3c      	ldr	r2, [pc, #240]	@ (80031f0 <TIM_Base_SetConfig+0x11c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3b      	ldr	r2, [pc, #236]	@ (80031f4 <TIM_Base_SetConfig+0x120>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3a      	ldr	r2, [pc, #232]	@ (80031f8 <TIM_Base_SetConfig+0x124>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2f      	ldr	r2, [pc, #188]	@ (80031e8 <TIM_Base_SetConfig+0x114>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003134:	d027      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <TIM_Base_SetConfig+0x118>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d023      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2b      	ldr	r2, [pc, #172]	@ (80031f0 <TIM_Base_SetConfig+0x11c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01f      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2a      	ldr	r2, [pc, #168]	@ (80031f4 <TIM_Base_SetConfig+0x120>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a29      	ldr	r2, [pc, #164]	@ (80031f8 <TIM_Base_SetConfig+0x124>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d017      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a28      	ldr	r2, [pc, #160]	@ (80031fc <TIM_Base_SetConfig+0x128>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <TIM_Base_SetConfig+0x12c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00f      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <TIM_Base_SetConfig+0x130>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a25      	ldr	r2, [pc, #148]	@ (8003208 <TIM_Base_SetConfig+0x134>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <TIM_Base_SetConfig+0x138>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <TIM_Base_SetConfig+0x13c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d108      	bne.n	8003198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800318c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <TIM_Base_SetConfig+0x114>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0xf8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	@ (80031f8 <TIM_Base_SetConfig+0x124>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40010400 	.word	0x40010400
 80031fc:	40014000 	.word	0x40014000
 8003200:	40014400 	.word	0x40014400
 8003204:	40014800 	.word	0x40014800
 8003208:	40001800 	.word	0x40001800
 800320c:	40001c00 	.word	0x40001c00
 8003210:	40002000 	.word	0x40002000

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e03f      	b.n	80032ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fb72 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	@ 0x24
 800326c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800327e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa69 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_UART_IRQHandler+0x52>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f996 	bl	8003654 <UART_Receive_IT>
      return;
 8003328:	e0d0      	b.n	80034cc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80b0 	beq.w	8003492 <HAL_UART_IRQHandler+0x1ba>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_UART_IRQHandler+0x70>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a5 	beq.w	8003492 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_UART_IRQHandler+0x90>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_UART_IRQHandler+0xb0>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_UART_IRQHandler+0xd0>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00f      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_UART_IRQHandler+0xee>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	f043 0208 	orr.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d077      	beq.n	80034ca <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_UART_IRQHandler+0x11c>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f930 	bl	8003654 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_UART_IRQHandler+0x144>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d031      	beq.n	8003480 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f879 	bl	8003514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342c:	2b40      	cmp	r3, #64	@ 0x40
 800342e:	d123      	bne.n	8003478 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344c:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_UART_IRQHandler+0x1fc>)
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fe5f 	bl	8001118 <HAL_DMA_Abort_IT>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800346a:	4610      	mov	r0, r2
 800346c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346e:	e00e      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f845 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003476:	e00a      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f841 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347e:	e006      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f83d 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 800348c:	e01d      	b.n	80034ca <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348e:	bf00      	nop
    return;
 8003490:	e01b      	b.n	80034ca <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x1d6>
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f866 	bl	8003578 <UART_Transmit_IT>
    return;
 80034ac:	e00e      	b.n	80034cc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_UART_IRQHandler+0x1f4>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8ae 	bl	8003624 <UART_EndTransmit_IT>
    return;
 80034c8:	e000      	b.n	80034cc <HAL_UART_IRQHandler+0x1f4>
    return;
 80034ca:	bf00      	nop
  }
}
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	08003551 	.word	0x08003551

080034d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800352a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ffc8 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b21      	cmp	r3, #33	@ 0x21
 800358a:	d144      	bne.n	8003616 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003594:	d11a      	bne.n	80035cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]
 80035be:	e00e      	b.n	80035de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]
 80035ca:	e008      	b.n	80035de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6211      	str	r1, [r2, #32]
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff47 	bl	80034d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b22      	cmp	r3, #34	@ 0x22
 8003666:	d171      	bne.n	800374c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003670:	d123      	bne.n	80036ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10e      	bne.n	800369e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
 800369c:	e029      	b.n	80036f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b8:	e01b      	b.n	80036f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6858      	ldr	r0, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	1c59      	adds	r1, r3, #1
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6291      	str	r1, [r2, #40]	@ 0x28
 80036d2:	b2c2      	uxtb	r2, r0
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e00c      	b.n	80036f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	1c58      	adds	r0, r3, #1
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	6288      	str	r0, [r1, #40]	@ 0x28
 80036ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4619      	mov	r1, r3
 8003700:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003702:	2b00      	cmp	r3, #0
 8003704:	d120      	bne.n	8003748 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0220 	bic.w	r2, r2, #32
 8003714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fed4 	bl	80034ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e002      	b.n	800374e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003760:	af00      	add	r7, sp, #0
 8003762:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003772:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	ea40 0301 	orr.w	r3, r0, r1
 8003782:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003784:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	431a      	orrs	r2, r3
 8003792:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	431a      	orrs	r2, r3
 800379a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80037a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037b2:	f021 010c 	bic.w	r1, r1, #12
 80037b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80037c0:	430b      	orrs	r3, r1
 80037c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	ea40 0301 	orr.w	r3, r0, r1
 80037e0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ec:	f040 824a 	bne.w	8003c84 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b96      	ldr	r3, [pc, #600]	@ (8003a50 <UART_SetConfig+0x2f8>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d006      	beq.n	800380a <UART_SetConfig+0xb2>
 80037fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b94      	ldr	r3, [pc, #592]	@ (8003a54 <UART_SetConfig+0x2fc>)
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 8129 	bne.w	8003a5c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800380a:	f7fe fadf 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 800380e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003812:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800381c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8003820:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8003824:	4622      	mov	r2, r4
 8003826:	462b      	mov	r3, r5
 8003828:	1891      	adds	r1, r2, r2
 800382a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800382e:	415b      	adcs	r3, r3
 8003830:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003834:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003838:	4621      	mov	r1, r4
 800383a:	1851      	adds	r1, r2, r1
 800383c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003840:	4629      	mov	r1, r5
 8003842:	414b      	adcs	r3, r1
 8003844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8003854:	4649      	mov	r1, r9
 8003856:	00cb      	lsls	r3, r1, #3
 8003858:	4641      	mov	r1, r8
 800385a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385e:	4641      	mov	r1, r8
 8003860:	00ca      	lsls	r2, r1, #3
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	4603      	mov	r3, r0
 8003868:	4622      	mov	r2, r4
 800386a:	189b      	adds	r3, r3, r2
 800386c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003870:	462b      	mov	r3, r5
 8003872:	460a      	mov	r2, r1
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800387c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003888:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800388c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8003890:	460b      	mov	r3, r1
 8003892:	18db      	adds	r3, r3, r3
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003898:	4613      	mov	r3, r2
 800389a:	eb42 0303 	adc.w	r3, r2, r3
 800389e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038a2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80038a6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80038aa:	f7fc fcb1 	bl	8000210 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b69      	ldr	r3, [pc, #420]	@ (8003a58 <UART_SetConfig+0x300>)
 80038b4:	fba3 2302 	umull	r2, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	011c      	lsls	r4, r3, #4
 80038bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80038c6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80038ca:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80038ce:	4642      	mov	r2, r8
 80038d0:	464b      	mov	r3, r9
 80038d2:	1891      	adds	r1, r2, r2
 80038d4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80038d8:	415b      	adcs	r3, r3
 80038da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038de:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80038e2:	4641      	mov	r1, r8
 80038e4:	1851      	adds	r1, r2, r1
 80038e6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80038fe:	4659      	mov	r1, fp
 8003900:	00cb      	lsls	r3, r1, #3
 8003902:	4651      	mov	r1, sl
 8003904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003908:	4651      	mov	r1, sl
 800390a:	00ca      	lsls	r2, r1, #3
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	4603      	mov	r3, r0
 8003912:	4642      	mov	r2, r8
 8003914:	189b      	adds	r3, r3, r2
 8003916:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800391a:	464b      	mov	r3, r9
 800391c:	460a      	mov	r2, r1
 800391e:	eb42 0303 	adc.w	r3, r2, r3
 8003922:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003926:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003932:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8003936:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800393a:	460b      	mov	r3, r1
 800393c:	18db      	adds	r3, r3, r3
 800393e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003942:	4613      	mov	r3, r2
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800394c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003950:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8003954:	f7fc fc5c 	bl	8000210 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4611      	mov	r1, r2
 800395e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a58 <UART_SetConfig+0x300>)
 8003960:	fba3 2301 	umull	r2, r3, r3, r1
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	2264      	movs	r2, #100	@ 0x64
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	1acb      	subs	r3, r1, r3
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003974:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <UART_SetConfig+0x300>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003982:	441c      	add	r4, r3
 8003984:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800398e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003992:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	1891      	adds	r1, r2, r2
 800399c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80039a0:	415b      	adcs	r3, r3
 80039a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80039aa:	4641      	mov	r1, r8
 80039ac:	1851      	adds	r1, r2, r1
 80039ae:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80039c6:	4659      	mov	r1, fp
 80039c8:	00cb      	lsls	r3, r1, #3
 80039ca:	4651      	mov	r1, sl
 80039cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d0:	4651      	mov	r1, sl
 80039d2:	00ca      	lsls	r2, r1, #3
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	4642      	mov	r2, r8
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80039e2:	464b      	mov	r3, r9
 80039e4:	460a      	mov	r2, r1
 80039e6:	eb42 0303 	adc.w	r3, r2, r3
 80039ea:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80039ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80039fa:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80039fe:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a14:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003a18:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003a1c:	f7fc fbf8 	bl	8000210 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <UART_SetConfig+0x300>)
 8003a26:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2164      	movs	r1, #100	@ 0x64
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	3332      	adds	r3, #50	@ 0x32
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <UART_SetConfig+0x300>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 0207 	and.w	r2, r3, #7
 8003a44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4422      	add	r2, r4
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e34a      	b.n	80040e6 <UART_SetConfig+0x98e>
 8003a50:	40011000 	.word	0x40011000
 8003a54:	40011400 	.word	0x40011400
 8003a58:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe f9a2 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8003a60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003a6e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003a72:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003a80:	415b      	adcs	r3, r3
 8003a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	eb12 0a01 	adds.w	sl, r2, r1
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb43 0b01 	adc.w	fp, r3, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aaa:	4692      	mov	sl, r2
 8003aac:	469b      	mov	fp, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ab8:	462b      	mov	r3, r5
 8003aba:	eb4b 0303 	adc.w	r3, fp, r3
 8003abe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ac2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003ace:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003ad2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	18db      	adds	r3, r3, r3
 8003ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ade:	4613      	mov	r3, r2
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ae8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003aec:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8003af0:	f7fc fb8e 	bl	8000210 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4b61      	ldr	r3, [pc, #388]	@ (8003c80 <UART_SetConfig+0x528>)
 8003afa:	fba3 2302 	umull	r2, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	011c      	lsls	r4, r3, #4
 8003b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003b0c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003b10:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b20:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003b24:	4641      	mov	r1, r8
 8003b26:	1851      	adds	r1, r2, r1
 8003b28:	6739      	str	r1, [r7, #112]	@ 0x70
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	414b      	adcs	r3, r1
 8003b2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8003b3c:	4659      	mov	r1, fp
 8003b3e:	00cb      	lsls	r3, r1, #3
 8003b40:	4651      	mov	r1, sl
 8003b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b46:	4651      	mov	r1, sl
 8003b48:	00ca      	lsls	r2, r1, #3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4642      	mov	r2, r8
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003b58:	464b      	mov	r3, r9
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003b64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b70:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8003b74:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8003b78:	460b      	mov	r3, r1
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b7e:	4613      	mov	r3, r2
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003b8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003b8e:	f7fc fb3f 	bl	8000210 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	4b39      	ldr	r3, [pc, #228]	@ (8003c80 <UART_SetConfig+0x528>)
 8003b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2264      	movs	r2, #100	@ 0x64
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	1acb      	subs	r3, r1, r3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bae:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <UART_SetConfig+0x528>)
 8003bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bbc:	441c      	add	r4, r3
 8003bbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8003bc8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003bcc:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	6639      	str	r1, [r7, #96]	@ 0x60
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bdc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003be0:	4641      	mov	r1, r8
 8003be2:	1851      	adds	r1, r2, r1
 8003be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003be6:	4649      	mov	r1, r9
 8003be8:	414b      	adcs	r3, r1
 8003bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	00cb      	lsls	r3, r1, #3
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c02:	4651      	mov	r1, sl
 8003c04:	00ca      	lsls	r2, r1, #3
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8003c20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003c2c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8003c30:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8003c34:	460b      	mov	r3, r1
 8003c36:	18db      	adds	r3, r3, r3
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c42:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c46:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003c4a:	f7fc fae1 	bl	8000210 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <UART_SetConfig+0x528>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	@ 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3332      	adds	r3, #50	@ 0x32
 8003c66:	4a06      	ldr	r2, [pc, #24]	@ (8003c80 <UART_SetConfig+0x528>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4422      	add	r2, r4
 8003c7a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c7c:	e233      	b.n	80040e6 <UART_SetConfig+0x98e>
 8003c7e:	bf00      	nop
 8003c80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec0 <UART_SetConfig+0x768>)
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d006      	beq.n	8003c9e <UART_SetConfig+0x546>
 8003c90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b8b      	ldr	r3, [pc, #556]	@ (8003ec4 <UART_SetConfig+0x76c>)
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8117 	bne.w	8003ecc <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c9e:	f7fe f895 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003ca2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003cb0:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003cb4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003cb8:	4622      	mov	r2, r4
 8003cba:	462b      	mov	r3, r5
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cc8:	4621      	mov	r1, r4
 8003cca:	eb12 0801 	adds.w	r8, r2, r1
 8003cce:	4629      	mov	r1, r5
 8003cd0:	eb43 0901 	adc.w	r9, r3, r1
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce8:	4690      	mov	r8, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	4623      	mov	r3, r4
 8003cee:	eb18 0303 	adds.w	r3, r8, r3
 8003cf2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb49 0303 	adc.w	r3, r9, r3
 8003cfc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003d00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003d0c:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	008b      	lsls	r3, r1, #2
 8003d20:	4621      	mov	r1, r4
 8003d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d26:	4621      	mov	r1, r4
 8003d28:	008a      	lsls	r2, r1, #2
 8003d2a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003d2e:	f7fc fa6f 	bl	8000210 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b64      	ldr	r3, [pc, #400]	@ (8003ec8 <UART_SetConfig+0x770>)
 8003d38:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	011c      	lsls	r4, r3, #4
 8003d40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003d4a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003d4e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8003d52:	4642      	mov	r2, r8
 8003d54:	464b      	mov	r3, r9
 8003d56:	1891      	adds	r1, r2, r2
 8003d58:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d62:	4641      	mov	r1, r8
 8003d64:	1851      	adds	r1, r2, r1
 8003d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d68:	4649      	mov	r1, r9
 8003d6a:	414b      	adcs	r3, r1
 8003d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	00cb      	lsls	r3, r1, #3
 8003d7e:	4651      	mov	r1, sl
 8003d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d84:	4651      	mov	r1, sl
 8003d86:	00ca      	lsls	r2, r1, #3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4642      	mov	r2, r8
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003d96:	464b      	mov	r3, r9
 8003d98:	460a      	mov	r2, r1
 8003d9a:	eb42 0303 	adc.w	r3, r2, r3
 8003d9e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003da2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003dae:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	008b      	lsls	r3, r1, #2
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc8:	4641      	mov	r1, r8
 8003dca:	008a      	lsls	r2, r1, #2
 8003dcc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003dd0:	f7fc fa1e 	bl	8000210 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <UART_SetConfig+0x770>)
 8003ddc:	fba3 2301 	umull	r2, r3, r3, r1
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2264      	movs	r2, #100	@ 0x64
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	1acb      	subs	r3, r1, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	3332      	adds	r3, #50	@ 0x32
 8003dee:	4a36      	ldr	r2, [pc, #216]	@ (8003ec8 <UART_SetConfig+0x770>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dfa:	441c      	add	r4, r3
 8003dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003e06:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8003e0a:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8003e0e:	4642      	mov	r2, r8
 8003e10:	464b      	mov	r3, r9
 8003e12:	1891      	adds	r1, r2, r2
 8003e14:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e16:	415b      	adcs	r3, r3
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003e1e:	4641      	mov	r1, r8
 8003e20:	1851      	adds	r1, r2, r1
 8003e22:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e24:	4649      	mov	r1, r9
 8003e26:	414b      	adcs	r3, r1
 8003e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8003e36:	4659      	mov	r1, fp
 8003e38:	00cb      	lsls	r3, r1, #3
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e40:	4651      	mov	r1, sl
 8003e42:	00ca      	lsls	r2, r1, #3
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4642      	mov	r2, r8
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003e52:	464b      	mov	r3, r9
 8003e54:	460a      	mov	r2, r1
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003e5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003e6a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	008b      	lsls	r3, r1, #2
 8003e7e:	4641      	mov	r1, r8
 8003e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e84:	4641      	mov	r1, r8
 8003e86:	008a      	lsls	r2, r1, #2
 8003e88:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003e8c:	f7fc f9c0 	bl	8000210 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <UART_SetConfig+0x770>)
 8003e96:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2164      	movs	r1, #100	@ 0x64
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	3332      	adds	r3, #50	@ 0x32
 8003ea8:	4a07      	ldr	r2, [pc, #28]	@ (8003ec8 <UART_SetConfig+0x770>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4422      	add	r2, r4
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	e112      	b.n	80040e6 <UART_SetConfig+0x98e>
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	40011400 	.word	0x40011400
 8003ec8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fd ff6a 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003ede:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003ee2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	464b      	mov	r3, r9
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	6239      	str	r1, [r7, #32]
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	1854      	adds	r4, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb43 0501 	adc.w	r5, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	00eb      	lsls	r3, r5, #3
 8003f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0e:	00e2      	lsls	r2, r4, #3
 8003f10:	4614      	mov	r4, r2
 8003f12:	461d      	mov	r5, r3
 8003f14:	4643      	mov	r3, r8
 8003f16:	18e3      	adds	r3, r4, r3
 8003f18:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	eb45 0303 	adc.w	r3, r5, r3
 8003f22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003f26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f32:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003f42:	4629      	mov	r1, r5
 8003f44:	008b      	lsls	r3, r1, #2
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	008a      	lsls	r2, r1, #2
 8003f50:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003f54:	f7fc f95c 	bl	8000210 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4b65      	ldr	r3, [pc, #404]	@ (80040f4 <UART_SetConfig+0x99c>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	011c      	lsls	r4, r3, #4
 8003f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003f74:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	61b9      	str	r1, [r7, #24]
 8003f80:	415b      	adcs	r3, r3
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6139      	str	r1, [r7, #16]
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fd4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	008b      	lsls	r3, r1, #2
 8003fe8:	4641      	mov	r1, r8
 8003fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fee:	4641      	mov	r1, r8
 8003ff0:	008a      	lsls	r2, r1, #2
 8003ff2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003ff6:	f7fc f90b 	bl	8000210 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <UART_SetConfig+0x99c>)
 8004002:	fba3 2301 	umull	r2, r3, r3, r1
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2264      	movs	r2, #100	@ 0x64
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	1acb      	subs	r3, r1, r3
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	3332      	adds	r3, #50	@ 0x32
 8004014:	4a37      	ldr	r2, [pc, #220]	@ (80040f4 <UART_SetConfig+0x99c>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004020:	441c      	add	r4, r3
 8004022:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800402c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004030:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	1891      	adds	r1, r2, r2
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	415b      	adcs	r3, r3
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004044:	4641      	mov	r1, r8
 8004046:	1851      	adds	r1, r2, r1
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	4649      	mov	r1, r9
 800404c:	414b      	adcs	r3, r1
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800405c:	4659      	mov	r1, fp
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004066:	4651      	mov	r1, sl
 8004068:	00ca      	lsls	r2, r1, #3
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	4603      	mov	r3, r0
 8004070:	4642      	mov	r2, r8
 8004072:	189b      	adds	r3, r3, r2
 8004074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004078:	464b      	mov	r3, r9
 800407a:	460a      	mov	r2, r1
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004090:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80040a0:	4649      	mov	r1, r9
 80040a2:	008b      	lsls	r3, r1, #2
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040aa:	4641      	mov	r1, r8
 80040ac:	008a      	lsls	r2, r1, #2
 80040ae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040b2:	f7fc f8ad 	bl	8000210 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <UART_SetConfig+0x99c>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	@ 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	3332      	adds	r3, #50	@ 0x32
 80040ce:	4a09      	ldr	r2, [pc, #36]	@ (80040f4 <UART_SetConfig+0x99c>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 020f 	and.w	r2, r3, #15
 80040da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4422      	add	r2, r4
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	e7ff      	b.n	80040e6 <UART_SetConfig+0x98e>
 80040e6:	bf00      	nop
 80040e8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f2:	bf00      	nop
 80040f4:	51eb851f 	.word	0x51eb851f

080040f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f8:	b084      	sub	sp, #16
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	f107 001c 	add.w	r0, r7, #28
 8004106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	2b01      	cmp	r3, #1
 800410e:	d122      	bne.n	8004156 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa50 	bl	80045f0 <USB_CoreReset>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e01a      	b.n	800418c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fa44 	bl	80045f0 <USB_CoreReset>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800416c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	@ 0x38
 800417e:	e005      	b.n	800418c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10b      	bne.n	80041aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f043 0206 	orr.w	r2, r3, #6
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b6:	b004      	add	sp, #16
 80041b8:	4770      	bx	lr

080041ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d106      	bne.n	8004208 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	e00b      	b.n	8004220 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	e001      	b.n	8004220 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e003      	b.n	8004228 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004220:	2032      	movs	r0, #50	@ 0x32
 8004222:	f7fc fdc5 	bl	8000db0 <HAL_Delay>

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004230:	b084      	sub	sp, #16
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800423e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e009      	b.n	8004264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3340      	adds	r3, #64	@ 0x40
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3301      	adds	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0e      	cmp	r3, #14
 8004268:	d9f2      	bls.n	8004250 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800426a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11c      	bne.n	80042aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427e:	f043 0302 	orr.w	r3, r3, #2
 8004282:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e005      	b.n	80042b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042bc:	461a      	mov	r2, r3
 80042be:	2300      	movs	r3, #0
 80042c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c8:	4619      	mov	r1, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d0:	461a      	mov	r2, r3
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10c      	bne.n	80042f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042e2:	2100      	movs	r1, #0
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f949 	bl	800457c <USB_SetDevSpeed>
 80042ea:	e008      	b.n	80042fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ec:	2101      	movs	r1, #1
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f944 	bl	800457c <USB_SetDevSpeed>
 80042f4:	e003      	b.n	80042fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042f6:	2103      	movs	r1, #3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f93f 	bl	800457c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042fe:	2110      	movs	r1, #16
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8f3 	bl	80044ec <USB_FlushTxFifo>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f911 	bl	8004538 <USB_FlushRxFifo>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e043      	b.n	80043d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800435c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004360:	d118      	bne.n	8004394 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e013      	b.n	80043a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e008      	b.n	80043a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3301      	adds	r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3b7      	bcc.n	800434a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e043      	b.n	8004468 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d118      	bne.n	800442a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e013      	b.n	800443c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e008      	b.n	800443c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	2300      	movs	r3, #0
 800443a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3b7      	bcc.n	80043e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800447e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <USB_DevInit+0x2b8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f043 0208 	orr.w	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e4:	b004      	add	sp, #16
 80044e6:	4770      	bx	lr
 80044e8:	803c3800 	.word	0x803c3800

080044ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	019b      	lsls	r3, r3, #6
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a09      	ldr	r2, [pc, #36]	@ (8004534 <USB_FlushTxFifo+0x48>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b20      	cmp	r3, #32
 8004522:	d0f0      	beq.n	8004506 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	00030d40 	.word	0x00030d40

08004538 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2210      	movs	r2, #16
 8004548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a09      	ldr	r2, [pc, #36]	@ (8004578 <USB_FlushRxFifo+0x40>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d0f0      	beq.n	800454a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	00030d40 	.word	0x00030d40

0800457c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80045c8:	f023 0303 	bic.w	r3, r3, #3
 80045cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a13      	ldr	r2, [pc, #76]	@ (8004654 <USB_CoreReset+0x64>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e01b      	b.n	8004646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	daf2      	bge.n	80045fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f043 0201 	orr.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a09      	ldr	r2, [pc, #36]	@ (8004654 <USB_CoreReset+0x64>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e006      	b.n	8004646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d0f0      	beq.n	8004626 <USB_CoreReset+0x36>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	00030d40 	.word	0x00030d40

08004658 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466e:	f3ef 8305 	mrs	r3, IPSR
 8004672:	60bb      	str	r3, [r7, #8]
  return(result);
 8004674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467a:	f3ef 8310 	mrs	r3, PRIMASK
 800467e:	607b      	str	r3, [r7, #4]
  return(result);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004686:	f3ef 8311 	mrs	r3, BASEPRI
 800468a:	603b      	str	r3, [r7, #0]
  return(result);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <osKernelInitialize+0x3a>
 8004692:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <osKernelInitialize+0x64>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d103      	bne.n	80046a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800469a:	f06f 0305 	mvn.w	r3, #5
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e00c      	b.n	80046bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <osKernelInitialize+0x64>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <osKernelInitialize+0x64>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e002      	b.n	80046bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046bc:	68fb      	ldr	r3, [r7, #12]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	2000057c 	.word	0x2000057c

080046d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d6:	f3ef 8305 	mrs	r3, IPSR
 80046da:	60bb      	str	r3, [r7, #8]
  return(result);
 80046dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e2:	f3ef 8310 	mrs	r3, PRIMASK
 80046e6:	607b      	str	r3, [r7, #4]
  return(result);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ee:	f3ef 8311 	mrs	r3, BASEPRI
 80046f2:	603b      	str	r3, [r7, #0]
  return(result);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <osKernelStart+0x3a>
 80046fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004738 <osKernelStart+0x68>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d103      	bne.n	800470a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004702:	f06f 0305 	mvn.w	r3, #5
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e010      	b.n	800472c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <osKernelStart+0x68>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d109      	bne.n	8004726 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004712:	f7ff ffa1 	bl	8004658 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004716:	4b08      	ldr	r3, [pc, #32]	@ (8004738 <osKernelStart+0x68>)
 8004718:	2202      	movs	r2, #2
 800471a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800471c:	f001 f89e 	bl	800585c <vTaskStartScheduler>
      stat = osOK;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800472a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800472c:	68fb      	ldr	r3, [r7, #12]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2000057c 	.word	0x2000057c

0800473c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	@ 0x40
 8004740:	af04      	add	r7, sp, #16
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	61fb      	str	r3, [r7, #28]
  return(result);
 8004752:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 808f 	bne.w	8004878 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8310 	mrs	r3, PRIMASK
 800475e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	617b      	str	r3, [r7, #20]
  return(result);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <osThreadNew+0x3e>
 8004772:	4b44      	ldr	r3, [pc, #272]	@ (8004884 <osThreadNew+0x148>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d07e      	beq.n	8004878 <osThreadNew+0x13c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d07b      	beq.n	8004878 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004784:	2318      	movs	r3, #24
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004790:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d045      	beq.n	8004824 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <osThreadNew+0x6a>
        name = attr->name;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <osThreadNew+0x90>
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	2b38      	cmp	r3, #56	@ 0x38
 80047be:	d805      	bhi.n	80047cc <osThreadNew+0x90>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <osThreadNew+0x94>
        return (NULL);
 80047cc:	2300      	movs	r3, #0
 80047ce:	e054      	b.n	800487a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <osThreadNew+0xca>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80047ee:	d90a      	bls.n	8004806 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <osThreadNew+0xca>
        mem = 1;
 8004800:	2301      	movs	r3, #1
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	e010      	b.n	8004828 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <osThreadNew+0xec>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d108      	bne.n	8004828 <osThreadNew+0xec>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <osThreadNew+0xec>
          mem = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	e001      	b.n	8004828 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d110      	bne.n	8004850 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004836:	9202      	str	r2, [sp, #8]
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fe2d 	bl	80054a4 <xTaskCreateStatic>
 800484a:	4603      	mov	r3, r0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e013      	b.n	8004878 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d110      	bne.n	8004878 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	b29a      	uxth	r2, r3
 800485a:	f107 0310 	add.w	r3, r7, #16
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fe7b 	bl	8005564 <xTaskCreate>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <osThreadNew+0x13c>
          hTask = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004878:	693b      	ldr	r3, [r7, #16]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3730      	adds	r7, #48	@ 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	2000057c 	.word	0x2000057c

08004888 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004890:	f3ef 8305 	mrs	r3, IPSR
 8004894:	613b      	str	r3, [r7, #16]
  return(result);
 8004896:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10f      	bne.n	80048bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489c:	f3ef 8310 	mrs	r3, PRIMASK
 80048a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048a8:	f3ef 8311 	mrs	r3, BASEPRI
 80048ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <osDelay+0x3c>
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <osDelay+0x58>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d103      	bne.n	80048c4 <osDelay+0x3c>
    stat = osErrorISR;
 80048bc:	f06f 0305 	mvn.w	r3, #5
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e007      	b.n	80048d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ff8e 	bl	80057f0 <vTaskDelay>
    }
  }

  return (stat);
 80048d4:	697b      	ldr	r3, [r7, #20]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000057c 	.word	0x2000057c

080048e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a07      	ldr	r2, [pc, #28]	@ (8004910 <vApplicationGetIdleTaskMemory+0x2c>)
 80048f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a06      	ldr	r2, [pc, #24]	@ (8004914 <vApplicationGetIdleTaskMemory+0x30>)
 80048fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2280      	movs	r2, #128	@ 0x80
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000580 	.word	0x20000580
 8004914:	200005dc 	.word	0x200005dc

08004918 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <vApplicationGetTimerTaskMemory+0x2c>)
 8004928:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4a06      	ldr	r2, [pc, #24]	@ (8004948 <vApplicationGetTimerTaskMemory+0x30>)
 800492e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	200007dc 	.word	0x200007dc
 8004948:	20000838 	.word	0x20000838

0800494c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f103 0208 	add.w	r2, r3, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004964:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f103 0208 	add.w	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f103 0208 	add.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a04:	d103      	bne.n	8004a0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e00c      	b.n	8004a28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3308      	adds	r3, #8
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e002      	b.n	8004a1c <vListInsert+0x2e>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d2f6      	bcs.n	8004a16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d103      	bne.n	8004a94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1e5a      	subs	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ae0:	f002 f87a 	bl	8006bd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b10:	3b01      	subs	r3, #1
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	22ff      	movs	r2, #255	@ 0xff
 8004b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	22ff      	movs	r2, #255	@ 0xff
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d114      	bne.n	8004b60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01a      	beq.n	8004b74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3310      	adds	r3, #16
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f918 	bl	8005d78 <xTaskRemoveFromEventList>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <xQueueGenericReset+0xd0>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	e009      	b.n	8004b74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3310      	adds	r3, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fef1 	bl	800494c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3324      	adds	r3, #36	@ 0x24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff feec 	bl	800494c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b74:	f002 f862 	bl	8006c3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b78:	2301      	movs	r3, #1
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	@ 0x38
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	e7fd      	b.n	8004bce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <xQueueGenericCreateStatic+0x56>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <xQueueGenericCreateStatic+0x5a>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueGenericCreateStatic+0x5c>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	623b      	str	r3, [r7, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <xQueueGenericCreateStatic+0x84>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <xQueueGenericCreateStatic+0x88>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <xQueueGenericCreateStatic+0x8a>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61fb      	str	r3, [r7, #28]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c2e:	2350      	movs	r3, #80	@ 0x50
 8004c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b50      	cmp	r3, #80	@ 0x50
 8004c36:	d00b      	beq.n	8004c50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61bb      	str	r3, [r7, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f805 	bl	8004c82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3730      	adds	r7, #48	@ 0x30
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	f7ff fefe 	bl	8004ab4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	@ 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xQueueGenericSend+0x34>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSend+0x42>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <xQueueGenericSend+0x46>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <xQueueGenericSend+0x48>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <xQueueGenericSend+0x64>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSend+0x72>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <xQueueGenericSend+0x76>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGenericSend+0x78>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <xQueueGenericSend+0x94>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	623b      	str	r3, [r7, #32]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5c:	f001 f9cc 	bl	80060f8 <xTaskGetSchedulerState>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xQueueGenericSend+0xa4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <xQueueGenericSend+0xa8>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <xQueueGenericSend+0xaa>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <xQueueGenericSend+0xc6>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	61fb      	str	r3, [r7, #28]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d8e:	f001 ff23 	bl	8006bd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <xQueueGenericSend+0xdc>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d129      	bne.n	8004df8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004daa:	f000 fa0d 	bl	80051c8 <prvCopyDataToQueue>
 8004dae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d010      	beq.n	8004dda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	3324      	adds	r3, #36	@ 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 ffdb 	bl	8005d78 <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e00a      	b.n	8004df0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004de0:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004df0:	f001 ff24 	bl	8006c3c <vPortExitCritical>
				return pdPASS;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e063      	b.n	8004ec0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dfe:	f001 ff1d 	bl	8006c3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e05c      	b.n	8004ec0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 f815 	bl	8005e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e1a:	f001 ff0f 	bl	8006c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e1e:	f000 fd85 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e22:	f001 fed9 	bl	8006bd8 <vPortEnterCritical>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e32:	d103      	bne.n	8004e3c <xQueueGenericSend+0x174>
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSend+0x18a>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e52:	f001 fef3 	bl	8006c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e56:	1d3a      	adds	r2, r7, #4
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f804 	bl	8005e6c <xTaskCheckForTimeOut>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d124      	bne.n	8004eb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e6c:	f000 faa4 	bl	80053b8 <prvIsQueueFull>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	3310      	adds	r3, #16
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ff28 	bl	8005cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e86:	f000 fa2f 	bl	80052e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e8a:	f000 fd5d 	bl	8005948 <xTaskResumeAll>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af7c 	bne.w	8004d8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	e772      	b.n	8004d8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eaa:	f000 fa1d 	bl	80052e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eae:	f000 fd4b 	bl	8005948 <xTaskResumeAll>
 8004eb2:	e76c      	b.n	8004d8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eb6:	f000 fa17 	bl	80052e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eba:	f000 fd45 	bl	8005948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3738      	adds	r7, #56	@ 0x38
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08e      	sub	sp, #56	@ 0x38
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <xQueueGenericSendFromISR+0x3e>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <xQueueGenericSendFromISR+0x42>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <xQueueGenericSendFromISR+0x44>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSendFromISR+0x6e>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <xQueueGenericSendFromISR+0x72>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueGenericSendFromISR+0x74>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	61fb      	str	r3, [r7, #28]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f5c:	f001 ff1c 	bl	8006d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f60:	f3ef 8211 	mrs	r2, BASEPRI
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61ba      	str	r2, [r7, #24]
 8004f76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <xQueueGenericSendFromISR+0xc2>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d12c      	bne.n	8004fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9e:	f000 f913 	bl	80051c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004faa:	d112      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d016      	beq.n	8004fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	3324      	adds	r3, #36	@ 0x24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fedd 	bl	8005d78 <xTaskRemoveFromEventList>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e007      	b.n	8004fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	b25a      	sxtb	r2, r3
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004fe6:	e001      	b.n	8004fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3738      	adds	r7, #56	@ 0x38
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	@ 0x30
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <xQueueReceive+0x32>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	623b      	str	r3, [r7, #32]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <xQueueReceive+0x40>
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <xQueueReceive+0x44>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <xQueueReceive+0x46>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <xQueueReceive+0x62>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	61fb      	str	r3, [r7, #28]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005066:	f001 f847 	bl	80060f8 <xTaskGetSchedulerState>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <xQueueReceive+0x72>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <xQueueReceive+0x76>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueReceive+0x78>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueReceive+0x94>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	61bb      	str	r3, [r7, #24]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005098:	f001 fd9e 	bl	8006bd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01f      	beq.n	80050e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050ac:	f000 f8f6 	bl	800529c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00f      	beq.n	80050e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	3310      	adds	r3, #16
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe57 	bl	8005d78 <xTaskRemoveFromEventList>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050d0:	4b3c      	ldr	r3, [pc, #240]	@ (80051c4 <xQueueReceive+0x1c0>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050e0:	f001 fdac 	bl	8006c3c <vPortExitCritical>
				return pdPASS;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e069      	b.n	80051bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ee:	f001 fda5 	bl	8006c3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e062      	b.n	80051bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fe9d 	bl	8005e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005106:	2301      	movs	r3, #1
 8005108:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800510a:	f001 fd97 	bl	8006c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800510e:	f000 fc0d 	bl	800592c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005112:	f001 fd61 	bl	8006bd8 <vPortEnterCritical>
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800511c:	b25b      	sxtb	r3, r3
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005122:	d103      	bne.n	800512c <xQueueReceive+0x128>
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005132:	b25b      	sxtb	r3, r3
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005138:	d103      	bne.n	8005142 <xQueueReceive+0x13e>
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005142:	f001 fd7b 	bl	8006c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005146:	1d3a      	adds	r2, r7, #4
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fe8c 	bl	8005e6c <xTaskCheckForTimeOut>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d123      	bne.n	80051a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800515a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800515c:	f000 f916 	bl	800538c <prvIsQueueEmpty>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	3324      	adds	r3, #36	@ 0x24
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fdb0 	bl	8005cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005176:	f000 f8b7 	bl	80052e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800517a:	f000 fbe5 	bl	8005948 <xTaskResumeAll>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d189      	bne.n	8005098 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005184:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <xQueueReceive+0x1c0>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	e780      	b.n	8005098 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005198:	f000 f8a6 	bl	80052e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800519c:	f000 fbd4 	bl	8005948 <xTaskResumeAll>
 80051a0:	e77a      	b.n	8005098 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a4:	f000 f8a0 	bl	80052e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051a8:	f000 fbce 	bl	8005948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051ae:	f000 f8ed 	bl	800538c <prvIsQueueEmpty>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f43f af6f 	beq.w	8005098 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3730      	adds	r7, #48	@ 0x30
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d14d      	bne.n	800528a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 ff9e 	bl	8006134 <xTaskPriorityDisinherit>
 80051f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	e043      	b.n	800528a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d119      	bne.n	800523c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6858      	ldr	r0, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	f002 f80e 	bl	8007234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	d32b      	bcc.n	800528a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	e026      	b.n	800528a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68d8      	ldr	r0, [r3, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	461a      	mov	r2, r3
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	f001 fff4 	bl	8007234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	425b      	negs	r3, r3
 8005256:	441a      	add	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d207      	bcs.n	8005278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	425b      	negs	r3, r3
 8005272:	441a      	add	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d105      	bne.n	800528a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3b01      	subs	r3, #1
 8005288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005292:	697b      	ldr	r3, [r7, #20]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d018      	beq.n	80052e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	441a      	add	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d303      	bcc.n	80052d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	461a      	mov	r2, r3
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f001 ffaa 	bl	8007234 <memcpy>
	}
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052f0:	f001 fc72 	bl	8006bd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fc:	e011      	b.n	8005322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d012      	beq.n	800532c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3324      	adds	r3, #36	@ 0x24
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fd34 	bl	8005d78 <xTaskRemoveFromEventList>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005316:	f000 fe0d 	bl	8005f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	3b01      	subs	r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	dce9      	bgt.n	80052fe <prvUnlockQueue+0x16>
 800532a:	e000      	b.n	800532e <prvUnlockQueue+0x46>
					break;
 800532c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	22ff      	movs	r2, #255	@ 0xff
 8005332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005336:	f001 fc81 	bl	8006c3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800533a:	f001 fc4d 	bl	8006bd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005346:	e011      	b.n	800536c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d012      	beq.n	8005376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3310      	adds	r3, #16
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fd0f 	bl	8005d78 <xTaskRemoveFromEventList>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005360:	f000 fde8 	bl	8005f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005364:	7bbb      	ldrb	r3, [r7, #14]
 8005366:	3b01      	subs	r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800536c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dce9      	bgt.n	8005348 <prvUnlockQueue+0x60>
 8005374:	e000      	b.n	8005378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	22ff      	movs	r2, #255	@ 0xff
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005380:	f001 fc5c 	bl	8006c3c <vPortExitCritical>
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005394:	f001 fc20 	bl	8006bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e001      	b.n	80053aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053aa:	f001 fc47 	bl	8006c3c <vPortExitCritical>

	return xReturn;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053c0:	f001 fc0a 	bl	8006bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d102      	bne.n	80053d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e001      	b.n	80053da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053da:	f001 fc2f 	bl	8006c3c <vPortExitCritical>

	return xReturn;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e014      	b.n	8005422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005438 <vQueueAddToRegistry+0x50>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005404:	490c      	ldr	r1, [pc, #48]	@ (8005438 <vQueueAddToRegistry+0x50>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <vQueueAddToRegistry+0x50>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800541a:	e006      	b.n	800542a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b07      	cmp	r3, #7
 8005426:	d9e7      	bls.n	80053f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000c38 	.word	0x20000c38

0800543c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800544c:	f001 fbc4 	bl	8006bd8 <vPortEnterCritical>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800545c:	d103      	bne.n	8005466 <vQueueWaitForMessageRestricted+0x2a>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005472:	d103      	bne.n	800547c <vQueueWaitForMessageRestricted+0x40>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800547c:	f001 fbde 	bl	8006c3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3324      	adds	r3, #36	@ 0x24
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fc45 	bl	8005d20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7ff ff26 	bl	80052e8 <prvUnlockQueue>
	}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	@ 0x38
 80054a8:	af04      	add	r7, sp, #16
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	623b      	str	r3, [r7, #32]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61fb      	str	r3, [r7, #28]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ee:	235c      	movs	r3, #92	@ 0x5c
 80054f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80054f6:	d00b      	beq.n	8005510 <xTaskCreateStatic+0x6c>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
}
 800550a:	bf00      	nop
 800550c:	bf00      	nop
 800550e:	e7fd      	b.n	800550c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005510:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01e      	beq.n	8005556 <xTaskCreateStatic+0xb2>
 8005518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01b      	beq.n	8005556 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005530:	2300      	movs	r3, #0
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f850 	bl	80055ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800554e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005550:	f000 f8de 	bl	8005710 <prvAddNewTaskToReadyList>
 8005554:	e001      	b.n	800555a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800555a:	697b      	ldr	r3, [r7, #20]
	}
 800555c:	4618      	mov	r0, r3
 800555e:	3728      	adds	r7, #40	@ 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	@ 0x30
 8005568:	af04      	add	r7, sp, #16
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fc4f 	bl	8006e1c <pvPortMalloc>
 800557e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00e      	beq.n	80055a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005586:	205c      	movs	r0, #92	@ 0x5c
 8005588:	f001 fc48 	bl	8006e1c <pvPortMalloc>
 800558c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	631a      	str	r2, [r3, #48]	@ 0x30
 800559a:	e005      	b.n	80055a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800559c:	6978      	ldr	r0, [r7, #20]
 800559e:	f001 fd05 	bl	8006fac <vPortFree>
 80055a2:	e001      	b.n	80055a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	2300      	movs	r3, #0
 80055ba:	9303      	str	r3, [sp, #12]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	9302      	str	r3, [sp, #8]
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f80e 	bl	80055ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d2:	69f8      	ldr	r0, [r7, #28]
 80055d4:	f000 f89c 	bl	8005710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055d8:	2301      	movs	r3, #1
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e002      	b.n	80055e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055e4:	69bb      	ldr	r3, [r7, #24]
	}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	461a      	mov	r2, r3
 8005606:	21a5      	movs	r1, #165	@ 0xa5
 8005608:	f001 fde8 	bl	80071dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005616:	3b01      	subs	r3, #1
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	617b      	str	r3, [r7, #20]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01f      	beq.n	800568e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e012      	b.n	800567a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	7819      	ldrb	r1, [r3, #0]
 800565c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	3334      	adds	r3, #52	@ 0x34
 8005664:	460a      	mov	r2, r1
 8005666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d9e9      	bls.n	8005654 <prvInitialiseNewTask+0x66>
 8005680:	e000      	b.n	8005684 <prvInitialiseNewTask+0x96>
			{
				break;
 8005682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800568c:	e003      	b.n	8005696 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	2b37      	cmp	r3, #55	@ 0x37
 800569a:	d901      	bls.n	80056a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800569c:	2337      	movs	r3, #55	@ 0x37
 800569e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ae:	2200      	movs	r2, #0
 80056b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	3304      	adds	r3, #4
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff f968 	bl	800498c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	3318      	adds	r3, #24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff f963 	bl	800498c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	2200      	movs	r2, #0
 80056e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	68f9      	ldr	r1, [r7, #12]
 80056ee:	69b8      	ldr	r0, [r7, #24]
 80056f0:	f001 f93e 	bl	8006970 <pxPortInitialiseStack>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005706:	bf00      	nop
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005718:	f001 fa5e 	bl	8006bd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800571c:	4b2d      	ldr	r3, [pc, #180]	@ (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a2c      	ldr	r2, [pc, #176]	@ (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005726:	4b2c      	ldr	r3, [pc, #176]	@ (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572e:	4a2a      	ldr	r2, [pc, #168]	@ (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005734:	4b27      	ldr	r3, [pc, #156]	@ (80057d4 <prvAddNewTaskToReadyList+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d110      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800573c:	f000 fc1e 	bl	8005f7c <prvInitialiseTaskLists>
 8005740:	e00d      	b.n	800575e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005742:	4b26      	ldr	r3, [pc, #152]	@ (80057dc <prvAddNewTaskToReadyList+0xcc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800574a:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d802      	bhi.n	800575e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005758:	4a1f      	ldr	r2, [pc, #124]	@ (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575e:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 8005766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005768:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <prvAddNewTaskToReadyList+0xd0>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005774:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d903      	bls.n	8005784 <prvAddNewTaskToReadyList+0x74>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <prvAddNewTaskToReadyList+0xd4>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a15      	ldr	r2, [pc, #84]	@ (80057e8 <prvAddNewTaskToReadyList+0xd8>)
 8005792:	441a      	add	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7ff f903 	bl	80049a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057a0:	f001 fa4c 	bl	8006c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a4:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <prvAddNewTaskToReadyList+0xcc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <prvAddNewTaskToReadyList+0xc8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d207      	bcs.n	80057ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ba:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <prvAddNewTaskToReadyList+0xdc>)
 80057bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000114c 	.word	0x2000114c
 80057d8:	20000c78 	.word	0x20000c78
 80057dc:	20001158 	.word	0x20001158
 80057e0:	20001168 	.word	0x20001168
 80057e4:	20001154 	.word	0x20001154
 80057e8:	20000c7c 	.word	0x20000c7c
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <vTaskDelay+0x64>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <vTaskDelay+0x32>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005822:	f000 f883 	bl	800592c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005826:	2100      	movs	r1, #0
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fcf3 	bl	8006214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800582e:	f000 f88b 	bl	8005948 <xTaskResumeAll>
 8005832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d107      	bne.n	800584a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800583a:	4b07      	ldr	r3, [pc, #28]	@ (8005858 <vTaskDelay+0x68>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20001174 	.word	0x20001174
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800586a:	463a      	mov	r2, r7
 800586c:	1d39      	adds	r1, r7, #4
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff f836 	bl	80048e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	9202      	str	r2, [sp, #8]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	2300      	movs	r3, #0
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2300      	movs	r3, #0
 8005888:	460a      	mov	r2, r1
 800588a:	4922      	ldr	r1, [pc, #136]	@ (8005914 <vTaskStartScheduler+0xb8>)
 800588c:	4822      	ldr	r0, [pc, #136]	@ (8005918 <vTaskStartScheduler+0xbc>)
 800588e:	f7ff fe09 	bl	80054a4 <xTaskCreateStatic>
 8005892:	4603      	mov	r3, r0
 8005894:	4a21      	ldr	r2, [pc, #132]	@ (800591c <vTaskStartScheduler+0xc0>)
 8005896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005898:	4b20      	ldr	r3, [pc, #128]	@ (800591c <vTaskStartScheduler+0xc0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e001      	b.n	80058aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d102      	bne.n	80058b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058b0:	f000 fd04 	bl	80062bc <xTimerCreateTimerTask>
 80058b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d116      	bne.n	80058ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d0:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <vTaskStartScheduler+0xc4>)
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058d8:	4b12      	ldr	r3, [pc, #72]	@ (8005924 <vTaskStartScheduler+0xc8>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058de:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <vTaskStartScheduler+0xcc>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058e4:	f001 f8d4 	bl	8006a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058e8:	e00f      	b.n	800590a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058f0:	d10b      	bne.n	800590a <vTaskStartScheduler+0xae>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <vTaskStartScheduler+0xaa>
}
 800590a:	bf00      	nop
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	08007274 	.word	0x08007274
 8005918:	08005f4d 	.word	0x08005f4d
 800591c:	20001170 	.word	0x20001170
 8005920:	2000116c 	.word	0x2000116c
 8005924:	20001158 	.word	0x20001158
 8005928:	20001150 	.word	0x20001150

0800592c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005930:	4b04      	ldr	r3, [pc, #16]	@ (8005944 <vTaskSuspendAll+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a03      	ldr	r2, [pc, #12]	@ (8005944 <vTaskSuspendAll+0x18>)
 8005938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20001174 	.word	0x20001174

08005948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005956:	4b42      	ldr	r3, [pc, #264]	@ (8005a60 <xTaskResumeAll+0x118>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <xTaskResumeAll+0x2e>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	603b      	str	r3, [r7, #0]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005976:	f001 f92f 	bl	8006bd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <xTaskResumeAll+0x118>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a37      	ldr	r2, [pc, #220]	@ (8005a60 <xTaskResumeAll+0x118>)
 8005982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005984:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <xTaskResumeAll+0x118>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d162      	bne.n	8005a52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800598c:	4b35      	ldr	r3, [pc, #212]	@ (8005a64 <xTaskResumeAll+0x11c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05e      	beq.n	8005a52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005994:	e02f      	b.n	80059f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005996:	4b34      	ldr	r3, [pc, #208]	@ (8005a68 <xTaskResumeAll+0x120>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f85c 	bl	8004a60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f857 	bl	8004a60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a6c <xTaskResumeAll+0x124>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d903      	bls.n	80059c6 <xTaskResumeAll+0x7e>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <xTaskResumeAll+0x124>)
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <xTaskResumeAll+0x128>)
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3304      	adds	r3, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f7fe ffe2 	bl	80049a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <xTaskResumeAll+0x12c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80059f0:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <xTaskResumeAll+0x130>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <xTaskResumeAll+0x120>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1cb      	bne.n	8005996 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a04:	f000 fb58 	bl	80060b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a08:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <xTaskResumeAll+0x134>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a14:	f000 f846 	bl	8005aa4 <xTaskIncrementTick>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a1e:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <xTaskResumeAll+0x130>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f1      	bne.n	8005a14 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005a30:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <xTaskResumeAll+0x134>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <xTaskResumeAll+0x130>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a42:	4b0f      	ldr	r3, [pc, #60]	@ (8005a80 <xTaskResumeAll+0x138>)
 8005a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a52:	f001 f8f3 	bl	8006c3c <vPortExitCritical>

	return xAlreadyYielded;
 8005a56:	68bb      	ldr	r3, [r7, #8]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20001174 	.word	0x20001174
 8005a64:	2000114c 	.word	0x2000114c
 8005a68:	2000110c 	.word	0x2000110c
 8005a6c:	20001154 	.word	0x20001154
 8005a70:	20000c7c 	.word	0x20000c7c
 8005a74:	20000c78 	.word	0x20000c78
 8005a78:	20001160 	.word	0x20001160
 8005a7c:	2000115c 	.word	0x2000115c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a8a:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <xTaskGetTickCount+0x1c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a90:	687b      	ldr	r3, [r7, #4]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20001150 	.word	0x20001150

08005aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b4f      	ldr	r3, [pc, #316]	@ (8005bec <xTaskIncrementTick+0x148>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 808a 	bne.w	8005bcc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf0 <xTaskIncrementTick+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8005bf0 <xTaskIncrementTick+0x14c>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d121      	bne.n	8005b10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005acc:	4b49      	ldr	r3, [pc, #292]	@ (8005bf4 <xTaskIncrementTick+0x150>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	603b      	str	r3, [r7, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <xTaskIncrementTick+0x46>
 8005aee:	4b41      	ldr	r3, [pc, #260]	@ (8005bf4 <xTaskIncrementTick+0x150>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	4b40      	ldr	r3, [pc, #256]	@ (8005bf8 <xTaskIncrementTick+0x154>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf4 <xTaskIncrementTick+0x150>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf8 <xTaskIncrementTick+0x154>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	4b3e      	ldr	r3, [pc, #248]	@ (8005bfc <xTaskIncrementTick+0x158>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	4a3c      	ldr	r2, [pc, #240]	@ (8005bfc <xTaskIncrementTick+0x158>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	f000 fad4 	bl	80060b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b10:	4b3b      	ldr	r3, [pc, #236]	@ (8005c00 <xTaskIncrementTick+0x15c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d349      	bcc.n	8005bae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1a:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <xTaskIncrementTick+0x150>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b24:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <xTaskIncrementTick+0x15c>)
 8005b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b2a:	601a      	str	r2, [r3, #0]
					break;
 8005b2c:	e03f      	b.n	8005bae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2e:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <xTaskIncrementTick+0x150>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d203      	bcs.n	8005b4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b46:	4a2e      	ldr	r2, [pc, #184]	@ (8005c00 <xTaskIncrementTick+0x15c>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b4c:	e02f      	b.n	8005bae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe ff84 	bl	8004a60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	3318      	adds	r3, #24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe ff7b 	bl	8004a60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6e:	4b25      	ldr	r3, [pc, #148]	@ (8005c04 <xTaskIncrementTick+0x160>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <xTaskIncrementTick+0xda>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <xTaskIncrementTick+0x160>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <xTaskIncrementTick+0x164>)
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe ff06 	bl	80049a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <xTaskIncrementTick+0x168>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d3b8      	bcc.n	8005b1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bac:	e7b5      	b.n	8005b1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bae:	4b17      	ldr	r3, [pc, #92]	@ (8005c0c <xTaskIncrementTick+0x168>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb4:	4914      	ldr	r1, [pc, #80]	@ (8005c08 <xTaskIncrementTick+0x164>)
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d907      	bls.n	8005bd6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e004      	b.n	8005bd6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <xTaskIncrementTick+0x16c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c10 <xTaskIncrementTick+0x16c>)
 8005bd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <xTaskIncrementTick+0x170>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20001174 	.word	0x20001174
 8005bf0:	20001150 	.word	0x20001150
 8005bf4:	20001104 	.word	0x20001104
 8005bf8:	20001108 	.word	0x20001108
 8005bfc:	20001164 	.word	0x20001164
 8005c00:	2000116c 	.word	0x2000116c
 8005c04:	20001154 	.word	0x20001154
 8005c08:	20000c7c 	.word	0x20000c7c
 8005c0c:	20000c78 	.word	0x20000c78
 8005c10:	2000115c 	.word	0x2000115c
 8005c14:	20001160 	.word	0x20001160

08005c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c1e:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <vTaskSwitchContext+0xa8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c26:	4b27      	ldr	r3, [pc, #156]	@ (8005cc4 <vTaskSwitchContext+0xac>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c2c:	e042      	b.n	8005cb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	@ (8005cc4 <vTaskSwitchContext+0xac>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b24      	ldr	r3, [pc, #144]	@ (8005cc8 <vTaskSwitchContext+0xb0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e011      	b.n	8005c60 <vTaskSwitchContext+0x48>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <vTaskSwitchContext+0x42>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <vTaskSwitchContext+0x3e>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	491a      	ldr	r1, [pc, #104]	@ (8005ccc <vTaskSwitchContext+0xb4>)
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0e3      	beq.n	8005c3c <vTaskSwitchContext+0x24>
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <vTaskSwitchContext+0xb4>)
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	3308      	adds	r3, #8
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d104      	bne.n	8005ca4 <vTaskSwitchContext+0x8c>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	4a09      	ldr	r2, [pc, #36]	@ (8005cd0 <vTaskSwitchContext+0xb8>)
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4a06      	ldr	r2, [pc, #24]	@ (8005cc8 <vTaskSwitchContext+0xb0>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6013      	str	r3, [r2, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20001174 	.word	0x20001174
 8005cc4:	20001160 	.word	0x20001160
 8005cc8:	20001154 	.word	0x20001154
 8005ccc:	20000c7c 	.word	0x20000c7c
 8005cd0:	20000c78 	.word	0x20000c78

08005cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cfc:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <vTaskPlaceOnEventList+0x48>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3318      	adds	r3, #24
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fe fe72 	bl	80049ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	6838      	ldr	r0, [r7, #0]
 8005d0e:	f000 fa81 	bl	8006214 <prvAddCurrentTaskToDelayedList>
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000c78 	.word	0x20000c78

08005d20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	617b      	str	r3, [r7, #20]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4619      	mov	r1, r3
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7fe fe27 	bl	80049a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f000 fa54 	bl	8006214 <prvAddCurrentTaskToDelayedList>
	}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000c78 	.word	0x20000c78

08005d78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60fb      	str	r3, [r7, #12]
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3318      	adds	r3, #24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fe58 	bl	8004a60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <xTaskRemoveFromEventList+0xb0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11d      	bne.n	8005df4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fe4f 	bl	8004a60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <xTaskRemoveFromEventList+0xb4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d903      	bls.n	8005dd6 <xTaskRemoveFromEventList+0x5e>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <xTaskRemoveFromEventList+0xb4>)
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <xTaskRemoveFromEventList+0xb8>)
 8005de4:	441a      	add	r2, r3
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fe fdda 	bl	80049a6 <vListInsertEnd>
 8005df2:	e005      	b.n	8005e00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	3318      	adds	r3, #24
 8005df8:	4619      	mov	r1, r3
 8005dfa:	480e      	ldr	r0, [pc, #56]	@ (8005e34 <xTaskRemoveFromEventList+0xbc>)
 8005dfc:	f7fe fdd3 	bl	80049a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e04:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <xTaskRemoveFromEventList+0xc0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d905      	bls.n	8005e1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <xTaskRemoveFromEventList+0xc4>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e001      	b.n	8005e1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20001174 	.word	0x20001174
 8005e2c:	20001154 	.word	0x20001154
 8005e30:	20000c7c 	.word	0x20000c7c
 8005e34:	2000110c 	.word	0x2000110c
 8005e38:	20000c78 	.word	0x20000c78
 8005e3c:	20001160 	.word	0x20001160

08005e40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e48:	4b06      	ldr	r3, [pc, #24]	@ (8005e64 <vTaskInternalSetTimeOutState+0x24>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <vTaskInternalSetTimeOutState+0x28>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	605a      	str	r2, [r3, #4]
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20001164 	.word	0x20001164
 8005e68:	20001150 	.word	0x20001150

08005e6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	613b      	str	r3, [r7, #16]
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	e7fd      	b.n	8005e90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005eb2:	f000 fe91 	bl	8006bd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f2c <xTaskCheckForTimeOut+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ece:	d102      	bne.n	8005ed6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e023      	b.n	8005f1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b15      	ldr	r3, [pc, #84]	@ (8005f30 <xTaskCheckForTimeOut+0xc4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d007      	beq.n	8005ef2 <xTaskCheckForTimeOut+0x86>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e015      	b.n	8005f1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d20b      	bcs.n	8005f14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff99 	bl	8005e40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	e004      	b.n	8005f1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f1e:	f000 fe8d 	bl	8006c3c <vPortExitCritical>

	return xReturn;
 8005f22:	69fb      	ldr	r3, [r7, #28]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20001150 	.word	0x20001150
 8005f30:	20001164 	.word	0x20001164

08005f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f38:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <vTaskMissedYield+0x14>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20001160 	.word	0x20001160

08005f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f54:	f000 f852 	bl	8005ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f58:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <prvIdleTask+0x28>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d9f9      	bls.n	8005f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <prvIdleTask+0x2c>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f70:	e7f0      	b.n	8005f54 <prvIdleTask+0x8>
 8005f72:	bf00      	nop
 8005f74:	20000c7c 	.word	0x20000c7c
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f82:	2300      	movs	r3, #0
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	e00c      	b.n	8005fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a12      	ldr	r2, [pc, #72]	@ (8005fdc <prvInitialiseTaskLists+0x60>)
 8005f94:	4413      	add	r3, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fcd8 	bl	800494c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b37      	cmp	r3, #55	@ 0x37
 8005fa6:	d9ef      	bls.n	8005f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fa8:	480d      	ldr	r0, [pc, #52]	@ (8005fe0 <prvInitialiseTaskLists+0x64>)
 8005faa:	f7fe fccf 	bl	800494c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fae:	480d      	ldr	r0, [pc, #52]	@ (8005fe4 <prvInitialiseTaskLists+0x68>)
 8005fb0:	f7fe fccc 	bl	800494c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fb4:	480c      	ldr	r0, [pc, #48]	@ (8005fe8 <prvInitialiseTaskLists+0x6c>)
 8005fb6:	f7fe fcc9 	bl	800494c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fba:	480c      	ldr	r0, [pc, #48]	@ (8005fec <prvInitialiseTaskLists+0x70>)
 8005fbc:	f7fe fcc6 	bl	800494c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fc0:	480b      	ldr	r0, [pc, #44]	@ (8005ff0 <prvInitialiseTaskLists+0x74>)
 8005fc2:	f7fe fcc3 	bl	800494c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff4 <prvInitialiseTaskLists+0x78>)
 8005fc8:	4a05      	ldr	r2, [pc, #20]	@ (8005fe0 <prvInitialiseTaskLists+0x64>)
 8005fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <prvInitialiseTaskLists+0x7c>)
 8005fce:	4a05      	ldr	r2, [pc, #20]	@ (8005fe4 <prvInitialiseTaskLists+0x68>)
 8005fd0:	601a      	str	r2, [r3, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000c7c 	.word	0x20000c7c
 8005fe0:	200010dc 	.word	0x200010dc
 8005fe4:	200010f0 	.word	0x200010f0
 8005fe8:	2000110c 	.word	0x2000110c
 8005fec:	20001120 	.word	0x20001120
 8005ff0:	20001138 	.word	0x20001138
 8005ff4:	20001104 	.word	0x20001104
 8005ff8:	20001108 	.word	0x20001108

08005ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006002:	e019      	b.n	8006038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006004:	f000 fde8 	bl	8006bd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <prvCheckTasksWaitingTermination+0x50>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3304      	adds	r3, #4
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fd23 	bl	8004a60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <prvCheckTasksWaitingTermination+0x54>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	4a0b      	ldr	r2, [pc, #44]	@ (8006050 <prvCheckTasksWaitingTermination+0x54>)
 8006022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006024:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <prvCheckTasksWaitingTermination+0x58>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	4a0a      	ldr	r2, [pc, #40]	@ (8006054 <prvCheckTasksWaitingTermination+0x58>)
 800602c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800602e:	f000 fe05 	bl	8006c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f810 	bl	8006058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006038:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <prvCheckTasksWaitingTermination+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e1      	bne.n	8006004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20001120 	.word	0x20001120
 8006050:	2000114c 	.word	0x2000114c
 8006054:	20001134 	.word	0x20001134

08006058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ff9c 	bl	8006fac <vPortFree>
				vPortFree( pxTCB );
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 ff99 	bl	8006fac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800607a:	e019      	b.n	80060b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006082:	2b01      	cmp	r3, #1
 8006084:	d103      	bne.n	800608e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 ff90 	bl	8006fac <vPortFree>
	}
 800608c:	e010      	b.n	80060b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006094:	2b02      	cmp	r3, #2
 8006096:	d00b      	beq.n	80060b0 <prvDeleteTCB+0x58>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <prvDeleteTCB+0x54>
	}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060be:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <prvResetNextTaskUnblockTime+0x38>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	@ (80060f4 <prvResetNextTaskUnblockTime+0x3c>)
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060d0:	e008      	b.n	80060e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <prvResetNextTaskUnblockTime+0x38>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a04      	ldr	r2, [pc, #16]	@ (80060f4 <prvResetNextTaskUnblockTime+0x3c>)
 80060e2:	6013      	str	r3, [r2, #0]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20001104 	.word	0x20001104
 80060f4:	2000116c 	.word	0x2000116c

080060f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060fe:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <xTaskGetSchedulerState+0x34>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006106:	2301      	movs	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	e008      	b.n	800611e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610c:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <xTaskGetSchedulerState+0x38>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006114:	2302      	movs	r3, #2
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e001      	b.n	800611e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800611e:	687b      	ldr	r3, [r7, #4]
	}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20001158 	.word	0x20001158
 8006130:	20001174 	.word	0x20001174

08006134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d058      	beq.n	80061fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <xTaskPriorityDisinherit+0xd4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	429a      	cmp	r2, r3
 8006152:	d00b      	beq.n	800616c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	60fb      	str	r3, [r7, #12]
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60bb      	str	r3, [r7, #8]
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	e7fd      	b.n	8006188 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d02c      	beq.n	80061fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d128      	bne.n	80061fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fc56 	bl	8004a60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <xTaskPriorityDisinherit+0xd8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d903      	bls.n	80061dc <xTaskPriorityDisinherit+0xa8>
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	4a0c      	ldr	r2, [pc, #48]	@ (800620c <xTaskPriorityDisinherit+0xd8>)
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4a09      	ldr	r2, [pc, #36]	@ (8006210 <xTaskPriorityDisinherit+0xdc>)
 80061ea:	441a      	add	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f7fe fbd7 	bl	80049a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061fc:	697b      	ldr	r3, [r7, #20]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000c78 	.word	0x20000c78
 800620c:	20001154 	.word	0x20001154
 8006210:	20000c7c 	.word	0x20000c7c

08006214 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006224:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fc18 	bl	8004a60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006236:	d10a      	bne.n	800624e <prvAddCurrentTaskToDelayedList+0x3a>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4819      	ldr	r0, [pc, #100]	@ (80062ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006248:	f7fe fbad 	bl	80049a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624c:	e026      	b.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006256:	4b14      	ldr	r3, [pc, #80]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	429a      	cmp	r2, r3
 8006264:	d209      	bcs.n	800627a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fbbb 	bl	80049ee <vListInsert>
}
 8006278:	e010      	b.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627a:	4b0e      	ldr	r3, [pc, #56]	@ (80062b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe fbb1 	bl	80049ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628c:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d202      	bcs.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006296:	4a08      	ldr	r2, [pc, #32]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6013      	str	r3, [r2, #0]
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20001150 	.word	0x20001150
 80062a8:	20000c78 	.word	0x20000c78
 80062ac:	20001138 	.word	0x20001138
 80062b0:	20001108 	.word	0x20001108
 80062b4:	20001104 	.word	0x20001104
 80062b8:	2000116c 	.word	0x2000116c

080062bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062c6:	f000 fb13 	bl	80068f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006340 <xTimerCreateTimerTask+0x84>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d021      	beq.n	8006316 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062da:	1d3a      	adds	r2, r7, #4
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	f107 030c 	add.w	r3, r7, #12
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fb17 	bl	8004918 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	9202      	str	r2, [sp, #8]
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	2302      	movs	r3, #2
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	460a      	mov	r2, r1
 80062fc:	4911      	ldr	r1, [pc, #68]	@ (8006344 <xTimerCreateTimerTask+0x88>)
 80062fe:	4812      	ldr	r0, [pc, #72]	@ (8006348 <xTimerCreateTimerTask+0x8c>)
 8006300:	f7ff f8d0 	bl	80054a4 <xTaskCreateStatic>
 8006304:	4603      	mov	r3, r0
 8006306:	4a11      	ldr	r2, [pc, #68]	@ (800634c <xTimerCreateTimerTask+0x90>)
 8006308:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800630a:	4b10      	ldr	r3, [pc, #64]	@ (800634c <xTimerCreateTimerTask+0x90>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	613b      	str	r3, [r7, #16]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006334:	697b      	ldr	r3, [r7, #20]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200011a8 	.word	0x200011a8
 8006344:	0800727c 	.word	0x0800727c
 8006348:	08006489 	.word	0x08006489
 800634c:	200011ac 	.word	0x200011ac

08006350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xTimerGenericCommand+0x30>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006380:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <xTimerGenericCommand+0x98>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02a      	beq.n	80063de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b05      	cmp	r3, #5
 8006398:	dc18      	bgt.n	80063cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800639a:	f7ff fead 	bl	80060f8 <xTaskGetSchedulerState>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d109      	bne.n	80063b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	f107 0110 	add.w	r1, r7, #16
 80063ac:	2300      	movs	r3, #0
 80063ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b0:	f7fe fc8a 	bl	8004cc8 <xQueueGenericSend>
 80063b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80063b6:	e012      	b.n	80063de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	f107 0110 	add.w	r1, r7, #16
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	f7fe fc80 	bl	8004cc8 <xQueueGenericSend>
 80063c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80063ca:	e008      	b.n	80063de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	f107 0110 	add.w	r1, r7, #16
 80063d4:	2300      	movs	r3, #0
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	f7fe fd78 	bl	8004ecc <xQueueGenericSendFromISR>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	@ 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200011a8 	.word	0x200011a8

080063ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <prvProcessExpiredTimer+0x98>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fb2b 	bl	8004a60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d023      	beq.n	8006460 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	6978      	ldr	r0, [r7, #20]
 8006426:	f000 f8d5 	bl	80065d4 <prvInsertTimerInActiveList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d020      	beq.n	8006472 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006430:	2300      	movs	r3, #0
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	2100      	movs	r1, #0
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	f7ff ff88 	bl	8006350 <xTimerGenericCommand>
 8006440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d114      	bne.n	8006472 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	6978      	ldr	r0, [r7, #20]
 8006478:	4798      	blx	r3
}
 800647a:	bf00      	nop
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200011a0 	.word	0x200011a0

08006488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006490:	f107 0308 	add.w	r3, r7, #8
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f859 	bl	800654c <prvGetNextExpireTime>
 800649a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f805 	bl	80064b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064a6:	f000 f8d7 	bl	8006658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064aa:	bf00      	nop
 80064ac:	e7f0      	b.n	8006490 <prvTimerTask+0x8>
	...

080064b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064ba:	f7ff fa37 	bl	800592c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f866 	bl	8006594 <prvSampleTimeNow>
 80064c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d130      	bne.n	8006532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <prvProcessTimerOrBlockTask+0x3c>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d806      	bhi.n	80064ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064de:	f7ff fa33 	bl	8005948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff81 	bl	80063ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ea:	e024      	b.n	8006536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064f2:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <prvProcessTimerOrBlockTask+0x90>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <prvProcessTimerOrBlockTask+0x50>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <prvProcessTimerOrBlockTask+0x52>
 8006500:	2300      	movs	r3, #0
 8006502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <prvProcessTimerOrBlockTask+0x94>)
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	f7fe ff93 	bl	800543c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006516:	f7ff fa17 	bl	8005948 <xTaskResumeAll>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006520:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <prvProcessTimerOrBlockTask+0x98>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
}
 8006530:	e001      	b.n	8006536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006532:	f7ff fa09 	bl	8005948 <xTaskResumeAll>
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200011a4 	.word	0x200011a4
 8006544:	200011a8 	.word	0x200011a8
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006554:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <prvGetNextExpireTime+0x44>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <prvGetNextExpireTime+0x16>
 800655e:	2201      	movs	r2, #1
 8006560:	e000      	b.n	8006564 <prvGetNextExpireTime+0x18>
 8006562:	2200      	movs	r2, #0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006570:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <prvGetNextExpireTime+0x44>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e001      	b.n	8006580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	200011a0 	.word	0x200011a0

08006594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800659c:	f7ff fa72 	bl	8005a84 <xTaskGetTickCount>
 80065a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <prvSampleTimeNow+0x3c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d205      	bcs.n	80065b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065ac:	f000 f93a 	bl	8006824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e002      	b.n	80065be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065be:	4a04      	ldr	r2, [pc, #16]	@ (80065d0 <prvSampleTimeNow+0x3c>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065c4:	68fb      	ldr	r3, [r7, #12]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200011b0 	.word	0x200011b0

080065d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d812      	bhi.n	8006620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d302      	bcc.n	800660e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	e01b      	b.n	8006646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800660e:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <prvInsertTimerInActiveList+0x7c>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe f9e8 	bl	80049ee <vListInsert>
 800661e:	e012      	b.n	8006646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d206      	bcs.n	8006636 <prvInsertTimerInActiveList+0x62>
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e007      	b.n	8006646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <prvInsertTimerInActiveList+0x80>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe f9d4 	bl	80049ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006646:	697b      	ldr	r3, [r7, #20]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200011a4 	.word	0x200011a4
 8006654:	200011a0 	.word	0x200011a0

08006658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	@ 0x38
 800665c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665e:	e0ce      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	da19      	bge.n	800669a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006666:	1d3b      	adds	r3, r7, #4
 8006668:	3304      	adds	r3, #4
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	61fb      	str	r3, [r7, #28]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006690:	6850      	ldr	r0, [r2, #4]
 8006692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006694:	6892      	ldr	r2, [r2, #8]
 8006696:	4611      	mov	r1, r2
 8006698:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f2c0 80ae 	blt.w	80067fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	3304      	adds	r3, #4
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f9d4 	bl	8004a60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066b8:	463b      	mov	r3, r7
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ff6a 	bl	8006594 <prvSampleTimeNow>
 80066c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	f200 8097 	bhi.w	80067f8 <prvProcessReceivedCommands+0x1a0>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <prvProcessReceivedCommands+0x78>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	0800676f 	.word	0x0800676f
 80066e0:	08006783 	.word	0x08006783
 80066e4:	080067cf 	.word	0x080067cf
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	080066f9 	.word	0x080066f9
 80066f0:	0800676f 	.word	0x0800676f
 80066f4:	08006783 	.word	0x08006783
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	18d1      	adds	r1, r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006718:	f7ff ff5c 	bl	80065d4 <prvInsertTimerInActiveList>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d06c      	beq.n	80067fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d061      	beq.n	80067fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	441a      	add	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	2100      	movs	r1, #0
 8006748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674a:	f7ff fe01 	bl	8006350 <xTimerGenericCommand>
 800674e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d152      	bne.n	80067fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	61bb      	str	r3, [r7, #24]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006780:	e03d      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	18d1      	adds	r1, r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c8:	f7ff ff04 	bl	80065d4 <prvInsertTimerInActiveList>
					break;
 80067cc:	e017      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80067dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067de:	f000 fbe5 	bl	8006fac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067e2:	e00c      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067f6:	e002      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067f8:	bf00      	nop
 80067fa:	e000      	b.n	80067fe <prvProcessReceivedCommands+0x1a6>
					break;
 80067fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067fe:	4b08      	ldr	r3, [pc, #32]	@ (8006820 <prvProcessReceivedCommands+0x1c8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	1d39      	adds	r1, r7, #4
 8006804:	2200      	movs	r2, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fbfc 	bl	8005004 <xQueueReceive>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f47f af26 	bne.w	8006660 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3730      	adds	r7, #48	@ 0x30
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200011a8 	.word	0x200011a8

08006824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800682a:	e049      	b.n	80068c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b2e      	ldr	r3, [pc, #184]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b2c      	ldr	r3, [pc, #176]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f90b 	bl	8004a60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02f      	beq.n	80068c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90e      	bls.n	8006890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800687e:	4b1a      	ldr	r3, [pc, #104]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7fe f8b0 	bl	80049ee <vListInsert>
 800688e:	e017      	b.n	80068c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006890:	2300      	movs	r3, #0
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff fd58 	bl	8006350 <xTimerGenericCommand>
 80068a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	603b      	str	r3, [r7, #0]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1b0      	bne.n	800682c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068ca:	4b07      	ldr	r3, [pc, #28]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <prvSwitchTimerLists+0xc8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a04      	ldr	r2, [pc, #16]	@ (80068e8 <prvSwitchTimerLists+0xc4>)
 80068d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068d8:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <prvSwitchTimerLists+0xc8>)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	6013      	str	r3, [r2, #0]
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200011a0 	.word	0x200011a0
 80068ec:	200011a4 	.word	0x200011a4

080068f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068f6:	f000 f96f 	bl	8006bd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068fa:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <prvCheckForValidListAndQueue+0x60>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d120      	bne.n	8006944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006902:	4814      	ldr	r0, [pc, #80]	@ (8006954 <prvCheckForValidListAndQueue+0x64>)
 8006904:	f7fe f822 	bl	800494c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006908:	4813      	ldr	r0, [pc, #76]	@ (8006958 <prvCheckForValidListAndQueue+0x68>)
 800690a:	f7fe f81f 	bl	800494c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800690e:	4b13      	ldr	r3, [pc, #76]	@ (800695c <prvCheckForValidListAndQueue+0x6c>)
 8006910:	4a10      	ldr	r2, [pc, #64]	@ (8006954 <prvCheckForValidListAndQueue+0x64>)
 8006912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006914:	4b12      	ldr	r3, [pc, #72]	@ (8006960 <prvCheckForValidListAndQueue+0x70>)
 8006916:	4a10      	ldr	r2, [pc, #64]	@ (8006958 <prvCheckForValidListAndQueue+0x68>)
 8006918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800691a:	2300      	movs	r3, #0
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <prvCheckForValidListAndQueue+0x74>)
 8006920:	4a11      	ldr	r2, [pc, #68]	@ (8006968 <prvCheckForValidListAndQueue+0x78>)
 8006922:	2110      	movs	r1, #16
 8006924:	200a      	movs	r0, #10
 8006926:	f7fe f92f 	bl	8004b88 <xQueueGenericCreateStatic>
 800692a:	4603      	mov	r3, r0
 800692c:	4a08      	ldr	r2, [pc, #32]	@ (8006950 <prvCheckForValidListAndQueue+0x60>)
 800692e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006930:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <prvCheckForValidListAndQueue+0x60>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006938:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <prvCheckForValidListAndQueue+0x60>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	490b      	ldr	r1, [pc, #44]	@ (800696c <prvCheckForValidListAndQueue+0x7c>)
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fd52 	bl	80053e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006944:	f000 f97a 	bl	8006c3c <vPortExitCritical>
}
 8006948:	bf00      	nop
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200011a8 	.word	0x200011a8
 8006954:	20001178 	.word	0x20001178
 8006958:	2000118c 	.word	0x2000118c
 800695c:	200011a0 	.word	0x200011a0
 8006960:	200011a4 	.word	0x200011a4
 8006964:	20001254 	.word	0x20001254
 8006968:	200011b4 	.word	0x200011b4
 800696c:	08007284 	.word	0x08007284

08006970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3b04      	subs	r3, #4
 8006980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b04      	subs	r3, #4
 800699e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069a0:	4a0c      	ldr	r2, [pc, #48]	@ (80069d4 <pxPortInitialiseStack+0x64>)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b14      	subs	r3, #20
 80069aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3b04      	subs	r3, #4
 80069b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f06f 0202 	mvn.w	r2, #2
 80069be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3b20      	subs	r3, #32
 80069c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069c6:	68fb      	ldr	r3, [r7, #12]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	080069d9 	.word	0x080069d9

080069d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069e2:	4b13      	ldr	r3, [pc, #76]	@ (8006a30 <prvTaskExitError+0x58>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ea:	d00b      	beq.n	8006a04 <prvTaskExitError+0x2c>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60fb      	str	r3, [r7, #12]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <prvTaskExitError+0x28>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60bb      	str	r3, [r7, #8]
}
 8006a16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a18:	bf00      	nop
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0fc      	beq.n	8006a1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	2000000c 	.word	0x2000000c
	...

08006a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	20000c78 	.word	0x20000c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a68:	4808      	ldr	r0, [pc, #32]	@ (8006a8c <prvPortStartFirstTask+0x24>)
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f380 8808 	msr	MSP, r0
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8814 	msr	CONTROL, r0
 8006a7a:	b662      	cpsie	i
 8006a7c:	b661      	cpsie	f
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	df00      	svc	0
 8006a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed08 	.word	0xe000ed08

08006a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a96:	4b47      	ldr	r3, [pc, #284]	@ (8006bb4 <xPortStartScheduler+0x124>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a47      	ldr	r2, [pc, #284]	@ (8006bb8 <xPortStartScheduler+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10b      	bne.n	8006ab8 <xPortStartScheduler+0x28>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb4 <xPortStartScheduler+0x124>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bbc <xPortStartScheduler+0x12c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d10b      	bne.n	8006ada <xPortStartScheduler+0x4a>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60fb      	str	r3, [r7, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ada:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <xPortStartScheduler+0x130>)
 8006adc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	22ff      	movs	r2, #255	@ 0xff
 8006aea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	4b31      	ldr	r3, [pc, #196]	@ (8006bc4 <xPortStartScheduler+0x134>)
 8006b00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b02:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b04:	2207      	movs	r2, #7
 8006b06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b08:	e009      	b.n	8006b1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b26:	2b80      	cmp	r3, #128	@ 0x80
 8006b28:	d0ef      	beq.n	8006b0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b2a:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1c3 0307 	rsb	r3, r3, #7
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d00b      	beq.n	8006b4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60bb      	str	r3, [r7, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b58:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b60:	4a19      	ldr	r2, [pc, #100]	@ (8006bc8 <xPortStartScheduler+0x138>)
 8006b62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b6c:	4b17      	ldr	r3, [pc, #92]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a16      	ldr	r2, [pc, #88]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b78:	4b14      	ldr	r3, [pc, #80]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	@ (8006bcc <xPortStartScheduler+0x13c>)
 8006b7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b84:	f000 f8da 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b88:	4b11      	ldr	r3, [pc, #68]	@ (8006bd0 <xPortStartScheduler+0x140>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b8e:	f000 f8f9 	bl	8006d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b92:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <xPortStartScheduler+0x144>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd4 <xPortStartScheduler+0x144>)
 8006b98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b9e:	f7ff ff63 	bl	8006a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ba2:	f7ff f839 	bl	8005c18 <vTaskSwitchContext>
	prvTaskExitError();
 8006ba6:	f7ff ff17 	bl	80069d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	e000ed00 	.word	0xe000ed00
 8006bb8:	410fc271 	.word	0x410fc271
 8006bbc:	410fc270 	.word	0x410fc270
 8006bc0:	e000e400 	.word	0xe000e400
 8006bc4:	200012a4 	.word	0x200012a4
 8006bc8:	200012a8 	.word	0x200012a8
 8006bcc:	e000ed20 	.word	0xe000ed20
 8006bd0:	2000000c 	.word	0x2000000c
 8006bd4:	e000ef34 	.word	0xe000ef34

08006bd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bf2:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <vPortEnterCritical+0x5c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d110      	bne.n	8006c26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c04:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <vPortEnterCritical+0x60>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	603b      	str	r3, [r7, #0]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <vPortEnterCritical+0x4a>
	}
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000000c 	.word	0x2000000c
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <vPortExitCritical+0x26>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	607b      	str	r3, [r7, #4]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c62:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a08      	ldr	r2, [pc, #32]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c6c:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <vPortExitCritical+0x50>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <vPortExitCritical+0x44>
 8006c74:	2300      	movs	r3, #0
 8006c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f383 8811 	msr	BASEPRI, r3
}
 8006c7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	2000000c 	.word	0x2000000c

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7fe ffaa 	bl	8005c18 <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	20000c78 	.word	0x20000c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7fe fec7 	bl	8005aa4 <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <SysTick_Handler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	@ (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	@ (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a09      	ldr	r2, [pc, #36]	@ (8006d80 <vPortSetupTimerInterrupt+0x44>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	e000e014 	.word	0xe000e014

08006d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d94 <vPortEnableVFP+0x10>
 8006d88:	6801      	ldr	r1, [r0, #0]
 8006d8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d8e:	6001      	str	r1, [r0, #0]
 8006d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d92:	bf00      	nop
 8006d94:	e000ed88 	.word	0xe000ed88

08006d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d9e:	f3ef 8305 	mrs	r3, IPSR
 8006da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d915      	bls.n	8006dd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006daa:	4a18      	ldr	r2, [pc, #96]	@ (8006e0c <vPortValidateInterruptPriority+0x74>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006db4:	4b16      	ldr	r3, [pc, #88]	@ (8006e10 <vPortValidateInterruptPriority+0x78>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20b      	bcs.n	8006dd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	e7fd      	b.n	8006dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e14 <vPortValidateInterruptPriority+0x7c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <vPortValidateInterruptPriority+0x80>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d90b      	bls.n	8006dfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	603b      	str	r3, [r7, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <vPortValidateInterruptPriority+0x62>
	}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	e000e3f0 	.word	0xe000e3f0
 8006e10:	200012a4 	.word	0x200012a4
 8006e14:	e000ed0c 	.word	0xe000ed0c
 8006e18:	200012a8 	.word	0x200012a8

08006e1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	@ 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e28:	f7fe fd80 	bl	800592c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f98 <pvPortMalloc+0x17c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e34:	f000 f916 	bl	8007064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e38:	4b58      	ldr	r3, [pc, #352]	@ (8006f9c <pvPortMalloc+0x180>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 8090 	bne.w	8006f66 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01e      	beq.n	8006e8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d015      	beq.n	8006e8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	3308      	adds	r3, #8
 8006e66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00b      	beq.n	8006e8a <pvPortMalloc+0x6e>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	617b      	str	r3, [r7, #20]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d06a      	beq.n	8006f66 <pvPortMalloc+0x14a>
 8006e90:	4b43      	ldr	r3, [pc, #268]	@ (8006fa0 <pvPortMalloc+0x184>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d865      	bhi.n	8006f66 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e9a:	4b42      	ldr	r3, [pc, #264]	@ (8006fa4 <pvPortMalloc+0x188>)
 8006e9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e9e:	4b41      	ldr	r3, [pc, #260]	@ (8006fa4 <pvPortMalloc+0x188>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ea4:	e004      	b.n	8006eb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d903      	bls.n	8006ec2 <pvPortMalloc+0xa6>
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f1      	bne.n	8006ea6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ec2:	4b35      	ldr	r3, [pc, #212]	@ (8006f98 <pvPortMalloc+0x17c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d04c      	beq.n	8006f66 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	4413      	add	r3, r2
 8006ed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	1ad2      	subs	r2, r2, r3
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d920      	bls.n	8006f30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <pvPortMalloc+0xfc>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	613b      	str	r3, [r7, #16]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f2a:	69b8      	ldr	r0, [r7, #24]
 8006f2c:	f000 f8fc 	bl	8007128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f30:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa0 <pvPortMalloc+0x184>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <pvPortMalloc+0x184>)
 8006f3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f3e:	4b18      	ldr	r3, [pc, #96]	@ (8006fa0 <pvPortMalloc+0x184>)
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b19      	ldr	r3, [pc, #100]	@ (8006fa8 <pvPortMalloc+0x18c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d203      	bcs.n	8006f52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <pvPortMalloc+0x184>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a16      	ldr	r2, [pc, #88]	@ (8006fa8 <pvPortMalloc+0x18c>)
 8006f50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <pvPortMalloc+0x180>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f66:	f7fe fcef 	bl	8005948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <pvPortMalloc+0x170>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <pvPortMalloc+0x16c>
	return pvReturn;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	@ 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20004eb4 	.word	0x20004eb4
 8006f9c:	20004ec0 	.word	0x20004ec0
 8006fa0:	20004eb8 	.word	0x20004eb8
 8006fa4:	20004eac 	.word	0x20004eac
 8006fa8:	20004ebc 	.word	0x20004ebc

08006fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d04a      	beq.n	8007054 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	425b      	negs	r3, r3
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4b22      	ldr	r3, [pc, #136]	@ (800705c <vPortFree+0xb0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <vPortFree+0x46>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60fb      	str	r3, [r7, #12]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <vPortFree+0x66>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	60bb      	str	r3, [r7, #8]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	4b11      	ldr	r3, [pc, #68]	@ (800705c <vPortFree+0xb0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d019      	beq.n	8007054 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d115      	bne.n	8007054 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <vPortFree+0xb0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007038:	f7fe fc78 	bl	800592c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <vPortFree+0xb4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	4a06      	ldr	r2, [pc, #24]	@ (8007060 <vPortFree+0xb4>)
 8007048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f86c 	bl	8007128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007050:	f7fe fc7a 	bl	8005948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007054:	bf00      	nop
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20004ec0 	.word	0x20004ec0
 8007060:	20004eb8 	.word	0x20004eb8

08007064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800706a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800706e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007070:	4b27      	ldr	r3, [pc, #156]	@ (8007110 <prvHeapInit+0xac>)
 8007072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <prvHeapInit+0xac>)
 8007094:	4413      	add	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800709c:	4a1d      	ldr	r2, [pc, #116]	@ (8007114 <prvHeapInit+0xb0>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007114 <prvHeapInit+0xb0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070b0:	2208      	movs	r2, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a15      	ldr	r2, [pc, #84]	@ (8007118 <prvHeapInit+0xb4>)
 80070c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070c6:	4b14      	ldr	r3, [pc, #80]	@ (8007118 <prvHeapInit+0xb4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ce:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <prvHeapInit+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <prvHeapInit+0xb4>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a0a      	ldr	r2, [pc, #40]	@ (800711c <prvHeapInit+0xb8>)
 80070f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a09      	ldr	r2, [pc, #36]	@ (8007120 <prvHeapInit+0xbc>)
 80070fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070fc:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <prvHeapInit+0xc0>)
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007102:	601a      	str	r2, [r3, #0]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	200012ac 	.word	0x200012ac
 8007114:	20004eac 	.word	0x20004eac
 8007118:	20004eb4 	.word	0x20004eb4
 800711c:	20004ebc 	.word	0x20004ebc
 8007120:	20004eb8 	.word	0x20004eb8
 8007124:	20004ec0 	.word	0x20004ec0

08007128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007130:	4b28      	ldr	r3, [pc, #160]	@ (80071d4 <prvInsertBlockIntoFreeList+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e002      	b.n	800713c <prvInsertBlockIntoFreeList+0x14>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d8f7      	bhi.n	8007136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d108      	bne.n	800716a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d118      	bne.n	80071b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b15      	ldr	r3, [pc, #84]	@ (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d00d      	beq.n	80071a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e008      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071a6:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e003      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d002      	beq.n	80071c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20004eac 	.word	0x20004eac
 80071d8:	20004eb4 	.word	0x20004eb4

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <__libc_init_array>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007224 <__libc_init_array+0x38>)
 80071f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007228 <__libc_init_array+0x3c>)
 80071f2:	1b64      	subs	r4, r4, r5
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	2600      	movs	r6, #0
 80071f8:	42a6      	cmp	r6, r4
 80071fa:	d109      	bne.n	8007210 <__libc_init_array+0x24>
 80071fc:	4d0b      	ldr	r5, [pc, #44]	@ (800722c <__libc_init_array+0x40>)
 80071fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007230 <__libc_init_array+0x44>)
 8007200:	f000 f826 	bl	8007250 <_init>
 8007204:	1b64      	subs	r4, r4, r5
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	2600      	movs	r6, #0
 800720a:	42a6      	cmp	r6, r4
 800720c:	d105      	bne.n	800721a <__libc_init_array+0x2e>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f855 3b04 	ldr.w	r3, [r5], #4
 8007214:	4798      	blx	r3
 8007216:	3601      	adds	r6, #1
 8007218:	e7ee      	b.n	80071f8 <__libc_init_array+0xc>
 800721a:	f855 3b04 	ldr.w	r3, [r5], #4
 800721e:	4798      	blx	r3
 8007220:	3601      	adds	r6, #1
 8007222:	e7f2      	b.n	800720a <__libc_init_array+0x1e>
 8007224:	080072d8 	.word	0x080072d8
 8007228:	080072d8 	.word	0x080072d8
 800722c:	080072d8 	.word	0x080072d8
 8007230:	080072dc 	.word	0x080072dc

08007234 <memcpy>:
 8007234:	440a      	add	r2, r1
 8007236:	4291      	cmp	r1, r2
 8007238:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800723c:	d100      	bne.n	8007240 <memcpy+0xc>
 800723e:	4770      	bx	lr
 8007240:	b510      	push	{r4, lr}
 8007242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800724a:	4291      	cmp	r1, r2
 800724c:	d1f9      	bne.n	8007242 <memcpy+0xe>
 800724e:	bd10      	pop	{r4, pc}

08007250 <_init>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr

0800725c <_fini>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr
