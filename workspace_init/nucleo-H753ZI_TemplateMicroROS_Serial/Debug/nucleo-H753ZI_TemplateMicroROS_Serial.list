
nucleo-H753ZI_TemplateMicroROS_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018884  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  08018b28  08018b28  00019b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080196f4  080196f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080196fc  080196fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019704  08019704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000114  24000000  08019708  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000114  0801981c  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000174  0801987c  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000684b8  240001d8  080198dc  0001b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24068690  080198dc  0001b690  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e209  00000000  00000000  0001b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c0d  00000000  00000000  0004940b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002020  00000000  00000000  0004f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018c9  00000000  00000000  00051038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004041b  00000000  00000000  00052901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c93b  00000000  00000000  00092d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182e33  00000000  00000000  000bf657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0024248a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009488  00000000  00000000  00242500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0024b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018b0c 	.word	0x08018b0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08018b0c 	.word	0x08018b0c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800074c:	f00c fa5c 	bl	800cc08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000750:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000758:	f000 f986 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800075c:	4b58      	ldr	r3, [pc, #352]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8090 	bne.w	800088a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000770:	2208      	movs	r2, #8
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d015      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	3308      	adds	r3, #8
 800078a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00b      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d865      	bhi.n	800088a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c2:	4b41      	ldr	r3, [pc, #260]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007c8:	e004      	b.n	80007d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <pvPortMallocMicroROS+0xa6>
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f1      	bne.n	80007ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d04c      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2208      	movs	r2, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d920      	bls.n	8000854 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f000 f96e 	bl	8000b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d203      	bcs.n	8000876 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	431a      	orrs	r2, r3
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088a:	f00c f9cb 	bl	800cc24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008b0:	69fb      	ldr	r3, [r7, #28]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24030f3c 	.word	0x24030f3c
 80008c0:	24030f48 	.word	0x24030f48
 80008c4:	24030f40 	.word	0x24030f40
 80008c8:	24030f34 	.word	0x24030f34
 80008cc:	24030f44 	.word	0x24030f44

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <vPortFreeMicroROS+0x66>
	__asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00c f954 	bl	800cc08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8de 	bl	8000b30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00c f956 	bl	800cc24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24030f48 	.word	0x24030f48
 8000984:	24030f40 	.word	0x24030f40

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24030f48 	.word	0x24030f48

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00c f91b 	bl	800cc08 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feb4 	bl	8000740 <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f017 f994 	bl	8017d32 <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff60 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00c f908 	bl	800cc24 <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00c f8ee 	bl	800cc08 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe82 	bl	8000740 <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00c f8e4 	bl	800cc24 <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <prvHeapInit+0xac>)
 8000a70:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a74:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3307      	adds	r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ac6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <prvHeapInit+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <prvHeapInit+0xbc>)
 8000af4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <prvHeapInit+0xc0>)
 8000afc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <prvHeapInit+0xc4>)
 8000b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	00030d40 	.word	0x00030d40
 8000b18:	240001f4 	.word	0x240001f4
 8000b1c:	24030f34 	.word	0x24030f34
 8000b20:	24030f3c 	.word	0x24030f3c
 8000b24:	24030f44 	.word	0x24030f44
 8000b28:	24030f40 	.word	0x24030f40
 8000b2c:	24030f48 	.word	0x24030f48

08000b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <prvInsertBlockIntoFreeList+0xac>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <prvInsertBlockIntoFreeList+0x14>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8f7      	bhi.n	8000b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d108      	bne.n	8000b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d118      	bne.n	8000bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00d      	beq.n	8000bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24030f34 	.word	0x24030f34
 8000be0:	24030f3c 	.word	0x24030f3c

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	200b      	movs	r0, #11
 8000c0e:	f001 fb85 	bl	800231c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c12:	200b      	movs	r0, #11
 8000c14:	f001 fb9c 	bl	8002350 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f001 fb7d 	bl	800231c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c22:	200c      	movs	r0, #12
 8000c24:	f001 fb94 	bl	8002350 <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400

08000c34 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c42:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c48:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <cubemx_transport_open+0x28>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f008 fb5a 	bl	8009304 <HAL_UART_Receive_DMA>
    return true;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24030f4c 	.word	0x24030f4c

08000c60 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f008 fb93 	bl	800939c <HAL_UART_DMAStop>
    return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c94:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d11b      	bne.n	8000cd8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f008 faab 	bl	8009204 <HAL_UART_Transmit_DMA>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cb2:	e002      	b.n	8000cba <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f00a ff45 	bl	800bb44 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <cubemx_transport_write+0x4a>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d1f4      	bne.n	8000cb4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <cubemx_transport_write+0x54>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e002      	b.n	8000cda <cubemx_transport_write+0x5a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000cd8:	2300      	movs	r3, #0
    }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfe:	b672      	cpsid	i
}
 8000d00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e74 <cubemx_transport_read+0x190>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d068      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a57      	ldr	r2, [pc, #348]	@ (8000e78 <cubemx_transport_read+0x194>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d061      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a55      	ldr	r2, [pc, #340]	@ (8000e7c <cubemx_transport_read+0x198>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05a      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a52      	ldr	r2, [pc, #328]	@ (8000e80 <cubemx_transport_read+0x19c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d053      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <cubemx_transport_read+0x1a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d04c      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <cubemx_transport_read+0x1a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d045      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e8c <cubemx_transport_read+0x1a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d03e      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <cubemx_transport_read+0x1ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d037      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <cubemx_transport_read+0x1b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d030      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <cubemx_transport_read+0x1b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d029      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <cubemx_transport_read+0x1b8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d022      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ea0 <cubemx_transport_read+0x1bc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01b      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <cubemx_transport_read+0x1c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d014      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <cubemx_transport_read+0x1c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <cubemx_transport_read+0x1c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d006      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <cubemx_transport_read+0x1cc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d107      	bne.n	8000df2 <cubemx_transport_read+0x10e>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000df0:	e006      	b.n	8000e00 <cubemx_transport_read+0x11c>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e00:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e04:	b662      	cpsie	i
}
 8000e06:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f00a fe98 	bl	800bb44 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d104      	bne.n	8000e2a <cubemx_transport_read+0x146>
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f6ff af6a 	blt.w	8000cfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e2e:	e011      	b.n	8000e54 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	440b      	add	r3, r1
 8000e3a:	4920      	ldr	r1, [pc, #128]	@ (8000ebc <cubemx_transport_read+0x1d8>)
 8000e3c:	5c8a      	ldrb	r2, [r1, r2]
 8000e3e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e4c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d003      	beq.n	8000e68 <cubemx_transport_read+0x184>
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d3e3      	bcc.n	8000e30 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000e68:	69bb      	ldr	r3, [r7, #24]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020010 	.word	0x40020010
 8000e78:	40020028 	.word	0x40020028
 8000e7c:	40020040 	.word	0x40020040
 8000e80:	40020058 	.word	0x40020058
 8000e84:	40020070 	.word	0x40020070
 8000e88:	40020088 	.word	0x40020088
 8000e8c:	400200a0 	.word	0x400200a0
 8000e90:	400200b8 	.word	0x400200b8
 8000e94:	40020410 	.word	0x40020410
 8000e98:	40020428 	.word	0x40020428
 8000e9c:	40020440 	.word	0x40020440
 8000ea0:	40020458 	.word	0x40020458
 8000ea4:	40020470 	.word	0x40020470
 8000ea8:	40020488 	.word	0x40020488
 8000eac:	400204a0 	.word	0x400204a0
 8000eb0:	400204b8 	.word	0x400204b8
 8000eb4:	24031750 	.word	0x24031750
 8000eb8:	2403174c 	.word	0x2403174c
 8000ebc:	24030f4c 	.word	0x24030f4c

08000ec0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <MX_ETH_Init+0x84>)
 8000ec8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed8:	22e1      	movs	r2, #225	@ 0xe1
 8000eda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef0:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ef2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_ETH_Init+0x8c>)
 8000efe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <MX_ETH_Init+0x90>)
 8000f04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f08:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f10:	f004 f874 	bl	8004ffc <HAL_ETH_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f1a:	f000 fb23 	bl	8001564 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f1e:	2238      	movs	r2, #56	@ 0x38
 8000f20:	2100      	movs	r1, #0
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f24:	f016 fde6 	bl	8017af4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f2a:	2221      	movs	r2, #33	@ 0x21
 8000f2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2403178c 	.word	0x2403178c
 8000f44:	40028000 	.word	0x40028000
 8000f48:	2403183c 	.word	0x2403183c
 8000f4c:	24000174 	.word	0x24000174
 8000f50:	24000114 	.word	0x24000114
 8000f54:	24031754 	.word	0x24031754

08000f58 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	@ 0x38
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a59      	ldr	r2, [pc, #356]	@ (80010dc <HAL_ETH_MspInit+0x184>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 80ab 	bne.w	80010d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f82:	4a57      	ldr	r2, [pc, #348]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f8c:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	623b      	str	r3, [r7, #32]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f9a:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000faa:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fb8:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbe:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a39      	ldr	r2, [pc, #228]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a2a      	ldr	r2, [pc, #168]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800104e:	2332      	movs	r3, #50	@ 0x32
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <HAL_ETH_MspInit+0x18c>)
 800106a:	f004 fbfb 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800106e:	2386      	movs	r3, #134	@ 0x86
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <HAL_ETH_MspInit+0x190>)
 800108a:	f004 fbeb 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4810      	ldr	r0, [pc, #64]	@ (80010ec <HAL_ETH_MspInit+0x194>)
 80010ac:	f004 fbda 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c2:	230b      	movs	r3, #11
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <HAL_ETH_MspInit+0x198>)
 80010ce:	f004 fbc9 	bl	8005864 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	@ 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40028000 	.word	0x40028000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020400 	.word	0x58020400
 80010f0:	58021800 	.word	0x58021800

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <MX_FREERTOS_Init+0x18>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_FREERTOS_Init+0x1c>)
 80010fe:	f00a fc8f 	bl	800ba20 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <MX_FREERTOS_Init+0x20>)
 8001106:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08018b80 	.word	0x08018b80
 8001110:	08001119 	.word	0x08001119
 8001114:	24031844 	.word	0x24031844

08001118 <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0a8      	sub	sp, #160	@ 0xa0
 800111c:	af02      	add	r7, sp, #8
 800111e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskMicroROS */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001120:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <StartTaskMicroROS+0x10c>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b40      	ldr	r3, [pc, #256]	@ (8001228 <StartTaskMicroROS+0x110>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <StartTaskMicroROS+0x114>)
 800112a:	4a41      	ldr	r2, [pc, #260]	@ (8001230 <StartTaskMicroROS+0x118>)
 800112c:	4941      	ldr	r1, [pc, #260]	@ (8001234 <StartTaskMicroROS+0x11c>)
 800112e:	2001      	movs	r0, #1
 8001130:	f00d fd42 	bl	800ebb8 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001134:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001138:	4618      	mov	r0, r3
 800113a:	f00d fcab 	bl	800ea94 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800113e:	4b3e      	ldr	r3, [pc, #248]	@ (8001238 <StartTaskMicroROS+0x120>)
 8001140:	67fb      	str	r3, [r7, #124]	@ 0x7c
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001142:	4b3e      	ldr	r3, [pc, #248]	@ (800123c <StartTaskMicroROS+0x124>)
 8001144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <StartTaskMicroROS+0x128>)
 800114a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800114e:	4b3d      	ldr	r3, [pc, #244]	@ (8001244 <StartTaskMicroROS+0x12c>)
 8001150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001154:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001158:	4618      	mov	r0, r3
 800115a:	f00d fca9 	bl	800eab0 <rcutils_set_default_allocator>
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;
  rcl_init_options_t init_options;

  allocator = rcl_get_default_allocator();
 800115e:	463b      	mov	r3, r7
 8001160:	4618      	mov	r0, r3
 8001162:	f00d fcc3 	bl	800eaec <rcutils_get_default_allocator>
 8001166:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800116a:	463d      	mov	r5, r7
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	6023      	str	r3, [r4, #0]
  init_options = rcl_get_zero_initialized_init_options();
 8001174:	f00d f9e2 	bl	800e53c <rcl_get_zero_initialized_init_options>
 8001178:	4603      	mov	r3, r0
 800117a:	623b      	str	r3, [r7, #32]
  rcl_init_options_init(&init_options, allocator);
 800117c:	f107 0420 	add.w	r4, r7, #32
 8001180:	466a      	mov	r2, sp
 8001182:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001186:	e893 0003 	ldmia.w	r3, {r0, r1}
 800118a:	e882 0003 	stmia.w	r2, {r0, r1}
 800118e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001194:	4620      	mov	r0, r4
 8001196:	f00d f9d3 	bl	800e540 <rcl_init_options_init>

  //create init_options
  unsigned char ret;
  do{
       ret =  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800119a:	f107 0220 	add.w	r2, r7, #32
 800119e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	f00d fbb7 	bl	800e920 <rclc_support_init_with_options>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
       osDelay(1000);
 80011b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011bc:	f00a fcc2 	bl	800bb44 <osDelay>
   } while (ret != RCL_RET_OK);
 80011c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e8      	bne.n	800119a <StartTaskMicroROS+0x82>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80011c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011cc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <StartTaskMicroROS+0x130>)
 80011d2:	491e      	ldr	r1, [pc, #120]	@ (800124c <StartTaskMicroROS+0x134>)
 80011d4:	f00d fbda 	bl	800e98c <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 80011d8:	f00e fdde 	bl	800fd98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80011dc:	4602      	mov	r2, r0
 80011de:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80011e2:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <StartTaskMicroROS+0x138>)
 80011e8:	f00d fc12 	bl	800ea10 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

  msg.data = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	677b      	str	r3, [r7, #116]	@ 0x74

  for(;;)
  {

	rmw_uros_sync_session(1000);
 80011f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f4:	f00e faee 	bl	800f7d4 <rmw_uros_sync_session>
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80011f8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80011fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001200:	2200      	movs	r2, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00d fb68 	bl	800e8d8 <rcl_publish>
 8001208:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (ret != RCL_RET_OK)
	{
	  //printf_("Error publishing (line %d)\n", __LINE__);
	}

	msg.data++;
 800120c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800120e:	3301      	adds	r3, #1
 8001210:	677b      	str	r3, [r7, #116]	@ 0x74

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001212:	2102      	movs	r1, #2
 8001214:	480f      	ldr	r0, [pc, #60]	@ (8001254 <StartTaskMicroROS+0x13c>)
 8001216:	f004 fcee 	bl	8005bf6 <HAL_GPIO_TogglePin>

	osDelay(500);
 800121a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800121e:	f00a fc91 	bl	800bb44 <osDelay>
  {
 8001222:	e7e5      	b.n	80011f0 <StartTaskMicroROS+0xd8>
 8001224:	08000ce5 	.word	0x08000ce5
 8001228:	08000c81 	.word	0x08000c81
 800122c:	08000c61 	.word	0x08000c61
 8001230:	08000c35 	.word	0x08000c35
 8001234:	240318a4 	.word	0x240318a4
 8001238:	08001571 	.word	0x08001571
 800123c:	080015b5 	.word	0x080015b5
 8001240:	080015ed 	.word	0x080015ed
 8001244:	08001659 	.word	0x08001659
 8001248:	08018b38 	.word	0x08018b38
 800124c:	08018b3c 	.word	0x08018b3c
 8001250:	08018b48 	.word	0x08018b48
 8001254:	58021000 	.word	0x58021000

08001258 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b62      	ldr	r3, [pc, #392]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a60      	ldr	r2, [pc, #384]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b5e      	ldr	r3, [pc, #376]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b5a      	ldr	r3, [pc, #360]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a59      	ldr	r2, [pc, #356]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	4a51      	ldr	r2, [pc, #324]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ba:	4b4f      	ldr	r3, [pc, #316]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b4b      	ldr	r3, [pc, #300]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a4a      	ldr	r2, [pc, #296]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	4a42      	ldr	r2, [pc, #264]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f6:	4b40      	ldr	r3, [pc, #256]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a3b      	ldr	r2, [pc, #236]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	4a33      	ldr	r2, [pc, #204]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001332:	4b31      	ldr	r3, [pc, #196]	@ (80013f8 <MX_GPIO_Init+0x1a0>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001346:	482d      	ldr	r0, [pc, #180]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001348:	f004 fc3c 	bl	8005bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001352:	482b      	ldr	r0, [pc, #172]	@ (8001400 <MX_GPIO_Init+0x1a8>)
 8001354:	f004 fc36 	bl	8005bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4829      	ldr	r0, [pc, #164]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 800135e:	f004 fc31 	bl	8005bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_GPIO_Init+0x1b0>)
 8001378:	f004 fa74 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800137c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4819      	ldr	r0, [pc, #100]	@ (80013fc <MX_GPIO_Init+0x1a4>)
 8001396:	f004 fa65 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800139a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_GPIO_Init+0x1a8>)
 80013b4:	f004 fa56 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	480f      	ldr	r0, [pc, #60]	@ (800140c <MX_GPIO_Init+0x1b4>)
 80013ce:	f004 fa49 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4806      	ldr	r0, [pc, #24]	@ (8001404 <MX_GPIO_Init+0x1ac>)
 80013ea:	f004 fa3b 	bl	8005864 <HAL_GPIO_Init>

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58024400 	.word	0x58024400
 80013fc:	58020400 	.word	0x58020400
 8001400:	58020c00 	.word	0x58020c00
 8001404:	58021000 	.word	0x58021000
 8001408:	58020800 	.word	0x58020800
 800140c:	58021800 	.word	0x58021800

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 fe2a 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f812 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff ff1c 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f7ff fbe0 	bl	8000be4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001424:	f000 fc24 	bl	8001c70 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001428:	f7ff fd4a 	bl	8000ec0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800142c:	f000 fd46 	bl	8001ebc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001430:	f00a faac 	bl	800b98c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001434:	f7ff fe5e 	bl	80010f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001438:	f00a facc 	bl	800b9d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <main+0x2c>

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09c      	sub	sp, #112	@ 0x70
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144a:	224c      	movs	r2, #76	@ 0x4c
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f016 fb50 	bl	8017af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2220      	movs	r2, #32
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f016 fb4a 	bl	8017af4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001460:	2002      	movs	r0, #2
 8001462:	f004 fd13 	bl	8005e8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <SystemClock_Config+0xf8>)
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <SystemClock_Config+0xf8>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001476:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <SystemClock_Config+0xf8>)
 8001478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <SystemClock_Config+0xfc>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001488:	4a2c      	ldr	r2, [pc, #176]	@ (800153c <SystemClock_Config+0xfc>)
 800148a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SystemClock_Config+0xfc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800149c:	bf00      	nop
 800149e:	4b27      	ldr	r3, [pc, #156]	@ (800153c <SystemClock_Config+0xfc>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014aa:	d1f8      	bne.n	800149e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014ac:	2303      	movs	r3, #3
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ba:	2340      	movs	r3, #64	@ 0x40
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014be:	2302      	movs	r3, #2
 80014c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c2:	2302      	movs	r3, #2
 80014c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80014ca:	2318      	movs	r3, #24
 80014cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014da:	230c      	movs	r3, #12
 80014dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014de:	2300      	movs	r3, #0
 80014e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fd18 	bl	8005f20 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80014f6:	f000 f835 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	233f      	movs	r3, #63	@ 0x3f
 80014fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f005 f958 	bl	80067d4 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800152a:	f000 f81b 	bl	8001564 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3770      	adds	r7, #112	@ 0x70
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58000400 	.word	0x58000400
 800153c:	58024800 	.word	0x58024800

08001540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001552:	f000 fdc7 	bl	80020e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40001000 	.word	0x40001000

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <Error_Handler+0x8>

08001570 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <microros_allocate+0x3c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <microros_allocate+0x3c>)
 8001588:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <microros_allocate+0x40>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <microros_allocate+0x40>)
 8001598:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff f8d0 	bl	8000740 <pvPortMallocMicroROS>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24031848 	.word	0x24031848
 80015b0:	2403184c 	.word	0x2403184c

080015b4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00c      	beq.n	80015de <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff f9df 	bl	8000988 <getBlockSize>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <microros_deallocate+0x34>)
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <microros_deallocate+0x34>)
 80015d6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff f979 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2403184c 	.word	0x2403184c

080015ec <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <microros_reallocate+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	461a      	mov	r2, r3
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <microros_reallocate+0x64>)
 8001606:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <microros_reallocate+0x68>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	4413      	add	r3, r2
 8001612:	461a      	mov	r2, r3
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <microros_reallocate+0x68>)
 8001616:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d104      	bne.n	8001628 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800161e:	68b8      	ldr	r0, [r7, #8]
 8001620:	f7ff f88e 	bl	8000740 <pvPortMallocMicroROS>
 8001624:	4603      	mov	r3, r0
 8001626:	e00e      	b.n	8001646 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff f9ad 	bl	8000988 <getBlockSize>
 800162e:	4603      	mov	r3, r0
 8001630:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <microros_reallocate+0x68>)
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	461a      	mov	r2, r3
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <microros_reallocate+0x68>)
 800163a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff f9c0 	bl	80009c4 <pvPortReallocMicroROS>
 8001644:	4603      	mov	r3, r0
  }
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	24031848 	.word	0x24031848
 8001654:	2403184c 	.word	0x2403184c

08001658 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <microros_zero_allocate+0x48>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4413      	add	r3, r2
 8001672:	461a      	mov	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <microros_zero_allocate+0x48>)
 8001676:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <microros_zero_allocate+0x4c>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4413      	add	r3, r2
 8001686:	461a      	mov	r2, r3
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <microros_zero_allocate+0x4c>)
 800168a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff f9c5 	bl	8000a1e <pvPortCallocMicroROS>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24031848 	.word	0x24031848
 80016a4:	2403184c 	.word	0x2403184c

080016a8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80016ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016be:	a320      	add	r3, pc, #128	@ (adr r3, 8001740 <UTILS_NanosecondsToTimespec+0x98>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fe74 	bl	80003b0 <__aeabi_ldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80016d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001740 <UTILS_NanosecondsToTimespec+0x98>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fe68 	bl	80003b0 <__aeabi_ldivmod>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da20      	bge.n	800172e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <UTILS_NanosecondsToTimespec+0x90>)
 80016f2:	fb82 1203 	smull	r1, r2, r2, r3
 80016f6:	1712      	asrs	r2, r2, #28
 80016f8:	17db      	asrs	r3, r3, #31
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	6979      	ldr	r1, [r7, #20]
 8001708:	17c8      	asrs	r0, r1, #31
 800170a:	460c      	mov	r4, r1
 800170c:	4605      	mov	r5, r0
 800170e:	ebb2 0804 	subs.w	r8, r2, r4
 8001712:	eb63 0905 	sbc.w	r9, r3, r5
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4906      	ldr	r1, [pc, #24]	@ (800173c <UTILS_NanosecondsToTimespec+0x94>)
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]
    }
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001738:	44b82fa1 	.word	0x44b82fa1
 800173c:	3b9aca00 	.word	0x3b9aca00
 8001740:	3b9aca00 	.word	0x3b9aca00
 8001744:	00000000 	.word	0x00000000

08001748 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800174c:	b08e      	sub	sp, #56	@ 0x38
 800174e:	af00      	add	r7, sp, #0
 8001750:	6278      	str	r0, [r7, #36]	@ 0x24
 8001752:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001754:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001758:	2300      	movs	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800176a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800176e:	4618      	mov	r0, r3
 8001770:	f00b fcdc 	bl	800d12c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001776:	17da      	asrs	r2, r3, #31
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	61fa      	str	r2, [r7, #28]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	69b9      	ldr	r1, [r7, #24]
 8001786:	000b      	movs	r3, r1
 8001788:	2200      	movs	r2, #0
 800178a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001790:	2200      	movs	r2, #0
 8001792:	461c      	mov	r4, r3
 8001794:	4615      	mov	r5, r2
 8001796:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800179a:	1911      	adds	r1, r2, r4
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	416b      	adcs	r3, r5
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	f04f 0400 	mov.w	r4, #0
 80017b6:	f04f 0500 	mov.w	r5, #0
 80017ba:	015d      	lsls	r5, r3, #5
 80017bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80017c0:	0154      	lsls	r4, r2, #5
 80017c2:	4622      	mov	r2, r4
 80017c4:	462b      	mov	r3, r5
 80017c6:	ebb2 0800 	subs.w	r8, r2, r0
 80017ca:	eb63 0901 	sbc.w	r9, r3, r1
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017de:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	eb18 0a00 	adds.w	sl, r8, r0
 80017ea:	eb49 0b01 	adc.w	fp, r9, r1
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017fa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017fe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001802:	ebb2 040a 	subs.w	r4, r2, sl
 8001806:	603c      	str	r4, [r7, #0]
 8001808:	eb63 030b 	sbc.w	r3, r3, fp
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001812:	4623      	mov	r3, r4
 8001814:	181b      	adds	r3, r3, r0
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	462b      	mov	r3, r5
 800181a:	eb41 0303 	adc.w	r3, r1, r3
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001826:	f7ff ff3f 	bl	80016a8 <UTILS_NanosecondsToTimespec>

    return 0;
 800182a:	2300      	movs	r3, #0
 800182c:	4618      	mov	r0, r3
 800182e:	3738      	adds	r7, #56	@ 0x38
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_MspInit+0x38>)
 8001840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001844:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_MspInit+0x38>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_MspInit+0x38>)
 8001850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	210f      	movs	r1, #15
 8001860:	f06f 0001 	mvn.w	r0, #1
 8001864:	f000 fd5a 	bl	800231c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58024400 	.word	0x58024400

08001874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	@ 0x40
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d827      	bhi.n	80018d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001882:	2200      	movs	r2, #0
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	2036      	movs	r0, #54	@ 0x36
 8001888:	f000 fd48 	bl	800231c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800188c:	2036      	movs	r0, #54	@ 0x36
 800188e:	f000 fd5f 	bl	8002350 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001892:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <HAL_InitTick+0xc4>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_InitTick+0xc8>)
 800189a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800189e:	4a27      	ldr	r2, [pc, #156]	@ (800193c <HAL_InitTick+0xc8>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_InitTick+0xc8>)
 80018aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018b6:	f107 0210 	add.w	r2, r7, #16
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 fb13 	bl	8006eec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <HAL_InitTick+0x6a>
 80018d0:	e001      	b.n	80018d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e02b      	b.n	800192e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018d6:	f005 fadd 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 80018da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80018dc:	e004      	b.n	80018e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018de:	f005 fad9 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 80018e2:	4603      	mov	r3, r0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <HAL_InitTick+0xcc>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9b      	lsrs	r3, r3, #18
 80018f2:	3b01      	subs	r3, #1
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018f6:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <HAL_InitTick+0xd0>)
 80018f8:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <HAL_InitTick+0xd4>)
 80018fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_InitTick+0xd0>)
 80018fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001902:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001904:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <HAL_InitTick+0xd0>)
 8001906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001908:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_InitTick+0xd0>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <HAL_InitTick+0xd0>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001916:	480b      	ldr	r0, [pc, #44]	@ (8001944 <HAL_InitTick+0xd0>)
 8001918:	f007 f956 	bl	8008bc8 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d104      	bne.n	800192c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001922:	4808      	ldr	r0, [pc, #32]	@ (8001944 <HAL_InitTick+0xd0>)
 8001924:	f007 f9b2 	bl	8008c8c <HAL_TIM_Base_Start_IT>
 8001928:	4603      	mov	r3, r0
 800192a:	e000      	b.n	800192e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	3740      	adds	r7, #64	@ 0x40
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2400000c 	.word	0x2400000c
 800193c:	58024400 	.word	0x58024400
 8001940:	431bde83 	.word	0x431bde83
 8001944:	24031850 	.word	0x24031850
 8001948:	40001000 	.word	0x40001000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Stream0_IRQHandler+0x10>)
 800198a:	f002 f819 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	24031938 	.word	0x24031938

08001998 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <DMA1_Stream1_IRQHandler+0x10>)
 800199e:	f002 f80f 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	240319b0 	.word	0x240319b0

080019ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <USART3_IRQHandler+0x10>)
 80019b2:	f007 fd89 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	240318a4 	.word	0x240318a4

080019c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <TIM6_DAC_IRQHandler+0x10>)
 80019c6:	f007 f9d9 	bl	8008d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24031850 	.word	0x24031850

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_kill>:

int _kill(int pid, int sig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ee:	f016 f96b 	bl	8017cc8 <__errno>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2216      	movs	r2, #22
 80019f6:	601a      	str	r2, [r3, #0]
  return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_exit>:

void _exit (int status)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffe7 	bl	80019e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <_exit+0x12>

08001a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e00a      	b.n	8001a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2c:	f3af 8000 	nop.w
 8001a30:	4601      	mov	r1, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	b2ca      	uxtb	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dbf0      	blt.n	8001a2c <_read+0x12>
  }

  return len;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e009      	b.n	8001a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	60ba      	str	r2, [r7, #8]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf1      	blt.n	8001a66 <_write+0x12>
  }
  return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_close>:

int _close(int file)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_isatty>:

int _isatty(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	@ (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f016 f8d0 	bl	8017cc8 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24080000 	.word	0x24080000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	240318a0 	.word	0x240318a0
 8001b5c:	24068690 	.word	0x24068690

08001b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b64:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <SystemInit+0xe4>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a36      	ldr	r2, [pc, #216]	@ (8001c44 <SystemInit+0xe4>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <SystemInit+0xe8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d807      	bhi.n	8001b90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b80:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <SystemInit+0xe8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	4a2f      	ldr	r2, [pc, #188]	@ (8001c48 <SystemInit+0xe8>)
 8001b8a:	f043 0307 	orr.w	r3, r3, #7
 8001b8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b90:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <SystemInit+0xec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	@ (8001c4c <SystemInit+0xec>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <SystemInit+0xec>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <SystemInit+0xec>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4929      	ldr	r1, [pc, #164]	@ (8001c4c <SystemInit+0xec>)
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <SystemInit+0xf0>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bae:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <SystemInit+0xe8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <SystemInit+0xe8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 030f 	bic.w	r3, r3, #15
 8001bc2:	4a21      	ldr	r2, [pc, #132]	@ (8001c48 <SystemInit+0xe8>)
 8001bc4:	f043 0307 	orr.w	r3, r3, #7
 8001bc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <SystemInit+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <SystemInit+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <SystemInit+0xec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <SystemInit+0xec>)
 8001bde:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <SystemInit+0xf4>)
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <SystemInit+0xec>)
 8001be4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <SystemInit+0xf8>)
 8001be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <SystemInit+0xec>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <SystemInit+0xfc>)
 8001bec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <SystemInit+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <SystemInit+0xec>)
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <SystemInit+0xfc>)
 8001bf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <SystemInit+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <SystemInit+0xec>)
 8001c02:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <SystemInit+0xfc>)
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <SystemInit+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <SystemInit+0xec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	@ (8001c4c <SystemInit+0xec>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <SystemInit+0xec>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <SystemInit+0x100>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <SystemInit+0x104>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2a:	d202      	bcs.n	8001c32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <SystemInit+0x108>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <SystemInit+0x10c>)
 8001c34:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	52002000 	.word	0x52002000
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c54:	02020200 	.word	0x02020200
 8001c58:	01ff0000 	.word	0x01ff0000
 8001c5c:	01010280 	.word	0x01010280
 8001c60:	5c001000 	.word	0x5c001000
 8001c64:	ffff0000 	.word	0xffff0000
 8001c68:	51008108 	.word	0x51008108
 8001c6c:	52004000 	.word	0x52004000

08001c70 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <MX_USART3_UART_Init+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cb8:	4811      	ldr	r0, [pc, #68]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cba:	f007 fa53 	bl	8009164 <HAL_UART_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001cc4:	f7ff fc4e 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ccc:	f009 fa48 	bl	800b160 <HAL_UARTEx_SetTxFifoThreshold>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cd6:	f7ff fc45 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cde:	f009 fa7d 	bl	800b1dc <HAL_UARTEx_SetRxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f7ff fc3c 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cee:	f009 f9fe 	bl	800b0ee <HAL_UARTEx_DisableFifoMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cf8:	f7ff fc34 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	240318a4 	.word	0x240318a4
 8001d04:	40004800 	.word	0x40004800

08001d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	22c0      	movs	r2, #192	@ 0xc0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f015 fee3 	bl	8017af4 <memset>
  if(uartHandle->Instance==USART3)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea0 <HAL_UART_MspInit+0x198>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f040 80ae 	bne.w	8001e96 <HAL_UART_MspInit+0x18e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d3a:	f04f 0202 	mov.w	r2, #2
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 f90d 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001d5c:	f7ff fc02 	bl	8001564 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d60:	4b50      	ldr	r3, [pc, #320]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d66:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b49      	ldr	r3, [pc, #292]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d84:	4a47      	ldr	r2, [pc, #284]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ea4 <HAL_UART_MspInit+0x19c>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db6:	2307      	movs	r3, #7
 8001db8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4839      	ldr	r0, [pc, #228]	@ (8001ea8 <HAL_UART_MspInit+0x1a0>)
 8001dc4:	f003 fd4e 	bl	8005864 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001dc8:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001dca:	4a39      	ldr	r2, [pc, #228]	@ (8001eb0 <HAL_UART_MspInit+0x1a8>)
 8001dcc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001dd0:	222d      	movs	r2, #45	@ 0x2d
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd4:	4b35      	ldr	r3, [pc, #212]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de8:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dee:	4b2f      	ldr	r3, [pc, #188]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001dfe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e02:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e04:	4b29      	ldr	r3, [pc, #164]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e0a:	4828      	ldr	r0, [pc, #160]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001e0c:	f000 faae 	bl	800236c <HAL_DMA_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e16:	f7ff fba5 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e22:	4a22      	ldr	r2, [pc, #136]	@ (8001eac <HAL_UART_MspInit+0x1a4>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <HAL_UART_MspInit+0x1b0>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e30:	222e      	movs	r2, #46	@ 0x2e
 8001e32:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e46:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e62:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e6a:	4812      	ldr	r0, [pc, #72]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e6c:	f000 fa7e 	bl	800236c <HAL_DMA_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_UART_MspInit+0x172>
    {
      Error_Handler();
 8001e76:	f7ff fb75 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e7e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e80:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <HAL_UART_MspInit+0x1ac>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2105      	movs	r1, #5
 8001e8a:	2027      	movs	r0, #39	@ 0x27
 8001e8c:	f000 fa46 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e90:	2027      	movs	r0, #39	@ 0x27
 8001e92:	f000 fa5d 	bl	8002350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e96:	bf00      	nop
 8001e98:	37e8      	adds	r7, #232	@ 0xe8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40004800 	.word	0x40004800
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	58020c00 	.word	0x58020c00
 8001eac:	24031938 	.word	0x24031938
 8001eb0:	40020010 	.word	0x40020010
 8001eb4:	240319b0 	.word	0x240319b0
 8001eb8:	40020028 	.word	0x40020028

08001ebc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec2:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec8:	2209      	movs	r2, #9
 8001eca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eda:	2202      	movs	r2, #2
 8001edc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001f04:	f003 fe91 	bl	8005c2a <HAL_PCD_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f0e:	f7ff fb29 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24031a28 	.word	0x24031a28
 8001f1c:	40080000 	.word	0x40080000

08001f20 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0ba      	sub	sp, #232	@ 0xe8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	22c0      	movs	r2, #192	@ 0xc0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f015 fdd7 	bl	8017af4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_PCD_MspInit+0xec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d159      	bne.n	8002004 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001f5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 f801 	bl	8006f70 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001f74:	f7ff faf6 	bl	8001564 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f78:	f003 ffc2 	bl	8005f00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4814      	ldr	r0, [pc, #80]	@ (8002014 <HAL_PCD_MspInit+0xf4>)
 8001fc2:	f003 fc4f 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <HAL_PCD_MspInit+0xf4>)
 8001fe2:	f003 fc3f 	bl	8005864 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fec:	4a08      	ldr	r2, [pc, #32]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001fee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_PCD_MspInit+0xf0>)
 8001ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002004:	bf00      	nop
 8002006:	37e8      	adds	r7, #232	@ 0xe8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40080000 	.word	0x40080000
 8002010:	58024400 	.word	0x58024400
 8002014:	58020000 	.word	0x58020000

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800201c:	f7ff fda0 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480c      	ldr	r0, [pc, #48]	@ (8002054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002022:	490d      	ldr	r1, [pc, #52]	@ (8002058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002038:	4c0a      	ldr	r4, [pc, #40]	@ (8002064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002046:	f015 fe45 	bl	8017cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7ff f9e1 	bl	8001410 <main>
  bx  lr
 800204e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002058:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 800205c:	08019708 	.word	0x08019708
  ldr r2, =_sbss
 8002060:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002064:	24068690 	.word	0x24068690

08002068 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC3_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002072:	2003      	movs	r0, #3
 8002074:	f000 f947 	bl	8002306 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002078:	f004 fd62 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_Init+0x68>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	4913      	ldr	r1, [pc, #76]	@ (80020d8 <HAL_Init+0x6c>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_Init+0x68>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <HAL_Init+0x6c>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_Init+0x70>)
 80020ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020b0:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_Init+0x74>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b6:	200f      	movs	r0, #15
 80020b8:	f7ff fbdc 	bl	8001874 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e002      	b.n	80020cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7ff fbb7 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58024400 	.word	0x58024400
 80020d8:	08018ba4 	.word	0x08018ba4
 80020dc:	24000008 	.word	0x24000008
 80020e0:	24000004 	.word	0x24000004

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	24000010 	.word	0x24000010
 8002108:	24031f0c 	.word	0x24031f0c

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	24031f0c 	.word	0x24031f0c

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000010 	.word	0x24000010

0800216c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_GetREVID+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0c1b      	lsrs	r3, r3, #16
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	5c001000 	.word	0x5c001000

08002184 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002194:	4904      	ldr	r1, [pc, #16]	@ (80021a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	58000400 	.word	0x58000400

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <__NVIC_SetPriorityGrouping+0x40>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <__NVIC_SetPriorityGrouping+0x40>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	05fa0000 	.word	0x05fa0000

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	@ (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	@ (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	@ (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	@ (800229c <__NVIC_SetPriority+0x50>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff4c 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800232a:	f7ff ff63 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 800232e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f7ff ffb3 	bl	80022a0 <NVIC_EncodePriority>
 800233a:	4602      	mov	r2, r0
 800233c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff82 	bl	800224c <__NVIC_SetPriority>
}
 8002348:	bf00      	nop
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff56 	bl	8002210 <__NVIC_EnableIRQ>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff feca 	bl	800210c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e316      	b.n	80029b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a66      	ldr	r2, [pc, #408]	@ (8002524 <HAL_DMA_Init+0x1b8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_DMA_Init+0x1bc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a63      	ldr	r2, [pc, #396]	@ (800252c <HAL_DMA_Init+0x1c0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a62      	ldr	r2, [pc, #392]	@ (8002530 <HAL_DMA_Init+0x1c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <HAL_DMA_Init+0x1c8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002538 <HAL_DMA_Init+0x1cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_DMA_Init+0x1d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002540 <HAL_DMA_Init+0x1d4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002544 <HAL_DMA_Init+0x1d8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a59      	ldr	r2, [pc, #356]	@ (8002548 <HAL_DMA_Init+0x1dc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_DMA_Init+0x1e0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_DMA_Init+0x1e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a54      	ldr	r2, [pc, #336]	@ (8002554 <HAL_DMA_Init+0x1e8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a53      	ldr	r2, [pc, #332]	@ (8002558 <HAL_DMA_Init+0x1ec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a51      	ldr	r2, [pc, #324]	@ (800255c <HAL_DMA_Init+0x1f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Init+0xb8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a50      	ldr	r2, [pc, #320]	@ (8002560 <HAL_DMA_Init+0x1f4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Init+0xbc>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_DMA_Init+0xbe>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 813b 	beq.w	80026a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_DMA_Init+0x1b8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a36      	ldr	r2, [pc, #216]	@ (8002528 <HAL_DMA_Init+0x1bc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	@ (800252c <HAL_DMA_Init+0x1c0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	@ (8002530 <HAL_DMA_Init+0x1c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	@ (8002534 <HAL_DMA_Init+0x1c8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	@ (8002538 <HAL_DMA_Init+0x1cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	@ (800253c <HAL_DMA_Init+0x1d0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	@ (8002540 <HAL_DMA_Init+0x1d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	@ (8002544 <HAL_DMA_Init+0x1d8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <HAL_DMA_Init+0x1dc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	@ (800254c <HAL_DMA_Init+0x1e0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_DMA_Init+0x1e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_DMA_Init+0x1e8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	@ (8002558 <HAL_DMA_Init+0x1ec>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_DMA_Init+0x1f0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Init+0x174>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	@ (8002560 <HAL_DMA_Init+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <HAL_DMA_Init+0x186>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_DMA_Init+0x196>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002502:	e02f      	b.n	8002564 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff fe02 	bl	800210c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d928      	bls.n	8002564 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e246      	b.n	80029b2 <HAL_DMA_Init+0x646>
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1c8      	bne.n	8002504 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4b83      	ldr	r3, [pc, #524]	@ (800278c <HAL_DMA_Init+0x420>)
 800257e:	4013      	ands	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800258a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d107      	bne.n	80025c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	4313      	orrs	r3, r2
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80025c8:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <HAL_DMA_Init+0x424>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b71      	ldr	r3, [pc, #452]	@ (8002794 <HAL_DMA_Init+0x428>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025d4:	d328      	bcc.n	8002628 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b28      	cmp	r3, #40	@ 0x28
 80025dc:	d903      	bls.n	80025e6 <HAL_DMA_Init+0x27a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80025e4:	d917      	bls.n	8002616 <HAL_DMA_Init+0x2aa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80025ec:	d903      	bls.n	80025f6 <HAL_DMA_Init+0x28a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b42      	cmp	r3, #66	@ 0x42
 80025f4:	d90f      	bls.n	8002616 <HAL_DMA_Init+0x2aa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b46      	cmp	r3, #70	@ 0x46
 80025fc:	d903      	bls.n	8002606 <HAL_DMA_Init+0x29a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b48      	cmp	r3, #72	@ 0x48
 8002604:	d907      	bls.n	8002616 <HAL_DMA_Init+0x2aa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b4e      	cmp	r3, #78	@ 0x4e
 800260c:	d905      	bls.n	800261a <HAL_DMA_Init+0x2ae>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b52      	cmp	r3, #82	@ 0x52
 8002614:	d801      	bhi.n	800261a <HAL_DMA_Init+0x2ae>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_DMA_Init+0x2b0>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002626:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0307 	bic.w	r3, r3, #7
 800263e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b04      	cmp	r3, #4
 8002650:	d117      	bne.n	8002682 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f002 fb3f 	bl	8004ce8 <DMA_CheckFifoParam>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e197      	b.n	80029b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f002 fa7a 	bl	8004b84 <DMA_CalcBaseAndBitshift>
 8002690:	4603      	mov	r3, r0
 8002692:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	223f      	movs	r2, #63	@ 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e0cd      	b.n	8002842 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002798 <HAL_DMA_Init+0x42c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a39      	ldr	r2, [pc, #228]	@ (800279c <HAL_DMA_Init+0x430>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a38      	ldr	r2, [pc, #224]	@ (80027a0 <HAL_DMA_Init+0x434>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a36      	ldr	r2, [pc, #216]	@ (80027a4 <HAL_DMA_Init+0x438>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a35      	ldr	r2, [pc, #212]	@ (80027a8 <HAL_DMA_Init+0x43c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a33      	ldr	r2, [pc, #204]	@ (80027ac <HAL_DMA_Init+0x440>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a32      	ldr	r2, [pc, #200]	@ (80027b0 <HAL_DMA_Init+0x444>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Init+0x38a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <HAL_DMA_Init+0x448>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Init+0x38e>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_DMA_Init+0x390>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a24      	ldr	r2, [pc, #144]	@ (8002798 <HAL_DMA_Init+0x42c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d021      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a22      	ldr	r2, [pc, #136]	@ (800279c <HAL_DMA_Init+0x430>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01c      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a21      	ldr	r2, [pc, #132]	@ (80027a0 <HAL_DMA_Init+0x434>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d017      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_DMA_Init+0x438>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d012      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <HAL_DMA_Init+0x43c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <HAL_DMA_Init+0x440>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d008      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <HAL_DMA_Init+0x444>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <HAL_DMA_Init+0x3e4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a19      	ldr	r2, [pc, #100]	@ (80027b4 <HAL_DMA_Init+0x448>)
 800274e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <HAL_DMA_Init+0x44c>)
 800276c:	4013      	ands	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d021      	beq.n	80027bc <HAL_DMA_Init+0x450>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d102      	bne.n	8002786 <HAL_DMA_Init+0x41a>
 8002780:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002784:	e01b      	b.n	80027be <HAL_DMA_Init+0x452>
 8002786:	2300      	movs	r3, #0
 8002788:	e019      	b.n	80027be <HAL_DMA_Init+0x452>
 800278a:	bf00      	nop
 800278c:	fe10803f 	.word	0xfe10803f
 8002790:	5c001000 	.word	0x5c001000
 8002794:	ffff0000 	.word	0xffff0000
 8002798:	58025408 	.word	0x58025408
 800279c:	5802541c 	.word	0x5802541c
 80027a0:	58025430 	.word	0x58025430
 80027a4:	58025444 	.word	0x58025444
 80027a8:	58025458 	.word	0x58025458
 80027ac:	5802546c 	.word	0x5802546c
 80027b0:	58025480 	.word	0x58025480
 80027b4:	58025494 	.word	0x58025494
 80027b8:	fffe000f 	.word	0xfffe000f
 80027bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b6e      	ldr	r3, [pc, #440]	@ (80029bc <HAL_DMA_Init+0x650>)
 8002804:	4413      	add	r3, r2
 8002806:	4a6e      	ldr	r2, [pc, #440]	@ (80029c0 <HAL_DMA_Init+0x654>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f002 f9b5 	bl	8004b84 <DMA_CalcBaseAndBitshift>
 800281a:	4603      	mov	r3, r0
 800281c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	e008      	b.n	8002842 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	@ 0x40
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0b7      	b.n	80029b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5f      	ldr	r2, [pc, #380]	@ (80029c4 <HAL_DMA_Init+0x658>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d072      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_DMA_Init+0x65c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d06d      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5c      	ldr	r2, [pc, #368]	@ (80029cc <HAL_DMA_Init+0x660>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d068      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5a      	ldr	r2, [pc, #360]	@ (80029d0 <HAL_DMA_Init+0x664>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d063      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a59      	ldr	r2, [pc, #356]	@ (80029d4 <HAL_DMA_Init+0x668>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d05e      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a57      	ldr	r2, [pc, #348]	@ (80029d8 <HAL_DMA_Init+0x66c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d059      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	@ (80029dc <HAL_DMA_Init+0x670>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d054      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a54      	ldr	r2, [pc, #336]	@ (80029e0 <HAL_DMA_Init+0x674>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04f      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a53      	ldr	r2, [pc, #332]	@ (80029e4 <HAL_DMA_Init+0x678>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d04a      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a51      	ldr	r2, [pc, #324]	@ (80029e8 <HAL_DMA_Init+0x67c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d045      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a50      	ldr	r2, [pc, #320]	@ (80029ec <HAL_DMA_Init+0x680>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d040      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4e      	ldr	r2, [pc, #312]	@ (80029f0 <HAL_DMA_Init+0x684>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d03b      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4d      	ldr	r2, [pc, #308]	@ (80029f4 <HAL_DMA_Init+0x688>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d036      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4b      	ldr	r2, [pc, #300]	@ (80029f8 <HAL_DMA_Init+0x68c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d031      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4a      	ldr	r2, [pc, #296]	@ (80029fc <HAL_DMA_Init+0x690>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d02c      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a48      	ldr	r2, [pc, #288]	@ (8002a00 <HAL_DMA_Init+0x694>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d027      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a47      	ldr	r2, [pc, #284]	@ (8002a04 <HAL_DMA_Init+0x698>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a45      	ldr	r2, [pc, #276]	@ (8002a08 <HAL_DMA_Init+0x69c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01d      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a44      	ldr	r2, [pc, #272]	@ (8002a0c <HAL_DMA_Init+0x6a0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d018      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a42      	ldr	r2, [pc, #264]	@ (8002a10 <HAL_DMA_Init+0x6a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a41      	ldr	r2, [pc, #260]	@ (8002a14 <HAL_DMA_Init+0x6a8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3f      	ldr	r2, [pc, #252]	@ (8002a18 <HAL_DMA_Init+0x6ac>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3e      	ldr	r2, [pc, #248]	@ (8002a1c <HAL_DMA_Init+0x6b0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_DMA_Init+0x5c6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <HAL_DMA_Init+0x6b4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_DMA_Init+0x5ca>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_DMA_Init+0x5cc>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f002 fa4f 	bl	8004de0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b80      	cmp	r3, #128	@ 0x80
 8002948:	d102      	bne.n	8002950 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_DMA_Init+0x624>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d80c      	bhi.n	8002990 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f002 facc 	bl	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	e008      	b.n	80029a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	a7fdabf8 	.word	0xa7fdabf8
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8
 8002a04:	58025408 	.word	0x58025408
 8002a08:	5802541c 	.word	0x5802541c
 8002a0c:	58025430 	.word	0x58025430
 8002a10:	58025444 	.word	0x58025444
 8002a14:	58025458 	.word	0x58025458
 8002a18:	5802546c 	.word	0x5802546c
 8002a1c:	58025480 	.word	0x58025480
 8002a20:	58025494 	.word	0x58025494

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e226      	b.n	8002e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Start_IT+0x2a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e21f      	b.n	8002e8e <HAL_DMA_Start_IT+0x46a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f040 820a 	bne.w	8002e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a68      	ldr	r2, [pc, #416]	@ (8002c18 <HAL_DMA_Start_IT+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04a      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a66      	ldr	r2, [pc, #408]	@ (8002c1c <HAL_DMA_Start_IT+0x1f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d045      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a65      	ldr	r2, [pc, #404]	@ (8002c20 <HAL_DMA_Start_IT+0x1fc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d040      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a63      	ldr	r2, [pc, #396]	@ (8002c24 <HAL_DMA_Start_IT+0x200>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d03b      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a62      	ldr	r2, [pc, #392]	@ (8002c28 <HAL_DMA_Start_IT+0x204>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d036      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	@ (8002c2c <HAL_DMA_Start_IT+0x208>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c30 <HAL_DMA_Start_IT+0x20c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d02c      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c34 <HAL_DMA_Start_IT+0x210>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d027      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c38 <HAL_DMA_Start_IT+0x214>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_DMA_Start_IT+0x218>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <HAL_DMA_Start_IT+0x21c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a57      	ldr	r2, [pc, #348]	@ (8002c44 <HAL_DMA_Start_IT+0x220>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_DMA_Start_IT+0x224>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a54      	ldr	r2, [pc, #336]	@ (8002c4c <HAL_DMA_Start_IT+0x228>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a53      	ldr	r2, [pc, #332]	@ (8002c50 <HAL_DMA_Start_IT+0x22c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	@ (8002c54 <HAL_DMA_Start_IT+0x230>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <HAL_DMA_Start_IT+0x100>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e007      	b.n	8002b34 <HAL_DMA_Start_IT+0x110>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fe76 	bl	800482c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_DMA_Start_IT+0x1f4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a33      	ldr	r2, [pc, #204]	@ (8002c1c <HAL_DMA_Start_IT+0x1f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a31      	ldr	r2, [pc, #196]	@ (8002c20 <HAL_DMA_Start_IT+0x1fc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a30      	ldr	r2, [pc, #192]	@ (8002c24 <HAL_DMA_Start_IT+0x200>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <HAL_DMA_Start_IT+0x204>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2d      	ldr	r2, [pc, #180]	@ (8002c2c <HAL_DMA_Start_IT+0x208>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	@ (8002c30 <HAL_DMA_Start_IT+0x20c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c34 <HAL_DMA_Start_IT+0x210>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a28      	ldr	r2, [pc, #160]	@ (8002c38 <HAL_DMA_Start_IT+0x214>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a27      	ldr	r2, [pc, #156]	@ (8002c3c <HAL_DMA_Start_IT+0x218>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <HAL_DMA_Start_IT+0x21c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_DMA_Start_IT+0x220>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <HAL_DMA_Start_IT+0x224>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <HAL_DMA_Start_IT+0x228>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_DMA_Start_IT+0x22c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <HAL_DMA_Start_IT+0x230>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Start_IT+0x1c0>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_Start_IT+0x1c2>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d036      	beq.n	8002c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 021e 	bic.w	r2, r3, #30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0216 	orr.w	r2, r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03e      	beq.n	8002c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0208 	orr.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e035      	b.n	8002c84 <HAL_DMA_Start_IT+0x260>
 8002c18:	40020010 	.word	0x40020010
 8002c1c:	40020028 	.word	0x40020028
 8002c20:	40020040 	.word	0x40020040
 8002c24:	40020058 	.word	0x40020058
 8002c28:	40020070 	.word	0x40020070
 8002c2c:	40020088 	.word	0x40020088
 8002c30:	400200a0 	.word	0x400200a0
 8002c34:	400200b8 	.word	0x400200b8
 8002c38:	40020410 	.word	0x40020410
 8002c3c:	40020428 	.word	0x40020428
 8002c40:	40020440 	.word	0x40020440
 8002c44:	40020458 	.word	0x40020458
 8002c48:	40020470 	.word	0x40020470
 8002c4c:	40020488 	.word	0x40020488
 8002c50:	400204a0 	.word	0x400204a0
 8002c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 020e 	bic.w	r2, r3, #14
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 020a 	orr.w	r2, r2, #10
 8002c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0204 	orr.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a83      	ldr	r2, [pc, #524]	@ (8002e98 <HAL_DMA_Start_IT+0x474>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d072      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a82      	ldr	r2, [pc, #520]	@ (8002e9c <HAL_DMA_Start_IT+0x478>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d06d      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a80      	ldr	r2, [pc, #512]	@ (8002ea0 <HAL_DMA_Start_IT+0x47c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d068      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea4 <HAL_DMA_Start_IT+0x480>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d063      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea8 <HAL_DMA_Start_IT+0x484>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d05e      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7c      	ldr	r2, [pc, #496]	@ (8002eac <HAL_DMA_Start_IT+0x488>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d059      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8002eb0 <HAL_DMA_Start_IT+0x48c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d054      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a79      	ldr	r2, [pc, #484]	@ (8002eb4 <HAL_DMA_Start_IT+0x490>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04f      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a77      	ldr	r2, [pc, #476]	@ (8002eb8 <HAL_DMA_Start_IT+0x494>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a76      	ldr	r2, [pc, #472]	@ (8002ebc <HAL_DMA_Start_IT+0x498>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a74      	ldr	r2, [pc, #464]	@ (8002ec0 <HAL_DMA_Start_IT+0x49c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	@ (8002ec4 <HAL_DMA_Start_IT+0x4a0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a71      	ldr	r2, [pc, #452]	@ (8002ec8 <HAL_DMA_Start_IT+0x4a4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a70      	ldr	r2, [pc, #448]	@ (8002ecc <HAL_DMA_Start_IT+0x4a8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed0 <HAL_DMA_Start_IT+0x4ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed4 <HAL_DMA_Start_IT+0x4b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed8 <HAL_DMA_Start_IT+0x4b4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6a      	ldr	r2, [pc, #424]	@ (8002edc <HAL_DMA_Start_IT+0x4b8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ee0 <HAL_DMA_Start_IT+0x4bc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_DMA_Start_IT+0x4c0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_DMA_Start_IT+0x4c4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a64      	ldr	r2, [pc, #400]	@ (8002eec <HAL_DMA_Start_IT+0x4c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a62      	ldr	r2, [pc, #392]	@ (8002ef0 <HAL_DMA_Start_IT+0x4cc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_DMA_Start_IT+0x4d0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Start_IT+0x354>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_Start_IT+0x356>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	@ (8002e98 <HAL_DMA_Start_IT+0x474>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a36      	ldr	r2, [pc, #216]	@ (8002e9c <HAL_DMA_Start_IT+0x478>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_DMA_Start_IT+0x47c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_DMA_Start_IT+0x480>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	@ (8002ea8 <HAL_DMA_Start_IT+0x484>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_DMA_Start_IT+0x488>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_DMA_Start_IT+0x48c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb4 <HAL_DMA_Start_IT+0x490>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb8 <HAL_DMA_Start_IT+0x494>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_DMA_Start_IT+0x498>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_DMA_Start_IT+0x49c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_DMA_Start_IT+0x4a0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <HAL_DMA_Start_IT+0x4a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <HAL_DMA_Start_IT+0x4a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_DMA_Start_IT+0x4ac>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_DMA_Start_IT+0x4b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <HAL_DMA_Start_IT+0x442>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e012      	b.n	8002e8c <HAL_DMA_Start_IT+0x468>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e009      	b.n	8002e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	58025408 	.word	0x58025408
 8002edc:	5802541c 	.word	0x5802541c
 8002ee0:	58025430 	.word	0x58025430
 8002ee4:	58025444 	.word	0x58025444
 8002ee8:	58025458 	.word	0x58025458
 8002eec:	5802546c 	.word	0x5802546c
 8002ef0:	58025480 	.word	0x58025480
 8002ef4:	58025494 	.word	0x58025494

08002ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff f904 	bl	800210c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e2dc      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2cd      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a76      	ldr	r2, [pc, #472]	@ (800310c <HAL_DMA_Abort+0x214>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a74      	ldr	r2, [pc, #464]	@ (8003110 <HAL_DMA_Abort+0x218>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	@ (8003114 <HAL_DMA_Abort+0x21c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a71      	ldr	r2, [pc, #452]	@ (8003118 <HAL_DMA_Abort+0x220>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a70      	ldr	r2, [pc, #448]	@ (800311c <HAL_DMA_Abort+0x224>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_DMA_Abort+0x228>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003124 <HAL_DMA_Abort+0x22c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_DMA_Abort+0x230>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_DMA_Abort+0x234>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	@ (8003130 <HAL_DMA_Abort+0x238>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a67      	ldr	r2, [pc, #412]	@ (8003134 <HAL_DMA_Abort+0x23c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_DMA_Abort+0x240>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a64      	ldr	r2, [pc, #400]	@ (800313c <HAL_DMA_Abort+0x244>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_DMA_Abort+0x248>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a61      	ldr	r2, [pc, #388]	@ (8003144 <HAL_DMA_Abort+0x24c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003148 <HAL_DMA_Abort+0x250>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Abort+0xda>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_Abort+0xdc>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 021e 	bic.w	r2, r2, #30
 8002fe6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e00a      	b.n	8003016 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020e 	bic.w	r2, r2, #14
 800300e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_DMA_Abort+0x214>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d072      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <HAL_DMA_Abort+0x218>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d06d      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a39      	ldr	r2, [pc, #228]	@ (8003114 <HAL_DMA_Abort+0x21c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d068      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a37      	ldr	r2, [pc, #220]	@ (8003118 <HAL_DMA_Abort+0x220>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d063      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a36      	ldr	r2, [pc, #216]	@ (800311c <HAL_DMA_Abort+0x224>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d05e      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a34      	ldr	r2, [pc, #208]	@ (8003120 <HAL_DMA_Abort+0x228>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d059      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a33      	ldr	r2, [pc, #204]	@ (8003124 <HAL_DMA_Abort+0x22c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d054      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a31      	ldr	r2, [pc, #196]	@ (8003128 <HAL_DMA_Abort+0x230>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04f      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a30      	ldr	r2, [pc, #192]	@ (800312c <HAL_DMA_Abort+0x234>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_DMA_Abort+0x238>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <HAL_DMA_Abort+0x23c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_DMA_Abort+0x240>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_DMA_Abort+0x244>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <HAL_DMA_Abort+0x248>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_DMA_Abort+0x24c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a25      	ldr	r2, [pc, #148]	@ (8003148 <HAL_DMA_Abort+0x250>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a24      	ldr	r2, [pc, #144]	@ (800314c <HAL_DMA_Abort+0x254>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <HAL_DMA_Abort+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <HAL_DMA_Abort+0x25c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <HAL_DMA_Abort+0x260>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_DMA_Abort+0x264>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_DMA_Abort+0x268>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_DMA_Abort+0x26c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_DMA_Abort+0x270>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d132      	bne.n	800316c <HAL_DMA_Abort+0x274>
 8003106:	2301      	movs	r3, #1
 8003108:	e031      	b.n	800316e <HAL_DMA_Abort+0x276>
 800310a:	bf00      	nop
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
 800314c:	58025408 	.word	0x58025408
 8003150:	5802541c 	.word	0x5802541c
 8003154:	58025430 	.word	0x58025430
 8003158:	58025444 	.word	0x58025444
 800315c:	58025458 	.word	0x58025458
 8003160:	5802546c 	.word	0x5802546c
 8003164:	58025480 	.word	0x58025480
 8003168:	58025494 	.word	0x58025494
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003180:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6d      	ldr	r2, [pc, #436]	@ (800333c <HAL_DMA_Abort+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04a      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6b      	ldr	r2, [pc, #428]	@ (8003340 <HAL_DMA_Abort+0x448>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d045      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <HAL_DMA_Abort+0x44c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a68      	ldr	r2, [pc, #416]	@ (8003348 <HAL_DMA_Abort+0x450>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03b      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a67      	ldr	r2, [pc, #412]	@ (800334c <HAL_DMA_Abort+0x454>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d036      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a65      	ldr	r2, [pc, #404]	@ (8003350 <HAL_DMA_Abort+0x458>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d031      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a64      	ldr	r2, [pc, #400]	@ (8003354 <HAL_DMA_Abort+0x45c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a62      	ldr	r2, [pc, #392]	@ (8003358 <HAL_DMA_Abort+0x460>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a61      	ldr	r2, [pc, #388]	@ (800335c <HAL_DMA_Abort+0x464>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003360 <HAL_DMA_Abort+0x468>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003364 <HAL_DMA_Abort+0x46c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003368 <HAL_DMA_Abort+0x470>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_DMA_Abort+0x474>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a59      	ldr	r2, [pc, #356]	@ (8003370 <HAL_DMA_Abort+0x478>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a58      	ldr	r2, [pc, #352]	@ (8003374 <HAL_DMA_Abort+0x47c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a56      	ldr	r2, [pc, #344]	@ (8003378 <HAL_DMA_Abort+0x480>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <HAL_DMA_Abort+0x33c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e007      	b.n	8003244 <HAL_DMA_Abort+0x34c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003244:	e013      	b.n	800326e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003246:	f7fe ff61 	bl	800210c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d90c      	bls.n	800326e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e12d      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2f      	ldr	r2, [pc, #188]	@ (800333c <HAL_DMA_Abort+0x444>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2d      	ldr	r2, [pc, #180]	@ (8003340 <HAL_DMA_Abort+0x448>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_Abort+0x422>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <HAL_DMA_Abort+0x44c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2a      	ldr	r2, [pc, #168]	@ (8003348 <HAL_DMA_Abort+0x450>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a29      	ldr	r2, [pc, #164]	@ (800334c <HAL_DMA_Abort+0x454>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a27      	ldr	r2, [pc, #156]	@ (8003350 <HAL_DMA_Abort+0x458>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a26      	ldr	r2, [pc, #152]	@ (8003354 <HAL_DMA_Abort+0x45c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a24      	ldr	r2, [pc, #144]	@ (8003358 <HAL_DMA_Abort+0x460>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_DMA_Abort+0x464>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_DMA_Abort+0x468>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_DMA_Abort+0x46c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003368 <HAL_DMA_Abort+0x470>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <HAL_DMA_Abort+0x474>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_DMA_Abort+0x478>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <HAL_DMA_Abort+0x47c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_DMA_Abort+0x480>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_DMA_Abort+0x426>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_DMA_Abort+0x428>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	223f      	movs	r2, #63	@ 0x3f
 8003334:	409a      	lsls	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	e02a      	b.n	8003392 <HAL_DMA_Abort+0x49a>
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a4f      	ldr	r2, [pc, #316]	@ (80034d4 <HAL_DMA_Abort+0x5dc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d072      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4d      	ldr	r2, [pc, #308]	@ (80034d8 <HAL_DMA_Abort+0x5e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d06d      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4c      	ldr	r2, [pc, #304]	@ (80034dc <HAL_DMA_Abort+0x5e4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d068      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4a      	ldr	r2, [pc, #296]	@ (80034e0 <HAL_DMA_Abort+0x5e8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d063      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a49      	ldr	r2, [pc, #292]	@ (80034e4 <HAL_DMA_Abort+0x5ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d05e      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a47      	ldr	r2, [pc, #284]	@ (80034e8 <HAL_DMA_Abort+0x5f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d059      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a46      	ldr	r2, [pc, #280]	@ (80034ec <HAL_DMA_Abort+0x5f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d054      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a44      	ldr	r2, [pc, #272]	@ (80034f0 <HAL_DMA_Abort+0x5f8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04f      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a43      	ldr	r2, [pc, #268]	@ (80034f4 <HAL_DMA_Abort+0x5fc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d04a      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a41      	ldr	r2, [pc, #260]	@ (80034f8 <HAL_DMA_Abort+0x600>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d045      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a40      	ldr	r2, [pc, #256]	@ (80034fc <HAL_DMA_Abort+0x604>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d040      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3e      	ldr	r2, [pc, #248]	@ (8003500 <HAL_DMA_Abort+0x608>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d03b      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3d      	ldr	r2, [pc, #244]	@ (8003504 <HAL_DMA_Abort+0x60c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d036      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3b      	ldr	r2, [pc, #236]	@ (8003508 <HAL_DMA_Abort+0x610>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d031      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3a      	ldr	r2, [pc, #232]	@ (800350c <HAL_DMA_Abort+0x614>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d02c      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a38      	ldr	r2, [pc, #224]	@ (8003510 <HAL_DMA_Abort+0x618>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d027      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	@ (8003514 <HAL_DMA_Abort+0x61c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	@ (8003518 <HAL_DMA_Abort+0x620>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01d      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a34      	ldr	r2, [pc, #208]	@ (800351c <HAL_DMA_Abort+0x624>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <HAL_DMA_Abort+0x628>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a31      	ldr	r2, [pc, #196]	@ (8003524 <HAL_DMA_Abort+0x62c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2f      	ldr	r2, [pc, #188]	@ (8003528 <HAL_DMA_Abort+0x630>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2e      	ldr	r2, [pc, #184]	@ (800352c <HAL_DMA_Abort+0x634>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2c      	ldr	r2, [pc, #176]	@ (8003530 <HAL_DMA_Abort+0x638>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_DMA_Abort+0x58e>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_DMA_Abort+0x590>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003494:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40020010 	.word	0x40020010
 80034d8:	40020028 	.word	0x40020028
 80034dc:	40020040 	.word	0x40020040
 80034e0:	40020058 	.word	0x40020058
 80034e4:	40020070 	.word	0x40020070
 80034e8:	40020088 	.word	0x40020088
 80034ec:	400200a0 	.word	0x400200a0
 80034f0:	400200b8 	.word	0x400200b8
 80034f4:	40020410 	.word	0x40020410
 80034f8:	40020428 	.word	0x40020428
 80034fc:	40020440 	.word	0x40020440
 8003500:	40020458 	.word	0x40020458
 8003504:	40020470 	.word	0x40020470
 8003508:	40020488 	.word	0x40020488
 800350c:	400204a0 	.word	0x400204a0
 8003510:	400204b8 	.word	0x400204b8
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494

08003534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e237      	b.n	80039b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d004      	beq.n	800355c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e22c      	b.n	80039b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_DMA_Abort_IT+0x1a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d04a      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5b      	ldr	r2, [pc, #364]	@ (80036d8 <HAL_DMA_Abort_IT+0x1a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d045      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a59      	ldr	r2, [pc, #356]	@ (80036dc <HAL_DMA_Abort_IT+0x1a8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d040      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a58      	ldr	r2, [pc, #352]	@ (80036e0 <HAL_DMA_Abort_IT+0x1ac>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d03b      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a56      	ldr	r2, [pc, #344]	@ (80036e4 <HAL_DMA_Abort_IT+0x1b0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d036      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a55      	ldr	r2, [pc, #340]	@ (80036e8 <HAL_DMA_Abort_IT+0x1b4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d031      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a53      	ldr	r2, [pc, #332]	@ (80036ec <HAL_DMA_Abort_IT+0x1b8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02c      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a52      	ldr	r2, [pc, #328]	@ (80036f0 <HAL_DMA_Abort_IT+0x1bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d027      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a50      	ldr	r2, [pc, #320]	@ (80036f4 <HAL_DMA_Abort_IT+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4f      	ldr	r2, [pc, #316]	@ (80036f8 <HAL_DMA_Abort_IT+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d01d      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4d      	ldr	r2, [pc, #308]	@ (80036fc <HAL_DMA_Abort_IT+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003700 <HAL_DMA_Abort_IT+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003704 <HAL_DMA_Abort_IT+0x1d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a49      	ldr	r2, [pc, #292]	@ (8003708 <HAL_DMA_Abort_IT+0x1d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a47      	ldr	r2, [pc, #284]	@ (800370c <HAL_DMA_Abort_IT+0x1d8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a46      	ldr	r2, [pc, #280]	@ (8003710 <HAL_DMA_Abort_IT+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_DMA_Abort_IT+0xcc>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_DMA_Abort_IT+0xce>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8086 	beq.w	8003714 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2204      	movs	r2, #4
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2f      	ldr	r2, [pc, #188]	@ (80036d4 <HAL_DMA_Abort_IT+0x1a0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <HAL_DMA_Abort_IT+0x1a4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d045      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <HAL_DMA_Abort_IT+0x1a8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d040      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_DMA_Abort_IT+0x1ac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d03b      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_DMA_Abort_IT+0x1b0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d036      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_DMA_Abort_IT+0x1b4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_DMA_Abort_IT+0x1b8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02c      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_DMA_Abort_IT+0x1bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d027      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_DMA_Abort_IT+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_DMA_Abort_IT+0x1c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d01d      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_DMA_Abort_IT+0x1c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_DMA_Abort_IT+0x1cc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_DMA_Abort_IT+0x1d0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_DMA_Abort_IT+0x1d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_DMA_Abort_IT+0x1d8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_DMA_Abort_IT+0x1dc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <HAL_DMA_Abort_IT+0x18e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e178      	b.n	80039b4 <HAL_DMA_Abort_IT+0x480>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e16f      	b.n	80039b4 <HAL_DMA_Abort_IT+0x480>
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020e 	bic.w	r2, r2, #14
 8003722:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6c      	ldr	r2, [pc, #432]	@ (80038dc <HAL_DMA_Abort_IT+0x3a8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d04a      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_DMA_Abort_IT+0x3ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d045      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a69      	ldr	r2, [pc, #420]	@ (80038e4 <HAL_DMA_Abort_IT+0x3b0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d040      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <HAL_DMA_Abort_IT+0x3b4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d03b      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a66      	ldr	r2, [pc, #408]	@ (80038ec <HAL_DMA_Abort_IT+0x3b8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d036      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a65      	ldr	r2, [pc, #404]	@ (80038f0 <HAL_DMA_Abort_IT+0x3bc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a63      	ldr	r2, [pc, #396]	@ (80038f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a62      	ldr	r2, [pc, #392]	@ (80038f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d027      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a60      	ldr	r2, [pc, #384]	@ (80038fc <HAL_DMA_Abort_IT+0x3c8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5f      	ldr	r2, [pc, #380]	@ (8003900 <HAL_DMA_Abort_IT+0x3cc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5d      	ldr	r2, [pc, #372]	@ (8003904 <HAL_DMA_Abort_IT+0x3d0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a5c      	ldr	r2, [pc, #368]	@ (8003908 <HAL_DMA_Abort_IT+0x3d4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5a      	ldr	r2, [pc, #360]	@ (800390c <HAL_DMA_Abort_IT+0x3d8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a59      	ldr	r2, [pc, #356]	@ (8003910 <HAL_DMA_Abort_IT+0x3dc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a57      	ldr	r2, [pc, #348]	@ (8003914 <HAL_DMA_Abort_IT+0x3e0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_DMA_Abort_IT+0x3e4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <HAL_DMA_Abort_IT+0x2a2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <HAL_DMA_Abort_IT+0x2b2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3c      	ldr	r2, [pc, #240]	@ (80038dc <HAL_DMA_Abort_IT+0x3a8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d072      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3a      	ldr	r2, [pc, #232]	@ (80038e0 <HAL_DMA_Abort_IT+0x3ac>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d06d      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a39      	ldr	r2, [pc, #228]	@ (80038e4 <HAL_DMA_Abort_IT+0x3b0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d068      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a37      	ldr	r2, [pc, #220]	@ (80038e8 <HAL_DMA_Abort_IT+0x3b4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d063      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a36      	ldr	r2, [pc, #216]	@ (80038ec <HAL_DMA_Abort_IT+0x3b8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d05e      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a34      	ldr	r2, [pc, #208]	@ (80038f0 <HAL_DMA_Abort_IT+0x3bc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d059      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d054      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a31      	ldr	r2, [pc, #196]	@ (80038f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04f      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <HAL_DMA_Abort_IT+0x3c8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_DMA_Abort_IT+0x3cc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2d      	ldr	r2, [pc, #180]	@ (8003904 <HAL_DMA_Abort_IT+0x3d0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <HAL_DMA_Abort_IT+0x3d4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2a      	ldr	r2, [pc, #168]	@ (800390c <HAL_DMA_Abort_IT+0x3d8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <HAL_DMA_Abort_IT+0x3dc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a27      	ldr	r2, [pc, #156]	@ (8003914 <HAL_DMA_Abort_IT+0x3e0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_DMA_Abort_IT+0x3e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a24      	ldr	r2, [pc, #144]	@ (800391c <HAL_DMA_Abort_IT+0x3e8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <HAL_DMA_Abort_IT+0x3ec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <HAL_DMA_Abort_IT+0x3f0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_DMA_Abort_IT+0x3f4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_DMA_Abort_IT+0x3f8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_DMA_Abort_IT+0x3fc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <HAL_DMA_Abort_IT+0x400>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <HAL_DMA_Abort_IT+0x404>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d132      	bne.n	800393c <HAL_DMA_Abort_IT+0x408>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e031      	b.n	800393e <HAL_DMA_Abort_IT+0x40a>
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003970:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003988:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003992:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop

080039c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039cc:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <HAL_DMA_IRQHandler+0x1ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	@ (8003b70 <HAL_DMA_IRQHandler+0x1b0>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b74 <HAL_DMA_IRQHandler+0x1b4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_DMA_IRQHandler+0x1b8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_DMA_IRQHandler+0x1bc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_DMA_IRQHandler+0x1c0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a59      	ldr	r2, [pc, #356]	@ (8003b84 <HAL_DMA_IRQHandler+0x1c4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_DMA_IRQHandler+0x1c8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_DMA_IRQHandler+0x1cc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a54      	ldr	r2, [pc, #336]	@ (8003b90 <HAL_DMA_IRQHandler+0x1d0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a53      	ldr	r2, [pc, #332]	@ (8003b94 <HAL_DMA_IRQHandler+0x1d4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a51      	ldr	r2, [pc, #324]	@ (8003b98 <HAL_DMA_IRQHandler+0x1d8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a50      	ldr	r2, [pc, #320]	@ (8003b9c <HAL_DMA_IRQHandler+0x1dc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4a      	ldr	r2, [pc, #296]	@ (8003bac <HAL_DMA_IRQHandler+0x1ec>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a48      	ldr	r2, [pc, #288]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_IRQHandler+0xd6>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 842b 	beq.w	80042f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80a2 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_IRQHandler+0x1b4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_DMA_IRQHandler+0x1b8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d045      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_IRQHandler+0x1bc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d040      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b80 <HAL_DMA_IRQHandler+0x1c0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d03b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_IRQHandler+0x1c4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_DMA_IRQHandler+0x1c8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_IRQHandler+0x1cc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_DMA_IRQHandler+0x1d0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_IRQHandler+0x1d4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_DMA_IRQHandler+0x1d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_IRQHandler+0x1dc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_IRQHandler+0x1ec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d12f      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x1f4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e02e      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x208>
 8003b6a:	bf00      	nop
 8003b6c:	24000004 	.word	0x24000004
 8003b70:	1b4e81b5 	.word	0x1b4e81b5
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2208      	movs	r2, #8
 8003be6:	409a      	lsls	r2, r3
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06e      	beq.n	8003cec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a69      	ldr	r2, [pc, #420]	@ (8003db8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04a      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a67      	ldr	r2, [pc, #412]	@ (8003dbc <HAL_DMA_IRQHandler+0x3fc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d045      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a66      	ldr	r2, [pc, #408]	@ (8003dc0 <HAL_DMA_IRQHandler+0x400>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d040      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a64      	ldr	r2, [pc, #400]	@ (8003dc4 <HAL_DMA_IRQHandler+0x404>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d03b      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a63      	ldr	r2, [pc, #396]	@ (8003dc8 <HAL_DMA_IRQHandler+0x408>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d036      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a61      	ldr	r2, [pc, #388]	@ (8003dcc <HAL_DMA_IRQHandler+0x40c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d031      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a60      	ldr	r2, [pc, #384]	@ (8003dd0 <HAL_DMA_IRQHandler+0x410>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d02c      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <HAL_DMA_IRQHandler+0x414>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d027      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd8 <HAL_DMA_IRQHandler+0x418>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_DMA_IRQHandler+0x41c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5a      	ldr	r2, [pc, #360]	@ (8003de0 <HAL_DMA_IRQHandler+0x420>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_DMA_IRQHandler+0x424>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a57      	ldr	r2, [pc, #348]	@ (8003de8 <HAL_DMA_IRQHandler+0x428>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a55      	ldr	r2, [pc, #340]	@ (8003dec <HAL_DMA_IRQHandler+0x42c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a54      	ldr	r2, [pc, #336]	@ (8003df0 <HAL_DMA_IRQHandler+0x430>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	@ (8003df4 <HAL_DMA_IRQHandler+0x434>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10a      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x304>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e003      	b.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0202 	orr.w	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 808f 	beq.w	8003e20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2c      	ldr	r2, [pc, #176]	@ (8003db8 <HAL_DMA_IRQHandler+0x3f8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_DMA_IRQHandler+0x3fc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <HAL_DMA_IRQHandler+0x400>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_DMA_IRQHandler+0x404>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a26      	ldr	r2, [pc, #152]	@ (8003dc8 <HAL_DMA_IRQHandler+0x408>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <HAL_DMA_IRQHandler+0x40c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <HAL_DMA_IRQHandler+0x410>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <HAL_DMA_IRQHandler+0x414>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <HAL_DMA_IRQHandler+0x418>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <HAL_DMA_IRQHandler+0x41c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_DMA_IRQHandler+0x420>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	@ (8003de4 <HAL_DMA_IRQHandler+0x424>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_DMA_IRQHandler+0x428>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <HAL_DMA_IRQHandler+0x42c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a17      	ldr	r2, [pc, #92]	@ (8003df0 <HAL_DMA_IRQHandler+0x430>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <HAL_DMA_IRQHandler+0x434>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d12a      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x438>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e023      	b.n	8003e00 <HAL_DMA_IRQHandler+0x440>
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a85      	ldr	r2, [pc, #532]	@ (8004050 <HAL_DMA_IRQHandler+0x690>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d04a      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a83      	ldr	r2, [pc, #524]	@ (8004054 <HAL_DMA_IRQHandler+0x694>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d045      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a82      	ldr	r2, [pc, #520]	@ (8004058 <HAL_DMA_IRQHandler+0x698>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d040      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	@ (800405c <HAL_DMA_IRQHandler+0x69c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d03b      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7f      	ldr	r2, [pc, #508]	@ (8004060 <HAL_DMA_IRQHandler+0x6a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d036      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004064 <HAL_DMA_IRQHandler+0x6a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d031      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7c      	ldr	r2, [pc, #496]	@ (8004068 <HAL_DMA_IRQHandler+0x6a8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d02c      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a7a      	ldr	r2, [pc, #488]	@ (800406c <HAL_DMA_IRQHandler+0x6ac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d027      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a79      	ldr	r2, [pc, #484]	@ (8004070 <HAL_DMA_IRQHandler+0x6b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a77      	ldr	r2, [pc, #476]	@ (8004074 <HAL_DMA_IRQHandler+0x6b4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a76      	ldr	r2, [pc, #472]	@ (8004078 <HAL_DMA_IRQHandler+0x6b8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_DMA_IRQHandler+0x6bc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a73      	ldr	r2, [pc, #460]	@ (8004080 <HAL_DMA_IRQHandler+0x6c0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a71      	ldr	r2, [pc, #452]	@ (8004084 <HAL_DMA_IRQHandler+0x6c4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a70      	ldr	r2, [pc, #448]	@ (8004088 <HAL_DMA_IRQHandler+0x6c8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800408c <HAL_DMA_IRQHandler+0x6cc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10a      	bne.n	8003eec <HAL_DMA_IRQHandler+0x52c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e009      	b.n	8003f00 <HAL_DMA_IRQHandler+0x540>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03e      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d024      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e01f      	b.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01b      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
 8003f52:	e016      	b.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8110 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <HAL_DMA_IRQHandler+0x690>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_DMA_IRQHandler+0x694>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <HAL_DMA_IRQHandler+0x698>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_DMA_IRQHandler+0x69c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <HAL_DMA_IRQHandler+0x6a0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_DMA_IRQHandler+0x6a4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <HAL_DMA_IRQHandler+0x6a8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_DMA_IRQHandler+0x6ac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <HAL_DMA_IRQHandler+0x6b0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_DMA_IRQHandler+0x6b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_DMA_IRQHandler+0x6b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_DMA_IRQHandler+0x6bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_DMA_IRQHandler+0x6c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <HAL_DMA_IRQHandler+0x6c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_DMA_IRQHandler+0x6c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a16      	ldr	r2, [pc, #88]	@ (800408c <HAL_DMA_IRQHandler+0x6cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d12b      	bne.n	8004090 <HAL_DMA_IRQHandler+0x6d0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e02a      	b.n	80040a4 <HAL_DMA_IRQHandler+0x6e4>
 800404e:	bf00      	nop
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8087 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2220      	movs	r2, #32
 80040b4:	409a      	lsls	r2, r3
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d139      	bne.n	800413a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0216 	bic.w	r2, r2, #22
 80040d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x736>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0208 	bic.w	r2, r2, #8
 8004104:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	223f      	movs	r2, #63	@ 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 834a 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
          }
          return;
 8004138:	e344      	b.n	80047c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02c      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e027      	b.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e01e      	b.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0210 	bic.w	r2, r2, #16
 8004196:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8306 	beq.w	80047ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8088 	beq.w	80042e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7a      	ldr	r2, [pc, #488]	@ (80043c8 <HAL_DMA_IRQHandler+0xa08>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d04a      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a79      	ldr	r2, [pc, #484]	@ (80043cc <HAL_DMA_IRQHandler+0xa0c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d045      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a77      	ldr	r2, [pc, #476]	@ (80043d0 <HAL_DMA_IRQHandler+0xa10>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d040      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a76      	ldr	r2, [pc, #472]	@ (80043d4 <HAL_DMA_IRQHandler+0xa14>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d03b      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a74      	ldr	r2, [pc, #464]	@ (80043d8 <HAL_DMA_IRQHandler+0xa18>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d036      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a73      	ldr	r2, [pc, #460]	@ (80043dc <HAL_DMA_IRQHandler+0xa1c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d031      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a71      	ldr	r2, [pc, #452]	@ (80043e0 <HAL_DMA_IRQHandler+0xa20>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02c      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a70      	ldr	r2, [pc, #448]	@ (80043e4 <HAL_DMA_IRQHandler+0xa24>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d027      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6e      	ldr	r2, [pc, #440]	@ (80043e8 <HAL_DMA_IRQHandler+0xa28>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6d      	ldr	r2, [pc, #436]	@ (80043ec <HAL_DMA_IRQHandler+0xa2c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01d      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a6b      	ldr	r2, [pc, #428]	@ (80043f0 <HAL_DMA_IRQHandler+0xa30>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6a      	ldr	r2, [pc, #424]	@ (80043f4 <HAL_DMA_IRQHandler+0xa34>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a68      	ldr	r2, [pc, #416]	@ (80043f8 <HAL_DMA_IRQHandler+0xa38>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a67      	ldr	r2, [pc, #412]	@ (80043fc <HAL_DMA_IRQHandler+0xa3c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a65      	ldr	r2, [pc, #404]	@ (8004400 <HAL_DMA_IRQHandler+0xa40>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a64      	ldr	r2, [pc, #400]	@ (8004404 <HAL_DMA_IRQHandler+0xa44>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <HAL_DMA_IRQHandler+0x8ca>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e007      	b.n	800429a <HAL_DMA_IRQHandler+0x8da>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d307      	bcc.n	80042b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f2      	bne.n	800429a <HAL_DMA_IRQHandler+0x8da>
 80042b4:	e000      	b.n	80042b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80042b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80042ce:	e003      	b.n	80042d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8272 	beq.w	80047ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e26c      	b.n	80047ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a43      	ldr	r2, [pc, #268]	@ (8004408 <HAL_DMA_IRQHandler+0xa48>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d022      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a42      	ldr	r2, [pc, #264]	@ (800440c <HAL_DMA_IRQHandler+0xa4c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01d      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a40      	ldr	r2, [pc, #256]	@ (8004410 <HAL_DMA_IRQHandler+0xa50>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d018      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3f      	ldr	r2, [pc, #252]	@ (8004414 <HAL_DMA_IRQHandler+0xa54>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3d      	ldr	r2, [pc, #244]	@ (8004418 <HAL_DMA_IRQHandler+0xa58>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00e      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3c      	ldr	r2, [pc, #240]	@ (800441c <HAL_DMA_IRQHandler+0xa5c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3a      	ldr	r2, [pc, #232]	@ (8004420 <HAL_DMA_IRQHandler+0xa60>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_DMA_IRQHandler+0x984>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a39      	ldr	r2, [pc, #228]	@ (8004424 <HAL_DMA_IRQHandler+0xa64>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d101      	bne.n	8004348 <HAL_DMA_IRQHandler+0x988>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_DMA_IRQHandler+0x98a>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 823f 	beq.w	80047ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2204      	movs	r2, #4
 8004362:	409a      	lsls	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80cd 	beq.w	8004508 <HAL_DMA_IRQHandler+0xb48>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80c7 	beq.w	8004508 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2204      	movs	r2, #4
 8004384:	409a      	lsls	r2, r3
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d049      	beq.n	8004428 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8210 	beq.w	80047c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b0:	e20a      	b.n	80047c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8206 	beq.w	80047c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c4:	e200      	b.n	80047c8 <HAL_DMA_IRQHandler+0xe08>
 80043c6:	bf00      	nop
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d160      	bne.n	80044f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7f      	ldr	r2, [pc, #508]	@ (8004634 <HAL_DMA_IRQHandler+0xc74>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7d      	ldr	r2, [pc, #500]	@ (8004638 <HAL_DMA_IRQHandler+0xc78>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7c      	ldr	r2, [pc, #496]	@ (800463c <HAL_DMA_IRQHandler+0xc7c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7a      	ldr	r2, [pc, #488]	@ (8004640 <HAL_DMA_IRQHandler+0xc80>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a79      	ldr	r2, [pc, #484]	@ (8004644 <HAL_DMA_IRQHandler+0xc84>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a77      	ldr	r2, [pc, #476]	@ (8004648 <HAL_DMA_IRQHandler+0xc88>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a76      	ldr	r2, [pc, #472]	@ (800464c <HAL_DMA_IRQHandler+0xc8c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a74      	ldr	r2, [pc, #464]	@ (8004650 <HAL_DMA_IRQHandler+0xc90>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a73      	ldr	r2, [pc, #460]	@ (8004654 <HAL_DMA_IRQHandler+0xc94>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a71      	ldr	r2, [pc, #452]	@ (8004658 <HAL_DMA_IRQHandler+0xc98>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a70      	ldr	r2, [pc, #448]	@ (800465c <HAL_DMA_IRQHandler+0xc9c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004660 <HAL_DMA_IRQHandler+0xca0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004664 <HAL_DMA_IRQHandler+0xca4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004668 <HAL_DMA_IRQHandler+0xca8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6a      	ldr	r2, [pc, #424]	@ (800466c <HAL_DMA_IRQHandler+0xcac>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xb12>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a68      	ldr	r2, [pc, #416]	@ (8004670 <HAL_DMA_IRQHandler+0xcb0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d108      	bne.n	80044e4 <HAL_DMA_IRQHandler+0xb24>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0208 	bic.w	r2, r2, #8
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e007      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb34>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8165 	beq.w	80047c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004506:	e15f      	b.n	80047c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2202      	movs	r2, #2
 8004512:	409a      	lsls	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80c5 	beq.w	80046a8 <HAL_DMA_IRQHandler+0xce8>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80bf 	beq.w	80046a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2202      	movs	r2, #2
 8004534:	409a      	lsls	r2, r3
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d018      	beq.n	8004576 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 813a 	beq.w	80047cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004560:	e134      	b.n	80047cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8130 	beq.w	80047cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004574:	e12a      	b.n	80047cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8089 	bne.w	8004694 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_DMA_IRQHandler+0xc74>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a29      	ldr	r2, [pc, #164]	@ (8004638 <HAL_DMA_IRQHandler+0xc78>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a28      	ldr	r2, [pc, #160]	@ (800463c <HAL_DMA_IRQHandler+0xc7c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a26      	ldr	r2, [pc, #152]	@ (8004640 <HAL_DMA_IRQHandler+0xc80>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <HAL_DMA_IRQHandler+0xc84>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a23      	ldr	r2, [pc, #140]	@ (8004648 <HAL_DMA_IRQHandler+0xc88>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_DMA_IRQHandler+0xc8c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <HAL_DMA_IRQHandler+0xc90>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004654 <HAL_DMA_IRQHandler+0xc94>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <HAL_DMA_IRQHandler+0xc98>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <HAL_DMA_IRQHandler+0xc9c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004660 <HAL_DMA_IRQHandler+0xca0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_DMA_IRQHandler+0xca4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a17      	ldr	r2, [pc, #92]	@ (8004668 <HAL_DMA_IRQHandler+0xca8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a16      	ldr	r2, [pc, #88]	@ (800466c <HAL_DMA_IRQHandler+0xcac>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_IRQHandler+0xc62>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_DMA_IRQHandler+0xcb0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d128      	bne.n	8004674 <HAL_DMA_IRQHandler+0xcb4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0214 	bic.w	r2, r2, #20
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e027      	b.n	8004684 <HAL_DMA_IRQHandler+0xcc4>
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 020a 	bic.w	r2, r2, #10
 8004682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8097 	beq.w	80047cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a6:	e091      	b.n	80047cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2208      	movs	r2, #8
 80046b2:	409a      	lsls	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8088 	beq.w	80047ce <HAL_DMA_IRQHandler+0xe0e>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8082 	beq.w	80047ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a41      	ldr	r2, [pc, #260]	@ (80047d4 <HAL_DMA_IRQHandler+0xe14>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d04a      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <HAL_DMA_IRQHandler+0xe18>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d045      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3e      	ldr	r2, [pc, #248]	@ (80047dc <HAL_DMA_IRQHandler+0xe1c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d040      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3c      	ldr	r2, [pc, #240]	@ (80047e0 <HAL_DMA_IRQHandler+0xe20>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03b      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	@ (80047e4 <HAL_DMA_IRQHandler+0xe24>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d036      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a39      	ldr	r2, [pc, #228]	@ (80047e8 <HAL_DMA_IRQHandler+0xe28>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d031      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a38      	ldr	r2, [pc, #224]	@ (80047ec <HAL_DMA_IRQHandler+0xe2c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02c      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a36      	ldr	r2, [pc, #216]	@ (80047f0 <HAL_DMA_IRQHandler+0xe30>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d027      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a35      	ldr	r2, [pc, #212]	@ (80047f4 <HAL_DMA_IRQHandler+0xe34>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <HAL_DMA_IRQHandler+0xe38>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01d      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <HAL_DMA_IRQHandler+0xe3c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a30      	ldr	r2, [pc, #192]	@ (8004800 <HAL_DMA_IRQHandler+0xe40>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2f      	ldr	r2, [pc, #188]	@ (8004804 <HAL_DMA_IRQHandler+0xe44>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <HAL_DMA_IRQHandler+0xe48>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2c      	ldr	r2, [pc, #176]	@ (800480c <HAL_DMA_IRQHandler+0xe4c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_DMA_IRQHandler+0xdaa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <HAL_DMA_IRQHandler+0xe50>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d108      	bne.n	800477c <HAL_DMA_IRQHandler+0xdbc>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 021c 	bic.w	r2, r2, #28
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e007      	b.n	800478c <HAL_DMA_IRQHandler+0xdcc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020e 	bic.w	r2, r2, #14
 800478a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
 80047c2:	e004      	b.n	80047ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80047c4:	bf00      	nop
 80047c6:	e002      	b.n	80047ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047ce:	3728      	adds	r7, #40	@ 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40020010 	.word	0x40020010
 80047d8:	40020028 	.word	0x40020028
 80047dc:	40020040 	.word	0x40020040
 80047e0:	40020058 	.word	0x40020058
 80047e4:	40020070 	.word	0x40020070
 80047e8:	40020088 	.word	0x40020088
 80047ec:	400200a0 	.word	0x400200a0
 80047f0:	400200b8 	.word	0x400200b8
 80047f4:	40020410 	.word	0x40020410
 80047f8:	40020428 	.word	0x40020428
 80047fc:	40020440 	.word	0x40020440
 8004800:	40020458 	.word	0x40020458
 8004804:	40020470 	.word	0x40020470
 8004808:	40020488 	.word	0x40020488
 800480c:	400204a0 	.word	0x400204a0
 8004810:	400204b8 	.word	0x400204b8

08004814 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a48 <DMA_SetConfig+0x21c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d072      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7d      	ldr	r2, [pc, #500]	@ (8004a4c <DMA_SetConfig+0x220>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d06d      	beq.n	8004936 <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a50 <DMA_SetConfig+0x224>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d068      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <DMA_SetConfig+0x228>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d063      	beq.n	8004936 <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a79      	ldr	r2, [pc, #484]	@ (8004a58 <DMA_SetConfig+0x22c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d05e      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a77      	ldr	r2, [pc, #476]	@ (8004a5c <DMA_SetConfig+0x230>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d059      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a76      	ldr	r2, [pc, #472]	@ (8004a60 <DMA_SetConfig+0x234>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d054      	beq.n	8004936 <DMA_SetConfig+0x10a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a74      	ldr	r2, [pc, #464]	@ (8004a64 <DMA_SetConfig+0x238>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04f      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a73      	ldr	r2, [pc, #460]	@ (8004a68 <DMA_SetConfig+0x23c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d04a      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a71      	ldr	r2, [pc, #452]	@ (8004a6c <DMA_SetConfig+0x240>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d045      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a70      	ldr	r2, [pc, #448]	@ (8004a70 <DMA_SetConfig+0x244>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d040      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <DMA_SetConfig+0x248>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d03b      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004a78 <DMA_SetConfig+0x24c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d036      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <DMA_SetConfig+0x250>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d031      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a80 <DMA_SetConfig+0x254>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d02c      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a68      	ldr	r2, [pc, #416]	@ (8004a84 <DMA_SetConfig+0x258>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d027      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a67      	ldr	r2, [pc, #412]	@ (8004a88 <DMA_SetConfig+0x25c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	@ (8004a8c <DMA_SetConfig+0x260>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <DMA_SetConfig+0x10a>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a64      	ldr	r2, [pc, #400]	@ (8004a90 <DMA_SetConfig+0x264>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <DMA_SetConfig+0x268>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <DMA_SetConfig+0x10a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a61      	ldr	r2, [pc, #388]	@ (8004a98 <DMA_SetConfig+0x26c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a9c <DMA_SetConfig+0x270>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <DMA_SetConfig+0x10a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa0 <DMA_SetConfig+0x274>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa4 <DMA_SetConfig+0x278>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <DMA_SetConfig+0x10e>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <DMA_SetConfig+0x110>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004948:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800495a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	@ (8004a48 <DMA_SetConfig+0x21c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a38      	ldr	r2, [pc, #224]	@ (8004a4c <DMA_SetConfig+0x220>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a36      	ldr	r2, [pc, #216]	@ (8004a50 <DMA_SetConfig+0x224>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <DMA_SetConfig+0x228>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <DMA_SetConfig+0x22c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <DMA_SetConfig+0x230>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <DMA_SetConfig+0x234>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <DMA_SetConfig+0x238>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a68 <DMA_SetConfig+0x23c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <DMA_SetConfig+0x240>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a70 <DMA_SetConfig+0x244>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a29      	ldr	r2, [pc, #164]	@ (8004a74 <DMA_SetConfig+0x248>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a27      	ldr	r2, [pc, #156]	@ (8004a78 <DMA_SetConfig+0x24c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a26      	ldr	r2, [pc, #152]	@ (8004a7c <DMA_SetConfig+0x250>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a24      	ldr	r2, [pc, #144]	@ (8004a80 <DMA_SetConfig+0x254>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <DMA_SetConfig+0x1d0>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <DMA_SetConfig+0x258>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <DMA_SetConfig+0x1d4>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <DMA_SetConfig+0x1d6>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d059      	beq.n	8004aba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	223f      	movs	r2, #63	@ 0x3f
 8004a10:	409a      	lsls	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d138      	bne.n	8004aa8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a46:	e086      	b.n	8004b56 <DMA_SetConfig+0x32a>
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8
 8004a88:	58025408 	.word	0x58025408
 8004a8c:	5802541c 	.word	0x5802541c
 8004a90:	58025430 	.word	0x58025430
 8004a94:	58025444 	.word	0x58025444
 8004a98:	58025458 	.word	0x58025458
 8004a9c:	5802546c 	.word	0x5802546c
 8004aa0:	58025480 	.word	0x58025480
 8004aa4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	e04d      	b.n	8004b56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <DMA_SetConfig+0x338>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a27      	ldr	r2, [pc, #156]	@ (8004b68 <DMA_SetConfig+0x33c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	@ (8004b6c <DMA_SetConfig+0x340>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a24      	ldr	r2, [pc, #144]	@ (8004b70 <DMA_SetConfig+0x344>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <DMA_SetConfig+0x348>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a21      	ldr	r2, [pc, #132]	@ (8004b78 <DMA_SetConfig+0x34c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a20      	ldr	r2, [pc, #128]	@ (8004b7c <DMA_SetConfig+0x350>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <DMA_SetConfig+0x2de>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1e      	ldr	r2, [pc, #120]	@ (8004b80 <DMA_SetConfig+0x354>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <DMA_SetConfig+0x2e2>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <DMA_SetConfig+0x2e4>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d020      	beq.n	8004b56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d108      	bne.n	8004b46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	60da      	str	r2, [r3, #12]
}
 8004b44:	e007      	b.n	8004b56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025430 	.word	0x58025430
 8004b70:	58025444 	.word	0x58025444
 8004b74:	58025458 	.word	0x58025458
 8004b78:	5802546c 	.word	0x5802546c
 8004b7c:	58025480 	.word	0x58025480
 8004b80:	58025494 	.word	0x58025494

08004b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a42      	ldr	r2, [pc, #264]	@ (8004c9c <DMA_CalcBaseAndBitshift+0x118>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca8 <DMA_CalcBaseAndBitshift+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cac <DMA_CalcBaseAndBitshift+0x128>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cb0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a39      	ldr	r2, [pc, #228]	@ (8004cb4 <DMA_CalcBaseAndBitshift+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a38      	ldr	r2, [pc, #224]	@ (8004cb8 <DMA_CalcBaseAndBitshift+0x134>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a36      	ldr	r2, [pc, #216]	@ (8004cbc <DMA_CalcBaseAndBitshift+0x138>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a35      	ldr	r2, [pc, #212]	@ (8004cc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <DMA_CalcBaseAndBitshift+0x140>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a32      	ldr	r2, [pc, #200]	@ (8004cc8 <DMA_CalcBaseAndBitshift+0x144>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	@ (8004ccc <DMA_CalcBaseAndBitshift+0x148>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <DMA_CalcBaseAndBitshift+0x150>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <DMA_CalcBaseAndBitshift+0xa8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd8 <DMA_CalcBaseAndBitshift+0x154>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <DMA_CalcBaseAndBitshift+0xac>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <DMA_CalcBaseAndBitshift+0xae>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d024      	beq.n	8004c80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3b10      	subs	r3, #16
 8004c3e:	4a27      	ldr	r2, [pc, #156]	@ (8004cdc <DMA_CalcBaseAndBitshift+0x158>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	4a24      	ldr	r2, [pc, #144]	@ (8004ce0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c50:	5cd3      	ldrb	r3, [r2, r3]
 8004c52:	461a      	mov	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d908      	bls.n	8004c70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c6e:	e00d      	b.n	8004c8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c7e:	e005      	b.n	8004c8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40020010 	.word	0x40020010
 8004ca0:	40020028 	.word	0x40020028
 8004ca4:	40020040 	.word	0x40020040
 8004ca8:	40020058 	.word	0x40020058
 8004cac:	40020070 	.word	0x40020070
 8004cb0:	40020088 	.word	0x40020088
 8004cb4:	400200a0 	.word	0x400200a0
 8004cb8:	400200b8 	.word	0x400200b8
 8004cbc:	40020410 	.word	0x40020410
 8004cc0:	40020428 	.word	0x40020428
 8004cc4:	40020440 	.word	0x40020440
 8004cc8:	40020458 	.word	0x40020458
 8004ccc:	40020470 	.word	0x40020470
 8004cd0:	40020488 	.word	0x40020488
 8004cd4:	400204a0 	.word	0x400204a0
 8004cd8:	400204b8 	.word	0x400204b8
 8004cdc:	aaaaaaab 	.word	0xaaaaaaab
 8004ce0:	08018bb4 	.word	0x08018bb4
 8004ce4:	fffffc00 	.word	0xfffffc00

08004ce8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d120      	bne.n	8004d3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d858      	bhi.n	8004db6 <DMA_CheckFifoParam+0xce>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <DMA_CheckFifoParam+0x24>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d2f 	.word	0x08004d2f
 8004d14:	08004d1d 	.word	0x08004d1d
 8004d18:	08004db7 	.word	0x08004db7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d048      	beq.n	8004dba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d2c:	e045      	b.n	8004dba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d36:	d142      	bne.n	8004dbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d3c:	e03f      	b.n	8004dbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d46:	d123      	bne.n	8004d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d838      	bhi.n	8004dc2 <DMA_CheckFifoParam+0xda>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <DMA_CheckFifoParam+0x70>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d6f 	.word	0x08004d6f
 8004d60:	08004d69 	.word	0x08004d69
 8004d64:	08004d81 	.word	0x08004d81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d6c:	e030      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d025      	beq.n	8004dc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d7e:	e022      	b.n	8004dc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d88:	d11f      	bne.n	8004dca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d8e:	e01c      	b.n	8004dca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d902      	bls.n	8004d9e <DMA_CheckFifoParam+0xb6>
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d003      	beq.n	8004da4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d9c:	e018      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
        break;
 8004da2:	e015      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00e      	beq.n	8004dce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
    break;
 8004db4:	e00b      	b.n	8004dce <DMA_CheckFifoParam+0xe6>
        break;
 8004db6:	bf00      	nop
 8004db8:	e00a      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e008      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e006      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e004      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
    break;
 8004dce:	bf00      	nop
    }
  }

  return status;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a38      	ldr	r2, [pc, #224]	@ (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a36      	ldr	r2, [pc, #216]	@ (8004ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a33      	ldr	r2, [pc, #204]	@ (8004ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01a      	beq.n	8004e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	3b08      	subs	r3, #8
 8004e50:	4a28      	ldr	r2, [pc, #160]	@ (8004ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4b26      	ldr	r3, [pc, #152]	@ (8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a24      	ldr	r2, [pc, #144]	@ (8004efc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2201      	movs	r2, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e7c:	e024      	b.n	8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3b10      	subs	r3, #16
 8004e86:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d806      	bhi.n	8004ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d902      	bls.n	8004ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4b18      	ldr	r3, [pc, #96]	@ (8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004eb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	58025408 	.word	0x58025408
 8004ed8:	5802541c 	.word	0x5802541c
 8004edc:	58025430 	.word	0x58025430
 8004ee0:	58025444 	.word	0x58025444
 8004ee4:	58025458 	.word	0x58025458
 8004ee8:	5802546c 	.word	0x5802546c
 8004eec:	58025480 	.word	0x58025480
 8004ef0:	58025494 	.word	0x58025494
 8004ef4:	cccccccd 	.word	0xcccccccd
 8004ef8:	16009600 	.word	0x16009600
 8004efc:	58025880 	.word	0x58025880
 8004f00:	aaaaaaab 	.word	0xaaaaaaab
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	4002040f 	.word	0x4002040f
 8004f0c:	10008200 	.word	0x10008200
 8004f10:	40020880 	.word	0x40020880

08004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04a      	beq.n	8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d847      	bhi.n	8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a25      	ldr	r2, [pc, #148]	@ (8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a22      	ldr	r2, [pc, #136]	@ (8004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a21      	ldr	r2, [pc, #132]	@ (8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f9e:	e009      	b.n	8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004fb2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	2201      	movs	r2, #1
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494
 8004fec:	1600963f 	.word	0x1600963f
 8004ff0:	58025940 	.word	0x58025940
 8004ff4:	1000823f 	.word	0x1000823f
 8004ff8:	40020940 	.word	0x40020940

08004ffc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0e3      	b.n	80051d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2223      	movs	r2, #35	@ 0x23
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb ff99 	bl	8000f58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	4b6e      	ldr	r3, [pc, #440]	@ (80051e0 <HAL_ETH_Init+0x1e4>)
 8005028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800502c:	4a6c      	ldr	r2, [pc, #432]	@ (80051e0 <HAL_ETH_Init+0x1e4>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005036:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <HAL_ETH_Init+0x1e4>)
 8005038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7a1b      	ldrb	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800504c:	2000      	movs	r0, #0
 800504e:	f7fd f899 	bl	8002184 <HAL_SYSCFG_ETHInterfaceSelect>
 8005052:	e003      	b.n	800505c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005054:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005058:	f7fd f894 	bl	8002184 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800505c:	4b61      	ldr	r3, [pc, #388]	@ (80051e4 <HAL_ETH_Init+0x1e8>)
 800505e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005078:	f7fd f848 	bl	800210c <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800507e:	e011      	b.n	80050a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005080:	f7fd f844 	bl	800210c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800508e:	d909      	bls.n	80050a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	22e0      	movs	r2, #224	@ 0xe0
 800509c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e098      	b.n	80051d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e4      	bne.n	8005080 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f89e 	bl	80051f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80050bc:	f001 feba 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a49      	ldr	r2, [pc, #292]	@ (80051e8 <HAL_ETH_Init+0x1ec>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	0c9a      	lsrs	r2, r3, #18
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3a01      	subs	r2, #1
 80050d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa81 	bl	80055dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80050e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	22e0      	movs	r2, #224	@ 0xe0
 8005112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e05d      	b.n	80051d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005122:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005126:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <HAL_ETH_Init+0x1f0>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6952      	ldr	r2, [r2, #20]
 800512e:	0051      	lsls	r1, r2, #1
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	430b      	orrs	r3, r1
 8005136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800513a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fae9 	bl	8005716 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb2f 	bl	80057a8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	3305      	adds	r3, #5
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	3303      	adds	r3, #3
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	061a      	lsls	r2, r3, #24
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	3302      	adds	r3, #2
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	3301      	adds	r3, #1
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005188:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005196:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005198:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <HAL_ETH_Init+0x1f4>)
 80051aa:	430b      	orrs	r3, r1
 80051ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <HAL_ETH_Init+0x1f8>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2210      	movs	r2, #16
 80051d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	58000400 	.word	0x58000400
 80051e8:	431bde83 	.word	0x431bde83
 80051ec:	ffff8001 	.word	0xffff8001
 80051f0:	0c020060 	.word	0x0c020060
 80051f4:	0c20c000 	.word	0x0c20c000

080051f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005208:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005210:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005212:	f001 fe0f 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8005216:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1a      	ldr	r2, [pc, #104]	@ (8005284 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d804      	bhi.n	800522a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e022      	b.n	8005270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <HAL_ETH_SetMDIOClockRange+0x90>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d204      	bcs.n	800523c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e019      	b.n	8005270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a13      	ldr	r2, [pc, #76]	@ (800528c <HAL_ETH_SetMDIOClockRange+0x94>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d915      	bls.n	8005270 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a12      	ldr	r2, [pc, #72]	@ (8005290 <HAL_ETH_SetMDIOClockRange+0x98>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d804      	bhi.n	8005256 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e00c      	b.n	8005270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a0e      	ldr	r2, [pc, #56]	@ (8005294 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d804      	bhi.n	8005268 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e003      	b.n	8005270 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	02160ebf 	.word	0x02160ebf
 8005288:	03938700 	.word	0x03938700
 800528c:	05f5e0ff 	.word	0x05f5e0ff
 8005290:	08f0d17f 	.word	0x08f0d17f
 8005294:	0ee6b27f 	.word	0x0ee6b27f

08005298 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80052aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	791b      	ldrb	r3, [r3, #4]
 80052b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80052b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	7b1b      	ldrb	r3, [r3, #12]
 80052b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80052ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	7b5b      	ldrb	r3, [r3, #13]
 80052c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	7b9b      	ldrb	r3, [r3, #14]
 80052c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80052ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	7bdb      	ldrb	r3, [r3, #15]
 80052d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	7c12      	ldrb	r2, [r2, #16]
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d102      	bne.n	80052e2 <ETH_SetMACConfig+0x4a>
 80052dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80052e0:	e000      	b.n	80052e4 <ETH_SetMACConfig+0x4c>
 80052e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7c52      	ldrb	r2, [r2, #17]
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d102      	bne.n	80052f4 <ETH_SetMACConfig+0x5c>
 80052ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052f2:	e000      	b.n	80052f6 <ETH_SetMACConfig+0x5e>
 80052f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	7c9b      	ldrb	r3, [r3, #18]
 80052fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005304:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800530a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	7f1b      	ldrb	r3, [r3, #28]
 8005310:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7f5b      	ldrb	r3, [r3, #29]
 8005318:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800531a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	7f92      	ldrb	r2, [r2, #30]
 8005320:	2a00      	cmp	r2, #0
 8005322:	d102      	bne.n	800532a <ETH_SetMACConfig+0x92>
 8005324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005328:	e000      	b.n	800532c <ETH_SetMACConfig+0x94>
 800532a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800532c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	7fdb      	ldrb	r3, [r3, #31]
 8005332:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005334:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	f892 2020 	ldrb.w	r2, [r2, #32]
 800533c:	2a00      	cmp	r2, #0
 800533e:	d102      	bne.n	8005346 <ETH_SetMACConfig+0xae>
 8005340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005344:	e000      	b.n	8005348 <ETH_SetMACConfig+0xb0>
 8005346:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005348:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800534e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005356:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005358:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b56      	ldr	r3, [pc, #344]	@ (80054c4 <ETH_SetMACConfig+0x22c>)
 800536a:	4013      	ands	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	430b      	orrs	r3, r1
 8005374:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005382:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005384:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800538c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800538e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005396:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005398:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	d102      	bne.n	80053aa <ETH_SetMACConfig+0x112>
 80053a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053a8:	e000      	b.n	80053ac <ETH_SetMACConfig+0x114>
 80053aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80053ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	4b42      	ldr	r3, [pc, #264]	@ (80054c8 <ETH_SetMACConfig+0x230>)
 80053be:	4013      	ands	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <ETH_SetMACConfig+0x234>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80053f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005402:	2a00      	cmp	r2, #0
 8005404:	d101      	bne.n	800540a <ETH_SetMACConfig+0x172>
 8005406:	2280      	movs	r2, #128	@ 0x80
 8005408:	e000      	b.n	800540c <ETH_SetMACConfig+0x174>
 800540a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800540c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005412:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800541e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005422:	4013      	ands	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	430b      	orrs	r3, r1
 800542c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005434:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800543c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	f023 0103 	bic.w	r1, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	430a      	orrs	r2, r1
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005462:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800547e:	2a00      	cmp	r2, #0
 8005480:	d101      	bne.n	8005486 <ETH_SetMACConfig+0x1ee>
 8005482:	2240      	movs	r2, #64	@ 0x40
 8005484:	e000      	b.n	8005488 <ETH_SetMACConfig+0x1f0>
 8005486:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005488:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005490:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800549a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80054a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00048083 	.word	0x00048083
 80054c8:	c0f88000 	.word	0xc0f88000
 80054cc:	fffffef0 	.word	0xfffffef0

080054d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b38      	ldr	r3, [pc, #224]	@ (80055c8 <ETH_SetDMAConfig+0xf8>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	430b      	orrs	r3, r1
 80054f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005502:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	7b1b      	ldrb	r3, [r3, #12]
 8005508:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b2c      	ldr	r3, [pc, #176]	@ (80055cc <ETH_SetDMAConfig+0xfc>)
 800551a:	4013      	ands	r3, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	430b      	orrs	r3, r1
 8005524:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005528:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	7b5b      	ldrb	r3, [r3, #13]
 800552e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005540:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005544:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <ETH_SetDMAConfig+0x100>)
 8005546:	4013      	ands	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	430b      	orrs	r3, r1
 8005550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005554:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	7d1b      	ldrb	r3, [r3, #20]
 8005560:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005562:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	7f5b      	ldrb	r3, [r3, #29]
 8005568:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005576:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800557a:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <ETH_SetDMAConfig+0x104>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	430b      	orrs	r3, r1
 8005586:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800558a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	7f1b      	ldrb	r3, [r3, #28]
 8005592:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80055a8:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <ETH_SetDMAConfig+0x108>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055b8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	ffff87fd 	.word	0xffff87fd
 80055cc:	ffff2ffe 	.word	0xffff2ffe
 80055d0:	fffec000 	.word	0xfffec000
 80055d4:	ffc0efef 	.word	0xffc0efef
 80055d8:	7fc0ffff 	.word	0x7fc0ffff

080055dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b0a4      	sub	sp, #144	@ 0x90
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055ea:	2300      	movs	r3, #0
 80055ec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800561c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005624:	2300      	movs	r3, #0
 8005626:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005634:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005638:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800563a:	2300      	movs	r3, #0
 800563c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005640:	2300      	movs	r3, #0
 8005642:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800564a:	2300      	movs	r3, #0
 800564c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005656:	2300      	movs	r3, #0
 8005658:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800565a:	2300      	movs	r3, #0
 800565c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800565e:	2300      	movs	r3, #0
 8005660:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005674:	2320      	movs	r3, #32
 8005676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005680:	2300      	movs	r3, #0
 8005682:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005686:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800568a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800568c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005690:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005692:	2300      	movs	r3, #0
 8005694:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005698:	2302      	movs	r3, #2
 800569a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80056b6:	2300      	movs	r3, #0
 80056b8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff fde6 	bl	8005298 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80056d0:	2301      	movs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80056fc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fee1 	bl	80054d0 <ETH_SetDMAConfig>
}
 800570e:	bf00      	nop
 8005710:	3790      	adds	r7, #144	@ 0x90
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e01d      	b.n	8005760 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68d9      	ldr	r1, [r3, #12]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	3206      	adds	r2, #6
 8005756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b03      	cmp	r3, #3
 8005764:	d9de      	bls.n	8005724 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005774:	461a      	mov	r2, r3
 8005776:	2303      	movs	r3, #3
 8005778:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005788:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005798:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e023      	b.n	80057fe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6919      	ldr	r1, [r3, #16]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	3212      	adds	r2, #18
 80057f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d9d8      	bls.n	80057b6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582a:	461a      	mov	r2, r3
 800582c:	2303      	movs	r3, #3
 800582e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800583e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005852:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005872:	4b89      	ldr	r3, [pc, #548]	@ (8005a98 <HAL_GPIO_Init+0x234>)
 8005874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005876:	e194      	b.n	8005ba2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8186 	beq.w	8005b9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d005      	beq.n	80058a8 <HAL_GPIO_Init+0x44>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d130      	bne.n	800590a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058de:	2201      	movs	r2, #1
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0201 	and.w	r2, r3, #1
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d017      	beq.n	8005946 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d123      	bne.n	800599a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	08da      	lsrs	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3208      	adds	r2, #8
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	08da      	lsrs	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3208      	adds	r2, #8
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	2203      	movs	r2, #3
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0203 	and.w	r2, r3, #3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80e0 	beq.w	8005b9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059dc:	4b2f      	ldr	r3, [pc, #188]	@ (8005a9c <HAL_GPIO_Init+0x238>)
 80059de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059e2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a9c <HAL_GPIO_Init+0x238>)
 80059e4:	f043 0302 	orr.w	r3, r3, #2
 80059e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059ec:	4b2b      	ldr	r3, [pc, #172]	@ (8005a9c <HAL_GPIO_Init+0x238>)
 80059ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fa:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <HAL_GPIO_Init+0x23c>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a20      	ldr	r2, [pc, #128]	@ (8005aa4 <HAL_GPIO_Init+0x240>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d052      	beq.n	8005acc <HAL_GPIO_Init+0x268>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <HAL_GPIO_Init+0x244>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <HAL_GPIO_Init+0x22e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	@ (8005aac <HAL_GPIO_Init+0x248>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02b      	beq.n	8005a8e <HAL_GPIO_Init+0x22a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <HAL_GPIO_Init+0x24c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d025      	beq.n	8005a8a <HAL_GPIO_Init+0x226>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <HAL_GPIO_Init+0x250>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <HAL_GPIO_Init+0x222>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <HAL_GPIO_Init+0x254>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d019      	beq.n	8005a82 <HAL_GPIO_Init+0x21e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <HAL_GPIO_Init+0x258>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_GPIO_Init+0x21a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <HAL_GPIO_Init+0x25c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00d      	beq.n	8005a7a <HAL_GPIO_Init+0x216>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <HAL_GPIO_Init+0x260>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <HAL_GPIO_Init+0x212>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <HAL_GPIO_Init+0x264>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_GPIO_Init+0x20e>
 8005a6e:	2309      	movs	r3, #9
 8005a70:	e02d      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a72:	230a      	movs	r3, #10
 8005a74:	e02b      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a76:	2308      	movs	r3, #8
 8005a78:	e029      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	e027      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a7e:	2306      	movs	r3, #6
 8005a80:	e025      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a82:	2305      	movs	r3, #5
 8005a84:	e023      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e021      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e01f      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e01d      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e01b      	b.n	8005ace <HAL_GPIO_Init+0x26a>
 8005a96:	bf00      	nop
 8005a98:	58000080 	.word	0x58000080
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	58000400 	.word	0x58000400
 8005aa4:	58020000 	.word	0x58020000
 8005aa8:	58020400 	.word	0x58020400
 8005aac:	58020800 	.word	0x58020800
 8005ab0:	58020c00 	.word	0x58020c00
 8005ab4:	58021000 	.word	0x58021000
 8005ab8:	58021400 	.word	0x58021400
 8005abc:	58021800 	.word	0x58021800
 8005ac0:	58021c00 	.word	0x58021c00
 8005ac4:	58022000 	.word	0x58022000
 8005ac8:	58022400 	.word	0x58022400
 8005acc:	2300      	movs	r3, #0
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	f002 0203 	and.w	r2, r2, #3
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4093      	lsls	r3, r2
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ade:	4938      	ldr	r1, [pc, #224]	@ (8005bc0 <HAL_GPIO_Init+0x35c>)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f47f ae63 	bne.w	8005878 <HAL_GPIO_Init+0x14>
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	3724      	adds	r7, #36	@ 0x24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	58000400 	.word	0x58000400

08005bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bd4:	787b      	ldrb	r3, [r7, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bda:	887a      	ldrh	r2, [r7, #2]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005be0:	e003      	b.n	8005bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005be2:	887b      	ldrh	r3, [r7, #2]
 8005be4:	041a      	lsls	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	619a      	str	r2, [r3, #24]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	041a      	lsls	r2, r3, #16
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	43d9      	mvns	r1, r3
 8005c14:	887b      	ldrh	r3, [r7, #2]
 8005c16:	400b      	ands	r3, r1
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	619a      	str	r2, [r3, #24]
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af02      	add	r7, sp, #8
 8005c30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0fe      	b.n	8005e3a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fc f965 	bl	8001f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f005 fbb8 	bl	800b3d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	7c1a      	ldrb	r2, [r3, #16]
 8005c70:	f88d 2000 	strb.w	r2, [sp]
 8005c74:	3304      	adds	r3, #4
 8005c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c78:	f005 fb3c 	bl	800b2f4 <USB_CoreInit>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0d5      	b.n	8005e3a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f005 fbb0 	bl	800b3fa <USB_SetCurrentMode>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0c6      	b.n	8005e3a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
 8005cb0:	e04a      	b.n	8005d48 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cb2:	7bfa      	ldrb	r2, [r7, #15]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3315      	adds	r3, #21
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cc6:	7bfa      	ldrb	r2, [r7, #15]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	b298      	uxth	r0, r3
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	332e      	adds	r3, #46	@ 0x2e
 8005cee:	4602      	mov	r2, r0
 8005cf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3318      	adds	r3, #24
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	331c      	adds	r3, #28
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d1a:	7bfa      	ldrb	r2, [r7, #15]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3320      	adds	r3, #32
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3324      	adds	r3, #36	@ 0x24
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	3301      	adds	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	791b      	ldrb	r3, [r3, #4]
 8005d4c:	7bfa      	ldrb	r2, [r7, #15]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3af      	bcc.n	8005cb2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
 8005d56:	e044      	b.n	8005de2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d58:	7bfa      	ldrb	r2, [r7, #15]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d80:	7bfa      	ldrb	r2, [r7, #15]
 8005d82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005db0:	7bfa      	ldrb	r2, [r7, #15]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dc6:	7bfa      	ldrb	r2, [r7, #15]
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	3301      	adds	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d3b5      	bcc.n	8005d58 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7c1a      	ldrb	r2, [r3, #16]
 8005df4:	f88d 2000 	strb.w	r2, [sp]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dfc:	f005 fb4a 	bl	800b494 <USB_DevInit>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e013      	b.n	8005e3a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7b1b      	ldrb	r3, [r3, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f80b 	bl	8005e44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f005 fd05 	bl	800b842 <USB_DevDisconnect>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e72:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	10000003 	.word	0x10000003

08005e8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e94:	4b19      	ldr	r3, [pc, #100]	@ (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ea0:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e01f      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e01d      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005eb6:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f023 0207 	bic.w	r2, r3, #7
 8005ebe:	490f      	ldr	r1, [pc, #60]	@ (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ec6:	f7fc f921 	bl	800210c <HAL_GetTick>
 8005eca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ecc:	e009      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ece:	f7fc f91d 	bl	800210c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005edc:	d901      	bls.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e007      	b.n	8005ef2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee2:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <HAL_PWREx_ConfigSupply+0x70>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eee:	d1ee      	bne.n	8005ece <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	58024800 	.word	0x58024800

08005f00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a04      	ldr	r2, [pc, #16]	@ (8005f1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f0e:	60d3      	str	r3, [r2, #12]
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	58024800 	.word	0x58024800

08005f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	@ 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f000 bc48 	b.w	80067c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8088 	beq.w	8006052 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f42:	4b99      	ldr	r3, [pc, #612]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f4c:	4b96      	ldr	r3, [pc, #600]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d007      	beq.n	8005f68 <HAL_RCC_OscConfig+0x48>
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2b18      	cmp	r3, #24
 8005f5c:	d111      	bne.n	8005f82 <HAL_RCC_OscConfig+0x62>
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d10c      	bne.n	8005f82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f68:	4b8f      	ldr	r3, [pc, #572]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d06d      	beq.n	8006050 <HAL_RCC_OscConfig+0x130>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d169      	bne.n	8006050 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f000 bc21 	b.w	80067c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8a:	d106      	bne.n	8005f9a <HAL_RCC_OscConfig+0x7a>
 8005f8c:	4b86      	ldr	r3, [pc, #536]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a85      	ldr	r2, [pc, #532]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e02e      	b.n	8005ff8 <HAL_RCC_OscConfig+0xd8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x9c>
 8005fa2:	4b81      	ldr	r3, [pc, #516]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a80      	ldr	r2, [pc, #512]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b7e      	ldr	r3, [pc, #504]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e01d      	b.n	8005ff8 <HAL_RCC_OscConfig+0xd8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0xc0>
 8005fc6:	4b78      	ldr	r3, [pc, #480]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a77      	ldr	r2, [pc, #476]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	4b75      	ldr	r3, [pc, #468]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a74      	ldr	r2, [pc, #464]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e00b      	b.n	8005ff8 <HAL_RCC_OscConfig+0xd8>
 8005fe0:	4b71      	ldr	r3, [pc, #452]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a70      	ldr	r2, [pc, #448]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	4b6e      	ldr	r3, [pc, #440]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a6d      	ldr	r2, [pc, #436]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d013      	beq.n	8006028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fc f884 	bl	800210c <HAL_GetTick>
 8006004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006008:	f7fc f880 	bl	800210c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	@ 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e3d4      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601a:	4b63      	ldr	r3, [pc, #396]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0xe8>
 8006026:	e014      	b.n	8006052 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fc f870 	bl	800210c <HAL_GetTick>
 800602c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006030:	f7fc f86c 	bl	800210c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	@ 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e3c0      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006042:	4b59      	ldr	r3, [pc, #356]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <HAL_RCC_OscConfig+0x110>
 800604e:	e000      	b.n	8006052 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80ca 	beq.w	80061f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006060:	4b51      	ldr	r3, [pc, #324]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006068:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800606a:	4b4f      	ldr	r3, [pc, #316]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_RCC_OscConfig+0x166>
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2b18      	cmp	r3, #24
 800607a:	d156      	bne.n	800612a <HAL_RCC_OscConfig+0x20a>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d151      	bne.n	800612a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006086:	4b48      	ldr	r3, [pc, #288]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_RCC_OscConfig+0x17e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e392      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800609e:	4b42      	ldr	r3, [pc, #264]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f023 0219 	bic.w	r2, r3, #25
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	493f      	ldr	r1, [pc, #252]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fc f82c 	bl	800210c <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b8:	f7fc f828 	bl	800210c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e37c      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ca:	4b37      	ldr	r3, [pc, #220]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d6:	f7fc f849 	bl	800216c <HAL_GetREVID>
 80060da:	4603      	mov	r3, r0
 80060dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d817      	bhi.n	8006114 <HAL_RCC_OscConfig+0x1f4>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b40      	cmp	r3, #64	@ 0x40
 80060ea:	d108      	bne.n	80060fe <HAL_RCC_OscConfig+0x1de>
 80060ec:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80060f4:	4a2c      	ldr	r2, [pc, #176]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80060f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060fc:	e07a      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fe:	4b2a      	ldr	r3, [pc, #168]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	031b      	lsls	r3, r3, #12
 800610c:	4926      	ldr	r1, [pc, #152]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 800610e:	4313      	orrs	r3, r2
 8006110:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006112:	e06f      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	4b24      	ldr	r3, [pc, #144]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	4921      	ldr	r1, [pc, #132]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006128:	e064      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d047      	beq.n	80061c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006132:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 0219 	bic.w	r2, r3, #25
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	491a      	ldr	r1, [pc, #104]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fb ffe2 	bl	800210c <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614c:	f7fb ffde 	bl	800210c <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e332      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800615e:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616a:	f7fb ffff 	bl	800216c <HAL_GetREVID>
 800616e:	4603      	mov	r3, r0
 8006170:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006174:	4293      	cmp	r3, r2
 8006176:	d819      	bhi.n	80061ac <HAL_RCC_OscConfig+0x28c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d108      	bne.n	8006192 <HAL_RCC_OscConfig+0x272>
 8006180:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006188:	4a07      	ldr	r2, [pc, #28]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618e:	6053      	str	r3, [r2, #4]
 8006190:	e030      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	031b      	lsls	r3, r3, #12
 80061a0:	4901      	ldr	r1, [pc, #4]	@ (80061a8 <HAL_RCC_OscConfig+0x288>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
 80061a6:	e025      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
 80061a8:	58024400 	.word	0x58024400
 80061ac:	4b9a      	ldr	r3, [pc, #616]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	4997      	ldr	r1, [pc, #604]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	604b      	str	r3, [r1, #4]
 80061c0:	e018      	b.n	80061f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c2:	4b95      	ldr	r3, [pc, #596]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a94      	ldr	r2, [pc, #592]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fb ff9d 	bl	800210c <HAL_GetTick>
 80061d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d6:	f7fb ff99 	bl	800210c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e2ed      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e8:	4b8b      	ldr	r3, [pc, #556]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80a9 	beq.w	8006354 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006202:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800620a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800620c:	4b82      	ldr	r3, [pc, #520]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d007      	beq.n	8006228 <HAL_RCC_OscConfig+0x308>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b18      	cmp	r3, #24
 800621c:	d13a      	bne.n	8006294 <HAL_RCC_OscConfig+0x374>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d135      	bne.n	8006294 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006228:	4b7b      	ldr	r3, [pc, #492]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_OscConfig+0x320>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	2b80      	cmp	r3, #128	@ 0x80
 800623a:	d001      	beq.n	8006240 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e2c1      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006240:	f7fb ff94 	bl	800216c <HAL_GetREVID>
 8006244:	4603      	mov	r3, r0
 8006246:	f241 0203 	movw	r2, #4099	@ 0x1003
 800624a:	4293      	cmp	r3, r2
 800624c:	d817      	bhi.n	800627e <HAL_RCC_OscConfig+0x35e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	2b20      	cmp	r3, #32
 8006254:	d108      	bne.n	8006268 <HAL_RCC_OscConfig+0x348>
 8006256:	4b70      	ldr	r3, [pc, #448]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800625e:	4a6e      	ldr	r2, [pc, #440]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006260:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006266:	e075      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006268:	4b6b      	ldr	r3, [pc, #428]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	069b      	lsls	r3, r3, #26
 8006276:	4968      	ldr	r1, [pc, #416]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800627c:	e06a      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800627e:	4b66      	ldr	r3, [pc, #408]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	4962      	ldr	r1, [pc, #392]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800628e:	4313      	orrs	r3, r2
 8006290:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006292:	e05f      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d042      	beq.n	8006322 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800629c:	4b5e      	ldr	r3, [pc, #376]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a5d      	ldr	r2, [pc, #372]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fb ff30 	bl	800210c <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062b0:	f7fb ff2c 	bl	800210c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e280      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062c2:	4b55      	ldr	r3, [pc, #340]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ce:	f7fb ff4d 	bl	800216c <HAL_GetREVID>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062d8:	4293      	cmp	r3, r2
 80062da:	d817      	bhi.n	800630c <HAL_RCC_OscConfig+0x3ec>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d108      	bne.n	80062f6 <HAL_RCC_OscConfig+0x3d6>
 80062e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80062ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062f2:	6053      	str	r3, [r2, #4]
 80062f4:	e02e      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
 80062f6:	4b48      	ldr	r3, [pc, #288]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	069b      	lsls	r3, r3, #26
 8006304:	4944      	ldr	r1, [pc, #272]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006306:	4313      	orrs	r3, r2
 8006308:	604b      	str	r3, [r1, #4]
 800630a:	e023      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
 800630c:	4b42      	ldr	r3, [pc, #264]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	493f      	ldr	r1, [pc, #252]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800631c:	4313      	orrs	r3, r2
 800631e:	60cb      	str	r3, [r1, #12]
 8006320:	e018      	b.n	8006354 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006322:	4b3d      	ldr	r3, [pc, #244]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3c      	ldr	r2, [pc, #240]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800632c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fb feed 	bl	800210c <HAL_GetTick>
 8006332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006336:	f7fb fee9 	bl	800210c <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e23d      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006348:	4b33      	ldr	r3, [pc, #204]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d036      	beq.n	80063ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d019      	beq.n	800639c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800636a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636c:	4a2a      	ldr	r2, [pc, #168]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006374:	f7fb feca 	bl	800210c <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800637c:	f7fb fec6 	bl	800210c <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e21a      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800638e:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 8006390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x45c>
 800639a:	e018      	b.n	80063ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800639c:	4b1e      	ldr	r3, [pc, #120]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800639e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fb feb0 	bl	800210c <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fb feac 	bl	800210c <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e200      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063c2:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d039      	beq.n	800644e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01c      	beq.n	800641c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 80063e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ee:	f7fb fe8d 	bl	800210c <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063f6:	f7fb fe89 	bl	800210c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1dd      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006408:	4b03      	ldr	r3, [pc, #12]	@ (8006418 <HAL_RCC_OscConfig+0x4f8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x4d6>
 8006414:	e01b      	b.n	800644e <HAL_RCC_OscConfig+0x52e>
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800641c:	4b9b      	ldr	r3, [pc, #620]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a9a      	ldr	r2, [pc, #616]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006426:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006428:	f7fb fe70 	bl	800210c <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006430:	f7fb fe6c 	bl	800210c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1c0      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006442:	4b92      	ldr	r3, [pc, #584]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8081 	beq.w	800655e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800645c:	4b8c      	ldr	r3, [pc, #560]	@ (8006690 <HAL_RCC_OscConfig+0x770>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a8b      	ldr	r2, [pc, #556]	@ (8006690 <HAL_RCC_OscConfig+0x770>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006468:	f7fb fe50 	bl	800210c <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006470:	f7fb fe4c 	bl	800210c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b64      	cmp	r3, #100	@ 0x64
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1a0      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006482:	4b83      	ldr	r3, [pc, #524]	@ (8006690 <HAL_RCC_OscConfig+0x770>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d106      	bne.n	80064a4 <HAL_RCC_OscConfig+0x584>
 8006496:	4b7d      	ldr	r3, [pc, #500]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649a:	4a7c      	ldr	r2, [pc, #496]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064a2:	e02d      	b.n	8006500 <HAL_RCC_OscConfig+0x5e0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <HAL_RCC_OscConfig+0x5a6>
 80064ac:	4b77      	ldr	r3, [pc, #476]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b0:	4a76      	ldr	r2, [pc, #472]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b8:	4b74      	ldr	r3, [pc, #464]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064bc:	4a73      	ldr	r2, [pc, #460]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064be:	f023 0304 	bic.w	r3, r3, #4
 80064c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c4:	e01c      	b.n	8006500 <HAL_RCC_OscConfig+0x5e0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x5c8>
 80064ce:	4b6f      	ldr	r3, [pc, #444]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	4a6e      	ldr	r2, [pc, #440]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064da:	4b6c      	ldr	r3, [pc, #432]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	4a6b      	ldr	r2, [pc, #428]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e6:	e00b      	b.n	8006500 <HAL_RCC_OscConfig+0x5e0>
 80064e8:	4b68      	ldr	r3, [pc, #416]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ec:	4a67      	ldr	r2, [pc, #412]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f4:	4b65      	ldr	r3, [pc, #404]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f8:	4a64      	ldr	r2, [pc, #400]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fb fe00 	bl	800210c <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb fdfc 	bl	800210c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e14e      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006526:	4b59      	ldr	r3, [pc, #356]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0ee      	beq.n	8006510 <HAL_RCC_OscConfig+0x5f0>
 8006532:	e014      	b.n	800655e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006534:	f7fb fdea 	bl	800210c <HAL_GetTick>
 8006538:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fb fde6 	bl	800210c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e138      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006552:	4b4e      	ldr	r3, [pc, #312]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ee      	bne.n	800653c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 812d 	beq.w	80067c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006568:	4b48      	ldr	r3, [pc, #288]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006570:	2b18      	cmp	r3, #24
 8006572:	f000 80bd 	beq.w	80066f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	2b02      	cmp	r3, #2
 800657c:	f040 809e 	bne.w	80066bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006580:	4b42      	ldr	r3, [pc, #264]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a41      	ldr	r2, [pc, #260]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800658a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fb fdbe 	bl	800210c <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006594:	f7fb fdba 	bl	800210c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e10e      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065a6:	4b39      	ldr	r3, [pc, #228]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b2:	4b36      	ldr	r3, [pc, #216]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80065b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <HAL_RCC_OscConfig+0x774>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065c2:	0112      	lsls	r2, r2, #4
 80065c4:	430a      	orrs	r2, r1
 80065c6:	4931      	ldr	r1, [pc, #196]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	3b01      	subs	r3, #1
 80065d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065da:	3b01      	subs	r3, #1
 80065dc:	025b      	lsls	r3, r3, #9
 80065de:	b29b      	uxth	r3, r3
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	3b01      	subs	r3, #1
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f4:	3b01      	subs	r3, #1
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065fc:	4923      	ldr	r1, [pc, #140]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006602:	4b22      	ldr	r3, [pc, #136]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	4a21      	ldr	r2, [pc, #132]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800660e:	4b1f      	ldr	r3, [pc, #124]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006612:	4b21      	ldr	r3, [pc, #132]	@ (8006698 <HAL_RCC_OscConfig+0x778>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800661a:	00d2      	lsls	r2, r2, #3
 800661c:	491b      	ldr	r1, [pc, #108]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800661e:	4313      	orrs	r3, r2
 8006620:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006622:	4b1a      	ldr	r3, [pc, #104]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006626:	f023 020c 	bic.w	r2, r3, #12
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	4917      	ldr	r1, [pc, #92]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006634:	4b15      	ldr	r3, [pc, #84]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	f023 0202 	bic.w	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006640:	4912      	ldr	r1, [pc, #72]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006642:	4313      	orrs	r3, r2
 8006644:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006646:	4b11      	ldr	r3, [pc, #68]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664a:	4a10      	ldr	r2, [pc, #64]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006652:	4b0e      	ldr	r3, [pc, #56]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	4a0d      	ldr	r2, [pc, #52]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800665e:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	4a0a      	ldr	r2, [pc, #40]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	4a07      	ldr	r2, [pc, #28]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006676:	4b05      	ldr	r3, [pc, #20]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a04      	ldr	r2, [pc, #16]	@ (800668c <HAL_RCC_OscConfig+0x76c>)
 800667c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fb fd43 	bl	800210c <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006688:	e011      	b.n	80066ae <HAL_RCC_OscConfig+0x78e>
 800668a:	bf00      	nop
 800668c:	58024400 	.word	0x58024400
 8006690:	58024800 	.word	0x58024800
 8006694:	fffffc0c 	.word	0xfffffc0c
 8006698:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669c:	f7fb fd36 	bl	800210c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e08a      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ae:	4b47      	ldr	r3, [pc, #284]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x77c>
 80066ba:	e082      	b.n	80067c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066bc:	4b43      	ldr	r3, [pc, #268]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a42      	ldr	r2, [pc, #264]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fb fd20 	bl	800210c <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fb fd1c 	bl	800210c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e070      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066e2:	4b3a      	ldr	r3, [pc, #232]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x7b0>
 80066ee:	e068      	b.n	80067c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066f0:	4b36      	ldr	r3, [pc, #216]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066f6:	4b35      	ldr	r3, [pc, #212]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	2b01      	cmp	r3, #1
 8006702:	d031      	beq.n	8006768 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f003 0203 	and.w	r2, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d12a      	bne.n	8006768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671e:	429a      	cmp	r2, r3
 8006720:	d122      	bne.n	8006768 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800672e:	429a      	cmp	r2, r3
 8006730:	d11a      	bne.n	8006768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	0a5b      	lsrs	r3, r3, #9
 8006736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d111      	bne.n	8006768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006752:	429a      	cmp	r2, r3
 8006754:	d108      	bne.n	8006768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	0e1b      	lsrs	r3, r3, #24
 800675a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e02b      	b.n	80067c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800676c:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 800676e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006770:	08db      	lsrs	r3, r3, #3
 8006772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006776:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	429a      	cmp	r2, r3
 8006780:	d01f      	beq.n	80067c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006782:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	4a11      	ldr	r2, [pc, #68]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800678e:	f7fb fcbd 	bl	800210c <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006794:	bf00      	nop
 8006796:	f7fb fcb9 	bl	800210c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	4293      	cmp	r3, r2
 80067a0:	d0f9      	beq.n	8006796 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80067a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a6:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <HAL_RCC_OscConfig+0x8b0>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	4906      	ldr	r1, [pc, #24]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067b6:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	4a04      	ldr	r2, [pc, #16]	@ (80067cc <HAL_RCC_OscConfig+0x8ac>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3730      	adds	r7, #48	@ 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	58024400 	.word	0x58024400
 80067d0:	ffff0007 	.word	0xffff0007

080067d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e19c      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d910      	bls.n	8006818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f6:	4b87      	ldr	r3, [pc, #540]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 020f 	bic.w	r2, r3, #15
 80067fe:	4985      	ldr	r1, [pc, #532]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	4313      	orrs	r3, r2
 8006804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006806:	4b83      	ldr	r3, [pc, #524]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d001      	beq.n	8006818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e184      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d010      	beq.n	8006846 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	4b7b      	ldr	r3, [pc, #492]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006830:	429a      	cmp	r2, r3
 8006832:	d908      	bls.n	8006846 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006834:	4b78      	ldr	r3, [pc, #480]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4975      	ldr	r1, [pc, #468]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006842:	4313      	orrs	r3, r2
 8006844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d010      	beq.n	8006874 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	4b70      	ldr	r3, [pc, #448]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800685e:	429a      	cmp	r2, r3
 8006860:	d908      	bls.n	8006874 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006862:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	496a      	ldr	r1, [pc, #424]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006870:	4313      	orrs	r3, r2
 8006872:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	4b64      	ldr	r3, [pc, #400]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800688c:	429a      	cmp	r2, r3
 800688e:	d908      	bls.n	80068a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006890:	4b61      	ldr	r3, [pc, #388]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	495e      	ldr	r1, [pc, #376]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	4b59      	ldr	r3, [pc, #356]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d908      	bls.n	80068d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068be:	4b56      	ldr	r3, [pc, #344]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	4953      	ldr	r1, [pc, #332]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d908      	bls.n	80068fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f023 020f 	bic.w	r2, r3, #15
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4947      	ldr	r1, [pc, #284]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d055      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800690a:	4b43      	ldr	r3, [pc, #268]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4940      	ldr	r1, [pc, #256]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006918:	4313      	orrs	r3, r2
 800691a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d107      	bne.n	8006934 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006924:	4b3c      	ldr	r3, [pc, #240]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d121      	bne.n	8006974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0f6      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d107      	bne.n	800694c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800693c:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d115      	bne.n	8006974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0ea      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006954:	4b30      	ldr	r3, [pc, #192]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0de      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006964:	4b2c      	ldr	r3, [pc, #176]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0d6      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006974:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f023 0207 	bic.w	r2, r3, #7
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4925      	ldr	r1, [pc, #148]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 8006982:	4313      	orrs	r3, r2
 8006984:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fb fbc1 	bl	800210c <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698e:	f7fb fbbd 	bl	800210c <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e0be      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d1eb      	bne.n	800698e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d208      	bcs.n	80069e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d2:	4b11      	ldr	r3, [pc, #68]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f023 020f 	bic.w	r2, r3, #15
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	490e      	ldr	r1, [pc, #56]	@ (8006a18 <HAL_RCC_ClockConfig+0x244>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d214      	bcs.n	8006a1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f2:	4b08      	ldr	r3, [pc, #32]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f023 020f 	bic.w	r2, r3, #15
 80069fa:	4906      	ldr	r1, [pc, #24]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <HAL_RCC_ClockConfig+0x240>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e086      	b.n	8006b22 <HAL_RCC_ClockConfig+0x34e>
 8006a14:	52002000 	.word	0x52002000
 8006a18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d010      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d208      	bcs.n	8006a4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a38:	4b3c      	ldr	r3, [pc, #240]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	4939      	ldr	r1, [pc, #228]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	4b34      	ldr	r3, [pc, #208]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d208      	bcs.n	8006a78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a66:	4b31      	ldr	r3, [pc, #196]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	492e      	ldr	r1, [pc, #184]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	4b28      	ldr	r3, [pc, #160]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d208      	bcs.n	8006aa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a94:	4b25      	ldr	r3, [pc, #148]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	4922      	ldr	r1, [pc, #136]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69da      	ldr	r2, [r3, #28]
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d208      	bcs.n	8006ad4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	4917      	ldr	r1, [pc, #92]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ad4:	f000 f834 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	4912      	ldr	r1, [pc, #72]	@ (8006b30 <HAL_RCC_ClockConfig+0x35c>)
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006af2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <HAL_RCC_ClockConfig+0x358>)
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	4a0d      	ldr	r2, [pc, #52]	@ (8006b30 <HAL_RCC_ClockConfig+0x35c>)
 8006afc:	5cd3      	ldrb	r3, [r2, r3]
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	4a0a      	ldr	r2, [pc, #40]	@ (8006b34 <HAL_RCC_ClockConfig+0x360>)
 8006b0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b38 <HAL_RCC_ClockConfig+0x364>)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b12:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <HAL_RCC_ClockConfig+0x368>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fa feac 	bl	8001874 <HAL_InitTick>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	08018ba4 	.word	0x08018ba4
 8006b34:	24000008 	.word	0x24000008
 8006b38:	24000004 	.word	0x24000004
 8006b3c:	2400000c 	.word	0x2400000c

08006b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b46:	4bb3      	ldr	r3, [pc, #716]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b4e:	2b18      	cmp	r3, #24
 8006b50:	f200 8155 	bhi.w	8006dfe <HAL_RCC_GetSysClockFreq+0x2be>
 8006b54:	a201      	add	r2, pc, #4	@ (adr r2, 8006b5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006bc1 	.word	0x08006bc1
 8006b60:	08006dff 	.word	0x08006dff
 8006b64:	08006dff 	.word	0x08006dff
 8006b68:	08006dff 	.word	0x08006dff
 8006b6c:	08006dff 	.word	0x08006dff
 8006b70:	08006dff 	.word	0x08006dff
 8006b74:	08006dff 	.word	0x08006dff
 8006b78:	08006dff 	.word	0x08006dff
 8006b7c:	08006be7 	.word	0x08006be7
 8006b80:	08006dff 	.word	0x08006dff
 8006b84:	08006dff 	.word	0x08006dff
 8006b88:	08006dff 	.word	0x08006dff
 8006b8c:	08006dff 	.word	0x08006dff
 8006b90:	08006dff 	.word	0x08006dff
 8006b94:	08006dff 	.word	0x08006dff
 8006b98:	08006dff 	.word	0x08006dff
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006dff 	.word	0x08006dff
 8006ba4:	08006dff 	.word	0x08006dff
 8006ba8:	08006dff 	.word	0x08006dff
 8006bac:	08006dff 	.word	0x08006dff
 8006bb0:	08006dff 	.word	0x08006dff
 8006bb4:	08006dff 	.word	0x08006dff
 8006bb8:	08006dff 	.word	0x08006dff
 8006bbc:	08006bf3 	.word	0x08006bf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc0:	4b94      	ldr	r3, [pc, #592]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bcc:	4b91      	ldr	r3, [pc, #580]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	4a90      	ldr	r2, [pc, #576]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006bde:	e111      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006be0:	4b8d      	ldr	r3, [pc, #564]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006be2:	61bb      	str	r3, [r7, #24]
      break;
 8006be4:	e10e      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006be6:	4b8d      	ldr	r3, [pc, #564]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006be8:	61bb      	str	r3, [r7, #24]
      break;
 8006bea:	e10b      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006bec:	4b8c      	ldr	r3, [pc, #560]	@ (8006e20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bee:	61bb      	str	r3, [r7, #24]
      break;
 8006bf0:	e108      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bf2:	4b88      	ldr	r3, [pc, #544]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006bfc:	4b85      	ldr	r3, [pc, #532]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	091b      	lsrs	r3, r3, #4
 8006c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c08:	4b82      	ldr	r3, [pc, #520]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c12:	4b80      	ldr	r3, [pc, #512]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80e1 	beq.w	8006df8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	f000 8083 	beq.w	8006d44 <HAL_RCC_GetSysClockFreq+0x204>
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f200 80a1 	bhi.w	8006d88 <HAL_RCC_GetSysClockFreq+0x248>
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x114>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d056      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c52:	e099      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c54:	4b6f      	ldr	r3, [pc, #444]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02d      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c60:	4b6c      	ldr	r3, [pc, #432]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	08db      	lsrs	r3, r3, #3
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b62      	ldr	r3, [pc, #392]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006cba:	e087      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b51      	ldr	r3, [pc, #324]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cfe:	e065      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b40      	ldr	r3, [pc, #256]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d42:	e043      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b2f      	ldr	r3, [pc, #188]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d86:	e021      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006dcc:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	0a5b      	lsrs	r3, r3, #9
 8006dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df0:	ee17 3a90 	vmov	r3, s15
 8006df4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006df6:	e005      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
      break;
 8006dfc:	e002      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006dfe:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e00:	61bb      	str	r3, [r7, #24]
      break;
 8006e02:	bf00      	nop
  }

  return sysclockfreq;
 8006e04:	69bb      	ldr	r3, [r7, #24]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3724      	adds	r7, #36	@ 0x24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	007a1200 	.word	0x007a1200
 8006e24:	46000000 	.word	0x46000000
 8006e28:	4c742400 	.word	0x4c742400
 8006e2c:	4a742400 	.word	0x4a742400
 8006e30:	4af42400 	.word	0x4af42400

08006e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e3a:	f7ff fe81 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	490f      	ldr	r1, [pc, #60]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e4c:	5ccb      	ldrb	r3, [r1, r3]
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	fa22 f303 	lsr.w	r3, r2, r3
 8006e56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e58:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	4a09      	ldr	r2, [pc, #36]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e62:	5cd3      	ldrb	r3, [r2, r3]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	4a07      	ldr	r2, [pc, #28]	@ (8006e8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e72:	4a07      	ldr	r2, [pc, #28]	@ (8006e90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	58024400 	.word	0x58024400
 8006e88:	08018ba4 	.word	0x08018ba4
 8006e8c:	24000008 	.word	0x24000008
 8006e90:	24000004 	.word	0x24000004

08006e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e98:	f7ff ffcc 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4904      	ldr	r1, [pc, #16]	@ (8006ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	08018ba4 	.word	0x08018ba4

08006ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ec4:	f7ff ffb6 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4904      	ldr	r1, [pc, #16]	@ (8006ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	08018ba4 	.word	0x08018ba4

08006eec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223f      	movs	r2, #63	@ 0x3f
 8006efa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006efc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0207 	and.w	r2, r3, #7
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006f08:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006f14:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006f20:	4b11      	ldr	r3, [pc, #68]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f44:	4b08      	ldr	r3, [pc, #32]	@ (8006f68 <HAL_RCC_GetClockConfig+0x7c>)
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f50:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <HAL_RCC_GetClockConfig+0x80>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	601a      	str	r2, [r3, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	52002000 	.word	0x52002000

08006f70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f74:	b0ca      	sub	sp, #296	@ 0x128
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f94:	2500      	movs	r5, #0
 8006f96:	ea54 0305 	orrs.w	r3, r4, r5
 8006f9a:	d049      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa6:	d02f      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006fa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fac:	d828      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb2:	d01a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb8:	d822      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc2:	d007      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fc4:	e01c      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc6:	4bb8      	ldr	r3, [pc, #736]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	4ab7      	ldr	r2, [pc, #732]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fd2:	e01a      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	3308      	adds	r3, #8
 8006fda:	2102      	movs	r1, #2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fc8f 	bl	8008900 <RCCEx_PLL2_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fe8:	e00f      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fee:	3328      	adds	r3, #40	@ 0x28
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 fd36 	bl	8008a64 <RCCEx_PLL3_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ffe:	e004      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007006:	e000      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007012:	4ba5      	ldr	r3, [pc, #660]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007016:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007020:	4aa1      	ldr	r2, [pc, #644]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007022:	430b      	orrs	r3, r1
 8007024:	6513      	str	r3, [r2, #80]	@ 0x50
 8007026:	e003      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800703c:	f04f 0900 	mov.w	r9, #0
 8007040:	ea58 0309 	orrs.w	r3, r8, r9
 8007044:	d047      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704c:	2b04      	cmp	r3, #4
 800704e:	d82a      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007050:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800706d 	.word	0x0800706d
 800705c:	0800707b 	.word	0x0800707b
 8007060:	08007091 	.word	0x08007091
 8007064:	080070af 	.word	0x080070af
 8007068:	080070af 	.word	0x080070af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b8e      	ldr	r3, [pc, #568]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a8d      	ldr	r2, [pc, #564]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007078:	e01a      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	3308      	adds	r3, #8
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fc3c 	bl	8008900 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708e:	e00f      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	3328      	adds	r3, #40	@ 0x28
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fce3 	bl	8008a64 <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070a4:	e004      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80070ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070b8:	4b7b      	ldr	r3, [pc, #492]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070bc:	f023 0107 	bic.w	r1, r3, #7
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c6:	4a78      	ldr	r2, [pc, #480]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80070e2:	f04f 0b00 	mov.w	fp, #0
 80070e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80070ea:	d04c      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f6:	d030      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070fc:	d829      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007100:	d02d      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007102:	2bc0      	cmp	r3, #192	@ 0xc0
 8007104:	d825      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007106:	2b80      	cmp	r3, #128	@ 0x80
 8007108:	d018      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800710a:	2b80      	cmp	r3, #128	@ 0x80
 800710c:	d821      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007112:	2b40      	cmp	r3, #64	@ 0x40
 8007114:	d007      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007116:	e01c      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007118:	4b63      	ldr	r3, [pc, #396]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	4a62      	ldr	r2, [pc, #392]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800711e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007124:	e01c      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	3308      	adds	r3, #8
 800712c:	2100      	movs	r1, #0
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fbe6 	bl	8008900 <RCCEx_PLL2_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	3328      	adds	r3, #40	@ 0x28
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fc8d 	bl	8008a64 <RCCEx_PLL3_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007150:	e006      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800715e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007168:	4b4f      	ldr	r3, [pc, #316]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800716c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007176:	4a4c      	ldr	r2, [pc, #304]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007178:	430b      	orrs	r3, r1
 800717a:	6513      	str	r3, [r2, #80]	@ 0x50
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007192:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800719c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80071a0:	460b      	mov	r3, r1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	d053      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071b2:	d035      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80071b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071b8:	d82e      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071be:	d031      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071c4:	d828      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ca:	d01a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80071cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d0:	d822      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80071d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071da:	d007      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80071dc:	e01c      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071de:	4b32      	ldr	r3, [pc, #200]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	4a31      	ldr	r2, [pc, #196]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ea:	e01c      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	3308      	adds	r3, #8
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 fb83 	bl	8008900 <RCCEx_PLL2_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007200:	e011      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	3328      	adds	r3, #40	@ 0x28
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f001 fc2a 	bl	8008a64 <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007216:	e006      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721e:	e002      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800722e:	4b1e      	ldr	r3, [pc, #120]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800723e:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007240:	430b      	orrs	r3, r1
 8007242:	6593      	str	r3, [r2, #88]	@ 0x58
 8007244:	e003      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800725a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800725e:	2300      	movs	r3, #0
 8007260:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007264:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007268:	460b      	mov	r3, r1
 800726a:	4313      	orrs	r3, r2
 800726c:	d056      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007276:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800727a:	d038      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800727c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007280:	d831      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007282:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007286:	d034      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800728c:	d82b      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800728e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007292:	d01d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007298:	d825      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d006      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800729e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072a2:	d00a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072a4:	e01f      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072a6:	bf00      	nop
 80072a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ac:	4ba2      	ldr	r3, [pc, #648]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4aa1      	ldr	r2, [pc, #644]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b8:	e01c      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fb1c 	bl	8008900 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072ce:	e011      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	3328      	adds	r3, #40	@ 0x28
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fbc3 	bl	8008a64 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e4:	e006      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072ec:	e002      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072ee:	bf00      	nop
 80072f0:	e000      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072fc:	4b8e      	ldr	r3, [pc, #568]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007300:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007308:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800730c:	4a8a      	ldr	r2, [pc, #552]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800730e:	430b      	orrs	r3, r1
 8007310:	6593      	str	r3, [r2, #88]	@ 0x58
 8007312:	e003      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007332:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	d03a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007342:	2b30      	cmp	r3, #48	@ 0x30
 8007344:	d01f      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007346:	2b30      	cmp	r3, #48	@ 0x30
 8007348:	d819      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800734a:	2b20      	cmp	r3, #32
 800734c:	d00c      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800734e:	2b20      	cmp	r3, #32
 8007350:	d815      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d019      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007356:	2b10      	cmp	r3, #16
 8007358:	d111      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735a:	4b77      	ldr	r3, [pc, #476]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	4a76      	ldr	r2, [pc, #472]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007366:	e011      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736c:	3308      	adds	r3, #8
 800736e:	2102      	movs	r1, #2
 8007370:	4618      	mov	r0, r3
 8007372:	f001 fac5 	bl	8008900 <RCCEx_PLL2_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800737c:	e006      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007384:	e002      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800738a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007394:	4b68      	ldr	r3, [pc, #416]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007398:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073a2:	4a65      	ldr	r2, [pc, #404]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073c2:	2300      	movs	r3, #0
 80073c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4313      	orrs	r3, r2
 80073d0:	d051      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073dc:	d035      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073e2:	d82e      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073e8:	d031      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073ee:	d828      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f4:	d01a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073fa:	d822      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007404:	d007      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007406:	e01c      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007408:	4b4b      	ldr	r3, [pc, #300]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	4a4a      	ldr	r2, [pc, #296]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007414:	e01c      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3308      	adds	r3, #8
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa6e 	bl	8008900 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800742a:	e011      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	3328      	adds	r3, #40	@ 0x28
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fb15 	bl	8008a64 <RCCEx_PLL3_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007440:	e006      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007448:	e002      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800744e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007458:	4b37      	ldr	r3, [pc, #220]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007466:	4a34      	ldr	r2, [pc, #208]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007468:	430b      	orrs	r3, r1
 800746a:	6513      	str	r3, [r2, #80]	@ 0x50
 800746c:	e003      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007486:	2300      	movs	r3, #0
 8007488:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800748c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007490:	460b      	mov	r3, r1
 8007492:	4313      	orrs	r3, r2
 8007494:	d056      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800749c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074a0:	d033      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074a6:	d82c      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ac:	d02f      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80074ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074b2:	d826      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074b8:	d02b      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80074ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074be:	d820      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c4:	d012      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80074c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ca:	d81a      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d022      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d4:	d115      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074da:	3308      	adds	r3, #8
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fa0e 	bl	8008900 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074ea:	e015      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	3328      	adds	r3, #40	@ 0x28
 80074f2:	2101      	movs	r1, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fab5 	bl	8008a64 <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007500:	e00a      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007508:	e006      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800750a:	bf00      	nop
 800750c:	e004      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10d      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007520:	4b05      	ldr	r3, [pc, #20]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007524:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800752e:	4a02      	ldr	r2, [pc, #8]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007530:	430b      	orrs	r3, r1
 8007532:	6513      	str	r3, [r2, #80]	@ 0x50
 8007534:	e006      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007536:	bf00      	nop
 8007538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007554:	2300      	movs	r3, #0
 8007556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800755a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d055      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007568:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800756c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007570:	d033      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007576:	d82c      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757c:	d02f      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007582:	d826      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007584:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007588:	d02b      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800758a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800758e:	d820      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007594:	d012      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800759a:	d81a      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d022      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80075a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a4:	d115      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	3308      	adds	r3, #8
 80075ac:	2101      	movs	r1, #1
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f9a6 	bl	8008900 <RCCEx_PLL2_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075ba:	e015      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	3328      	adds	r3, #40	@ 0x28
 80075c2:	2101      	movs	r1, #1
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 fa4d 	bl	8008a64 <RCCEx_PLL3_Config>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075d0:	e00a      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075da:	bf00      	nop
 80075dc:	e004      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075de:	bf00      	nop
 80075e0:	e002      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075f0:	4ba3      	ldr	r3, [pc, #652]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007600:	4a9f      	ldr	r2, [pc, #636]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007602:	430b      	orrs	r3, r1
 8007604:	6593      	str	r3, [r2, #88]	@ 0x58
 8007606:	e003      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800761c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007620:	2300      	movs	r3, #0
 8007622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800762a:	460b      	mov	r3, r1
 800762c:	4313      	orrs	r3, r2
 800762e:	d037      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800763a:	d00e      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800763c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007640:	d816      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d018      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764a:	d111      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764c:	4b8c      	ldr	r3, [pc, #560]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	4a8b      	ldr	r2, [pc, #556]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007658:	e00f      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	3308      	adds	r3, #8
 8007660:	2101      	movs	r1, #1
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f94c 	bl	8008900 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800766e:	e004      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007676:	e000      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007682:	4b7f      	ldr	r3, [pc, #508]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007686:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007690:	4a7b      	ldr	r2, [pc, #492]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007692:	430b      	orrs	r3, r1
 8007694:	6513      	str	r3, [r2, #80]	@ 0x50
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d039      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d81c      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80076ca:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	080076ef 	.word	0x080076ef
 80076dc:	0800770d 	.word	0x0800770d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e0:	4b67      	ldr	r3, [pc, #412]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	4a66      	ldr	r2, [pc, #408]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076ec:	e00f      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	3308      	adds	r3, #8
 80076f4:	2102      	movs	r1, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f902 	bl	8008900 <RCCEx_PLL2_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007702:	e004      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800770c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007716:	4b5a      	ldr	r3, [pc, #360]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	f023 0103 	bic.w	r1, r3, #3
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007724:	4a56      	ldr	r2, [pc, #344]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007726:	430b      	orrs	r3, r1
 8007728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800772a:	e003      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007744:	2300      	movs	r3, #0
 8007746:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800774a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800774e:	460b      	mov	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	f000 809f 	beq.w	8007894 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007756:	4b4b      	ldr	r3, [pc, #300]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4a      	ldr	r2, [pc, #296]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800775c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007762:	f7fa fcd3 	bl	800210c <HAL_GetTick>
 8007766:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800776a:	e00b      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800776c:	f7fa fcce 	bl	800210c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b64      	cmp	r3, #100	@ 0x64
 800777a:	d903      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007782:	e005      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007784:	4b3f      	ldr	r3, [pc, #252]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0ed      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007794:	2b00      	cmp	r3, #0
 8007796:	d179      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007798:	4b39      	ldr	r3, [pc, #228]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800779a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077a4:	4053      	eors	r3, r2
 80077a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d015      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077ae:	4b34      	ldr	r3, [pc, #208]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077ba:	4b31      	ldr	r3, [pc, #196]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077be:	4a30      	ldr	r2, [pc, #192]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80077d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e6:	d118      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e8:	f7fa fc90 	bl	800210c <HAL_GetTick>
 80077ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f0:	e00d      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f2:	f7fa fc8b 	bl	800210c <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80077fc:	1ad2      	subs	r2, r2, r3
 80077fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007802:	429a      	cmp	r2, r3
 8007804:	d903      	bls.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800780c:	e005      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800780e:	4b1c      	ldr	r3, [pc, #112]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0eb      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d129      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800782a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800782e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007832:	d10e      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007844:	091a      	lsrs	r2, r3, #4
 8007846:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007848:	4013      	ands	r3, r2
 800784a:	4a0d      	ldr	r2, [pc, #52]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800784c:	430b      	orrs	r3, r1
 800784e:	6113      	str	r3, [r2, #16]
 8007850:	e005      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	4a0a      	ldr	r2, [pc, #40]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007858:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800785c:	6113      	str	r3, [r2, #16]
 800785e:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007860:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800786a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800786e:	4a04      	ldr	r2, [pc, #16]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007870:	430b      	orrs	r3, r1
 8007872:	6713      	str	r3, [r2, #112]	@ 0x70
 8007874:	e00e      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800787e:	e009      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007880:	58024400 	.word	0x58024400
 8007884:	58024800 	.word	0x58024800
 8007888:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f002 0301 	and.w	r3, r2, #1
 80078a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f000 8089 	beq.w	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078bc:	2b28      	cmp	r3, #40	@ 0x28
 80078be:	d86b      	bhi.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80078c0:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080079a1 	.word	0x080079a1
 80078cc:	08007999 	.word	0x08007999
 80078d0:	08007999 	.word	0x08007999
 80078d4:	08007999 	.word	0x08007999
 80078d8:	08007999 	.word	0x08007999
 80078dc:	08007999 	.word	0x08007999
 80078e0:	08007999 	.word	0x08007999
 80078e4:	08007999 	.word	0x08007999
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	08007999 	.word	0x08007999
 80078f0:	08007999 	.word	0x08007999
 80078f4:	08007999 	.word	0x08007999
 80078f8:	08007999 	.word	0x08007999
 80078fc:	08007999 	.word	0x08007999
 8007900:	08007999 	.word	0x08007999
 8007904:	08007999 	.word	0x08007999
 8007908:	08007983 	.word	0x08007983
 800790c:	08007999 	.word	0x08007999
 8007910:	08007999 	.word	0x08007999
 8007914:	08007999 	.word	0x08007999
 8007918:	08007999 	.word	0x08007999
 800791c:	08007999 	.word	0x08007999
 8007920:	08007999 	.word	0x08007999
 8007924:	08007999 	.word	0x08007999
 8007928:	080079a1 	.word	0x080079a1
 800792c:	08007999 	.word	0x08007999
 8007930:	08007999 	.word	0x08007999
 8007934:	08007999 	.word	0x08007999
 8007938:	08007999 	.word	0x08007999
 800793c:	08007999 	.word	0x08007999
 8007940:	08007999 	.word	0x08007999
 8007944:	08007999 	.word	0x08007999
 8007948:	080079a1 	.word	0x080079a1
 800794c:	08007999 	.word	0x08007999
 8007950:	08007999 	.word	0x08007999
 8007954:	08007999 	.word	0x08007999
 8007958:	08007999 	.word	0x08007999
 800795c:	08007999 	.word	0x08007999
 8007960:	08007999 	.word	0x08007999
 8007964:	08007999 	.word	0x08007999
 8007968:	080079a1 	.word	0x080079a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	3308      	adds	r3, #8
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f000 ffc3 	bl	8008900 <RCCEx_PLL2_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007980:	e00f      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007986:	3328      	adds	r3, #40	@ 0x28
 8007988:	2101      	movs	r1, #1
 800798a:	4618      	mov	r0, r3
 800798c:	f001 f86a 	bl	8008a64 <RCCEx_PLL3_Config>
 8007990:	4603      	mov	r3, r0
 8007992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007996:	e004      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800799e:	e000      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80079a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079aa:	4bbf      	ldr	r3, [pc, #764]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079b8:	4abb      	ldr	r2, [pc, #748]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079ba:	430b      	orrs	r3, r1
 80079bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f002 0302 	and.w	r3, r2, #2
 80079d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d041      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d824      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a45 	.word	0x08007a45
 80079fc:	08007a11 	.word	0x08007a11
 8007a00:	08007a27 	.word	0x08007a27
 8007a04:	08007a45 	.word	0x08007a45
 8007a08:	08007a45 	.word	0x08007a45
 8007a0c:	08007a45 	.word	0x08007a45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	3308      	adds	r3, #8
 8007a16:	2101      	movs	r1, #1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 ff71 	bl	8008900 <RCCEx_PLL2_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a24:	e00f      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2a:	3328      	adds	r3, #40	@ 0x28
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 f818 	bl	8008a64 <RCCEx_PLL3_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a3a:	e004      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a4e:	4b96      	ldr	r3, [pc, #600]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	f023 0107 	bic.w	r1, r3, #7
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a5c:	4a92      	ldr	r2, [pc, #584]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a62:	e003      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f002 0304 	and.w	r3, r2, #4
 8007a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	d044      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d825      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a98:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007aed 	.word	0x08007aed
 8007aa4:	08007ab9 	.word	0x08007ab9
 8007aa8:	08007acf 	.word	0x08007acf
 8007aac:	08007aed 	.word	0x08007aed
 8007ab0:	08007aed 	.word	0x08007aed
 8007ab4:	08007aed 	.word	0x08007aed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abc:	3308      	adds	r3, #8
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 ff1d 	bl	8008900 <RCCEx_PLL2_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007acc:	e00f      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	3328      	adds	r3, #40	@ 0x28
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 ffc4 	bl	8008a64 <RCCEx_PLL3_Config>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ae2:	e004      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007af6:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afa:	f023 0107 	bic.w	r1, r3, #7
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b06:	4a68      	ldr	r2, [pc, #416]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b0c:	e003      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f002 0320 	and.w	r3, r2, #32
 8007b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b30:	460b      	mov	r3, r1
 8007b32:	4313      	orrs	r3, r2
 8007b34:	d055      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b42:	d033      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b48:	d82c      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4e:	d02f      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b54:	d826      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b5a:	d02b      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b60:	d820      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b66:	d012      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b6c:	d81a      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d022      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b76:	d115      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 febd 	bl	8008900 <RCCEx_PLL2_Config>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b8c:	e015      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	3328      	adds	r3, #40	@ 0x28
 8007b94:	2102      	movs	r1, #2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff64 	bl	8008a64 <RCCEx_PLL3_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ba2:	e00a      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007baa:	e006      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bc2:	4b39      	ldr	r3, [pc, #228]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd2:	4a35      	ldr	r2, [pc, #212]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	d058      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c0e:	d033      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007c10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c14:	d82c      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1a:	d02f      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c20:	d826      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c26:	d02b      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c2c:	d820      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c32:	d012      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c38:	d81a      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d022      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c42:	d115      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fe57 	bl	8008900 <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c58:	e015      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3328      	adds	r3, #40	@ 0x28
 8007c60:	2102      	movs	r1, #2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fefe 	bl	8008a64 <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e00a      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c76:	e006      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c78:	bf00      	nop
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10e      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c9e:	4a02      	ldr	r2, [pc, #8]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca4:	e006      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	d055      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cdc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ce0:	d033      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007ce2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ce6:	d82c      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cec:	d02f      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf2:	d826      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cf4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cf8:	d02b      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007cfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cfe:	d820      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d04:	d012      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d0a:	d81a      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d022      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d14:	d115      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fdee 	bl	8008900 <RCCEx_PLL2_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d2a:	e015      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	3328      	adds	r3, #40	@ 0x28
 8007d32:	2102      	movs	r1, #2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fe95 	bl	8008a64 <RCCEx_PLL3_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d40:	e00a      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d48:	e006      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d4a:	bf00      	nop
 8007d4c:	e004      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d4e:	bf00      	nop
 8007d50:	e002      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10b      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d60:	4ba1      	ldr	r3, [pc, #644]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d70:	4a9d      	ldr	r2, [pc, #628]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d76:	e003      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 0308 	and.w	r3, r2, #8
 8007d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d01e      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dac:	d10c      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	3328      	adds	r3, #40	@ 0x28
 8007db4:	2102      	movs	r1, #2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fe54 	bl	8008a64 <RCCEx_PLL3_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007dc8:	4b87      	ldr	r3, [pc, #540]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dcc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd8:	4a83      	ldr	r2, [pc, #524]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f002 0310 	and.w	r3, r2, #16
 8007dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dee:	2300      	movs	r3, #0
 8007df0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007df4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	d01e      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0a:	d10c      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	3328      	adds	r3, #40	@ 0x28
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fe25 	bl	8008a64 <RCCEx_PLL3_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e26:	4b70      	ldr	r3, [pc, #448]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e36:	4a6c      	ldr	r2, [pc, #432]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d03e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e68:	d022      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6e:	d81b      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e78:	d00b      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e7a:	e015      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	3308      	adds	r3, #8
 8007e82:	2100      	movs	r1, #0
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fd3b 	bl	8008900 <RCCEx_PLL2_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e90:	e00f      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e96:	3328      	adds	r3, #40	@ 0x28
 8007e98:	2102      	movs	r1, #2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fde2 	bl	8008a64 <RCCEx_PLL3_Config>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ea6:	e004      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eae:	e000      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ebe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007eca:	4a47      	ldr	r2, [pc, #284]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed0:	e003      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ee8:	2300      	movs	r3, #0
 8007eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007eec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d03b      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f02:	d01f      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f08:	d818      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007f10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f14:	d007      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007f16:	e011      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f18:	4b33      	ldr	r3, [pc, #204]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	4a32      	ldr	r2, [pc, #200]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f24:	e00f      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	3328      	adds	r3, #40	@ 0x28
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fd98 	bl	8008a64 <RCCEx_PLL3_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f5e:	4a22      	ldr	r2, [pc, #136]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d034      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f98:	d007      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f9a:	e011      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9c:	4b12      	ldr	r3, [pc, #72]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	4a11      	ldr	r2, [pc, #68]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fa8:	e00e      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	3308      	adds	r3, #8
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fca4 	bl	8008900 <RCCEx_PLL2_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fbe:	e003      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10d      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fd0:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fde:	4a02      	ldr	r2, [pc, #8]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fe4:	e006      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008002:	2300      	movs	r3, #0
 8008004:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008006:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800800a:	460b      	mov	r3, r1
 800800c:	4313      	orrs	r3, r2
 800800e:	d00c      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	3328      	adds	r3, #40	@ 0x28
 8008016:	2102      	movs	r1, #2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd23 	bl	8008a64 <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008036:	663b      	str	r3, [r7, #96]	@ 0x60
 8008038:	2300      	movs	r3, #0
 800803a:	667b      	str	r3, [r7, #100]	@ 0x64
 800803c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008040:	460b      	mov	r3, r1
 8008042:	4313      	orrs	r3, r2
 8008044:	d038      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800804e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008052:	d018      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008058:	d811      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800805a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800805e:	d014      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008064:	d80b      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d011      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800806a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806e:	d106      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008070:	4bc3      	ldr	r3, [pc, #780]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	4ac2      	ldr	r2, [pc, #776]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800807c:	e008      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008084:	e004      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800808e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008098:	4bb9      	ldr	r3, [pc, #740]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800809a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a8:	4ab5      	ldr	r2, [pc, #724]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080aa:	430b      	orrs	r3, r1
 80080ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80080ae:	e003      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080c6:	2300      	movs	r3, #0
 80080c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080ce:	460b      	mov	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d009      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080d4:	4baa      	ldr	r3, [pc, #680]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e2:	4aa7      	ldr	r2, [pc, #668]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e4:	430b      	orrs	r3, r1
 80080e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80080f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80080f6:	2300      	movs	r3, #0
 80080f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80080fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d00a      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008104:	4b9e      	ldr	r3, [pc, #632]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008114:	4a9a      	ldr	r2, [pc, #616]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008116:	430b      	orrs	r3, r1
 8008118:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008128:	2300      	movs	r3, #0
 800812a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800812c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008136:	4b92      	ldr	r3, [pc, #584]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008144:	4a8e      	ldr	r2, [pc, #568]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008146:	430b      	orrs	r3, r1
 8008148:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008156:	643b      	str	r3, [r7, #64]	@ 0x40
 8008158:	2300      	movs	r3, #0
 800815a:	647b      	str	r3, [r7, #68]	@ 0x44
 800815c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008160:	460b      	mov	r3, r1
 8008162:	4313      	orrs	r3, r2
 8008164:	d00e      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008166:	4b86      	ldr	r3, [pc, #536]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	4a85      	ldr	r2, [pc, #532]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800816c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008170:	6113      	str	r3, [r2, #16]
 8008172:	4b83      	ldr	r3, [pc, #524]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008174:	6919      	ldr	r1, [r3, #16]
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800817e:	4a80      	ldr	r2, [pc, #512]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008190:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008196:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800819a:	460b      	mov	r3, r1
 800819c:	4313      	orrs	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081a0:	4b77      	ldr	r3, [pc, #476]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ae:	4a74      	ldr	r2, [pc, #464]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081b0:	430b      	orrs	r3, r1
 80081b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081ca:	460b      	mov	r3, r1
 80081cc:	4313      	orrs	r3, r2
 80081ce:	d00a      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081e0:	4a67      	ldr	r2, [pc, #412]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	2100      	movs	r1, #0
 80081f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d011      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008206:	3308      	adds	r3, #8
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fb78 	bl	8008900 <RCCEx_PLL2_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	2100      	movs	r1, #0
 8008230:	6239      	str	r1, [r7, #32]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	627b      	str	r3, [r7, #36]	@ 0x24
 8008238:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800823c:	460b      	mov	r3, r1
 800823e:	4313      	orrs	r3, r2
 8008240:	d011      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008246:	3308      	adds	r3, #8
 8008248:	2101      	movs	r1, #1
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fb58 	bl	8008900 <RCCEx_PLL2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	2100      	movs	r1, #0
 8008270:	61b9      	str	r1, [r7, #24]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	61fb      	str	r3, [r7, #28]
 8008278:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d011      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	3308      	adds	r3, #8
 8008288:	2102      	movs	r1, #2
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fb38 	bl	8008900 <RCCEx_PLL2_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	2100      	movs	r1, #0
 80082b0:	6139      	str	r1, [r7, #16]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d011      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c6:	3328      	adds	r3, #40	@ 0x28
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fbca 	bl	8008a64 <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80082d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	2100      	movs	r1, #0
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d011      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	3328      	adds	r3, #40	@ 0x28
 8008308:	2101      	movs	r1, #1
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fbaa 	bl	8008a64 <RCCEx_PLL3_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	2100      	movs	r1, #0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	e9d7 1200 	ldrd	r1, r2, [r7]
 800833c:	460b      	mov	r3, r1
 800833e:	4313      	orrs	r3, r2
 8008340:	d011      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	3328      	adds	r3, #40	@ 0x28
 8008348:	2102      	movs	r1, #2
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fb8a 	bl	8008a64 <RCCEx_PLL3_Config>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008366:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
}
 8008374:	4618      	mov	r0, r3
 8008376:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800837a:	46bd      	mov	sp, r7
 800837c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008380:	58024400 	.word	0x58024400

08008384 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008388:	f7fe fd54 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 800838c:	4602      	mov	r2, r0
 800838e:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	4904      	ldr	r1, [pc, #16]	@ (80083ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800839a:	5ccb      	ldrb	r3, [r1, r3]
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	58024400 	.word	0x58024400
 80083ac:	08018ba4 	.word	0x08018ba4

080083b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	@ 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b8:	4ba1      	ldr	r3, [pc, #644]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80083c2:	4b9f      	ldr	r3, [pc, #636]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	0b1b      	lsrs	r3, r3, #12
 80083c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80083ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	091b      	lsrs	r3, r3, #4
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80083da:	4b99      	ldr	r3, [pc, #612]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083de:	08db      	lsrs	r3, r3, #3
 80083e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8111 	beq.w	8008620 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b02      	cmp	r3, #2
 8008402:	f000 8083 	beq.w	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b02      	cmp	r3, #2
 800840a:	f200 80a1 	bhi.w	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d056      	beq.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800841a:	e099      	b.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841c:	4b88      	ldr	r3, [pc, #544]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d02d      	beq.n	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008428:	4b85      	ldr	r3, [pc, #532]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	08db      	lsrs	r3, r3, #3
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	4a84      	ldr	r2, [pc, #528]	@ (8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008434:	fa22 f303 	lsr.w	r3, r2, r3
 8008438:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b7b      	ldr	r3, [pc, #492]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008482:	e087      	b.n	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800864c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b6a      	ldr	r3, [pc, #424]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c6:	e065      	b.n	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084da:	4b59      	ldr	r3, [pc, #356]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850a:	e043      	b.n	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008654 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b48      	ldr	r3, [pc, #288]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854e:	e021      	b.n	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b37      	ldr	r3, [pc, #220]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008592:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008594:	4b2a      	ldr	r3, [pc, #168]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	0a5b      	lsrs	r3, r3, #9
 800859a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80085b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ba:	ee17 2a90 	vmov	r2, s15
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80085c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c6:	0c1b      	lsrs	r3, r3, #16
 80085c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e8:	ee17 2a90 	vmov	r2, s15
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80085f0:	4b13      	ldr	r3, [pc, #76]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	0e1b      	lsrs	r3, r3, #24
 80085f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800860a:	edd7 6a07 	vldr	s13, [r7, #28]
 800860e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008616:	ee17 2a90 	vmov	r2, s15
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800861e:	e008      	b.n	8008632 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
}
 8008632:	bf00      	nop
 8008634:	3724      	adds	r7, #36	@ 0x24
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	03d09000 	.word	0x03d09000
 8008648:	46000000 	.word	0x46000000
 800864c:	4c742400 	.word	0x4c742400
 8008650:	4a742400 	.word	0x4a742400
 8008654:	4af42400 	.word	0x4af42400

08008658 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008658:	b480      	push	{r7}
 800865a:	b089      	sub	sp, #36	@ 0x24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008660:	4ba1      	ldr	r3, [pc, #644]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800866a:	4b9f      	ldr	r3, [pc, #636]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	0d1b      	lsrs	r3, r3, #20
 8008670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008674:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008676:	4b9c      	ldr	r3, [pc, #624]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008682:	4b99      	ldr	r3, [pc, #612]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	fb02 f303 	mul.w	r3, r2, r3
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8111 	beq.w	80088c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	f000 8083 	beq.w	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	f200 80a1 	bhi.w	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d056      	beq.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80086c2:	e099      	b.n	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c4:	4b88      	ldr	r3, [pc, #544]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02d      	beq.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086d0:	4b85      	ldr	r3, [pc, #532]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	08db      	lsrs	r3, r3, #3
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	4a84      	ldr	r2, [pc, #528]	@ (80088ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b7b      	ldr	r3, [pc, #492]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800872a:	e087      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b6a      	ldr	r3, [pc, #424]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e065      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b59      	ldr	r3, [pc, #356]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	e043      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b48      	ldr	r3, [pc, #288]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f6:	e021      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b37      	ldr	r3, [pc, #220]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a03 	vldr	s12, [r7, #12]
 800881e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800883a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800883c:	4b2a      	ldr	r3, [pc, #168]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800883e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008840:	0a5b      	lsrs	r3, r3, #9
 8008842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008856:	edd7 6a07 	vldr	s13, [r7, #28]
 800885a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008862:	ee17 2a90 	vmov	r2, s15
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800886a:	4b1f      	ldr	r3, [pc, #124]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008884:	edd7 6a07 	vldr	s13, [r7, #28]
 8008888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008890:	ee17 2a90 	vmov	r2, s15
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008898:	4b13      	ldr	r3, [pc, #76]	@ (80088e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800889a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088be:	ee17 2a90 	vmov	r2, s15
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80088c6:	e008      	b.n	80088da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	609a      	str	r2, [r3, #8]
}
 80088da:	bf00      	nop
 80088dc:	3724      	adds	r7, #36	@ 0x24
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	58024400 	.word	0x58024400
 80088ec:	03d09000 	.word	0x03d09000
 80088f0:	46000000 	.word	0x46000000
 80088f4:	4c742400 	.word	0x4c742400
 80088f8:	4a742400 	.word	0x4a742400
 80088fc:	4af42400 	.word	0x4af42400

08008900 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800890e:	4b53      	ldr	r3, [pc, #332]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d101      	bne.n	800891e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e099      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800891e:	4b4f      	ldr	r3, [pc, #316]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a4e      	ldr	r2, [pc, #312]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008924:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892a:	f7f9 fbef 	bl	800210c <HAL_GetTick>
 800892e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008930:	e008      	b.n	8008944 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008932:	f7f9 fbeb 	bl	800210c <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d901      	bls.n	8008944 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e086      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008944:	4b45      	ldr	r3, [pc, #276]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f0      	bne.n	8008932 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008950:	4b42      	ldr	r3, [pc, #264]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	493f      	ldr	r1, [pc, #252]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008960:	4313      	orrs	r3, r2
 8008962:	628b      	str	r3, [r1, #40]	@ 0x28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	3b01      	subs	r3, #1
 800896a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	3b01      	subs	r3, #1
 8008974:	025b      	lsls	r3, r3, #9
 8008976:	b29b      	uxth	r3, r3
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	3b01      	subs	r3, #1
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	3b01      	subs	r3, #1
 800898e:	061b      	lsls	r3, r3, #24
 8008990:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008994:	4931      	ldr	r1, [pc, #196]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800899a:	4b30      	ldr	r3, [pc, #192]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	492d      	ldr	r1, [pc, #180]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089ac:	4b2b      	ldr	r3, [pc, #172]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	f023 0220 	bic.w	r2, r3, #32
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	4928      	ldr	r1, [pc, #160]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089be:	4b27      	ldr	r3, [pc, #156]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	4a26      	ldr	r2, [pc, #152]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ca:	4b24      	ldr	r3, [pc, #144]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089ce:	4b24      	ldr	r3, [pc, #144]	@ (8008a60 <RCCEx_PLL2_Config+0x160>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	69d2      	ldr	r2, [r2, #28]
 80089d6:	00d2      	lsls	r2, r2, #3
 80089d8:	4920      	ldr	r1, [pc, #128]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089de:	4b1f      	ldr	r3, [pc, #124]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089e4:	f043 0310 	orr.w	r3, r3, #16
 80089e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089f0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f4:	4a19      	ldr	r2, [pc, #100]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089fc:	e00f      	b.n	8008a1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d106      	bne.n	8008a12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a04:	4b15      	ldr	r3, [pc, #84]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a08:	4a14      	ldr	r2, [pc, #80]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a10:	e005      	b.n	8008a1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a12:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	4a11      	ldr	r2, [pc, #68]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a0e      	ldr	r2, [pc, #56]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2a:	f7f9 fb6f 	bl	800210c <HAL_GetTick>
 8008a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a30:	e008      	b.n	8008a44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a32:	f7f9 fb6b 	bl	800210c <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e006      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a44:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f0      	beq.n	8008a32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	ffff0007 	.word	0xffff0007

08008a64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a72:	4b53      	ldr	r3, [pc, #332]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d101      	bne.n	8008a82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e099      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a82:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a4e      	ldr	r2, [pc, #312]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8e:	f7f9 fb3d 	bl	800210c <HAL_GetTick>
 8008a92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a94:	e008      	b.n	8008aa8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a96:	f7f9 fb39 	bl	800210c <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e086      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aa8:	4b45      	ldr	r3, [pc, #276]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ab4:	4b42      	ldr	r3, [pc, #264]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	051b      	lsls	r3, r3, #20
 8008ac2:	493f      	ldr	r1, [pc, #252]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	025b      	lsls	r3, r3, #9
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	061b      	lsls	r3, r3, #24
 8008af4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008af8:	4931      	ldr	r1, [pc, #196]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008afe:	4b30      	ldr	r3, [pc, #192]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	492d      	ldr	r1, [pc, #180]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b10:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	4928      	ldr	r1, [pc, #160]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b22:	4b27      	ldr	r3, [pc, #156]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b2e:	4b24      	ldr	r3, [pc, #144]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b32:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <RCCEx_PLL3_Config+0x160>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	69d2      	ldr	r2, [r2, #28]
 8008b3a:	00d2      	lsls	r2, r2, #3
 8008b3c:	4920      	ldr	r1, [pc, #128]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b42:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	4a1e      	ldr	r2, [pc, #120]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b54:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b58:	4a19      	ldr	r2, [pc, #100]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b60:	e00f      	b.n	8008b82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d106      	bne.n	8008b76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b68:	4b15      	ldr	r3, [pc, #84]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	4a14      	ldr	r2, [pc, #80]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b74:	e005      	b.n	8008b82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b76:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7a:	4a11      	ldr	r2, [pc, #68]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b82:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8e:	f7f9 fabd 	bl	800210c <HAL_GetTick>
 8008b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b94:	e008      	b.n	8008ba8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b96:	f7f9 fab9 	bl	800210c <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e006      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ba8:	4b05      	ldr	r3, [pc, #20]	@ (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	ffff0007 	.word	0xffff0007

08008bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e049      	b.n	8008c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f841 	bl	8008c76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 f9e8 	bl	8008fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d001      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e054      	b.n	8008d4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a26      	ldr	r2, [pc, #152]	@ (8008d5c <HAL_TIM_Base_Start_IT+0xd0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d022      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cce:	d01d      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a22      	ldr	r2, [pc, #136]	@ (8008d60 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d018      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a21      	ldr	r2, [pc, #132]	@ (8008d64 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d68 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d6c <HAL_TIM_Base_Start_IT+0xe0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8008d70 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d004      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1b      	ldr	r2, [pc, #108]	@ (8008d74 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d115      	bne.n	8008d38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	4b19      	ldr	r3, [pc, #100]	@ (8008d78 <HAL_TIM_Base_Start_IT+0xec>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b06      	cmp	r3, #6
 8008d1c:	d015      	beq.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d24:	d011      	beq.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d36:	e008      	b.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e000      	b.n	8008d4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	40001800 	.word	0x40001800
 8008d74:	40014000 	.word	0x40014000
 8008d78:	00010007 	.word	0x00010007

08008d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d020      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01b      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0202 	mvn.w	r2, #2
 8008db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8e9 	bl	8008f9e <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8db 	bl	8008f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f8ec 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d020      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01b      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f06f 0204 	mvn.w	r2, #4
 8008dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8c3 	bl	8008f9e <HAL_TIM_IC_CaptureCallback>
 8008e18:	e005      	b.n	8008e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8b5 	bl	8008f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8c6 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d020      	beq.n	8008e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01b      	beq.n	8008e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0208 	mvn.w	r2, #8
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f89d 	bl	8008f9e <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f88f 	bl	8008f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f8a0 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d020      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01b      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0210 	mvn.w	r2, #16
 8008e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f877 	bl	8008f9e <HAL_TIM_IC_CaptureCallback>
 8008eb0:	e005      	b.n	8008ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f869 	bl	8008f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f87a 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00c      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f06f 0201 	mvn.w	r2, #1
 8008ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7f8 fb2c 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d104      	bne.n	8008efc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00c      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f913 	bl	800913c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00c      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d007      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f90b 	bl	8009150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00c      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f834 	bl	8008fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00c      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d007      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0220 	mvn.w	r2, #32
 8008f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f8d3 	bl	8009128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
	...

08008fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a46      	ldr	r2, [pc, #280]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d013      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffa:	d00f      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a43      	ldr	r2, [pc, #268]	@ (800910c <TIM_Base_SetConfig+0x130>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00b      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a42      	ldr	r2, [pc, #264]	@ (8009110 <TIM_Base_SetConfig+0x134>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a41      	ldr	r2, [pc, #260]	@ (8009114 <TIM_Base_SetConfig+0x138>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a40      	ldr	r2, [pc, #256]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d108      	bne.n	800902e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a35      	ldr	r2, [pc, #212]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d01f      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903c:	d01b      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a32      	ldr	r2, [pc, #200]	@ (800910c <TIM_Base_SetConfig+0x130>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d017      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a31      	ldr	r2, [pc, #196]	@ (8009110 <TIM_Base_SetConfig+0x134>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a30      	ldr	r2, [pc, #192]	@ (8009114 <TIM_Base_SetConfig+0x138>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00f      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a2f      	ldr	r2, [pc, #188]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00b      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a2e      	ldr	r2, [pc, #184]	@ (800911c <TIM_Base_SetConfig+0x140>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d007      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2d      	ldr	r2, [pc, #180]	@ (8009120 <TIM_Base_SetConfig+0x144>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d003      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2c      	ldr	r2, [pc, #176]	@ (8009124 <TIM_Base_SetConfig+0x148>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d108      	bne.n	8009088 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800907c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a16      	ldr	r2, [pc, #88]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00f      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a18      	ldr	r2, [pc, #96]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00b      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a17      	ldr	r2, [pc, #92]	@ (800911c <TIM_Base_SetConfig+0x140>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a16      	ldr	r2, [pc, #88]	@ (8009120 <TIM_Base_SetConfig+0x144>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <TIM_Base_SetConfig+0x148>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d103      	bne.n	80090dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d105      	bne.n	80090fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f023 0201 	bic.w	r2, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	611a      	str	r2, [r3, #16]
  }
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40010000 	.word	0x40010000
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	40000c00 	.word	0x40000c00
 8009118:	40010400 	.word	0x40010400
 800911c:	40014000 	.word	0x40014000
 8009120:	40014400 	.word	0x40014400
 8009124:	40014800 	.word	0x40014800

08009128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e042      	b.n	80091fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f8 fdbd 	bl	8001d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2224      	movs	r2, #36	@ 0x24
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0201 	bic.w	r2, r2, #1
 80091a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 faea 	bl	800a788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fd7f 	bl	8009cb8 <UART_SetConfig>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e01b      	b.n	80091fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fb69 	bl	800a8cc <UART_CheckIdleState>
 80091fa:	4603      	mov	r3, r0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	@ 0x28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009218:	2b20      	cmp	r3, #32
 800921a:	d167      	bne.n	80092ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <HAL_UART_Transmit_DMA+0x24>
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e060      	b.n	80092ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	88fa      	ldrh	r2, [r7, #6]
 8009236:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2221      	movs	r2, #33	@ 0x21
 800924e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d028      	beq.n	80092ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800925e:	4a26      	ldr	r2, [pc, #152]	@ (80092f8 <HAL_UART_Transmit_DMA+0xf4>)
 8009260:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009266:	4a25      	ldr	r2, [pc, #148]	@ (80092fc <HAL_UART_Transmit_DMA+0xf8>)
 8009268:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800926e:	4a24      	ldr	r2, [pc, #144]	@ (8009300 <HAL_UART_Transmit_DMA+0xfc>)
 8009270:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009276:	2200      	movs	r2, #0
 8009278:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009282:	4619      	mov	r1, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3328      	adds	r3, #40	@ 0x28
 800928a:	461a      	mov	r2, r3
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	f7f9 fbc9 	bl	8002a24 <HAL_DMA_Start_IT>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2210      	movs	r2, #16
 800929c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e020      	b.n	80092ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2240      	movs	r2, #64	@ 0x40
 80092b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3308      	adds	r3, #8
 80092ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	613b      	str	r3, [r7, #16]
   return(result);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d4:	623a      	str	r2, [r7, #32]
 80092d6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69f9      	ldr	r1, [r7, #28]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e5      	bne.n	80092b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e000      	b.n	80092ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80092ec:	2302      	movs	r3, #2
  }
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3728      	adds	r7, #40	@ 0x28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	0800ad99 	.word	0x0800ad99
 80092fc:	0800ae2f 	.word	0x0800ae2f
 8009300:	0800afb1 	.word	0x0800afb1

08009304 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	@ 0x28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009318:	2b20      	cmp	r3, #32
 800931a:	d137      	bne.n	800938c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_Receive_DMA+0x24>
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e030      	b.n	800938e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a18      	ldr	r2, [pc, #96]	@ (8009398 <HAL_UART_Receive_DMA+0x94>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d01f      	beq.n	800937c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d018      	beq.n	800937c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	613b      	str	r3, [r7, #16]
   return(result);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	623b      	str	r3, [r7, #32]
 800936a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69f9      	ldr	r1, [r7, #28]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	61bb      	str	r3, [r7, #24]
   return(result);
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	461a      	mov	r2, r3
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f001 fbba 	bl	800aafc <UART_Start_Receive_DMA>
 8009388:	4603      	mov	r3, r0
 800938a:	e000      	b.n	800938e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800938c:	2302      	movs	r3, #2
  }
}
 800938e:	4618      	mov	r0, r3
 8009390:	3728      	adds	r7, #40	@ 0x28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	58000c00 	.word	0x58000c00

0800939c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b090      	sub	sp, #64	@ 0x40
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093be:	2b80      	cmp	r3, #128	@ 0x80
 80093c0:	d139      	bne.n	8009436 <HAL_UART_DMAStop+0x9a>
 80093c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c4:	2b21      	cmp	r3, #33	@ 0x21
 80093c6:	d136      	bne.n	8009436 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e5      	bne.n	80093c8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d015      	beq.n	8009430 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009408:	4618      	mov	r0, r3
 800940a:	f7f9 fd75 	bl	8002ef8 <HAL_DMA_Abort>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00d      	beq.n	8009430 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009418:	4618      	mov	r0, r3
 800941a:	f7fb f9fb 	bl	8004814 <HAL_DMA_GetError>
 800941e:	4603      	mov	r3, r0
 8009420:	2b20      	cmp	r3, #32
 8009422:	d105      	bne.n	8009430 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2210      	movs	r2, #16
 8009428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e047      	b.n	80094c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fc09 	bl	800ac48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	d13c      	bne.n	80094be <HAL_UART_DMAStop+0x122>
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	2b22      	cmp	r3, #34	@ 0x22
 8009448:	d139      	bne.n	80094be <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	60bb      	str	r3, [r7, #8]
   return(result);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009460:	633b      	str	r3, [r7, #48]	@ 0x30
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946a:	61ba      	str	r2, [r7, #24]
 800946c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6979      	ldr	r1, [r7, #20]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	613b      	str	r3, [r7, #16]
   return(result);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e5      	bne.n	800944a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009484:	2b00      	cmp	r3, #0
 8009486:	d017      	beq.n	80094b8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800948e:	4618      	mov	r0, r3
 8009490:	f7f9 fd32 	bl	8002ef8 <HAL_DMA_Abort>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fb f9b7 	bl	8004814 <HAL_DMA_GetError>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b20      	cmp	r3, #32
 80094aa:	d105      	bne.n	80094b8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2210      	movs	r2, #16
 80094b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e003      	b.n	80094c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fc07 	bl	800accc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3740      	adds	r7, #64	@ 0x40
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b0ba      	sub	sp, #232	@ 0xe8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80094f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094f6:	4013      	ands	r3, r2
 80094f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11b      	bne.n	800953c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d015      	beq.n	800953c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	d105      	bne.n	8009528 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800951c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8377 	beq.w	8009c20 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
      }
      return;
 800953a:	e371      	b.n	8009c20 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800953c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8123 	beq.w	800978c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009546:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800954a:	4b8d      	ldr	r3, [pc, #564]	@ (8009780 <HAL_UART_IRQHandler+0x2b8>)
 800954c:	4013      	ands	r3, r2
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009556:	4b8b      	ldr	r3, [pc, #556]	@ (8009784 <HAL_UART_IRQHandler+0x2bc>)
 8009558:	4013      	ands	r3, r2
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8116 	beq.w	800978c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d011      	beq.n	8009590 <HAL_UART_IRQHandler+0xc8>
 800956c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00b      	beq.n	8009590 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2201      	movs	r2, #1
 800957e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009586:	f043 0201 	orr.w	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d011      	beq.n	80095c0 <HAL_UART_IRQHandler+0xf8>
 800959c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2202      	movs	r2, #2
 80095ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b6:	f043 0204 	orr.w	r2, r3, #4
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d011      	beq.n	80095f0 <HAL_UART_IRQHandler+0x128>
 80095cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2204      	movs	r2, #4
 80095de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f4:	f003 0308 	and.w	r3, r3, #8
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d017      	beq.n	800962c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009600:	f003 0320 	and.w	r3, r3, #32
 8009604:	2b00      	cmp	r3, #0
 8009606:	d105      	bne.n	8009614 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009608:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800960c:	4b5c      	ldr	r3, [pc, #368]	@ (8009780 <HAL_UART_IRQHandler+0x2b8>)
 800960e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2208      	movs	r2, #8
 800961a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009622:	f043 0208 	orr.w	r2, r3, #8
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800962c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009634:	2b00      	cmp	r3, #0
 8009636:	d012      	beq.n	800965e <HAL_UART_IRQHandler+0x196>
 8009638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800963c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800964c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009654:	f043 0220 	orr.w	r2, r3, #32
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 82dd 	beq.w	8009c24 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d013      	beq.n	800969e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d105      	bne.n	800968e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d054      	beq.n	800976c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 fb02 	bl	800accc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d2:	2b40      	cmp	r3, #64	@ 0x40
 80096d4:	d146      	bne.n	8009764 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009702:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800970e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800971a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1d9      	bne.n	80096d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009728:	2b00      	cmp	r3, #0
 800972a:	d017      	beq.n	800975c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009732:	4a15      	ldr	r2, [pc, #84]	@ (8009788 <HAL_UART_IRQHandler+0x2c0>)
 8009734:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973c:	4618      	mov	r0, r3
 800973e:	f7f9 fef9 	bl	8003534 <HAL_DMA_Abort_IT>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d019      	beq.n	800977c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800974e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009756:	4610      	mov	r0, r2
 8009758:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975a:	e00f      	b.n	800977c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fa95 	bl	8009c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009762:	e00b      	b.n	800977c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa91 	bl	8009c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800976a:	e007      	b.n	800977c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa8d 	bl	8009c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800977a:	e253      	b.n	8009c24 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800977c:	bf00      	nop
    return;
 800977e:	e251      	b.n	8009c24 <HAL_UART_IRQHandler+0x75c>
 8009780:	10000001 	.word	0x10000001
 8009784:	04000120 	.word	0x04000120
 8009788:	0800b031 	.word	0x0800b031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009790:	2b01      	cmp	r3, #1
 8009792:	f040 81e7 	bne.w	8009b64 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979a:	f003 0310 	and.w	r3, r3, #16
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 81e0 	beq.w	8009b64 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 81d9 	beq.w	8009b64 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2210      	movs	r2, #16
 80097b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c4:	2b40      	cmp	r3, #64	@ 0x40
 80097c6:	f040 8151 	bne.w	8009a6c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a96      	ldr	r2, [pc, #600]	@ (8009a2c <HAL_UART_IRQHandler+0x564>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d068      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a93      	ldr	r2, [pc, #588]	@ (8009a30 <HAL_UART_IRQHandler+0x568>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d061      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a91      	ldr	r2, [pc, #580]	@ (8009a34 <HAL_UART_IRQHandler+0x56c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d05a      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009a38 <HAL_UART_IRQHandler+0x570>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d053      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a8c      	ldr	r2, [pc, #560]	@ (8009a3c <HAL_UART_IRQHandler+0x574>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d04c      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a89      	ldr	r2, [pc, #548]	@ (8009a40 <HAL_UART_IRQHandler+0x578>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d045      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a87      	ldr	r2, [pc, #540]	@ (8009a44 <HAL_UART_IRQHandler+0x57c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d03e      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a84      	ldr	r2, [pc, #528]	@ (8009a48 <HAL_UART_IRQHandler+0x580>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d037      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a82      	ldr	r2, [pc, #520]	@ (8009a4c <HAL_UART_IRQHandler+0x584>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d030      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a7f      	ldr	r2, [pc, #508]	@ (8009a50 <HAL_UART_IRQHandler+0x588>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d029      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a7d      	ldr	r2, [pc, #500]	@ (8009a54 <HAL_UART_IRQHandler+0x58c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d022      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a7a      	ldr	r2, [pc, #488]	@ (8009a58 <HAL_UART_IRQHandler+0x590>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01b      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a78      	ldr	r2, [pc, #480]	@ (8009a5c <HAL_UART_IRQHandler+0x594>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d014      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a75      	ldr	r2, [pc, #468]	@ (8009a60 <HAL_UART_IRQHandler+0x598>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00d      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a73      	ldr	r2, [pc, #460]	@ (8009a64 <HAL_UART_IRQHandler+0x59c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d006      	beq.n	80098aa <HAL_UART_IRQHandler+0x3e2>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a70      	ldr	r2, [pc, #448]	@ (8009a68 <HAL_UART_IRQHandler+0x5a0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d106      	bne.n	80098b8 <HAL_UART_IRQHandler+0x3f0>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	e005      	b.n	80098c4 <HAL_UART_IRQHandler+0x3fc>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 81ab 	beq.w	8009c28 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098dc:	429a      	cmp	r2, r3
 80098de:	f080 81a3 	bcs.w	8009c28 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f8:	f000 8087 	beq.w	8009a0a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009926:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800992a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800993e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1da      	bne.n	80098fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800996a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800996e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800997c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e1      	bne.n	8009946 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e3      	bne.n	8009982 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099d8:	f023 0310 	bic.w	r3, r3, #16
 80099dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e4      	bne.n	80099c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7f9 fa77 	bl	8002ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f93b 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a2a:	e0fd      	b.n	8009c28 <HAL_UART_IRQHandler+0x760>
 8009a2c:	40020010 	.word	0x40020010
 8009a30:	40020028 	.word	0x40020028
 8009a34:	40020040 	.word	0x40020040
 8009a38:	40020058 	.word	0x40020058
 8009a3c:	40020070 	.word	0x40020070
 8009a40:	40020088 	.word	0x40020088
 8009a44:	400200a0 	.word	0x400200a0
 8009a48:	400200b8 	.word	0x400200b8
 8009a4c:	40020410 	.word	0x40020410
 8009a50:	40020428 	.word	0x40020428
 8009a54:	40020440 	.word	0x40020440
 8009a58:	40020458 	.word	0x40020458
 8009a5c:	40020470 	.word	0x40020470
 8009a60:	40020488 	.word	0x40020488
 8009a64:	400204a0 	.word	0x400204a0
 8009a68:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 80cf 	beq.w	8009c2c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 80ca 	beq.w	8009c2c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	e853 3f00 	ldrex	r3, [r3]
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009abc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e4      	bne.n	8009a98 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3a      	ldr	r2, [r7, #32]
 8009ae0:	4b55      	ldr	r3, [pc, #340]	@ (8009c38 <HAL_UART_IRQHandler+0x770>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3308      	adds	r3, #8
 8009aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e3      	bne.n	8009ace <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0310 	bic.w	r3, r3, #16
 8009b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	69b9      	ldr	r1, [r7, #24]
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	617b      	str	r3, [r7, #20]
   return(result);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e4      	bne.n	8009b1a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f89f 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b62:	e063      	b.n	8009c2c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00e      	beq.n	8009b8e <HAL_UART_IRQHandler+0x6c6>
 8009b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d008      	beq.n	8009b8e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 fa93 	bl	800b0b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8c:	e051      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d014      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d105      	bne.n	8009bb2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d008      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d03a      	beq.n	8009c30 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
    }
    return;
 8009bc2:	e035      	b.n	8009c30 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d009      	beq.n	8009be4 <HAL_UART_IRQHandler+0x71c>
 8009bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fa3d 	bl	800b05c <UART_EndTransmit_IT>
    return;
 8009be2:	e026      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d009      	beq.n	8009c04 <HAL_UART_IRQHandler+0x73c>
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 fa6c 	bl	800b0da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c02:	e016      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d010      	beq.n	8009c32 <HAL_UART_IRQHandler+0x76a>
 8009c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da0c      	bge.n	8009c32 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 fa54 	bl	800b0c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c1e:	e008      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c20:	bf00      	nop
 8009c22:	e006      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
    return;
 8009c24:	bf00      	nop
 8009c26:	e004      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c28:	bf00      	nop
 8009c2a:	e002      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c2c:	bf00      	nop
 8009c2e:	e000      	b.n	8009c32 <HAL_UART_IRQHandler+0x76a>
    return;
 8009c30:	bf00      	nop
  }
}
 8009c32:	37e8      	adds	r7, #232	@ 0xe8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	effffffe 	.word	0xeffffffe

08009c3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cbc:	b092      	sub	sp, #72	@ 0x48
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4bbe      	ldr	r3, [pc, #760]	@ (8009fe0 <UART_SetConfig+0x328>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cf0:	430b      	orrs	r3, r1
 8009cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4ab3      	ldr	r2, [pc, #716]	@ (8009fe4 <UART_SetConfig+0x32c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d004      	beq.n	8009d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d20:	4313      	orrs	r3, r2
 8009d22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	4baf      	ldr	r3, [pc, #700]	@ (8009fe8 <UART_SetConfig+0x330>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d34:	430b      	orrs	r3, r1
 8009d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3e:	f023 010f 	bic.w	r1, r3, #15
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4aa6      	ldr	r2, [pc, #664]	@ (8009fec <UART_SetConfig+0x334>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d177      	bne.n	8009e48 <UART_SetConfig+0x190>
 8009d58:	4ba5      	ldr	r3, [pc, #660]	@ (8009ff0 <UART_SetConfig+0x338>)
 8009d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d60:	2b28      	cmp	r3, #40	@ 0x28
 8009d62:	d86d      	bhi.n	8009e40 <UART_SetConfig+0x188>
 8009d64:	a201      	add	r2, pc, #4	@ (adr r2, 8009d6c <UART_SetConfig+0xb4>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009e11 	.word	0x08009e11
 8009d70:	08009e41 	.word	0x08009e41
 8009d74:	08009e41 	.word	0x08009e41
 8009d78:	08009e41 	.word	0x08009e41
 8009d7c:	08009e41 	.word	0x08009e41
 8009d80:	08009e41 	.word	0x08009e41
 8009d84:	08009e41 	.word	0x08009e41
 8009d88:	08009e41 	.word	0x08009e41
 8009d8c:	08009e19 	.word	0x08009e19
 8009d90:	08009e41 	.word	0x08009e41
 8009d94:	08009e41 	.word	0x08009e41
 8009d98:	08009e41 	.word	0x08009e41
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e41 	.word	0x08009e41
 8009da4:	08009e41 	.word	0x08009e41
 8009da8:	08009e41 	.word	0x08009e41
 8009dac:	08009e21 	.word	0x08009e21
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e41 	.word	0x08009e41
 8009db8:	08009e41 	.word	0x08009e41
 8009dbc:	08009e41 	.word	0x08009e41
 8009dc0:	08009e41 	.word	0x08009e41
 8009dc4:	08009e41 	.word	0x08009e41
 8009dc8:	08009e41 	.word	0x08009e41
 8009dcc:	08009e29 	.word	0x08009e29
 8009dd0:	08009e41 	.word	0x08009e41
 8009dd4:	08009e41 	.word	0x08009e41
 8009dd8:	08009e41 	.word	0x08009e41
 8009ddc:	08009e41 	.word	0x08009e41
 8009de0:	08009e41 	.word	0x08009e41
 8009de4:	08009e41 	.word	0x08009e41
 8009de8:	08009e41 	.word	0x08009e41
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e41 	.word	0x08009e41
 8009df4:	08009e41 	.word	0x08009e41
 8009df8:	08009e41 	.word	0x08009e41
 8009dfc:	08009e41 	.word	0x08009e41
 8009e00:	08009e41 	.word	0x08009e41
 8009e04:	08009e41 	.word	0x08009e41
 8009e08:	08009e41 	.word	0x08009e41
 8009e0c:	08009e39 	.word	0x08009e39
 8009e10:	2301      	movs	r3, #1
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e222      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e21e      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e21a      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e216      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e30:	2320      	movs	r3, #32
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e212      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e38:	2340      	movs	r3, #64	@ 0x40
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e20e      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e40:	2380      	movs	r3, #128	@ 0x80
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e20a      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a69      	ldr	r2, [pc, #420]	@ (8009ff4 <UART_SetConfig+0x33c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d130      	bne.n	8009eb4 <UART_SetConfig+0x1fc>
 8009e52:	4b67      	ldr	r3, [pc, #412]	@ (8009ff0 <UART_SetConfig+0x338>)
 8009e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	2b05      	cmp	r3, #5
 8009e5c:	d826      	bhi.n	8009eac <UART_SetConfig+0x1f4>
 8009e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <UART_SetConfig+0x1ac>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009e7d 	.word	0x08009e7d
 8009e68:	08009e85 	.word	0x08009e85
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009e9d 	.word	0x08009e9d
 8009e78:	08009ea5 	.word	0x08009ea5
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e1ec      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e84:	2304      	movs	r3, #4
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e1e8      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e1e4      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e94:	2310      	movs	r3, #16
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e1e0      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009e9c:	2320      	movs	r3, #32
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e1dc      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009ea4:	2340      	movs	r3, #64	@ 0x40
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e1d8      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009eac:	2380      	movs	r3, #128	@ 0x80
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e1d4      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8009ff8 <UART_SetConfig+0x340>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d130      	bne.n	8009f20 <UART_SetConfig+0x268>
 8009ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8009ff0 <UART_SetConfig+0x338>)
 8009ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b05      	cmp	r3, #5
 8009ec8:	d826      	bhi.n	8009f18 <UART_SetConfig+0x260>
 8009eca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed0 <UART_SetConfig+0x218>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009ee9 	.word	0x08009ee9
 8009ed4:	08009ef1 	.word	0x08009ef1
 8009ed8:	08009ef9 	.word	0x08009ef9
 8009edc:	08009f01 	.word	0x08009f01
 8009ee0:	08009f09 	.word	0x08009f09
 8009ee4:	08009f11 	.word	0x08009f11
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e1b6      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e1b2      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009ef8:	2308      	movs	r3, #8
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e1ae      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f00:	2310      	movs	r3, #16
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e1aa      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f08:	2320      	movs	r3, #32
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e1a6      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f10:	2340      	movs	r3, #64	@ 0x40
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e1a2      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f18:	2380      	movs	r3, #128	@ 0x80
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e19e      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a35      	ldr	r2, [pc, #212]	@ (8009ffc <UART_SetConfig+0x344>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d130      	bne.n	8009f8c <UART_SetConfig+0x2d4>
 8009f2a:	4b31      	ldr	r3, [pc, #196]	@ (8009ff0 <UART_SetConfig+0x338>)
 8009f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	d826      	bhi.n	8009f84 <UART_SetConfig+0x2cc>
 8009f36:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <UART_SetConfig+0x284>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f55 	.word	0x08009f55
 8009f40:	08009f5d 	.word	0x08009f5d
 8009f44:	08009f65 	.word	0x08009f65
 8009f48:	08009f6d 	.word	0x08009f6d
 8009f4c:	08009f75 	.word	0x08009f75
 8009f50:	08009f7d 	.word	0x08009f7d
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5a:	e180      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e17c      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f64:	2308      	movs	r3, #8
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e178      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e174      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f74:	2320      	movs	r3, #32
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e170      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f7c:	2340      	movs	r3, #64	@ 0x40
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e16c      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f84:	2380      	movs	r3, #128	@ 0x80
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e168      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1b      	ldr	r2, [pc, #108]	@ (800a000 <UART_SetConfig+0x348>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d142      	bne.n	800a01c <UART_SetConfig+0x364>
 8009f96:	4b16      	ldr	r3, [pc, #88]	@ (8009ff0 <UART_SetConfig+0x338>)
 8009f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9a:	f003 0307 	and.w	r3, r3, #7
 8009f9e:	2b05      	cmp	r3, #5
 8009fa0:	d838      	bhi.n	800a014 <UART_SetConfig+0x35c>
 8009fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <UART_SetConfig+0x2f0>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fc1 	.word	0x08009fc1
 8009fac:	08009fc9 	.word	0x08009fc9
 8009fb0:	08009fd1 	.word	0x08009fd1
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	0800a005 	.word	0x0800a005
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc6:	e14a      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e146      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e142      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e13e      	b.n	800a25e <UART_SetConfig+0x5a6>
 8009fe0:	cfff69f3 	.word	0xcfff69f3
 8009fe4:	58000c00 	.word	0x58000c00
 8009fe8:	11fff4ff 	.word	0x11fff4ff
 8009fec:	40011000 	.word	0x40011000
 8009ff0:	58024400 	.word	0x58024400
 8009ff4:	40004400 	.word	0x40004400
 8009ff8:	40004800 	.word	0x40004800
 8009ffc:	40004c00 	.word	0x40004c00
 800a000:	40005000 	.word	0x40005000
 800a004:	2320      	movs	r3, #32
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00a:	e128      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a00c:	2340      	movs	r3, #64	@ 0x40
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a012:	e124      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a014:	2380      	movs	r3, #128	@ 0x80
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01a:	e120      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4acb      	ldr	r2, [pc, #812]	@ (800a350 <UART_SetConfig+0x698>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d176      	bne.n	800a114 <UART_SetConfig+0x45c>
 800a026:	4bcb      	ldr	r3, [pc, #812]	@ (800a354 <UART_SetConfig+0x69c>)
 800a028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a02e:	2b28      	cmp	r3, #40	@ 0x28
 800a030:	d86c      	bhi.n	800a10c <UART_SetConfig+0x454>
 800a032:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <UART_SetConfig+0x380>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a0dd 	.word	0x0800a0dd
 800a03c:	0800a10d 	.word	0x0800a10d
 800a040:	0800a10d 	.word	0x0800a10d
 800a044:	0800a10d 	.word	0x0800a10d
 800a048:	0800a10d 	.word	0x0800a10d
 800a04c:	0800a10d 	.word	0x0800a10d
 800a050:	0800a10d 	.word	0x0800a10d
 800a054:	0800a10d 	.word	0x0800a10d
 800a058:	0800a0e5 	.word	0x0800a0e5
 800a05c:	0800a10d 	.word	0x0800a10d
 800a060:	0800a10d 	.word	0x0800a10d
 800a064:	0800a10d 	.word	0x0800a10d
 800a068:	0800a10d 	.word	0x0800a10d
 800a06c:	0800a10d 	.word	0x0800a10d
 800a070:	0800a10d 	.word	0x0800a10d
 800a074:	0800a10d 	.word	0x0800a10d
 800a078:	0800a0ed 	.word	0x0800a0ed
 800a07c:	0800a10d 	.word	0x0800a10d
 800a080:	0800a10d 	.word	0x0800a10d
 800a084:	0800a10d 	.word	0x0800a10d
 800a088:	0800a10d 	.word	0x0800a10d
 800a08c:	0800a10d 	.word	0x0800a10d
 800a090:	0800a10d 	.word	0x0800a10d
 800a094:	0800a10d 	.word	0x0800a10d
 800a098:	0800a0f5 	.word	0x0800a0f5
 800a09c:	0800a10d 	.word	0x0800a10d
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a10d 	.word	0x0800a10d
 800a0a8:	0800a10d 	.word	0x0800a10d
 800a0ac:	0800a10d 	.word	0x0800a10d
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a0fd 	.word	0x0800a0fd
 800a0bc:	0800a10d 	.word	0x0800a10d
 800a0c0:	0800a10d 	.word	0x0800a10d
 800a0c4:	0800a10d 	.word	0x0800a10d
 800a0c8:	0800a10d 	.word	0x0800a10d
 800a0cc:	0800a10d 	.word	0x0800a10d
 800a0d0:	0800a10d 	.word	0x0800a10d
 800a0d4:	0800a10d 	.word	0x0800a10d
 800a0d8:	0800a105 	.word	0x0800a105
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e0bc      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e0b8      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e0b4      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e0b0      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e0ac      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a104:	2340      	movs	r3, #64	@ 0x40
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e0a8      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a10c:	2380      	movs	r3, #128	@ 0x80
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e0a4      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a8f      	ldr	r2, [pc, #572]	@ (800a358 <UART_SetConfig+0x6a0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d130      	bne.n	800a180 <UART_SetConfig+0x4c8>
 800a11e:	4b8d      	ldr	r3, [pc, #564]	@ (800a354 <UART_SetConfig+0x69c>)
 800a120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	2b05      	cmp	r3, #5
 800a128:	d826      	bhi.n	800a178 <UART_SetConfig+0x4c0>
 800a12a:	a201      	add	r2, pc, #4	@ (adr r2, 800a130 <UART_SetConfig+0x478>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a149 	.word	0x0800a149
 800a134:	0800a151 	.word	0x0800a151
 800a138:	0800a159 	.word	0x0800a159
 800a13c:	0800a161 	.word	0x0800a161
 800a140:	0800a169 	.word	0x0800a169
 800a144:	0800a171 	.word	0x0800a171
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e086      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e082      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e07e      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e07a      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a168:	2320      	movs	r3, #32
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e076      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a170:	2340      	movs	r3, #64	@ 0x40
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e072      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a178:	2380      	movs	r3, #128	@ 0x80
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e06e      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a75      	ldr	r2, [pc, #468]	@ (800a35c <UART_SetConfig+0x6a4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d130      	bne.n	800a1ec <UART_SetConfig+0x534>
 800a18a:	4b72      	ldr	r3, [pc, #456]	@ (800a354 <UART_SetConfig+0x69c>)
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b05      	cmp	r3, #5
 800a194:	d826      	bhi.n	800a1e4 <UART_SetConfig+0x52c>
 800a196:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <UART_SetConfig+0x4e4>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1b5 	.word	0x0800a1b5
 800a1a0:	0800a1bd 	.word	0x0800a1bd
 800a1a4:	0800a1c5 	.word	0x0800a1c5
 800a1a8:	0800a1cd 	.word	0x0800a1cd
 800a1ac:	0800a1d5 	.word	0x0800a1d5
 800a1b0:	0800a1dd 	.word	0x0800a1dd
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ba:	e050      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c2:	e04c      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ca:	e048      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e044      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e040      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1dc:	2340      	movs	r3, #64	@ 0x40
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e03c      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1e4:	2380      	movs	r3, #128	@ 0x80
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e038      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a5b      	ldr	r2, [pc, #364]	@ (800a360 <UART_SetConfig+0x6a8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d130      	bne.n	800a258 <UART_SetConfig+0x5a0>
 800a1f6:	4b57      	ldr	r3, [pc, #348]	@ (800a354 <UART_SetConfig+0x69c>)
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1fa:	f003 0307 	and.w	r3, r3, #7
 800a1fe:	2b05      	cmp	r3, #5
 800a200:	d826      	bhi.n	800a250 <UART_SetConfig+0x598>
 800a202:	a201      	add	r2, pc, #4	@ (adr r2, 800a208 <UART_SetConfig+0x550>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a221 	.word	0x0800a221
 800a20c:	0800a229 	.word	0x0800a229
 800a210:	0800a231 	.word	0x0800a231
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a241 	.word	0x0800a241
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	2302      	movs	r3, #2
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a226:	e01a      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a228:	2304      	movs	r3, #4
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22e:	e016      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a230:	2308      	movs	r3, #8
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a236:	e012      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a238:	2310      	movs	r3, #16
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23e:	e00e      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a240:	2320      	movs	r3, #32
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a246:	e00a      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a248:	2340      	movs	r3, #64	@ 0x40
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e006      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a250:	2380      	movs	r3, #128	@ 0x80
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e002      	b.n	800a25e <UART_SetConfig+0x5a6>
 800a258:	2380      	movs	r3, #128	@ 0x80
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a3f      	ldr	r2, [pc, #252]	@ (800a360 <UART_SetConfig+0x6a8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	f040 80f8 	bne.w	800a45a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a26a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a26e:	2b20      	cmp	r3, #32
 800a270:	dc46      	bgt.n	800a300 <UART_SetConfig+0x648>
 800a272:	2b02      	cmp	r3, #2
 800a274:	f2c0 8082 	blt.w	800a37c <UART_SetConfig+0x6c4>
 800a278:	3b02      	subs	r3, #2
 800a27a:	2b1e      	cmp	r3, #30
 800a27c:	d87e      	bhi.n	800a37c <UART_SetConfig+0x6c4>
 800a27e:	a201      	add	r2, pc, #4	@ (adr r2, 800a284 <UART_SetConfig+0x5cc>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a307 	.word	0x0800a307
 800a288:	0800a37d 	.word	0x0800a37d
 800a28c:	0800a30f 	.word	0x0800a30f
 800a290:	0800a37d 	.word	0x0800a37d
 800a294:	0800a37d 	.word	0x0800a37d
 800a298:	0800a37d 	.word	0x0800a37d
 800a29c:	0800a31f 	.word	0x0800a31f
 800a2a0:	0800a37d 	.word	0x0800a37d
 800a2a4:	0800a37d 	.word	0x0800a37d
 800a2a8:	0800a37d 	.word	0x0800a37d
 800a2ac:	0800a37d 	.word	0x0800a37d
 800a2b0:	0800a37d 	.word	0x0800a37d
 800a2b4:	0800a37d 	.word	0x0800a37d
 800a2b8:	0800a37d 	.word	0x0800a37d
 800a2bc:	0800a32f 	.word	0x0800a32f
 800a2c0:	0800a37d 	.word	0x0800a37d
 800a2c4:	0800a37d 	.word	0x0800a37d
 800a2c8:	0800a37d 	.word	0x0800a37d
 800a2cc:	0800a37d 	.word	0x0800a37d
 800a2d0:	0800a37d 	.word	0x0800a37d
 800a2d4:	0800a37d 	.word	0x0800a37d
 800a2d8:	0800a37d 	.word	0x0800a37d
 800a2dc:	0800a37d 	.word	0x0800a37d
 800a2e0:	0800a37d 	.word	0x0800a37d
 800a2e4:	0800a37d 	.word	0x0800a37d
 800a2e8:	0800a37d 	.word	0x0800a37d
 800a2ec:	0800a37d 	.word	0x0800a37d
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a37d 	.word	0x0800a37d
 800a2f8:	0800a37d 	.word	0x0800a37d
 800a2fc:	0800a36f 	.word	0x0800a36f
 800a300:	2b40      	cmp	r3, #64	@ 0x40
 800a302:	d037      	beq.n	800a374 <UART_SetConfig+0x6bc>
 800a304:	e03a      	b.n	800a37c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a306:	f7fe f83d 	bl	8008384 <HAL_RCCEx_GetD3PCLK1Freq>
 800a30a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a30c:	e03c      	b.n	800a388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe f84c 	bl	80083b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e034      	b.n	800a388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe f998 	bl	8008658 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32c:	e02c      	b.n	800a388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32e:	4b09      	ldr	r3, [pc, #36]	@ (800a354 <UART_SetConfig+0x69c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a33a:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <UART_SetConfig+0x69c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	08db      	lsrs	r3, r3, #3
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	4a07      	ldr	r2, [pc, #28]	@ (800a364 <UART_SetConfig+0x6ac>)
 800a346:	fa22 f303 	lsr.w	r3, r2, r3
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a34c:	e01c      	b.n	800a388 <UART_SetConfig+0x6d0>
 800a34e:	bf00      	nop
 800a350:	40011400 	.word	0x40011400
 800a354:	58024400 	.word	0x58024400
 800a358:	40007800 	.word	0x40007800
 800a35c:	40007c00 	.word	0x40007c00
 800a360:	58000c00 	.word	0x58000c00
 800a364:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a368:	4b9d      	ldr	r3, [pc, #628]	@ (800a5e0 <UART_SetConfig+0x928>)
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a36c:	e00c      	b.n	800a388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a36e:	4b9d      	ldr	r3, [pc, #628]	@ (800a5e4 <UART_SetConfig+0x92c>)
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a372:	e009      	b.n	800a388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37a:	e005      	b.n	800a388 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a386:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 81de 	beq.w	800a74c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a394:	4a94      	ldr	r2, [pc, #592]	@ (800a5e8 <UART_SetConfig+0x930>)
 800a396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39a:	461a      	mov	r2, r3
 800a39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d305      	bcc.n	800a3c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d903      	bls.n	800a3c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3c6:	e1c1      	b.n	800a74c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
 800a3ce:	60fa      	str	r2, [r7, #12]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d4:	4a84      	ldr	r2, [pc, #528]	@ (800a5e8 <UART_SetConfig+0x930>)
 800a3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2200      	movs	r2, #0
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	607a      	str	r2, [r7, #4]
 800a3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3ea:	f7f6 f831 	bl	8000450 <__aeabi_uldivmod>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	f04f 0300 	mov.w	r3, #0
 800a3fe:	020b      	lsls	r3, r1, #8
 800a400:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a404:	0202      	lsls	r2, r0, #8
 800a406:	6979      	ldr	r1, [r7, #20]
 800a408:	6849      	ldr	r1, [r1, #4]
 800a40a:	0849      	lsrs	r1, r1, #1
 800a40c:	2000      	movs	r0, #0
 800a40e:	460c      	mov	r4, r1
 800a410:	4605      	mov	r5, r0
 800a412:	eb12 0804 	adds.w	r8, r2, r4
 800a416:	eb43 0905 	adc.w	r9, r3, r5
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	469a      	mov	sl, r3
 800a422:	4693      	mov	fp, r2
 800a424:	4652      	mov	r2, sl
 800a426:	465b      	mov	r3, fp
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 f810 	bl	8000450 <__aeabi_uldivmod>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4613      	mov	r3, r2
 800a436:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a43e:	d308      	bcc.n	800a452 <UART_SetConfig+0x79a>
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a446:	d204      	bcs.n	800a452 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a44e:	60da      	str	r2, [r3, #12]
 800a450:	e17c      	b.n	800a74c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a458:	e178      	b.n	800a74c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a462:	f040 80c5 	bne.w	800a5f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a466:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	dc48      	bgt.n	800a500 <UART_SetConfig+0x848>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	db7b      	blt.n	800a56a <UART_SetConfig+0x8b2>
 800a472:	2b20      	cmp	r3, #32
 800a474:	d879      	bhi.n	800a56a <UART_SetConfig+0x8b2>
 800a476:	a201      	add	r2, pc, #4	@ (adr r2, 800a47c <UART_SetConfig+0x7c4>)
 800a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47c:	0800a507 	.word	0x0800a507
 800a480:	0800a50f 	.word	0x0800a50f
 800a484:	0800a56b 	.word	0x0800a56b
 800a488:	0800a56b 	.word	0x0800a56b
 800a48c:	0800a517 	.word	0x0800a517
 800a490:	0800a56b 	.word	0x0800a56b
 800a494:	0800a56b 	.word	0x0800a56b
 800a498:	0800a56b 	.word	0x0800a56b
 800a49c:	0800a527 	.word	0x0800a527
 800a4a0:	0800a56b 	.word	0x0800a56b
 800a4a4:	0800a56b 	.word	0x0800a56b
 800a4a8:	0800a56b 	.word	0x0800a56b
 800a4ac:	0800a56b 	.word	0x0800a56b
 800a4b0:	0800a56b 	.word	0x0800a56b
 800a4b4:	0800a56b 	.word	0x0800a56b
 800a4b8:	0800a56b 	.word	0x0800a56b
 800a4bc:	0800a537 	.word	0x0800a537
 800a4c0:	0800a56b 	.word	0x0800a56b
 800a4c4:	0800a56b 	.word	0x0800a56b
 800a4c8:	0800a56b 	.word	0x0800a56b
 800a4cc:	0800a56b 	.word	0x0800a56b
 800a4d0:	0800a56b 	.word	0x0800a56b
 800a4d4:	0800a56b 	.word	0x0800a56b
 800a4d8:	0800a56b 	.word	0x0800a56b
 800a4dc:	0800a56b 	.word	0x0800a56b
 800a4e0:	0800a56b 	.word	0x0800a56b
 800a4e4:	0800a56b 	.word	0x0800a56b
 800a4e8:	0800a56b 	.word	0x0800a56b
 800a4ec:	0800a56b 	.word	0x0800a56b
 800a4f0:	0800a56b 	.word	0x0800a56b
 800a4f4:	0800a56b 	.word	0x0800a56b
 800a4f8:	0800a56b 	.word	0x0800a56b
 800a4fc:	0800a55d 	.word	0x0800a55d
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	d02e      	beq.n	800a562 <UART_SetConfig+0x8aa>
 800a504:	e031      	b.n	800a56a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a506:	f7fc fcc5 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800a50a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a50c:	e033      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a50e:	f7fc fcd7 	bl	8006ec0 <HAL_RCC_GetPCLK2Freq>
 800a512:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a514:	e02f      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fd ff48 	bl	80083b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a524:	e027      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a526:	f107 0318 	add.w	r3, r7, #24
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe f894 	bl	8008658 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a534:	e01f      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a536:	4b2d      	ldr	r3, [pc, #180]	@ (800a5ec <UART_SetConfig+0x934>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a542:	4b2a      	ldr	r3, [pc, #168]	@ (800a5ec <UART_SetConfig+0x934>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	08db      	lsrs	r3, r3, #3
 800a548:	f003 0303 	and.w	r3, r3, #3
 800a54c:	4a24      	ldr	r2, [pc, #144]	@ (800a5e0 <UART_SetConfig+0x928>)
 800a54e:	fa22 f303 	lsr.w	r3, r2, r3
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a554:	e00f      	b.n	800a576 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a556:	4b22      	ldr	r3, [pc, #136]	@ (800a5e0 <UART_SetConfig+0x928>)
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55a:	e00c      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a55c:	4b21      	ldr	r3, [pc, #132]	@ (800a5e4 <UART_SetConfig+0x92c>)
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a560:	e009      	b.n	800a576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	e005      	b.n	800a576 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a574:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 80e7 	beq.w	800a74c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	4a19      	ldr	r2, [pc, #100]	@ (800a5e8 <UART_SetConfig+0x930>)
 800a584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a588:	461a      	mov	r2, r3
 800a58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a590:	005a      	lsls	r2, r3, #1
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	085b      	lsrs	r3, r3, #1
 800a598:	441a      	add	r2, r3
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	2b0f      	cmp	r3, #15
 800a5a8:	d916      	bls.n	800a5d8 <UART_SetConfig+0x920>
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5b0:	d212      	bcs.n	800a5d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f023 030f 	bic.w	r3, r3, #15
 800a5ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a5d4:	60da      	str	r2, [r3, #12]
 800a5d6:	e0b9      	b.n	800a74c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5de:	e0b5      	b.n	800a74c <UART_SetConfig+0xa94>
 800a5e0:	03d09000 	.word	0x03d09000
 800a5e4:	003d0900 	.word	0x003d0900
 800a5e8:	08018bbc 	.word	0x08018bbc
 800a5ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	dc49      	bgt.n	800a68c <UART_SetConfig+0x9d4>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db7c      	blt.n	800a6f6 <UART_SetConfig+0xa3e>
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d87a      	bhi.n	800a6f6 <UART_SetConfig+0xa3e>
 800a600:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x950>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a693 	.word	0x0800a693
 800a60c:	0800a69b 	.word	0x0800a69b
 800a610:	0800a6f7 	.word	0x0800a6f7
 800a614:	0800a6f7 	.word	0x0800a6f7
 800a618:	0800a6a3 	.word	0x0800a6a3
 800a61c:	0800a6f7 	.word	0x0800a6f7
 800a620:	0800a6f7 	.word	0x0800a6f7
 800a624:	0800a6f7 	.word	0x0800a6f7
 800a628:	0800a6b3 	.word	0x0800a6b3
 800a62c:	0800a6f7 	.word	0x0800a6f7
 800a630:	0800a6f7 	.word	0x0800a6f7
 800a634:	0800a6f7 	.word	0x0800a6f7
 800a638:	0800a6f7 	.word	0x0800a6f7
 800a63c:	0800a6f7 	.word	0x0800a6f7
 800a640:	0800a6f7 	.word	0x0800a6f7
 800a644:	0800a6f7 	.word	0x0800a6f7
 800a648:	0800a6c3 	.word	0x0800a6c3
 800a64c:	0800a6f7 	.word	0x0800a6f7
 800a650:	0800a6f7 	.word	0x0800a6f7
 800a654:	0800a6f7 	.word	0x0800a6f7
 800a658:	0800a6f7 	.word	0x0800a6f7
 800a65c:	0800a6f7 	.word	0x0800a6f7
 800a660:	0800a6f7 	.word	0x0800a6f7
 800a664:	0800a6f7 	.word	0x0800a6f7
 800a668:	0800a6f7 	.word	0x0800a6f7
 800a66c:	0800a6f7 	.word	0x0800a6f7
 800a670:	0800a6f7 	.word	0x0800a6f7
 800a674:	0800a6f7 	.word	0x0800a6f7
 800a678:	0800a6f7 	.word	0x0800a6f7
 800a67c:	0800a6f7 	.word	0x0800a6f7
 800a680:	0800a6f7 	.word	0x0800a6f7
 800a684:	0800a6f7 	.word	0x0800a6f7
 800a688:	0800a6e9 	.word	0x0800a6e9
 800a68c:	2b40      	cmp	r3, #64	@ 0x40
 800a68e:	d02e      	beq.n	800a6ee <UART_SetConfig+0xa36>
 800a690:	e031      	b.n	800a6f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a692:	f7fc fbff 	bl	8006e94 <HAL_RCC_GetPCLK1Freq>
 800a696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a698:	e033      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a69a:	f7fc fc11 	bl	8006ec0 <HAL_RCC_GetPCLK2Freq>
 800a69e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6a0:	e02f      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd fe82 	bl	80083b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e027      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6b2:	f107 0318 	add.w	r3, r7, #24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fd ffce 	bl	8008658 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c0:	e01f      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6c2:	4b2d      	ldr	r3, [pc, #180]	@ (800a778 <UART_SetConfig+0xac0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d009      	beq.n	800a6e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6ce:	4b2a      	ldr	r3, [pc, #168]	@ (800a778 <UART_SetConfig+0xac0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	08db      	lsrs	r3, r3, #3
 800a6d4:	f003 0303 	and.w	r3, r3, #3
 800a6d8:	4a28      	ldr	r2, [pc, #160]	@ (800a77c <UART_SetConfig+0xac4>)
 800a6da:	fa22 f303 	lsr.w	r3, r2, r3
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6e0:	e00f      	b.n	800a702 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a6e2:	4b26      	ldr	r3, [pc, #152]	@ (800a77c <UART_SetConfig+0xac4>)
 800a6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e6:	e00c      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6e8:	4b25      	ldr	r3, [pc, #148]	@ (800a780 <UART_SetConfig+0xac8>)
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ec:	e009      	b.n	800a702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f4:	e005      	b.n	800a702 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a700:	bf00      	nop
    }

    if (pclk != 0U)
 800a702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d021      	beq.n	800a74c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70c:	4a1d      	ldr	r2, [pc, #116]	@ (800a784 <UART_SetConfig+0xacc>)
 800a70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a712:	461a      	mov	r2, r3
 800a714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a716:	fbb3 f2f2 	udiv	r2, r3, r2
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	441a      	add	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d909      	bls.n	800a746 <UART_SetConfig+0xa8e>
 800a732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a738:	d205      	bcs.n	800a746 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	e002      	b.n	800a74c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2201      	movs	r2, #1
 800a750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2201      	movs	r2, #1
 800a758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2200      	movs	r2, #0
 800a760:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2200      	movs	r2, #0
 800a766:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a768:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3748      	adds	r7, #72	@ 0x48
 800a770:	46bd      	mov	sp, r7
 800a772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a776:	bf00      	nop
 800a778:	58024400 	.word	0x58024400
 800a77c:	03d09000 	.word	0x03d09000
 800a780:	003d0900 	.word	0x003d0900
 800a784:	08018bbc 	.word	0x08018bbc

0800a788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a794:	f003 0308 	and.w	r3, r3, #8
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00a      	beq.n	800a7f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	f003 0304 	and.w	r3, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00a      	beq.n	800a83a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01a      	beq.n	800a89e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a886:	d10a      	bne.n	800a89e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b098      	sub	sp, #96	@ 0x60
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8dc:	f7f7 fc16 	bl	800210c <HAL_GetTick>
 800a8e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0308 	and.w	r3, r3, #8
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d12f      	bne.n	800a950 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f88e 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d022      	beq.n	800a950 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a91e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a928:	647b      	str	r3, [r7, #68]	@ 0x44
 800a92a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a92e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a930:	e841 2300 	strex	r3, r2, [r1]
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e6      	bne.n	800a90a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e063      	b.n	800aa18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d149      	bne.n	800a9f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a95e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a966:	2200      	movs	r2, #0
 800a968:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f857 	bl	800aa20 <UART_WaitOnFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d03c      	beq.n	800a9f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	623b      	str	r3, [r7, #32]
   return(result);
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a98c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a996:	633b      	str	r3, [r7, #48]	@ 0x30
 800a998:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99e:	e841 2300 	strex	r3, r2, [r1]
 800a9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1e6      	bne.n	800a978 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f023 0301 	bic.w	r3, r3, #1
 800a9c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9ca:	61fa      	str	r2, [r7, #28]
 800a9cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	69b9      	ldr	r1, [r7, #24]
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e5      	bne.n	800a9aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e012      	b.n	800aa18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3758      	adds	r7, #88	@ 0x58
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa30:	e04f      	b.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa38:	d04b      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa3a:	f7f7 fb67 	bl	800210c <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d302      	bcc.n	800aa50 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e04e      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d037      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b80      	cmp	r3, #128	@ 0x80
 800aa66:	d034      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b40      	cmp	r3, #64	@ 0x40
 800aa6c:	d031      	beq.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d110      	bne.n	800aa9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2208      	movs	r2, #8
 800aa82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f921 	bl	800accc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2208      	movs	r2, #8
 800aa8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e029      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaac:	d111      	bne.n	800aad2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f907 	bl	800accc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e00f      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4013      	ands	r3, r2
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	429a      	cmp	r2, r3
 800aae0:	bf0c      	ite	eq
 800aae2:	2301      	moveq	r3, #1
 800aae4:	2300      	movne	r3, #0
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d0a0      	beq.n	800aa32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b096      	sub	sp, #88	@ 0x58
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	88fa      	ldrh	r2, [r7, #6]
 800ab14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2222      	movs	r2, #34	@ 0x22
 800ab24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d02d      	beq.n	800ab8e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab38:	4a40      	ldr	r2, [pc, #256]	@ (800ac3c <UART_Start_Receive_DMA+0x140>)
 800ab3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab42:	4a3f      	ldr	r2, [pc, #252]	@ (800ac40 <UART_Start_Receive_DMA+0x144>)
 800ab44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab4c:	4a3d      	ldr	r2, [pc, #244]	@ (800ac44 <UART_Start_Receive_DMA+0x148>)
 800ab4e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab56:	2200      	movs	r2, #0
 800ab58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3324      	adds	r3, #36	@ 0x24
 800ab66:	4619      	mov	r1, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	88fb      	ldrh	r3, [r7, #6]
 800ab70:	f7f7 ff58 	bl	8002a24 <HAL_DMA_Start_IT>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2210      	movs	r2, #16
 800ab7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e051      	b.n	800ac32 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d018      	beq.n	800abc8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e6      	bne.n	800ab96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	653b      	str	r3, [r7, #80]	@ 0x50
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800abe8:	637a      	str	r2, [r7, #52]	@ 0x34
 800abea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800abee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800abf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e5      	bne.n	800abc8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac1c:	623a      	str	r2, [r7, #32]
 800ac1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	69f9      	ldr	r1, [r7, #28]
 800ac22:	6a3a      	ldr	r2, [r7, #32]
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e5      	bne.n	800abfc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3758      	adds	r7, #88	@ 0x58
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800ae4b 	.word	0x0800ae4b
 800ac40:	0800af73 	.word	0x0800af73
 800ac44:	0800afb1 	.word	0x0800afb1

0800ac48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b08f      	sub	sp, #60	@ 0x3c
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac70:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e6      	bne.n	800ac50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aca2:	61ba      	str	r2, [r7, #24]
 800aca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6979      	ldr	r1, [r7, #20]
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	613b      	str	r3, [r7, #16]
   return(result);
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2220      	movs	r2, #32
 800acba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800acbe:	bf00      	nop
 800acc0:	373c      	adds	r7, #60	@ 0x3c
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
	...

0800accc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b095      	sub	sp, #84	@ 0x54
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ace8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800acf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e6      	bne.n	800acd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	4b1e      	ldr	r3, [pc, #120]	@ (800ad94 <UART_EndRxTransfer+0xc8>)
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e5      	bne.n	800ad06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d118      	bne.n	800ad74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f023 0310 	bic.w	r3, r3, #16
 800ad56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad60:	61bb      	str	r3, [r7, #24]
 800ad62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6979      	ldr	r1, [r7, #20]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e6      	bne.n	800ad42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad88:	bf00      	nop
 800ad8a:	3754      	adds	r7, #84	@ 0x54
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	effffffe 	.word	0xeffffffe

0800ad98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b090      	sub	sp, #64	@ 0x40
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adae:	d037      	beq.n	800ae20 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800adb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3308      	adds	r3, #8
 800adbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	623b      	str	r3, [r7, #32]
   return(result);
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800add0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800add8:	633a      	str	r2, [r7, #48]	@ 0x30
 800adda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800addc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade0:	e841 2300 	strex	r3, r2, [r1]
 800ade4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ade6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e5      	bne.n	800adb8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae0a:	61fb      	str	r3, [r7, #28]
 800ae0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	69b9      	ldr	r1, [r7, #24]
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	617b      	str	r3, [r7, #20]
   return(result);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae1e:	e002      	b.n	800ae26 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ae20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ae22:	f7fe ff0b 	bl	8009c3c <HAL_UART_TxCpltCallback>
}
 800ae26:	bf00      	nop
 800ae28:	3740      	adds	r7, #64	@ 0x40
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7fe ff07 	bl	8009c50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b09c      	sub	sp, #112	@ 0x70
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae56:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae60:	d071      	beq.n	800af46 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ae62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae88:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e6      	bne.n	800ae6a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3308      	adds	r3, #8
 800aea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeae:	f023 0301 	bic.w	r3, r3, #1
 800aeb2:	667b      	str	r3, [r7, #100]	@ 0x64
 800aeb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3308      	adds	r3, #8
 800aeba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aebc:	647a      	str	r2, [r7, #68]	@ 0x44
 800aebe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e5      	bne.n	800ae9c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3308      	adds	r3, #8
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeda:	e853 3f00 	ldrex	r3, [r3]
 800aede:	623b      	str	r3, [r7, #32]
   return(result);
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aee6:	663b      	str	r3, [r7, #96]	@ 0x60
 800aee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aef0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e5      	bne.n	800aed0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af10:	2b01      	cmp	r3, #1
 800af12:	d118      	bne.n	800af46 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	60fb      	str	r3, [r7, #12]
   return(result);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f023 0310 	bic.w	r3, r3, #16
 800af28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	69b9      	ldr	r1, [r7, #24]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	617b      	str	r3, [r7, #20]
   return(result);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af48:	2200      	movs	r2, #0
 800af4a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af50:	2b01      	cmp	r3, #1
 800af52:	d107      	bne.n	800af64 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af5a:	4619      	mov	r1, r3
 800af5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af5e:	f7fe fe9f 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af62:	e002      	b.n	800af6a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800af64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af66:	f7fe fe7d 	bl	8009c64 <HAL_UART_RxCpltCallback>
}
 800af6a:	bf00      	nop
 800af6c:	3770      	adds	r7, #112	@ 0x70
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d109      	bne.n	800afa2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af94:	085b      	lsrs	r3, r3, #1
 800af96:	b29b      	uxth	r3, r3
 800af98:	4619      	mov	r1, r3
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7fe fe80 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afa0:	e002      	b.n	800afa8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7fe fe68 	bl	8009c78 <HAL_UART_RxHalfCpltCallback>
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afc4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afd8:	2b80      	cmp	r3, #128	@ 0x80
 800afda:	d109      	bne.n	800aff0 <UART_DMAError+0x40>
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b21      	cmp	r3, #33	@ 0x21
 800afe0:	d106      	bne.n	800aff0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800afea:	6978      	ldr	r0, [r7, #20]
 800afec:	f7ff fe2c 	bl	800ac48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800affa:	2b40      	cmp	r3, #64	@ 0x40
 800affc:	d109      	bne.n	800b012 <UART_DMAError+0x62>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b22      	cmp	r3, #34	@ 0x22
 800b002:	d106      	bne.n	800b012 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b00c:	6978      	ldr	r0, [r7, #20]
 800b00e:	f7ff fe5d 	bl	800accc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b018:	f043 0210 	orr.w	r2, r3, #16
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b022:	6978      	ldr	r0, [r7, #20]
 800b024:	f7fe fe32 	bl	8009c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b028:	bf00      	nop
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7fe fe1c 	bl	8009c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b054:	bf00      	nop
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	60bb      	str	r3, [r7, #8]
   return(result);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	61bb      	str	r3, [r7, #24]
 800b084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6979      	ldr	r1, [r7, #20]
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	613b      	str	r3, [r7, #16]
   return(result);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e6      	bne.n	800b064 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fe fdc9 	bl	8009c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0aa:	bf00      	nop
 800b0ac:	3720      	adds	r7, #32
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0ce:	bf00      	nop
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b083      	sub	sp, #12
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d101      	bne.n	800b104 <HAL_UARTEx_DisableFifoMode+0x16>
 800b100:	2302      	movs	r3, #2
 800b102:	e027      	b.n	800b154 <HAL_UARTEx_DisableFifoMode+0x66>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2224      	movs	r2, #36	@ 0x24
 800b110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 0201 	bic.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b132:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b174:	2302      	movs	r3, #2
 800b176:	e02d      	b.n	800b1d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2224      	movs	r2, #36	@ 0x24
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f022 0201 	bic.w	r2, r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f84f 	bl	800b258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e02d      	b.n	800b250 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2224      	movs	r2, #36	@ 0x24
 800b200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0201 	bic.w	r2, r2, #1
 800b21a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f811 	bl	800b258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b264:	2b00      	cmp	r3, #0
 800b266:	d108      	bne.n	800b27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b278:	e031      	b.n	800b2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b27a:	2310      	movs	r3, #16
 800b27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b27e:	2310      	movs	r3, #16
 800b280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	0e5b      	lsrs	r3, r3, #25
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	f003 0307 	and.w	r3, r3, #7
 800b290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	0f5b      	lsrs	r3, r3, #29
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	7b3a      	ldrb	r2, [r7, #12]
 800b2a6:	4911      	ldr	r1, [pc, #68]	@ (800b2ec <UARTEx_SetNbDataToProcess+0x94>)
 800b2a8:	5c8a      	ldrb	r2, [r1, r2]
 800b2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2ae:	7b3a      	ldrb	r2, [r7, #12]
 800b2b0:	490f      	ldr	r1, [pc, #60]	@ (800b2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	7b7a      	ldrb	r2, [r7, #13]
 800b2c4:	4909      	ldr	r1, [pc, #36]	@ (800b2ec <UARTEx_SetNbDataToProcess+0x94>)
 800b2c6:	5c8a      	ldrb	r2, [r1, r2]
 800b2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2cc:	7b7a      	ldrb	r2, [r7, #13]
 800b2ce:	4908      	ldr	r1, [pc, #32]	@ (800b2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2de:	bf00      	nop
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	08018bd4 	.word	0x08018bd4
 800b2f0:	08018bdc 	.word	0x08018bdc

0800b2f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	f107 001c 	add.w	r0, r7, #28
 800b302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b306:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d121      	bne.n	800b352 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b312:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	4b2c      	ldr	r3, [pc, #176]	@ (800b3d0 <USB_CoreInit+0xdc>)
 800b320:	4013      	ands	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b332:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b336:	2b01      	cmp	r3, #1
 800b338:	d105      	bne.n	800b346 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 faaa 	bl	800b8a0 <USB_CoreReset>
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]
 800b350:	e01b      	b.n	800b38a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa9e 	bl	800b8a0 <USB_CoreReset>
 800b364:	4603      	mov	r3, r0
 800b366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b368:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b374:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b37c:	e005      	b.n	800b38a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b382:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b38a:	7fbb      	ldrb	r3, [r7, #30]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d116      	bne.n	800b3be <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <USB_CoreInit+0xe0>)
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f043 0206 	orr.w	r2, r3, #6
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f043 0220 	orr.w	r2, r3, #32
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3ca:	b004      	add	sp, #16
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	ffbdffbf 	.word	0xffbdffbf
 800b3d4:	03ee0000 	.word	0x03ee0000

0800b3d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f023 0201 	bic.w	r2, r3, #1
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d115      	bne.n	800b448 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b428:	200a      	movs	r0, #10
 800b42a:	f7f6 fe7b 	bl	8002124 <HAL_Delay>
      ms += 10U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	330a      	adds	r3, #10
 800b432:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fa25 	bl	800b884 <USB_GetMode>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d01e      	beq.n	800b47e <USB_SetCurrentMode+0x84>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2bc7      	cmp	r3, #199	@ 0xc7
 800b444:	d9f0      	bls.n	800b428 <USB_SetCurrentMode+0x2e>
 800b446:	e01a      	b.n	800b47e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d115      	bne.n	800b47a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b45a:	200a      	movs	r0, #10
 800b45c:	f7f6 fe62 	bl	8002124 <HAL_Delay>
      ms += 10U;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	330a      	adds	r3, #10
 800b464:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fa0c 	bl	800b884 <USB_GetMode>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d005      	beq.n	800b47e <USB_SetCurrentMode+0x84>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2bc7      	cmp	r3, #199	@ 0xc7
 800b476:	d9f0      	bls.n	800b45a <USB_SetCurrentMode+0x60>
 800b478:	e001      	b.n	800b47e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e005      	b.n	800b48a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2bc8      	cmp	r3, #200	@ 0xc8
 800b482:	d101      	bne.n	800b488 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e000      	b.n	800b48a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b494:	b084      	sub	sp, #16
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b4a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	e009      	b.n	800b4c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	3340      	adds	r3, #64	@ 0x40
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	2b0e      	cmp	r3, #14
 800b4cc:	d9f2      	bls.n	800b4b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d11c      	bne.n	800b510 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4e4:	f043 0302 	orr.w	r3, r3, #2
 800b4e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	e005      	b.n	800b51c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b514:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b522:	461a      	mov	r2, r3
 800b524:	2300      	movs	r3, #0
 800b526:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b528:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d10d      	bne.n	800b54c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f968 	bl	800b810 <USB_SetDevSpeed>
 800b540:	e008      	b.n	800b554 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b542:	2101      	movs	r1, #1
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f963 	bl	800b810 <USB_SetDevSpeed>
 800b54a:	e003      	b.n	800b554 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b54c:	2103      	movs	r1, #3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f95e 	bl	800b810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b554:	2110      	movs	r1, #16
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8fa 	bl	800b750 <USB_FlushTxFifo>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f924 	bl	800b7b4 <USB_FlushRxFifo>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b57c:	461a      	mov	r2, r3
 800b57e:	2300      	movs	r3, #0
 800b580:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b588:	461a      	mov	r2, r3
 800b58a:	2300      	movs	r3, #0
 800b58c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b594:	461a      	mov	r2, r3
 800b596:	2300      	movs	r3, #0
 800b598:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b59a:	2300      	movs	r3, #0
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	e043      	b.n	800b628 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b6:	d118      	bne.n	800b5ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	e013      	b.n	800b5fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	e008      	b.n	800b5fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	015a      	lsls	r2, r3, #5
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b608:	461a      	mov	r2, r3
 800b60a:	2300      	movs	r3, #0
 800b60c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	015a      	lsls	r2, r3, #5
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4413      	add	r3, r2
 800b616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b61a:	461a      	mov	r2, r3
 800b61c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	3301      	adds	r3, #1
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b62c:	461a      	mov	r2, r3
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	4293      	cmp	r3, r2
 800b632:	d3b5      	bcc.n	800b5a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
 800b638:	e043      	b.n	800b6c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b64c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b650:	d118      	bne.n	800b684 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	015a      	lsls	r2, r3, #5
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b664:	461a      	mov	r2, r3
 800b666:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	e013      	b.n	800b696 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b67a:	461a      	mov	r2, r3
 800b67c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	e008      	b.n	800b696 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	015a      	lsls	r2, r3, #5
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b690:	461a      	mov	r2, r3
 800b692:	2300      	movs	r3, #0
 800b694:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b6ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d3b5      	bcc.n	800b63a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b6ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d105      	bne.n	800b704 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	f043 0210 	orr.w	r2, r3, #16
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699a      	ldr	r2, [r3, #24]
 800b708:	4b0f      	ldr	r3, [pc, #60]	@ (800b748 <USB_DevInit+0x2b4>)
 800b70a:	4313      	orrs	r3, r2
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b710:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	f043 0208 	orr.w	r2, r3, #8
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b724:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d105      	bne.n	800b738 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	699a      	ldr	r2, [r3, #24]
 800b730:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <USB_DevInit+0x2b8>)
 800b732:	4313      	orrs	r3, r2
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b738:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b744:	b004      	add	sp, #16
 800b746:	4770      	bx	lr
 800b748:	803c3800 	.word	0x803c3800
 800b74c:	40000004 	.word	0x40000004

0800b750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3301      	adds	r3, #1
 800b762:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b76a:	d901      	bls.n	800b770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e01b      	b.n	800b7a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	daf2      	bge.n	800b75e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	019b      	lsls	r3, r3, #6
 800b780:	f043 0220 	orr.w	r2, r3, #32
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3301      	adds	r3, #1
 800b78c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b794:	d901      	bls.n	800b79a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e006      	b.n	800b7a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	2b20      	cmp	r3, #32
 800b7a4:	d0f0      	beq.n	800b788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7cc:	d901      	bls.n	800b7d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e018      	b.n	800b804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	daf2      	bge.n	800b7c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2210      	movs	r2, #16
 800b7e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7f0:	d901      	bls.n	800b7f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e006      	b.n	800b804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	f003 0310 	and.w	r3, r3, #16
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d0f0      	beq.n	800b7e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b830:	4313      	orrs	r3, r2
 800b832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b870:	f043 0302 	orr.w	r3, r3, #2
 800b874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f003 0301 	and.w	r3, r3, #1
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8b8:	d901      	bls.n	800b8be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e01b      	b.n	800b8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	daf2      	bge.n	800b8ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	f043 0201 	orr.w	r2, r3, #1
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8e2:	d901      	bls.n	800b8e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e006      	b.n	800b8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d0f0      	beq.n	800b8d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
	...

0800b904 <__NVIC_SetPriority>:
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b914:	2b00      	cmp	r3, #0
 800b916:	db0a      	blt.n	800b92e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	490c      	ldr	r1, [pc, #48]	@ (800b950 <__NVIC_SetPriority+0x4c>)
 800b91e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b922:	0112      	lsls	r2, r2, #4
 800b924:	b2d2      	uxtb	r2, r2
 800b926:	440b      	add	r3, r1
 800b928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b92c:	e00a      	b.n	800b944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	b2da      	uxtb	r2, r3
 800b932:	4908      	ldr	r1, [pc, #32]	@ (800b954 <__NVIC_SetPriority+0x50>)
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	3b04      	subs	r3, #4
 800b93c:	0112      	lsls	r2, r2, #4
 800b93e:	b2d2      	uxtb	r2, r2
 800b940:	440b      	add	r3, r1
 800b942:	761a      	strb	r2, [r3, #24]
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	e000e100 	.word	0xe000e100
 800b954:	e000ed00 	.word	0xe000ed00

0800b958 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b958:	b580      	push	{r7, lr}
 800b95a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b95c:	4b05      	ldr	r3, [pc, #20]	@ (800b974 <SysTick_Handler+0x1c>)
 800b95e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b960:	f001 fd6e 	bl	800d440 <xTaskGetSchedulerState>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d001      	beq.n	800b96e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b96a:	f002 fb65 	bl	800e038 <xPortSysTickHandler>
  }
}
 800b96e:	bf00      	nop
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	e000e010 	.word	0xe000e010

0800b978 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b97c:	2100      	movs	r1, #0
 800b97e:	f06f 0004 	mvn.w	r0, #4
 800b982:	f7ff ffbf 	bl	800b904 <__NVIC_SetPriority>
#endif
}
 800b986:	bf00      	nop
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b992:	f3ef 8305 	mrs	r3, IPSR
 800b996:	603b      	str	r3, [r7, #0]
  return(result);
 800b998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b99e:	f06f 0305 	mvn.w	r3, #5
 800b9a2:	607b      	str	r3, [r7, #4]
 800b9a4:	e00c      	b.n	800b9c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <osKernelInitialize+0x44>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d105      	bne.n	800b9ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9ae:	4b08      	ldr	r3, [pc, #32]	@ (800b9d0 <osKernelInitialize+0x44>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	e002      	b.n	800b9c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9c0:	687b      	ldr	r3, [r7, #4]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	24031f10 	.word	0x24031f10

0800b9d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9da:	f3ef 8305 	mrs	r3, IPSR
 800b9de:	603b      	str	r3, [r7, #0]
  return(result);
 800b9e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9e6:	f06f 0305 	mvn.w	r3, #5
 800b9ea:	607b      	str	r3, [r7, #4]
 800b9ec:	e010      	b.n	800ba10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ba1c <osKernelStart+0x48>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d109      	bne.n	800ba0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9f6:	f7ff ffbf 	bl	800b978 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9fa:	4b08      	ldr	r3, [pc, #32]	@ (800ba1c <osKernelStart+0x48>)
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba00:	f001 f892 	bl	800cb28 <vTaskStartScheduler>
      stat = osOK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	607b      	str	r3, [r7, #4]
 800ba08:	e002      	b.n	800ba10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba10:	687b      	ldr	r3, [r7, #4]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	24031f10 	.word	0x24031f10

0800ba20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08e      	sub	sp, #56	@ 0x38
 800ba24:	af04      	add	r7, sp, #16
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba30:	f3ef 8305 	mrs	r3, IPSR
 800ba34:	617b      	str	r3, [r7, #20]
  return(result);
 800ba36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d17e      	bne.n	800bb3a <osThreadNew+0x11a>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d07b      	beq.n	800bb3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba42:	2380      	movs	r3, #128	@ 0x80
 800ba44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba46:	2318      	movs	r3, #24
 800ba48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d045      	beq.n	800bae6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <osThreadNew+0x48>
        name = attr->name;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d008      	beq.n	800ba8e <osThreadNew+0x6e>
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	2b38      	cmp	r3, #56	@ 0x38
 800ba80:	d805      	bhi.n	800ba8e <osThreadNew+0x6e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d001      	beq.n	800ba92 <osThreadNew+0x72>
        return (NULL);
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e054      	b.n	800bb3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	089b      	lsrs	r3, r3, #2
 800baa0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00e      	beq.n	800bac8 <osThreadNew+0xa8>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2ba7      	cmp	r3, #167	@ 0xa7
 800bab0:	d90a      	bls.n	800bac8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d006      	beq.n	800bac8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <osThreadNew+0xa8>
        mem = 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	61bb      	str	r3, [r7, #24]
 800bac6:	e010      	b.n	800baea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10c      	bne.n	800baea <osThreadNew+0xca>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d108      	bne.n	800baea <osThreadNew+0xca>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d104      	bne.n	800baea <osThreadNew+0xca>
          mem = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61bb      	str	r3, [r7, #24]
 800bae4:	e001      	b.n	800baea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d110      	bne.n	800bb12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800baf8:	9202      	str	r2, [sp, #8]
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6a3a      	ldr	r2, [r7, #32]
 800bb04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fe1a 	bl	800c740 <xTaskCreateStatic>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	613b      	str	r3, [r7, #16]
 800bb10:	e013      	b.n	800bb3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d110      	bne.n	800bb3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	f107 0310 	add.w	r3, r7, #16
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 fe68 	bl	800c800 <xTaskCreate>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d001      	beq.n	800bb3a <osThreadNew+0x11a>
            hTask = NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb3a:	693b      	ldr	r3, [r7, #16]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3728      	adds	r7, #40	@ 0x28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb4c:	f3ef 8305 	mrs	r3, IPSR
 800bb50:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <osDelay+0x1c>
    stat = osErrorISR;
 800bb58:	f06f 0305 	mvn.w	r3, #5
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	e007      	b.n	800bb70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 ffa6 	bl	800cabc <vTaskDelay>
    }
  }

  return (stat);
 800bb70:	68fb      	ldr	r3, [r7, #12]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4a07      	ldr	r2, [pc, #28]	@ (800bba8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4a06      	ldr	r2, [pc, #24]	@ (800bbac <vApplicationGetIdleTaskMemory+0x30>)
 800bb92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2280      	movs	r2, #128	@ 0x80
 800bb98:	601a      	str	r2, [r3, #0]
}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	24031f14 	.word	0x24031f14
 800bbac:	24031fbc 	.word	0x24031fbc

0800bbb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4a07      	ldr	r2, [pc, #28]	@ (800bbdc <vApplicationGetTimerTaskMemory+0x2c>)
 800bbc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	4a06      	ldr	r2, [pc, #24]	@ (800bbe0 <vApplicationGetTimerTaskMemory+0x30>)
 800bbc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbce:	601a      	str	r2, [r3, #0]
}
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	240321bc 	.word	0x240321bc
 800bbe0:	24032264 	.word	0x24032264

0800bbe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f103 0208 	add.w	r2, r3, #8
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f103 0208 	add.w	r2, r3, #8
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f103 0208 	add.w	r2, r3, #8
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]
}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc9c:	d103      	bne.n	800bca6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e00c      	b.n	800bcc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3308      	adds	r3, #8
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e002      	b.n	800bcb4 <vListInsert+0x2e>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d2f6      	bcs.n	800bcae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	601a      	str	r2, [r3, #0]
}
 800bcec:	bf00      	nop
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6892      	ldr	r2, [r2, #8]
 800bd0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6852      	ldr	r2, [r2, #4]
 800bd18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d103      	bne.n	800bd2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	1e5a      	subs	r2, r3, #1
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10b      	bne.n	800bd78 <xQueueGenericReset+0x2c>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	60bb      	str	r3, [r7, #8]
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd78:	f002 f8ce 	bl	800df18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd84:	68f9      	ldr	r1, [r7, #12]
 800bd86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd88:	fb01 f303 	mul.w	r3, r1, r3
 800bd8c:	441a      	add	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdae:	fb01 f303 	mul.w	r3, r1, r3
 800bdb2:	441a      	add	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	22ff      	movs	r2, #255	@ 0xff
 800bdbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	22ff      	movs	r2, #255	@ 0xff
 800bdc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d114      	bne.n	800bdf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d01a      	beq.n	800be0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3310      	adds	r3, #16
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 f942 	bl	800d064 <xTaskRemoveFromEventList>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d012      	beq.n	800be0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bde6:	4b0d      	ldr	r3, [pc, #52]	@ (800be1c <xQueueGenericReset+0xd0>)
 800bde8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	e009      	b.n	800be0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fef1 	bl	800bbe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3324      	adds	r3, #36	@ 0x24
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff feec 	bl	800bbe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be0c:	f002 f8b6 	bl	800df7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be10:	2301      	movs	r3, #1
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	@ 0x38
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10b      	bne.n	800be6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	e7fd      	b.n	800be66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <xQueueGenericCreateStatic+0x56>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <xQueueGenericCreateStatic+0x5a>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <xQueueGenericCreateStatic+0x5c>
 800be7a:	2300      	movs	r3, #0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10b      	bne.n	800be98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	623b      	str	r3, [r7, #32]
}
 800be92:	bf00      	nop
 800be94:	bf00      	nop
 800be96:	e7fd      	b.n	800be94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <xQueueGenericCreateStatic+0x84>
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <xQueueGenericCreateStatic+0x88>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e000      	b.n	800beaa <xQueueGenericCreateStatic+0x8a>
 800bea8:	2300      	movs	r3, #0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10b      	bne.n	800bec6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	61fb      	str	r3, [r7, #28]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bec6:	2350      	movs	r3, #80	@ 0x50
 800bec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	2b50      	cmp	r3, #80	@ 0x50
 800bece:	d00b      	beq.n	800bee8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	61bb      	str	r3, [r7, #24]
}
 800bee2:	bf00      	nop
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00d      	beq.n	800bf10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800befc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	4613      	mov	r3, r2
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	68b9      	ldr	r1, [r7, #8]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f805 	bl	800bf1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3730      	adds	r7, #48	@ 0x30
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	e002      	b.n	800bf3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf48:	2101      	movs	r1, #1
 800bf4a:	69b8      	ldr	r0, [r7, #24]
 800bf4c:	f7ff fefe 	bl	800bd4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08e      	sub	sp, #56	@ 0x38
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10b      	bne.n	800bf94 <xQueueGenericSend+0x34>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	e7fd      	b.n	800bf90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <xQueueGenericSend+0x42>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <xQueueGenericSend+0x46>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueGenericSend+0x48>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10b      	bne.n	800bfc4 <xQueueGenericSend+0x64>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	e7fd      	b.n	800bfc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d103      	bne.n	800bfd2 <xQueueGenericSend+0x72>
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d101      	bne.n	800bfd6 <xQueueGenericSend+0x76>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <xQueueGenericSend+0x78>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10b      	bne.n	800bff4 <xQueueGenericSend+0x94>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	623b      	str	r3, [r7, #32]
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	e7fd      	b.n	800bff0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff4:	f001 fa24 	bl	800d440 <xTaskGetSchedulerState>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d102      	bne.n	800c004 <xQueueGenericSend+0xa4>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <xQueueGenericSend+0xa8>
 800c004:	2301      	movs	r3, #1
 800c006:	e000      	b.n	800c00a <xQueueGenericSend+0xaa>
 800c008:	2300      	movs	r3, #0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <xQueueGenericSend+0xc6>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	61fb      	str	r3, [r7, #28]
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	e7fd      	b.n	800c022 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c026:	f001 ff77 	bl	800df18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c032:	429a      	cmp	r2, r3
 800c034:	d302      	bcc.n	800c03c <xQueueGenericSend+0xdc>
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d129      	bne.n	800c090 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c042:	f000 fa0f 	bl	800c464 <prvCopyDataToQueue>
 800c046:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c052:	3324      	adds	r3, #36	@ 0x24
 800c054:	4618      	mov	r0, r3
 800c056:	f001 f805 	bl	800d064 <xTaskRemoveFromEventList>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d013      	beq.n	800c088 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c060:	4b3f      	ldr	r3, [pc, #252]	@ (800c160 <xQueueGenericSend+0x200>)
 800c062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	e00a      	b.n	800c088 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d007      	beq.n	800c088 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c078:	4b39      	ldr	r3, [pc, #228]	@ (800c160 <xQueueGenericSend+0x200>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c088:	f001 ff78 	bl	800df7c <vPortExitCritical>
				return pdPASS;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e063      	b.n	800c158 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c096:	f001 ff71 	bl	800df7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	e05c      	b.n	800c158 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0a4:	f107 0314 	add.w	r3, r7, #20
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f001 f867 	bl	800d17c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0b2:	f001 ff63 	bl	800df7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0b6:	f000 fda7 	bl	800cc08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ba:	f001 ff2d 	bl	800df18 <vPortEnterCritical>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0c4:	b25b      	sxtb	r3, r3
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0ca:	d103      	bne.n	800c0d4 <xQueueGenericSend+0x174>
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0da:	b25b      	sxtb	r3, r3
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0e0:	d103      	bne.n	800c0ea <xQueueGenericSend+0x18a>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0ea:	f001 ff47 	bl	800df7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0ee:	1d3a      	adds	r2, r7, #4
 800c0f0:	f107 0314 	add.w	r3, r7, #20
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 f856 	bl	800d1a8 <xTaskCheckForTimeOut>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d124      	bne.n	800c14c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c104:	f000 faa6 	bl	800c654 <prvIsQueueFull>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d018      	beq.n	800c140 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	3310      	adds	r3, #16
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f000 ff52 	bl	800cfc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c11c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c11e:	f000 fa31 	bl	800c584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c122:	f000 fd7f 	bl	800cc24 <xTaskResumeAll>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f47f af7c 	bne.w	800c026 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c12e:	4b0c      	ldr	r3, [pc, #48]	@ (800c160 <xQueueGenericSend+0x200>)
 800c130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	e772      	b.n	800c026 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c142:	f000 fa1f 	bl	800c584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c146:	f000 fd6d 	bl	800cc24 <xTaskResumeAll>
 800c14a:	e76c      	b.n	800c026 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c14e:	f000 fa19 	bl	800c584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c152:	f000 fd67 	bl	800cc24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c156:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3738      	adds	r7, #56	@ 0x38
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b090      	sub	sp, #64	@ 0x40
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSendFromISR+0x3e>
 800c19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <xQueueGenericSendFromISR+0x42>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericSendFromISR+0x44>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d103      	bne.n	800c1d2 <xQueueGenericSendFromISR+0x6e>
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d101      	bne.n	800c1d6 <xQueueGenericSendFromISR+0x72>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <xQueueGenericSendFromISR+0x74>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10b      	bne.n	800c1f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	623b      	str	r3, [r7, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
 800c1f2:	e7fd      	b.n	800c1f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1f4:	f001 ff70 	bl	800e0d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1f8:	f3ef 8211 	mrs	r2, BASEPRI
 800c1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	61fa      	str	r2, [r7, #28]
 800c20e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c210:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d302      	bcc.n	800c226 <xQueueGenericSendFromISR+0xc2>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d12f      	bne.n	800c286 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c22c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c234:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c23c:	f000 f912 	bl	800c464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c240:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c248:	d112      	bne.n	800c270 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d016      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c254:	3324      	adds	r3, #36	@ 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	f000 ff04 	bl	800d064 <xTaskRemoveFromEventList>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00e      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e007      	b.n	800c280 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c270:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c274:	3301      	adds	r3, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	b25a      	sxtb	r2, r3
 800c27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c280:	2301      	movs	r3, #1
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c284:	e001      	b.n	800c28a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c286:	2300      	movs	r3, #0
 800c288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c294:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3740      	adds	r7, #64	@ 0x40
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08c      	sub	sp, #48	@ 0x30
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <xQueueReceive+0x32>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	623b      	str	r3, [r7, #32]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <xQueueReceive+0x40>
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <xQueueReceive+0x44>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e000      	b.n	800c2e6 <xQueueReceive+0x46>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <xQueueReceive+0x62>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	61fb      	str	r3, [r7, #28]
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	e7fd      	b.n	800c2fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c302:	f001 f89d 	bl	800d440 <xTaskGetSchedulerState>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <xQueueReceive+0x72>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <xQueueReceive+0x76>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <xQueueReceive+0x78>
 800c316:	2300      	movs	r3, #0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10b      	bne.n	800c334 <xQueueReceive+0x94>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	61bb      	str	r3, [r7, #24]
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c334:	f001 fdf0 	bl	800df18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	d01f      	beq.n	800c384 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c348:	f000 f8f6 	bl	800c538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	1e5a      	subs	r2, r3, #1
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00f      	beq.n	800c37c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	3310      	adds	r3, #16
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fe7f 	bl	800d064 <xTaskRemoveFromEventList>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d007      	beq.n	800c37c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c36c:	4b3c      	ldr	r3, [pc, #240]	@ (800c460 <xQueueReceive+0x1c0>)
 800c36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c37c:	f001 fdfe 	bl	800df7c <vPortExitCritical>
				return pdPASS;
 800c380:	2301      	movs	r3, #1
 800c382:	e069      	b.n	800c458 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c38a:	f001 fdf7 	bl	800df7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c38e:	2300      	movs	r3, #0
 800c390:	e062      	b.n	800c458 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c398:	f107 0310 	add.w	r3, r7, #16
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 feed 	bl	800d17c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3a6:	f001 fde9 	bl	800df7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3aa:	f000 fc2d 	bl	800cc08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ae:	f001 fdb3 	bl	800df18 <vPortEnterCritical>
 800c3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3b8:	b25b      	sxtb	r3, r3
 800c3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3be:	d103      	bne.n	800c3c8 <xQueueReceive+0x128>
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3ce:	b25b      	sxtb	r3, r3
 800c3d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3d4:	d103      	bne.n	800c3de <xQueueReceive+0x13e>
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3de:	f001 fdcd 	bl	800df7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3e2:	1d3a      	adds	r2, r7, #4
 800c3e4:	f107 0310 	add.w	r3, r7, #16
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fedc 	bl	800d1a8 <xTaskCheckForTimeOut>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d123      	bne.n	800c43e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3f8:	f000 f916 	bl	800c628 <prvIsQueueEmpty>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d017      	beq.n	800c432 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	3324      	adds	r3, #36	@ 0x24
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fdd8 	bl	800cfc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c412:	f000 f8b7 	bl	800c584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c416:	f000 fc05 	bl	800cc24 <xTaskResumeAll>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d189      	bne.n	800c334 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c420:	4b0f      	ldr	r3, [pc, #60]	@ (800c460 <xQueueReceive+0x1c0>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	e780      	b.n	800c334 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c434:	f000 f8a6 	bl	800c584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c438:	f000 fbf4 	bl	800cc24 <xTaskResumeAll>
 800c43c:	e77a      	b.n	800c334 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c440:	f000 f8a0 	bl	800c584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c444:	f000 fbee 	bl	800cc24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44a:	f000 f8ed 	bl	800c628 <prvIsQueueEmpty>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f43f af6f 	beq.w	800c334 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3730      	adds	r7, #48	@ 0x30
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c470:	2300      	movs	r3, #0
 800c472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10d      	bne.n	800c49e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d14d      	bne.n	800c526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 fff4 	bl	800d47c <xTaskPriorityDisinherit>
 800c494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	609a      	str	r2, [r3, #8]
 800c49c:	e043      	b.n	800c526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d119      	bne.n	800c4d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6858      	ldr	r0, [r3, #4]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	f00b fc3f 	bl	8017d32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4bc:	441a      	add	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d32b      	bcc.n	800c526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	605a      	str	r2, [r3, #4]
 800c4d6:	e026      	b.n	800c526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	68d8      	ldr	r0, [r3, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	f00b fc25 	bl	8017d32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f0:	425b      	negs	r3, r3
 800c4f2:	441a      	add	r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d207      	bcs.n	800c514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50c:	425b      	negs	r3, r3
 800c50e:	441a      	add	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d105      	bne.n	800c526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	3b01      	subs	r3, #1
 800c524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c52e:	697b      	ldr	r3, [r7, #20]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	d018      	beq.n	800c57c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c552:	441a      	add	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68da      	ldr	r2, [r3, #12]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	429a      	cmp	r2, r3
 800c562:	d303      	bcc.n	800c56c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68d9      	ldr	r1, [r3, #12]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c574:	461a      	mov	r2, r3
 800c576:	6838      	ldr	r0, [r7, #0]
 800c578:	f00b fbdb 	bl	8017d32 <memcpy>
	}
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c58c:	f001 fcc4 	bl	800df18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c598:	e011      	b.n	800c5be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d012      	beq.n	800c5c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3324      	adds	r3, #36	@ 0x24
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 fd5c 	bl	800d064 <xTaskRemoveFromEventList>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5b2:	f000 fe5d 	bl	800d270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dce9      	bgt.n	800c59a <prvUnlockQueue+0x16>
 800c5c6:	e000      	b.n	800c5ca <prvUnlockQueue+0x46>
					break;
 800c5c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	22ff      	movs	r2, #255	@ 0xff
 800c5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c5d2:	f001 fcd3 	bl	800df7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5d6:	f001 fc9f 	bl	800df18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5e2:	e011      	b.n	800c608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d012      	beq.n	800c612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3310      	adds	r3, #16
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fd37 	bl	800d064 <xTaskRemoveFromEventList>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5fc:	f000 fe38 	bl	800d270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	3b01      	subs	r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dce9      	bgt.n	800c5e4 <prvUnlockQueue+0x60>
 800c610:	e000      	b.n	800c614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	22ff      	movs	r2, #255	@ 0xff
 800c618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c61c:	f001 fcae 	bl	800df7c <vPortExitCritical>
}
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c630:	f001 fc72 	bl	800df18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c63c:	2301      	movs	r3, #1
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e001      	b.n	800c646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c642:	2300      	movs	r3, #0
 800c644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c646:	f001 fc99 	bl	800df7c <vPortExitCritical>

	return xReturn;
 800c64a:	68fb      	ldr	r3, [r7, #12]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c65c:	f001 fc5c 	bl	800df18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c668:	429a      	cmp	r2, r3
 800c66a:	d102      	bne.n	800c672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c66c:	2301      	movs	r3, #1
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	e001      	b.n	800c676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c672:	2300      	movs	r3, #0
 800c674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c676:	f001 fc81 	bl	800df7c <vPortExitCritical>

	return xReturn;
 800c67a:	68fb      	ldr	r3, [r7, #12]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	e014      	b.n	800c6be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c694:	4a0f      	ldr	r2, [pc, #60]	@ (800c6d4 <vQueueAddToRegistry+0x50>)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10b      	bne.n	800c6b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c6a0:	490c      	ldr	r1, [pc, #48]	@ (800c6d4 <vQueueAddToRegistry+0x50>)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c6aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c6d4 <vQueueAddToRegistry+0x50>)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c6b6:	e006      	b.n	800c6c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b07      	cmp	r3, #7
 800c6c2:	d9e7      	bls.n	800c694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	24032664 	.word	0x24032664

0800c6d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6e8:	f001 fc16 	bl	800df18 <vPortEnterCritical>
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6f2:	b25b      	sxtb	r3, r3
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6f8:	d103      	bne.n	800c702 <vQueueWaitForMessageRestricted+0x2a>
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c708:	b25b      	sxtb	r3, r3
 800c70a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c70e:	d103      	bne.n	800c718 <vQueueWaitForMessageRestricted+0x40>
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c718:	f001 fc30 	bl	800df7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	3324      	adds	r3, #36	@ 0x24
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	68b9      	ldr	r1, [r7, #8]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fc6d 	bl	800d00c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c732:	6978      	ldr	r0, [r7, #20]
 800c734:	f7ff ff26 	bl	800c584 <prvUnlockQueue>
	}
 800c738:	bf00      	nop
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08e      	sub	sp, #56	@ 0x38
 800c744:	af04      	add	r7, sp, #16
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10b      	bne.n	800c76c <xTaskCreateStatic+0x2c>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	623b      	str	r3, [r7, #32]
}
 800c766:	bf00      	nop
 800c768:	bf00      	nop
 800c76a:	e7fd      	b.n	800c768 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10b      	bne.n	800c78a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	61fb      	str	r3, [r7, #28]
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	e7fd      	b.n	800c786 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c78a:	23a8      	movs	r3, #168	@ 0xa8
 800c78c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2ba8      	cmp	r3, #168	@ 0xa8
 800c792:	d00b      	beq.n	800c7ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	61bb      	str	r3, [r7, #24]
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	e7fd      	b.n	800c7a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d01e      	beq.n	800c7f2 <xTaskCreateStatic+0xb2>
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d01b      	beq.n	800c7f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	9302      	str	r3, [sp, #8]
 800c7d4:	f107 0314 	add.w	r3, r7, #20
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 f851 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7ec:	f000 f8f6 	bl	800c9dc <prvAddNewTaskToReadyList>
 800c7f0:	e001      	b.n	800c7f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7f6:	697b      	ldr	r3, [r7, #20]
	}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3728      	adds	r7, #40	@ 0x28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08c      	sub	sp, #48	@ 0x30
 800c804:	af04      	add	r7, sp, #16
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	4613      	mov	r3, r2
 800c80e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c810:	88fb      	ldrh	r3, [r7, #6]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4618      	mov	r0, r3
 800c816:	f001 fca1 	bl	800e15c <pvPortMalloc>
 800c81a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00e      	beq.n	800c840 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c822:	20a8      	movs	r0, #168	@ 0xa8
 800c824:	f001 fc9a 	bl	800e15c <pvPortMalloc>
 800c828:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d003      	beq.n	800c838 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	631a      	str	r2, [r3, #48]	@ 0x30
 800c836:	e005      	b.n	800c844 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c838:	6978      	ldr	r0, [r7, #20]
 800c83a:	f001 fd5d 	bl	800e2f8 <vPortFree>
 800c83e:	e001      	b.n	800c844 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d017      	beq.n	800c87a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c852:	88fa      	ldrh	r2, [r7, #6]
 800c854:	2300      	movs	r3, #0
 800c856:	9303      	str	r3, [sp, #12]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	9302      	str	r3, [sp, #8]
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	68b9      	ldr	r1, [r7, #8]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f000 f80f 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c86e:	69f8      	ldr	r0, [r7, #28]
 800c870:	f000 f8b4 	bl	800c9dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c874:	2301      	movs	r3, #1
 800c876:	61bb      	str	r3, [r7, #24]
 800c878:	e002      	b.n	800c880 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c87a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c87e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c880:	69bb      	ldr	r3, [r7, #24]
	}
 800c882:	4618      	mov	r0, r3
 800c884:	3720      	adds	r7, #32
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	21a5      	movs	r1, #165	@ 0xa5
 800c8a6:	f00b f925 	bl	8017af4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c8b4:	440b      	add	r3, r1
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	617b      	str	r3, [r7, #20]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01f      	beq.n	800c92c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
 800c8f0:	e012      	b.n	800c918 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	7819      	ldrb	r1, [r3, #0]
 800c8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	4413      	add	r3, r2
 800c900:	3334      	adds	r3, #52	@ 0x34
 800c902:	460a      	mov	r2, r1
 800c904:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d006      	beq.n	800c920 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	3301      	adds	r3, #1
 800c916:	61fb      	str	r3, [r7, #28]
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	2b0f      	cmp	r3, #15
 800c91c:	d9e9      	bls.n	800c8f2 <prvInitialiseNewTask+0x66>
 800c91e:	e000      	b.n	800c922 <prvInitialiseNewTask+0x96>
			{
				break;
 800c920:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c92a:	e003      	b.n	800c934 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c936:	2b37      	cmp	r3, #55	@ 0x37
 800c938:	d901      	bls.n	800c93e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c93a:	2337      	movs	r3, #55	@ 0x37
 800c93c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c942:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c948:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94c:	2200      	movs	r2, #0
 800c94e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c952:	3304      	adds	r3, #4
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff f965 	bl	800bc24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95c:	3318      	adds	r3, #24
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff f960 	bl	800bc24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c968:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c972:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c978:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c984:	2200      	movs	r2, #0
 800c986:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98c:	3354      	adds	r3, #84	@ 0x54
 800c98e:	224c      	movs	r2, #76	@ 0x4c
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f00b f8ae 	bl	8017af4 <memset>
 800c998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99a:	4a0d      	ldr	r2, [pc, #52]	@ (800c9d0 <prvInitialiseNewTask+0x144>)
 800c99c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a0:	4a0c      	ldr	r2, [pc, #48]	@ (800c9d4 <prvInitialiseNewTask+0x148>)
 800c9a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a6:	4a0c      	ldr	r2, [pc, #48]	@ (800c9d8 <prvInitialiseNewTask+0x14c>)
 800c9a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	68f9      	ldr	r1, [r7, #12]
 800c9ae:	69b8      	ldr	r0, [r7, #24]
 800c9b0:	f001 f982 	bl	800dcb8 <pxPortInitialiseStack>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c6:	bf00      	nop
 800c9c8:	3720      	adds	r7, #32
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	2406854c 	.word	0x2406854c
 800c9d4:	240685b4 	.word	0x240685b4
 800c9d8:	2406861c 	.word	0x2406861c

0800c9dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9e4:	f001 fa98 	bl	800df18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9e8:	4b2d      	ldr	r3, [pc, #180]	@ (800caa0 <prvAddNewTaskToReadyList+0xc4>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	4a2c      	ldr	r2, [pc, #176]	@ (800caa0 <prvAddNewTaskToReadyList+0xc4>)
 800c9f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9f2:	4b2c      	ldr	r3, [pc, #176]	@ (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9fa:	4a2a      	ldr	r2, [pc, #168]	@ (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca00:	4b27      	ldr	r3, [pc, #156]	@ (800caa0 <prvAddNewTaskToReadyList+0xc4>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d110      	bne.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca08:	f000 fc56 	bl	800d2b8 <prvInitialiseTaskLists>
 800ca0c:	e00d      	b.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca0e:	4b26      	ldr	r3, [pc, #152]	@ (800caa8 <prvAddNewTaskToReadyList+0xcc>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d109      	bne.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca16:	4b23      	ldr	r3, [pc, #140]	@ (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d802      	bhi.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca24:	4a1f      	ldr	r2, [pc, #124]	@ (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca2a:	4b20      	ldr	r3, [pc, #128]	@ (800caac <prvAddNewTaskToReadyList+0xd0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	4a1e      	ldr	r2, [pc, #120]	@ (800caac <prvAddNewTaskToReadyList+0xd0>)
 800ca32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca34:	4b1d      	ldr	r3, [pc, #116]	@ (800caac <prvAddNewTaskToReadyList+0xd0>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca40:	4b1b      	ldr	r3, [pc, #108]	@ (800cab0 <prvAddNewTaskToReadyList+0xd4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d903      	bls.n	800ca50 <prvAddNewTaskToReadyList+0x74>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4c:	4a18      	ldr	r2, [pc, #96]	@ (800cab0 <prvAddNewTaskToReadyList+0xd4>)
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4a15      	ldr	r2, [pc, #84]	@ (800cab4 <prvAddNewTaskToReadyList+0xd8>)
 800ca5e:	441a      	add	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f7ff f8e9 	bl	800bc3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca6c:	f001 fa86 	bl	800df7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca70:	4b0d      	ldr	r3, [pc, #52]	@ (800caa8 <prvAddNewTaskToReadyList+0xcc>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00e      	beq.n	800ca96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca78:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d207      	bcs.n	800ca96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca86:	4b0c      	ldr	r3, [pc, #48]	@ (800cab8 <prvAddNewTaskToReadyList+0xdc>)
 800ca88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	24032b78 	.word	0x24032b78
 800caa4:	240326a4 	.word	0x240326a4
 800caa8:	24032b84 	.word	0x24032b84
 800caac:	24032b94 	.word	0x24032b94
 800cab0:	24032b80 	.word	0x24032b80
 800cab4:	240326a8 	.word	0x240326a8
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cac4:	2300      	movs	r3, #0
 800cac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d018      	beq.n	800cb00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cace:	4b14      	ldr	r3, [pc, #80]	@ (800cb20 <vTaskDelay+0x64>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00b      	beq.n	800caee <vTaskDelay+0x32>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60bb      	str	r3, [r7, #8]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800caee:	f000 f88b 	bl	800cc08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800caf2:	2100      	movs	r1, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fd31 	bl	800d55c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cafa:	f000 f893 	bl	800cc24 <xTaskResumeAll>
 800cafe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d107      	bne.n	800cb16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb06:	4b07      	ldr	r3, [pc, #28]	@ (800cb24 <vTaskDelay+0x68>)
 800cb08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	24032ba0 	.word	0x24032ba0
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	@ 0x28
 800cb2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb32:	2300      	movs	r3, #0
 800cb34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb36:	463a      	mov	r2, r7
 800cb38:	1d39      	adds	r1, r7, #4
 800cb3a:	f107 0308 	add.w	r3, r7, #8
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7ff f81c 	bl	800bb7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	9202      	str	r2, [sp, #8]
 800cb4c:	9301      	str	r3, [sp, #4]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	2300      	movs	r3, #0
 800cb54:	460a      	mov	r2, r1
 800cb56:	4924      	ldr	r1, [pc, #144]	@ (800cbe8 <vTaskStartScheduler+0xc0>)
 800cb58:	4824      	ldr	r0, [pc, #144]	@ (800cbec <vTaskStartScheduler+0xc4>)
 800cb5a:	f7ff fdf1 	bl	800c740 <xTaskCreateStatic>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a23      	ldr	r2, [pc, #140]	@ (800cbf0 <vTaskStartScheduler+0xc8>)
 800cb62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb64:	4b22      	ldr	r3, [pc, #136]	@ (800cbf0 <vTaskStartScheduler+0xc8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	e001      	b.n	800cb76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d102      	bne.n	800cb82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb7c:	f000 fd42 	bl	800d604 <xTimerCreateTimerTask>
 800cb80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d11b      	bne.n	800cbc0 <vTaskStartScheduler+0x98>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	613b      	str	r3, [r7, #16]
}
 800cb9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb9c:	4b15      	ldr	r3, [pc, #84]	@ (800cbf4 <vTaskStartScheduler+0xcc>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3354      	adds	r3, #84	@ 0x54
 800cba2:	4a15      	ldr	r2, [pc, #84]	@ (800cbf8 <vTaskStartScheduler+0xd0>)
 800cba4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cba6:	4b15      	ldr	r3, [pc, #84]	@ (800cbfc <vTaskStartScheduler+0xd4>)
 800cba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbae:	4b14      	ldr	r3, [pc, #80]	@ (800cc00 <vTaskStartScheduler+0xd8>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbb4:	4b13      	ldr	r3, [pc, #76]	@ (800cc04 <vTaskStartScheduler+0xdc>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbba:	f001 f909 	bl	800ddd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbbe:	e00f      	b.n	800cbe0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbc6:	d10b      	bne.n	800cbe0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	60fb      	str	r3, [r7, #12]
}
 800cbda:	bf00      	nop
 800cbdc:	bf00      	nop
 800cbde:	e7fd      	b.n	800cbdc <vTaskStartScheduler+0xb4>
}
 800cbe0:	bf00      	nop
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	08018b5c 	.word	0x08018b5c
 800cbec:	0800d289 	.word	0x0800d289
 800cbf0:	24032b9c 	.word	0x24032b9c
 800cbf4:	240326a4 	.word	0x240326a4
 800cbf8:	240000c4 	.word	0x240000c4
 800cbfc:	24032b98 	.word	0x24032b98
 800cc00:	24032b84 	.word	0x24032b84
 800cc04:	24032b7c 	.word	0x24032b7c

0800cc08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc0c:	4b04      	ldr	r3, [pc, #16]	@ (800cc20 <vTaskSuspendAll+0x18>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3301      	adds	r3, #1
 800cc12:	4a03      	ldr	r2, [pc, #12]	@ (800cc20 <vTaskSuspendAll+0x18>)
 800cc14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc16:	bf00      	nop
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	24032ba0 	.word	0x24032ba0

0800cc24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc32:	4b42      	ldr	r3, [pc, #264]	@ (800cd3c <xTaskResumeAll+0x118>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10b      	bne.n	800cc52 <xTaskResumeAll+0x2e>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	603b      	str	r3, [r7, #0]
}
 800cc4c:	bf00      	nop
 800cc4e:	bf00      	nop
 800cc50:	e7fd      	b.n	800cc4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc52:	f001 f961 	bl	800df18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc56:	4b39      	ldr	r3, [pc, #228]	@ (800cd3c <xTaskResumeAll+0x118>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	4a37      	ldr	r2, [pc, #220]	@ (800cd3c <xTaskResumeAll+0x118>)
 800cc5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc60:	4b36      	ldr	r3, [pc, #216]	@ (800cd3c <xTaskResumeAll+0x118>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d162      	bne.n	800cd2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc68:	4b35      	ldr	r3, [pc, #212]	@ (800cd40 <xTaskResumeAll+0x11c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d05e      	beq.n	800cd2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc70:	e02f      	b.n	800ccd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc72:	4b34      	ldr	r3, [pc, #208]	@ (800cd44 <xTaskResumeAll+0x120>)
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3318      	adds	r3, #24
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff f83a 	bl	800bcf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3304      	adds	r3, #4
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff f835 	bl	800bcf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc92:	4b2d      	ldr	r3, [pc, #180]	@ (800cd48 <xTaskResumeAll+0x124>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d903      	bls.n	800cca2 <xTaskResumeAll+0x7e>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd48 <xTaskResumeAll+0x124>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca6:	4613      	mov	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4a27      	ldr	r2, [pc, #156]	@ (800cd4c <xTaskResumeAll+0x128>)
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4610      	mov	r0, r2
 800ccba:	f7fe ffc0 	bl	800bc3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc2:	4b23      	ldr	r3, [pc, #140]	@ (800cd50 <xTaskResumeAll+0x12c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d302      	bcc.n	800ccd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cccc:	4b21      	ldr	r3, [pc, #132]	@ (800cd54 <xTaskResumeAll+0x130>)
 800ccce:	2201      	movs	r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	@ (800cd44 <xTaskResumeAll+0x120>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1cb      	bne.n	800cc72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cce0:	f000 fb8e 	bl	800d400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cce4:	4b1c      	ldr	r3, [pc, #112]	@ (800cd58 <xTaskResumeAll+0x134>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d010      	beq.n	800cd12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccf0:	f000 f846 	bl	800cd80 <xTaskIncrementTick>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ccfa:	4b16      	ldr	r3, [pc, #88]	@ (800cd54 <xTaskResumeAll+0x130>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1f1      	bne.n	800ccf0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cd0c:	4b12      	ldr	r3, [pc, #72]	@ (800cd58 <xTaskResumeAll+0x134>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd12:	4b10      	ldr	r3, [pc, #64]	@ (800cd54 <xTaskResumeAll+0x130>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d009      	beq.n	800cd2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <xTaskResumeAll+0x138>)
 800cd20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd2e:	f001 f925 	bl	800df7c <vPortExitCritical>

	return xAlreadyYielded;
 800cd32:	68bb      	ldr	r3, [r7, #8]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	24032ba0 	.word	0x24032ba0
 800cd40:	24032b78 	.word	0x24032b78
 800cd44:	24032b38 	.word	0x24032b38
 800cd48:	24032b80 	.word	0x24032b80
 800cd4c:	240326a8 	.word	0x240326a8
 800cd50:	240326a4 	.word	0x240326a4
 800cd54:	24032b8c 	.word	0x24032b8c
 800cd58:	24032b88 	.word	0x24032b88
 800cd5c:	e000ed04 	.word	0xe000ed04

0800cd60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd66:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <xTaskGetTickCount+0x1c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd6c:	687b      	ldr	r3, [r7, #4]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	24032b7c 	.word	0x24032b7c

0800cd80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd8a:	4b4f      	ldr	r3, [pc, #316]	@ (800cec8 <xTaskIncrementTick+0x148>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f040 8090 	bne.w	800ceb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd94:	4b4d      	ldr	r3, [pc, #308]	@ (800cecc <xTaskIncrementTick+0x14c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd9c:	4a4b      	ldr	r2, [pc, #300]	@ (800cecc <xTaskIncrementTick+0x14c>)
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d121      	bne.n	800cdec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cda8:	4b49      	ldr	r3, [pc, #292]	@ (800ced0 <xTaskIncrementTick+0x150>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00b      	beq.n	800cdca <xTaskIncrementTick+0x4a>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	603b      	str	r3, [r7, #0]
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	e7fd      	b.n	800cdc6 <xTaskIncrementTick+0x46>
 800cdca:	4b41      	ldr	r3, [pc, #260]	@ (800ced0 <xTaskIncrementTick+0x150>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	4b40      	ldr	r3, [pc, #256]	@ (800ced4 <xTaskIncrementTick+0x154>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a3e      	ldr	r2, [pc, #248]	@ (800ced0 <xTaskIncrementTick+0x150>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	4a3e      	ldr	r2, [pc, #248]	@ (800ced4 <xTaskIncrementTick+0x154>)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	4b3e      	ldr	r3, [pc, #248]	@ (800ced8 <xTaskIncrementTick+0x158>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3301      	adds	r3, #1
 800cde4:	4a3c      	ldr	r2, [pc, #240]	@ (800ced8 <xTaskIncrementTick+0x158>)
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	f000 fb0a 	bl	800d400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cdec:	4b3b      	ldr	r3, [pc, #236]	@ (800cedc <xTaskIncrementTick+0x15c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d349      	bcc.n	800ce8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdf6:	4b36      	ldr	r3, [pc, #216]	@ (800ced0 <xTaskIncrementTick+0x150>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d104      	bne.n	800ce0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce00:	4b36      	ldr	r3, [pc, #216]	@ (800cedc <xTaskIncrementTick+0x15c>)
 800ce02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce06:	601a      	str	r2, [r3, #0]
					break;
 800ce08:	e03f      	b.n	800ce8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce0a:	4b31      	ldr	r3, [pc, #196]	@ (800ced0 <xTaskIncrementTick+0x150>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d203      	bcs.n	800ce2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce22:	4a2e      	ldr	r2, [pc, #184]	@ (800cedc <xTaskIncrementTick+0x15c>)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce28:	e02f      	b.n	800ce8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe ff62 	bl	800bcf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	3318      	adds	r3, #24
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe ff59 	bl	800bcf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4a:	4b25      	ldr	r3, [pc, #148]	@ (800cee0 <xTaskIncrementTick+0x160>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d903      	bls.n	800ce5a <xTaskIncrementTick+0xda>
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce56:	4a22      	ldr	r2, [pc, #136]	@ (800cee0 <xTaskIncrementTick+0x160>)
 800ce58:	6013      	str	r3, [r2, #0]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4a1f      	ldr	r2, [pc, #124]	@ (800cee4 <xTaskIncrementTick+0x164>)
 800ce68:	441a      	add	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f7fe fee4 	bl	800bc3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce7a:	4b1b      	ldr	r3, [pc, #108]	@ (800cee8 <xTaskIncrementTick+0x168>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d3b8      	bcc.n	800cdf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ce84:	2301      	movs	r3, #1
 800ce86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce88:	e7b5      	b.n	800cdf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce8a:	4b17      	ldr	r3, [pc, #92]	@ (800cee8 <xTaskIncrementTick+0x168>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce90:	4914      	ldr	r1, [pc, #80]	@ (800cee4 <xTaskIncrementTick+0x164>)
 800ce92:	4613      	mov	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	4413      	add	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	440b      	add	r3, r1
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d901      	bls.n	800cea6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cea2:	2301      	movs	r3, #1
 800cea4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cea6:	4b11      	ldr	r3, [pc, #68]	@ (800ceec <xTaskIncrementTick+0x16c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d007      	beq.n	800cebe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	e004      	b.n	800cebe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	@ (800cef0 <xTaskIncrementTick+0x170>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	4a0d      	ldr	r2, [pc, #52]	@ (800cef0 <xTaskIncrementTick+0x170>)
 800cebc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cebe:	697b      	ldr	r3, [r7, #20]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	24032ba0 	.word	0x24032ba0
 800cecc:	24032b7c 	.word	0x24032b7c
 800ced0:	24032b30 	.word	0x24032b30
 800ced4:	24032b34 	.word	0x24032b34
 800ced8:	24032b90 	.word	0x24032b90
 800cedc:	24032b98 	.word	0x24032b98
 800cee0:	24032b80 	.word	0x24032b80
 800cee4:	240326a8 	.word	0x240326a8
 800cee8:	240326a4 	.word	0x240326a4
 800ceec:	24032b8c 	.word	0x24032b8c
 800cef0:	24032b88 	.word	0x24032b88

0800cef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cefa:	4b2b      	ldr	r3, [pc, #172]	@ (800cfa8 <vTaskSwitchContext+0xb4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf02:	4b2a      	ldr	r3, [pc, #168]	@ (800cfac <vTaskSwitchContext+0xb8>)
 800cf04:	2201      	movs	r2, #1
 800cf06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf08:	e047      	b.n	800cf9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cf0a:	4b28      	ldr	r3, [pc, #160]	@ (800cfac <vTaskSwitchContext+0xb8>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf10:	4b27      	ldr	r3, [pc, #156]	@ (800cfb0 <vTaskSwitchContext+0xbc>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e011      	b.n	800cf3c <vTaskSwitchContext+0x48>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10b      	bne.n	800cf36 <vTaskSwitchContext+0x42>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	607b      	str	r3, [r7, #4]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <vTaskSwitchContext+0x3e>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	491d      	ldr	r1, [pc, #116]	@ (800cfb4 <vTaskSwitchContext+0xc0>)
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d0e3      	beq.n	800cf18 <vTaskSwitchContext+0x24>
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4a16      	ldr	r2, [pc, #88]	@ (800cfb4 <vTaskSwitchContext+0xc0>)
 800cf5c:	4413      	add	r3, r2
 800cf5e:	60bb      	str	r3, [r7, #8]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	3308      	adds	r3, #8
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d104      	bne.n	800cf80 <vTaskSwitchContext+0x8c>
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	605a      	str	r2, [r3, #4]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	4a0c      	ldr	r2, [pc, #48]	@ (800cfb8 <vTaskSwitchContext+0xc4>)
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	4a09      	ldr	r2, [pc, #36]	@ (800cfb0 <vTaskSwitchContext+0xbc>)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf90:	4b09      	ldr	r3, [pc, #36]	@ (800cfb8 <vTaskSwitchContext+0xc4>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3354      	adds	r3, #84	@ 0x54
 800cf96:	4a09      	ldr	r2, [pc, #36]	@ (800cfbc <vTaskSwitchContext+0xc8>)
 800cf98:	6013      	str	r3, [r2, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	24032ba0 	.word	0x24032ba0
 800cfac:	24032b8c 	.word	0x24032b8c
 800cfb0:	24032b80 	.word	0x24032b80
 800cfb4:	240326a8 	.word	0x240326a8
 800cfb8:	240326a4 	.word	0x240326a4
 800cfbc:	240000c4 	.word	0x240000c4

0800cfc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10b      	bne.n	800cfe8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	60fb      	str	r3, [r7, #12]
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	e7fd      	b.n	800cfe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfe8:	4b07      	ldr	r3, [pc, #28]	@ (800d008 <vTaskPlaceOnEventList+0x48>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3318      	adds	r3, #24
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7fe fe48 	bl	800bc86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cff6:	2101      	movs	r1, #1
 800cff8:	6838      	ldr	r0, [r7, #0]
 800cffa:	f000 faaf 	bl	800d55c <prvAddCurrentTaskToDelayedList>
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	240326a4 	.word	0x240326a4

0800d00c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10b      	bne.n	800d036 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	617b      	str	r3, [r7, #20]
}
 800d030:	bf00      	nop
 800d032:	bf00      	nop
 800d034:	e7fd      	b.n	800d032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d036:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <vTaskPlaceOnEventListRestricted+0x54>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3318      	adds	r3, #24
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7fe fdfd 	bl	800bc3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d04a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d04e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	68b8      	ldr	r0, [r7, #8]
 800d054:	f000 fa82 	bl	800d55c <prvAddCurrentTaskToDelayedList>
	}
 800d058:	bf00      	nop
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	240326a4 	.word	0x240326a4

0800d064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10b      	bne.n	800d092 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	60fb      	str	r3, [r7, #12]
}
 800d08c:	bf00      	nop
 800d08e:	bf00      	nop
 800d090:	e7fd      	b.n	800d08e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	3318      	adds	r3, #24
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fe2e 	bl	800bcf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d09c:	4b1d      	ldr	r3, [pc, #116]	@ (800d114 <xTaskRemoveFromEventList+0xb0>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11d      	bne.n	800d0e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fe25 	bl	800bcf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b2:	4b19      	ldr	r3, [pc, #100]	@ (800d118 <xTaskRemoveFromEventList+0xb4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d903      	bls.n	800d0c2 <xTaskRemoveFromEventList+0x5e>
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0be:	4a16      	ldr	r2, [pc, #88]	@ (800d118 <xTaskRemoveFromEventList+0xb4>)
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4a13      	ldr	r2, [pc, #76]	@ (800d11c <xTaskRemoveFromEventList+0xb8>)
 800d0d0:	441a      	add	r2, r3
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f7fe fdb0 	bl	800bc3e <vListInsertEnd>
 800d0de:	e005      	b.n	800d0ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	3318      	adds	r3, #24
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	480e      	ldr	r0, [pc, #56]	@ (800d120 <xTaskRemoveFromEventList+0xbc>)
 800d0e8:	f7fe fda9 	bl	800bc3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d124 <xTaskRemoveFromEventList+0xc0>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d905      	bls.n	800d106 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d128 <xTaskRemoveFromEventList+0xc4>)
 800d100:	2201      	movs	r2, #1
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e001      	b.n	800d10a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d106:	2300      	movs	r3, #0
 800d108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d10a:	697b      	ldr	r3, [r7, #20]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	24032ba0 	.word	0x24032ba0
 800d118:	24032b80 	.word	0x24032b80
 800d11c:	240326a8 	.word	0x240326a8
 800d120:	24032b38 	.word	0x24032b38
 800d124:	240326a4 	.word	0x240326a4
 800d128:	24032b8c 	.word	0x24032b8c

0800d12c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10b      	bne.n	800d152 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	60fb      	str	r3, [r7, #12]
}
 800d14c:	bf00      	nop
 800d14e:	bf00      	nop
 800d150:	e7fd      	b.n	800d14e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d152:	f000 fee1 	bl	800df18 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d156:	4b07      	ldr	r3, [pc, #28]	@ (800d174 <vTaskSetTimeOutState+0x48>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d15e:	4b06      	ldr	r3, [pc, #24]	@ (800d178 <vTaskSetTimeOutState+0x4c>)
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d166:	f000 ff09 	bl	800df7c <vPortExitCritical>
}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	24032b90 	.word	0x24032b90
 800d178:	24032b7c 	.word	0x24032b7c

0800d17c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d184:	4b06      	ldr	r3, [pc, #24]	@ (800d1a0 <vTaskInternalSetTimeOutState+0x24>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d18c:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <vTaskInternalSetTimeOutState+0x28>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	605a      	str	r2, [r3, #4]
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	24032b90 	.word	0x24032b90
 800d1a4:	24032b7c 	.word	0x24032b7c

0800d1a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10b      	bne.n	800d1d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	613b      	str	r3, [r7, #16]
}
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	e7fd      	b.n	800d1cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10b      	bne.n	800d1ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	60fb      	str	r3, [r7, #12]
}
 800d1e8:	bf00      	nop
 800d1ea:	bf00      	nop
 800d1ec:	e7fd      	b.n	800d1ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d1ee:	f000 fe93 	bl	800df18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d1f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d268 <xTaskCheckForTimeOut+0xc0>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	69ba      	ldr	r2, [r7, #24]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d20a:	d102      	bne.n	800d212 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	61fb      	str	r3, [r7, #28]
 800d210:	e023      	b.n	800d25a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	4b15      	ldr	r3, [pc, #84]	@ (800d26c <xTaskCheckForTimeOut+0xc4>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d007      	beq.n	800d22e <xTaskCheckForTimeOut+0x86>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	429a      	cmp	r2, r3
 800d226:	d302      	bcc.n	800d22e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d228:	2301      	movs	r3, #1
 800d22a:	61fb      	str	r3, [r7, #28]
 800d22c:	e015      	b.n	800d25a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	429a      	cmp	r2, r3
 800d236:	d20b      	bcs.n	800d250 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	1ad2      	subs	r2, r2, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ff99 	bl	800d17c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	e004      	b.n	800d25a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d256:	2301      	movs	r3, #1
 800d258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d25a:	f000 fe8f 	bl	800df7c <vPortExitCritical>

	return xReturn;
 800d25e:	69fb      	ldr	r3, [r7, #28]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3720      	adds	r7, #32
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	24032b7c 	.word	0x24032b7c
 800d26c:	24032b90 	.word	0x24032b90

0800d270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d270:	b480      	push	{r7}
 800d272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d274:	4b03      	ldr	r3, [pc, #12]	@ (800d284 <vTaskMissedYield+0x14>)
 800d276:	2201      	movs	r2, #1
 800d278:	601a      	str	r2, [r3, #0]
}
 800d27a:	bf00      	nop
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	24032b8c 	.word	0x24032b8c

0800d288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d290:	f000 f852 	bl	800d338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d294:	4b06      	ldr	r3, [pc, #24]	@ (800d2b0 <prvIdleTask+0x28>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d9f9      	bls.n	800d290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d29c:	4b05      	ldr	r3, [pc, #20]	@ (800d2b4 <prvIdleTask+0x2c>)
 800d29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d2ac:	e7f0      	b.n	800d290 <prvIdleTask+0x8>
 800d2ae:	bf00      	nop
 800d2b0:	240326a8 	.word	0x240326a8
 800d2b4:	e000ed04 	.word	0xe000ed04

0800d2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2be:	2300      	movs	r3, #0
 800d2c0:	607b      	str	r3, [r7, #4]
 800d2c2:	e00c      	b.n	800d2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4a12      	ldr	r2, [pc, #72]	@ (800d318 <prvInitialiseTaskLists+0x60>)
 800d2d0:	4413      	add	r3, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fc86 	bl	800bbe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b37      	cmp	r3, #55	@ 0x37
 800d2e2:	d9ef      	bls.n	800d2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2e4:	480d      	ldr	r0, [pc, #52]	@ (800d31c <prvInitialiseTaskLists+0x64>)
 800d2e6:	f7fe fc7d 	bl	800bbe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2ea:	480d      	ldr	r0, [pc, #52]	@ (800d320 <prvInitialiseTaskLists+0x68>)
 800d2ec:	f7fe fc7a 	bl	800bbe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2f0:	480c      	ldr	r0, [pc, #48]	@ (800d324 <prvInitialiseTaskLists+0x6c>)
 800d2f2:	f7fe fc77 	bl	800bbe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2f6:	480c      	ldr	r0, [pc, #48]	@ (800d328 <prvInitialiseTaskLists+0x70>)
 800d2f8:	f7fe fc74 	bl	800bbe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2fc:	480b      	ldr	r0, [pc, #44]	@ (800d32c <prvInitialiseTaskLists+0x74>)
 800d2fe:	f7fe fc71 	bl	800bbe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d302:	4b0b      	ldr	r3, [pc, #44]	@ (800d330 <prvInitialiseTaskLists+0x78>)
 800d304:	4a05      	ldr	r2, [pc, #20]	@ (800d31c <prvInitialiseTaskLists+0x64>)
 800d306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d308:	4b0a      	ldr	r3, [pc, #40]	@ (800d334 <prvInitialiseTaskLists+0x7c>)
 800d30a:	4a05      	ldr	r2, [pc, #20]	@ (800d320 <prvInitialiseTaskLists+0x68>)
 800d30c:	601a      	str	r2, [r3, #0]
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	240326a8 	.word	0x240326a8
 800d31c:	24032b08 	.word	0x24032b08
 800d320:	24032b1c 	.word	0x24032b1c
 800d324:	24032b38 	.word	0x24032b38
 800d328:	24032b4c 	.word	0x24032b4c
 800d32c:	24032b64 	.word	0x24032b64
 800d330:	24032b30 	.word	0x24032b30
 800d334:	24032b34 	.word	0x24032b34

0800d338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d33e:	e019      	b.n	800d374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d340:	f000 fdea 	bl	800df18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d344:	4b10      	ldr	r3, [pc, #64]	@ (800d388 <prvCheckTasksWaitingTermination+0x50>)
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3304      	adds	r3, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f7fe fcd1 	bl	800bcf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <prvCheckTasksWaitingTermination+0x54>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	4a0b      	ldr	r2, [pc, #44]	@ (800d38c <prvCheckTasksWaitingTermination+0x54>)
 800d35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d360:	4b0b      	ldr	r3, [pc, #44]	@ (800d390 <prvCheckTasksWaitingTermination+0x58>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3b01      	subs	r3, #1
 800d366:	4a0a      	ldr	r2, [pc, #40]	@ (800d390 <prvCheckTasksWaitingTermination+0x58>)
 800d368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d36a:	f000 fe07 	bl	800df7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f810 	bl	800d394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d374:	4b06      	ldr	r3, [pc, #24]	@ (800d390 <prvCheckTasksWaitingTermination+0x58>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e1      	bne.n	800d340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d37c:	bf00      	nop
 800d37e:	bf00      	nop
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	24032b4c 	.word	0x24032b4c
 800d38c:	24032b78 	.word	0x24032b78
 800d390:	24032b60 	.word	0x24032b60

0800d394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3354      	adds	r3, #84	@ 0x54
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f00a fbf5 	bl	8017b90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d108      	bne.n	800d3c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 ff9f 	bl	800e2f8 <vPortFree>
				vPortFree( pxTCB );
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 ff9c 	bl	800e2f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d3c0:	e019      	b.n	800d3f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d103      	bne.n	800d3d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 ff93 	bl	800e2f8 <vPortFree>
	}
 800d3d2:	e010      	b.n	800d3f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d00b      	beq.n	800d3f6 <prvDeleteTCB+0x62>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	60fb      	str	r3, [r7, #12]
}
 800d3f0:	bf00      	nop
 800d3f2:	bf00      	nop
 800d3f4:	e7fd      	b.n	800d3f2 <prvDeleteTCB+0x5e>
	}
 800d3f6:	bf00      	nop
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d406:	4b0c      	ldr	r3, [pc, #48]	@ (800d438 <prvResetNextTaskUnblockTime+0x38>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d104      	bne.n	800d41a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d410:	4b0a      	ldr	r3, [pc, #40]	@ (800d43c <prvResetNextTaskUnblockTime+0x3c>)
 800d412:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d418:	e008      	b.n	800d42c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d41a:	4b07      	ldr	r3, [pc, #28]	@ (800d438 <prvResetNextTaskUnblockTime+0x38>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	4a04      	ldr	r2, [pc, #16]	@ (800d43c <prvResetNextTaskUnblockTime+0x3c>)
 800d42a:	6013      	str	r3, [r2, #0]
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	24032b30 	.word	0x24032b30
 800d43c:	24032b98 	.word	0x24032b98

0800d440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d446:	4b0b      	ldr	r3, [pc, #44]	@ (800d474 <xTaskGetSchedulerState+0x34>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d44e:	2301      	movs	r3, #1
 800d450:	607b      	str	r3, [r7, #4]
 800d452:	e008      	b.n	800d466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d454:	4b08      	ldr	r3, [pc, #32]	@ (800d478 <xTaskGetSchedulerState+0x38>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d45c:	2302      	movs	r3, #2
 800d45e:	607b      	str	r3, [r7, #4]
 800d460:	e001      	b.n	800d466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d462:	2300      	movs	r3, #0
 800d464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d466:	687b      	ldr	r3, [r7, #4]
	}
 800d468:	4618      	mov	r0, r3
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr
 800d474:	24032b84 	.word	0x24032b84
 800d478:	24032ba0 	.word	0x24032ba0

0800d47c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d488:	2300      	movs	r3, #0
 800d48a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d058      	beq.n	800d544 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d492:	4b2f      	ldr	r3, [pc, #188]	@ (800d550 <xTaskPriorityDisinherit+0xd4>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d00b      	beq.n	800d4b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	60fb      	str	r3, [r7, #12]
}
 800d4ae:	bf00      	nop
 800d4b0:	bf00      	nop
 800d4b2:	e7fd      	b.n	800d4b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10b      	bne.n	800d4d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	60bb      	str	r3, [r7, #8]
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	e7fd      	b.n	800d4d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4d8:	1e5a      	subs	r2, r3, #1
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d02c      	beq.n	800d544 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d128      	bne.n	800d544 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fbfe 	bl	800bcf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d508:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d514:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <xTaskPriorityDisinherit+0xd8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d903      	bls.n	800d524 <xTaskPriorityDisinherit+0xa8>
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d520:	4a0c      	ldr	r2, [pc, #48]	@ (800d554 <xTaskPriorityDisinherit+0xd8>)
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4a09      	ldr	r2, [pc, #36]	@ (800d558 <xTaskPriorityDisinherit+0xdc>)
 800d532:	441a      	add	r2, r3
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	3304      	adds	r3, #4
 800d538:	4619      	mov	r1, r3
 800d53a:	4610      	mov	r0, r2
 800d53c:	f7fe fb7f 	bl	800bc3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d540:	2301      	movs	r3, #1
 800d542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d544:	697b      	ldr	r3, [r7, #20]
	}
 800d546:	4618      	mov	r0, r3
 800d548:	3718      	adds	r7, #24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	240326a4 	.word	0x240326a4
 800d554:	24032b80 	.word	0x24032b80
 800d558:	240326a8 	.word	0x240326a8

0800d55c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d566:	4b21      	ldr	r3, [pc, #132]	@ (800d5ec <prvAddCurrentTaskToDelayedList+0x90>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d56c:	4b20      	ldr	r3, [pc, #128]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3304      	adds	r3, #4
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe fbc0 	bl	800bcf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d57e:	d10a      	bne.n	800d596 <prvAddCurrentTaskToDelayedList+0x3a>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d007      	beq.n	800d596 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d586:	4b1a      	ldr	r3, [pc, #104]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3304      	adds	r3, #4
 800d58c:	4619      	mov	r1, r3
 800d58e:	4819      	ldr	r0, [pc, #100]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d590:	f7fe fb55 	bl	800bc3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d594:	e026      	b.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4413      	add	r3, r2
 800d59c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d59e:	4b14      	ldr	r3, [pc, #80]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d209      	bcs.n	800d5c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ae:	4b12      	ldr	r3, [pc, #72]	@ (800d5f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fe fb63 	bl	800bc86 <vListInsert>
}
 800d5c0:	e010      	b.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	f7fe fb59 	bl	800bc86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d202      	bcs.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5de:	4a08      	ldr	r2, [pc, #32]	@ (800d600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	6013      	str	r3, [r2, #0]
}
 800d5e4:	bf00      	nop
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	24032b7c 	.word	0x24032b7c
 800d5f0:	240326a4 	.word	0x240326a4
 800d5f4:	24032b64 	.word	0x24032b64
 800d5f8:	24032b34 	.word	0x24032b34
 800d5fc:	24032b30 	.word	0x24032b30
 800d600:	24032b98 	.word	0x24032b98

0800d604 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	@ 0x28
 800d608:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d60e:	f000 fb13 	bl	800dc38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d612:	4b1d      	ldr	r3, [pc, #116]	@ (800d688 <xTimerCreateTimerTask+0x84>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d021      	beq.n	800d65e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d622:	1d3a      	adds	r2, r7, #4
 800d624:	f107 0108 	add.w	r1, r7, #8
 800d628:	f107 030c 	add.w	r3, r7, #12
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fabf 	bl	800bbb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d632:	6879      	ldr	r1, [r7, #4]
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	9202      	str	r2, [sp, #8]
 800d63a:	9301      	str	r3, [sp, #4]
 800d63c:	2302      	movs	r3, #2
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	2300      	movs	r3, #0
 800d642:	460a      	mov	r2, r1
 800d644:	4911      	ldr	r1, [pc, #68]	@ (800d68c <xTimerCreateTimerTask+0x88>)
 800d646:	4812      	ldr	r0, [pc, #72]	@ (800d690 <xTimerCreateTimerTask+0x8c>)
 800d648:	f7ff f87a 	bl	800c740 <xTaskCreateStatic>
 800d64c:	4603      	mov	r3, r0
 800d64e:	4a11      	ldr	r2, [pc, #68]	@ (800d694 <xTimerCreateTimerTask+0x90>)
 800d650:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d652:	4b10      	ldr	r3, [pc, #64]	@ (800d694 <xTimerCreateTimerTask+0x90>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d65a:	2301      	movs	r3, #1
 800d65c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10b      	bne.n	800d67c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	613b      	str	r3, [r7, #16]
}
 800d676:	bf00      	nop
 800d678:	bf00      	nop
 800d67a:	e7fd      	b.n	800d678 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d67c:	697b      	ldr	r3, [r7, #20]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	24032bd4 	.word	0x24032bd4
 800d68c:	08018b64 	.word	0x08018b64
 800d690:	0800d7d1 	.word	0x0800d7d1
 800d694:	24032bd8 	.word	0x24032bd8

0800d698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08a      	sub	sp, #40	@ 0x28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10b      	bne.n	800d6c8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	623b      	str	r3, [r7, #32]
}
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	e7fd      	b.n	800d6c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6c8:	4b19      	ldr	r3, [pc, #100]	@ (800d730 <xTimerGenericCommand+0x98>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d02a      	beq.n	800d726 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	dc18      	bgt.n	800d714 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6e2:	f7ff fead 	bl	800d440 <xTaskGetSchedulerState>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d109      	bne.n	800d700 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6ec:	4b10      	ldr	r3, [pc, #64]	@ (800d730 <xTimerGenericCommand+0x98>)
 800d6ee:	6818      	ldr	r0, [r3, #0]
 800d6f0:	f107 0110 	add.w	r1, r7, #16
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6f8:	f7fe fc32 	bl	800bf60 <xQueueGenericSend>
 800d6fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6fe:	e012      	b.n	800d726 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d700:	4b0b      	ldr	r3, [pc, #44]	@ (800d730 <xTimerGenericCommand+0x98>)
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	f107 0110 	add.w	r1, r7, #16
 800d708:	2300      	movs	r3, #0
 800d70a:	2200      	movs	r2, #0
 800d70c:	f7fe fc28 	bl	800bf60 <xQueueGenericSend>
 800d710:	6278      	str	r0, [r7, #36]	@ 0x24
 800d712:	e008      	b.n	800d726 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d714:	4b06      	ldr	r3, [pc, #24]	@ (800d730 <xTimerGenericCommand+0x98>)
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	f107 0110 	add.w	r1, r7, #16
 800d71c:	2300      	movs	r3, #0
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	f7fe fd20 	bl	800c164 <xQueueGenericSendFromISR>
 800d724:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3728      	adds	r7, #40	@ 0x28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	24032bd4 	.word	0x24032bd4

0800d734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af02      	add	r7, sp, #8
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d73e:	4b23      	ldr	r3, [pc, #140]	@ (800d7cc <prvProcessExpiredTimer+0x98>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fad3 	bl	800bcf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d023      	beq.n	800d7a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	699a      	ldr	r2, [r3, #24]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	18d1      	adds	r1, r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	6978      	ldr	r0, [r7, #20]
 800d76e:	f000 f8d5 	bl	800d91c <prvInsertTimerInActiveList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d020      	beq.n	800d7ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d778:	2300      	movs	r3, #0
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	2300      	movs	r3, #0
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	2100      	movs	r1, #0
 800d782:	6978      	ldr	r0, [r7, #20]
 800d784:	f7ff ff88 	bl	800d698 <xTimerGenericCommand>
 800d788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d114      	bne.n	800d7ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	60fb      	str	r3, [r7, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	bf00      	nop
 800d7a6:	e7fd      	b.n	800d7a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7ae:	f023 0301 	bic.w	r3, r3, #1
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	6978      	ldr	r0, [r7, #20]
 800d7c0:	4798      	blx	r3
}
 800d7c2:	bf00      	nop
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	24032bcc 	.word	0x24032bcc

0800d7d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7d8:	f107 0308 	add.w	r3, r7, #8
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f859 	bl	800d894 <prvGetNextExpireTime>
 800d7e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f000 f805 	bl	800d7f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7ee:	f000 f8d7 	bl	800d9a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7f2:	bf00      	nop
 800d7f4:	e7f0      	b.n	800d7d8 <prvTimerTask+0x8>
	...

0800d7f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d802:	f7ff fa01 	bl	800cc08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d806:	f107 0308 	add.w	r3, r7, #8
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 f866 	bl	800d8dc <prvSampleTimeNow>
 800d810:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d130      	bne.n	800d87a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10a      	bne.n	800d834 <prvProcessTimerOrBlockTask+0x3c>
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	429a      	cmp	r2, r3
 800d824:	d806      	bhi.n	800d834 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d826:	f7ff f9fd 	bl	800cc24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d82a:	68f9      	ldr	r1, [r7, #12]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff ff81 	bl	800d734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d832:	e024      	b.n	800d87e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d008      	beq.n	800d84c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d83a:	4b13      	ldr	r3, [pc, #76]	@ (800d888 <prvProcessTimerOrBlockTask+0x90>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <prvProcessTimerOrBlockTask+0x50>
 800d844:	2301      	movs	r3, #1
 800d846:	e000      	b.n	800d84a <prvProcessTimerOrBlockTask+0x52>
 800d848:	2300      	movs	r3, #0
 800d84a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d84c:	4b0f      	ldr	r3, [pc, #60]	@ (800d88c <prvProcessTimerOrBlockTask+0x94>)
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	4619      	mov	r1, r3
 800d85a:	f7fe ff3d 	bl	800c6d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d85e:	f7ff f9e1 	bl	800cc24 <xTaskResumeAll>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10a      	bne.n	800d87e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d868:	4b09      	ldr	r3, [pc, #36]	@ (800d890 <prvProcessTimerOrBlockTask+0x98>)
 800d86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	f3bf 8f6f 	isb	sy
}
 800d878:	e001      	b.n	800d87e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d87a:	f7ff f9d3 	bl	800cc24 <xTaskResumeAll>
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	24032bd0 	.word	0x24032bd0
 800d88c:	24032bd4 	.word	0x24032bd4
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d89c:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d8 <prvGetNextExpireTime+0x44>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <prvGetNextExpireTime+0x16>
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	e000      	b.n	800d8ac <prvGetNextExpireTime+0x18>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d105      	bne.n	800d8c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8b8:	4b07      	ldr	r3, [pc, #28]	@ (800d8d8 <prvGetNextExpireTime+0x44>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	e001      	b.n	800d8c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	24032bcc 	.word	0x24032bcc

0800d8dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8e4:	f7ff fa3c 	bl	800cd60 <xTaskGetTickCount>
 800d8e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d918 <prvSampleTimeNow+0x3c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d205      	bcs.n	800d900 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8f4:	f000 f93a 	bl	800db6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	e002      	b.n	800d906 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d906:	4a04      	ldr	r2, [pc, #16]	@ (800d918 <prvSampleTimeNow+0x3c>)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d90c:	68fb      	ldr	r3, [r7, #12]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	24032bdc 	.word	0x24032bdc

0800d91c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d812      	bhi.n	800d968 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	1ad2      	subs	r2, r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d302      	bcc.n	800d956 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d950:	2301      	movs	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	e01b      	b.n	800d98e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d956:	4b10      	ldr	r3, [pc, #64]	@ (800d998 <prvInsertTimerInActiveList+0x7c>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f7fe f990 	bl	800bc86 <vListInsert>
 800d966:	e012      	b.n	800d98e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d206      	bcs.n	800d97e <prvInsertTimerInActiveList+0x62>
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d302      	bcc.n	800d97e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d978:	2301      	movs	r3, #1
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	e007      	b.n	800d98e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d97e:	4b07      	ldr	r3, [pc, #28]	@ (800d99c <prvInsertTimerInActiveList+0x80>)
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3304      	adds	r3, #4
 800d986:	4619      	mov	r1, r3
 800d988:	4610      	mov	r0, r2
 800d98a:	f7fe f97c 	bl	800bc86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d98e:	697b      	ldr	r3, [r7, #20]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	24032bd0 	.word	0x24032bd0
 800d99c:	24032bcc 	.word	0x24032bcc

0800d9a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08e      	sub	sp, #56	@ 0x38
 800d9a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9a6:	e0ce      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	da19      	bge.n	800d9e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9ae:	1d3b      	adds	r3, r7, #4
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10b      	bne.n	800d9d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9be:	f383 8811 	msr	BASEPRI, r3
 800d9c2:	f3bf 8f6f 	isb	sy
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	61fb      	str	r3, [r7, #28]
}
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
 800d9d0:	e7fd      	b.n	800d9ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9d8:	6850      	ldr	r0, [r2, #4]
 800d9da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9dc:	6892      	ldr	r2, [r2, #8]
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f2c0 80ae 	blt.w	800db46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d004      	beq.n	800da00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fe f97c 	bl	800bcf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da00:	463b      	mov	r3, r7
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff ff6a 	bl	800d8dc <prvSampleTimeNow>
 800da08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b09      	cmp	r3, #9
 800da0e:	f200 8097 	bhi.w	800db40 <prvProcessReceivedCommands+0x1a0>
 800da12:	a201      	add	r2, pc, #4	@ (adr r2, 800da18 <prvProcessReceivedCommands+0x78>)
 800da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da18:	0800da41 	.word	0x0800da41
 800da1c:	0800da41 	.word	0x0800da41
 800da20:	0800da41 	.word	0x0800da41
 800da24:	0800dab7 	.word	0x0800dab7
 800da28:	0800dacb 	.word	0x0800dacb
 800da2c:	0800db17 	.word	0x0800db17
 800da30:	0800da41 	.word	0x0800da41
 800da34:	0800da41 	.word	0x0800da41
 800da38:	0800dab7 	.word	0x0800dab7
 800da3c:	0800dacb 	.word	0x0800dacb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da46:	f043 0301 	orr.w	r3, r3, #1
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	18d1      	adds	r1, r2, r3
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da60:	f7ff ff5c 	bl	800d91c <prvInsertTimerInActiveList>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d06c      	beq.n	800db44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da78:	f003 0304 	and.w	r3, r3, #4
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d061      	beq.n	800db44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	441a      	add	r2, r3
 800da88:	2300      	movs	r3, #0
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	2300      	movs	r3, #0
 800da8e:	2100      	movs	r1, #0
 800da90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da92:	f7ff fe01 	bl	800d698 <xTimerGenericCommand>
 800da96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d152      	bne.n	800db44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	61bb      	str	r3, [r7, #24]
}
 800dab0:	bf00      	nop
 800dab2:	bf00      	nop
 800dab4:	e7fd      	b.n	800dab2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dabc:	f023 0301 	bic.w	r3, r3, #1
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dac8:	e03d      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dacc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dad0:	f043 0301 	orr.w	r3, r3, #1
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10b      	bne.n	800db02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	617b      	str	r3, [r7, #20]
}
 800dafc:	bf00      	nop
 800dafe:	bf00      	nop
 800db00:	e7fd      	b.n	800dafe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db04:	699a      	ldr	r2, [r3, #24]
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	18d1      	adds	r1, r2, r3
 800db0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db10:	f7ff ff04 	bl	800d91c <prvInsertTimerInActiveList>
					break;
 800db14:	e017      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db1c:	f003 0302 	and.w	r3, r3, #2
 800db20:	2b00      	cmp	r3, #0
 800db22:	d103      	bne.n	800db2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db26:	f000 fbe7 	bl	800e2f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db2a:	e00c      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db32:	f023 0301 	bic.w	r3, r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db3e:	e002      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800db40:	bf00      	nop
 800db42:	e000      	b.n	800db46 <prvProcessReceivedCommands+0x1a6>
					break;
 800db44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db46:	4b08      	ldr	r3, [pc, #32]	@ (800db68 <prvProcessReceivedCommands+0x1c8>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	1d39      	adds	r1, r7, #4
 800db4c:	2200      	movs	r2, #0
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fe fba6 	bl	800c2a0 <xQueueReceive>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	f47f af26 	bne.w	800d9a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	3730      	adds	r7, #48	@ 0x30
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	24032bd4 	.word	0x24032bd4

0800db6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db72:	e049      	b.n	800dc08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db74:	4b2e      	ldr	r3, [pc, #184]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db7e:	4b2c      	ldr	r3, [pc, #176]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3304      	adds	r3, #4
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fe f8b3 	bl	800bcf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dba0:	f003 0304 	and.w	r3, r3, #4
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d02f      	beq.n	800dc08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	4413      	add	r3, r2
 800dbb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d90e      	bls.n	800dbd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbc6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fe f858 	bl	800bc86 <vListInsert>
 800dbd6:	e017      	b.n	800dc08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbd8:	2300      	movs	r3, #0
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff fd58 	bl	800d698 <xTimerGenericCommand>
 800dbe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10b      	bne.n	800dc08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	603b      	str	r3, [r7, #0]
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	e7fd      	b.n	800dc04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc08:	4b09      	ldr	r3, [pc, #36]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1b0      	bne.n	800db74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc12:	4b07      	ldr	r3, [pc, #28]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc18:	4b06      	ldr	r3, [pc, #24]	@ (800dc34 <prvSwitchTimerLists+0xc8>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a04      	ldr	r2, [pc, #16]	@ (800dc30 <prvSwitchTimerLists+0xc4>)
 800dc1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc20:	4a04      	ldr	r2, [pc, #16]	@ (800dc34 <prvSwitchTimerLists+0xc8>)
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	6013      	str	r3, [r2, #0]
}
 800dc26:	bf00      	nop
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	24032bcc 	.word	0x24032bcc
 800dc34:	24032bd0 	.word	0x24032bd0

0800dc38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc3e:	f000 f96b 	bl	800df18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc42:	4b15      	ldr	r3, [pc, #84]	@ (800dc98 <prvCheckForValidListAndQueue+0x60>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d120      	bne.n	800dc8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc4a:	4814      	ldr	r0, [pc, #80]	@ (800dc9c <prvCheckForValidListAndQueue+0x64>)
 800dc4c:	f7fd ffca 	bl	800bbe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc50:	4813      	ldr	r0, [pc, #76]	@ (800dca0 <prvCheckForValidListAndQueue+0x68>)
 800dc52:	f7fd ffc7 	bl	800bbe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc56:	4b13      	ldr	r3, [pc, #76]	@ (800dca4 <prvCheckForValidListAndQueue+0x6c>)
 800dc58:	4a10      	ldr	r2, [pc, #64]	@ (800dc9c <prvCheckForValidListAndQueue+0x64>)
 800dc5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc5c:	4b12      	ldr	r3, [pc, #72]	@ (800dca8 <prvCheckForValidListAndQueue+0x70>)
 800dc5e:	4a10      	ldr	r2, [pc, #64]	@ (800dca0 <prvCheckForValidListAndQueue+0x68>)
 800dc60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc62:	2300      	movs	r3, #0
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	4b11      	ldr	r3, [pc, #68]	@ (800dcac <prvCheckForValidListAndQueue+0x74>)
 800dc68:	4a11      	ldr	r2, [pc, #68]	@ (800dcb0 <prvCheckForValidListAndQueue+0x78>)
 800dc6a:	2110      	movs	r1, #16
 800dc6c:	200a      	movs	r0, #10
 800dc6e:	f7fe f8d7 	bl	800be20 <xQueueGenericCreateStatic>
 800dc72:	4603      	mov	r3, r0
 800dc74:	4a08      	ldr	r2, [pc, #32]	@ (800dc98 <prvCheckForValidListAndQueue+0x60>)
 800dc76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc78:	4b07      	ldr	r3, [pc, #28]	@ (800dc98 <prvCheckForValidListAndQueue+0x60>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d005      	beq.n	800dc8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc80:	4b05      	ldr	r3, [pc, #20]	@ (800dc98 <prvCheckForValidListAndQueue+0x60>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	490b      	ldr	r1, [pc, #44]	@ (800dcb4 <prvCheckForValidListAndQueue+0x7c>)
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fcfc 	bl	800c684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc8c:	f000 f976 	bl	800df7c <vPortExitCritical>
}
 800dc90:	bf00      	nop
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	24032bd4 	.word	0x24032bd4
 800dc9c:	24032ba4 	.word	0x24032ba4
 800dca0:	24032bb8 	.word	0x24032bb8
 800dca4:	24032bcc 	.word	0x24032bcc
 800dca8:	24032bd0 	.word	0x24032bd0
 800dcac:	24032c80 	.word	0x24032c80
 800dcb0:	24032be0 	.word	0x24032be0
 800dcb4:	08018b6c 	.word	0x08018b6c

0800dcb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3b04      	subs	r3, #4
 800dcc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dcd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f023 0201 	bic.w	r2, r3, #1
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3b04      	subs	r3, #4
 800dce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dce8:	4a0c      	ldr	r2, [pc, #48]	@ (800dd1c <pxPortInitialiseStack+0x64>)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3b14      	subs	r3, #20
 800dcf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3b04      	subs	r3, #4
 800dcfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f06f 0202 	mvn.w	r2, #2
 800dd06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3b20      	subs	r3, #32
 800dd0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	0800dd21 	.word	0x0800dd21

0800dd20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd2a:	4b13      	ldr	r3, [pc, #76]	@ (800dd78 <prvTaskExitError+0x58>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd32:	d00b      	beq.n	800dd4c <prvTaskExitError+0x2c>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	60fb      	str	r3, [r7, #12]
}
 800dd46:	bf00      	nop
 800dd48:	bf00      	nop
 800dd4a:	e7fd      	b.n	800dd48 <prvTaskExitError+0x28>
	__asm volatile
 800dd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	60bb      	str	r3, [r7, #8]
}
 800dd5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd60:	bf00      	nop
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0fc      	beq.n	800dd62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd68:	bf00      	nop
 800dd6a:	bf00      	nop
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	24000014 	.word	0x24000014
 800dd7c:	00000000 	.word	0x00000000

0800dd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd80:	4b07      	ldr	r3, [pc, #28]	@ (800dda0 <pxCurrentTCBConst2>)
 800dd82:	6819      	ldr	r1, [r3, #0]
 800dd84:	6808      	ldr	r0, [r1, #0]
 800dd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	f380 8809 	msr	PSP, r0
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f04f 0000 	mov.w	r0, #0
 800dd96:	f380 8811 	msr	BASEPRI, r0
 800dd9a:	4770      	bx	lr
 800dd9c:	f3af 8000 	nop.w

0800dda0 <pxCurrentTCBConst2>:
 800dda0:	240326a4 	.word	0x240326a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop

0800dda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dda8:	4808      	ldr	r0, [pc, #32]	@ (800ddcc <prvPortStartFirstTask+0x24>)
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	6800      	ldr	r0, [r0, #0]
 800ddae:	f380 8808 	msr	MSP, r0
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	f380 8814 	msr	CONTROL, r0
 800ddba:	b662      	cpsie	i
 800ddbc:	b661      	cpsie	f
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	df00      	svc	0
 800ddc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddca:	bf00      	nop
 800ddcc:	e000ed08 	.word	0xe000ed08

0800ddd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddd6:	4b47      	ldr	r3, [pc, #284]	@ (800def4 <xPortStartScheduler+0x124>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a47      	ldr	r2, [pc, #284]	@ (800def8 <xPortStartScheduler+0x128>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d10b      	bne.n	800ddf8 <xPortStartScheduler+0x28>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	613b      	str	r3, [r7, #16]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddf8:	4b3e      	ldr	r3, [pc, #248]	@ (800def4 <xPortStartScheduler+0x124>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a3f      	ldr	r2, [pc, #252]	@ (800defc <xPortStartScheduler+0x12c>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d10b      	bne.n	800de1a <xPortStartScheduler+0x4a>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	60fb      	str	r3, [r7, #12]
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop
 800de18:	e7fd      	b.n	800de16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de1a:	4b39      	ldr	r3, [pc, #228]	@ (800df00 <xPortStartScheduler+0x130>)
 800de1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	22ff      	movs	r2, #255	@ 0xff
 800de2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	b2db      	uxtb	r3, r3
 800de32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de34:	78fb      	ldrb	r3, [r7, #3]
 800de36:	b2db      	uxtb	r3, r3
 800de38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	4b31      	ldr	r3, [pc, #196]	@ (800df04 <xPortStartScheduler+0x134>)
 800de40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de42:	4b31      	ldr	r3, [pc, #196]	@ (800df08 <xPortStartScheduler+0x138>)
 800de44:	2207      	movs	r2, #7
 800de46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de48:	e009      	b.n	800de5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de4a:	4b2f      	ldr	r3, [pc, #188]	@ (800df08 <xPortStartScheduler+0x138>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3b01      	subs	r3, #1
 800de50:	4a2d      	ldr	r2, [pc, #180]	@ (800df08 <xPortStartScheduler+0x138>)
 800de52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de54:	78fb      	ldrb	r3, [r7, #3]
 800de56:	b2db      	uxtb	r3, r3
 800de58:	005b      	lsls	r3, r3, #1
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de5e:	78fb      	ldrb	r3, [r7, #3]
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de66:	2b80      	cmp	r3, #128	@ 0x80
 800de68:	d0ef      	beq.n	800de4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de6a:	4b27      	ldr	r3, [pc, #156]	@ (800df08 <xPortStartScheduler+0x138>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f1c3 0307 	rsb	r3, r3, #7
 800de72:	2b04      	cmp	r3, #4
 800de74:	d00b      	beq.n	800de8e <xPortStartScheduler+0xbe>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	60bb      	str	r3, [r7, #8]
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	e7fd      	b.n	800de8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de8e:	4b1e      	ldr	r3, [pc, #120]	@ (800df08 <xPortStartScheduler+0x138>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	021b      	lsls	r3, r3, #8
 800de94:	4a1c      	ldr	r2, [pc, #112]	@ (800df08 <xPortStartScheduler+0x138>)
 800de96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de98:	4b1b      	ldr	r3, [pc, #108]	@ (800df08 <xPortStartScheduler+0x138>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dea0:	4a19      	ldr	r2, [pc, #100]	@ (800df08 <xPortStartScheduler+0x138>)
 800dea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deac:	4b17      	ldr	r3, [pc, #92]	@ (800df0c <xPortStartScheduler+0x13c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a16      	ldr	r2, [pc, #88]	@ (800df0c <xPortStartScheduler+0x13c>)
 800deb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800deb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800deb8:	4b14      	ldr	r3, [pc, #80]	@ (800df0c <xPortStartScheduler+0x13c>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a13      	ldr	r2, [pc, #76]	@ (800df0c <xPortStartScheduler+0x13c>)
 800debe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dec4:	f000 f8da 	bl	800e07c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dec8:	4b11      	ldr	r3, [pc, #68]	@ (800df10 <xPortStartScheduler+0x140>)
 800deca:	2200      	movs	r2, #0
 800decc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dece:	f000 f8f9 	bl	800e0c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ded2:	4b10      	ldr	r3, [pc, #64]	@ (800df14 <xPortStartScheduler+0x144>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a0f      	ldr	r2, [pc, #60]	@ (800df14 <xPortStartScheduler+0x144>)
 800ded8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dedc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dede:	f7ff ff63 	bl	800dda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dee2:	f7ff f807 	bl	800cef4 <vTaskSwitchContext>
	prvTaskExitError();
 800dee6:	f7ff ff1b 	bl	800dd20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	e000ed00 	.word	0xe000ed00
 800def8:	410fc271 	.word	0x410fc271
 800defc:	410fc270 	.word	0x410fc270
 800df00:	e000e400 	.word	0xe000e400
 800df04:	24032cd0 	.word	0x24032cd0
 800df08:	24032cd4 	.word	0x24032cd4
 800df0c:	e000ed20 	.word	0xe000ed20
 800df10:	24000014 	.word	0x24000014
 800df14:	e000ef34 	.word	0xe000ef34

0800df18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	607b      	str	r3, [r7, #4]
}
 800df30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df32:	4b10      	ldr	r3, [pc, #64]	@ (800df74 <vPortEnterCritical+0x5c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	4a0e      	ldr	r2, [pc, #56]	@ (800df74 <vPortEnterCritical+0x5c>)
 800df3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df3c:	4b0d      	ldr	r3, [pc, #52]	@ (800df74 <vPortEnterCritical+0x5c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d110      	bne.n	800df66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df44:	4b0c      	ldr	r3, [pc, #48]	@ (800df78 <vPortEnterCritical+0x60>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00b      	beq.n	800df66 <vPortEnterCritical+0x4e>
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	603b      	str	r3, [r7, #0]
}
 800df60:	bf00      	nop
 800df62:	bf00      	nop
 800df64:	e7fd      	b.n	800df62 <vPortEnterCritical+0x4a>
	}
}
 800df66:	bf00      	nop
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	24000014 	.word	0x24000014
 800df78:	e000ed04 	.word	0xe000ed04

0800df7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df82:	4b12      	ldr	r3, [pc, #72]	@ (800dfcc <vPortExitCritical+0x50>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10b      	bne.n	800dfa2 <vPortExitCritical+0x26>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	607b      	str	r3, [r7, #4]
}
 800df9c:	bf00      	nop
 800df9e:	bf00      	nop
 800dfa0:	e7fd      	b.n	800df9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800dfcc <vPortExitCritical+0x50>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	4a08      	ldr	r2, [pc, #32]	@ (800dfcc <vPortExitCritical+0x50>)
 800dfaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfac:	4b07      	ldr	r3, [pc, #28]	@ (800dfcc <vPortExitCritical+0x50>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d105      	bne.n	800dfc0 <vPortExitCritical+0x44>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	f383 8811 	msr	BASEPRI, r3
}
 800dfbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	24000014 	.word	0x24000014

0800dfd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfd0:	f3ef 8009 	mrs	r0, PSP
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	4b15      	ldr	r3, [pc, #84]	@ (800e030 <pxCurrentTCBConst>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	f01e 0f10 	tst.w	lr, #16
 800dfe0:	bf08      	it	eq
 800dfe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfea:	6010      	str	r0, [r2, #0]
 800dfec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dff4:	f380 8811 	msr	BASEPRI, r0
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f7fe ff78 	bl	800cef4 <vTaskSwitchContext>
 800e004:	f04f 0000 	mov.w	r0, #0
 800e008:	f380 8811 	msr	BASEPRI, r0
 800e00c:	bc09      	pop	{r0, r3}
 800e00e:	6819      	ldr	r1, [r3, #0]
 800e010:	6808      	ldr	r0, [r1, #0]
 800e012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e016:	f01e 0f10 	tst.w	lr, #16
 800e01a:	bf08      	it	eq
 800e01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e020:	f380 8809 	msr	PSP, r0
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	f3af 8000 	nop.w

0800e030 <pxCurrentTCBConst>:
 800e030:	240326a4 	.word	0x240326a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop

0800e038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	607b      	str	r3, [r7, #4]
}
 800e050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e052:	f7fe fe95 	bl	800cd80 <xTaskIncrementTick>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d003      	beq.n	800e064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e05c:	4b06      	ldr	r3, [pc, #24]	@ (800e078 <xPortSysTickHandler+0x40>)
 800e05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	2300      	movs	r3, #0
 800e066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	f383 8811 	msr	BASEPRI, r3
}
 800e06e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e070:	bf00      	nop
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	e000ed04 	.word	0xe000ed04

0800e07c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e07c:	b480      	push	{r7}
 800e07e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e080:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b0 <vPortSetupTimerInterrupt+0x34>)
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e086:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <vPortSetupTimerInterrupt+0x38>)
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e08c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b8 <vPortSetupTimerInterrupt+0x3c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a0a      	ldr	r2, [pc, #40]	@ (800e0bc <vPortSetupTimerInterrupt+0x40>)
 800e092:	fba2 2303 	umull	r2, r3, r2, r3
 800e096:	099b      	lsrs	r3, r3, #6
 800e098:	4a09      	ldr	r2, [pc, #36]	@ (800e0c0 <vPortSetupTimerInterrupt+0x44>)
 800e09a:	3b01      	subs	r3, #1
 800e09c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e09e:	4b04      	ldr	r3, [pc, #16]	@ (800e0b0 <vPortSetupTimerInterrupt+0x34>)
 800e0a0:	2207      	movs	r2, #7
 800e0a2:	601a      	str	r2, [r3, #0]
}
 800e0a4:	bf00      	nop
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	e000e010 	.word	0xe000e010
 800e0b4:	e000e018 	.word	0xe000e018
 800e0b8:	24000004 	.word	0x24000004
 800e0bc:	10624dd3 	.word	0x10624dd3
 800e0c0:	e000e014 	.word	0xe000e014

0800e0c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e0d4 <vPortEnableVFP+0x10>
 800e0c8:	6801      	ldr	r1, [r0, #0]
 800e0ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e0ce:	6001      	str	r1, [r0, #0]
 800e0d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0d2:	bf00      	nop
 800e0d4:	e000ed88 	.word	0xe000ed88

0800e0d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0de:	f3ef 8305 	mrs	r3, IPSR
 800e0e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b0f      	cmp	r3, #15
 800e0e8:	d915      	bls.n	800e116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0ea:	4a18      	ldr	r2, [pc, #96]	@ (800e14c <vPortValidateInterruptPriority+0x74>)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0f4:	4b16      	ldr	r3, [pc, #88]	@ (800e150 <vPortValidateInterruptPriority+0x78>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	7afa      	ldrb	r2, [r7, #11]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d20b      	bcs.n	800e116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	607b      	str	r3, [r7, #4]
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	e7fd      	b.n	800e112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e116:	4b0f      	ldr	r3, [pc, #60]	@ (800e154 <vPortValidateInterruptPriority+0x7c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e11e:	4b0e      	ldr	r3, [pc, #56]	@ (800e158 <vPortValidateInterruptPriority+0x80>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d90b      	bls.n	800e13e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	603b      	str	r3, [r7, #0]
}
 800e138:	bf00      	nop
 800e13a:	bf00      	nop
 800e13c:	e7fd      	b.n	800e13a <vPortValidateInterruptPriority+0x62>
	}
 800e13e:	bf00      	nop
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	e000e3f0 	.word	0xe000e3f0
 800e150:	24032cd0 	.word	0x24032cd0
 800e154:	e000ed0c 	.word	0xe000ed0c
 800e158:	24032cd4 	.word	0x24032cd4

0800e15c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08a      	sub	sp, #40	@ 0x28
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e164:	2300      	movs	r3, #0
 800e166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e168:	f7fe fd4e 	bl	800cc08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e16c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2e0 <pvPortMalloc+0x184>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d101      	bne.n	800e178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e174:	f000 f924 	bl	800e3c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e178:	4b5a      	ldr	r3, [pc, #360]	@ (800e2e4 <pvPortMalloc+0x188>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4013      	ands	r3, r2
 800e180:	2b00      	cmp	r3, #0
 800e182:	f040 8095 	bne.w	800e2b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d01e      	beq.n	800e1ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e18c:	2208      	movs	r2, #8
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4413      	add	r3, r2
 800e192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f003 0307 	and.w	r3, r3, #7
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d015      	beq.n	800e1ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f023 0307 	bic.w	r3, r3, #7
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f003 0307 	and.w	r3, r3, #7
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <pvPortMalloc+0x6e>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	617b      	str	r3, [r7, #20]
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop
 800e1c8:	e7fd      	b.n	800e1c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d06f      	beq.n	800e2b0 <pvPortMalloc+0x154>
 800e1d0:	4b45      	ldr	r3, [pc, #276]	@ (800e2e8 <pvPortMalloc+0x18c>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d86a      	bhi.n	800e2b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1da:	4b44      	ldr	r3, [pc, #272]	@ (800e2ec <pvPortMalloc+0x190>)
 800e1dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1de:	4b43      	ldr	r3, [pc, #268]	@ (800e2ec <pvPortMalloc+0x190>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1e4:	e004      	b.n	800e1f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d903      	bls.n	800e202 <pvPortMalloc+0xa6>
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1f1      	bne.n	800e1e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e202:	4b37      	ldr	r3, [pc, #220]	@ (800e2e0 <pvPortMalloc+0x184>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e208:	429a      	cmp	r2, r3
 800e20a:	d051      	beq.n	800e2b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2208      	movs	r2, #8
 800e212:	4413      	add	r3, r2
 800e214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e220:	685a      	ldr	r2, [r3, #4]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	1ad2      	subs	r2, r2, r3
 800e226:	2308      	movs	r3, #8
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d920      	bls.n	800e270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4413      	add	r3, r2
 800e234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	f003 0307 	and.w	r3, r3, #7
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00b      	beq.n	800e258 <pvPortMalloc+0xfc>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	613b      	str	r3, [r7, #16]
}
 800e252:	bf00      	nop
 800e254:	bf00      	nop
 800e256:	e7fd      	b.n	800e254 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e26a:	69b8      	ldr	r0, [r7, #24]
 800e26c:	f000 f90c 	bl	800e488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e270:	4b1d      	ldr	r3, [pc, #116]	@ (800e2e8 <pvPortMalloc+0x18c>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	4a1b      	ldr	r2, [pc, #108]	@ (800e2e8 <pvPortMalloc+0x18c>)
 800e27c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e27e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2e8 <pvPortMalloc+0x18c>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	4b1b      	ldr	r3, [pc, #108]	@ (800e2f0 <pvPortMalloc+0x194>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	429a      	cmp	r2, r3
 800e288:	d203      	bcs.n	800e292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e28a:	4b17      	ldr	r3, [pc, #92]	@ (800e2e8 <pvPortMalloc+0x18c>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a18      	ldr	r2, [pc, #96]	@ (800e2f0 <pvPortMalloc+0x194>)
 800e290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	4b13      	ldr	r3, [pc, #76]	@ (800e2e4 <pvPortMalloc+0x188>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	431a      	orrs	r2, r3
 800e29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2a6:	4b13      	ldr	r3, [pc, #76]	@ (800e2f4 <pvPortMalloc+0x198>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	4a11      	ldr	r2, [pc, #68]	@ (800e2f4 <pvPortMalloc+0x198>)
 800e2ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2b0:	f7fe fcb8 	bl	800cc24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	f003 0307 	and.w	r3, r3, #7
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00b      	beq.n	800e2d6 <pvPortMalloc+0x17a>
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	60fb      	str	r3, [r7, #12]
}
 800e2d0:	bf00      	nop
 800e2d2:	bf00      	nop
 800e2d4:	e7fd      	b.n	800e2d2 <pvPortMalloc+0x176>
	return pvReturn;
 800e2d6:	69fb      	ldr	r3, [r7, #28]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3728      	adds	r7, #40	@ 0x28
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	24063a20 	.word	0x24063a20
 800e2e4:	24063a34 	.word	0x24063a34
 800e2e8:	24063a24 	.word	0x24063a24
 800e2ec:	24063a18 	.word	0x24063a18
 800e2f0:	24063a28 	.word	0x24063a28
 800e2f4:	24063a2c 	.word	0x24063a2c

0800e2f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d04f      	beq.n	800e3aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e30a:	2308      	movs	r3, #8
 800e30c:	425b      	negs	r3, r3
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	4413      	add	r3, r2
 800e312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	4b25      	ldr	r3, [pc, #148]	@ (800e3b4 <vPortFree+0xbc>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4013      	ands	r3, r2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10b      	bne.n	800e33e <vPortFree+0x46>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60fb      	str	r3, [r7, #12]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <vPortFree+0x66>
	__asm volatile
 800e346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	60bb      	str	r3, [r7, #8]
}
 800e358:	bf00      	nop
 800e35a:	bf00      	nop
 800e35c:	e7fd      	b.n	800e35a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	4b14      	ldr	r3, [pc, #80]	@ (800e3b4 <vPortFree+0xbc>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4013      	ands	r3, r2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d01e      	beq.n	800e3aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d11a      	bne.n	800e3aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b4 <vPortFree+0xbc>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	43db      	mvns	r3, r3
 800e37e:	401a      	ands	r2, r3
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e384:	f7fe fc40 	bl	800cc08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	685a      	ldr	r2, [r3, #4]
 800e38c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b8 <vPortFree+0xc0>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4413      	add	r3, r2
 800e392:	4a09      	ldr	r2, [pc, #36]	@ (800e3b8 <vPortFree+0xc0>)
 800e394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e396:	6938      	ldr	r0, [r7, #16]
 800e398:	f000 f876 	bl	800e488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e39c:	4b07      	ldr	r3, [pc, #28]	@ (800e3bc <vPortFree+0xc4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	4a06      	ldr	r2, [pc, #24]	@ (800e3bc <vPortFree+0xc4>)
 800e3a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3a6:	f7fe fc3d 	bl	800cc24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3aa:	bf00      	nop
 800e3ac:	3718      	adds	r7, #24
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	24063a34 	.word	0x24063a34
 800e3b8:	24063a24 	.word	0x24063a24
 800e3bc:	24063a30 	.word	0x24063a30

0800e3c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3c6:	4b29      	ldr	r3, [pc, #164]	@ (800e46c <prvHeapInit+0xac>)
 800e3c8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3ca:	4b29      	ldr	r3, [pc, #164]	@ (800e470 <prvHeapInit+0xb0>)
 800e3cc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f003 0307 	and.w	r3, r3, #7
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00c      	beq.n	800e3f2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	3307      	adds	r3, #7
 800e3dc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f023 0307 	bic.w	r3, r3, #7
 800e3e4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	1ad3      	subs	r3, r2, r3
 800e3ec:	4a20      	ldr	r2, [pc, #128]	@ (800e470 <prvHeapInit+0xb0>)
 800e3ee:	4413      	add	r3, r2
 800e3f0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800e474 <prvHeapInit+0xb4>)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e474 <prvHeapInit+0xb4>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	4413      	add	r3, r2
 800e408:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e40a:	2208      	movs	r2, #8
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f023 0307 	bic.w	r3, r3, #7
 800e418:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	4a16      	ldr	r2, [pc, #88]	@ (800e478 <prvHeapInit+0xb8>)
 800e41e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e420:	4b15      	ldr	r3, [pc, #84]	@ (800e478 <prvHeapInit+0xb8>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2200      	movs	r2, #0
 800e426:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e428:	4b13      	ldr	r3, [pc, #76]	@ (800e478 <prvHeapInit+0xb8>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	1ad2      	subs	r2, r2, r3
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e43e:	4b0e      	ldr	r3, [pc, #56]	@ (800e478 <prvHeapInit+0xb8>)
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	4a0c      	ldr	r2, [pc, #48]	@ (800e47c <prvHeapInit+0xbc>)
 800e44c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	4a0b      	ldr	r2, [pc, #44]	@ (800e480 <prvHeapInit+0xc0>)
 800e454:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e456:	4b0b      	ldr	r3, [pc, #44]	@ (800e484 <prvHeapInit+0xc4>)
 800e458:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e45c:	601a      	str	r2, [r3, #0]
}
 800e45e:	bf00      	nop
 800e460:	3714      	adds	r7, #20
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	00030d40 	.word	0x00030d40
 800e470:	24032cd8 	.word	0x24032cd8
 800e474:	24063a18 	.word	0x24063a18
 800e478:	24063a20 	.word	0x24063a20
 800e47c:	24063a28 	.word	0x24063a28
 800e480:	24063a24 	.word	0x24063a24
 800e484:	24063a34 	.word	0x24063a34

0800e488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e490:	4b28      	ldr	r3, [pc, #160]	@ (800e534 <prvInsertBlockIntoFreeList+0xac>)
 800e492:	60fb      	str	r3, [r7, #12]
 800e494:	e002      	b.n	800e49c <prvInsertBlockIntoFreeList+0x14>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d8f7      	bhi.n	800e496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d108      	bne.n	800e4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	441a      	add	r2, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	441a      	add	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d118      	bne.n	800e510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	4b15      	ldr	r3, [pc, #84]	@ (800e538 <prvInsertBlockIntoFreeList+0xb0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d00d      	beq.n	800e506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	441a      	add	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	e008      	b.n	800e518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e506:	4b0c      	ldr	r3, [pc, #48]	@ (800e538 <prvInsertBlockIntoFreeList+0xb0>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	601a      	str	r2, [r3, #0]
 800e50e:	e003      	b.n	800e518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d002      	beq.n	800e526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e526:	bf00      	nop
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	24063a18 	.word	0x24063a18
 800e538:	24063a20 	.word	0x24063a20

0800e53c <rcl_get_zero_initialized_init_options>:
 800e53c:	2000      	movs	r0, #0
 800e53e:	4770      	bx	lr

0800e540 <rcl_init_options_init>:
 800e540:	b084      	sub	sp, #16
 800e542:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e544:	b097      	sub	sp, #92	@ 0x5c
 800e546:	ae1d      	add	r6, sp, #116	@ 0x74
 800e548:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d058      	beq.n	800e602 <rcl_init_options_init+0xc2>
 800e550:	6803      	ldr	r3, [r0, #0]
 800e552:	4605      	mov	r5, r0
 800e554:	b133      	cbz	r3, 800e564 <rcl_init_options_init+0x24>
 800e556:	2464      	movs	r4, #100	@ 0x64
 800e558:	4620      	mov	r0, r4
 800e55a:	b017      	add	sp, #92	@ 0x5c
 800e55c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e560:	b004      	add	sp, #16
 800e562:	4770      	bx	lr
 800e564:	4630      	mov	r0, r6
 800e566:	f000 facf 	bl	800eb08 <rcutils_allocator_is_valid>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d049      	beq.n	800e602 <rcl_init_options_init+0xc2>
 800e56e:	46b4      	mov	ip, r6
 800e570:	ac11      	add	r4, sp, #68	@ 0x44
 800e572:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e578:	f8dc 3000 	ldr.w	r3, [ip]
 800e57c:	2050      	movs	r0, #80	@ 0x50
 800e57e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e584:	4798      	blx	r3
 800e586:	4604      	mov	r4, r0
 800e588:	6028      	str	r0, [r5, #0]
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d03b      	beq.n	800e606 <rcl_init_options_init+0xc6>
 800e58e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e592:	4686      	mov	lr, r0
 800e594:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e598:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e59c:	f8dc 3000 	ldr.w	r3, [ip]
 800e5a0:	a802      	add	r0, sp, #8
 800e5a2:	f8ce 3000 	str.w	r3, [lr]
 800e5a6:	f000 faef 	bl	800eb88 <rmw_get_zero_initialized_init_options>
 800e5aa:	f10d 0e08 	add.w	lr, sp, #8
 800e5ae:	f104 0c18 	add.w	ip, r4, #24
 800e5b2:	682f      	ldr	r7, [r5, #0]
 800e5b4:	ac20      	add	r4, sp, #128	@ 0x80
 800e5b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5ce:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e5d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e5d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5da:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e5de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e5e2:	f107 0018 	add.w	r0, r7, #24
 800e5e6:	f000 fafd 	bl	800ebe4 <rmw_init_options_init>
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d0b3      	beq.n	800e558 <rcl_init_options_init+0x18>
 800e5f0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e5f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e5f4:	6828      	ldr	r0, [r5, #0]
 800e5f6:	4798      	blx	r3
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f005 ffa5 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 800e5fe:	4604      	mov	r4, r0
 800e600:	e7aa      	b.n	800e558 <rcl_init_options_init+0x18>
 800e602:	240b      	movs	r4, #11
 800e604:	e7a8      	b.n	800e558 <rcl_init_options_init+0x18>
 800e606:	240a      	movs	r4, #10
 800e608:	e7a6      	b.n	800e558 <rcl_init_options_init+0x18>
 800e60a:	bf00      	nop

0800e60c <rcl_init_options_fini>:
 800e60c:	b530      	push	{r4, r5, lr}
 800e60e:	b087      	sub	sp, #28
 800e610:	b1f0      	cbz	r0, 800e650 <rcl_init_options_fini+0x44>
 800e612:	6803      	ldr	r3, [r0, #0]
 800e614:	4604      	mov	r4, r0
 800e616:	b1db      	cbz	r3, 800e650 <rcl_init_options_fini+0x44>
 800e618:	469c      	mov	ip, r3
 800e61a:	f10d 0e04 	add.w	lr, sp, #4
 800e61e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e622:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e626:	f8dc 3000 	ldr.w	r3, [ip]
 800e62a:	a801      	add	r0, sp, #4
 800e62c:	f8ce 3000 	str.w	r3, [lr]
 800e630:	f000 fa6a 	bl	800eb08 <rcutils_allocator_is_valid>
 800e634:	b160      	cbz	r0, 800e650 <rcl_init_options_fini+0x44>
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	3018      	adds	r0, #24
 800e63a:	f000 fb8d 	bl	800ed58 <rmw_init_options_fini>
 800e63e:	4605      	mov	r5, r0
 800e640:	b950      	cbnz	r0, 800e658 <rcl_init_options_fini+0x4c>
 800e642:	6820      	ldr	r0, [r4, #0]
 800e644:	9b02      	ldr	r3, [sp, #8]
 800e646:	9905      	ldr	r1, [sp, #20]
 800e648:	4798      	blx	r3
 800e64a:	4628      	mov	r0, r5
 800e64c:	b007      	add	sp, #28
 800e64e:	bd30      	pop	{r4, r5, pc}
 800e650:	250b      	movs	r5, #11
 800e652:	4628      	mov	r0, r5
 800e654:	b007      	add	sp, #28
 800e656:	bd30      	pop	{r4, r5, pc}
 800e658:	f005 ff76 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 800e65c:	4605      	mov	r5, r0
 800e65e:	e7f8      	b.n	800e652 <rcl_init_options_fini+0x46>

0800e660 <rcl_init_options_copy>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	b094      	sub	sp, #80	@ 0x50
 800e666:	2800      	cmp	r0, #0
 800e668:	d05b      	beq.n	800e722 <rcl_init_options_copy+0xc2>
 800e66a:	4604      	mov	r4, r0
 800e66c:	6800      	ldr	r0, [r0, #0]
 800e66e:	2800      	cmp	r0, #0
 800e670:	d057      	beq.n	800e722 <rcl_init_options_copy+0xc2>
 800e672:	460e      	mov	r6, r1
 800e674:	f000 fa48 	bl	800eb08 <rcutils_allocator_is_valid>
 800e678:	2e00      	cmp	r6, #0
 800e67a:	d052      	beq.n	800e722 <rcl_init_options_copy+0xc2>
 800e67c:	f080 0001 	eor.w	r0, r0, #1
 800e680:	b2c0      	uxtb	r0, r0
 800e682:	2800      	cmp	r0, #0
 800e684:	d14d      	bne.n	800e722 <rcl_init_options_copy+0xc2>
 800e686:	6833      	ldr	r3, [r6, #0]
 800e688:	b123      	cbz	r3, 800e694 <rcl_init_options_copy+0x34>
 800e68a:	2464      	movs	r4, #100	@ 0x64
 800e68c:	4620      	mov	r0, r4
 800e68e:	b014      	add	sp, #80	@ 0x50
 800e690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e694:	6827      	ldr	r7, [r4, #0]
 800e696:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e698:	46bc      	mov	ip, r7
 800e69a:	f8d7 8000 	ldr.w	r8, [r7]
 800e69e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6a4:	f8dc 3000 	ldr.w	r3, [ip]
 800e6a8:	2050      	movs	r0, #80	@ 0x50
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	602b      	str	r3, [r5, #0]
 800e6ae:	47c0      	blx	r8
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	6030      	str	r0, [r6, #0]
 800e6b4:	b3d0      	cbz	r0, 800e72c <rcl_init_options_copy+0xcc>
 800e6b6:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e6ba:	4686      	mov	lr, r0
 800e6bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e6c4:	f8dc 3000 	ldr.w	r3, [ip]
 800e6c8:	4668      	mov	r0, sp
 800e6ca:	f8ce 3000 	str.w	r3, [lr]
 800e6ce:	f000 fa5b 	bl	800eb88 <rmw_get_zero_initialized_init_options>
 800e6d2:	46ee      	mov	lr, sp
 800e6d4:	f105 0c18 	add.w	ip, r5, #24
 800e6d8:	6824      	ldr	r4, [r4, #0]
 800e6da:	6835      	ldr	r5, [r6, #0]
 800e6dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e6f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e6fc:	f104 0018 	add.w	r0, r4, #24
 800e700:	f105 0118 	add.w	r1, r5, #24
 800e704:	f000 fad6 	bl	800ecb4 <rmw_init_options_copy>
 800e708:	4604      	mov	r4, r0
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0be      	beq.n	800e68c <rcl_init_options_copy+0x2c>
 800e70e:	f000 fa09 	bl	800eb24 <rcutils_get_error_string>
 800e712:	f000 fa1d 	bl	800eb50 <rcutils_reset_error>
 800e716:	4630      	mov	r0, r6
 800e718:	f7ff ff78 	bl	800e60c <rcl_init_options_fini>
 800e71c:	b140      	cbz	r0, 800e730 <rcl_init_options_copy+0xd0>
 800e71e:	4604      	mov	r4, r0
 800e720:	e7b4      	b.n	800e68c <rcl_init_options_copy+0x2c>
 800e722:	240b      	movs	r4, #11
 800e724:	4620      	mov	r0, r4
 800e726:	b014      	add	sp, #80	@ 0x50
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	240a      	movs	r4, #10
 800e72e:	e7ad      	b.n	800e68c <rcl_init_options_copy+0x2c>
 800e730:	4620      	mov	r0, r4
 800e732:	b014      	add	sp, #80	@ 0x50
 800e734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	f005 bf06 	b.w	8014548 <rcl_convert_rmw_ret_to_rcl_ret>

0800e73c <rcl_get_zero_initialized_publisher>:
 800e73c:	4b01      	ldr	r3, [pc, #4]	@ (800e744 <rcl_get_zero_initialized_publisher+0x8>)
 800e73e:	6818      	ldr	r0, [r3, #0]
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	08018be4 	.word	0x08018be4

0800e748 <rcl_publisher_init>:
 800e748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e74c:	b088      	sub	sp, #32
 800e74e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e750:	2e00      	cmp	r6, #0
 800e752:	d06b      	beq.n	800e82c <rcl_publisher_init+0xe4>
 800e754:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800e758:	4605      	mov	r5, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	4690      	mov	r8, r2
 800e75e:	4650      	mov	r0, sl
 800e760:	4699      	mov	r9, r3
 800e762:	f000 f9d1 	bl	800eb08 <rcutils_allocator_is_valid>
 800e766:	f080 0401 	eor.w	r4, r0, #1
 800e76a:	b2e4      	uxtb	r4, r4
 800e76c:	2c00      	cmp	r4, #0
 800e76e:	d15d      	bne.n	800e82c <rcl_publisher_init+0xe4>
 800e770:	2d00      	cmp	r5, #0
 800e772:	d05b      	beq.n	800e82c <rcl_publisher_init+0xe4>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	b123      	cbz	r3, 800e782 <rcl_publisher_init+0x3a>
 800e778:	2464      	movs	r4, #100	@ 0x64
 800e77a:	4620      	mov	r0, r4
 800e77c:	b008      	add	sp, #32
 800e77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e782:	4638      	mov	r0, r7
 800e784:	f006 f9de 	bl	8014b44 <rcl_node_is_valid>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d054      	beq.n	800e836 <rcl_publisher_init+0xee>
 800e78c:	f1b8 0f00 	cmp.w	r8, #0
 800e790:	d04c      	beq.n	800e82c <rcl_publisher_init+0xe4>
 800e792:	fab9 f389 	clz	r3, r9
 800e796:	095b      	lsrs	r3, r3, #5
 800e798:	f1b9 0f00 	cmp.w	r9, #0
 800e79c:	d046      	beq.n	800e82c <rcl_publisher_init+0xe4>
 800e79e:	aa07      	add	r2, sp, #28
 800e7a0:	9307      	str	r3, [sp, #28]
 800e7a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e7a6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e7aa:	9205      	str	r2, [sp, #20]
 800e7ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e7b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e7b4:	4649      	mov	r1, r9
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800e7bc:	f006 fa1a 	bl	8014bf4 <rcl_node_resolve_name>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d14f      	bne.n	800e864 <rcl_publisher_init+0x11c>
 800e7c4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e7c6:	20c8      	movs	r0, #200	@ 0xc8
 800e7c8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e7ca:	4798      	blx	r3
 800e7cc:	6028      	str	r0, [r5, #0]
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d050      	beq.n	800e874 <rcl_publisher_init+0x12c>
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	f006 f9d8 	bl	8014b88 <rcl_node_get_rmw_handle>
 800e7d8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e7dc:	4641      	mov	r1, r8
 800e7de:	9a07      	ldr	r2, [sp, #28]
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	4633      	mov	r3, r6
 800e7e4:	682c      	ldr	r4, [r5, #0]
 800e7e6:	f000 fddd 	bl	800f3a4 <rmw_create_publisher>
 800e7ea:	682b      	ldr	r3, [r5, #0]
 800e7ec:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800e7f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e7f4:	b370      	cbz	r0, 800e854 <rcl_publisher_init+0x10c>
 800e7f6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e7fa:	f000 feb7 	bl	800f56c <rmw_publisher_get_actual_qos>
 800e7fe:	682b      	ldr	r3, [r5, #0]
 800e800:	4604      	mov	r4, r0
 800e802:	b9d0      	cbnz	r0, 800e83a <rcl_publisher_init+0xf2>
 800e804:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800e808:	4631      	mov	r1, r6
 800e80a:	4618      	mov	r0, r3
 800e80c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e810:	2270      	movs	r2, #112	@ 0x70
 800e812:	f009 fa8e 	bl	8017d32 <memcpy>
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e81c:	9807      	ldr	r0, [sp, #28]
 800e81e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e820:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e822:	4798      	blx	r3
 800e824:	4620      	mov	r0, r4
 800e826:	b008      	add	sp, #32
 800e828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e82c:	240b      	movs	r4, #11
 800e82e:	4620      	mov	r0, r4
 800e830:	b008      	add	sp, #32
 800e832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e836:	24c8      	movs	r4, #200	@ 0xc8
 800e838:	e79f      	b.n	800e77a <rcl_publisher_init+0x32>
 800e83a:	b1cb      	cbz	r3, 800e870 <rcl_publisher_init+0x128>
 800e83c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e840:	b142      	cbz	r2, 800e854 <rcl_publisher_init+0x10c>
 800e842:	4638      	mov	r0, r7
 800e844:	f006 f9a0 	bl	8014b88 <rcl_node_get_rmw_handle>
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e84e:	f000 fea1 	bl	800f594 <rmw_destroy_publisher>
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	4618      	mov	r0, r3
 800e856:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e858:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e85a:	2401      	movs	r4, #1
 800e85c:	4790      	blx	r2
 800e85e:	2300      	movs	r3, #0
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	e7db      	b.n	800e81c <rcl_publisher_init+0xd4>
 800e864:	2867      	cmp	r0, #103	@ 0x67
 800e866:	d007      	beq.n	800e878 <rcl_publisher_init+0x130>
 800e868:	2869      	cmp	r0, #105	@ 0x69
 800e86a:	d005      	beq.n	800e878 <rcl_publisher_init+0x130>
 800e86c:	280a      	cmp	r0, #10
 800e86e:	d001      	beq.n	800e874 <rcl_publisher_init+0x12c>
 800e870:	2401      	movs	r4, #1
 800e872:	e7d3      	b.n	800e81c <rcl_publisher_init+0xd4>
 800e874:	240a      	movs	r4, #10
 800e876:	e7d1      	b.n	800e81c <rcl_publisher_init+0xd4>
 800e878:	2467      	movs	r4, #103	@ 0x67
 800e87a:	e7cf      	b.n	800e81c <rcl_publisher_init+0xd4>

0800e87c <rcl_publisher_get_default_options>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	4d14      	ldr	r5, [pc, #80]	@ (800e8d0 <rcl_publisher_get_default_options+0x54>)
 800e880:	b088      	sub	sp, #32
 800e882:	4604      	mov	r4, r0
 800e884:	2250      	movs	r2, #80	@ 0x50
 800e886:	4913      	ldr	r1, [pc, #76]	@ (800e8d4 <rcl_publisher_get_default_options+0x58>)
 800e888:	4628      	mov	r0, r5
 800e88a:	f009 fa52 	bl	8017d32 <memcpy>
 800e88e:	a802      	add	r0, sp, #8
 800e890:	f000 f92c 	bl	800eaec <rcutils_get_default_allocator>
 800e894:	f10d 0c08 	add.w	ip, sp, #8
 800e898:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e89c:	466e      	mov	r6, sp
 800e89e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f8ce 3000 	str.w	r3, [lr]
 800e8b0:	f000 f97a 	bl	800eba8 <rmw_get_default_publisher_options>
 800e8b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e8b8:	2270      	movs	r2, #112	@ 0x70
 800e8ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e8be:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f009 fa34 	bl	8017d32 <memcpy>
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	b008      	add	sp, #32
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	24063a38 	.word	0x24063a38
 800e8d4:	08018be8 	.word	0x08018be8

0800e8d8 <rcl_publish>:
 800e8d8:	b1f8      	cbz	r0, 800e91a <rcl_publish+0x42>
 800e8da:	6803      	ldr	r3, [r0, #0]
 800e8dc:	b570      	push	{r4, r5, r6, lr}
 800e8de:	4604      	mov	r4, r0
 800e8e0:	b1b3      	cbz	r3, 800e910 <rcl_publish+0x38>
 800e8e2:	4616      	mov	r6, r2
 800e8e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e8e8:	b192      	cbz	r2, 800e910 <rcl_publish+0x38>
 800e8ea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	f005 fe48 	bl	8014584 <rcl_context_is_valid>
 800e8f4:	b160      	cbz	r0, 800e910 <rcl_publish+0x38>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e8fc:	b140      	cbz	r0, 800e910 <rcl_publish+0x38>
 800e8fe:	b155      	cbz	r5, 800e916 <rcl_publish+0x3e>
 800e900:	4632      	mov	r2, r6
 800e902:	4629      	mov	r1, r5
 800e904:	f000 fcee 	bl	800f2e4 <rmw_publish>
 800e908:	3800      	subs	r0, #0
 800e90a:	bf18      	it	ne
 800e90c:	2001      	movne	r0, #1
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e914:	bd70      	pop	{r4, r5, r6, pc}
 800e916:	200b      	movs	r0, #11
 800e918:	bd70      	pop	{r4, r5, r6, pc}
 800e91a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e91e:	4770      	bx	lr

0800e920 <rclc_support_init_with_options>:
 800e920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e924:	b083      	sub	sp, #12
 800e926:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bf18      	it	ne
 800e92c:	2f00      	cmpne	r7, #0
 800e92e:	d027      	beq.n	800e980 <rclc_support_init_with_options+0x60>
 800e930:	4604      	mov	r4, r0
 800e932:	b328      	cbz	r0, 800e980 <rclc_support_init_with_options+0x60>
 800e934:	46e9      	mov	r9, sp
 800e936:	461d      	mov	r5, r3
 800e938:	460e      	mov	r6, r1
 800e93a:	4690      	mov	r8, r2
 800e93c:	4648      	mov	r0, r9
 800e93e:	f005 fe17 	bl	8014570 <rcl_get_zero_initialized_context>
 800e942:	462a      	mov	r2, r5
 800e944:	4623      	mov	r3, r4
 800e946:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e94a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e94e:	4641      	mov	r1, r8
 800e950:	4630      	mov	r0, r6
 800e952:	f005 fe7d 	bl	8014650 <rcl_init>
 800e956:	4605      	mov	r5, r0
 800e958:	b960      	cbnz	r0, 800e974 <rclc_support_init_with_options+0x54>
 800e95a:	463a      	mov	r2, r7
 800e95c:	f104 010c 	add.w	r1, r4, #12
 800e960:	2003      	movs	r0, #3
 800e962:	60a7      	str	r7, [r4, #8]
 800e964:	f006 fb34 	bl	8014fd0 <rcl_clock_init>
 800e968:	4605      	mov	r5, r0
 800e96a:	b918      	cbnz	r0, 800e974 <rclc_support_init_with_options+0x54>
 800e96c:	4628      	mov	r0, r5
 800e96e:	b003      	add	sp, #12
 800e970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e974:	f000 f8ec 	bl	800eb50 <rcutils_reset_error>
 800e978:	4628      	mov	r0, r5
 800e97a:	b003      	add	sp, #12
 800e97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e980:	250b      	movs	r5, #11
 800e982:	4628      	mov	r0, r5
 800e984:	b003      	add	sp, #12
 800e986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98a:	bf00      	nop

0800e98c <rclc_node_init_default>:
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bf18      	it	ne
 800e990:	2a00      	cmpne	r2, #0
 800e992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e996:	4616      	mov	r6, r2
 800e998:	bf0c      	ite	eq
 800e99a:	2201      	moveq	r2, #1
 800e99c:	2200      	movne	r2, #0
 800e99e:	b0a1      	sub	sp, #132	@ 0x84
 800e9a0:	2900      	cmp	r1, #0
 800e9a2:	bf08      	it	eq
 800e9a4:	f042 0201 	orreq.w	r2, r2, #1
 800e9a8:	bb22      	cbnz	r2, 800e9f4 <rclc_node_init_default+0x68>
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	b310      	cbz	r0, 800e9f4 <rclc_node_init_default+0x68>
 800e9ae:	f10d 0810 	add.w	r8, sp, #16
 800e9b2:	461f      	mov	r7, r3
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	f10d 0918 	add.w	r9, sp, #24
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	f005 ff70 	bl	80148a0 <rcl_get_zero_initialized_node>
 800e9c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e9c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e9c8:	4648      	mov	r0, r9
 800e9ca:	f006 f8e3 	bl	8014b94 <rcl_node_get_default_options>
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f005 ff66 	bl	80148a0 <rcl_get_zero_initialized_node>
 800e9d4:	f8cd 9000 	str.w	r9, [sp]
 800e9d8:	463b      	mov	r3, r7
 800e9da:	4632      	mov	r2, r6
 800e9dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e9e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f005 ff64 	bl	80148b4 <rcl_node_init>
 800e9ec:	b930      	cbnz	r0, 800e9fc <rclc_node_init_default+0x70>
 800e9ee:	b021      	add	sp, #132	@ 0x84
 800e9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9f4:	200b      	movs	r0, #11
 800e9f6:	b021      	add	sp, #132	@ 0x84
 800e9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9fc:	9003      	str	r0, [sp, #12]
 800e9fe:	f000 f8a7 	bl	800eb50 <rcutils_reset_error>
 800ea02:	f000 f8a5 	bl	800eb50 <rcutils_reset_error>
 800ea06:	9803      	ldr	r0, [sp, #12]
 800ea08:	b021      	add	sp, #132	@ 0x84
 800ea0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea0e:	bf00      	nop

0800ea10 <rclc_publisher_init_default>:
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	bf18      	it	ne
 800ea14:	2a00      	cmpne	r2, #0
 800ea16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1a:	4616      	mov	r6, r2
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2201      	moveq	r2, #1
 800ea20:	2200      	movne	r2, #0
 800ea22:	b0a0      	sub	sp, #128	@ 0x80
 800ea24:	2900      	cmp	r1, #0
 800ea26:	bf08      	it	eq
 800ea28:	f042 0201 	orreq.w	r2, r2, #1
 800ea2c:	bb1a      	cbnz	r2, 800ea76 <rclc_publisher_init_default+0x66>
 800ea2e:	4604      	mov	r4, r0
 800ea30:	b308      	cbz	r0, 800ea76 <rclc_publisher_init_default+0x66>
 800ea32:	f10d 0810 	add.w	r8, sp, #16
 800ea36:	461f      	mov	r7, r3
 800ea38:	460d      	mov	r5, r1
 800ea3a:	f7ff fe7f 	bl	800e73c <rcl_get_zero_initialized_publisher>
 800ea3e:	6020      	str	r0, [r4, #0]
 800ea40:	4640      	mov	r0, r8
 800ea42:	f7ff ff1b 	bl	800e87c <rcl_publisher_get_default_options>
 800ea46:	2250      	movs	r2, #80	@ 0x50
 800ea48:	490d      	ldr	r1, [pc, #52]	@ (800ea80 <rclc_publisher_init_default+0x70>)
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	f009 f971 	bl	8017d32 <memcpy>
 800ea50:	463b      	mov	r3, r7
 800ea52:	4632      	mov	r2, r6
 800ea54:	4629      	mov	r1, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	f8cd 8000 	str.w	r8, [sp]
 800ea5c:	f7ff fe74 	bl	800e748 <rcl_publisher_init>
 800ea60:	b910      	cbnz	r0, 800ea68 <rclc_publisher_init_default+0x58>
 800ea62:	b020      	add	sp, #128	@ 0x80
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea68:	9003      	str	r0, [sp, #12]
 800ea6a:	f000 f871 	bl	800eb50 <rcutils_reset_error>
 800ea6e:	9803      	ldr	r0, [sp, #12]
 800ea70:	b020      	add	sp, #128	@ 0x80
 800ea72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea76:	200b      	movs	r0, #11
 800ea78:	b020      	add	sp, #128	@ 0x80
 800ea7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea7e:	bf00      	nop
 800ea80:	08018c38 	.word	0x08018c38

0800ea84 <__default_zero_allocate>:
 800ea84:	f008 bc88 	b.w	8017398 <calloc>

0800ea88 <__default_reallocate>:
 800ea88:	f008 be14 	b.w	80176b4 <realloc>

0800ea8c <__default_deallocate>:
 800ea8c:	f008 bcf0 	b.w	8017470 <free>

0800ea90 <__default_allocate>:
 800ea90:	f008 bce6 	b.w	8017460 <malloc>

0800ea94 <rcutils_get_zero_initialized_allocator>:
 800ea94:	b510      	push	{r4, lr}
 800ea96:	4c05      	ldr	r4, [pc, #20]	@ (800eaac <rcutils_get_zero_initialized_allocator+0x18>)
 800ea98:	4686      	mov	lr, r0
 800ea9a:	4684      	mov	ip, r0
 800ea9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	4670      	mov	r0, lr
 800eaa6:	f8cc 3000 	str.w	r3, [ip]
 800eaaa:	bd10      	pop	{r4, pc}
 800eaac:	08018c88 	.word	0x08018c88

0800eab0 <rcutils_set_default_allocator>:
 800eab0:	b1a8      	cbz	r0, 800eade <rcutils_set_default_allocator+0x2e>
 800eab2:	6802      	ldr	r2, [r0, #0]
 800eab4:	b1a2      	cbz	r2, 800eae0 <rcutils_set_default_allocator+0x30>
 800eab6:	6841      	ldr	r1, [r0, #4]
 800eab8:	b1a1      	cbz	r1, 800eae4 <rcutils_set_default_allocator+0x34>
 800eaba:	b410      	push	{r4}
 800eabc:	68c4      	ldr	r4, [r0, #12]
 800eabe:	b164      	cbz	r4, 800eada <rcutils_set_default_allocator+0x2a>
 800eac0:	6880      	ldr	r0, [r0, #8]
 800eac2:	b138      	cbz	r0, 800ead4 <rcutils_set_default_allocator+0x24>
 800eac4:	4b08      	ldr	r3, [pc, #32]	@ (800eae8 <rcutils_set_default_allocator+0x38>)
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	2200      	movs	r2, #0
 800eaca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800eace:	2001      	movs	r0, #1
 800ead0:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ead4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	4620      	mov	r0, r4
 800eadc:	e7fa      	b.n	800ead4 <rcutils_set_default_allocator+0x24>
 800eade:	4770      	bx	lr
 800eae0:	4610      	mov	r0, r2
 800eae2:	4770      	bx	lr
 800eae4:	4608      	mov	r0, r1
 800eae6:	4770      	bx	lr
 800eae8:	24000018 	.word	0x24000018

0800eaec <rcutils_get_default_allocator>:
 800eaec:	b510      	push	{r4, lr}
 800eaee:	4c05      	ldr	r4, [pc, #20]	@ (800eb04 <rcutils_get_default_allocator+0x18>)
 800eaf0:	4686      	mov	lr, r0
 800eaf2:	4684      	mov	ip, r0
 800eaf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eaf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	4670      	mov	r0, lr
 800eafe:	f8cc 3000 	str.w	r3, [ip]
 800eb02:	bd10      	pop	{r4, pc}
 800eb04:	24000018 	.word	0x24000018

0800eb08 <rcutils_allocator_is_valid>:
 800eb08:	b158      	cbz	r0, 800eb22 <rcutils_allocator_is_valid+0x1a>
 800eb0a:	6803      	ldr	r3, [r0, #0]
 800eb0c:	b143      	cbz	r3, 800eb20 <rcutils_allocator_is_valid+0x18>
 800eb0e:	6843      	ldr	r3, [r0, #4]
 800eb10:	b133      	cbz	r3, 800eb20 <rcutils_allocator_is_valid+0x18>
 800eb12:	68c3      	ldr	r3, [r0, #12]
 800eb14:	b123      	cbz	r3, 800eb20 <rcutils_allocator_is_valid+0x18>
 800eb16:	6880      	ldr	r0, [r0, #8]
 800eb18:	3800      	subs	r0, #0
 800eb1a:	bf18      	it	ne
 800eb1c:	2001      	movne	r0, #1
 800eb1e:	4770      	bx	lr
 800eb20:	4618      	mov	r0, r3
 800eb22:	4770      	bx	lr

0800eb24 <rcutils_get_error_string>:
 800eb24:	4b06      	ldr	r3, [pc, #24]	@ (800eb40 <rcutils_get_error_string+0x1c>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	b13b      	cbz	r3, 800eb3a <rcutils_get_error_string+0x16>
 800eb2a:	4b06      	ldr	r3, [pc, #24]	@ (800eb44 <rcutils_get_error_string+0x20>)
 800eb2c:	781a      	ldrb	r2, [r3, #0]
 800eb2e:	b90a      	cbnz	r2, 800eb34 <rcutils_get_error_string+0x10>
 800eb30:	2201      	movs	r2, #1
 800eb32:	701a      	strb	r2, [r3, #0]
 800eb34:	4b04      	ldr	r3, [pc, #16]	@ (800eb48 <rcutils_get_error_string+0x24>)
 800eb36:	7818      	ldrb	r0, [r3, #0]
 800eb38:	4770      	bx	lr
 800eb3a:	4b04      	ldr	r3, [pc, #16]	@ (800eb4c <rcutils_get_error_string+0x28>)
 800eb3c:	7818      	ldrb	r0, [r3, #0]
 800eb3e:	4770      	bx	lr
 800eb40:	24063aa8 	.word	0x24063aa8
 800eb44:	24063ac1 	.word	0x24063ac1
 800eb48:	24063ac0 	.word	0x24063ac0
 800eb4c:	08018c9c 	.word	0x08018c9c

0800eb50 <rcutils_reset_error>:
 800eb50:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800eb70 <rcutils_reset_error+0x20>
 800eb54:	2300      	movs	r3, #0
 800eb56:	4a08      	ldr	r2, [pc, #32]	@ (800eb78 <rcutils_reset_error+0x28>)
 800eb58:	4808      	ldr	r0, [pc, #32]	@ (800eb7c <rcutils_reset_error+0x2c>)
 800eb5a:	8013      	strh	r3, [r2, #0]
 800eb5c:	4908      	ldr	r1, [pc, #32]	@ (800eb80 <rcutils_reset_error+0x30>)
 800eb5e:	7003      	strb	r3, [r0, #0]
 800eb60:	700b      	strb	r3, [r1, #0]
 800eb62:	ed82 7b02 	vstr	d7, [r2, #8]
 800eb66:	4a07      	ldr	r2, [pc, #28]	@ (800eb84 <rcutils_reset_error+0x34>)
 800eb68:	7013      	strb	r3, [r2, #0]
 800eb6a:	4770      	bx	lr
 800eb6c:	f3af 8000 	nop.w
	...
 800eb78:	24063ab0 	.word	0x24063ab0
 800eb7c:	24063ac1 	.word	0x24063ac1
 800eb80:	24063ac0 	.word	0x24063ac0
 800eb84:	24063aa8 	.word	0x24063aa8

0800eb88 <rmw_get_zero_initialized_init_options>:
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	2238      	movs	r2, #56	@ 0x38
 800eb8e:	2100      	movs	r1, #0
 800eb90:	f008 ffb0 	bl	8017af4 <memset>
 800eb94:	f104 0010 	add.w	r0, r4, #16
 800eb98:	f000 f80a 	bl	800ebb0 <rmw_get_default_security_options>
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eba0:	4620      	mov	r0, r4
 800eba2:	60e3      	str	r3, [r4, #12]
 800eba4:	bd10      	pop	{r4, pc}
 800eba6:	bf00      	nop

0800eba8 <rmw_get_default_publisher_options>:
 800eba8:	2200      	movs	r2, #0
 800ebaa:	6002      	str	r2, [r0, #0]
 800ebac:	7102      	strb	r2, [r0, #4]
 800ebae:	4770      	bx	lr

0800ebb0 <rmw_get_default_security_options>:
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	7002      	strb	r2, [r0, #0]
 800ebb4:	6042      	str	r2, [r0, #4]
 800ebb6:	4770      	bx	lr

0800ebb8 <rmw_uros_set_custom_transport>:
 800ebb8:	b470      	push	{r4, r5, r6}
 800ebba:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ebbe:	b162      	cbz	r2, 800ebda <rmw_uros_set_custom_transport+0x22>
 800ebc0:	b15b      	cbz	r3, 800ebda <rmw_uros_set_custom_transport+0x22>
 800ebc2:	b155      	cbz	r5, 800ebda <rmw_uros_set_custom_transport+0x22>
 800ebc4:	b14e      	cbz	r6, 800ebda <rmw_uros_set_custom_transport+0x22>
 800ebc6:	4c06      	ldr	r4, [pc, #24]	@ (800ebe0 <rmw_uros_set_custom_transport+0x28>)
 800ebc8:	7020      	strb	r0, [r4, #0]
 800ebca:	2000      	movs	r0, #0
 800ebcc:	6166      	str	r6, [r4, #20]
 800ebce:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ebd2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ebd6:	bc70      	pop	{r4, r5, r6}
 800ebd8:	4770      	bx	lr
 800ebda:	200b      	movs	r0, #11
 800ebdc:	bc70      	pop	{r4, r5, r6}
 800ebde:	4770      	bx	lr
 800ebe0:	24063ac4 	.word	0x24063ac4

0800ebe4 <rmw_init_options_init>:
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	ad09      	add	r5, sp, #36	@ 0x24
 800ebec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ebf0:	b130      	cbz	r0, 800ec00 <rmw_init_options_init+0x1c>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f7ff ff87 	bl	800eb08 <rcutils_allocator_is_valid>
 800ebfa:	b108      	cbz	r0, 800ec00 <rmw_init_options_init+0x1c>
 800ebfc:	68a6      	ldr	r6, [r4, #8]
 800ebfe:	b12e      	cbz	r6, 800ec0c <rmw_init_options_init+0x28>
 800ec00:	200b      	movs	r0, #11
 800ec02:	b003      	add	sp, #12
 800ec04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec08:	b004      	add	sp, #16
 800ec0a:	4770      	bx	lr
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f104 0c20 	add.w	ip, r4, #32
 800ec14:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800ecb0 <rmw_init_options_init+0xcc>
 800ec18:	466f      	mov	r7, sp
 800ec1a:	e9c4 2300 	strd	r2, r3, [r4]
 800ec1e:	4b20      	ldr	r3, [pc, #128]	@ (800eca0 <rmw_init_options_init+0xbc>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60a3      	str	r3, [r4, #8]
 800ec24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec2a:	682b      	ldr	r3, [r5, #0]
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f8cc 3000 	str.w	r3, [ip]
 800ec32:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ec36:	60e6      	str	r6, [r4, #12]
 800ec38:	f7ff ffba 	bl	800ebb0 <rmw_get_default_security_options>
 800ec3c:	f104 0310 	add.w	r3, r4, #16
 800ec40:	2203      	movs	r2, #3
 800ec42:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ec46:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec4a:	4816      	ldr	r0, [pc, #88]	@ (800eca4 <rmw_init_options_init+0xc0>)
 800ec4c:	4916      	ldr	r1, [pc, #88]	@ (800eca8 <rmw_init_options_init+0xc4>)
 800ec4e:	7626      	strb	r6, [r4, #24]
 800ec50:	f000 fed2 	bl	800f9f8 <rmw_uxrce_init_init_options_impl_memory>
 800ec54:	4813      	ldr	r0, [pc, #76]	@ (800eca4 <rmw_init_options_init+0xc0>)
 800ec56:	f007 f84d 	bl	8015cf4 <get_memory>
 800ec5a:	b1f0      	cbz	r0, 800ec9a <rmw_init_options_init+0xb6>
 800ec5c:	4a13      	ldr	r2, [pc, #76]	@ (800ecac <rmw_init_options_init+0xc8>)
 800ec5e:	6883      	ldr	r3, [r0, #8]
 800ec60:	6851      	ldr	r1, [r2, #4]
 800ec62:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec64:	7810      	ldrb	r0, [r2, #0]
 800ec66:	6159      	str	r1, [r3, #20]
 800ec68:	68d1      	ldr	r1, [r2, #12]
 800ec6a:	7418      	strb	r0, [r3, #16]
 800ec6c:	61d9      	str	r1, [r3, #28]
 800ec6e:	6911      	ldr	r1, [r2, #16]
 800ec70:	6219      	str	r1, [r3, #32]
 800ec72:	6951      	ldr	r1, [r2, #20]
 800ec74:	6892      	ldr	r2, [r2, #8]
 800ec76:	6259      	str	r1, [r3, #36]	@ 0x24
 800ec78:	619a      	str	r2, [r3, #24]
 800ec7a:	f004 fb41 	bl	8013300 <uxr_nanos>
 800ec7e:	f008 fcad 	bl	80175dc <srand>
 800ec82:	f008 fcd9 	bl	8017638 <rand>
 800ec86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec88:	6298      	str	r0, [r3, #40]	@ 0x28
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0f9      	beq.n	800ec82 <rmw_init_options_init+0x9e>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	b003      	add	sp, #12
 800ec92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec96:	b004      	add	sp, #16
 800ec98:	4770      	bx	lr
 800ec9a:	2001      	movs	r0, #1
 800ec9c:	e7b1      	b.n	800ec02 <rmw_init_options_init+0x1e>
 800ec9e:	bf00      	nop
 800eca0:	080194bc 	.word	0x080194bc
 800eca4:	240683dc 	.word	0x240683dc
 800eca8:	24063c78 	.word	0x24063c78
 800ecac:	24063ac4 	.word	0x24063ac4
 800ecb0:	08018ca0 	.word	0x08018ca0

0800ecb4 <rmw_init_options_copy>:
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d047      	beq.n	800ed48 <rmw_init_options_copy+0x94>
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	460d      	mov	r5, r1
 800ecbc:	b149      	cbz	r1, 800ecd2 <rmw_init_options_copy+0x1e>
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	6880      	ldr	r0, [r0, #8]
 800ecc2:	b120      	cbz	r0, 800ecce <rmw_init_options_copy+0x1a>
 800ecc4:	4b22      	ldr	r3, [pc, #136]	@ (800ed50 <rmw_init_options_copy+0x9c>)
 800ecc6:	6819      	ldr	r1, [r3, #0]
 800ecc8:	f7f1 fb0a 	bl	80002e0 <strcmp>
 800eccc:	bba8      	cbnz	r0, 800ed3a <rmw_init_options_copy+0x86>
 800ecce:	68ab      	ldr	r3, [r5, #8]
 800ecd0:	b11b      	cbz	r3, 800ecda <rmw_init_options_copy+0x26>
 800ecd2:	f04f 0c0b 	mov.w	ip, #11
 800ecd6:	4660      	mov	r0, ip
 800ecd8:	bd70      	pop	{r4, r5, r6, pc}
 800ecda:	4623      	mov	r3, r4
 800ecdc:	462a      	mov	r2, r5
 800ecde:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800ece2:	f8d3 e000 	ldr.w	lr, [r3]
 800ece6:	3310      	adds	r3, #16
 800ece8:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800ecec:	3210      	adds	r2, #16
 800ecee:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800ecf2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ecf6:	42b3      	cmp	r3, r6
 800ecf8:	f842 ec10 	str.w	lr, [r2, #-16]
 800ecfc:	f842 cc0c 	str.w	ip, [r2, #-12]
 800ed00:	f842 0c08 	str.w	r0, [r2, #-8]
 800ed04:	f842 1c04 	str.w	r1, [r2, #-4]
 800ed08:	d1eb      	bne.n	800ece2 <rmw_init_options_copy+0x2e>
 800ed0a:	6819      	ldr	r1, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	4811      	ldr	r0, [pc, #68]	@ (800ed54 <rmw_init_options_copy+0xa0>)
 800ed10:	6011      	str	r1, [r2, #0]
 800ed12:	6053      	str	r3, [r2, #4]
 800ed14:	f006 ffee 	bl	8015cf4 <get_memory>
 800ed18:	b198      	cbz	r0, 800ed42 <rmw_init_options_copy+0x8e>
 800ed1a:	6883      	ldr	r3, [r0, #8]
 800ed1c:	f04f 0c00 	mov.w	ip, #0
 800ed20:	636b      	str	r3, [r5, #52]	@ 0x34
 800ed22:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800ed24:	f103 0410 	add.w	r4, r3, #16
 800ed28:	3510      	adds	r5, #16
 800ed2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ed32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed36:	4660      	mov	r0, ip
 800ed38:	bd70      	pop	{r4, r5, r6, pc}
 800ed3a:	f04f 0c0c 	mov.w	ip, #12
 800ed3e:	4660      	mov	r0, ip
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
 800ed42:	f04f 0c01 	mov.w	ip, #1
 800ed46:	e7c6      	b.n	800ecd6 <rmw_init_options_copy+0x22>
 800ed48:	f04f 0c0b 	mov.w	ip, #11
 800ed4c:	4660      	mov	r0, ip
 800ed4e:	4770      	bx	lr
 800ed50:	080194bc 	.word	0x080194bc
 800ed54:	240683dc 	.word	0x240683dc

0800ed58 <rmw_init_options_fini>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	b08e      	sub	sp, #56	@ 0x38
 800ed5c:	b388      	cbz	r0, 800edc2 <rmw_init_options_fini+0x6a>
 800ed5e:	4604      	mov	r4, r0
 800ed60:	3020      	adds	r0, #32
 800ed62:	f7ff fed1 	bl	800eb08 <rcutils_allocator_is_valid>
 800ed66:	b360      	cbz	r0, 800edc2 <rmw_init_options_fini+0x6a>
 800ed68:	68a0      	ldr	r0, [r4, #8]
 800ed6a:	b120      	cbz	r0, 800ed76 <rmw_init_options_fini+0x1e>
 800ed6c:	4b1a      	ldr	r3, [pc, #104]	@ (800edd8 <rmw_init_options_fini+0x80>)
 800ed6e:	6819      	ldr	r1, [r3, #0]
 800ed70:	f7f1 fab6 	bl	80002e0 <strcmp>
 800ed74:	bb68      	cbnz	r0, 800edd2 <rmw_init_options_fini+0x7a>
 800ed76:	4b19      	ldr	r3, [pc, #100]	@ (800eddc <rmw_init_options_fini+0x84>)
 800ed78:	6819      	ldr	r1, [r3, #0]
 800ed7a:	b331      	cbz	r1, 800edca <rmw_init_options_fini+0x72>
 800ed7c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ed7e:	e001      	b.n	800ed84 <rmw_init_options_fini+0x2c>
 800ed80:	6849      	ldr	r1, [r1, #4]
 800ed82:	b311      	cbz	r1, 800edca <rmw_init_options_fini+0x72>
 800ed84:	688b      	ldr	r3, [r1, #8]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d1fa      	bne.n	800ed80 <rmw_init_options_fini+0x28>
 800ed8a:	4814      	ldr	r0, [pc, #80]	@ (800eddc <rmw_init_options_fini+0x84>)
 800ed8c:	f006 ffc2 	bl	8015d14 <put_memory>
 800ed90:	4668      	mov	r0, sp
 800ed92:	f7ff fef9 	bl	800eb88 <rmw_get_zero_initialized_init_options>
 800ed96:	46ee      	mov	lr, sp
 800ed98:	46a4      	mov	ip, r4
 800ed9a:	2400      	movs	r4, #0
 800ed9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eda0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eda4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eda8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edb4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800edb8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800edbc:	4620      	mov	r0, r4
 800edbe:	b00e      	add	sp, #56	@ 0x38
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	240b      	movs	r4, #11
 800edc4:	4620      	mov	r0, r4
 800edc6:	b00e      	add	sp, #56	@ 0x38
 800edc8:	bd10      	pop	{r4, pc}
 800edca:	2401      	movs	r4, #1
 800edcc:	4620      	mov	r0, r4
 800edce:	b00e      	add	sp, #56	@ 0x38
 800edd0:	bd10      	pop	{r4, pc}
 800edd2:	240c      	movs	r4, #12
 800edd4:	e7f2      	b.n	800edbc <rmw_init_options_fini+0x64>
 800edd6:	bf00      	nop
 800edd8:	080194bc 	.word	0x080194bc
 800eddc:	240683dc 	.word	0x240683dc

0800ede0 <rmw_init>:
 800ede0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ede4:	b083      	sub	sp, #12
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f000 80d3 	beq.w	800ef92 <rmw_init+0x1b2>
 800edec:	460e      	mov	r6, r1
 800edee:	2900      	cmp	r1, #0
 800edf0:	f000 80cf 	beq.w	800ef92 <rmw_init+0x1b2>
 800edf4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800edf6:	4605      	mov	r5, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 80ca 	beq.w	800ef92 <rmw_init+0x1b2>
 800edfe:	4b78      	ldr	r3, [pc, #480]	@ (800efe0 <rmw_init+0x200>)
 800ee00:	6880      	ldr	r0, [r0, #8]
 800ee02:	681f      	ldr	r7, [r3, #0]
 800ee04:	b128      	cbz	r0, 800ee12 <rmw_init+0x32>
 800ee06:	4639      	mov	r1, r7
 800ee08:	f7f1 fa6a 	bl	80002e0 <strcmp>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	f040 80ca 	bne.w	800efa6 <rmw_init+0x1c6>
 800ee12:	4c74      	ldr	r4, [pc, #464]	@ (800efe4 <rmw_init+0x204>)
 800ee14:	f04f 0800 	mov.w	r8, #0
 800ee18:	4973      	ldr	r1, [pc, #460]	@ (800efe8 <rmw_init+0x208>)
 800ee1a:	4874      	ldr	r0, [pc, #464]	@ (800efec <rmw_init+0x20c>)
 800ee1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee20:	60b7      	str	r7, [r6, #8]
 800ee22:	e9c6 2300 	strd	r2, r3, [r6]
 800ee26:	68eb      	ldr	r3, [r5, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ee2c:	f000 fd84 	bl	800f938 <rmw_uxrce_init_session_memory>
 800ee30:	4620      	mov	r0, r4
 800ee32:	2204      	movs	r2, #4
 800ee34:	496e      	ldr	r1, [pc, #440]	@ (800eff0 <rmw_init+0x210>)
 800ee36:	f000 fdbf 	bl	800f9b8 <rmw_uxrce_init_static_input_buffer_memory>
 800ee3a:	486c      	ldr	r0, [pc, #432]	@ (800efec <rmw_init+0x20c>)
 800ee3c:	f884 800d 	strb.w	r8, [r4, #13]
 800ee40:	f006 ff58 	bl	8015cf4 <get_memory>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	f000 80a9 	beq.w	800ef9c <rmw_init+0x1bc>
 800ee4a:	6884      	ldr	r4, [r0, #8]
 800ee4c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ee4e:	f104 0910 	add.w	r9, r4, #16
 800ee52:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ee54:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ee58:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ee5c:	9101      	str	r1, [sp, #4]
 800ee5e:	4661      	mov	r1, ip
 800ee60:	6a00      	ldr	r0, [r0, #32]
 800ee62:	9000      	str	r0, [sp, #0]
 800ee64:	4648      	mov	r0, r9
 800ee66:	f002 fa13 	bl	8011290 <uxr_set_custom_transport_callbacks>
 800ee6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ee6e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ee72:	4960      	ldr	r1, [pc, #384]	@ (800eff4 <rmw_init+0x214>)
 800ee74:	4860      	ldr	r0, [pc, #384]	@ (800eff8 <rmw_init+0x218>)
 800ee76:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ee7a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ee7e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ee82:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ee86:	2201      	movs	r2, #1
 800ee88:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ee8c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ee90:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ee94:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ee98:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ee9a:	f000 fd2d 	bl	800f8f8 <rmw_uxrce_init_node_memory>
 800ee9e:	2205      	movs	r2, #5
 800eea0:	4956      	ldr	r1, [pc, #344]	@ (800effc <rmw_init+0x21c>)
 800eea2:	4857      	ldr	r0, [pc, #348]	@ (800f000 <rmw_init+0x220>)
 800eea4:	f000 fd08 	bl	800f8b8 <rmw_uxrce_init_subscription_memory>
 800eea8:	220a      	movs	r2, #10
 800eeaa:	4956      	ldr	r1, [pc, #344]	@ (800f004 <rmw_init+0x224>)
 800eeac:	4856      	ldr	r0, [pc, #344]	@ (800f008 <rmw_init+0x228>)
 800eeae:	f000 fce3 	bl	800f878 <rmw_uxrce_init_publisher_memory>
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4955      	ldr	r1, [pc, #340]	@ (800f00c <rmw_init+0x22c>)
 800eeb6:	4856      	ldr	r0, [pc, #344]	@ (800f010 <rmw_init+0x230>)
 800eeb8:	f000 fc9e 	bl	800f7f8 <rmw_uxrce_init_service_memory>
 800eebc:	2201      	movs	r2, #1
 800eebe:	4955      	ldr	r1, [pc, #340]	@ (800f014 <rmw_init+0x234>)
 800eec0:	4855      	ldr	r0, [pc, #340]	@ (800f018 <rmw_init+0x238>)
 800eec2:	f000 fcb9 	bl	800f838 <rmw_uxrce_init_client_memory>
 800eec6:	220f      	movs	r2, #15
 800eec8:	4954      	ldr	r1, [pc, #336]	@ (800f01c <rmw_init+0x23c>)
 800eeca:	4855      	ldr	r0, [pc, #340]	@ (800f020 <rmw_init+0x240>)
 800eecc:	f000 fd54 	bl	800f978 <rmw_uxrce_init_topic_memory>
 800eed0:	2203      	movs	r2, #3
 800eed2:	4954      	ldr	r1, [pc, #336]	@ (800f024 <rmw_init+0x244>)
 800eed4:	4854      	ldr	r0, [pc, #336]	@ (800f028 <rmw_init+0x248>)
 800eed6:	f000 fd8f 	bl	800f9f8 <rmw_uxrce_init_init_options_impl_memory>
 800eeda:	2204      	movs	r2, #4
 800eedc:	4953      	ldr	r1, [pc, #332]	@ (800f02c <rmw_init+0x24c>)
 800eede:	4854      	ldr	r0, [pc, #336]	@ (800f030 <rmw_init+0x250>)
 800eee0:	f000 fdaa 	bl	800fa38 <rmw_uxrce_init_wait_set_memory>
 800eee4:	4953      	ldr	r1, [pc, #332]	@ (800f034 <rmw_init+0x254>)
 800eee6:	4854      	ldr	r0, [pc, #336]	@ (800f038 <rmw_init+0x258>)
 800eee8:	2204      	movs	r2, #4
 800eeea:	f000 fdc5 	bl	800fa78 <rmw_uxrce_init_guard_condition_memory>
 800eeee:	4642      	mov	r2, r8
 800eef0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800eef2:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800eef4:	f000 fc48 	bl	800f788 <rmw_uxrce_transport_init>
 800eef8:	4607      	mov	r7, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d158      	bne.n	800efb0 <rmw_init+0x1d0>
 800eefe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ef00:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ef04:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ef08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f002 fbb8 	bl	8011680 <uxr_init_session>
 800ef10:	4622      	mov	r2, r4
 800ef12:	494a      	ldr	r1, [pc, #296]	@ (800f03c <rmw_init+0x25c>)
 800ef14:	4628      	mov	r0, r5
 800ef16:	f002 fbd7 	bl	80116c8 <uxr_set_topic_callback>
 800ef1a:	463a      	mov	r2, r7
 800ef1c:	4948      	ldr	r1, [pc, #288]	@ (800f040 <rmw_init+0x260>)
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f002 fbce 	bl	80116c0 <uxr_set_status_callback>
 800ef24:	463a      	mov	r2, r7
 800ef26:	4947      	ldr	r1, [pc, #284]	@ (800f044 <rmw_init+0x264>)
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f002 fbd1 	bl	80116d0 <uxr_set_request_callback>
 800ef2e:	463a      	mov	r2, r7
 800ef30:	4945      	ldr	r1, [pc, #276]	@ (800f048 <rmw_init+0x268>)
 800ef32:	4628      	mov	r0, r5
 800ef34:	f002 fbd0 	bl	80116d8 <uxr_set_reply_callback>
 800ef38:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ef42:	0092      	lsls	r2, r2, #2
 800ef44:	4628      	mov	r0, r5
 800ef46:	f002 fc07 	bl	8011758 <uxr_create_input_reliable_stream>
 800ef4a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ef4e:	2304      	movs	r3, #4
 800ef50:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ef54:	0092      	lsls	r2, r2, #2
 800ef56:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f002 fbd2 	bl	8011704 <uxr_create_output_reliable_stream>
 800ef60:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ef64:	4628      	mov	r0, r5
 800ef66:	f002 fbf1 	bl	801174c <uxr_create_input_best_effort_stream>
 800ef6a:	f241 3194 	movw	r1, #5012	@ 0x1394
 800ef6e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ef72:	4628      	mov	r0, r5
 800ef74:	4421      	add	r1, r4
 800ef76:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ef7a:	f002 fbb1 	bl	80116e0 <uxr_create_output_best_effort_stream>
 800ef7e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ef82:	4628      	mov	r0, r5
 800ef84:	f003 f954 	bl	8012230 <uxr_create_session>
 800ef88:	b1f8      	cbz	r0, 800efca <rmw_init+0x1ea>
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	b003      	add	sp, #12
 800ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef92:	270b      	movs	r7, #11
 800ef94:	4638      	mov	r0, r7
 800ef96:	b003      	add	sp, #12
 800ef98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef9c:	2701      	movs	r7, #1
 800ef9e:	4638      	mov	r0, r7
 800efa0:	b003      	add	sp, #12
 800efa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa6:	270c      	movs	r7, #12
 800efa8:	4638      	mov	r0, r7
 800efaa:	b003      	add	sp, #12
 800efac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb0:	4648      	mov	r0, r9
 800efb2:	f002 f9ab 	bl	801130c <uxr_close_custom_transport>
 800efb6:	4621      	mov	r1, r4
 800efb8:	480c      	ldr	r0, [pc, #48]	@ (800efec <rmw_init+0x20c>)
 800efba:	f006 feab 	bl	8015d14 <put_memory>
 800efbe:	4638      	mov	r0, r7
 800efc0:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800efc4:	b003      	add	sp, #12
 800efc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efca:	4648      	mov	r0, r9
 800efcc:	f002 f99e 	bl	801130c <uxr_close_custom_transport>
 800efd0:	4621      	mov	r1, r4
 800efd2:	4806      	ldr	r0, [pc, #24]	@ (800efec <rmw_init+0x20c>)
 800efd4:	f006 fe9e 	bl	8015d14 <put_memory>
 800efd8:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800efda:	2701      	movs	r7, #1
 800efdc:	e7d5      	b.n	800ef8a <rmw_init+0x1aa>
 800efde:	bf00      	nop
 800efe0:	080194bc 	.word	0x080194bc
 800efe4:	2406842c 	.word	0x2406842c
 800efe8:	240646d8 	.word	0x240646d8
 800efec:	2406841c 	.word	0x2406841c
 800eff0:	24065c80 	.word	0x24065c80
 800eff4:	24063cfc 	.word	0x24063cfc
 800eff8:	240683ec 	.word	0x240683ec
 800effc:	24067d80 	.word	0x24067d80
 800f000:	2406843c 	.word	0x2406843c
 800f004:	24063da0 	.word	0x24063da0
 800f008:	240683fc 	.word	0x240683fc
 800f00c:	24064610 	.word	0x24064610
 800f010:	2406840c 	.word	0x2406840c
 800f014:	24063b30 	.word	0x24063b30
 800f018:	24063b1c 	.word	0x24063b1c
 800f01c:	240681b8 	.word	0x240681b8
 800f020:	2406844c 	.word	0x2406844c
 800f024:	24063c78 	.word	0x24063c78
 800f028:	240683dc 	.word	0x240683dc
 800f02c:	2406835c 	.word	0x2406835c
 800f030:	2406845c 	.word	0x2406845c
 800f034:	24063bf8 	.word	0x24063bf8
 800f038:	240683cc 	.word	0x240683cc
 800f03c:	08015b2d 	.word	0x08015b2d
 800f040:	08015b25 	.word	0x08015b25
 800f044:	08015bc5 	.word	0x08015bc5
 800f048:	08015c61 	.word	0x08015c61

0800f04c <rmw_context_fini>:
 800f04c:	4b17      	ldr	r3, [pc, #92]	@ (800f0ac <rmw_context_fini+0x60>)
 800f04e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	681c      	ldr	r4, [r3, #0]
 800f054:	4605      	mov	r5, r0
 800f056:	b334      	cbz	r4, 800f0a6 <rmw_context_fini+0x5a>
 800f058:	2600      	movs	r6, #0
 800f05a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f05e:	6902      	ldr	r2, [r0, #16]
 800f060:	428a      	cmp	r2, r1
 800f062:	d018      	beq.n	800f096 <rmw_context_fini+0x4a>
 800f064:	2c00      	cmp	r4, #0
 800f066:	d1f8      	bne.n	800f05a <rmw_context_fini+0xe>
 800f068:	b189      	cbz	r1, 800f08e <rmw_context_fini+0x42>
 800f06a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f06e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f072:	789b      	ldrb	r3, [r3, #2]
 800f074:	2b01      	cmp	r3, #1
 800f076:	bf14      	ite	ne
 800f078:	210a      	movne	r1, #10
 800f07a:	2100      	moveq	r1, #0
 800f07c:	f003 f8b0 	bl	80121e0 <uxr_delete_session_retries>
 800f080:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f082:	f000 fd19 	bl	800fab8 <rmw_uxrce_fini_session_memory>
 800f086:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f088:	3010      	adds	r0, #16
 800f08a:	f002 f93f 	bl	801130c <uxr_close_custom_transport>
 800f08e:	2300      	movs	r3, #0
 800f090:	4630      	mov	r0, r6
 800f092:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f094:	bd70      	pop	{r4, r5, r6, pc}
 800f096:	3018      	adds	r0, #24
 800f098:	f000 f89c 	bl	800f1d4 <rmw_destroy_node>
 800f09c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f09e:	4606      	mov	r6, r0
 800f0a0:	2c00      	cmp	r4, #0
 800f0a2:	d1da      	bne.n	800f05a <rmw_context_fini+0xe>
 800f0a4:	e7e0      	b.n	800f068 <rmw_context_fini+0x1c>
 800f0a6:	4626      	mov	r6, r4
 800f0a8:	e7de      	b.n	800f068 <rmw_context_fini+0x1c>
 800f0aa:	bf00      	nop
 800f0ac:	240683ec 	.word	0x240683ec

0800f0b0 <create_node>:
 800f0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0b4:	b083      	sub	sp, #12
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d064      	beq.n	800f184 <create_node+0xd4>
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	4838      	ldr	r0, [pc, #224]	@ (800f1a0 <create_node+0xf0>)
 800f0be:	460f      	mov	r7, r1
 800f0c0:	4690      	mov	r8, r2
 800f0c2:	461d      	mov	r5, r3
 800f0c4:	f006 fe16 	bl	8015cf4 <get_memory>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d05b      	beq.n	800f184 <create_node+0xd4>
 800f0cc:	6884      	ldr	r4, [r0, #8]
 800f0ce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f0d0:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f0d4:	f104 0518 	add.w	r5, r4, #24
 800f0d8:	6123      	str	r3, [r4, #16]
 800f0da:	f006 fe73 	bl	8015dc4 <rmw_get_implementation_identifier>
 800f0de:	f8c4 9020 	str.w	r9, [r4, #32]
 800f0e2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7f1 f904 	bl	80002f4 <strlen>
 800f0ec:	1c42      	adds	r2, r0, #1
 800f0ee:	2a3c      	cmp	r2, #60	@ 0x3c
 800f0f0:	d840      	bhi.n	800f174 <create_node+0xc4>
 800f0f2:	4648      	mov	r0, r9
 800f0f4:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	f008 fe1a 	bl	8017d32 <memcpy>
 800f0fe:	4638      	mov	r0, r7
 800f100:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f104:	f7f1 f8f6 	bl	80002f4 <strlen>
 800f108:	1c42      	adds	r2, r0, #1
 800f10a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f10c:	d832      	bhi.n	800f174 <create_node+0xc4>
 800f10e:	4639      	mov	r1, r7
 800f110:	4648      	mov	r0, r9
 800f112:	f008 fe0e 	bl	8017d32 <memcpy>
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	2101      	movs	r1, #1
 800f11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f11e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f122:	1842      	adds	r2, r0, r1
 800f124:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f128:	f002 f8f4 	bl	8011314 <uxr_object_id>
 800f12c:	6160      	str	r0, [r4, #20]
 800f12e:	783b      	ldrb	r3, [r7, #0]
 800f130:	2b2f      	cmp	r3, #47	@ 0x2f
 800f132:	d12c      	bne.n	800f18e <create_node+0xde>
 800f134:	787b      	ldrb	r3, [r7, #1]
 800f136:	bb53      	cbnz	r3, 800f18e <create_node+0xde>
 800f138:	4633      	mov	r3, r6
 800f13a:	4a1a      	ldr	r2, [pc, #104]	@ (800f1a4 <create_node+0xf4>)
 800f13c:	213c      	movs	r1, #60	@ 0x3c
 800f13e:	481a      	ldr	r0, [pc, #104]	@ (800f1a8 <create_node+0xf8>)
 800f140:	f008 fc28 	bl	8017994 <sniprintf>
 800f144:	6920      	ldr	r0, [r4, #16]
 800f146:	2106      	movs	r1, #6
 800f148:	fa1f f388 	uxth.w	r3, r8
 800f14c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f150:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f154:	9101      	str	r1, [sp, #4]
 800f156:	4914      	ldr	r1, [pc, #80]	@ (800f1a8 <create_node+0xf8>)
 800f158:	9100      	str	r1, [sp, #0]
 800f15a:	6811      	ldr	r1, [r2, #0]
 800f15c:	6962      	ldr	r2, [r4, #20]
 800f15e:	f001 ff0d 	bl	8010f7c <uxr_buffer_create_participant_bin>
 800f162:	4602      	mov	r2, r0
 800f164:	6920      	ldr	r0, [r4, #16]
 800f166:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f16a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f16e:	f000 fd7f 	bl	800fc70 <run_xrce_session>
 800f172:	b918      	cbnz	r0, 800f17c <create_node+0xcc>
 800f174:	4628      	mov	r0, r5
 800f176:	2500      	movs	r5, #0
 800f178:	f000 fca4 	bl	800fac4 <rmw_uxrce_fini_node_memory>
 800f17c:	4628      	mov	r0, r5
 800f17e:	b003      	add	sp, #12
 800f180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f184:	2500      	movs	r5, #0
 800f186:	4628      	mov	r0, r5
 800f188:	b003      	add	sp, #12
 800f18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f18e:	463b      	mov	r3, r7
 800f190:	4a06      	ldr	r2, [pc, #24]	@ (800f1ac <create_node+0xfc>)
 800f192:	213c      	movs	r1, #60	@ 0x3c
 800f194:	9600      	str	r6, [sp, #0]
 800f196:	4804      	ldr	r0, [pc, #16]	@ (800f1a8 <create_node+0xf8>)
 800f198:	f008 fbfc 	bl	8017994 <sniprintf>
 800f19c:	e7d2      	b.n	800f144 <create_node+0x94>
 800f19e:	bf00      	nop
 800f1a0:	240683ec 	.word	0x240683ec
 800f1a4:	08018ce0 	.word	0x08018ce0
 800f1a8:	24063ae0 	.word	0x24063ae0
 800f1ac:	08018ca4 	.word	0x08018ca4

0800f1b0 <rmw_create_node>:
 800f1b0:	468c      	mov	ip, r1
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	f1bc 0f00 	cmp.w	ip, #0
 800f1b8:	d00a      	beq.n	800f1d0 <rmw_create_node+0x20>
 800f1ba:	f89c 3000 	ldrb.w	r3, [ip]
 800f1be:	b13b      	cbz	r3, 800f1d0 <rmw_create_node+0x20>
 800f1c0:	b132      	cbz	r2, 800f1d0 <rmw_create_node+0x20>
 800f1c2:	7813      	ldrb	r3, [r2, #0]
 800f1c4:	b123      	cbz	r3, 800f1d0 <rmw_create_node+0x20>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f1ca:	4660      	mov	r0, ip
 800f1cc:	f7ff bf70 	b.w	800f0b0 <create_node>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	4770      	bx	lr

0800f1d4 <rmw_destroy_node>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	b328      	cbz	r0, 800f224 <rmw_destroy_node+0x50>
 800f1d8:	4607      	mov	r7, r0
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	b120      	cbz	r0, 800f1e8 <rmw_destroy_node+0x14>
 800f1de:	4b37      	ldr	r3, [pc, #220]	@ (800f2bc <rmw_destroy_node+0xe8>)
 800f1e0:	6819      	ldr	r1, [r3, #0]
 800f1e2:	f7f1 f87d 	bl	80002e0 <strcmp>
 800f1e6:	b9e8      	cbnz	r0, 800f224 <rmw_destroy_node+0x50>
 800f1e8:	687d      	ldr	r5, [r7, #4]
 800f1ea:	b1dd      	cbz	r5, 800f224 <rmw_destroy_node+0x50>
 800f1ec:	4b34      	ldr	r3, [pc, #208]	@ (800f2c0 <rmw_destroy_node+0xec>)
 800f1ee:	681c      	ldr	r4, [r3, #0]
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	d060      	beq.n	800f2b6 <rmw_destroy_node+0xe2>
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f1fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f1fe:	429d      	cmp	r5, r3
 800f200:	d013      	beq.n	800f22a <rmw_destroy_node+0x56>
 800f202:	2c00      	cmp	r4, #0
 800f204:	d1f7      	bne.n	800f1f6 <rmw_destroy_node+0x22>
 800f206:	4b2f      	ldr	r3, [pc, #188]	@ (800f2c4 <rmw_destroy_node+0xf0>)
 800f208:	681c      	ldr	r4, [r3, #0]
 800f20a:	b1c4      	cbz	r4, 800f23e <rmw_destroy_node+0x6a>
 800f20c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f210:	6a0b      	ldr	r3, [r1, #32]
 800f212:	429d      	cmp	r5, r3
 800f214:	d1f9      	bne.n	800f20a <rmw_destroy_node+0x36>
 800f216:	317c      	adds	r1, #124	@ 0x7c
 800f218:	4638      	mov	r0, r7
 800f21a:	f000 fa53 	bl	800f6c4 <rmw_destroy_subscription>
 800f21e:	2801      	cmp	r0, #1
 800f220:	4606      	mov	r6, r0
 800f222:	d1f2      	bne.n	800f20a <rmw_destroy_node+0x36>
 800f224:	2601      	movs	r6, #1
 800f226:	4630      	mov	r0, r6
 800f228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22a:	3184      	adds	r1, #132	@ 0x84
 800f22c:	4638      	mov	r0, r7
 800f22e:	f000 f9b1 	bl	800f594 <rmw_destroy_publisher>
 800f232:	2801      	cmp	r0, #1
 800f234:	4606      	mov	r6, r0
 800f236:	d0f5      	beq.n	800f224 <rmw_destroy_node+0x50>
 800f238:	2c00      	cmp	r4, #0
 800f23a:	d1dc      	bne.n	800f1f6 <rmw_destroy_node+0x22>
 800f23c:	e7e3      	b.n	800f206 <rmw_destroy_node+0x32>
 800f23e:	4b22      	ldr	r3, [pc, #136]	@ (800f2c8 <rmw_destroy_node+0xf4>)
 800f240:	681c      	ldr	r4, [r3, #0]
 800f242:	b16c      	cbz	r4, 800f260 <rmw_destroy_node+0x8c>
 800f244:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f248:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f24a:	429d      	cmp	r5, r3
 800f24c:	d1f9      	bne.n	800f242 <rmw_destroy_node+0x6e>
 800f24e:	317c      	adds	r1, #124	@ 0x7c
 800f250:	4638      	mov	r0, r7
 800f252:	f000 f9f3 	bl	800f63c <rmw_destroy_service>
 800f256:	2801      	cmp	r0, #1
 800f258:	4606      	mov	r6, r0
 800f25a:	d0e3      	beq.n	800f224 <rmw_destroy_node+0x50>
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d1f1      	bne.n	800f244 <rmw_destroy_node+0x70>
 800f260:	4b1a      	ldr	r3, [pc, #104]	@ (800f2cc <rmw_destroy_node+0xf8>)
 800f262:	681c      	ldr	r4, [r3, #0]
 800f264:	b16c      	cbz	r4, 800f282 <rmw_destroy_node+0xae>
 800f266:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f26a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f26c:	429d      	cmp	r5, r3
 800f26e:	d1f9      	bne.n	800f264 <rmw_destroy_node+0x90>
 800f270:	317c      	adds	r1, #124	@ 0x7c
 800f272:	4638      	mov	r0, r7
 800f274:	f006 fd62 	bl	8015d3c <rmw_destroy_client>
 800f278:	2801      	cmp	r0, #1
 800f27a:	4606      	mov	r6, r0
 800f27c:	d0d2      	beq.n	800f224 <rmw_destroy_node+0x50>
 800f27e:	2c00      	cmp	r4, #0
 800f280:	d1f1      	bne.n	800f266 <rmw_destroy_node+0x92>
 800f282:	6928      	ldr	r0, [r5, #16]
 800f284:	696a      	ldr	r2, [r5, #20]
 800f286:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f28a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f28e:	6819      	ldr	r1, [r3, #0]
 800f290:	f001 fe28 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f294:	4602      	mov	r2, r0
 800f296:	6928      	ldr	r0, [r5, #16]
 800f298:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f29c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f2a0:	f000 fce6 	bl	800fc70 <run_xrce_session>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	bf08      	it	eq
 800f2ac:	2602      	moveq	r6, #2
 800f2ae:	f000 fc09 	bl	800fac4 <rmw_uxrce_fini_node_memory>
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2b6:	4626      	mov	r6, r4
 800f2b8:	e7a5      	b.n	800f206 <rmw_destroy_node+0x32>
 800f2ba:	bf00      	nop
 800f2bc:	080194bc 	.word	0x080194bc
 800f2c0:	240683fc 	.word	0x240683fc
 800f2c4:	2406843c 	.word	0x2406843c
 800f2c8:	2406840c 	.word	0x2406840c
 800f2cc:	24063b1c 	.word	0x24063b1c

0800f2d0 <rmw_node_get_graph_guard_condition>:
 800f2d0:	6843      	ldr	r3, [r0, #4]
 800f2d2:	6918      	ldr	r0, [r3, #16]
 800f2d4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop

0800f2dc <flush_session>:
 800f2dc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f2de:	f002 bde1 	b.w	8011ea4 <uxr_run_session_until_confirm_delivery>
 800f2e2:	bf00      	nop

0800f2e4 <rmw_publish>:
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d053      	beq.n	800f390 <rmw_publish+0xac>
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	b08e      	sub	sp, #56	@ 0x38
 800f2ee:	2900      	cmp	r1, #0
 800f2f0:	d04b      	beq.n	800f38a <rmw_publish+0xa6>
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	6800      	ldr	r0, [r0, #0]
 800f2f6:	f000 fd35 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d045      	beq.n	800f38a <rmw_publish+0xa6>
 800f2fe:	6866      	ldr	r6, [r4, #4]
 800f300:	2e00      	cmp	r6, #0
 800f302:	d042      	beq.n	800f38a <rmw_publish+0xa6>
 800f304:	69b4      	ldr	r4, [r6, #24]
 800f306:	4628      	mov	r0, r5
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	4798      	blx	r3
 800f30c:	69f3      	ldr	r3, [r6, #28]
 800f30e:	9005      	str	r0, [sp, #20]
 800f310:	b113      	cbz	r3, 800f318 <rmw_publish+0x34>
 800f312:	a805      	add	r0, sp, #20
 800f314:	4798      	blx	r3
 800f316:	9805      	ldr	r0, [sp, #20]
 800f318:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	9000      	str	r0, [sp, #0]
 800f320:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f324:	6972      	ldr	r2, [r6, #20]
 800f326:	ab06      	add	r3, sp, #24
 800f328:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f32a:	f004 f889 	bl	8013440 <uxr_prepare_output_stream>
 800f32e:	b1d8      	cbz	r0, 800f368 <rmw_publish+0x84>
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	a906      	add	r1, sp, #24
 800f334:	4628      	mov	r0, r5
 800f336:	4798      	blx	r3
 800f338:	6a33      	ldr	r3, [r6, #32]
 800f33a:	4604      	mov	r4, r0
 800f33c:	b10b      	cbz	r3, 800f342 <rmw_publish+0x5e>
 800f33e:	a806      	add	r0, sp, #24
 800f340:	4798      	blx	r3
 800f342:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f346:	2b01      	cmp	r3, #1
 800f348:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f34c:	d022      	beq.n	800f394 <rmw_publish+0xb0>
 800f34e:	6918      	ldr	r0, [r3, #16]
 800f350:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f352:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f356:	f002 fda5 	bl	8011ea4 <uxr_run_session_until_confirm_delivery>
 800f35a:	4020      	ands	r0, r4
 800f35c:	b2c4      	uxtb	r4, r0
 800f35e:	f084 0001 	eor.w	r0, r4, #1
 800f362:	b2c0      	uxtb	r0, r0
 800f364:	b00e      	add	sp, #56	@ 0x38
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f36c:	6918      	ldr	r0, [r3, #16]
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	9602      	str	r6, [sp, #8]
 800f372:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	4b09      	ldr	r3, [pc, #36]	@ (800f3a0 <rmw_publish+0xbc>)
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	ab06      	add	r3, sp, #24
 800f37e:	6972      	ldr	r2, [r6, #20]
 800f380:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f382:	f004 f88d 	bl	80134a0 <uxr_prepare_output_stream_fragmented>
 800f386:	2800      	cmp	r0, #0
 800f388:	d1d2      	bne.n	800f330 <rmw_publish+0x4c>
 800f38a:	2001      	movs	r0, #1
 800f38c:	b00e      	add	sp, #56	@ 0x38
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
 800f390:	2001      	movs	r0, #1
 800f392:	4770      	bx	lr
 800f394:	6918      	ldr	r0, [r3, #16]
 800f396:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f39a:	f002 fa03 	bl	80117a4 <uxr_flash_output_streams>
 800f39e:	e7de      	b.n	800f35e <rmw_publish+0x7a>
 800f3a0:	0800f2dd 	.word	0x0800f2dd

0800f3a4 <rmw_create_publisher>:
 800f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a8:	b087      	sub	sp, #28
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f000 80d2 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	2900      	cmp	r1, #0
 800f3b4:	f000 80ce 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	6800      	ldr	r0, [r0, #0]
 800f3bc:	4615      	mov	r5, r2
 800f3be:	461f      	mov	r7, r3
 800f3c0:	f000 fcd0 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f3c4:	f080 0001 	eor.w	r0, r0, #1
 800f3c8:	b2c0      	uxtb	r0, r0
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f040 80c2 	bne.w	800f554 <rmw_create_publisher+0x1b0>
 800f3d0:	2d00      	cmp	r5, #0
 800f3d2:	f000 80bf 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3d6:	782b      	ldrb	r3, [r5, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 80bb 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3de:	2f00      	cmp	r7, #0
 800f3e0:	f000 80b8 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3e4:	485e      	ldr	r0, [pc, #376]	@ (800f560 <rmw_create_publisher+0x1bc>)
 800f3e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f3ea:	f006 fc83 	bl	8015cf4 <get_memory>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f000 80b0 	beq.w	800f554 <rmw_create_publisher+0x1b0>
 800f3f4:	6884      	ldr	r4, [r0, #8]
 800f3f6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f3fa:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f3fe:	f006 fce1 	bl	8015dc4 <rmw_get_implementation_identifier>
 800f402:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f406:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f40a:	4628      	mov	r0, r5
 800f40c:	f7f0 ff72 	bl	80002f4 <strlen>
 800f410:	3001      	adds	r0, #1
 800f412:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800f416:	283c      	cmp	r0, #60	@ 0x3c
 800f418:	f200 808f 	bhi.w	800f53a <rmw_create_publisher+0x196>
 800f41c:	462b      	mov	r3, r5
 800f41e:	4a51      	ldr	r2, [pc, #324]	@ (800f564 <rmw_create_publisher+0x1c0>)
 800f420:	213c      	movs	r1, #60	@ 0x3c
 800f422:	4650      	mov	r0, sl
 800f424:	f008 fab6 	bl	8017994 <sniprintf>
 800f428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f42c:	4639      	mov	r1, r7
 800f42e:	2250      	movs	r2, #80	@ 0x50
 800f430:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f432:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f436:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f43a:	f008 fc7a 	bl	8017d32 <memcpy>
 800f43e:	7a3b      	ldrb	r3, [r7, #8]
 800f440:	4630      	mov	r0, r6
 800f442:	4949      	ldr	r1, [pc, #292]	@ (800f568 <rmw_create_publisher+0x1c4>)
 800f444:	2b02      	cmp	r3, #2
 800f446:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f44a:	bf0c      	ite	eq
 800f44c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f450:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f454:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f456:	2300      	movs	r3, #0
 800f458:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f45c:	f000 fc90 	bl	800fd80 <get_message_typesupport_handle>
 800f460:	2800      	cmp	r0, #0
 800f462:	d06a      	beq.n	800f53a <rmw_create_publisher+0x196>
 800f464:	6842      	ldr	r2, [r0, #4]
 800f466:	61a2      	str	r2, [r4, #24]
 800f468:	2a00      	cmp	r2, #0
 800f46a:	d066      	beq.n	800f53a <rmw_create_publisher+0x196>
 800f46c:	4629      	mov	r1, r5
 800f46e:	463b      	mov	r3, r7
 800f470:	4648      	mov	r0, r9
 800f472:	f006 fcad 	bl	8015dd0 <create_topic>
 800f476:	6260      	str	r0, [r4, #36]	@ 0x24
 800f478:	2800      	cmp	r0, #0
 800f47a:	d062      	beq.n	800f542 <rmw_create_publisher+0x19e>
 800f47c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f480:	2103      	movs	r1, #3
 800f482:	2506      	movs	r5, #6
 800f484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f488:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f48c:	1c42      	adds	r2, r0, #1
 800f48e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f492:	f001 ff3f 	bl	8011314 <uxr_object_id>
 800f496:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f49a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f49e:	6120      	str	r0, [r4, #16]
 800f4a0:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f4a4:	6910      	ldr	r0, [r2, #16]
 800f4a6:	9500      	str	r5, [sp, #0]
 800f4a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f4ac:	6819      	ldr	r1, [r3, #0]
 800f4ae:	6922      	ldr	r2, [r4, #16]
 800f4b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f4b4:	f001 fdca 	bl	801104c <uxr_buffer_create_publisher_bin>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f4be:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f4c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f4c6:	f000 fbd3 	bl	800fc70 <run_xrce_session>
 800f4ca:	b3b0      	cbz	r0, 800f53a <rmw_create_publisher+0x196>
 800f4cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4d0:	2105      	movs	r1, #5
 800f4d2:	f10d 0a10 	add.w	sl, sp, #16
 800f4d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4da:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f4de:	1c42      	adds	r2, r0, #1
 800f4e0:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f4e4:	f001 ff16 	bl	8011314 <uxr_object_id>
 800f4e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f4ec:	4639      	mov	r1, r7
 800f4ee:	6160      	str	r0, [r4, #20]
 800f4f0:	691e      	ldr	r6, [r3, #16]
 800f4f2:	4650      	mov	r0, sl
 800f4f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4f8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f4fc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f500:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800f504:	f000 fbd0 	bl	800fca8 <convert_qos_profile>
 800f508:	9503      	str	r5, [sp, #12]
 800f50a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f50e:	9001      	str	r0, [sp, #4]
 800f510:	4630      	mov	r0, r6
 800f512:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f516:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	6839      	ldr	r1, [r7, #0]
 800f51e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f522:	f001 fdc3 	bl	80110ac <uxr_buffer_create_datawriter_bin>
 800f526:	4602      	mov	r2, r0
 800f528:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f52c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f530:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f534:	f000 fb9c 	bl	800fc70 <run_xrce_session>
 800f538:	b970      	cbnz	r0, 800f558 <rmw_create_publisher+0x1b4>
 800f53a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f53c:	b108      	cbz	r0, 800f542 <rmw_create_publisher+0x19e>
 800f53e:	f000 fb31 	bl	800fba4 <rmw_uxrce_fini_topic_memory>
 800f542:	4640      	mov	r0, r8
 800f544:	f04f 0800 	mov.w	r8, #0
 800f548:	f000 fad4 	bl	800faf4 <rmw_uxrce_fini_publisher_memory>
 800f54c:	4640      	mov	r0, r8
 800f54e:	b007      	add	sp, #28
 800f550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f554:	f04f 0800 	mov.w	r8, #0
 800f558:	4640      	mov	r0, r8
 800f55a:	b007      	add	sp, #28
 800f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f560:	240683fc 	.word	0x240683fc
 800f564:	08018ce0 	.word	0x08018ce0
 800f568:	08018cac 	.word	0x08018cac

0800f56c <rmw_publisher_get_actual_qos>:
 800f56c:	b178      	cbz	r0, 800f58e <rmw_publisher_get_actual_qos+0x22>
 800f56e:	b510      	push	{r4, lr}
 800f570:	fab1 f481 	clz	r4, r1
 800f574:	0964      	lsrs	r4, r4, #5
 800f576:	b141      	cbz	r1, 800f58a <rmw_publisher_get_actual_qos+0x1e>
 800f578:	6843      	ldr	r3, [r0, #4]
 800f57a:	2250      	movs	r2, #80	@ 0x50
 800f57c:	4608      	mov	r0, r1
 800f57e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f582:	f008 fbd6 	bl	8017d32 <memcpy>
 800f586:	4620      	mov	r0, r4
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	200b      	movs	r0, #11
 800f58c:	bd10      	pop	{r4, pc}
 800f58e:	200b      	movs	r0, #11
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop

0800f594 <rmw_destroy_publisher>:
 800f594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f598:	b128      	cbz	r0, 800f5a6 <rmw_destroy_publisher+0x12>
 800f59a:	4604      	mov	r4, r0
 800f59c:	6800      	ldr	r0, [r0, #0]
 800f59e:	460d      	mov	r5, r1
 800f5a0:	f000 fbe0 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f5a4:	b918      	cbnz	r0, 800f5ae <rmw_destroy_publisher+0x1a>
 800f5a6:	2401      	movs	r4, #1
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ae:	6863      	ldr	r3, [r4, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0f8      	beq.n	800f5a6 <rmw_destroy_publisher+0x12>
 800f5b4:	fab5 f485 	clz	r4, r5
 800f5b8:	0964      	lsrs	r4, r4, #5
 800f5ba:	2d00      	cmp	r5, #0
 800f5bc:	d0f3      	beq.n	800f5a6 <rmw_destroy_publisher+0x12>
 800f5be:	6828      	ldr	r0, [r5, #0]
 800f5c0:	f000 fbd0 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d0ee      	beq.n	800f5a6 <rmw_destroy_publisher+0x12>
 800f5c8:	686e      	ldr	r6, [r5, #4]
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	d0eb      	beq.n	800f5a6 <rmw_destroy_publisher+0x12>
 800f5ce:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800f5d0:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800f5d4:	f006 fc4c 	bl	8015e70 <destroy_topic>
 800f5d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f5dc:	6972      	ldr	r2, [r6, #20]
 800f5de:	6918      	ldr	r0, [r3, #16]
 800f5e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f5e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5e8:	6819      	ldr	r1, [r3, #0]
 800f5ea:	f001 fc7b 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f5ee:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	6932      	ldr	r2, [r6, #16]
 800f5f6:	6918      	ldr	r0, [r3, #16]
 800f5f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f5fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f600:	6819      	ldr	r1, [r3, #0]
 800f602:	f001 fc6f 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f606:	4606      	mov	r6, r0
 800f608:	6938      	ldr	r0, [r7, #16]
 800f60a:	4642      	mov	r2, r8
 800f60c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f610:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f614:	f000 fb2c 	bl	800fc70 <run_xrce_session>
 800f618:	693f      	ldr	r7, [r7, #16]
 800f61a:	4632      	mov	r2, r6
 800f61c:	4606      	mov	r6, r0
 800f61e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f622:	4638      	mov	r0, r7
 800f624:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f628:	f000 fb22 	bl	800fc70 <run_xrce_session>
 800f62c:	b126      	cbz	r6, 800f638 <rmw_destroy_publisher+0xa4>
 800f62e:	b118      	cbz	r0, 800f638 <rmw_destroy_publisher+0xa4>
 800f630:	4628      	mov	r0, r5
 800f632:	f000 fa5f 	bl	800faf4 <rmw_uxrce_fini_publisher_memory>
 800f636:	e7b7      	b.n	800f5a8 <rmw_destroy_publisher+0x14>
 800f638:	2402      	movs	r4, #2
 800f63a:	e7f9      	b.n	800f630 <rmw_destroy_publisher+0x9c>

0800f63c <rmw_destroy_service>:
 800f63c:	b570      	push	{r4, r5, r6, lr}
 800f63e:	b128      	cbz	r0, 800f64c <rmw_destroy_service+0x10>
 800f640:	4604      	mov	r4, r0
 800f642:	6800      	ldr	r0, [r0, #0]
 800f644:	460d      	mov	r5, r1
 800f646:	f000 fb8d 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f64a:	b910      	cbnz	r0, 800f652 <rmw_destroy_service+0x16>
 800f64c:	2401      	movs	r4, #1
 800f64e:	4620      	mov	r0, r4
 800f650:	bd70      	pop	{r4, r5, r6, pc}
 800f652:	6863      	ldr	r3, [r4, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0f9      	beq.n	800f64c <rmw_destroy_service+0x10>
 800f658:	2d00      	cmp	r5, #0
 800f65a:	d0f7      	beq.n	800f64c <rmw_destroy_service+0x10>
 800f65c:	6828      	ldr	r0, [r5, #0]
 800f65e:	f000 fb81 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f662:	2800      	cmp	r0, #0
 800f664:	d0f2      	beq.n	800f64c <rmw_destroy_service+0x10>
 800f666:	686e      	ldr	r6, [r5, #4]
 800f668:	2e00      	cmp	r6, #0
 800f66a:	d0ef      	beq.n	800f64c <rmw_destroy_service+0x10>
 800f66c:	6864      	ldr	r4, [r4, #4]
 800f66e:	6932      	ldr	r2, [r6, #16]
 800f670:	6920      	ldr	r0, [r4, #16]
 800f672:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f676:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f67a:	6819      	ldr	r1, [r3, #0]
 800f67c:	f001 fe7a 	bl	8011374 <uxr_buffer_cancel_data>
 800f680:	4602      	mov	r2, r0
 800f682:	6920      	ldr	r0, [r4, #16]
 800f684:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f688:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f68c:	f000 faf0 	bl	800fc70 <run_xrce_session>
 800f690:	6920      	ldr	r0, [r4, #16]
 800f692:	6932      	ldr	r2, [r6, #16]
 800f694:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f698:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f69c:	6819      	ldr	r1, [r3, #0]
 800f69e:	f001 fc21 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	6920      	ldr	r0, [r4, #16]
 800f6a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f6aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f6ae:	f000 fadf 	bl	800fc70 <run_xrce_session>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	bf14      	ite	ne
 800f6ba:	2400      	movne	r4, #0
 800f6bc:	2402      	moveq	r4, #2
 800f6be:	f000 fa45 	bl	800fb4c <rmw_uxrce_fini_service_memory>
 800f6c2:	e7c4      	b.n	800f64e <rmw_destroy_service+0x12>

0800f6c4 <rmw_destroy_subscription>:
 800f6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c8:	b128      	cbz	r0, 800f6d6 <rmw_destroy_subscription+0x12>
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	6800      	ldr	r0, [r0, #0]
 800f6ce:	460d      	mov	r5, r1
 800f6d0:	f000 fb48 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f6d4:	b918      	cbnz	r0, 800f6de <rmw_destroy_subscription+0x1a>
 800f6d6:	2401      	movs	r4, #1
 800f6d8:	4620      	mov	r0, r4
 800f6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6de:	6863      	ldr	r3, [r4, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d0f8      	beq.n	800f6d6 <rmw_destroy_subscription+0x12>
 800f6e4:	fab5 f485 	clz	r4, r5
 800f6e8:	0964      	lsrs	r4, r4, #5
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	d0f3      	beq.n	800f6d6 <rmw_destroy_subscription+0x12>
 800f6ee:	6828      	ldr	r0, [r5, #0]
 800f6f0:	f000 fb38 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d0ee      	beq.n	800f6d6 <rmw_destroy_subscription+0x12>
 800f6f8:	686e      	ldr	r6, [r5, #4]
 800f6fa:	2e00      	cmp	r6, #0
 800f6fc:	d0eb      	beq.n	800f6d6 <rmw_destroy_subscription+0x12>
 800f6fe:	6a37      	ldr	r7, [r6, #32]
 800f700:	6972      	ldr	r2, [r6, #20]
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f708:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f70c:	6819      	ldr	r1, [r3, #0]
 800f70e:	f001 fe31 	bl	8011374 <uxr_buffer_cancel_data>
 800f712:	4602      	mov	r2, r0
 800f714:	6938      	ldr	r0, [r7, #16]
 800f716:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f71a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f71e:	f000 faa7 	bl	800fc70 <run_xrce_session>
 800f722:	69f0      	ldr	r0, [r6, #28]
 800f724:	f006 fba4 	bl	8015e70 <destroy_topic>
 800f728:	6a33      	ldr	r3, [r6, #32]
 800f72a:	6972      	ldr	r2, [r6, #20]
 800f72c:	6918      	ldr	r0, [r3, #16]
 800f72e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f736:	6819      	ldr	r1, [r3, #0]
 800f738:	f001 fbd4 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f73c:	6a33      	ldr	r3, [r6, #32]
 800f73e:	4680      	mov	r8, r0
 800f740:	6932      	ldr	r2, [r6, #16]
 800f742:	6918      	ldr	r0, [r3, #16]
 800f744:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f748:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f74c:	6819      	ldr	r1, [r3, #0]
 800f74e:	f001 fbc9 	bl	8010ee4 <uxr_buffer_delete_entity>
 800f752:	4606      	mov	r6, r0
 800f754:	6938      	ldr	r0, [r7, #16]
 800f756:	4642      	mov	r2, r8
 800f758:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f75c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f760:	f000 fa86 	bl	800fc70 <run_xrce_session>
 800f764:	693f      	ldr	r7, [r7, #16]
 800f766:	4632      	mov	r2, r6
 800f768:	4606      	mov	r6, r0
 800f76a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f76e:	4638      	mov	r0, r7
 800f770:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f774:	f000 fa7c 	bl	800fc70 <run_xrce_session>
 800f778:	b126      	cbz	r6, 800f784 <rmw_destroy_subscription+0xc0>
 800f77a:	b118      	cbz	r0, 800f784 <rmw_destroy_subscription+0xc0>
 800f77c:	4628      	mov	r0, r5
 800f77e:	f000 f9cf 	bl	800fb20 <rmw_uxrce_fini_subscription_memory>
 800f782:	e7a9      	b.n	800f6d8 <rmw_destroy_subscription+0x14>
 800f784:	2402      	movs	r4, #2
 800f786:	e7f9      	b.n	800f77c <rmw_destroy_subscription+0xb8>

0800f788 <rmw_uxrce_transport_init>:
 800f788:	b508      	push	{r3, lr}
 800f78a:	b108      	cbz	r0, 800f790 <rmw_uxrce_transport_init+0x8>
 800f78c:	f100 0210 	add.w	r2, r0, #16
 800f790:	b139      	cbz	r1, 800f7a2 <rmw_uxrce_transport_init+0x1a>
 800f792:	6949      	ldr	r1, [r1, #20]
 800f794:	4610      	mov	r0, r2
 800f796:	f001 fd85 	bl	80112a4 <uxr_init_custom_transport>
 800f79a:	f080 0001 	eor.w	r0, r0, #1
 800f79e:	b2c0      	uxtb	r0, r0
 800f7a0:	bd08      	pop	{r3, pc}
 800f7a2:	4b04      	ldr	r3, [pc, #16]	@ (800f7b4 <rmw_uxrce_transport_init+0x2c>)
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	6859      	ldr	r1, [r3, #4]
 800f7a8:	f001 fd7c 	bl	80112a4 <uxr_init_custom_transport>
 800f7ac:	f080 0001 	eor.w	r0, r0, #1
 800f7b0:	b2c0      	uxtb	r0, r0
 800f7b2:	bd08      	pop	{r3, pc}
 800f7b4:	24063ac4 	.word	0x24063ac4

0800f7b8 <rmw_uros_epoch_nanos>:
 800f7b8:	4b05      	ldr	r3, [pc, #20]	@ (800f7d0 <rmw_uros_epoch_nanos+0x18>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	b123      	cbz	r3, 800f7c8 <rmw_uros_epoch_nanos+0x10>
 800f7be:	6898      	ldr	r0, [r3, #8]
 800f7c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7c4:	f001 bfe4 	b.w	8011790 <uxr_epoch_nanos>
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	2406841c 	.word	0x2406841c

0800f7d4 <rmw_uros_sync_session>:
 800f7d4:	b508      	push	{r3, lr}
 800f7d6:	4b07      	ldr	r3, [pc, #28]	@ (800f7f4 <rmw_uros_sync_session+0x20>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	b14b      	cbz	r3, 800f7f0 <rmw_uros_sync_session+0x1c>
 800f7dc:	4601      	mov	r1, r0
 800f7de:	6898      	ldr	r0, [r3, #8]
 800f7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7e4:	f002 fbd8 	bl	8011f98 <uxr_sync_session>
 800f7e8:	f080 0001 	eor.w	r0, r0, #1
 800f7ec:	b2c0      	uxtb	r0, r0
 800f7ee:	bd08      	pop	{r3, pc}
 800f7f0:	2001      	movs	r0, #1
 800f7f2:	bd08      	pop	{r3, pc}
 800f7f4:	2406841c 	.word	0x2406841c

0800f7f8 <rmw_uxrce_init_service_memory>:
 800f7f8:	b1e2      	cbz	r2, 800f834 <rmw_uxrce_init_service_memory+0x3c>
 800f7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fe:	7b05      	ldrb	r5, [r0, #12]
 800f800:	4606      	mov	r6, r0
 800f802:	b9ad      	cbnz	r5, 800f830 <rmw_uxrce_init_service_memory+0x38>
 800f804:	23c8      	movs	r3, #200	@ 0xc8
 800f806:	4617      	mov	r7, r2
 800f808:	460c      	mov	r4, r1
 800f80a:	46a8      	mov	r8, r5
 800f80c:	6083      	str	r3, [r0, #8]
 800f80e:	f240 1301 	movw	r3, #257	@ 0x101
 800f812:	e9c0 5500 	strd	r5, r5, [r0]
 800f816:	8183      	strh	r3, [r0, #12]
 800f818:	3501      	adds	r5, #1
 800f81a:	4621      	mov	r1, r4
 800f81c:	4630      	mov	r0, r6
 800f81e:	f006 fa79 	bl	8015d14 <put_memory>
 800f822:	42af      	cmp	r7, r5
 800f824:	60a4      	str	r4, [r4, #8]
 800f826:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f82a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f82e:	d1f3      	bne.n	800f818 <rmw_uxrce_init_service_memory+0x20>
 800f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop

0800f838 <rmw_uxrce_init_client_memory>:
 800f838:	b1e2      	cbz	r2, 800f874 <rmw_uxrce_init_client_memory+0x3c>
 800f83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	7b05      	ldrb	r5, [r0, #12]
 800f840:	4606      	mov	r6, r0
 800f842:	b9ad      	cbnz	r5, 800f870 <rmw_uxrce_init_client_memory+0x38>
 800f844:	23c8      	movs	r3, #200	@ 0xc8
 800f846:	4617      	mov	r7, r2
 800f848:	460c      	mov	r4, r1
 800f84a:	46a8      	mov	r8, r5
 800f84c:	6083      	str	r3, [r0, #8]
 800f84e:	f240 1301 	movw	r3, #257	@ 0x101
 800f852:	e9c0 5500 	strd	r5, r5, [r0]
 800f856:	8183      	strh	r3, [r0, #12]
 800f858:	3501      	adds	r5, #1
 800f85a:	4621      	mov	r1, r4
 800f85c:	4630      	mov	r0, r6
 800f85e:	f006 fa59 	bl	8015d14 <put_memory>
 800f862:	42af      	cmp	r7, r5
 800f864:	60a4      	str	r4, [r4, #8]
 800f866:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f86a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f86e:	d1f3      	bne.n	800f858 <rmw_uxrce_init_client_memory+0x20>
 800f870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop

0800f878 <rmw_uxrce_init_publisher_memory>:
 800f878:	b1e2      	cbz	r2, 800f8b4 <rmw_uxrce_init_publisher_memory+0x3c>
 800f87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87e:	7b05      	ldrb	r5, [r0, #12]
 800f880:	4606      	mov	r6, r0
 800f882:	b9ad      	cbnz	r5, 800f8b0 <rmw_uxrce_init_publisher_memory+0x38>
 800f884:	23d8      	movs	r3, #216	@ 0xd8
 800f886:	4617      	mov	r7, r2
 800f888:	460c      	mov	r4, r1
 800f88a:	46a8      	mov	r8, r5
 800f88c:	6083      	str	r3, [r0, #8]
 800f88e:	f240 1301 	movw	r3, #257	@ 0x101
 800f892:	e9c0 5500 	strd	r5, r5, [r0]
 800f896:	8183      	strh	r3, [r0, #12]
 800f898:	3501      	adds	r5, #1
 800f89a:	4621      	mov	r1, r4
 800f89c:	4630      	mov	r0, r6
 800f89e:	f006 fa39 	bl	8015d14 <put_memory>
 800f8a2:	42af      	cmp	r7, r5
 800f8a4:	60a4      	str	r4, [r4, #8]
 800f8a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f8aa:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f8ae:	d1f3      	bne.n	800f898 <rmw_uxrce_init_publisher_memory+0x20>
 800f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop

0800f8b8 <rmw_uxrce_init_subscription_memory>:
 800f8b8:	b1e2      	cbz	r2, 800f8f4 <rmw_uxrce_init_subscription_memory+0x3c>
 800f8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8be:	7b05      	ldrb	r5, [r0, #12]
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	b9ad      	cbnz	r5, 800f8f0 <rmw_uxrce_init_subscription_memory+0x38>
 800f8c4:	23d8      	movs	r3, #216	@ 0xd8
 800f8c6:	4617      	mov	r7, r2
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	46a8      	mov	r8, r5
 800f8cc:	6083      	str	r3, [r0, #8]
 800f8ce:	f240 1301 	movw	r3, #257	@ 0x101
 800f8d2:	e9c0 5500 	strd	r5, r5, [r0]
 800f8d6:	8183      	strh	r3, [r0, #12]
 800f8d8:	3501      	adds	r5, #1
 800f8da:	4621      	mov	r1, r4
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f006 fa19 	bl	8015d14 <put_memory>
 800f8e2:	42af      	cmp	r7, r5
 800f8e4:	60a4      	str	r4, [r4, #8]
 800f8e6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f8ea:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f8ee:	d1f3      	bne.n	800f8d8 <rmw_uxrce_init_subscription_memory+0x20>
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop

0800f8f8 <rmw_uxrce_init_node_memory>:
 800f8f8:	b1e2      	cbz	r2, 800f934 <rmw_uxrce_init_node_memory+0x3c>
 800f8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fe:	7b05      	ldrb	r5, [r0, #12]
 800f900:	4606      	mov	r6, r0
 800f902:	b9ad      	cbnz	r5, 800f930 <rmw_uxrce_init_node_memory+0x38>
 800f904:	23a4      	movs	r3, #164	@ 0xa4
 800f906:	4617      	mov	r7, r2
 800f908:	460c      	mov	r4, r1
 800f90a:	46a8      	mov	r8, r5
 800f90c:	6083      	str	r3, [r0, #8]
 800f90e:	f240 1301 	movw	r3, #257	@ 0x101
 800f912:	e9c0 5500 	strd	r5, r5, [r0]
 800f916:	8183      	strh	r3, [r0, #12]
 800f918:	3501      	adds	r5, #1
 800f91a:	4621      	mov	r1, r4
 800f91c:	4630      	mov	r0, r6
 800f91e:	f006 f9f9 	bl	8015d14 <put_memory>
 800f922:	42af      	cmp	r7, r5
 800f924:	60a4      	str	r4, [r4, #8]
 800f926:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f92a:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f92e:	d1f3      	bne.n	800f918 <rmw_uxrce_init_node_memory+0x20>
 800f930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop

0800f938 <rmw_uxrce_init_session_memory>:
 800f938:	b1ea      	cbz	r2, 800f976 <rmw_uxrce_init_session_memory+0x3e>
 800f93a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f93e:	7b05      	ldrb	r5, [r0, #12]
 800f940:	4606      	mov	r6, r0
 800f942:	b9b5      	cbnz	r5, 800f972 <rmw_uxrce_init_session_memory+0x3a>
 800f944:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800f948:	f240 1301 	movw	r3, #257	@ 0x101
 800f94c:	4617      	mov	r7, r2
 800f94e:	460c      	mov	r4, r1
 800f950:	46a9      	mov	r9, r5
 800f952:	f8c0 8008 	str.w	r8, [r0, #8]
 800f956:	8183      	strh	r3, [r0, #12]
 800f958:	e9c0 5500 	strd	r5, r5, [r0]
 800f95c:	3501      	adds	r5, #1
 800f95e:	4621      	mov	r1, r4
 800f960:	4630      	mov	r0, r6
 800f962:	f006 f9d7 	bl	8015d14 <put_memory>
 800f966:	42af      	cmp	r7, r5
 800f968:	60a4      	str	r4, [r4, #8]
 800f96a:	f884 900c 	strb.w	r9, [r4, #12]
 800f96e:	4444      	add	r4, r8
 800f970:	d1f4      	bne.n	800f95c <rmw_uxrce_init_session_memory+0x24>
 800f972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f976:	4770      	bx	lr

0800f978 <rmw_uxrce_init_topic_memory>:
 800f978:	b1e2      	cbz	r2, 800f9b4 <rmw_uxrce_init_topic_memory+0x3c>
 800f97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97e:	7b05      	ldrb	r5, [r0, #12]
 800f980:	4606      	mov	r6, r0
 800f982:	b9ad      	cbnz	r5, 800f9b0 <rmw_uxrce_init_topic_memory+0x38>
 800f984:	231c      	movs	r3, #28
 800f986:	4617      	mov	r7, r2
 800f988:	460c      	mov	r4, r1
 800f98a:	46a8      	mov	r8, r5
 800f98c:	6083      	str	r3, [r0, #8]
 800f98e:	f240 1301 	movw	r3, #257	@ 0x101
 800f992:	e9c0 5500 	strd	r5, r5, [r0]
 800f996:	8183      	strh	r3, [r0, #12]
 800f998:	3501      	adds	r5, #1
 800f99a:	4621      	mov	r1, r4
 800f99c:	4630      	mov	r0, r6
 800f99e:	f006 f9b9 	bl	8015d14 <put_memory>
 800f9a2:	42af      	cmp	r7, r5
 800f9a4:	60a4      	str	r4, [r4, #8]
 800f9a6:	f104 041c 	add.w	r4, r4, #28
 800f9aa:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f9ae:	d1f3      	bne.n	800f998 <rmw_uxrce_init_topic_memory+0x20>
 800f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop

0800f9b8 <rmw_uxrce_init_static_input_buffer_memory>:
 800f9b8:	b1ea      	cbz	r2, 800f9f6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9be:	7b05      	ldrb	r5, [r0, #12]
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	b9b5      	cbnz	r5, 800f9f2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f9c4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f9c8:	4617      	mov	r7, r2
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	46a8      	mov	r8, r5
 800f9ce:	6083      	str	r3, [r0, #8]
 800f9d0:	f240 1301 	movw	r3, #257	@ 0x101
 800f9d4:	e9c0 5500 	strd	r5, r5, [r0]
 800f9d8:	8183      	strh	r3, [r0, #12]
 800f9da:	3501      	adds	r5, #1
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f006 f998 	bl	8015d14 <put_memory>
 800f9e4:	42af      	cmp	r7, r5
 800f9e6:	60a4      	str	r4, [r4, #8]
 800f9e8:	f884 800c 	strb.w	r8, [r4, #12]
 800f9ec:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f9f0:	d1f3      	bne.n	800f9da <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f6:	4770      	bx	lr

0800f9f8 <rmw_uxrce_init_init_options_impl_memory>:
 800f9f8:	b1e2      	cbz	r2, 800fa34 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fe:	7b05      	ldrb	r5, [r0, #12]
 800fa00:	4606      	mov	r6, r0
 800fa02:	b9ad      	cbnz	r5, 800fa30 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fa04:	232c      	movs	r3, #44	@ 0x2c
 800fa06:	4617      	mov	r7, r2
 800fa08:	460c      	mov	r4, r1
 800fa0a:	46a8      	mov	r8, r5
 800fa0c:	6083      	str	r3, [r0, #8]
 800fa0e:	f240 1301 	movw	r3, #257	@ 0x101
 800fa12:	e9c0 5500 	strd	r5, r5, [r0]
 800fa16:	8183      	strh	r3, [r0, #12]
 800fa18:	3501      	adds	r5, #1
 800fa1a:	4621      	mov	r1, r4
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f006 f979 	bl	8015d14 <put_memory>
 800fa22:	42af      	cmp	r7, r5
 800fa24:	60a4      	str	r4, [r4, #8]
 800fa26:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fa2a:	f804 8c20 	strb.w	r8, [r4, #-32]
 800fa2e:	d1f3      	bne.n	800fa18 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop

0800fa38 <rmw_uxrce_init_wait_set_memory>:
 800fa38:	b1e2      	cbz	r2, 800fa74 <rmw_uxrce_init_wait_set_memory+0x3c>
 800fa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3e:	7b05      	ldrb	r5, [r0, #12]
 800fa40:	4606      	mov	r6, r0
 800fa42:	b9ad      	cbnz	r5, 800fa70 <rmw_uxrce_init_wait_set_memory+0x38>
 800fa44:	231c      	movs	r3, #28
 800fa46:	4617      	mov	r7, r2
 800fa48:	460c      	mov	r4, r1
 800fa4a:	46a8      	mov	r8, r5
 800fa4c:	6083      	str	r3, [r0, #8]
 800fa4e:	f240 1301 	movw	r3, #257	@ 0x101
 800fa52:	e9c0 5500 	strd	r5, r5, [r0]
 800fa56:	8183      	strh	r3, [r0, #12]
 800fa58:	3501      	adds	r5, #1
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f006 f959 	bl	8015d14 <put_memory>
 800fa62:	42af      	cmp	r7, r5
 800fa64:	60a4      	str	r4, [r4, #8]
 800fa66:	f104 041c 	add.w	r4, r4, #28
 800fa6a:	f804 8c10 	strb.w	r8, [r4, #-16]
 800fa6e:	d1f3      	bne.n	800fa58 <rmw_uxrce_init_wait_set_memory+0x20>
 800fa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop

0800fa78 <rmw_uxrce_init_guard_condition_memory>:
 800fa78:	b1e2      	cbz	r2, 800fab4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	7b05      	ldrb	r5, [r0, #12]
 800fa80:	4606      	mov	r6, r0
 800fa82:	b9ad      	cbnz	r5, 800fab0 <rmw_uxrce_init_guard_condition_memory+0x38>
 800fa84:	2320      	movs	r3, #32
 800fa86:	4617      	mov	r7, r2
 800fa88:	460c      	mov	r4, r1
 800fa8a:	46a8      	mov	r8, r5
 800fa8c:	6083      	str	r3, [r0, #8]
 800fa8e:	f240 1301 	movw	r3, #257	@ 0x101
 800fa92:	e9c0 5500 	strd	r5, r5, [r0]
 800fa96:	8183      	strh	r3, [r0, #12]
 800fa98:	3501      	adds	r5, #1
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f006 f939 	bl	8015d14 <put_memory>
 800faa2:	42af      	cmp	r7, r5
 800faa4:	60a4      	str	r4, [r4, #8]
 800faa6:	f104 0420 	add.w	r4, r4, #32
 800faaa:	f804 8c14 	strb.w	r8, [r4, #-20]
 800faae:	d1f3      	bne.n	800fa98 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop

0800fab8 <rmw_uxrce_fini_session_memory>:
 800fab8:	4601      	mov	r1, r0
 800faba:	4801      	ldr	r0, [pc, #4]	@ (800fac0 <rmw_uxrce_fini_session_memory+0x8>)
 800fabc:	f006 b92a 	b.w	8015d14 <put_memory>
 800fac0:	2406841c 	.word	0x2406841c

0800fac4 <rmw_uxrce_fini_node_memory>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4604      	mov	r4, r0
 800fac8:	6800      	ldr	r0, [r0, #0]
 800faca:	b128      	cbz	r0, 800fad8 <rmw_uxrce_fini_node_memory+0x14>
 800facc:	4b07      	ldr	r3, [pc, #28]	@ (800faec <rmw_uxrce_fini_node_memory+0x28>)
 800face:	6819      	ldr	r1, [r3, #0]
 800fad0:	f7f0 fc06 	bl	80002e0 <strcmp>
 800fad4:	b940      	cbnz	r0, 800fae8 <rmw_uxrce_fini_node_memory+0x24>
 800fad6:	6020      	str	r0, [r4, #0]
 800fad8:	6861      	ldr	r1, [r4, #4]
 800fada:	b129      	cbz	r1, 800fae8 <rmw_uxrce_fini_node_memory+0x24>
 800fadc:	2500      	movs	r5, #0
 800fade:	4804      	ldr	r0, [pc, #16]	@ (800faf0 <rmw_uxrce_fini_node_memory+0x2c>)
 800fae0:	610d      	str	r5, [r1, #16]
 800fae2:	f006 f917 	bl	8015d14 <put_memory>
 800fae6:	6065      	str	r5, [r4, #4]
 800fae8:	bd38      	pop	{r3, r4, r5, pc}
 800faea:	bf00      	nop
 800faec:	080194bc 	.word	0x080194bc
 800faf0:	240683ec 	.word	0x240683ec

0800faf4 <rmw_uxrce_fini_publisher_memory>:
 800faf4:	b510      	push	{r4, lr}
 800faf6:	4604      	mov	r4, r0
 800faf8:	6800      	ldr	r0, [r0, #0]
 800fafa:	b128      	cbz	r0, 800fb08 <rmw_uxrce_fini_publisher_memory+0x14>
 800fafc:	4b06      	ldr	r3, [pc, #24]	@ (800fb18 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fafe:	6819      	ldr	r1, [r3, #0]
 800fb00:	f7f0 fbee 	bl	80002e0 <strcmp>
 800fb04:	b938      	cbnz	r0, 800fb16 <rmw_uxrce_fini_publisher_memory+0x22>
 800fb06:	6020      	str	r0, [r4, #0]
 800fb08:	6861      	ldr	r1, [r4, #4]
 800fb0a:	b121      	cbz	r1, 800fb16 <rmw_uxrce_fini_publisher_memory+0x22>
 800fb0c:	4803      	ldr	r0, [pc, #12]	@ (800fb1c <rmw_uxrce_fini_publisher_memory+0x28>)
 800fb0e:	f006 f901 	bl	8015d14 <put_memory>
 800fb12:	2300      	movs	r3, #0
 800fb14:	6063      	str	r3, [r4, #4]
 800fb16:	bd10      	pop	{r4, pc}
 800fb18:	080194bc 	.word	0x080194bc
 800fb1c:	240683fc 	.word	0x240683fc

0800fb20 <rmw_uxrce_fini_subscription_memory>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4604      	mov	r4, r0
 800fb24:	6800      	ldr	r0, [r0, #0]
 800fb26:	b128      	cbz	r0, 800fb34 <rmw_uxrce_fini_subscription_memory+0x14>
 800fb28:	4b06      	ldr	r3, [pc, #24]	@ (800fb44 <rmw_uxrce_fini_subscription_memory+0x24>)
 800fb2a:	6819      	ldr	r1, [r3, #0]
 800fb2c:	f7f0 fbd8 	bl	80002e0 <strcmp>
 800fb30:	b938      	cbnz	r0, 800fb42 <rmw_uxrce_fini_subscription_memory+0x22>
 800fb32:	6020      	str	r0, [r4, #0]
 800fb34:	6861      	ldr	r1, [r4, #4]
 800fb36:	b121      	cbz	r1, 800fb42 <rmw_uxrce_fini_subscription_memory+0x22>
 800fb38:	4803      	ldr	r0, [pc, #12]	@ (800fb48 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fb3a:	f006 f8eb 	bl	8015d14 <put_memory>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	6063      	str	r3, [r4, #4]
 800fb42:	bd10      	pop	{r4, pc}
 800fb44:	080194bc 	.word	0x080194bc
 800fb48:	2406843c 	.word	0x2406843c

0800fb4c <rmw_uxrce_fini_service_memory>:
 800fb4c:	b510      	push	{r4, lr}
 800fb4e:	4604      	mov	r4, r0
 800fb50:	6800      	ldr	r0, [r0, #0]
 800fb52:	b128      	cbz	r0, 800fb60 <rmw_uxrce_fini_service_memory+0x14>
 800fb54:	4b06      	ldr	r3, [pc, #24]	@ (800fb70 <rmw_uxrce_fini_service_memory+0x24>)
 800fb56:	6819      	ldr	r1, [r3, #0]
 800fb58:	f7f0 fbc2 	bl	80002e0 <strcmp>
 800fb5c:	b938      	cbnz	r0, 800fb6e <rmw_uxrce_fini_service_memory+0x22>
 800fb5e:	6020      	str	r0, [r4, #0]
 800fb60:	6861      	ldr	r1, [r4, #4]
 800fb62:	b121      	cbz	r1, 800fb6e <rmw_uxrce_fini_service_memory+0x22>
 800fb64:	4803      	ldr	r0, [pc, #12]	@ (800fb74 <rmw_uxrce_fini_service_memory+0x28>)
 800fb66:	f006 f8d5 	bl	8015d14 <put_memory>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6063      	str	r3, [r4, #4]
 800fb6e:	bd10      	pop	{r4, pc}
 800fb70:	080194bc 	.word	0x080194bc
 800fb74:	2406840c 	.word	0x2406840c

0800fb78 <rmw_uxrce_fini_client_memory>:
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	6800      	ldr	r0, [r0, #0]
 800fb7e:	b128      	cbz	r0, 800fb8c <rmw_uxrce_fini_client_memory+0x14>
 800fb80:	4b06      	ldr	r3, [pc, #24]	@ (800fb9c <rmw_uxrce_fini_client_memory+0x24>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	f7f0 fbac 	bl	80002e0 <strcmp>
 800fb88:	b938      	cbnz	r0, 800fb9a <rmw_uxrce_fini_client_memory+0x22>
 800fb8a:	6020      	str	r0, [r4, #0]
 800fb8c:	6861      	ldr	r1, [r4, #4]
 800fb8e:	b121      	cbz	r1, 800fb9a <rmw_uxrce_fini_client_memory+0x22>
 800fb90:	4803      	ldr	r0, [pc, #12]	@ (800fba0 <rmw_uxrce_fini_client_memory+0x28>)
 800fb92:	f006 f8bf 	bl	8015d14 <put_memory>
 800fb96:	2300      	movs	r3, #0
 800fb98:	6063      	str	r3, [r4, #4]
 800fb9a:	bd10      	pop	{r4, pc}
 800fb9c:	080194bc 	.word	0x080194bc
 800fba0:	24063b1c 	.word	0x24063b1c

0800fba4 <rmw_uxrce_fini_topic_memory>:
 800fba4:	b510      	push	{r4, lr}
 800fba6:	4604      	mov	r4, r0
 800fba8:	4803      	ldr	r0, [pc, #12]	@ (800fbb8 <rmw_uxrce_fini_topic_memory+0x14>)
 800fbaa:	4621      	mov	r1, r4
 800fbac:	f006 f8b2 	bl	8015d14 <put_memory>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61a3      	str	r3, [r4, #24]
 800fbb4:	bd10      	pop	{r4, pc}
 800fbb6:	bf00      	nop
 800fbb8:	2406844c 	.word	0x2406844c

0800fbbc <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	492b      	ldr	r1, [pc, #172]	@ (800fc6c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800fbc0:	b530      	push	{r4, r5, lr}
 800fbc2:	680d      	ldr	r5, [r1, #0]
 800fbc4:	ac03      	add	r4, sp, #12
 800fbc6:	e884 000c 	stmia.w	r4, {r2, r3}
 800fbca:	461c      	mov	r4, r3
 800fbcc:	2d00      	cmp	r5, #0
 800fbce:	d04b      	beq.n	800fc68 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800fbd0:	462b      	mov	r3, r5
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	689a      	ldr	r2, [r3, #8]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fbdc:	4290      	cmp	r0, r2
 800fbde:	bf08      	it	eq
 800fbe0:	3101      	addeq	r1, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1f6      	bne.n	800fbd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fbe6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d029      	beq.n	800fc42 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fbee:	d820      	bhi.n	800fc32 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800fbf0:	428c      	cmp	r4, r1
 800fbf2:	d828      	bhi.n	800fc46 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800fbf4:	fab4 f284 	clz	r2, r4
 800fbf8:	0952      	lsrs	r2, r2, #5
 800fbfa:	b324      	cbz	r4, 800fc46 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800fbfc:	b1dd      	cbz	r5, 800fc36 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800fbfe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fc02:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800fc06:	e001      	b.n	800fc0c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800fc08:	686d      	ldr	r5, [r5, #4]
 800fc0a:	b1ad      	cbz	r5, 800fc38 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800fc0c:	68ab      	ldr	r3, [r5, #8]
 800fc0e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800fc12:	4288      	cmp	r0, r1
 800fc14:	d1f8      	bne.n	800fc08 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800fc16:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800fc1a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800fc1e:	4561      	cmp	r1, ip
 800fc20:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fc24:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fc28:	daee      	bge.n	800fc08 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800fc2a:	468c      	mov	ip, r1
 800fc2c:	461c      	mov	r4, r3
 800fc2e:	462a      	mov	r2, r5
 800fc30:	e7ea      	b.n	800fc08 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d0dc      	beq.n	800fbf0 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800fc36:	2200      	movs	r2, #0
 800fc38:	4610      	mov	r0, r2
 800fc3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc3e:	b002      	add	sp, #8
 800fc40:	4770      	bx	lr
 800fc42:	428c      	cmp	r4, r1
 800fc44:	d905      	bls.n	800fc52 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800fc46:	4809      	ldr	r0, [pc, #36]	@ (800fc6c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800fc48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc4c:	b002      	add	sp, #8
 800fc4e:	f006 b851 	b.w	8015cf4 <get_memory>
 800fc52:	fab4 f284 	clz	r2, r4
 800fc56:	0952      	lsrs	r2, r2, #5
 800fc58:	2c00      	cmp	r4, #0
 800fc5a:	d1ed      	bne.n	800fc38 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800fc5c:	4803      	ldr	r0, [pc, #12]	@ (800fc6c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800fc5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc62:	b002      	add	sp, #8
 800fc64:	f006 b846 	b.w	8015cf4 <get_memory>
 800fc68:	4629      	mov	r1, r5
 800fc6a:	e7bc      	b.n	800fbe6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fc6c:	2406842c 	.word	0x2406842c

0800fc70 <run_xrce_session>:
 800fc70:	b510      	push	{r4, lr}
 800fc72:	788c      	ldrb	r4, [r1, #2]
 800fc74:	b086      	sub	sp, #24
 800fc76:	2c01      	cmp	r4, #1
 800fc78:	f8ad 200e 	strh.w	r2, [sp, #14]
 800fc7c:	d00c      	beq.n	800fc98 <run_xrce_session+0x28>
 800fc7e:	2401      	movs	r4, #1
 800fc80:	4619      	mov	r1, r3
 800fc82:	f10d 020e 	add.w	r2, sp, #14
 800fc86:	f10d 0317 	add.w	r3, sp, #23
 800fc8a:	9400      	str	r4, [sp, #0]
 800fc8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc90:	f002 f92c 	bl	8011eec <uxr_run_session_until_all_status>
 800fc94:	b006      	add	sp, #24
 800fc96:	bd10      	pop	{r4, pc}
 800fc98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc9c:	f001 fd82 	bl	80117a4 <uxr_flash_output_streams>
 800fca0:	4620      	mov	r0, r4
 800fca2:	b006      	add	sp, #24
 800fca4:	bd10      	pop	{r4, pc}
 800fca6:	bf00      	nop

0800fca8 <convert_qos_profile>:
 800fca8:	7a4a      	ldrb	r2, [r1, #9]
 800fcaa:	f891 c008 	ldrb.w	ip, [r1, #8]
 800fcae:	2a02      	cmp	r2, #2
 800fcb0:	bf18      	it	ne
 800fcb2:	2200      	movne	r2, #0
 800fcb4:	7002      	strb	r2, [r0, #0]
 800fcb6:	f1ac 0202 	sub.w	r2, ip, #2
 800fcba:	fab2 f282 	clz	r2, r2
 800fcbe:	0952      	lsrs	r2, r2, #5
 800fcc0:	7042      	strb	r2, [r0, #1]
 800fcc2:	780a      	ldrb	r2, [r1, #0]
 800fcc4:	8889      	ldrh	r1, [r1, #4]
 800fcc6:	f1a2 0202 	sub.w	r2, r2, #2
 800fcca:	8081      	strh	r1, [r0, #4]
 800fccc:	fab2 f282 	clz	r2, r2
 800fcd0:	0952      	lsrs	r2, r2, #5
 800fcd2:	7082      	strb	r2, [r0, #2]
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop

0800fcd8 <generate_type_name>:
 800fcd8:	2300      	movs	r3, #0
 800fcda:	b530      	push	{r4, r5, lr}
 800fcdc:	700b      	strb	r3, [r1, #0]
 800fcde:	b087      	sub	sp, #28
 800fce0:	6803      	ldr	r3, [r0, #0]
 800fce2:	4614      	mov	r4, r2
 800fce4:	b1bb      	cbz	r3, 800fd16 <generate_type_name+0x3e>
 800fce6:	4a0e      	ldr	r2, [pc, #56]	@ (800fd20 <generate_type_name+0x48>)
 800fce8:	4615      	mov	r5, r2
 800fcea:	9500      	str	r5, [sp, #0]
 800fcec:	9203      	str	r2, [sp, #12]
 800fcee:	4d0d      	ldr	r5, [pc, #52]	@ (800fd24 <generate_type_name+0x4c>)
 800fcf0:	6842      	ldr	r2, [r0, #4]
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	490c      	ldr	r1, [pc, #48]	@ (800fd28 <generate_type_name+0x50>)
 800fcf6:	9204      	str	r2, [sp, #16]
 800fcf8:	9105      	str	r1, [sp, #20]
 800fcfa:	9102      	str	r1, [sp, #8]
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4a0b      	ldr	r2, [pc, #44]	@ (800fd2c <generate_type_name+0x54>)
 800fd00:	9501      	str	r5, [sp, #4]
 800fd02:	f007 fe47 	bl	8017994 <sniprintf>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	bfa8      	it	ge
 800fd0a:	4284      	cmpge	r4, r0
 800fd0c:	bfcc      	ite	gt
 800fd0e:	2001      	movgt	r0, #1
 800fd10:	2000      	movle	r0, #0
 800fd12:	b007      	add	sp, #28
 800fd14:	bd30      	pop	{r4, r5, pc}
 800fd16:	4b06      	ldr	r3, [pc, #24]	@ (800fd30 <generate_type_name+0x58>)
 800fd18:	4a01      	ldr	r2, [pc, #4]	@ (800fd20 <generate_type_name+0x48>)
 800fd1a:	461d      	mov	r5, r3
 800fd1c:	e7e5      	b.n	800fcea <generate_type_name+0x12>
 800fd1e:	bf00      	nop
 800fd20:	08018cd0 	.word	0x08018cd0
 800fd24:	08018ce8 	.word	0x08018ce8
 800fd28:	08018ce4 	.word	0x08018ce4
 800fd2c:	08018cd4 	.word	0x08018cd4
 800fd30:	08019294 	.word	0x08019294

0800fd34 <generate_topic_name>:
 800fd34:	b530      	push	{r4, r5, lr}
 800fd36:	4614      	mov	r4, r2
 800fd38:	b083      	sub	sp, #12
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	4b07      	ldr	r3, [pc, #28]	@ (800fd5c <generate_topic_name+0x28>)
 800fd3e:	4a08      	ldr	r2, [pc, #32]	@ (800fd60 <generate_topic_name+0x2c>)
 800fd40:	4608      	mov	r0, r1
 800fd42:	9500      	str	r5, [sp, #0]
 800fd44:	4621      	mov	r1, r4
 800fd46:	f007 fe25 	bl	8017994 <sniprintf>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	bfa8      	it	ge
 800fd4e:	4284      	cmpge	r4, r0
 800fd50:	bfcc      	ite	gt
 800fd52:	2001      	movgt	r0, #1
 800fd54:	2000      	movle	r0, #0
 800fd56:	b003      	add	sp, #12
 800fd58:	bd30      	pop	{r4, r5, pc}
 800fd5a:	bf00      	nop
 800fd5c:	08018cf4 	.word	0x08018cf4
 800fd60:	08018cec 	.word	0x08018cec

0800fd64 <is_uxrce_rmw_identifier_valid>:
 800fd64:	b510      	push	{r4, lr}
 800fd66:	4604      	mov	r4, r0
 800fd68:	b140      	cbz	r0, 800fd7c <is_uxrce_rmw_identifier_valid+0x18>
 800fd6a:	f006 f82b 	bl	8015dc4 <rmw_get_implementation_identifier>
 800fd6e:	4601      	mov	r1, r0
 800fd70:	4620      	mov	r0, r4
 800fd72:	f7f0 fab5 	bl	80002e0 <strcmp>
 800fd76:	fab0 f080 	clz	r0, r0
 800fd7a:	0940      	lsrs	r0, r0, #5
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	bf00      	nop

0800fd80 <get_message_typesupport_handle>:
 800fd80:	6883      	ldr	r3, [r0, #8]
 800fd82:	4718      	bx	r3

0800fd84 <get_message_typesupport_handle_function>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	4604      	mov	r4, r0
 800fd88:	6800      	ldr	r0, [r0, #0]
 800fd8a:	f7f0 faa9 	bl	80002e0 <strcmp>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	bf0c      	ite	eq
 800fd92:	4620      	moveq	r0, r4
 800fd94:	2000      	movne	r0, #0
 800fd96:	bd10      	pop	{r4, pc}

0800fd98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fd98:	4b04      	ldr	r3, [pc, #16]	@ (800fdac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	b10a      	cbz	r2, 800fda2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800fd9e:	4803      	ldr	r0, [pc, #12]	@ (800fdac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fda0:	4770      	bx	lr
 800fda2:	4a03      	ldr	r2, [pc, #12]	@ (800fdb0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800fda4:	4801      	ldr	r0, [pc, #4]	@ (800fdac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fda6:	6812      	ldr	r2, [r2, #0]
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	4770      	bx	lr
 800fdac:	24000034 	.word	0x24000034
 800fdb0:	240000b0 	.word	0x240000b0

0800fdb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fdb4:	4a02      	ldr	r2, [pc, #8]	@ (800fdc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800fdb6:	4b03      	ldr	r3, [pc, #12]	@ (800fdc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800fdb8:	6812      	ldr	r2, [r2, #0]
 800fdba:	601a      	str	r2, [r3, #0]
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	240000b0 	.word	0x240000b0
 800fdc4:	24000034 	.word	0x24000034

0800fdc8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800fdc8:	f006 b8a2 	b.w	8015f10 <std_msgs__msg__Int32__init>

0800fdcc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800fdcc:	f006 b8a4 	b.w	8015f18 <std_msgs__msg__Int32__fini>

0800fdd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fdd0:	4b04      	ldr	r3, [pc, #16]	@ (800fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	b10a      	cbz	r2, 800fdda <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800fdd6:	4803      	ldr	r0, [pc, #12]	@ (800fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fdd8:	4770      	bx	lr
 800fdda:	4a03      	ldr	r2, [pc, #12]	@ (800fde8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800fddc:	4801      	ldr	r0, [pc, #4]	@ (800fde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800fdde:	6812      	ldr	r2, [r2, #0]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	4770      	bx	lr
 800fde4:	2400007c 	.word	0x2400007c
 800fde8:	240000b4 	.word	0x240000b4

0800fdec <_Int32__max_serialized_size>:
 800fdec:	2104      	movs	r1, #4
 800fdee:	2000      	movs	r0, #0
 800fdf0:	b508      	push	{r3, lr}
 800fdf2:	f001 f807 	bl	8010e04 <ucdr_alignment>
 800fdf6:	3004      	adds	r0, #4
 800fdf8:	bd08      	pop	{r3, pc}
 800fdfa:	bf00      	nop

0800fdfc <_Int32__cdr_deserialize>:
 800fdfc:	b109      	cbz	r1, 800fe02 <_Int32__cdr_deserialize+0x6>
 800fdfe:	f000 bf19 	b.w	8010c34 <ucdr_deserialize_int32_t>
 800fe02:	4608      	mov	r0, r1
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop

0800fe08 <get_serialized_size_std_msgs__msg__Int32>:
 800fe08:	b138      	cbz	r0, 800fe1a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800fe0a:	b508      	push	{r3, lr}
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	2104      	movs	r1, #4
 800fe10:	4618      	mov	r0, r3
 800fe12:	f000 fff7 	bl	8010e04 <ucdr_alignment>
 800fe16:	3004      	adds	r0, #4
 800fe18:	bd08      	pop	{r3, pc}
 800fe1a:	4770      	bx	lr

0800fe1c <_Int32__cdr_serialize>:
 800fe1c:	460a      	mov	r2, r1
 800fe1e:	b118      	cbz	r0, 800fe28 <_Int32__cdr_serialize+0xc>
 800fe20:	6801      	ldr	r1, [r0, #0]
 800fe22:	4610      	mov	r0, r2
 800fe24:	f000 be6e 	b.w	8010b04 <ucdr_serialize_int32_t>
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop

0800fe2c <_Int32__get_serialized_size>:
 800fe2c:	b130      	cbz	r0, 800fe3c <_Int32__get_serialized_size+0x10>
 800fe2e:	2104      	movs	r1, #4
 800fe30:	2000      	movs	r0, #0
 800fe32:	b508      	push	{r3, lr}
 800fe34:	f000 ffe6 	bl	8010e04 <ucdr_alignment>
 800fe38:	3004      	adds	r0, #4
 800fe3a:	bd08      	pop	{r3, pc}
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop

0800fe40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800fe40:	4800      	ldr	r0, [pc, #0]	@ (800fe44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800fe42:	4770      	bx	lr
 800fe44:	24000088 	.word	0x24000088

0800fe48 <ucdr_serialize_bool>:
 800fe48:	b538      	push	{r3, r4, r5, lr}
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	4604      	mov	r4, r0
 800fe50:	f000 ff8c 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800fe54:	b148      	cbz	r0, 800fe6a <ucdr_serialize_bool+0x22>
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	2101      	movs	r1, #1
 800fe5a:	701d      	strb	r5, [r3, #0]
 800fe5c:	68a2      	ldr	r2, [r4, #8]
 800fe5e:	6923      	ldr	r3, [r4, #16]
 800fe60:	440a      	add	r2, r1
 800fe62:	7561      	strb	r1, [r4, #21]
 800fe64:	440b      	add	r3, r1
 800fe66:	60a2      	str	r2, [r4, #8]
 800fe68:	6123      	str	r3, [r4, #16]
 800fe6a:	7da0      	ldrb	r0, [r4, #22]
 800fe6c:	f080 0001 	eor.w	r0, r0, #1
 800fe70:	bd38      	pop	{r3, r4, r5, pc}
 800fe72:	bf00      	nop

0800fe74 <ucdr_deserialize_bool>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	460d      	mov	r5, r1
 800fe78:	2101      	movs	r1, #1
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	f000 ff76 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800fe80:	b160      	cbz	r0, 800fe9c <ucdr_deserialize_bool+0x28>
 800fe82:	68a2      	ldr	r2, [r4, #8]
 800fe84:	2101      	movs	r1, #1
 800fe86:	6923      	ldr	r3, [r4, #16]
 800fe88:	f812 0b01 	ldrb.w	r0, [r2], #1
 800fe8c:	440b      	add	r3, r1
 800fe8e:	3800      	subs	r0, #0
 800fe90:	bf18      	it	ne
 800fe92:	2001      	movne	r0, #1
 800fe94:	7028      	strb	r0, [r5, #0]
 800fe96:	60a2      	str	r2, [r4, #8]
 800fe98:	6123      	str	r3, [r4, #16]
 800fe9a:	7561      	strb	r1, [r4, #21]
 800fe9c:	7da0      	ldrb	r0, [r4, #22]
 800fe9e:	f080 0001 	eor.w	r0, r0, #1
 800fea2:	bd38      	pop	{r3, r4, r5, pc}

0800fea4 <ucdr_serialize_uint8_t>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	460d      	mov	r5, r1
 800fea8:	2101      	movs	r1, #1
 800feaa:	4604      	mov	r4, r0
 800feac:	f000 ff5e 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800feb0:	b148      	cbz	r0, 800fec6 <ucdr_serialize_uint8_t+0x22>
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	2101      	movs	r1, #1
 800feb6:	701d      	strb	r5, [r3, #0]
 800feb8:	68a2      	ldr	r2, [r4, #8]
 800feba:	6923      	ldr	r3, [r4, #16]
 800febc:	440a      	add	r2, r1
 800febe:	7561      	strb	r1, [r4, #21]
 800fec0:	440b      	add	r3, r1
 800fec2:	60a2      	str	r2, [r4, #8]
 800fec4:	6123      	str	r3, [r4, #16]
 800fec6:	7da0      	ldrb	r0, [r4, #22]
 800fec8:	f080 0001 	eor.w	r0, r0, #1
 800fecc:	bd38      	pop	{r3, r4, r5, pc}
 800fece:	bf00      	nop

0800fed0 <ucdr_deserialize_uint8_t>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	460d      	mov	r5, r1
 800fed4:	2101      	movs	r1, #1
 800fed6:	4604      	mov	r4, r0
 800fed8:	f000 ff48 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800fedc:	b150      	cbz	r0, 800fef4 <ucdr_deserialize_uint8_t+0x24>
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	2101      	movs	r1, #1
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	702b      	strb	r3, [r5, #0]
 800fee6:	68a2      	ldr	r2, [r4, #8]
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	440a      	add	r2, r1
 800feec:	7561      	strb	r1, [r4, #21]
 800feee:	440b      	add	r3, r1
 800fef0:	60a2      	str	r2, [r4, #8]
 800fef2:	6123      	str	r3, [r4, #16]
 800fef4:	7da0      	ldrb	r0, [r4, #22]
 800fef6:	f080 0001 	eor.w	r0, r0, #1
 800fefa:	bd38      	pop	{r3, r4, r5, pc}

0800fefc <ucdr_serialize_uint16_t>:
 800fefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff00:	460b      	mov	r3, r1
 800ff02:	b082      	sub	sp, #8
 800ff04:	4604      	mov	r4, r0
 800ff06:	2102      	movs	r1, #2
 800ff08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff0c:	f000 ff82 	bl	8010e14 <ucdr_buffer_alignment>
 800ff10:	4601      	mov	r1, r0
 800ff12:	4620      	mov	r0, r4
 800ff14:	7d67      	ldrb	r7, [r4, #21]
 800ff16:	f000 ffc5 	bl	8010ea4 <ucdr_advance_buffer>
 800ff1a:	2102      	movs	r1, #2
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 ff19 	bl	8010d54 <ucdr_check_buffer_available_for>
 800ff22:	bb78      	cbnz	r0, 800ff84 <ucdr_serialize_uint16_t+0x88>
 800ff24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff28:	42ab      	cmp	r3, r5
 800ff2a:	d926      	bls.n	800ff7a <ucdr_serialize_uint16_t+0x7e>
 800ff2c:	1b5e      	subs	r6, r3, r5
 800ff2e:	60a3      	str	r3, [r4, #8]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	4620      	mov	r0, r4
 800ff34:	f1c6 0802 	rsb	r8, r6, #2
 800ff38:	4433      	add	r3, r6
 800ff3a:	4641      	mov	r1, r8
 800ff3c:	6123      	str	r3, [r4, #16]
 800ff3e:	f000 ff15 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d03b      	beq.n	800ffbe <ucdr_serialize_uint16_t+0xc2>
 800ff46:	7d23      	ldrb	r3, [r4, #20]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d04a      	beq.n	800ffe2 <ucdr_serialize_uint16_t+0xe6>
 800ff4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff50:	702b      	strb	r3, [r5, #0]
 800ff52:	2e00      	cmp	r6, #0
 800ff54:	d040      	beq.n	800ffd8 <ucdr_serialize_uint16_t+0xdc>
 800ff56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff5a:	706b      	strb	r3, [r5, #1]
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	2102      	movs	r1, #2
 800ff60:	68a2      	ldr	r2, [r4, #8]
 800ff62:	3302      	adds	r3, #2
 800ff64:	7da0      	ldrb	r0, [r4, #22]
 800ff66:	4442      	add	r2, r8
 800ff68:	7561      	strb	r1, [r4, #21]
 800ff6a:	1b9e      	subs	r6, r3, r6
 800ff6c:	f080 0001 	eor.w	r0, r0, #1
 800ff70:	60a2      	str	r2, [r4, #8]
 800ff72:	6126      	str	r6, [r4, #16]
 800ff74:	b002      	add	sp, #8
 800ff76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7a:	2102      	movs	r1, #2
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f000 fef5 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 800ff82:	b190      	cbz	r0, 800ffaa <ucdr_serialize_uint16_t+0xae>
 800ff84:	7d23      	ldrb	r3, [r4, #20]
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	68a3      	ldr	r3, [r4, #8]
 800ff8a:	d014      	beq.n	800ffb6 <ucdr_serialize_uint16_t+0xba>
 800ff8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ff90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff94:	7019      	strb	r1, [r3, #0]
 800ff96:	68a3      	ldr	r3, [r4, #8]
 800ff98:	705a      	strb	r2, [r3, #1]
 800ff9a:	2102      	movs	r1, #2
 800ff9c:	68a2      	ldr	r2, [r4, #8]
 800ff9e:	6923      	ldr	r3, [r4, #16]
 800ffa0:	440a      	add	r2, r1
 800ffa2:	7561      	strb	r1, [r4, #21]
 800ffa4:	440b      	add	r3, r1
 800ffa6:	60a2      	str	r2, [r4, #8]
 800ffa8:	6123      	str	r3, [r4, #16]
 800ffaa:	7da0      	ldrb	r0, [r4, #22]
 800ffac:	f080 0001 	eor.w	r0, r0, #1
 800ffb0:	b002      	add	sp, #8
 800ffb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffba:	801a      	strh	r2, [r3, #0]
 800ffbc:	e7ed      	b.n	800ff9a <ucdr_serialize_uint16_t+0x9e>
 800ffbe:	68a2      	ldr	r2, [r4, #8]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	7da0      	ldrb	r0, [r4, #22]
 800ffc4:	1b92      	subs	r2, r2, r6
 800ffc6:	1b9b      	subs	r3, r3, r6
 800ffc8:	7567      	strb	r7, [r4, #21]
 800ffca:	f080 0001 	eor.w	r0, r0, #1
 800ffce:	60a2      	str	r2, [r4, #8]
 800ffd0:	6123      	str	r3, [r4, #16]
 800ffd2:	b002      	add	sp, #8
 800ffd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd8:	68a3      	ldr	r3, [r4, #8]
 800ffda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffde:	701a      	strb	r2, [r3, #0]
 800ffe0:	e7bc      	b.n	800ff5c <ucdr_serialize_uint16_t+0x60>
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f10d 0506 	add.w	r5, sp, #6
 800ffe8:	4632      	mov	r2, r6
 800ffea:	4629      	mov	r1, r5
 800ffec:	f007 fea1 	bl	8017d32 <memcpy>
 800fff0:	4642      	mov	r2, r8
 800fff2:	19a9      	adds	r1, r5, r6
 800fff4:	68a0      	ldr	r0, [r4, #8]
 800fff6:	f007 fe9c 	bl	8017d32 <memcpy>
 800fffa:	e7af      	b.n	800ff5c <ucdr_serialize_uint16_t+0x60>

0800fffc <ucdr_serialize_endian_uint16_t>:
 800fffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010000:	4604      	mov	r4, r0
 8010002:	b083      	sub	sp, #12
 8010004:	460d      	mov	r5, r1
 8010006:	2102      	movs	r1, #2
 8010008:	f8ad 2006 	strh.w	r2, [sp, #6]
 801000c:	f000 ff02 	bl	8010e14 <ucdr_buffer_alignment>
 8010010:	4601      	mov	r1, r0
 8010012:	4620      	mov	r0, r4
 8010014:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010018:	f000 ff44 	bl	8010ea4 <ucdr_advance_buffer>
 801001c:	2102      	movs	r1, #2
 801001e:	4620      	mov	r0, r4
 8010020:	f000 fe98 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010024:	bb70      	cbnz	r0, 8010084 <ucdr_serialize_endian_uint16_t+0x88>
 8010026:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801002a:	42be      	cmp	r6, r7
 801002c:	d925      	bls.n	801007a <ucdr_serialize_endian_uint16_t+0x7e>
 801002e:	6923      	ldr	r3, [r4, #16]
 8010030:	4620      	mov	r0, r4
 8010032:	60a6      	str	r6, [r4, #8]
 8010034:	1bf6      	subs	r6, r6, r7
 8010036:	4433      	add	r3, r6
 8010038:	f1c6 0902 	rsb	r9, r6, #2
 801003c:	6123      	str	r3, [r4, #16]
 801003e:	4649      	mov	r1, r9
 8010040:	f000 fe94 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010044:	2800      	cmp	r0, #0
 8010046:	d039      	beq.n	80100bc <ucdr_serialize_endian_uint16_t+0xc0>
 8010048:	2d01      	cmp	r5, #1
 801004a:	d04a      	beq.n	80100e2 <ucdr_serialize_endian_uint16_t+0xe6>
 801004c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010050:	703b      	strb	r3, [r7, #0]
 8010052:	2e00      	cmp	r6, #0
 8010054:	d040      	beq.n	80100d8 <ucdr_serialize_endian_uint16_t+0xdc>
 8010056:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801005a:	707b      	strb	r3, [r7, #1]
 801005c:	6923      	ldr	r3, [r4, #16]
 801005e:	2102      	movs	r1, #2
 8010060:	68a2      	ldr	r2, [r4, #8]
 8010062:	7da0      	ldrb	r0, [r4, #22]
 8010064:	3302      	adds	r3, #2
 8010066:	444a      	add	r2, r9
 8010068:	7561      	strb	r1, [r4, #21]
 801006a:	1b9b      	subs	r3, r3, r6
 801006c:	f080 0001 	eor.w	r0, r0, #1
 8010070:	60a2      	str	r2, [r4, #8]
 8010072:	6123      	str	r3, [r4, #16]
 8010074:	b003      	add	sp, #12
 8010076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801007a:	2102      	movs	r1, #2
 801007c:	4620      	mov	r0, r4
 801007e:	f000 fe75 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010082:	b188      	cbz	r0, 80100a8 <ucdr_serialize_endian_uint16_t+0xac>
 8010084:	2d01      	cmp	r5, #1
 8010086:	68a3      	ldr	r3, [r4, #8]
 8010088:	d014      	beq.n	80100b4 <ucdr_serialize_endian_uint16_t+0xb8>
 801008a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801008e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010092:	7019      	strb	r1, [r3, #0]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	705a      	strb	r2, [r3, #1]
 8010098:	2102      	movs	r1, #2
 801009a:	68a2      	ldr	r2, [r4, #8]
 801009c:	6923      	ldr	r3, [r4, #16]
 801009e:	440a      	add	r2, r1
 80100a0:	7561      	strb	r1, [r4, #21]
 80100a2:	440b      	add	r3, r1
 80100a4:	60a2      	str	r2, [r4, #8]
 80100a6:	6123      	str	r3, [r4, #16]
 80100a8:	7da0      	ldrb	r0, [r4, #22]
 80100aa:	f080 0001 	eor.w	r0, r0, #1
 80100ae:	b003      	add	sp, #12
 80100b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80100b8:	801a      	strh	r2, [r3, #0]
 80100ba:	e7ed      	b.n	8010098 <ucdr_serialize_endian_uint16_t+0x9c>
 80100bc:	68a2      	ldr	r2, [r4, #8]
 80100be:	6923      	ldr	r3, [r4, #16]
 80100c0:	7da0      	ldrb	r0, [r4, #22]
 80100c2:	1b92      	subs	r2, r2, r6
 80100c4:	1b9b      	subs	r3, r3, r6
 80100c6:	f884 8015 	strb.w	r8, [r4, #21]
 80100ca:	f080 0001 	eor.w	r0, r0, #1
 80100ce:	60a2      	str	r2, [r4, #8]
 80100d0:	6123      	str	r3, [r4, #16]
 80100d2:	b003      	add	sp, #12
 80100d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100de:	701a      	strb	r2, [r3, #0]
 80100e0:	e7bc      	b.n	801005c <ucdr_serialize_endian_uint16_t+0x60>
 80100e2:	f10d 0506 	add.w	r5, sp, #6
 80100e6:	4632      	mov	r2, r6
 80100e8:	4638      	mov	r0, r7
 80100ea:	4629      	mov	r1, r5
 80100ec:	f007 fe21 	bl	8017d32 <memcpy>
 80100f0:	464a      	mov	r2, r9
 80100f2:	19a9      	adds	r1, r5, r6
 80100f4:	68a0      	ldr	r0, [r4, #8]
 80100f6:	f007 fe1c 	bl	8017d32 <memcpy>
 80100fa:	e7af      	b.n	801005c <ucdr_serialize_endian_uint16_t+0x60>

080100fc <ucdr_deserialize_uint16_t>:
 80100fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010100:	4604      	mov	r4, r0
 8010102:	460d      	mov	r5, r1
 8010104:	2102      	movs	r1, #2
 8010106:	f000 fe85 	bl	8010e14 <ucdr_buffer_alignment>
 801010a:	4601      	mov	r1, r0
 801010c:	4620      	mov	r0, r4
 801010e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010112:	f000 fec7 	bl	8010ea4 <ucdr_advance_buffer>
 8010116:	2102      	movs	r1, #2
 8010118:	4620      	mov	r0, r4
 801011a:	f000 fe1b 	bl	8010d54 <ucdr_check_buffer_available_for>
 801011e:	bb60      	cbnz	r0, 801017a <ucdr_deserialize_uint16_t+0x7e>
 8010120:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010124:	42be      	cmp	r6, r7
 8010126:	d923      	bls.n	8010170 <ucdr_deserialize_uint16_t+0x74>
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	4620      	mov	r0, r4
 801012c:	60a6      	str	r6, [r4, #8]
 801012e:	1bf6      	subs	r6, r6, r7
 8010130:	4433      	add	r3, r6
 8010132:	f1c6 0902 	rsb	r9, r6, #2
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	4649      	mov	r1, r9
 801013a:	f000 fe17 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 801013e:	2800      	cmp	r0, #0
 8010140:	d034      	beq.n	80101ac <ucdr_deserialize_uint16_t+0xb0>
 8010142:	7d23      	ldrb	r3, [r4, #20]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d042      	beq.n	80101ce <ucdr_deserialize_uint16_t+0xd2>
 8010148:	787b      	ldrb	r3, [r7, #1]
 801014a:	702b      	strb	r3, [r5, #0]
 801014c:	2e00      	cmp	r6, #0
 801014e:	d03a      	beq.n	80101c6 <ucdr_deserialize_uint16_t+0xca>
 8010150:	783b      	ldrb	r3, [r7, #0]
 8010152:	706b      	strb	r3, [r5, #1]
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	2102      	movs	r1, #2
 8010158:	68a2      	ldr	r2, [r4, #8]
 801015a:	3302      	adds	r3, #2
 801015c:	7da0      	ldrb	r0, [r4, #22]
 801015e:	444a      	add	r2, r9
 8010160:	7561      	strb	r1, [r4, #21]
 8010162:	1b9b      	subs	r3, r3, r6
 8010164:	f080 0001 	eor.w	r0, r0, #1
 8010168:	60a2      	str	r2, [r4, #8]
 801016a:	6123      	str	r3, [r4, #16]
 801016c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010170:	2102      	movs	r1, #2
 8010172:	4620      	mov	r0, r4
 8010174:	f000 fdfa 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010178:	b180      	cbz	r0, 801019c <ucdr_deserialize_uint16_t+0xa0>
 801017a:	7d23      	ldrb	r3, [r4, #20]
 801017c:	2b01      	cmp	r3, #1
 801017e:	68a3      	ldr	r3, [r4, #8]
 8010180:	d011      	beq.n	80101a6 <ucdr_deserialize_uint16_t+0xaa>
 8010182:	785b      	ldrb	r3, [r3, #1]
 8010184:	702b      	strb	r3, [r5, #0]
 8010186:	68a3      	ldr	r3, [r4, #8]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	706b      	strb	r3, [r5, #1]
 801018c:	2102      	movs	r1, #2
 801018e:	68a2      	ldr	r2, [r4, #8]
 8010190:	6923      	ldr	r3, [r4, #16]
 8010192:	440a      	add	r2, r1
 8010194:	7561      	strb	r1, [r4, #21]
 8010196:	440b      	add	r3, r1
 8010198:	60a2      	str	r2, [r4, #8]
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	7da0      	ldrb	r0, [r4, #22]
 801019e:	f080 0001 	eor.w	r0, r0, #1
 80101a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	802b      	strh	r3, [r5, #0]
 80101aa:	e7ef      	b.n	801018c <ucdr_deserialize_uint16_t+0x90>
 80101ac:	68a2      	ldr	r2, [r4, #8]
 80101ae:	6923      	ldr	r3, [r4, #16]
 80101b0:	1b92      	subs	r2, r2, r6
 80101b2:	7da0      	ldrb	r0, [r4, #22]
 80101b4:	1b9b      	subs	r3, r3, r6
 80101b6:	f884 8015 	strb.w	r8, [r4, #21]
 80101ba:	f080 0001 	eor.w	r0, r0, #1
 80101be:	60a2      	str	r2, [r4, #8]
 80101c0:	6123      	str	r3, [r4, #16]
 80101c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c6:	68a3      	ldr	r3, [r4, #8]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	706b      	strb	r3, [r5, #1]
 80101cc:	e7c2      	b.n	8010154 <ucdr_deserialize_uint16_t+0x58>
 80101ce:	4639      	mov	r1, r7
 80101d0:	4632      	mov	r2, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	f007 fdad 	bl	8017d32 <memcpy>
 80101d8:	464a      	mov	r2, r9
 80101da:	19a8      	adds	r0, r5, r6
 80101dc:	68a1      	ldr	r1, [r4, #8]
 80101de:	f007 fda8 	bl	8017d32 <memcpy>
 80101e2:	e7b7      	b.n	8010154 <ucdr_deserialize_uint16_t+0x58>

080101e4 <ucdr_deserialize_endian_uint16_t>:
 80101e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e8:	4604      	mov	r4, r0
 80101ea:	460e      	mov	r6, r1
 80101ec:	2102      	movs	r1, #2
 80101ee:	4615      	mov	r5, r2
 80101f0:	f000 fe10 	bl	8010e14 <ucdr_buffer_alignment>
 80101f4:	4601      	mov	r1, r0
 80101f6:	4620      	mov	r0, r4
 80101f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80101fc:	f000 fe52 	bl	8010ea4 <ucdr_advance_buffer>
 8010200:	2102      	movs	r1, #2
 8010202:	4620      	mov	r0, r4
 8010204:	f000 fda6 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010208:	bb70      	cbnz	r0, 8010268 <ucdr_deserialize_endian_uint16_t+0x84>
 801020a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801020e:	454f      	cmp	r7, r9
 8010210:	d925      	bls.n	801025e <ucdr_deserialize_endian_uint16_t+0x7a>
 8010212:	6923      	ldr	r3, [r4, #16]
 8010214:	4620      	mov	r0, r4
 8010216:	60a7      	str	r7, [r4, #8]
 8010218:	eba7 0709 	sub.w	r7, r7, r9
 801021c:	443b      	add	r3, r7
 801021e:	f1c7 0a02 	rsb	sl, r7, #2
 8010222:	6123      	str	r3, [r4, #16]
 8010224:	4651      	mov	r1, sl
 8010226:	f000 fda1 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 801022a:	2800      	cmp	r0, #0
 801022c:	d034      	beq.n	8010298 <ucdr_deserialize_endian_uint16_t+0xb4>
 801022e:	2e01      	cmp	r6, #1
 8010230:	d043      	beq.n	80102ba <ucdr_deserialize_endian_uint16_t+0xd6>
 8010232:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010236:	702b      	strb	r3, [r5, #0]
 8010238:	2f00      	cmp	r7, #0
 801023a:	d03a      	beq.n	80102b2 <ucdr_deserialize_endian_uint16_t+0xce>
 801023c:	f899 3000 	ldrb.w	r3, [r9]
 8010240:	706b      	strb	r3, [r5, #1]
 8010242:	6923      	ldr	r3, [r4, #16]
 8010244:	2102      	movs	r1, #2
 8010246:	68a2      	ldr	r2, [r4, #8]
 8010248:	3302      	adds	r3, #2
 801024a:	7da0      	ldrb	r0, [r4, #22]
 801024c:	4452      	add	r2, sl
 801024e:	7561      	strb	r1, [r4, #21]
 8010250:	1bdb      	subs	r3, r3, r7
 8010252:	f080 0001 	eor.w	r0, r0, #1
 8010256:	60a2      	str	r2, [r4, #8]
 8010258:	6123      	str	r3, [r4, #16]
 801025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025e:	2102      	movs	r1, #2
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fd83 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010266:	b178      	cbz	r0, 8010288 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010268:	2e01      	cmp	r6, #1
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	d011      	beq.n	8010292 <ucdr_deserialize_endian_uint16_t+0xae>
 801026e:	785b      	ldrb	r3, [r3, #1]
 8010270:	702b      	strb	r3, [r5, #0]
 8010272:	68a3      	ldr	r3, [r4, #8]
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	706b      	strb	r3, [r5, #1]
 8010278:	2102      	movs	r1, #2
 801027a:	68a2      	ldr	r2, [r4, #8]
 801027c:	6923      	ldr	r3, [r4, #16]
 801027e:	440a      	add	r2, r1
 8010280:	7561      	strb	r1, [r4, #21]
 8010282:	440b      	add	r3, r1
 8010284:	60a2      	str	r2, [r4, #8]
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	7da0      	ldrb	r0, [r4, #22]
 801028a:	f080 0001 	eor.w	r0, r0, #1
 801028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010292:	881b      	ldrh	r3, [r3, #0]
 8010294:	802b      	strh	r3, [r5, #0]
 8010296:	e7ef      	b.n	8010278 <ucdr_deserialize_endian_uint16_t+0x94>
 8010298:	68a2      	ldr	r2, [r4, #8]
 801029a:	6923      	ldr	r3, [r4, #16]
 801029c:	1bd2      	subs	r2, r2, r7
 801029e:	7da0      	ldrb	r0, [r4, #22]
 80102a0:	1bdb      	subs	r3, r3, r7
 80102a2:	f884 8015 	strb.w	r8, [r4, #21]
 80102a6:	f080 0001 	eor.w	r0, r0, #1
 80102aa:	60a2      	str	r2, [r4, #8]
 80102ac:	6123      	str	r3, [r4, #16]
 80102ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b2:	68a3      	ldr	r3, [r4, #8]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	706b      	strb	r3, [r5, #1]
 80102b8:	e7c3      	b.n	8010242 <ucdr_deserialize_endian_uint16_t+0x5e>
 80102ba:	4649      	mov	r1, r9
 80102bc:	463a      	mov	r2, r7
 80102be:	4628      	mov	r0, r5
 80102c0:	f007 fd37 	bl	8017d32 <memcpy>
 80102c4:	4652      	mov	r2, sl
 80102c6:	19e8      	adds	r0, r5, r7
 80102c8:	68a1      	ldr	r1, [r4, #8]
 80102ca:	f007 fd32 	bl	8017d32 <memcpy>
 80102ce:	e7b8      	b.n	8010242 <ucdr_deserialize_endian_uint16_t+0x5e>

080102d0 <ucdr_serialize_uint32_t>:
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	4604      	mov	r4, r0
 80102d8:	9101      	str	r1, [sp, #4]
 80102da:	2104      	movs	r1, #4
 80102dc:	f000 fd9a 	bl	8010e14 <ucdr_buffer_alignment>
 80102e0:	4601      	mov	r1, r0
 80102e2:	4620      	mov	r0, r4
 80102e4:	7d67      	ldrb	r7, [r4, #21]
 80102e6:	f000 fddd 	bl	8010ea4 <ucdr_advance_buffer>
 80102ea:	2104      	movs	r1, #4
 80102ec:	4620      	mov	r0, r4
 80102ee:	f000 fd31 	bl	8010d54 <ucdr_check_buffer_available_for>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d139      	bne.n	801036a <ucdr_serialize_uint32_t+0x9a>
 80102f6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80102fa:	42ab      	cmp	r3, r5
 80102fc:	d930      	bls.n	8010360 <ucdr_serialize_uint32_t+0x90>
 80102fe:	1b5e      	subs	r6, r3, r5
 8010300:	60a3      	str	r3, [r4, #8]
 8010302:	6923      	ldr	r3, [r4, #16]
 8010304:	4620      	mov	r0, r4
 8010306:	f1c6 0804 	rsb	r8, r6, #4
 801030a:	4433      	add	r3, r6
 801030c:	4641      	mov	r1, r8
 801030e:	6123      	str	r3, [r4, #16]
 8010310:	f000 fd2c 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010314:	2800      	cmp	r0, #0
 8010316:	d04c      	beq.n	80103b2 <ucdr_serialize_uint32_t+0xe2>
 8010318:	7d23      	ldrb	r3, [r4, #20]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d063      	beq.n	80103e6 <ucdr_serialize_uint32_t+0x116>
 801031e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010322:	702b      	strb	r3, [r5, #0]
 8010324:	2e00      	cmp	r6, #0
 8010326:	d051      	beq.n	80103cc <ucdr_serialize_uint32_t+0xfc>
 8010328:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801032c:	2e01      	cmp	r6, #1
 801032e:	706b      	strb	r3, [r5, #1]
 8010330:	d050      	beq.n	80103d4 <ucdr_serialize_uint32_t+0x104>
 8010332:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010336:	2e02      	cmp	r6, #2
 8010338:	70ab      	strb	r3, [r5, #2]
 801033a:	d04f      	beq.n	80103dc <ucdr_serialize_uint32_t+0x10c>
 801033c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010340:	70eb      	strb	r3, [r5, #3]
 8010342:	6923      	ldr	r3, [r4, #16]
 8010344:	2104      	movs	r1, #4
 8010346:	68a2      	ldr	r2, [r4, #8]
 8010348:	3304      	adds	r3, #4
 801034a:	7da0      	ldrb	r0, [r4, #22]
 801034c:	4442      	add	r2, r8
 801034e:	7561      	strb	r1, [r4, #21]
 8010350:	1b9e      	subs	r6, r3, r6
 8010352:	f080 0001 	eor.w	r0, r0, #1
 8010356:	60a2      	str	r2, [r4, #8]
 8010358:	6126      	str	r6, [r4, #16]
 801035a:	b002      	add	sp, #8
 801035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010360:	2104      	movs	r1, #4
 8010362:	4620      	mov	r0, r4
 8010364:	f000 fd02 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010368:	b1d0      	cbz	r0, 80103a0 <ucdr_serialize_uint32_t+0xd0>
 801036a:	7d23      	ldrb	r3, [r4, #20]
 801036c:	2b01      	cmp	r3, #1
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	d01c      	beq.n	80103ac <ucdr_serialize_uint32_t+0xdc>
 8010372:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010376:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801037a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801037e:	7018      	strb	r0, [r3, #0]
 8010380:	68a3      	ldr	r3, [r4, #8]
 8010382:	705a      	strb	r2, [r3, #1]
 8010384:	68a3      	ldr	r3, [r4, #8]
 8010386:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801038a:	7099      	strb	r1, [r3, #2]
 801038c:	68a3      	ldr	r3, [r4, #8]
 801038e:	70da      	strb	r2, [r3, #3]
 8010390:	2104      	movs	r1, #4
 8010392:	68a2      	ldr	r2, [r4, #8]
 8010394:	6923      	ldr	r3, [r4, #16]
 8010396:	440a      	add	r2, r1
 8010398:	7561      	strb	r1, [r4, #21]
 801039a:	440b      	add	r3, r1
 801039c:	60a2      	str	r2, [r4, #8]
 801039e:	6123      	str	r3, [r4, #16]
 80103a0:	7da0      	ldrb	r0, [r4, #22]
 80103a2:	f080 0001 	eor.w	r0, r0, #1
 80103a6:	b002      	add	sp, #8
 80103a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ac:	9a01      	ldr	r2, [sp, #4]
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	e7ee      	b.n	8010390 <ucdr_serialize_uint32_t+0xc0>
 80103b2:	68a2      	ldr	r2, [r4, #8]
 80103b4:	6923      	ldr	r3, [r4, #16]
 80103b6:	7da0      	ldrb	r0, [r4, #22]
 80103b8:	1b92      	subs	r2, r2, r6
 80103ba:	1b9b      	subs	r3, r3, r6
 80103bc:	7567      	strb	r7, [r4, #21]
 80103be:	f080 0001 	eor.w	r0, r0, #1
 80103c2:	60a2      	str	r2, [r4, #8]
 80103c4:	6123      	str	r3, [r4, #16]
 80103c6:	b002      	add	sp, #8
 80103c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103cc:	68a3      	ldr	r3, [r4, #8]
 80103ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103d2:	701a      	strb	r2, [r3, #0]
 80103d4:	68a3      	ldr	r3, [r4, #8]
 80103d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80103da:	701a      	strb	r2, [r3, #0]
 80103dc:	68a3      	ldr	r3, [r4, #8]
 80103de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80103e2:	701a      	strb	r2, [r3, #0]
 80103e4:	e7ad      	b.n	8010342 <ucdr_serialize_uint32_t+0x72>
 80103e6:	4628      	mov	r0, r5
 80103e8:	ad01      	add	r5, sp, #4
 80103ea:	4632      	mov	r2, r6
 80103ec:	4629      	mov	r1, r5
 80103ee:	f007 fca0 	bl	8017d32 <memcpy>
 80103f2:	4642      	mov	r2, r8
 80103f4:	19a9      	adds	r1, r5, r6
 80103f6:	68a0      	ldr	r0, [r4, #8]
 80103f8:	f007 fc9b 	bl	8017d32 <memcpy>
 80103fc:	e7a1      	b.n	8010342 <ucdr_serialize_uint32_t+0x72>
 80103fe:	bf00      	nop

08010400 <ucdr_serialize_endian_uint32_t>:
 8010400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010404:	4604      	mov	r4, r0
 8010406:	b083      	sub	sp, #12
 8010408:	460d      	mov	r5, r1
 801040a:	2104      	movs	r1, #4
 801040c:	9201      	str	r2, [sp, #4]
 801040e:	f000 fd01 	bl	8010e14 <ucdr_buffer_alignment>
 8010412:	4601      	mov	r1, r0
 8010414:	4620      	mov	r0, r4
 8010416:	f894 8015 	ldrb.w	r8, [r4, #21]
 801041a:	f000 fd43 	bl	8010ea4 <ucdr_advance_buffer>
 801041e:	2104      	movs	r1, #4
 8010420:	4620      	mov	r0, r4
 8010422:	f000 fc97 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010426:	2800      	cmp	r0, #0
 8010428:	d138      	bne.n	801049c <ucdr_serialize_endian_uint32_t+0x9c>
 801042a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801042e:	42b7      	cmp	r7, r6
 8010430:	d92f      	bls.n	8010492 <ucdr_serialize_endian_uint32_t+0x92>
 8010432:	6923      	ldr	r3, [r4, #16]
 8010434:	4620      	mov	r0, r4
 8010436:	60a7      	str	r7, [r4, #8]
 8010438:	1bbf      	subs	r7, r7, r6
 801043a:	443b      	add	r3, r7
 801043c:	f1c7 0904 	rsb	r9, r7, #4
 8010440:	6123      	str	r3, [r4, #16]
 8010442:	4649      	mov	r1, r9
 8010444:	f000 fc92 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010448:	2800      	cmp	r0, #0
 801044a:	d04a      	beq.n	80104e2 <ucdr_serialize_endian_uint32_t+0xe2>
 801044c:	2d01      	cmp	r5, #1
 801044e:	d063      	beq.n	8010518 <ucdr_serialize_endian_uint32_t+0x118>
 8010450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010454:	7033      	strb	r3, [r6, #0]
 8010456:	2f00      	cmp	r7, #0
 8010458:	d051      	beq.n	80104fe <ucdr_serialize_endian_uint32_t+0xfe>
 801045a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801045e:	2f01      	cmp	r7, #1
 8010460:	7073      	strb	r3, [r6, #1]
 8010462:	d050      	beq.n	8010506 <ucdr_serialize_endian_uint32_t+0x106>
 8010464:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010468:	2f02      	cmp	r7, #2
 801046a:	70b3      	strb	r3, [r6, #2]
 801046c:	d04f      	beq.n	801050e <ucdr_serialize_endian_uint32_t+0x10e>
 801046e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010472:	70f3      	strb	r3, [r6, #3]
 8010474:	6923      	ldr	r3, [r4, #16]
 8010476:	2104      	movs	r1, #4
 8010478:	68a2      	ldr	r2, [r4, #8]
 801047a:	7da0      	ldrb	r0, [r4, #22]
 801047c:	3304      	adds	r3, #4
 801047e:	444a      	add	r2, r9
 8010480:	7561      	strb	r1, [r4, #21]
 8010482:	1bdb      	subs	r3, r3, r7
 8010484:	f080 0001 	eor.w	r0, r0, #1
 8010488:	60a2      	str	r2, [r4, #8]
 801048a:	6123      	str	r3, [r4, #16]
 801048c:	b003      	add	sp, #12
 801048e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010492:	2104      	movs	r1, #4
 8010494:	4620      	mov	r0, r4
 8010496:	f000 fc69 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 801049a:	b1c8      	cbz	r0, 80104d0 <ucdr_serialize_endian_uint32_t+0xd0>
 801049c:	2d01      	cmp	r5, #1
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	d01c      	beq.n	80104dc <ucdr_serialize_endian_uint32_t+0xdc>
 80104a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80104a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80104aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80104ae:	7018      	strb	r0, [r3, #0]
 80104b0:	68a3      	ldr	r3, [r4, #8]
 80104b2:	705a      	strb	r2, [r3, #1]
 80104b4:	68a3      	ldr	r3, [r4, #8]
 80104b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80104ba:	7099      	strb	r1, [r3, #2]
 80104bc:	68a3      	ldr	r3, [r4, #8]
 80104be:	70da      	strb	r2, [r3, #3]
 80104c0:	2104      	movs	r1, #4
 80104c2:	68a2      	ldr	r2, [r4, #8]
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	440a      	add	r2, r1
 80104c8:	7561      	strb	r1, [r4, #21]
 80104ca:	440b      	add	r3, r1
 80104cc:	60a2      	str	r2, [r4, #8]
 80104ce:	6123      	str	r3, [r4, #16]
 80104d0:	7da0      	ldrb	r0, [r4, #22]
 80104d2:	f080 0001 	eor.w	r0, r0, #1
 80104d6:	b003      	add	sp, #12
 80104d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104dc:	9a01      	ldr	r2, [sp, #4]
 80104de:	601a      	str	r2, [r3, #0]
 80104e0:	e7ee      	b.n	80104c0 <ucdr_serialize_endian_uint32_t+0xc0>
 80104e2:	68a2      	ldr	r2, [r4, #8]
 80104e4:	6923      	ldr	r3, [r4, #16]
 80104e6:	7da0      	ldrb	r0, [r4, #22]
 80104e8:	1bd2      	subs	r2, r2, r7
 80104ea:	1bdb      	subs	r3, r3, r7
 80104ec:	f884 8015 	strb.w	r8, [r4, #21]
 80104f0:	f080 0001 	eor.w	r0, r0, #1
 80104f4:	60a2      	str	r2, [r4, #8]
 80104f6:	6123      	str	r3, [r4, #16]
 80104f8:	b003      	add	sp, #12
 80104fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	68a3      	ldr	r3, [r4, #8]
 8010508:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801050c:	701a      	strb	r2, [r3, #0]
 801050e:	68a3      	ldr	r3, [r4, #8]
 8010510:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010514:	701a      	strb	r2, [r3, #0]
 8010516:	e7ad      	b.n	8010474 <ucdr_serialize_endian_uint32_t+0x74>
 8010518:	ad01      	add	r5, sp, #4
 801051a:	463a      	mov	r2, r7
 801051c:	4630      	mov	r0, r6
 801051e:	4629      	mov	r1, r5
 8010520:	f007 fc07 	bl	8017d32 <memcpy>
 8010524:	464a      	mov	r2, r9
 8010526:	19e9      	adds	r1, r5, r7
 8010528:	68a0      	ldr	r0, [r4, #8]
 801052a:	f007 fc02 	bl	8017d32 <memcpy>
 801052e:	e7a1      	b.n	8010474 <ucdr_serialize_endian_uint32_t+0x74>

08010530 <ucdr_deserialize_uint32_t>:
 8010530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010534:	4604      	mov	r4, r0
 8010536:	460d      	mov	r5, r1
 8010538:	2104      	movs	r1, #4
 801053a:	f000 fc6b 	bl	8010e14 <ucdr_buffer_alignment>
 801053e:	4601      	mov	r1, r0
 8010540:	4620      	mov	r0, r4
 8010542:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010546:	f000 fcad 	bl	8010ea4 <ucdr_advance_buffer>
 801054a:	2104      	movs	r1, #4
 801054c:	4620      	mov	r0, r4
 801054e:	f000 fc01 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010552:	2800      	cmp	r0, #0
 8010554:	d138      	bne.n	80105c8 <ucdr_deserialize_uint32_t+0x98>
 8010556:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801055a:	42b7      	cmp	r7, r6
 801055c:	d92f      	bls.n	80105be <ucdr_deserialize_uint32_t+0x8e>
 801055e:	6923      	ldr	r3, [r4, #16]
 8010560:	4620      	mov	r0, r4
 8010562:	60a7      	str	r7, [r4, #8]
 8010564:	1bbf      	subs	r7, r7, r6
 8010566:	443b      	add	r3, r7
 8010568:	f1c7 0904 	rsb	r9, r7, #4
 801056c:	6123      	str	r3, [r4, #16]
 801056e:	4649      	mov	r1, r9
 8010570:	f000 fbfc 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010574:	2800      	cmp	r0, #0
 8010576:	d046      	beq.n	8010606 <ucdr_deserialize_uint32_t+0xd6>
 8010578:	7d23      	ldrb	r3, [r4, #20]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d05c      	beq.n	8010638 <ucdr_deserialize_uint32_t+0x108>
 801057e:	78f3      	ldrb	r3, [r6, #3]
 8010580:	702b      	strb	r3, [r5, #0]
 8010582:	2f00      	cmp	r7, #0
 8010584:	d04c      	beq.n	8010620 <ucdr_deserialize_uint32_t+0xf0>
 8010586:	78b3      	ldrb	r3, [r6, #2]
 8010588:	2f01      	cmp	r7, #1
 801058a:	706b      	strb	r3, [r5, #1]
 801058c:	f105 0302 	add.w	r3, r5, #2
 8010590:	d04a      	beq.n	8010628 <ucdr_deserialize_uint32_t+0xf8>
 8010592:	7873      	ldrb	r3, [r6, #1]
 8010594:	2f02      	cmp	r7, #2
 8010596:	70ab      	strb	r3, [r5, #2]
 8010598:	f105 0303 	add.w	r3, r5, #3
 801059c:	d048      	beq.n	8010630 <ucdr_deserialize_uint32_t+0x100>
 801059e:	7833      	ldrb	r3, [r6, #0]
 80105a0:	70eb      	strb	r3, [r5, #3]
 80105a2:	6923      	ldr	r3, [r4, #16]
 80105a4:	2104      	movs	r1, #4
 80105a6:	68a2      	ldr	r2, [r4, #8]
 80105a8:	3304      	adds	r3, #4
 80105aa:	7da0      	ldrb	r0, [r4, #22]
 80105ac:	444a      	add	r2, r9
 80105ae:	7561      	strb	r1, [r4, #21]
 80105b0:	1bdb      	subs	r3, r3, r7
 80105b2:	f080 0001 	eor.w	r0, r0, #1
 80105b6:	60a2      	str	r2, [r4, #8]
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105be:	2104      	movs	r1, #4
 80105c0:	4620      	mov	r0, r4
 80105c2:	f000 fbd3 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 80105c6:	b1b0      	cbz	r0, 80105f6 <ucdr_deserialize_uint32_t+0xc6>
 80105c8:	7d23      	ldrb	r3, [r4, #20]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	68a3      	ldr	r3, [r4, #8]
 80105ce:	d017      	beq.n	8010600 <ucdr_deserialize_uint32_t+0xd0>
 80105d0:	78db      	ldrb	r3, [r3, #3]
 80105d2:	702b      	strb	r3, [r5, #0]
 80105d4:	68a3      	ldr	r3, [r4, #8]
 80105d6:	789b      	ldrb	r3, [r3, #2]
 80105d8:	706b      	strb	r3, [r5, #1]
 80105da:	68a3      	ldr	r3, [r4, #8]
 80105dc:	785b      	ldrb	r3, [r3, #1]
 80105de:	70ab      	strb	r3, [r5, #2]
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	70eb      	strb	r3, [r5, #3]
 80105e6:	2104      	movs	r1, #4
 80105e8:	68a2      	ldr	r2, [r4, #8]
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	440a      	add	r2, r1
 80105ee:	7561      	strb	r1, [r4, #21]
 80105f0:	440b      	add	r3, r1
 80105f2:	60a2      	str	r2, [r4, #8]
 80105f4:	6123      	str	r3, [r4, #16]
 80105f6:	7da0      	ldrb	r0, [r4, #22]
 80105f8:	f080 0001 	eor.w	r0, r0, #1
 80105fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	602b      	str	r3, [r5, #0]
 8010604:	e7ef      	b.n	80105e6 <ucdr_deserialize_uint32_t+0xb6>
 8010606:	68a2      	ldr	r2, [r4, #8]
 8010608:	6923      	ldr	r3, [r4, #16]
 801060a:	1bd2      	subs	r2, r2, r7
 801060c:	7da0      	ldrb	r0, [r4, #22]
 801060e:	1bdb      	subs	r3, r3, r7
 8010610:	f884 8015 	strb.w	r8, [r4, #21]
 8010614:	f080 0001 	eor.w	r0, r0, #1
 8010618:	60a2      	str	r2, [r4, #8]
 801061a:	6123      	str	r3, [r4, #16]
 801061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010620:	68a3      	ldr	r3, [r4, #8]
 8010622:	789b      	ldrb	r3, [r3, #2]
 8010624:	706b      	strb	r3, [r5, #1]
 8010626:	1cab      	adds	r3, r5, #2
 8010628:	68a2      	ldr	r2, [r4, #8]
 801062a:	7852      	ldrb	r2, [r2, #1]
 801062c:	f803 2b01 	strb.w	r2, [r3], #1
 8010630:	68a2      	ldr	r2, [r4, #8]
 8010632:	7812      	ldrb	r2, [r2, #0]
 8010634:	701a      	strb	r2, [r3, #0]
 8010636:	e7b4      	b.n	80105a2 <ucdr_deserialize_uint32_t+0x72>
 8010638:	4631      	mov	r1, r6
 801063a:	463a      	mov	r2, r7
 801063c:	4628      	mov	r0, r5
 801063e:	f007 fb78 	bl	8017d32 <memcpy>
 8010642:	464a      	mov	r2, r9
 8010644:	19e8      	adds	r0, r5, r7
 8010646:	68a1      	ldr	r1, [r4, #8]
 8010648:	f007 fb73 	bl	8017d32 <memcpy>
 801064c:	e7a9      	b.n	80105a2 <ucdr_deserialize_uint32_t+0x72>
 801064e:	bf00      	nop

08010650 <ucdr_deserialize_endian_uint32_t>:
 8010650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010654:	4604      	mov	r4, r0
 8010656:	460e      	mov	r6, r1
 8010658:	2104      	movs	r1, #4
 801065a:	4615      	mov	r5, r2
 801065c:	f000 fbda 	bl	8010e14 <ucdr_buffer_alignment>
 8010660:	4601      	mov	r1, r0
 8010662:	4620      	mov	r0, r4
 8010664:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010668:	f000 fc1c 	bl	8010ea4 <ucdr_advance_buffer>
 801066c:	2104      	movs	r1, #4
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fb70 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010674:	2800      	cmp	r0, #0
 8010676:	d13c      	bne.n	80106f2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8010678:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801067c:	42bb      	cmp	r3, r7
 801067e:	d933      	bls.n	80106e8 <ucdr_deserialize_endian_uint32_t+0x98>
 8010680:	eba3 0907 	sub.w	r9, r3, r7
 8010684:	60a3      	str	r3, [r4, #8]
 8010686:	6923      	ldr	r3, [r4, #16]
 8010688:	4620      	mov	r0, r4
 801068a:	f1c9 0a04 	rsb	sl, r9, #4
 801068e:	444b      	add	r3, r9
 8010690:	4651      	mov	r1, sl
 8010692:	6123      	str	r3, [r4, #16]
 8010694:	f000 fb6a 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010698:	2800      	cmp	r0, #0
 801069a:	d048      	beq.n	801072e <ucdr_deserialize_endian_uint32_t+0xde>
 801069c:	2e01      	cmp	r6, #1
 801069e:	d061      	beq.n	8010764 <ucdr_deserialize_endian_uint32_t+0x114>
 80106a0:	78fb      	ldrb	r3, [r7, #3]
 80106a2:	702b      	strb	r3, [r5, #0]
 80106a4:	f1b9 0f00 	cmp.w	r9, #0
 80106a8:	d050      	beq.n	801074c <ucdr_deserialize_endian_uint32_t+0xfc>
 80106aa:	78bb      	ldrb	r3, [r7, #2]
 80106ac:	f1b9 0f01 	cmp.w	r9, #1
 80106b0:	706b      	strb	r3, [r5, #1]
 80106b2:	f105 0302 	add.w	r3, r5, #2
 80106b6:	d04d      	beq.n	8010754 <ucdr_deserialize_endian_uint32_t+0x104>
 80106b8:	787b      	ldrb	r3, [r7, #1]
 80106ba:	f1b9 0f02 	cmp.w	r9, #2
 80106be:	70ab      	strb	r3, [r5, #2]
 80106c0:	f105 0303 	add.w	r3, r5, #3
 80106c4:	d04a      	beq.n	801075c <ucdr_deserialize_endian_uint32_t+0x10c>
 80106c6:	783b      	ldrb	r3, [r7, #0]
 80106c8:	70eb      	strb	r3, [r5, #3]
 80106ca:	6923      	ldr	r3, [r4, #16]
 80106cc:	2104      	movs	r1, #4
 80106ce:	68a2      	ldr	r2, [r4, #8]
 80106d0:	3304      	adds	r3, #4
 80106d2:	7da0      	ldrb	r0, [r4, #22]
 80106d4:	4452      	add	r2, sl
 80106d6:	7561      	strb	r1, [r4, #21]
 80106d8:	eba3 0309 	sub.w	r3, r3, r9
 80106dc:	f080 0001 	eor.w	r0, r0, #1
 80106e0:	60a2      	str	r2, [r4, #8]
 80106e2:	6123      	str	r3, [r4, #16]
 80106e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e8:	2104      	movs	r1, #4
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 fb3e 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 80106f0:	b1a8      	cbz	r0, 801071e <ucdr_deserialize_endian_uint32_t+0xce>
 80106f2:	2e01      	cmp	r6, #1
 80106f4:	68a3      	ldr	r3, [r4, #8]
 80106f6:	d017      	beq.n	8010728 <ucdr_deserialize_endian_uint32_t+0xd8>
 80106f8:	78db      	ldrb	r3, [r3, #3]
 80106fa:	702b      	strb	r3, [r5, #0]
 80106fc:	68a3      	ldr	r3, [r4, #8]
 80106fe:	789b      	ldrb	r3, [r3, #2]
 8010700:	706b      	strb	r3, [r5, #1]
 8010702:	68a3      	ldr	r3, [r4, #8]
 8010704:	785b      	ldrb	r3, [r3, #1]
 8010706:	70ab      	strb	r3, [r5, #2]
 8010708:	68a3      	ldr	r3, [r4, #8]
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	70eb      	strb	r3, [r5, #3]
 801070e:	2104      	movs	r1, #4
 8010710:	68a2      	ldr	r2, [r4, #8]
 8010712:	6923      	ldr	r3, [r4, #16]
 8010714:	440a      	add	r2, r1
 8010716:	7561      	strb	r1, [r4, #21]
 8010718:	440b      	add	r3, r1
 801071a:	60a2      	str	r2, [r4, #8]
 801071c:	6123      	str	r3, [r4, #16]
 801071e:	7da0      	ldrb	r0, [r4, #22]
 8010720:	f080 0001 	eor.w	r0, r0, #1
 8010724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	602b      	str	r3, [r5, #0]
 801072c:	e7ef      	b.n	801070e <ucdr_deserialize_endian_uint32_t+0xbe>
 801072e:	68a2      	ldr	r2, [r4, #8]
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	eba2 0209 	sub.w	r2, r2, r9
 8010736:	7da0      	ldrb	r0, [r4, #22]
 8010738:	eba3 0309 	sub.w	r3, r3, r9
 801073c:	f884 8015 	strb.w	r8, [r4, #21]
 8010740:	f080 0001 	eor.w	r0, r0, #1
 8010744:	60a2      	str	r2, [r4, #8]
 8010746:	6123      	str	r3, [r4, #16]
 8010748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801074c:	68a3      	ldr	r3, [r4, #8]
 801074e:	789b      	ldrb	r3, [r3, #2]
 8010750:	706b      	strb	r3, [r5, #1]
 8010752:	1cab      	adds	r3, r5, #2
 8010754:	68a2      	ldr	r2, [r4, #8]
 8010756:	7852      	ldrb	r2, [r2, #1]
 8010758:	f803 2b01 	strb.w	r2, [r3], #1
 801075c:	68a2      	ldr	r2, [r4, #8]
 801075e:	7812      	ldrb	r2, [r2, #0]
 8010760:	701a      	strb	r2, [r3, #0]
 8010762:	e7b2      	b.n	80106ca <ucdr_deserialize_endian_uint32_t+0x7a>
 8010764:	4639      	mov	r1, r7
 8010766:	464a      	mov	r2, r9
 8010768:	4628      	mov	r0, r5
 801076a:	f007 fae2 	bl	8017d32 <memcpy>
 801076e:	4652      	mov	r2, sl
 8010770:	eb05 0009 	add.w	r0, r5, r9
 8010774:	68a1      	ldr	r1, [r4, #8]
 8010776:	f007 fadc 	bl	8017d32 <memcpy>
 801077a:	e7a6      	b.n	80106ca <ucdr_deserialize_endian_uint32_t+0x7a>

0801077c <ucdr_serialize_uint64_t>:
 801077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010780:	4604      	mov	r4, r0
 8010782:	b082      	sub	sp, #8
 8010784:	2108      	movs	r1, #8
 8010786:	e9cd 2300 	strd	r2, r3, [sp]
 801078a:	f000 fb43 	bl	8010e14 <ucdr_buffer_alignment>
 801078e:	4601      	mov	r1, r0
 8010790:	4620      	mov	r0, r4
 8010792:	7d67      	ldrb	r7, [r4, #21]
 8010794:	f000 fb86 	bl	8010ea4 <ucdr_advance_buffer>
 8010798:	2108      	movs	r1, #8
 801079a:	4620      	mov	r0, r4
 801079c:	f000 fada 	bl	8010d54 <ucdr_check_buffer_available_for>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d14e      	bne.n	8010842 <ucdr_serialize_uint64_t+0xc6>
 80107a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80107a8:	42ab      	cmp	r3, r5
 80107aa:	d945      	bls.n	8010838 <ucdr_serialize_uint64_t+0xbc>
 80107ac:	1b5e      	subs	r6, r3, r5
 80107ae:	60a3      	str	r3, [r4, #8]
 80107b0:	6923      	ldr	r3, [r4, #16]
 80107b2:	4620      	mov	r0, r4
 80107b4:	f1c6 0808 	rsb	r8, r6, #8
 80107b8:	4433      	add	r3, r6
 80107ba:	4641      	mov	r1, r8
 80107bc:	6123      	str	r3, [r4, #16]
 80107be:	f000 fad5 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d074      	beq.n	80108b0 <ucdr_serialize_uint64_t+0x134>
 80107c6:	7d23      	ldrb	r3, [r4, #20]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	f000 809b 	beq.w	8010904 <ucdr_serialize_uint64_t+0x188>
 80107ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107d2:	702b      	strb	r3, [r5, #0]
 80107d4:	2e00      	cmp	r6, #0
 80107d6:	d078      	beq.n	80108ca <ucdr_serialize_uint64_t+0x14e>
 80107d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107dc:	2e01      	cmp	r6, #1
 80107de:	706b      	strb	r3, [r5, #1]
 80107e0:	d077      	beq.n	80108d2 <ucdr_serialize_uint64_t+0x156>
 80107e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107e6:	2e02      	cmp	r6, #2
 80107e8:	70ab      	strb	r3, [r5, #2]
 80107ea:	d076      	beq.n	80108da <ucdr_serialize_uint64_t+0x15e>
 80107ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107f0:	2e03      	cmp	r6, #3
 80107f2:	70eb      	strb	r3, [r5, #3]
 80107f4:	d075      	beq.n	80108e2 <ucdr_serialize_uint64_t+0x166>
 80107f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80107fa:	2e04      	cmp	r6, #4
 80107fc:	712b      	strb	r3, [r5, #4]
 80107fe:	d074      	beq.n	80108ea <ucdr_serialize_uint64_t+0x16e>
 8010800:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010804:	2e05      	cmp	r6, #5
 8010806:	716b      	strb	r3, [r5, #5]
 8010808:	d073      	beq.n	80108f2 <ucdr_serialize_uint64_t+0x176>
 801080a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801080e:	2e06      	cmp	r6, #6
 8010810:	71ab      	strb	r3, [r5, #6]
 8010812:	d072      	beq.n	80108fa <ucdr_serialize_uint64_t+0x17e>
 8010814:	f89d 3000 	ldrb.w	r3, [sp]
 8010818:	71eb      	strb	r3, [r5, #7]
 801081a:	6923      	ldr	r3, [r4, #16]
 801081c:	2108      	movs	r1, #8
 801081e:	68a2      	ldr	r2, [r4, #8]
 8010820:	3308      	adds	r3, #8
 8010822:	7da0      	ldrb	r0, [r4, #22]
 8010824:	4442      	add	r2, r8
 8010826:	7561      	strb	r1, [r4, #21]
 8010828:	1b9e      	subs	r6, r3, r6
 801082a:	f080 0001 	eor.w	r0, r0, #1
 801082e:	60a2      	str	r2, [r4, #8]
 8010830:	6126      	str	r6, [r4, #16]
 8010832:	b002      	add	sp, #8
 8010834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010838:	2108      	movs	r1, #8
 801083a:	4620      	mov	r0, r4
 801083c:	f000 fa96 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010840:	b350      	cbz	r0, 8010898 <ucdr_serialize_uint64_t+0x11c>
 8010842:	7d23      	ldrb	r3, [r4, #20]
 8010844:	2b01      	cmp	r3, #1
 8010846:	d02d      	beq.n	80108a4 <ucdr_serialize_uint64_t+0x128>
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801084e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010852:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010856:	7018      	strb	r0, [r3, #0]
 8010858:	68a3      	ldr	r3, [r4, #8]
 801085a:	705a      	strb	r2, [r3, #1]
 801085c:	68a3      	ldr	r3, [r4, #8]
 801085e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010862:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010866:	7099      	strb	r1, [r3, #2]
 8010868:	68a3      	ldr	r3, [r4, #8]
 801086a:	70da      	strb	r2, [r3, #3]
 801086c:	68a3      	ldr	r3, [r4, #8]
 801086e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010872:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010876:	7118      	strb	r0, [r3, #4]
 8010878:	68a3      	ldr	r3, [r4, #8]
 801087a:	715a      	strb	r2, [r3, #5]
 801087c:	68a3      	ldr	r3, [r4, #8]
 801087e:	f89d 2000 	ldrb.w	r2, [sp]
 8010882:	7199      	strb	r1, [r3, #6]
 8010884:	68a3      	ldr	r3, [r4, #8]
 8010886:	71da      	strb	r2, [r3, #7]
 8010888:	2108      	movs	r1, #8
 801088a:	68a2      	ldr	r2, [r4, #8]
 801088c:	6923      	ldr	r3, [r4, #16]
 801088e:	440a      	add	r2, r1
 8010890:	7561      	strb	r1, [r4, #21]
 8010892:	440b      	add	r3, r1
 8010894:	60a2      	str	r2, [r4, #8]
 8010896:	6123      	str	r3, [r4, #16]
 8010898:	7da0      	ldrb	r0, [r4, #22]
 801089a:	f080 0001 	eor.w	r0, r0, #1
 801089e:	b002      	add	sp, #8
 80108a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a4:	466b      	mov	r3, sp
 80108a6:	68a2      	ldr	r2, [r4, #8]
 80108a8:	cb03      	ldmia	r3!, {r0, r1}
 80108aa:	6010      	str	r0, [r2, #0]
 80108ac:	6051      	str	r1, [r2, #4]
 80108ae:	e7eb      	b.n	8010888 <ucdr_serialize_uint64_t+0x10c>
 80108b0:	68a2      	ldr	r2, [r4, #8]
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	7da0      	ldrb	r0, [r4, #22]
 80108b6:	1b92      	subs	r2, r2, r6
 80108b8:	1b9b      	subs	r3, r3, r6
 80108ba:	7567      	strb	r7, [r4, #21]
 80108bc:	f080 0001 	eor.w	r0, r0, #1
 80108c0:	60a2      	str	r2, [r4, #8]
 80108c2:	6123      	str	r3, [r4, #16]
 80108c4:	b002      	add	sp, #8
 80108c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ca:	68a3      	ldr	r3, [r4, #8]
 80108cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80108d0:	701a      	strb	r2, [r3, #0]
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	68a3      	ldr	r3, [r4, #8]
 80108dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	68a3      	ldr	r3, [r4, #8]
 80108e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80108e8:	701a      	strb	r2, [r3, #0]
 80108ea:	68a3      	ldr	r3, [r4, #8]
 80108ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80108f0:	701a      	strb	r2, [r3, #0]
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80108f8:	701a      	strb	r2, [r3, #0]
 80108fa:	68a3      	ldr	r3, [r4, #8]
 80108fc:	f89d 2000 	ldrb.w	r2, [sp]
 8010900:	701a      	strb	r2, [r3, #0]
 8010902:	e78a      	b.n	801081a <ucdr_serialize_uint64_t+0x9e>
 8010904:	4628      	mov	r0, r5
 8010906:	466d      	mov	r5, sp
 8010908:	4632      	mov	r2, r6
 801090a:	4629      	mov	r1, r5
 801090c:	f007 fa11 	bl	8017d32 <memcpy>
 8010910:	4642      	mov	r2, r8
 8010912:	19a9      	adds	r1, r5, r6
 8010914:	68a0      	ldr	r0, [r4, #8]
 8010916:	f007 fa0c 	bl	8017d32 <memcpy>
 801091a:	e77e      	b.n	801081a <ucdr_serialize_uint64_t+0x9e>

0801091c <ucdr_serialize_int16_t>:
 801091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010920:	460b      	mov	r3, r1
 8010922:	b082      	sub	sp, #8
 8010924:	4604      	mov	r4, r0
 8010926:	2102      	movs	r1, #2
 8010928:	f8ad 3006 	strh.w	r3, [sp, #6]
 801092c:	f000 fa72 	bl	8010e14 <ucdr_buffer_alignment>
 8010930:	4601      	mov	r1, r0
 8010932:	4620      	mov	r0, r4
 8010934:	7d67      	ldrb	r7, [r4, #21]
 8010936:	f000 fab5 	bl	8010ea4 <ucdr_advance_buffer>
 801093a:	2102      	movs	r1, #2
 801093c:	4620      	mov	r0, r4
 801093e:	f000 fa09 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010942:	bb78      	cbnz	r0, 80109a4 <ucdr_serialize_int16_t+0x88>
 8010944:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010948:	42ab      	cmp	r3, r5
 801094a:	d926      	bls.n	801099a <ucdr_serialize_int16_t+0x7e>
 801094c:	1b5e      	subs	r6, r3, r5
 801094e:	60a3      	str	r3, [r4, #8]
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	4620      	mov	r0, r4
 8010954:	f1c6 0802 	rsb	r8, r6, #2
 8010958:	4433      	add	r3, r6
 801095a:	4641      	mov	r1, r8
 801095c:	6123      	str	r3, [r4, #16]
 801095e:	f000 fa05 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010962:	2800      	cmp	r0, #0
 8010964:	d03b      	beq.n	80109de <ucdr_serialize_int16_t+0xc2>
 8010966:	7d23      	ldrb	r3, [r4, #20]
 8010968:	2b01      	cmp	r3, #1
 801096a:	d04a      	beq.n	8010a02 <ucdr_serialize_int16_t+0xe6>
 801096c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010970:	702b      	strb	r3, [r5, #0]
 8010972:	2e00      	cmp	r6, #0
 8010974:	d040      	beq.n	80109f8 <ucdr_serialize_int16_t+0xdc>
 8010976:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801097a:	706b      	strb	r3, [r5, #1]
 801097c:	6923      	ldr	r3, [r4, #16]
 801097e:	2102      	movs	r1, #2
 8010980:	68a2      	ldr	r2, [r4, #8]
 8010982:	3302      	adds	r3, #2
 8010984:	7da0      	ldrb	r0, [r4, #22]
 8010986:	4442      	add	r2, r8
 8010988:	7561      	strb	r1, [r4, #21]
 801098a:	1b9e      	subs	r6, r3, r6
 801098c:	f080 0001 	eor.w	r0, r0, #1
 8010990:	60a2      	str	r2, [r4, #8]
 8010992:	6126      	str	r6, [r4, #16]
 8010994:	b002      	add	sp, #8
 8010996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801099a:	2102      	movs	r1, #2
 801099c:	4620      	mov	r0, r4
 801099e:	f000 f9e5 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 80109a2:	b190      	cbz	r0, 80109ca <ucdr_serialize_int16_t+0xae>
 80109a4:	7d23      	ldrb	r3, [r4, #20]
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	68a3      	ldr	r3, [r4, #8]
 80109aa:	d014      	beq.n	80109d6 <ucdr_serialize_int16_t+0xba>
 80109ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80109b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80109b4:	7019      	strb	r1, [r3, #0]
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	705a      	strb	r2, [r3, #1]
 80109ba:	2102      	movs	r1, #2
 80109bc:	68a2      	ldr	r2, [r4, #8]
 80109be:	6923      	ldr	r3, [r4, #16]
 80109c0:	440a      	add	r2, r1
 80109c2:	7561      	strb	r1, [r4, #21]
 80109c4:	440b      	add	r3, r1
 80109c6:	60a2      	str	r2, [r4, #8]
 80109c8:	6123      	str	r3, [r4, #16]
 80109ca:	7da0      	ldrb	r0, [r4, #22]
 80109cc:	f080 0001 	eor.w	r0, r0, #1
 80109d0:	b002      	add	sp, #8
 80109d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109da:	801a      	strh	r2, [r3, #0]
 80109dc:	e7ed      	b.n	80109ba <ucdr_serialize_int16_t+0x9e>
 80109de:	68a2      	ldr	r2, [r4, #8]
 80109e0:	6923      	ldr	r3, [r4, #16]
 80109e2:	7da0      	ldrb	r0, [r4, #22]
 80109e4:	1b92      	subs	r2, r2, r6
 80109e6:	1b9b      	subs	r3, r3, r6
 80109e8:	7567      	strb	r7, [r4, #21]
 80109ea:	f080 0001 	eor.w	r0, r0, #1
 80109ee:	60a2      	str	r2, [r4, #8]
 80109f0:	6123      	str	r3, [r4, #16]
 80109f2:	b002      	add	sp, #8
 80109f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f8:	68a3      	ldr	r3, [r4, #8]
 80109fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80109fe:	701a      	strb	r2, [r3, #0]
 8010a00:	e7bc      	b.n	801097c <ucdr_serialize_int16_t+0x60>
 8010a02:	4628      	mov	r0, r5
 8010a04:	f10d 0506 	add.w	r5, sp, #6
 8010a08:	4632      	mov	r2, r6
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	f007 f991 	bl	8017d32 <memcpy>
 8010a10:	4642      	mov	r2, r8
 8010a12:	19a9      	adds	r1, r5, r6
 8010a14:	68a0      	ldr	r0, [r4, #8]
 8010a16:	f007 f98c 	bl	8017d32 <memcpy>
 8010a1a:	e7af      	b.n	801097c <ucdr_serialize_int16_t+0x60>

08010a1c <ucdr_deserialize_int16_t>:
 8010a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a20:	4604      	mov	r4, r0
 8010a22:	460d      	mov	r5, r1
 8010a24:	2102      	movs	r1, #2
 8010a26:	f000 f9f5 	bl	8010e14 <ucdr_buffer_alignment>
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010a32:	f000 fa37 	bl	8010ea4 <ucdr_advance_buffer>
 8010a36:	2102      	movs	r1, #2
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f000 f98b 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010a3e:	bb60      	cbnz	r0, 8010a9a <ucdr_deserialize_int16_t+0x7e>
 8010a40:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010a44:	42be      	cmp	r6, r7
 8010a46:	d923      	bls.n	8010a90 <ucdr_deserialize_int16_t+0x74>
 8010a48:	6923      	ldr	r3, [r4, #16]
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	60a6      	str	r6, [r4, #8]
 8010a4e:	1bf6      	subs	r6, r6, r7
 8010a50:	4433      	add	r3, r6
 8010a52:	f1c6 0902 	rsb	r9, r6, #2
 8010a56:	6123      	str	r3, [r4, #16]
 8010a58:	4649      	mov	r1, r9
 8010a5a:	f000 f987 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d034      	beq.n	8010acc <ucdr_deserialize_int16_t+0xb0>
 8010a62:	7d23      	ldrb	r3, [r4, #20]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d042      	beq.n	8010aee <ucdr_deserialize_int16_t+0xd2>
 8010a68:	787b      	ldrb	r3, [r7, #1]
 8010a6a:	702b      	strb	r3, [r5, #0]
 8010a6c:	2e00      	cmp	r6, #0
 8010a6e:	d03a      	beq.n	8010ae6 <ucdr_deserialize_int16_t+0xca>
 8010a70:	783b      	ldrb	r3, [r7, #0]
 8010a72:	706b      	strb	r3, [r5, #1]
 8010a74:	6923      	ldr	r3, [r4, #16]
 8010a76:	2102      	movs	r1, #2
 8010a78:	68a2      	ldr	r2, [r4, #8]
 8010a7a:	3302      	adds	r3, #2
 8010a7c:	7da0      	ldrb	r0, [r4, #22]
 8010a7e:	444a      	add	r2, r9
 8010a80:	7561      	strb	r1, [r4, #21]
 8010a82:	1b9b      	subs	r3, r3, r6
 8010a84:	f080 0001 	eor.w	r0, r0, #1
 8010a88:	60a2      	str	r2, [r4, #8]
 8010a8a:	6123      	str	r3, [r4, #16]
 8010a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a90:	2102      	movs	r1, #2
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 f96a 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010a98:	b180      	cbz	r0, 8010abc <ucdr_deserialize_int16_t+0xa0>
 8010a9a:	7d23      	ldrb	r3, [r4, #20]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	68a3      	ldr	r3, [r4, #8]
 8010aa0:	d011      	beq.n	8010ac6 <ucdr_deserialize_int16_t+0xaa>
 8010aa2:	785b      	ldrb	r3, [r3, #1]
 8010aa4:	702b      	strb	r3, [r5, #0]
 8010aa6:	68a3      	ldr	r3, [r4, #8]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	706b      	strb	r3, [r5, #1]
 8010aac:	2102      	movs	r1, #2
 8010aae:	68a2      	ldr	r2, [r4, #8]
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	440a      	add	r2, r1
 8010ab4:	7561      	strb	r1, [r4, #21]
 8010ab6:	440b      	add	r3, r1
 8010ab8:	60a2      	str	r2, [r4, #8]
 8010aba:	6123      	str	r3, [r4, #16]
 8010abc:	7da0      	ldrb	r0, [r4, #22]
 8010abe:	f080 0001 	eor.w	r0, r0, #1
 8010ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ac6:	881b      	ldrh	r3, [r3, #0]
 8010ac8:	802b      	strh	r3, [r5, #0]
 8010aca:	e7ef      	b.n	8010aac <ucdr_deserialize_int16_t+0x90>
 8010acc:	68a2      	ldr	r2, [r4, #8]
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	1b92      	subs	r2, r2, r6
 8010ad2:	7da0      	ldrb	r0, [r4, #22]
 8010ad4:	1b9b      	subs	r3, r3, r6
 8010ad6:	f884 8015 	strb.w	r8, [r4, #21]
 8010ada:	f080 0001 	eor.w	r0, r0, #1
 8010ade:	60a2      	str	r2, [r4, #8]
 8010ae0:	6123      	str	r3, [r4, #16]
 8010ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ae6:	68a3      	ldr	r3, [r4, #8]
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	706b      	strb	r3, [r5, #1]
 8010aec:	e7c2      	b.n	8010a74 <ucdr_deserialize_int16_t+0x58>
 8010aee:	4639      	mov	r1, r7
 8010af0:	4632      	mov	r2, r6
 8010af2:	4628      	mov	r0, r5
 8010af4:	f007 f91d 	bl	8017d32 <memcpy>
 8010af8:	464a      	mov	r2, r9
 8010afa:	19a8      	adds	r0, r5, r6
 8010afc:	68a1      	ldr	r1, [r4, #8]
 8010afe:	f007 f918 	bl	8017d32 <memcpy>
 8010b02:	e7b7      	b.n	8010a74 <ucdr_deserialize_int16_t+0x58>

08010b04 <ucdr_serialize_int32_t>:
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	b082      	sub	sp, #8
 8010b0a:	4604      	mov	r4, r0
 8010b0c:	9101      	str	r1, [sp, #4]
 8010b0e:	2104      	movs	r1, #4
 8010b10:	f000 f980 	bl	8010e14 <ucdr_buffer_alignment>
 8010b14:	4601      	mov	r1, r0
 8010b16:	4620      	mov	r0, r4
 8010b18:	7d67      	ldrb	r7, [r4, #21]
 8010b1a:	f000 f9c3 	bl	8010ea4 <ucdr_advance_buffer>
 8010b1e:	2104      	movs	r1, #4
 8010b20:	4620      	mov	r0, r4
 8010b22:	f000 f917 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d139      	bne.n	8010b9e <ucdr_serialize_int32_t+0x9a>
 8010b2a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010b2e:	42ab      	cmp	r3, r5
 8010b30:	d930      	bls.n	8010b94 <ucdr_serialize_int32_t+0x90>
 8010b32:	1b5e      	subs	r6, r3, r5
 8010b34:	60a3      	str	r3, [r4, #8]
 8010b36:	6923      	ldr	r3, [r4, #16]
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f1c6 0804 	rsb	r8, r6, #4
 8010b3e:	4433      	add	r3, r6
 8010b40:	4641      	mov	r1, r8
 8010b42:	6123      	str	r3, [r4, #16]
 8010b44:	f000 f912 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d04c      	beq.n	8010be6 <ucdr_serialize_int32_t+0xe2>
 8010b4c:	7d23      	ldrb	r3, [r4, #20]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d063      	beq.n	8010c1a <ucdr_serialize_int32_t+0x116>
 8010b52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b56:	702b      	strb	r3, [r5, #0]
 8010b58:	2e00      	cmp	r6, #0
 8010b5a:	d051      	beq.n	8010c00 <ucdr_serialize_int32_t+0xfc>
 8010b5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b60:	2e01      	cmp	r6, #1
 8010b62:	706b      	strb	r3, [r5, #1]
 8010b64:	d050      	beq.n	8010c08 <ucdr_serialize_int32_t+0x104>
 8010b66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b6a:	2e02      	cmp	r6, #2
 8010b6c:	70ab      	strb	r3, [r5, #2]
 8010b6e:	d04f      	beq.n	8010c10 <ucdr_serialize_int32_t+0x10c>
 8010b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b74:	70eb      	strb	r3, [r5, #3]
 8010b76:	6923      	ldr	r3, [r4, #16]
 8010b78:	2104      	movs	r1, #4
 8010b7a:	68a2      	ldr	r2, [r4, #8]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	7da0      	ldrb	r0, [r4, #22]
 8010b80:	4442      	add	r2, r8
 8010b82:	7561      	strb	r1, [r4, #21]
 8010b84:	1b9e      	subs	r6, r3, r6
 8010b86:	f080 0001 	eor.w	r0, r0, #1
 8010b8a:	60a2      	str	r2, [r4, #8]
 8010b8c:	6126      	str	r6, [r4, #16]
 8010b8e:	b002      	add	sp, #8
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	2104      	movs	r1, #4
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 f8e8 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010b9c:	b1d0      	cbz	r0, 8010bd4 <ucdr_serialize_int32_t+0xd0>
 8010b9e:	7d23      	ldrb	r3, [r4, #20]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	68a3      	ldr	r3, [r4, #8]
 8010ba4:	d01c      	beq.n	8010be0 <ucdr_serialize_int32_t+0xdc>
 8010ba6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010baa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bae:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010bb2:	7018      	strb	r0, [r3, #0]
 8010bb4:	68a3      	ldr	r3, [r4, #8]
 8010bb6:	705a      	strb	r2, [r3, #1]
 8010bb8:	68a3      	ldr	r3, [r4, #8]
 8010bba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bbe:	7099      	strb	r1, [r3, #2]
 8010bc0:	68a3      	ldr	r3, [r4, #8]
 8010bc2:	70da      	strb	r2, [r3, #3]
 8010bc4:	2104      	movs	r1, #4
 8010bc6:	68a2      	ldr	r2, [r4, #8]
 8010bc8:	6923      	ldr	r3, [r4, #16]
 8010bca:	440a      	add	r2, r1
 8010bcc:	7561      	strb	r1, [r4, #21]
 8010bce:	440b      	add	r3, r1
 8010bd0:	60a2      	str	r2, [r4, #8]
 8010bd2:	6123      	str	r3, [r4, #16]
 8010bd4:	7da0      	ldrb	r0, [r4, #22]
 8010bd6:	f080 0001 	eor.w	r0, r0, #1
 8010bda:	b002      	add	sp, #8
 8010bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be0:	9a01      	ldr	r2, [sp, #4]
 8010be2:	601a      	str	r2, [r3, #0]
 8010be4:	e7ee      	b.n	8010bc4 <ucdr_serialize_int32_t+0xc0>
 8010be6:	68a2      	ldr	r2, [r4, #8]
 8010be8:	6923      	ldr	r3, [r4, #16]
 8010bea:	7da0      	ldrb	r0, [r4, #22]
 8010bec:	1b92      	subs	r2, r2, r6
 8010bee:	1b9b      	subs	r3, r3, r6
 8010bf0:	7567      	strb	r7, [r4, #21]
 8010bf2:	f080 0001 	eor.w	r0, r0, #1
 8010bf6:	60a2      	str	r2, [r4, #8]
 8010bf8:	6123      	str	r3, [r4, #16]
 8010bfa:	b002      	add	sp, #8
 8010bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c00:	68a3      	ldr	r3, [r4, #8]
 8010c02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c06:	701a      	strb	r2, [r3, #0]
 8010c08:	68a3      	ldr	r3, [r4, #8]
 8010c0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	68a3      	ldr	r3, [r4, #8]
 8010c12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010c16:	701a      	strb	r2, [r3, #0]
 8010c18:	e7ad      	b.n	8010b76 <ucdr_serialize_int32_t+0x72>
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	ad01      	add	r5, sp, #4
 8010c1e:	4632      	mov	r2, r6
 8010c20:	4629      	mov	r1, r5
 8010c22:	f007 f886 	bl	8017d32 <memcpy>
 8010c26:	4642      	mov	r2, r8
 8010c28:	19a9      	adds	r1, r5, r6
 8010c2a:	68a0      	ldr	r0, [r4, #8]
 8010c2c:	f007 f881 	bl	8017d32 <memcpy>
 8010c30:	e7a1      	b.n	8010b76 <ucdr_serialize_int32_t+0x72>
 8010c32:	bf00      	nop

08010c34 <ucdr_deserialize_int32_t>:
 8010c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	f000 f8e9 	bl	8010e14 <ucdr_buffer_alignment>
 8010c42:	4601      	mov	r1, r0
 8010c44:	4620      	mov	r0, r4
 8010c46:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c4a:	f000 f92b 	bl	8010ea4 <ucdr_advance_buffer>
 8010c4e:	2104      	movs	r1, #4
 8010c50:	4620      	mov	r0, r4
 8010c52:	f000 f87f 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d138      	bne.n	8010ccc <ucdr_deserialize_int32_t+0x98>
 8010c5a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010c5e:	42b7      	cmp	r7, r6
 8010c60:	d92f      	bls.n	8010cc2 <ucdr_deserialize_int32_t+0x8e>
 8010c62:	6923      	ldr	r3, [r4, #16]
 8010c64:	4620      	mov	r0, r4
 8010c66:	60a7      	str	r7, [r4, #8]
 8010c68:	1bbf      	subs	r7, r7, r6
 8010c6a:	443b      	add	r3, r7
 8010c6c:	f1c7 0904 	rsb	r9, r7, #4
 8010c70:	6123      	str	r3, [r4, #16]
 8010c72:	4649      	mov	r1, r9
 8010c74:	f000 f87a 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d046      	beq.n	8010d0a <ucdr_deserialize_int32_t+0xd6>
 8010c7c:	7d23      	ldrb	r3, [r4, #20]
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d05c      	beq.n	8010d3c <ucdr_deserialize_int32_t+0x108>
 8010c82:	78f3      	ldrb	r3, [r6, #3]
 8010c84:	702b      	strb	r3, [r5, #0]
 8010c86:	2f00      	cmp	r7, #0
 8010c88:	d04c      	beq.n	8010d24 <ucdr_deserialize_int32_t+0xf0>
 8010c8a:	78b3      	ldrb	r3, [r6, #2]
 8010c8c:	2f01      	cmp	r7, #1
 8010c8e:	706b      	strb	r3, [r5, #1]
 8010c90:	f105 0302 	add.w	r3, r5, #2
 8010c94:	d04a      	beq.n	8010d2c <ucdr_deserialize_int32_t+0xf8>
 8010c96:	7873      	ldrb	r3, [r6, #1]
 8010c98:	2f02      	cmp	r7, #2
 8010c9a:	70ab      	strb	r3, [r5, #2]
 8010c9c:	f105 0303 	add.w	r3, r5, #3
 8010ca0:	d048      	beq.n	8010d34 <ucdr_deserialize_int32_t+0x100>
 8010ca2:	7833      	ldrb	r3, [r6, #0]
 8010ca4:	70eb      	strb	r3, [r5, #3]
 8010ca6:	6923      	ldr	r3, [r4, #16]
 8010ca8:	2104      	movs	r1, #4
 8010caa:	68a2      	ldr	r2, [r4, #8]
 8010cac:	3304      	adds	r3, #4
 8010cae:	7da0      	ldrb	r0, [r4, #22]
 8010cb0:	444a      	add	r2, r9
 8010cb2:	7561      	strb	r1, [r4, #21]
 8010cb4:	1bdb      	subs	r3, r3, r7
 8010cb6:	f080 0001 	eor.w	r0, r0, #1
 8010cba:	60a2      	str	r2, [r4, #8]
 8010cbc:	6123      	str	r3, [r4, #16]
 8010cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cc2:	2104      	movs	r1, #4
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 f851 	bl	8010d6c <ucdr_check_final_buffer_behavior>
 8010cca:	b1b0      	cbz	r0, 8010cfa <ucdr_deserialize_int32_t+0xc6>
 8010ccc:	7d23      	ldrb	r3, [r4, #20]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	68a3      	ldr	r3, [r4, #8]
 8010cd2:	d017      	beq.n	8010d04 <ucdr_deserialize_int32_t+0xd0>
 8010cd4:	78db      	ldrb	r3, [r3, #3]
 8010cd6:	702b      	strb	r3, [r5, #0]
 8010cd8:	68a3      	ldr	r3, [r4, #8]
 8010cda:	789b      	ldrb	r3, [r3, #2]
 8010cdc:	706b      	strb	r3, [r5, #1]
 8010cde:	68a3      	ldr	r3, [r4, #8]
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	70ab      	strb	r3, [r5, #2]
 8010ce4:	68a3      	ldr	r3, [r4, #8]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	70eb      	strb	r3, [r5, #3]
 8010cea:	2104      	movs	r1, #4
 8010cec:	68a2      	ldr	r2, [r4, #8]
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	440a      	add	r2, r1
 8010cf2:	7561      	strb	r1, [r4, #21]
 8010cf4:	440b      	add	r3, r1
 8010cf6:	60a2      	str	r2, [r4, #8]
 8010cf8:	6123      	str	r3, [r4, #16]
 8010cfa:	7da0      	ldrb	r0, [r4, #22]
 8010cfc:	f080 0001 	eor.w	r0, r0, #1
 8010d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	e7ef      	b.n	8010cea <ucdr_deserialize_int32_t+0xb6>
 8010d0a:	68a2      	ldr	r2, [r4, #8]
 8010d0c:	6923      	ldr	r3, [r4, #16]
 8010d0e:	1bd2      	subs	r2, r2, r7
 8010d10:	7da0      	ldrb	r0, [r4, #22]
 8010d12:	1bdb      	subs	r3, r3, r7
 8010d14:	f884 8015 	strb.w	r8, [r4, #21]
 8010d18:	f080 0001 	eor.w	r0, r0, #1
 8010d1c:	60a2      	str	r2, [r4, #8]
 8010d1e:	6123      	str	r3, [r4, #16]
 8010d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d24:	68a3      	ldr	r3, [r4, #8]
 8010d26:	789b      	ldrb	r3, [r3, #2]
 8010d28:	706b      	strb	r3, [r5, #1]
 8010d2a:	1cab      	adds	r3, r5, #2
 8010d2c:	68a2      	ldr	r2, [r4, #8]
 8010d2e:	7852      	ldrb	r2, [r2, #1]
 8010d30:	f803 2b01 	strb.w	r2, [r3], #1
 8010d34:	68a2      	ldr	r2, [r4, #8]
 8010d36:	7812      	ldrb	r2, [r2, #0]
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	e7b4      	b.n	8010ca6 <ucdr_deserialize_int32_t+0x72>
 8010d3c:	4631      	mov	r1, r6
 8010d3e:	463a      	mov	r2, r7
 8010d40:	4628      	mov	r0, r5
 8010d42:	f006 fff6 	bl	8017d32 <memcpy>
 8010d46:	464a      	mov	r2, r9
 8010d48:	19e8      	adds	r0, r5, r7
 8010d4a:	68a1      	ldr	r1, [r4, #8]
 8010d4c:	f006 fff1 	bl	8017d32 <memcpy>
 8010d50:	e7a9      	b.n	8010ca6 <ucdr_deserialize_int32_t+0x72>
 8010d52:	bf00      	nop

08010d54 <ucdr_check_buffer_available_for>:
 8010d54:	7d83      	ldrb	r3, [r0, #22]
 8010d56:	b93b      	cbnz	r3, 8010d68 <ucdr_check_buffer_available_for+0x14>
 8010d58:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010d5c:	4419      	add	r1, r3
 8010d5e:	4288      	cmp	r0, r1
 8010d60:	bf34      	ite	cc
 8010d62:	2000      	movcc	r0, #0
 8010d64:	2001      	movcs	r0, #1
 8010d66:	4770      	bx	lr
 8010d68:	2000      	movs	r0, #0
 8010d6a:	4770      	bx	lr

08010d6c <ucdr_check_final_buffer_behavior>:
 8010d6c:	7d83      	ldrb	r3, [r0, #22]
 8010d6e:	b943      	cbnz	r3, 8010d82 <ucdr_check_final_buffer_behavior+0x16>
 8010d70:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010d74:	b510      	push	{r4, lr}
 8010d76:	4291      	cmp	r1, r2
 8010d78:	4604      	mov	r4, r0
 8010d7a:	d205      	bcs.n	8010d88 <ucdr_check_final_buffer_behavior+0x1c>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	4618      	mov	r0, r3
 8010d80:	bd10      	pop	{r4, pc}
 8010d82:	2300      	movs	r3, #0
 8010d84:	4618      	mov	r0, r3
 8010d86:	4770      	bx	lr
 8010d88:	6982      	ldr	r2, [r0, #24]
 8010d8a:	b13a      	cbz	r2, 8010d9c <ucdr_check_final_buffer_behavior+0x30>
 8010d8c:	69c1      	ldr	r1, [r0, #28]
 8010d8e:	4790      	blx	r2
 8010d90:	f080 0301 	eor.w	r3, r0, #1
 8010d94:	75a0      	strb	r0, [r4, #22]
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	bd10      	pop	{r4, pc}
 8010d9c:	2001      	movs	r0, #1
 8010d9e:	75a0      	strb	r0, [r4, #22]
 8010da0:	e7fa      	b.n	8010d98 <ucdr_check_final_buffer_behavior+0x2c>
 8010da2:	bf00      	nop

08010da4 <ucdr_set_on_full_buffer_callback>:
 8010da4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop

08010dac <ucdr_init_buffer_origin_offset_endian>:
 8010dac:	b410      	push	{r4}
 8010dae:	9c01      	ldr	r4, [sp, #4]
 8010db0:	440a      	add	r2, r1
 8010db2:	6001      	str	r1, [r0, #0]
 8010db4:	6042      	str	r2, [r0, #4]
 8010db6:	190a      	adds	r2, r1, r4
 8010db8:	441c      	add	r4, r3
 8010dba:	6082      	str	r2, [r0, #8]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010dc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010dc6:	7542      	strb	r2, [r0, #21]
 8010dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dcc:	7582      	strb	r2, [r0, #22]
 8010dce:	7503      	strb	r3, [r0, #20]
 8010dd0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop

08010dd8 <ucdr_init_buffer_origin_offset>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	9c04      	ldr	r4, [sp, #16]
 8010dde:	9400      	str	r4, [sp, #0]
 8010de0:	2401      	movs	r4, #1
 8010de2:	9401      	str	r4, [sp, #4]
 8010de4:	f7ff ffe2 	bl	8010dac <ucdr_init_buffer_origin_offset_endian>
 8010de8:	b002      	add	sp, #8
 8010dea:	bd10      	pop	{r4, pc}

08010dec <ucdr_init_buffer_origin>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	2400      	movs	r4, #0
 8010df0:	b082      	sub	sp, #8
 8010df2:	9400      	str	r4, [sp, #0]
 8010df4:	f7ff fff0 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8010df8:	b002      	add	sp, #8
 8010dfa:	bd10      	pop	{r4, pc}

08010dfc <ucdr_init_buffer>:
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f7ff bff5 	b.w	8010dec <ucdr_init_buffer_origin>
 8010e02:	bf00      	nop

08010e04 <ucdr_alignment>:
 8010e04:	fbb0 f2f1 	udiv	r2, r0, r1
 8010e08:	fb02 0011 	mls	r0, r2, r1, r0
 8010e0c:	1e4b      	subs	r3, r1, #1
 8010e0e:	1a08      	subs	r0, r1, r0
 8010e10:	4018      	ands	r0, r3
 8010e12:	4770      	bx	lr

08010e14 <ucdr_buffer_alignment>:
 8010e14:	7d43      	ldrb	r3, [r0, #21]
 8010e16:	428b      	cmp	r3, r1
 8010e18:	d209      	bcs.n	8010e2e <ucdr_buffer_alignment+0x1a>
 8010e1a:	6903      	ldr	r3, [r0, #16]
 8010e1c:	1e4a      	subs	r2, r1, #1
 8010e1e:	fbb3 f0f1 	udiv	r0, r3, r1
 8010e22:	fb01 3010 	mls	r0, r1, r0, r3
 8010e26:	1a09      	subs	r1, r1, r0
 8010e28:	ea01 0002 	and.w	r0, r1, r2
 8010e2c:	4770      	bx	lr
 8010e2e:	2000      	movs	r0, #0
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop

08010e34 <ucdr_align_to>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4604      	mov	r4, r0
 8010e38:	460d      	mov	r5, r1
 8010e3a:	f7ff ffeb 	bl	8010e14 <ucdr_buffer_alignment>
 8010e3e:	68a3      	ldr	r3, [r4, #8]
 8010e40:	7565      	strb	r5, [r4, #21]
 8010e42:	181a      	adds	r2, r3, r0
 8010e44:	6923      	ldr	r3, [r4, #16]
 8010e46:	4418      	add	r0, r3
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	6120      	str	r0, [r4, #16]
 8010e4e:	bf28      	it	cs
 8010e50:	4613      	movcs	r3, r2
 8010e52:	60a3      	str	r3, [r4, #8]
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	bf00      	nop

08010e58 <ucdr_buffer_length>:
 8010e58:	6882      	ldr	r2, [r0, #8]
 8010e5a:	6800      	ldr	r0, [r0, #0]
 8010e5c:	1a10      	subs	r0, r2, r0
 8010e5e:	4770      	bx	lr

08010e60 <ucdr_buffer_remaining>:
 8010e60:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010e64:	1a10      	subs	r0, r2, r0
 8010e66:	4770      	bx	lr

08010e68 <ucdr_check_final_buffer_behavior_array>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	7d83      	ldrb	r3, [r0, #22]
 8010e6c:	b9a3      	cbnz	r3, 8010e98 <ucdr_check_final_buffer_behavior_array+0x30>
 8010e6e:	4604      	mov	r4, r0
 8010e70:	460d      	mov	r5, r1
 8010e72:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d300      	bcc.n	8010e7c <ucdr_check_final_buffer_behavior_array+0x14>
 8010e7a:	b931      	cbnz	r1, 8010e8a <ucdr_check_final_buffer_behavior_array+0x22>
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f7ff ffef 	bl	8010e60 <ucdr_buffer_remaining>
 8010e82:	42a8      	cmp	r0, r5
 8010e84:	bf28      	it	cs
 8010e86:	4628      	movcs	r0, r5
 8010e88:	bd38      	pop	{r3, r4, r5, pc}
 8010e8a:	6983      	ldr	r3, [r0, #24]
 8010e8c:	b133      	cbz	r3, 8010e9c <ucdr_check_final_buffer_behavior_array+0x34>
 8010e8e:	69c1      	ldr	r1, [r0, #28]
 8010e90:	4798      	blx	r3
 8010e92:	75a0      	strb	r0, [r4, #22]
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0f1      	beq.n	8010e7c <ucdr_check_final_buffer_behavior_array+0x14>
 8010e98:	2000      	movs	r0, #0
 8010e9a:	bd38      	pop	{r3, r4, r5, pc}
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	7583      	strb	r3, [r0, #22]
 8010ea0:	e7fa      	b.n	8010e98 <ucdr_check_final_buffer_behavior_array+0x30>
 8010ea2:	bf00      	nop

08010ea4 <ucdr_advance_buffer>:
 8010ea4:	b538      	push	{r3, r4, r5, lr}
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	460d      	mov	r5, r1
 8010eaa:	f7ff ff53 	bl	8010d54 <ucdr_check_buffer_available_for>
 8010eae:	b178      	cbz	r0, 8010ed0 <ucdr_advance_buffer+0x2c>
 8010eb0:	6923      	ldr	r3, [r4, #16]
 8010eb2:	68a2      	ldr	r2, [r4, #8]
 8010eb4:	442b      	add	r3, r5
 8010eb6:	442a      	add	r2, r5
 8010eb8:	6123      	str	r3, [r4, #16]
 8010eba:	2301      	movs	r3, #1
 8010ebc:	60a2      	str	r2, [r4, #8]
 8010ebe:	7563      	strb	r3, [r4, #21]
 8010ec0:	bd38      	pop	{r3, r4, r5, pc}
 8010ec2:	68a2      	ldr	r2, [r4, #8]
 8010ec4:	1a2d      	subs	r5, r5, r0
 8010ec6:	6923      	ldr	r3, [r4, #16]
 8010ec8:	4402      	add	r2, r0
 8010eca:	4418      	add	r0, r3
 8010ecc:	60a2      	str	r2, [r4, #8]
 8010ece:	6120      	str	r0, [r4, #16]
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f7ff ffc7 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	d1f1      	bne.n	8010ec2 <ucdr_advance_buffer+0x1e>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	7563      	strb	r3, [r4, #21]
 8010ee2:	bd38      	pop	{r3, r4, r5, pc}

08010ee4 <uxr_buffer_delete_entity>:
 8010ee4:	b510      	push	{r4, lr}
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	b08e      	sub	sp, #56	@ 0x38
 8010eea:	4604      	mov	r4, r0
 8010eec:	9103      	str	r1, [sp, #12]
 8010eee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010ef2:	2303      	movs	r3, #3
 8010ef4:	2204      	movs	r2, #4
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	ab06      	add	r3, sp, #24
 8010efa:	f001 fa77 	bl	80123ec <uxr_prepare_stream_to_write_submessage>
 8010efe:	b918      	cbnz	r0, 8010f08 <uxr_buffer_delete_entity+0x24>
 8010f00:	4604      	mov	r4, r0
 8010f02:	4620      	mov	r0, r4
 8010f04:	b00e      	add	sp, #56	@ 0x38
 8010f06:	bd10      	pop	{r4, pc}
 8010f08:	9902      	ldr	r1, [sp, #8]
 8010f0a:	aa05      	add	r2, sp, #20
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f001 fba9 	bl	8012664 <uxr_init_base_object_request>
 8010f12:	4604      	mov	r4, r0
 8010f14:	a905      	add	r1, sp, #20
 8010f16:	a806      	add	r0, sp, #24
 8010f18:	f003 f98e 	bl	8014238 <uxr_serialize_DELETE_Payload>
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	b00e      	add	sp, #56	@ 0x38
 8010f20:	bd10      	pop	{r4, pc}
 8010f22:	bf00      	nop

08010f24 <uxr_common_create_entity>:
 8010f24:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010f28:	b510      	push	{r4, lr}
 8010f2a:	f1bc 0f01 	cmp.w	ip, #1
 8010f2e:	b08c      	sub	sp, #48	@ 0x30
 8010f30:	4604      	mov	r4, r0
 8010f32:	9202      	str	r2, [sp, #8]
 8010f34:	bf0c      	ite	eq
 8010f36:	f003 0201 	andeq.w	r2, r3, #1
 8010f3a:	2200      	movne	r2, #0
 8010f3c:	330e      	adds	r3, #14
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010f44:	441a      	add	r2, r3
 8010f46:	ab04      	add	r3, sp, #16
 8010f48:	9101      	str	r1, [sp, #4]
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	b292      	uxth	r2, r2
 8010f4e:	9100      	str	r1, [sp, #0]
 8010f50:	9903      	ldr	r1, [sp, #12]
 8010f52:	f001 fa4b 	bl	80123ec <uxr_prepare_stream_to_write_submessage>
 8010f56:	b918      	cbnz	r0, 8010f60 <uxr_common_create_entity+0x3c>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	b00c      	add	sp, #48	@ 0x30
 8010f5e:	bd10      	pop	{r4, pc}
 8010f60:	9902      	ldr	r1, [sp, #8]
 8010f62:	4620      	mov	r0, r4
 8010f64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f66:	f001 fb7d 	bl	8012664 <uxr_init_base_object_request>
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010f6e:	a804      	add	r0, sp, #16
 8010f70:	f003 f8bc 	bl	80140ec <uxr_serialize_CREATE_Payload>
 8010f74:	4620      	mov	r0, r4
 8010f76:	b00c      	add	sp, #48	@ 0x30
 8010f78:	bd10      	pop	{r4, pc}
 8010f7a:	bf00      	nop

08010f7c <uxr_buffer_create_participant_bin>:
 8010f7c:	b570      	push	{r4, r5, r6, lr}
 8010f7e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010f82:	4605      	mov	r5, r0
 8010f84:	ac11      	add	r4, sp, #68	@ 0x44
 8010f86:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010f8a:	2303      	movs	r3, #3
 8010f8c:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010f90:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010f94:	7223      	strb	r3, [r4, #8]
 8010f96:	2300      	movs	r3, #0
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f88d 3014 	strb.w	r3, [sp, #20]
 8010f9e:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010fa0:	7122      	strb	r2, [r4, #4]
 8010fa2:	b1cb      	cbz	r3, 8010fd8 <uxr_buffer_create_participant_bin+0x5c>
 8010fa4:	f88d 201c 	strb.w	r2, [sp, #28]
 8010fa8:	9308      	str	r3, [sp, #32]
 8010faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fae:	a915      	add	r1, sp, #84	@ 0x54
 8010fb0:	a809      	add	r0, sp, #36	@ 0x24
 8010fb2:	f7ff ff23 	bl	8010dfc <ucdr_init_buffer>
 8010fb6:	a905      	add	r1, sp, #20
 8010fb8:	a809      	add	r0, sp, #36	@ 0x24
 8010fba:	f002 fd6d 	bl	8013a98 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fc0:	9600      	str	r6, [sp, #0]
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	9401      	str	r4, [sp, #4]
 8010fc6:	60e3      	str	r3, [r4, #12]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010fce:	f7ff ffa9 	bl	8010f24 <uxr_common_create_entity>
 8010fd2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}
 8010fd8:	f88d 301c 	strb.w	r3, [sp, #28]
 8010fdc:	e7e5      	b.n	8010faa <uxr_buffer_create_participant_bin+0x2e>
 8010fde:	bf00      	nop

08010fe0 <uxr_buffer_create_topic_bin>:
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	4618      	mov	r0, r3
 8010fea:	9105      	str	r1, [sp, #20]
 8010fec:	a997      	add	r1, sp, #604	@ 0x25c
 8010fee:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010ff2:	ac13      	add	r4, sp, #76	@ 0x4c
 8010ff4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010ff8:	2302      	movs	r3, #2
 8010ffa:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010ffe:	f000 f9ab 	bl	8011358 <uxr_object_id_to_raw>
 8011002:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8011004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011008:	a917      	add	r1, sp, #92	@ 0x5c
 801100a:	a80b      	add	r0, sp, #44	@ 0x2c
 801100c:	9306      	str	r3, [sp, #24]
 801100e:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011010:	930a      	str	r3, [sp, #40]	@ 0x28
 8011012:	2303      	movs	r3, #3
 8011014:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011018:	2301      	movs	r3, #1
 801101a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801101e:	2300      	movs	r3, #0
 8011020:	f88d 301c 	strb.w	r3, [sp, #28]
 8011024:	f7ff feea 	bl	8010dfc <ucdr_init_buffer>
 8011028:	a906      	add	r1, sp, #24
 801102a:	a80b      	add	r0, sp, #44	@ 0x2c
 801102c:	f002 fd56 	bl	8013adc <uxr_serialize_OBJK_Topic_Binary>
 8011030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011032:	4628      	mov	r0, r5
 8011034:	9600      	str	r6, [sp, #0]
 8011036:	9316      	str	r3, [sp, #88]	@ 0x58
 8011038:	b29b      	uxth	r3, r3
 801103a:	9401      	str	r4, [sp, #4]
 801103c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011040:	f7ff ff70 	bl	8010f24 <uxr_common_create_entity>
 8011044:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011048:	bd70      	pop	{r4, r5, r6, pc}
 801104a:	bf00      	nop

0801104c <uxr_buffer_create_publisher_bin>:
 801104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8011052:	2603      	movs	r6, #3
 8011054:	4605      	mov	r5, r0
 8011056:	4618      	mov	r0, r3
 8011058:	9105      	str	r1, [sp, #20]
 801105a:	a992      	add	r1, sp, #584	@ 0x248
 801105c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011060:	ac0e      	add	r4, sp, #56	@ 0x38
 8011062:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011066:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801106a:	f000 f975 	bl	8011358 <uxr_object_id_to_raw>
 801106e:	2300      	movs	r3, #0
 8011070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011074:	a912      	add	r1, sp, #72	@ 0x48
 8011076:	a806      	add	r0, sp, #24
 8011078:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801107c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011080:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8011084:	f7ff feba 	bl	8010dfc <ucdr_init_buffer>
 8011088:	a993      	add	r1, sp, #588	@ 0x24c
 801108a:	a806      	add	r0, sp, #24
 801108c:	f002 fdda 	bl	8013c44 <uxr_serialize_OBJK_Publisher_Binary>
 8011090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011092:	4628      	mov	r0, r5
 8011094:	9700      	str	r7, [sp, #0]
 8011096:	9311      	str	r3, [sp, #68]	@ 0x44
 8011098:	b29b      	uxth	r3, r3
 801109a:	9401      	str	r4, [sp, #4]
 801109c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80110a0:	f7ff ff40 	bl	8010f24 <uxr_common_create_entity>
 80110a4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80110a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110aa:	bf00      	nop

080110ac <uxr_buffer_create_datawriter_bin>:
 80110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80110b4:	4606      	mov	r6, r0
 80110b6:	4618      	mov	r0, r3
 80110b8:	2703      	movs	r7, #3
 80110ba:	ac1d      	add	r4, sp, #116	@ 0x74
 80110bc:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80110c0:	9105      	str	r1, [sp, #20]
 80110c2:	a9a1      	add	r1, sp, #644	@ 0x284
 80110c4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80110c8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80110cc:	2305      	movs	r3, #5
 80110ce:	7123      	strb	r3, [r4, #4]
 80110d0:	f000 f942 	bl	8011358 <uxr_object_id_to_raw>
 80110d4:	a90e      	add	r1, sp, #56	@ 0x38
 80110d6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80110d8:	7227      	strb	r7, [r4, #8]
 80110da:	f000 f93d 	bl	8011358 <uxr_object_id_to_raw>
 80110de:	2300      	movs	r3, #0
 80110e0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80110e4:	3d00      	subs	r5, #0
 80110e6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80110ea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80110ee:	bf18      	it	ne
 80110f0:	2501      	movne	r5, #1
 80110f2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80110f6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80110fa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80110fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011102:	2301      	movs	r3, #1
 8011104:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011108:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801110c:	bb8a      	cbnz	r2, 8011172 <uxr_buffer_create_datawriter_bin+0xc6>
 801110e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011112:	f04f 0c13 	mov.w	ip, #19
 8011116:	250b      	movs	r5, #11
 8011118:	2221      	movs	r2, #33	@ 0x21
 801111a:	2111      	movs	r1, #17
 801111c:	2009      	movs	r0, #9
 801111e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011122:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011126:	b923      	cbnz	r3, 8011132 <uxr_buffer_create_datawriter_bin+0x86>
 8011128:	4672      	mov	r2, lr
 801112a:	4661      	mov	r1, ip
 801112c:	4628      	mov	r0, r5
 801112e:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011132:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011136:	2b01      	cmp	r3, #1
 8011138:	d025      	beq.n	8011186 <uxr_buffer_create_datawriter_bin+0xda>
 801113a:	2b03      	cmp	r3, #3
 801113c:	d029      	beq.n	8011192 <uxr_buffer_create_datawriter_bin+0xe6>
 801113e:	b32b      	cbz	r3, 801118c <uxr_buffer_create_datawriter_bin+0xe0>
 8011140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011144:	a921      	add	r1, sp, #132	@ 0x84
 8011146:	a806      	add	r0, sp, #24
 8011148:	f7ff fe58 	bl	8010dfc <ucdr_init_buffer>
 801114c:	a90e      	add	r1, sp, #56	@ 0x38
 801114e:	a806      	add	r0, sp, #24
 8011150:	f002 fdee 	bl	8013d30 <uxr_serialize_OBJK_DataWriter_Binary>
 8011154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011156:	f8cd 8000 	str.w	r8, [sp]
 801115a:	4630      	mov	r0, r6
 801115c:	9401      	str	r4, [sp, #4]
 801115e:	60e3      	str	r3, [r4, #12]
 8011160:	b29b      	uxth	r3, r3
 8011162:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011166:	f7ff fedd 	bl	8010f24 <uxr_common_create_entity>
 801116a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011172:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011176:	f04f 0c12 	mov.w	ip, #18
 801117a:	250a      	movs	r5, #10
 801117c:	2220      	movs	r2, #32
 801117e:	2110      	movs	r1, #16
 8011180:	2008      	movs	r0, #8
 8011182:	2702      	movs	r7, #2
 8011184:	e7cd      	b.n	8011122 <uxr_buffer_create_datawriter_bin+0x76>
 8011186:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801118a:	e7d9      	b.n	8011140 <uxr_buffer_create_datawriter_bin+0x94>
 801118c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011190:	e7d6      	b.n	8011140 <uxr_buffer_create_datawriter_bin+0x94>
 8011192:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011196:	e7d3      	b.n	8011140 <uxr_buffer_create_datawriter_bin+0x94>

08011198 <get_custom_error>:
 8011198:	4b01      	ldr	r3, [pc, #4]	@ (80111a0 <get_custom_error+0x8>)
 801119a:	7818      	ldrb	r0, [r3, #0]
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	2406846c 	.word	0x2406846c

080111a4 <recv_custom_msg>:
 80111a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a8:	4693      	mov	fp, r2
 80111aa:	b089      	sub	sp, #36	@ 0x24
 80111ac:	2200      	movs	r2, #0
 80111ae:	4604      	mov	r4, r0
 80111b0:	468a      	mov	sl, r1
 80111b2:	9305      	str	r3, [sp, #20]
 80111b4:	f88d 201e 	strb.w	r2, [sp, #30]
 80111b8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80111bc:	b322      	cbz	r2, 8011208 <recv_custom_msg+0x64>
 80111be:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80111c2:	f10d 081f 	add.w	r8, sp, #31
 80111c6:	af05      	add	r7, sp, #20
 80111c8:	f10d 061e 	add.w	r6, sp, #30
 80111cc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80111d0:	e002      	b.n	80111d8 <recv_custom_msg+0x34>
 80111d2:	9b05      	ldr	r3, [sp, #20]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	dd0f      	ble.n	80111f8 <recv_custom_msg+0x54>
 80111d8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80111dc:	4623      	mov	r3, r4
 80111de:	4622      	mov	r2, r4
 80111e0:	4648      	mov	r0, r9
 80111e2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80111e6:	e9cd 5600 	strd	r5, r6, [sp]
 80111ea:	f001 fc51 	bl	8012a90 <uxr_read_framed_msg>
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d0ef      	beq.n	80111d2 <recv_custom_msg+0x2e>
 80111f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80111f6:	b1b3      	cbz	r3, 8011226 <recv_custom_msg+0x82>
 80111f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011238 <recv_custom_msg+0x94>)
 80111fa:	2000      	movs	r0, #0
 80111fc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011200:	701a      	strb	r2, [r3, #0]
 8011202:	b009      	add	sp, #36	@ 0x24
 8011204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011208:	f10d 021f 	add.w	r2, sp, #31
 801120c:	4601      	mov	r1, r0
 801120e:	9200      	str	r2, [sp, #0]
 8011210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011214:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011218:	47a8      	blx	r5
 801121a:	2800      	cmp	r0, #0
 801121c:	d0ec      	beq.n	80111f8 <recv_custom_msg+0x54>
 801121e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1e8      	bne.n	80111f8 <recv_custom_msg+0x54>
 8011226:	f8cb 0000 	str.w	r0, [fp]
 801122a:	2001      	movs	r0, #1
 801122c:	f8ca 4000 	str.w	r4, [sl]
 8011230:	b009      	add	sp, #36	@ 0x24
 8011232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011236:	bf00      	nop
 8011238:	2406846c 	.word	0x2406846c

0801123c <send_custom_msg>:
 801123c:	b530      	push	{r4, r5, lr}
 801123e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8011242:	b087      	sub	sp, #28
 8011244:	4614      	mov	r4, r2
 8011246:	b995      	cbnz	r5, 801126e <send_custom_msg+0x32>
 8011248:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801124c:	f10d 0317 	add.w	r3, sp, #23
 8011250:	47a8      	blx	r5
 8011252:	1e03      	subs	r3, r0, #0
 8011254:	bf18      	it	ne
 8011256:	2301      	movne	r3, #1
 8011258:	42a0      	cmp	r0, r4
 801125a:	bf18      	it	ne
 801125c:	2300      	movne	r3, #0
 801125e:	b91b      	cbnz	r3, 8011268 <send_custom_msg+0x2c>
 8011260:	4a0a      	ldr	r2, [pc, #40]	@ (801128c <send_custom_msg+0x50>)
 8011262:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8011266:	7011      	strb	r1, [r2, #0]
 8011268:	4618      	mov	r0, r3
 801126a:	b007      	add	sp, #28
 801126c:	bd30      	pop	{r4, r5, pc}
 801126e:	460b      	mov	r3, r1
 8011270:	2200      	movs	r2, #0
 8011272:	f10d 0117 	add.w	r1, sp, #23
 8011276:	9400      	str	r4, [sp, #0]
 8011278:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801127c:	4602      	mov	r2, r0
 801127e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011282:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011286:	f001 fa25 	bl	80126d4 <uxr_write_framed_msg>
 801128a:	e7e2      	b.n	8011252 <send_custom_msg+0x16>
 801128c:	2406846c 	.word	0x2406846c

08011290 <uxr_set_custom_transport_callbacks>:
 8011290:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011294:	9901      	ldr	r1, [sp, #4]
 8011296:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801129a:	9b00      	ldr	r3, [sp, #0]
 801129c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop

080112a4 <uxr_init_custom_transport>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80112aa:	b303      	cbz	r3, 80112ee <uxr_init_custom_transport+0x4a>
 80112ac:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80112b0:	4604      	mov	r4, r0
 80112b2:	b1e2      	cbz	r2, 80112ee <uxr_init_custom_transport+0x4a>
 80112b4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80112b8:	b1ca      	cbz	r2, 80112ee <uxr_init_custom_transport+0x4a>
 80112ba:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80112be:	b1b2      	cbz	r2, 80112ee <uxr_init_custom_transport+0x4a>
 80112c0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80112c4:	4798      	blx	r3
 80112c6:	4605      	mov	r5, r0
 80112c8:	b188      	cbz	r0, 80112ee <uxr_init_custom_transport+0x4a>
 80112ca:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80112ce:	b98b      	cbnz	r3, 80112f4 <uxr_init_custom_transport+0x50>
 80112d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011300 <uxr_init_custom_transport+0x5c>)
 80112d2:	4628      	mov	r0, r5
 80112d4:	490b      	ldr	r1, [pc, #44]	@ (8011304 <uxr_init_custom_transport+0x60>)
 80112d6:	4a0c      	ldr	r2, [pc, #48]	@ (8011308 <uxr_init_custom_transport+0x64>)
 80112d8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80112dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112e0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80112e4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80112e8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80112ec:	bd38      	pop	{r3, r4, r5, pc}
 80112ee:	2500      	movs	r5, #0
 80112f0:	4628      	mov	r0, r5
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	2100      	movs	r1, #0
 80112f6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80112fa:	f001 f9e5 	bl	80126c8 <uxr_init_framing_io>
 80112fe:	e7e7      	b.n	80112d0 <uxr_init_custom_transport+0x2c>
 8011300:	080111a5 	.word	0x080111a5
 8011304:	0801123d 	.word	0x0801123d
 8011308:	08011199 	.word	0x08011199

0801130c <uxr_close_custom_transport>:
 801130c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011310:	4718      	bx	r3
 8011312:	bf00      	nop

08011314 <uxr_object_id>:
 8011314:	b082      	sub	sp, #8
 8011316:	2300      	movs	r3, #0
 8011318:	f88d 1006 	strb.w	r1, [sp, #6]
 801131c:	f360 030f 	bfi	r3, r0, #0, #16
 8011320:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011324:	f362 431f 	bfi	r3, r2, #16, #16
 8011328:	4618      	mov	r0, r3
 801132a:	b002      	add	sp, #8
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop

08011330 <uxr_object_id_from_raw>:
 8011330:	7843      	ldrb	r3, [r0, #1]
 8011332:	b082      	sub	sp, #8
 8011334:	7801      	ldrb	r1, [r0, #0]
 8011336:	2000      	movs	r0, #0
 8011338:	091a      	lsrs	r2, r3, #4
 801133a:	f003 030f 	and.w	r3, r3, #15
 801133e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011342:	f88d 3006 	strb.w	r3, [sp, #6]
 8011346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801134a:	f362 000f 	bfi	r0, r2, #0, #16
 801134e:	f363 401f 	bfi	r0, r3, #16, #16
 8011352:	b002      	add	sp, #8
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <uxr_object_id_to_raw>:
 8011358:	4602      	mov	r2, r0
 801135a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801135e:	b082      	sub	sp, #8
 8011360:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011364:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011368:	f881 c000 	strb.w	ip, [r1]
 801136c:	7048      	strb	r0, [r1, #1]
 801136e:	b002      	add	sp, #8
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop

08011374 <uxr_buffer_cancel_data>:
 8011374:	b510      	push	{r4, lr}
 8011376:	2300      	movs	r3, #0
 8011378:	b094      	sub	sp, #80	@ 0x50
 801137a:	4604      	mov	r4, r0
 801137c:	9205      	str	r2, [sp, #20]
 801137e:	9301      	str	r3, [sp, #4]
 8011380:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011384:	f88d 301e 	strb.w	r3, [sp, #30]
 8011388:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801138c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011390:	2308      	movs	r3, #8
 8011392:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011396:	2201      	movs	r2, #1
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	ab0c      	add	r3, sp, #48	@ 0x30
 801139c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80113a0:	2210      	movs	r2, #16
 80113a2:	f001 f823 	bl	80123ec <uxr_prepare_stream_to_write_submessage>
 80113a6:	b918      	cbnz	r0, 80113b0 <uxr_buffer_cancel_data+0x3c>
 80113a8:	4604      	mov	r4, r0
 80113aa:	4620      	mov	r0, r4
 80113ac:	b014      	add	sp, #80	@ 0x50
 80113ae:	bd10      	pop	{r4, pc}
 80113b0:	9905      	ldr	r1, [sp, #20]
 80113b2:	aa06      	add	r2, sp, #24
 80113b4:	4620      	mov	r0, r4
 80113b6:	f001 f955 	bl	8012664 <uxr_init_base_object_request>
 80113ba:	4604      	mov	r4, r0
 80113bc:	a906      	add	r1, sp, #24
 80113be:	a80c      	add	r0, sp, #48	@ 0x30
 80113c0:	f002 ffe4 	bl	801438c <uxr_serialize_READ_DATA_Payload>
 80113c4:	4620      	mov	r0, r4
 80113c6:	b014      	add	sp, #80	@ 0x50
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	bf00      	nop

080113cc <read_submessage_format>:
 80113cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113d0:	b095      	sub	sp, #84	@ 0x54
 80113d2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80113d6:	b113      	cbz	r3, 80113de <read_submessage_format+0x12>
 80113d8:	b015      	add	sp, #84	@ 0x54
 80113da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113de:	4606      	mov	r6, r0
 80113e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80113e2:	460c      	mov	r4, r1
 80113e4:	4615      	mov	r5, r2
 80113e6:	9004      	str	r0, [sp, #16]
 80113e8:	4699      	mov	r9, r3
 80113ea:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80113ec:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80113f0:	9005      	str	r0, [sp, #20]
 80113f2:	a80c      	add	r0, sp, #48	@ 0x30
 80113f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80113f8:	1a52      	subs	r2, r2, r1
 80113fa:	f7ff fcff 	bl	8010dfc <ucdr_init_buffer>
 80113fe:	a80c      	add	r0, sp, #48	@ 0x30
 8011400:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011404:	f7ff fcce 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 8011408:	69e2      	ldr	r2, [r4, #28]
 801140a:	b19a      	cbz	r2, 8011434 <read_submessage_format+0x68>
 801140c:	f1b8 0f07 	cmp.w	r8, #7
 8011410:	f882 9014 	strb.w	r9, [r2, #20]
 8011414:	d040      	beq.n	8011498 <read_submessage_format+0xcc>
 8011416:	f1b8 0f08 	cmp.w	r8, #8
 801141a:	d02e      	beq.n	801147a <read_submessage_format+0xae>
 801141c:	f1b8 0f06 	cmp.w	r8, #6
 8011420:	d011      	beq.n	8011446 <read_submessage_format+0x7a>
 8011422:	2301      	movs	r3, #1
 8011424:	7513      	strb	r3, [r2, #20]
 8011426:	4629      	mov	r1, r5
 8011428:	4620      	mov	r0, r4
 801142a:	f7ff fd3b 	bl	8010ea4 <ucdr_advance_buffer>
 801142e:	b015      	add	sp, #84	@ 0x54
 8011430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011434:	f1b8 0f07 	cmp.w	r8, #7
 8011438:	d02e      	beq.n	8011498 <read_submessage_format+0xcc>
 801143a:	f1b8 0f08 	cmp.w	r8, #8
 801143e:	d01c      	beq.n	801147a <read_submessage_format+0xae>
 8011440:	f1b8 0f06 	cmp.w	r8, #6
 8011444:	d1ef      	bne.n	8011426 <read_submessage_format+0x5a>
 8011446:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801144a:	f1b8 0f00 	cmp.w	r8, #0
 801144e:	d011      	beq.n	8011474 <read_submessage_format+0xa8>
 8011450:	ab0c      	add	r3, sp, #48	@ 0x30
 8011452:	9501      	str	r5, [sp, #4]
 8011454:	463a      	mov	r2, r7
 8011456:	4630      	mov	r0, r6
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	2306      	movs	r3, #6
 801145c:	f88d 3016 	strb.w	r3, [sp, #22]
 8011460:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8011464:	9302      	str	r3, [sp, #8]
 8011466:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801146a:	47c0      	blx	r8
 801146c:	2301      	movs	r3, #1
 801146e:	69e2      	ldr	r2, [r4, #28]
 8011470:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8011474:	2a00      	cmp	r2, #0
 8011476:	d1d4      	bne.n	8011422 <read_submessage_format+0x56>
 8011478:	e7d5      	b.n	8011426 <read_submessage_format+0x5a>
 801147a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801147e:	2b00      	cmp	r3, #0
 8011480:	d0f8      	beq.n	8011474 <read_submessage_format+0xa8>
 8011482:	a80c      	add	r0, sp, #48	@ 0x30
 8011484:	a906      	add	r1, sp, #24
 8011486:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801148a:	f003 f833 	bl	80144f4 <uxr_deserialize_SampleIdentity>
 801148e:	b9a0      	cbnz	r0, 80114ba <read_submessage_format+0xee>
 8011490:	69e2      	ldr	r2, [r4, #28]
 8011492:	2a00      	cmp	r2, #0
 8011494:	d1c5      	bne.n	8011422 <read_submessage_format+0x56>
 8011496:	e7c6      	b.n	8011426 <read_submessage_format+0x5a>
 8011498:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801149c:	b13b      	cbz	r3, 80114ae <read_submessage_format+0xe2>
 801149e:	a906      	add	r1, sp, #24
 80114a0:	a80c      	add	r0, sp, #48	@ 0x30
 80114a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80114a6:	f002 fd11 	bl	8013ecc <uxr_deserialize_BaseObjectRequest>
 80114aa:	bb60      	cbnz	r0, 8011506 <read_submessage_format+0x13a>
 80114ac:	69e2      	ldr	r2, [r4, #28]
 80114ae:	68a3      	ldr	r3, [r4, #8]
 80114b0:	442b      	add	r3, r5
 80114b2:	60a3      	str	r3, [r4, #8]
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	d1b4      	bne.n	8011422 <read_submessage_format+0x56>
 80114b8:	e7b5      	b.n	8011426 <read_submessage_format+0x5a>
 80114ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80114bc:	a80c      	add	r0, sp, #48	@ 0x30
 80114be:	eba8 0803 	sub.w	r8, r8, r3
 80114c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80114c6:	44a8      	add	r8, r5
 80114c8:	1a52      	subs	r2, r2, r1
 80114ca:	f7ff fc97 	bl	8010dfc <ucdr_init_buffer>
 80114ce:	a80c      	add	r0, sp, #48	@ 0x30
 80114d0:	fa1f f888 	uxth.w	r8, r8
 80114d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80114d8:	f7ff fc64 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 80114dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80114de:	2108      	movs	r1, #8
 80114e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	463a      	mov	r2, r7
 80114e8:	f88d 1016 	strb.w	r1, [sp, #22]
 80114ec:	ab06      	add	r3, sp, #24
 80114ee:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80114f2:	4630      	mov	r0, r6
 80114f4:	9102      	str	r1, [sp, #8]
 80114f6:	9905      	ldr	r1, [sp, #20]
 80114f8:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80114fc:	47b8      	blx	r7
 80114fe:	2301      	movs	r3, #1
 8011500:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8011504:	e7c4      	b.n	8011490 <read_submessage_format+0xc4>
 8011506:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801150a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801150c:	a80c      	add	r0, sp, #48	@ 0x30
 801150e:	1a52      	subs	r2, r2, r1
 8011510:	eba8 0803 	sub.w	r8, r8, r3
 8011514:	f7ff fc72 	bl	8010dfc <ucdr_init_buffer>
 8011518:	a80c      	add	r0, sp, #48	@ 0x30
 801151a:	44a8      	add	r8, r5
 801151c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011520:	f7ff fc40 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 8011524:	ab0c      	add	r3, sp, #48	@ 0x30
 8011526:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801152a:	fa1f f888 	uxth.w	r8, r8
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	463a      	mov	r2, r7
 8011532:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011536:	4630      	mov	r0, r6
 8011538:	f8cd 8004 	str.w	r8, [sp, #4]
 801153c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011540:	2107      	movs	r1, #7
 8011542:	f88d 1016 	strb.w	r1, [sp, #22]
 8011546:	b29b      	uxth	r3, r3
 8011548:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801154c:	9102      	str	r1, [sp, #8]
 801154e:	9905      	ldr	r1, [sp, #20]
 8011550:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8011554:	47b8      	blx	r7
 8011556:	2301      	movs	r3, #1
 8011558:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801155c:	e7a6      	b.n	80114ac <read_submessage_format+0xe0>
 801155e:	bf00      	nop

08011560 <on_get_fragmentation_info>:
 8011560:	b500      	push	{lr}
 8011562:	b08b      	sub	sp, #44	@ 0x2c
 8011564:	4601      	mov	r1, r0
 8011566:	2204      	movs	r2, #4
 8011568:	a802      	add	r0, sp, #8
 801156a:	f7ff fc47 	bl	8010dfc <ucdr_init_buffer>
 801156e:	f10d 0305 	add.w	r3, sp, #5
 8011572:	f10d 0206 	add.w	r2, sp, #6
 8011576:	a901      	add	r1, sp, #4
 8011578:	a802      	add	r0, sp, #8
 801157a:	f001 fe79 	bl	8013270 <uxr_read_submessage_header>
 801157e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011582:	2b0d      	cmp	r3, #13
 8011584:	d003      	beq.n	801158e <on_get_fragmentation_info+0x2e>
 8011586:	2000      	movs	r0, #0
 8011588:	b00b      	add	sp, #44	@ 0x2c
 801158a:	f85d fb04 	ldr.w	pc, [sp], #4
 801158e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011592:	f013 0f02 	tst.w	r3, #2
 8011596:	bf14      	ite	ne
 8011598:	2002      	movne	r0, #2
 801159a:	2001      	moveq	r0, #1
 801159c:	b00b      	add	sp, #44	@ 0x2c
 801159e:	f85d fb04 	ldr.w	pc, [sp], #4
 80115a2:	bf00      	nop

080115a4 <read_submessage_get_info>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	2500      	movs	r5, #0
 80115a8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80115ac:	460e      	mov	r6, r1
 80115ae:	4604      	mov	r4, r0
 80115b0:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80115b4:	4629      	mov	r1, r5
 80115b6:	a810      	add	r0, sp, #64	@ 0x40
 80115b8:	9503      	str	r5, [sp, #12]
 80115ba:	9504      	str	r5, [sp, #16]
 80115bc:	f006 fa9a 	bl	8017af4 <memset>
 80115c0:	a903      	add	r1, sp, #12
 80115c2:	4630      	mov	r0, r6
 80115c4:	f002 fe22 	bl	801420c <uxr_deserialize_GET_INFO_Payload>
 80115c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80115cc:	4620      	mov	r0, r4
 80115ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80115d2:	f001 f83f 	bl	8012654 <uxr_session_header_offset>
 80115d6:	462b      	mov	r3, r5
 80115d8:	220c      	movs	r2, #12
 80115da:	a905      	add	r1, sp, #20
 80115dc:	9000      	str	r0, [sp, #0]
 80115de:	a808      	add	r0, sp, #32
 80115e0:	f7ff fbfa 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 80115e4:	a910      	add	r1, sp, #64	@ 0x40
 80115e6:	a808      	add	r0, sp, #32
 80115e8:	f002 fe84 	bl	80142f4 <uxr_serialize_INFO_Payload>
 80115ec:	9b08      	ldr	r3, [sp, #32]
 80115ee:	462a      	mov	r2, r5
 80115f0:	4629      	mov	r1, r5
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 ffda 	bl	80125ac <uxr_stamp_session_header>
 80115f8:	a808      	add	r0, sp, #32
 80115fa:	f7ff fc2d 	bl	8010e58 <ucdr_buffer_length>
 80115fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011600:	4602      	mov	r2, r0
 8011602:	a905      	add	r1, sp, #20
 8011604:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011608:	47a0      	blx	r4
 801160a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801160e:	bd70      	pop	{r4, r5, r6, pc}

08011610 <write_submessage_acknack.isra.0>:
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	b092      	sub	sp, #72	@ 0x48
 8011614:	4605      	mov	r5, r0
 8011616:	460e      	mov	r6, r1
 8011618:	4614      	mov	r4, r2
 801161a:	f001 f81b 	bl	8012654 <uxr_session_header_offset>
 801161e:	a905      	add	r1, sp, #20
 8011620:	9000      	str	r0, [sp, #0]
 8011622:	2300      	movs	r3, #0
 8011624:	a80a      	add	r0, sp, #40	@ 0x28
 8011626:	2211      	movs	r2, #17
 8011628:	f7ff fbd6 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 801162c:	2218      	movs	r2, #24
 801162e:	2300      	movs	r3, #0
 8011630:	210a      	movs	r1, #10
 8011632:	fb02 5404 	mla	r4, r2, r4, r5
 8011636:	a80a      	add	r0, sp, #40	@ 0x28
 8011638:	2205      	movs	r2, #5
 801163a:	3450      	adds	r4, #80	@ 0x50
 801163c:	f001 fdfe 	bl	801323c <uxr_buffer_submessage_header>
 8011640:	a903      	add	r1, sp, #12
 8011642:	4620      	mov	r0, r4
 8011644:	f004 ffa6 	bl	8016594 <uxr_compute_acknack>
 8011648:	ba40      	rev16	r0, r0
 801164a:	a903      	add	r1, sp, #12
 801164c:	f88d 6010 	strb.w	r6, [sp, #16]
 8011650:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011654:	a80a      	add	r0, sp, #40	@ 0x28
 8011656:	f002 febf 	bl	80143d8 <uxr_serialize_ACKNACK_Payload>
 801165a:	2200      	movs	r2, #0
 801165c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801165e:	4628      	mov	r0, r5
 8011660:	4611      	mov	r1, r2
 8011662:	f000 ffa3 	bl	80125ac <uxr_stamp_session_header>
 8011666:	a80a      	add	r0, sp, #40	@ 0x28
 8011668:	f7ff fbf6 	bl	8010e58 <ucdr_buffer_length>
 801166c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801166e:	4602      	mov	r2, r0
 8011670:	a905      	add	r1, sp, #20
 8011672:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011676:	47a0      	blx	r4
 8011678:	b012      	add	sp, #72	@ 0x48
 801167a:	bd70      	pop	{r4, r5, r6, pc}
 801167c:	0000      	movs	r0, r0
	...

08011680 <uxr_init_session>:
 8011680:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80116b8 <uxr_init_session+0x38>
 8011684:	2300      	movs	r3, #0
 8011686:	b510      	push	{r4, lr}
 8011688:	4604      	mov	r4, r0
 801168a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801168e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011692:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8011696:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801169a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801169e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80116a2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80116a6:	2181      	movs	r1, #129	@ 0x81
 80116a8:	f000 fee4 	bl	8012474 <uxr_init_session_info>
 80116ac:	f104 0008 	add.w	r0, r4, #8
 80116b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116b4:	f001 bcde 	b.w	8013074 <uxr_init_stream_storage>
	...

080116c0 <uxr_set_status_callback>:
 80116c0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <uxr_set_topic_callback>:
 80116c8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop

080116d0 <uxr_set_request_callback>:
 80116d0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop

080116d8 <uxr_set_reply_callback>:
 80116d8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop

080116e0 <uxr_create_output_best_effort_stream>:
 80116e0:	b510      	push	{r4, lr}
 80116e2:	4604      	mov	r4, r0
 80116e4:	b084      	sub	sp, #16
 80116e6:	e9cd 2100 	strd	r2, r1, [sp]
 80116ea:	f000 ffb3 	bl	8012654 <uxr_session_header_offset>
 80116ee:	4603      	mov	r3, r0
 80116f0:	f104 0008 	add.w	r0, r4, #8
 80116f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80116f8:	b004      	add	sp, #16
 80116fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116fe:	f001 bcff 	b.w	8013100 <uxr_add_output_best_effort_buffer>
 8011702:	bf00      	nop

08011704 <uxr_create_output_reliable_stream>:
 8011704:	b530      	push	{r4, r5, lr}
 8011706:	b089      	sub	sp, #36	@ 0x24
 8011708:	4604      	mov	r4, r0
 801170a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801170e:	9303      	str	r3, [sp, #12]
 8011710:	f000 ffa0 	bl	8012654 <uxr_session_header_offset>
 8011714:	4605      	mov	r5, r0
 8011716:	9905      	ldr	r1, [sp, #20]
 8011718:	f104 0008 	add.w	r0, r4, #8
 801171c:	9500      	str	r5, [sp, #0]
 801171e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011722:	f001 fd01 	bl	8013128 <uxr_add_output_reliable_buffer>
 8011726:	2200      	movs	r2, #0
 8011728:	fa5f fc80 	uxtb.w	ip, r0
 801172c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011730:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011734:	0e03      	lsrs	r3, r0, #24
 8011736:	f36c 0207 	bfi	r2, ip, #0, #8
 801173a:	f364 220f 	bfi	r2, r4, #8, #8
 801173e:	f361 4217 	bfi	r2, r1, #16, #8
 8011742:	f363 621f 	bfi	r2, r3, #24, #8
 8011746:	4610      	mov	r0, r2
 8011748:	b009      	add	sp, #36	@ 0x24
 801174a:	bd30      	pop	{r4, r5, pc}

0801174c <uxr_create_input_best_effort_stream>:
 801174c:	b082      	sub	sp, #8
 801174e:	3008      	adds	r0, #8
 8011750:	b002      	add	sp, #8
 8011752:	f001 bd03 	b.w	801315c <uxr_add_input_best_effort_buffer>
 8011756:	bf00      	nop

08011758 <uxr_create_input_reliable_stream>:
 8011758:	b510      	push	{r4, lr}
 801175a:	4c0c      	ldr	r4, [pc, #48]	@ (801178c <uxr_create_input_reliable_stream+0x34>)
 801175c:	b084      	sub	sp, #16
 801175e:	3008      	adds	r0, #8
 8011760:	9400      	str	r4, [sp, #0]
 8011762:	f001 fd11 	bl	8013188 <uxr_add_input_reliable_buffer>
 8011766:	2200      	movs	r2, #0
 8011768:	fa5f fe80 	uxtb.w	lr, r0
 801176c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8011770:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011774:	0e03      	lsrs	r3, r0, #24
 8011776:	f36e 0207 	bfi	r2, lr, #0, #8
 801177a:	f36c 220f 	bfi	r2, ip, #8, #8
 801177e:	f361 4217 	bfi	r2, r1, #16, #8
 8011782:	f363 621f 	bfi	r2, r3, #24, #8
 8011786:	4610      	mov	r0, r2
 8011788:	b004      	add	sp, #16
 801178a:	bd10      	pop	{r4, pc}
 801178c:	08011561 	.word	0x08011561

08011790 <uxr_epoch_nanos>:
 8011790:	b510      	push	{r4, lr}
 8011792:	4604      	mov	r4, r0
 8011794:	f001 fdb4 	bl	8013300 <uxr_nanos>
 8011798:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801179c:	1ac0      	subs	r0, r0, r3
 801179e:	eb61 0102 	sbc.w	r1, r1, r2
 80117a2:	bd10      	pop	{r4, pc}

080117a4 <uxr_flash_output_streams>:
 80117a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a8:	7e03      	ldrb	r3, [r0, #24]
 80117aa:	b084      	sub	sp, #16
 80117ac:	4604      	mov	r4, r0
 80117ae:	b1fb      	cbz	r3, 80117f0 <uxr_flash_output_streams+0x4c>
 80117b0:	f04f 0900 	mov.w	r9, #0
 80117b4:	f10d 0802 	add.w	r8, sp, #2
 80117b8:	af03      	add	r7, sp, #12
 80117ba:	ae02      	add	r6, sp, #8
 80117bc:	4648      	mov	r0, r9
 80117be:	2201      	movs	r2, #1
 80117c0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80117c4:	4611      	mov	r1, r2
 80117c6:	3508      	adds	r5, #8
 80117c8:	f001 fbfa 	bl	8012fc0 <uxr_stream_id>
 80117cc:	4684      	mov	ip, r0
 80117ce:	4643      	mov	r3, r8
 80117d0:	463a      	mov	r2, r7
 80117d2:	4631      	mov	r1, r6
 80117d4:	4628      	mov	r0, r5
 80117d6:	f8cd c004 	str.w	ip, [sp, #4]
 80117da:	f004 ff65 	bl	80166a8 <uxr_prepare_best_effort_buffer_to_send>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d13d      	bne.n	801185e <uxr_flash_output_streams+0xba>
 80117e2:	f109 0901 	add.w	r9, r9, #1
 80117e6:	7e23      	ldrb	r3, [r4, #24]
 80117e8:	fa5f f089 	uxtb.w	r0, r9
 80117ec:	4283      	cmp	r3, r0
 80117ee:	d8e6      	bhi.n	80117be <uxr_flash_output_streams+0x1a>
 80117f0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80117f4:	b383      	cbz	r3, 8011858 <uxr_flash_output_streams+0xb4>
 80117f6:	f04f 0900 	mov.w	r9, #0
 80117fa:	f10d 0802 	add.w	r8, sp, #2
 80117fe:	af03      	add	r7, sp, #12
 8011800:	ae02      	add	r6, sp, #8
 8011802:	4648      	mov	r0, r9
 8011804:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011808:	2201      	movs	r2, #1
 801180a:	2102      	movs	r1, #2
 801180c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011810:	f001 fbd6 	bl	8012fc0 <uxr_stream_id>
 8011814:	9001      	str	r0, [sp, #4]
 8011816:	3520      	adds	r5, #32
 8011818:	e00c      	b.n	8011834 <uxr_flash_output_streams+0x90>
 801181a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801181e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011822:	9b02      	ldr	r3, [sp, #8]
 8011824:	f000 fec2 	bl	80125ac <uxr_stamp_session_header>
 8011828:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801182a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801182e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011832:	47d0      	blx	sl
 8011834:	4643      	mov	r3, r8
 8011836:	463a      	mov	r2, r7
 8011838:	4631      	mov	r1, r6
 801183a:	4628      	mov	r0, r5
 801183c:	f005 f958 	bl	8016af0 <uxr_prepare_next_reliable_buffer_to_send>
 8011840:	4603      	mov	r3, r0
 8011842:	4620      	mov	r0, r4
 8011844:	2b00      	cmp	r3, #0
 8011846:	d1e8      	bne.n	801181a <uxr_flash_output_streams+0x76>
 8011848:	f109 0901 	add.w	r9, r9, #1
 801184c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011850:	fa5f f089 	uxtb.w	r0, r9
 8011854:	4283      	cmp	r3, r0
 8011856:	d8d5      	bhi.n	8011804 <uxr_flash_output_streams+0x60>
 8011858:	b004      	add	sp, #16
 801185a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185e:	9b02      	ldr	r3, [sp, #8]
 8011860:	4620      	mov	r0, r4
 8011862:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011866:	f109 0901 	add.w	r9, r9, #1
 801186a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801186e:	f000 fe9d 	bl	80125ac <uxr_stamp_session_header>
 8011872:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011874:	9a03      	ldr	r2, [sp, #12]
 8011876:	685d      	ldr	r5, [r3, #4]
 8011878:	6818      	ldr	r0, [r3, #0]
 801187a:	9902      	ldr	r1, [sp, #8]
 801187c:	47a8      	blx	r5
 801187e:	7e23      	ldrb	r3, [r4, #24]
 8011880:	fa5f f089 	uxtb.w	r0, r9
 8011884:	4283      	cmp	r3, r0
 8011886:	d89a      	bhi.n	80117be <uxr_flash_output_streams+0x1a>
 8011888:	e7b2      	b.n	80117f0 <uxr_flash_output_streams+0x4c>
 801188a:	bf00      	nop

0801188c <read_submessage_info>:
 801188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011890:	460d      	mov	r5, r1
 8011892:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8011896:	4606      	mov	r6, r0
 8011898:	4669      	mov	r1, sp
 801189a:	4628      	mov	r0, r5
 801189c:	f002 fbc8 	bl	8014030 <uxr_deserialize_BaseObjectReply>
 80118a0:	4604      	mov	r4, r0
 80118a2:	a902      	add	r1, sp, #8
 80118a4:	4628      	mov	r0, r5
 80118a6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80118aa:	f7fe fae3 	bl	800fe74 <ucdr_deserialize_bool>
 80118ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80118b2:	4004      	ands	r4, r0
 80118b4:	b2e4      	uxtb	r4, r4
 80118b6:	b95b      	cbnz	r3, 80118d0 <read_submessage_info+0x44>
 80118b8:	a987      	add	r1, sp, #540	@ 0x21c
 80118ba:	4628      	mov	r0, r5
 80118bc:	f7fe fada 	bl	800fe74 <ucdr_deserialize_bool>
 80118c0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80118c4:	4680      	mov	r8, r0
 80118c6:	b94b      	cbnz	r3, 80118dc <read_submessage_info+0x50>
 80118c8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80118cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d0:	a903      	add	r1, sp, #12
 80118d2:	4628      	mov	r0, r5
 80118d4:	f002 fa58 	bl	8013d88 <uxr_deserialize_ObjectVariant>
 80118d8:	4004      	ands	r4, r0
 80118da:	e7ed      	b.n	80118b8 <read_submessage_info+0x2c>
 80118dc:	a988      	add	r1, sp, #544	@ 0x220
 80118de:	4628      	mov	r0, r5
 80118e0:	f7fe faf6 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80118e4:	ea14 0f08 	tst.w	r4, r8
 80118e8:	d0ee      	beq.n	80118c8 <read_submessage_info+0x3c>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d0ec      	beq.n	80118c8 <read_submessage_info+0x3c>
 80118ee:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80118f2:	2b0d      	cmp	r3, #13
 80118f4:	d1e8      	bne.n	80118c8 <read_submessage_info+0x3c>
 80118f6:	a98a      	add	r1, sp, #552	@ 0x228
 80118f8:	4628      	mov	r0, r5
 80118fa:	f7ff f88f 	bl	8010a1c <ucdr_deserialize_int16_t>
 80118fe:	b138      	cbz	r0, 8011910 <read_submessage_info+0x84>
 8011900:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011904:	2b00      	cmp	r3, #0
 8011906:	dd06      	ble.n	8011916 <read_submessage_info+0x8a>
 8011908:	2f00      	cmp	r7, #0
 801190a:	bf14      	ite	ne
 801190c:	2001      	movne	r0, #1
 801190e:	2002      	moveq	r0, #2
 8011910:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8011914:	e7d8      	b.n	80118c8 <read_submessage_info+0x3c>
 8011916:	2000      	movs	r0, #0
 8011918:	e7fa      	b.n	8011910 <read_submessage_info+0x84>
 801191a:	bf00      	nop

0801191c <read_submessage_list>:
 801191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011920:	4604      	mov	r4, r0
 8011922:	b097      	sub	sp, #92	@ 0x5c
 8011924:	460d      	mov	r5, r1
 8011926:	4ec1      	ldr	r6, [pc, #772]	@ (8011c2c <read_submessage_list+0x310>)
 8011928:	9209      	str	r2, [sp, #36]	@ 0x24
 801192a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801192e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011930:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011934:	4628      	mov	r0, r5
 8011936:	f001 fc9b 	bl	8013270 <uxr_read_submessage_header>
 801193a:	2800      	cmp	r0, #0
 801193c:	f000 8142 	beq.w	8011bc4 <read_submessage_list+0x2a8>
 8011940:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011944:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011948:	3b02      	subs	r3, #2
 801194a:	2b0d      	cmp	r3, #13
 801194c:	d8ed      	bhi.n	801192a <read_submessage_list+0xe>
 801194e:	a101      	add	r1, pc, #4	@ (adr r1, 8011954 <read_submessage_list+0x38>)
 8011950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011954:	08011bbb 	.word	0x08011bbb
 8011958:	0801192b 	.word	0x0801192b
 801195c:	08011bab 	.word	0x08011bab
 8011960:	08011b49 	.word	0x08011b49
 8011964:	08011b3f 	.word	0x08011b3f
 8011968:	0801192b 	.word	0x0801192b
 801196c:	0801192b 	.word	0x0801192b
 8011970:	08011a95 	.word	0x08011a95
 8011974:	08011a27 	.word	0x08011a27
 8011978:	080119e7 	.word	0x080119e7
 801197c:	0801192b 	.word	0x0801192b
 8011980:	0801192b 	.word	0x0801192b
 8011984:	0801192b 	.word	0x0801192b
 8011988:	0801198d 	.word	0x0801198d
 801198c:	a910      	add	r1, sp, #64	@ 0x40
 801198e:	4628      	mov	r0, r5
 8011990:	f002 fd84 	bl	801449c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011994:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8011998:	f1b8 0f00 	cmp.w	r8, #0
 801199c:	f000 811a 	beq.w	8011bd4 <read_submessage_list+0x2b8>
 80119a0:	f001 fcae 	bl	8013300 <uxr_nanos>
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80119ac:	2100      	movs	r1, #0
 80119ae:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80119b0:	9006      	str	r0, [sp, #24]
 80119b2:	468c      	mov	ip, r1
 80119b4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80119b6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80119ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80119bc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80119c0:	468c      	mov	ip, r1
 80119c2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80119c4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80119c8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80119cc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80119d0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80119d4:	e9cd 0100 	strd	r0, r1, [sp]
 80119d8:	4620      	mov	r0, r4
 80119da:	47c0      	blx	r8
 80119dc:	f04f 0301 	mov.w	r3, #1
 80119e0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80119e4:	e7a1      	b.n	801192a <read_submessage_list+0xe>
 80119e6:	a910      	add	r1, sp, #64	@ 0x40
 80119e8:	4628      	mov	r0, r5
 80119ea:	f002 fd35 	bl	8014458 <uxr_deserialize_HEARTBEAT_Payload>
 80119ee:	2100      	movs	r1, #0
 80119f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80119f4:	f001 fb12 	bl	801301c <uxr_stream_id_from_raw>
 80119f8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80119fc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80119fe:	f104 0008 	add.w	r0, r4, #8
 8011a02:	4641      	mov	r1, r8
 8011a04:	f001 fbf8 	bl	80131f8 <uxr_get_input_reliable_stream>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d08e      	beq.n	801192a <read_submessage_list+0xe>
 8011a0c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011a10:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011a14:	f004 fdb2 	bl	801657c <uxr_process_heartbeat>
 8011a18:	4642      	mov	r2, r8
 8011a1a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f7ff fdf6 	bl	8011610 <write_submessage_acknack.isra.0>
 8011a24:	e781      	b.n	801192a <read_submessage_list+0xe>
 8011a26:	a910      	add	r1, sp, #64	@ 0x40
 8011a28:	4628      	mov	r0, r5
 8011a2a:	f002 fced 	bl	8014408 <uxr_deserialize_ACKNACK_Payload>
 8011a2e:	2100      	movs	r1, #0
 8011a30:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011a34:	f001 faf2 	bl	801301c <uxr_stream_id_from_raw>
 8011a38:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011a3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8011a3e:	f104 0008 	add.w	r0, r4, #8
 8011a42:	f001 fbc3 	bl	80131cc <uxr_get_output_reliable_stream>
 8011a46:	4680      	mov	r8, r0
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	f43f af6e 	beq.w	801192a <read_submessage_list+0xe>
 8011a4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8011a52:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011a56:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011a5a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011a5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011a62:	b289      	uxth	r1, r1
 8011a64:	f005 f8ec 	bl	8016c40 <uxr_process_acknack>
 8011a68:	4640      	mov	r0, r8
 8011a6a:	f005 f8ad 	bl	8016bc8 <uxr_begin_output_nack_buffer_it>
 8011a6e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011a72:	e005      	b.n	8011a80 <read_submessage_list+0x164>
 8011a74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a76:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8011a7a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8011a7e:	47c8      	blx	r9
 8011a80:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011a84:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011a86:	4651      	mov	r1, sl
 8011a88:	4640      	mov	r0, r8
 8011a8a:	f005 f89f 	bl	8016bcc <uxr_next_reliable_nack_buffer_to_send>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d1f0      	bne.n	8011a74 <read_submessage_list+0x158>
 8011a92:	e74a      	b.n	801192a <read_submessage_list+0xe>
 8011a94:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011a98:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011a9c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011aa6:	4651      	mov	r1, sl
 8011aa8:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011aac:	f1a8 0804 	sub.w	r8, r8, #4
 8011ab0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011ab4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011ab8:	fa1f f888 	uxth.w	r8, r8
 8011abc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011ac0:	f009 090e 	and.w	r9, r9, #14
 8011ac4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011ac8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011acc:	f002 f9fe 	bl	8013ecc <uxr_deserialize_BaseObjectRequest>
 8011ad0:	4650      	mov	r0, sl
 8011ad2:	a90f      	add	r1, sp, #60	@ 0x3c
 8011ad4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011ad8:	f000 fde4 	bl	80126a4 <uxr_parse_base_object_request>
 8011adc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011ade:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011ae2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011ae6:	9110      	str	r1, [sp, #64]	@ 0x40
 8011ae8:	f1bb 0f00 	cmp.w	fp, #0
 8011aec:	d006      	beq.n	8011afc <read_submessage_list+0x1e0>
 8011aee:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011af2:	4652      	mov	r2, sl
 8011af4:	4620      	mov	r0, r4
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	2300      	movs	r3, #0
 8011afa:	47d8      	blx	fp
 8011afc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011afe:	b182      	cbz	r2, 8011b22 <read_submessage_list+0x206>
 8011b00:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011b02:	f04f 0c00 	mov.w	ip, #0
 8011b06:	3902      	subs	r1, #2
 8011b08:	e003      	b.n	8011b12 <read_submessage_list+0x1f6>
 8011b0a:	f10c 0c01 	add.w	ip, ip, #1
 8011b0e:	4594      	cmp	ip, r2
 8011b10:	d007      	beq.n	8011b22 <read_submessage_list+0x206>
 8011b12:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8011b16:	4553      	cmp	r3, sl
 8011b18:	d1f7      	bne.n	8011b0a <read_submessage_list+0x1ee>
 8011b1a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f803 200c 	strb.w	r2, [r3, ip]
 8011b22:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011b26:	464b      	mov	r3, r9
 8011b28:	4642      	mov	r2, r8
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	9102      	str	r1, [sp, #8]
 8011b2e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b30:	9101      	str	r1, [sp, #4]
 8011b32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011b34:	9100      	str	r1, [sp, #0]
 8011b36:	4629      	mov	r1, r5
 8011b38:	f7ff fc48 	bl	80113cc <read_submessage_format>
 8011b3c:	e6f5      	b.n	801192a <read_submessage_list+0xe>
 8011b3e:	4629      	mov	r1, r5
 8011b40:	4620      	mov	r0, r4
 8011b42:	f7ff fea3 	bl	801188c <read_submessage_info>
 8011b46:	e6f0      	b.n	801192a <read_submessage_list+0xe>
 8011b48:	2a00      	cmp	r2, #0
 8011b4a:	d03e      	beq.n	8011bca <read_submessage_list+0x2ae>
 8011b4c:	a910      	add	r1, sp, #64	@ 0x40
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f002 fbb2 	bl	80142b8 <uxr_deserialize_STATUS_Payload>
 8011b54:	a90e      	add	r1, sp, #56	@ 0x38
 8011b56:	aa0d      	add	r2, sp, #52	@ 0x34
 8011b58:	a810      	add	r0, sp, #64	@ 0x40
 8011b5a:	f000 fda3 	bl	80126a4 <uxr_parse_base_object_request>
 8011b5e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b60:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011b64:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011b68:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8011b6c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011b6e:	f1ba 0f00 	cmp.w	sl, #0
 8011b72:	d006      	beq.n	8011b82 <read_submessage_list+0x266>
 8011b74:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011b78:	4642      	mov	r2, r8
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	9300      	str	r3, [sp, #0]
 8011b7e:	464b      	mov	r3, r9
 8011b80:	47d0      	blx	sl
 8011b82:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011b84:	2a00      	cmp	r2, #0
 8011b86:	f43f aed0 	beq.w	801192a <read_submessage_list+0xe>
 8011b8a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	3802      	subs	r0, #2
 8011b90:	e003      	b.n	8011b9a <read_submessage_list+0x27e>
 8011b92:	3101      	adds	r1, #1
 8011b94:	4291      	cmp	r1, r2
 8011b96:	f43f aec8 	beq.w	801192a <read_submessage_list+0xe>
 8011b9a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011b9e:	4543      	cmp	r3, r8
 8011ba0:	d1f7      	bne.n	8011b92 <read_submessage_list+0x276>
 8011ba2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011ba4:	f803 9001 	strb.w	r9, [r3, r1]
 8011ba8:	e6bf      	b.n	801192a <read_submessage_list+0xe>
 8011baa:	2a00      	cmp	r2, #0
 8011bac:	f47f aebd 	bne.w	801192a <read_submessage_list+0xe>
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 fcba 	bl	801252c <uxr_read_create_session_status>
 8011bb8:	e6b7      	b.n	801192a <read_submessage_list+0xe>
 8011bba:	4629      	mov	r1, r5
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f7ff fcf1 	bl	80115a4 <read_submessage_get_info>
 8011bc2:	e6b2      	b.n	801192a <read_submessage_list+0xe>
 8011bc4:	b017      	add	sp, #92	@ 0x5c
 8011bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bca:	4629      	mov	r1, r5
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f000 fcbb 	bl	8012548 <uxr_read_delete_session_status>
 8011bd2:	e6aa      	b.n	801192a <read_submessage_list+0xe>
 8011bd4:	f001 fb94 	bl	8013300 <uxr_nanos>
 8011bd8:	4642      	mov	r2, r8
 8011bda:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8011bdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011bde:	fbc7 3206 	smlal	r3, r2, r7, r6
 8011be2:	1818      	adds	r0, r3, r0
 8011be4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8011be6:	eb42 0101 	adc.w	r1, r2, r1
 8011bea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bec:	4642      	mov	r2, r8
 8011bee:	fbc7 3206 	smlal	r3, r2, r7, r6
 8011bf2:	469c      	mov	ip, r3
 8011bf4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8011bf8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8011bfc:	4643      	mov	r3, r8
 8011bfe:	eb1c 0c07 	adds.w	ip, ip, r7
 8011c02:	eb42 0203 	adc.w	r2, r2, r3
 8011c06:	ebb0 030c 	subs.w	r3, r0, ip
 8011c0a:	eb61 0202 	sbc.w	r2, r1, r2
 8011c0e:	2a00      	cmp	r2, #0
 8011c10:	db08      	blt.n	8011c24 <read_submessage_list+0x308>
 8011c12:	085b      	lsrs	r3, r3, #1
 8011c14:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011c18:	1052      	asrs	r2, r2, #1
 8011c1a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8011c1e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8011c22:	e6db      	b.n	80119dc <read_submessage_list+0xc0>
 8011c24:	3301      	adds	r3, #1
 8011c26:	f142 0200 	adc.w	r2, r2, #0
 8011c2a:	e7f2      	b.n	8011c12 <read_submessage_list+0x2f6>
 8011c2c:	3b9aca00 	.word	0x3b9aca00

08011c30 <listen_message_reliably>:
 8011c30:	1e0b      	subs	r3, r1, #0
 8011c32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c36:	bfb8      	it	lt
 8011c38:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011c3c:	b09d      	sub	sp, #116	@ 0x74
 8011c3e:	4680      	mov	r8, r0
 8011c40:	9305      	str	r3, [sp, #20]
 8011c42:	f001 fb41 	bl	80132c8 <uxr_millis>
 8011c46:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011c4a:	4681      	mov	r9, r0
 8011c4c:	2a00      	cmp	r2, #0
 8011c4e:	f000 809a 	beq.w	8011d86 <listen_message_reliably+0x156>
 8011c52:	2600      	movs	r6, #0
 8011c54:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011c58:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011c5c:	460f      	mov	r7, r1
 8011c5e:	4630      	mov	r0, r6
 8011c60:	9303      	str	r3, [sp, #12]
 8011c62:	e00e      	b.n	8011c82 <listen_message_reliably+0x52>
 8011c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c66:	3601      	adds	r6, #1
 8011c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c6a:	455a      	cmp	r2, fp
 8011c6c:	9903      	ldr	r1, [sp, #12]
 8011c6e:	b2f0      	uxtb	r0, r6
 8011c70:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c74:	da01      	bge.n	8011c7a <listen_message_reliably+0x4a>
 8011c76:	4693      	mov	fp, r2
 8011c78:	9303      	str	r3, [sp, #12]
 8011c7a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011c7e:	4283      	cmp	r3, r0
 8011c80:	d95f      	bls.n	8011d42 <listen_message_reliably+0x112>
 8011c82:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011c86:	2102      	movs	r1, #2
 8011c88:	2201      	movs	r2, #1
 8011c8a:	00e4      	lsls	r4, r4, #3
 8011c8c:	f001 f998 	bl	8012fc0 <uxr_stream_id>
 8011c90:	4601      	mov	r1, r0
 8011c92:	f104 0520 	add.w	r5, r4, #32
 8011c96:	463b      	mov	r3, r7
 8011c98:	464a      	mov	r2, r9
 8011c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011c9c:	4445      	add	r5, r8
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f004 ff66 	bl	8016b70 <uxr_update_output_stream_heartbeat_timestamp>
 8011ca4:	eb08 0304 	add.w	r3, r8, r4
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d0db      	beq.n	8011c64 <listen_message_reliably+0x34>
 8011cac:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011cb0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011cb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011cb8:	4640      	mov	r0, r8
 8011cba:	3501      	adds	r5, #1
 8011cbc:	4444      	add	r4, r8
 8011cbe:	9304      	str	r3, [sp, #16]
 8011cc0:	f000 fcc8 	bl	8012654 <uxr_session_header_offset>
 8011cc4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011cc8:	2300      	movs	r3, #0
 8011cca:	2211      	movs	r2, #17
 8011ccc:	a90c      	add	r1, sp, #48	@ 0x30
 8011cce:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011cd2:	9000      	str	r0, [sp, #0]
 8011cd4:	4650      	mov	r0, sl
 8011cd6:	3601      	adds	r6, #1
 8011cd8:	f7ff f87e 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	2205      	movs	r2, #5
 8011ce0:	210b      	movs	r1, #11
 8011ce2:	4650      	mov	r0, sl
 8011ce4:	f001 faaa 	bl	801323c <uxr_buffer_submessage_header>
 8011ce8:	2101      	movs	r1, #1
 8011cea:	8968      	ldrh	r0, [r5, #10]
 8011cec:	f005 f804 	bl	8016cf8 <uxr_seq_num_add>
 8011cf0:	892b      	ldrh	r3, [r5, #8]
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	a90a      	add	r1, sp, #40	@ 0x28
 8011cf6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	9b04      	ldr	r3, [sp, #16]
 8011cfe:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011d02:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011d06:	f002 fb93 	bl	8014430 <uxr_serialize_HEARTBEAT_Payload>
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011d0e:	4640      	mov	r0, r8
 8011d10:	4611      	mov	r1, r2
 8011d12:	f000 fc4b 	bl	80125ac <uxr_stamp_session_header>
 8011d16:	4650      	mov	r0, sl
 8011d18:	f7ff f89e 	bl	8010e58 <ucdr_buffer_length>
 8011d1c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011d20:	4602      	mov	r2, r0
 8011d22:	a90c      	add	r1, sp, #48	@ 0x30
 8011d24:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d28:	47a8      	blx	r5
 8011d2a:	9903      	ldr	r1, [sp, #12]
 8011d2c:	b2f0      	uxtb	r0, r6
 8011d2e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011d32:	455a      	cmp	r2, fp
 8011d34:	eb73 0101 	sbcs.w	r1, r3, r1
 8011d38:	db9d      	blt.n	8011c76 <listen_message_reliably+0x46>
 8011d3a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011d3e:	4283      	cmp	r3, r0
 8011d40:	d89f      	bhi.n	8011c82 <listen_message_reliably+0x52>
 8011d42:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011d46:	9a03      	ldr	r2, [sp, #12]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	bf08      	it	eq
 8011d4c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011d50:	d019      	beq.n	8011d86 <listen_message_reliably+0x156>
 8011d52:	ebab 0309 	sub.w	r3, fp, r9
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	9d05      	ldr	r5, [sp, #20]
 8011d5a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8011d5e:	aa08      	add	r2, sp, #32
 8011d60:	bf08      	it	eq
 8011d62:	2301      	moveq	r3, #1
 8011d64:	a907      	add	r1, sp, #28
 8011d66:	6884      	ldr	r4, [r0, #8]
 8011d68:	429d      	cmp	r5, r3
 8011d6a:	6800      	ldr	r0, [r0, #0]
 8011d6c:	bfa8      	it	ge
 8011d6e:	461d      	movge	r5, r3
 8011d70:	462b      	mov	r3, r5
 8011d72:	47a0      	blx	r4
 8011d74:	b948      	cbnz	r0, 8011d8a <listen_message_reliably+0x15a>
 8011d76:	9b05      	ldr	r3, [sp, #20]
 8011d78:	1b5b      	subs	r3, r3, r5
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	9305      	str	r3, [sp, #20]
 8011d7e:	f73f af60 	bgt.w	8011c42 <listen_message_reliably+0x12>
 8011d82:	4604      	mov	r4, r0
 8011d84:	e012      	b.n	8011dac <listen_message_reliably+0x17c>
 8011d86:	9b05      	ldr	r3, [sp, #20]
 8011d88:	e7e5      	b.n	8011d56 <listen_message_reliably+0x126>
 8011d8a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011d8e:	4604      	mov	r4, r0
 8011d90:	2500      	movs	r5, #0
 8011d92:	a80c      	add	r0, sp, #48	@ 0x30
 8011d94:	f7ff f832 	bl	8010dfc <ucdr_init_buffer>
 8011d98:	f10d 031a 	add.w	r3, sp, #26
 8011d9c:	aa06      	add	r2, sp, #24
 8011d9e:	a90c      	add	r1, sp, #48	@ 0x30
 8011da0:	4640      	mov	r0, r8
 8011da2:	f88d 5018 	strb.w	r5, [sp, #24]
 8011da6:	f000 fc15 	bl	80125d4 <uxr_read_session_header>
 8011daa:	b918      	cbnz	r0, 8011db4 <listen_message_reliably+0x184>
 8011dac:	4620      	mov	r0, r4
 8011dae:	b01d      	add	sp, #116	@ 0x74
 8011db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db4:	4629      	mov	r1, r5
 8011db6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011dba:	f001 f92f 	bl	801301c <uxr_stream_id_from_raw>
 8011dbe:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011dc2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011dc6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011dca:	2e01      	cmp	r6, #1
 8011dcc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011dd0:	d04b      	beq.n	8011e6a <listen_message_reliably+0x23a>
 8011dd2:	2e02      	cmp	r6, #2
 8011dd4:	d00f      	beq.n	8011df6 <listen_message_reliably+0x1c6>
 8011dd6:	2e00      	cmp	r6, #0
 8011dd8:	d1e8      	bne.n	8011dac <listen_message_reliably+0x17c>
 8011dda:	4631      	mov	r1, r6
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f001 f91d 	bl	801301c <uxr_stream_id_from_raw>
 8011de2:	4602      	mov	r2, r0
 8011de4:	a90c      	add	r1, sp, #48	@ 0x30
 8011de6:	4640      	mov	r0, r8
 8011de8:	920a      	str	r2, [sp, #40]	@ 0x28
 8011dea:	f7ff fd97 	bl	801191c <read_submessage_list>
 8011dee:	4620      	mov	r0, r4
 8011df0:	b01d      	add	sp, #116	@ 0x74
 8011df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df6:	4629      	mov	r1, r5
 8011df8:	f108 0008 	add.w	r0, r8, #8
 8011dfc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011e00:	f001 f9fa 	bl	80131f8 <uxr_get_input_reliable_stream>
 8011e04:	4607      	mov	r7, r0
 8011e06:	b338      	cbz	r0, 8011e58 <listen_message_reliably+0x228>
 8011e08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e0a:	a80c      	add	r0, sp, #48	@ 0x30
 8011e0c:	9203      	str	r2, [sp, #12]
 8011e0e:	f7ff f827 	bl	8010e60 <ucdr_buffer_remaining>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f10d 0019 	add.w	r0, sp, #25
 8011e18:	9a03      	ldr	r2, [sp, #12]
 8011e1a:	4651      	mov	r1, sl
 8011e1c:	9000      	str	r0, [sp, #0]
 8011e1e:	4638      	mov	r0, r7
 8011e20:	f004 fab0 	bl	8016384 <uxr_receive_reliable_message>
 8011e24:	b1c0      	cbz	r0, 8011e58 <listen_message_reliably+0x228>
 8011e26:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011e2a:	b393      	cbz	r3, 8011e92 <listen_message_reliably+0x262>
 8011e2c:	ae14      	add	r6, sp, #80	@ 0x50
 8011e2e:	f04f 0a02 	mov.w	sl, #2
 8011e32:	e00a      	b.n	8011e4a <listen_message_reliably+0x21a>
 8011e34:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011e38:	4631      	mov	r1, r6
 8011e3a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011e3e:	4640      	mov	r0, r8
 8011e40:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011e44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e46:	f7ff fd69 	bl	801191c <read_submessage_list>
 8011e4a:	2204      	movs	r2, #4
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4638      	mov	r0, r7
 8011e50:	f004 fb1a 	bl	8016488 <uxr_next_input_reliable_buffer_available>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d1ed      	bne.n	8011e34 <listen_message_reliably+0x204>
 8011e58:	4640      	mov	r0, r8
 8011e5a:	462a      	mov	r2, r5
 8011e5c:	4649      	mov	r1, r9
 8011e5e:	f7ff fbd7 	bl	8011610 <write_submessage_acknack.isra.0>
 8011e62:	4620      	mov	r0, r4
 8011e64:	b01d      	add	sp, #116	@ 0x74
 8011e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	f108 0008 	add.w	r0, r8, #8
 8011e70:	f001 f9b8 	bl	80131e4 <uxr_get_input_best_effort_stream>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d099      	beq.n	8011dac <listen_message_reliably+0x17c>
 8011e78:	4651      	mov	r1, sl
 8011e7a:	f004 f9f9 	bl	8016270 <uxr_receive_best_effort_message>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d094      	beq.n	8011dac <listen_message_reliably+0x17c>
 8011e82:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011e86:	a90c      	add	r1, sp, #48	@ 0x30
 8011e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e8a:	4640      	mov	r0, r8
 8011e8c:	f7ff fd46 	bl	801191c <read_submessage_list>
 8011e90:	e78c      	b.n	8011dac <listen_message_reliably+0x17c>
 8011e92:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011e96:	a90c      	add	r1, sp, #48	@ 0x30
 8011e98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	f7ff fd3e 	bl	801191c <read_submessage_list>
 8011ea0:	e7c4      	b.n	8011e2c <listen_message_reliably+0x1fc>
 8011ea2:	bf00      	nop

08011ea4 <uxr_run_session_until_confirm_delivery>:
 8011ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea8:	4606      	mov	r6, r0
 8011eaa:	460d      	mov	r5, r1
 8011eac:	f001 fa0c 	bl	80132c8 <uxr_millis>
 8011eb0:	4607      	mov	r7, r0
 8011eb2:	4630      	mov	r0, r6
 8011eb4:	f106 0808 	add.w	r8, r6, #8
 8011eb8:	f7ff fc74 	bl	80117a4 <uxr_flash_output_streams>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	db10      	blt.n	8011ee2 <uxr_run_session_until_confirm_delivery+0x3e>
 8011ec0:	462c      	mov	r4, r5
 8011ec2:	e006      	b.n	8011ed2 <uxr_run_session_until_confirm_delivery+0x2e>
 8011ec4:	f7ff feb4 	bl	8011c30 <listen_message_reliably>
 8011ec8:	f001 f9fe 	bl	80132c8 <uxr_millis>
 8011ecc:	1bc3      	subs	r3, r0, r7
 8011ece:	1aec      	subs	r4, r5, r3
 8011ed0:	d407      	bmi.n	8011ee2 <uxr_run_session_until_confirm_delivery+0x3e>
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	f001 f99c 	bl	8013210 <uxr_output_streams_confirmed>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	4621      	mov	r1, r4
 8011edc:	4630      	mov	r0, r6
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d0f0      	beq.n	8011ec4 <uxr_run_session_until_confirm_delivery+0x20>
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee8:	f001 b992 	b.w	8013210 <uxr_output_streams_confirmed>

08011eec <uxr_run_session_until_all_status>:
 8011eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	4688      	mov	r8, r1
 8011ef8:	4692      	mov	sl, r2
 8011efa:	461f      	mov	r7, r3
 8011efc:	f7ff fc52 	bl	80117a4 <uxr_flash_output_streams>
 8011f00:	f1bb 0f00 	cmp.w	fp, #0
 8011f04:	d004      	beq.n	8011f10 <uxr_run_session_until_all_status+0x24>
 8011f06:	465a      	mov	r2, fp
 8011f08:	21ff      	movs	r1, #255	@ 0xff
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f005 fdf2 	bl	8017af4 <memset>
 8011f10:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011f14:	1e7d      	subs	r5, r7, #1
 8011f16:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8011f1a:	f001 f9d5 	bl	80132c8 <uxr_millis>
 8011f1e:	4641      	mov	r1, r8
 8011f20:	4681      	mov	r9, r0
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7ff fe84 	bl	8011c30 <listen_message_reliably>
 8011f28:	f001 f9ce 	bl	80132c8 <uxr_millis>
 8011f2c:	eba0 0009 	sub.w	r0, r0, r9
 8011f30:	eba8 0100 	sub.w	r1, r8, r0
 8011f34:	f1bb 0f00 	cmp.w	fp, #0
 8011f38:	d029      	beq.n	8011f8e <uxr_run_session_until_all_status+0xa2>
 8011f3a:	46ae      	mov	lr, r5
 8011f3c:	f04f 0c00 	mov.w	ip, #0
 8011f40:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011f44:	2cff      	cmp	r4, #255	@ 0xff
 8011f46:	d015      	beq.n	8011f74 <uxr_run_session_until_all_status+0x88>
 8011f48:	f10c 0c01 	add.w	ip, ip, #1
 8011f4c:	45e3      	cmp	fp, ip
 8011f4e:	d8f7      	bhi.n	8011f40 <uxr_run_session_until_all_status+0x54>
 8011f50:	2300      	movs	r3, #0
 8011f52:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011f54:	e000      	b.n	8011f58 <uxr_run_session_until_all_status+0x6c>
 8011f56:	b158      	cbz	r0, 8011f70 <uxr_run_session_until_all_status+0x84>
 8011f58:	462b      	mov	r3, r5
 8011f5a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8011f5e:	3302      	adds	r3, #2
 8011f60:	2801      	cmp	r0, #1
 8011f62:	eba3 0307 	sub.w	r3, r3, r7
 8011f66:	bf8c      	ite	hi
 8011f68:	2000      	movhi	r0, #0
 8011f6a:	2001      	movls	r0, #1
 8011f6c:	459b      	cmp	fp, r3
 8011f6e:	d8f2      	bhi.n	8011f56 <uxr_run_session_until_all_status+0x6a>
 8011f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f74:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011f78:	f10c 0c01 	add.w	ip, ip, #1
 8011f7c:	45dc      	cmp	ip, fp
 8011f7e:	d201      	bcs.n	8011f84 <uxr_run_session_until_all_status+0x98>
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d0dd      	beq.n	8011f40 <uxr_run_session_until_all_status+0x54>
 8011f84:	2900      	cmp	r1, #0
 8011f86:	dde3      	ble.n	8011f50 <uxr_run_session_until_all_status+0x64>
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1ca      	bne.n	8011f22 <uxr_run_session_until_all_status+0x36>
 8011f8c:	e7e0      	b.n	8011f50 <uxr_run_session_until_all_status+0x64>
 8011f8e:	2001      	movs	r0, #1
 8011f90:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f98 <uxr_sync_session>:
 8011f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f9a:	b093      	sub	sp, #76	@ 0x4c
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	460d      	mov	r5, r1
 8011fa0:	f000 fb58 	bl	8012654 <uxr_session_header_offset>
 8011fa4:	2214      	movs	r2, #20
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9000      	str	r0, [sp, #0]
 8011faa:	a80a      	add	r0, sp, #40	@ 0x28
 8011fac:	eb0d 0102 	add.w	r1, sp, r2
 8011fb0:	f7fe ff12 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	2208      	movs	r2, #8
 8011fb8:	210e      	movs	r1, #14
 8011fba:	a80a      	add	r0, sp, #40	@ 0x28
 8011fbc:	f001 f93e 	bl	801323c <uxr_buffer_submessage_header>
 8011fc0:	f001 f99e 	bl	8013300 <uxr_nanos>
 8011fc4:	460e      	mov	r6, r1
 8011fc6:	4607      	mov	r7, r0
 8011fc8:	a31b      	add	r3, pc, #108	@ (adr r3, 8012038 <uxr_sync_session+0xa0>)
 8011fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fce:	f7ee f9ef 	bl	80003b0 <__aeabi_ldivmod>
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	9003      	str	r0, [sp, #12]
 8011fd6:	4638      	mov	r0, r7
 8011fd8:	a317      	add	r3, pc, #92	@ (adr r3, 8012038 <uxr_sync_session+0xa0>)
 8011fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fde:	f7ee f9e7 	bl	80003b0 <__aeabi_ldivmod>
 8011fe2:	a903      	add	r1, sp, #12
 8011fe4:	a80a      	add	r0, sp, #40	@ 0x28
 8011fe6:	9204      	str	r2, [sp, #16]
 8011fe8:	f002 fa4a 	bl	8014480 <uxr_serialize_TIMESTAMP_Payload>
 8011fec:	2200      	movs	r2, #0
 8011fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	f000 fada 	bl	80125ac <uxr_stamp_session_header>
 8011ff8:	a80a      	add	r0, sp, #40	@ 0x28
 8011ffa:	f7fe ff2d 	bl	8010e58 <ucdr_buffer_length>
 8011ffe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012000:	4602      	mov	r2, r0
 8012002:	a905      	add	r1, sp, #20
 8012004:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012008:	47b0      	blx	r6
 801200a:	f001 f95d 	bl	80132c8 <uxr_millis>
 801200e:	2300      	movs	r3, #0
 8012010:	4606      	mov	r6, r0
 8012012:	4629      	mov	r1, r5
 8012014:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012018:	e000      	b.n	801201c <uxr_sync_session+0x84>
 801201a:	b950      	cbnz	r0, 8012032 <uxr_sync_session+0x9a>
 801201c:	4620      	mov	r0, r4
 801201e:	f7ff fe07 	bl	8011c30 <listen_message_reliably>
 8012022:	f001 f951 	bl	80132c8 <uxr_millis>
 8012026:	1b83      	subs	r3, r0, r6
 8012028:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801202c:	1ae9      	subs	r1, r5, r3
 801202e:	2900      	cmp	r1, #0
 8012030:	dcf3      	bgt.n	801201a <uxr_sync_session+0x82>
 8012032:	b013      	add	sp, #76	@ 0x4c
 8012034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012036:	bf00      	nop
 8012038:	3b9aca00 	.word	0x3b9aca00
 801203c:	00000000 	.word	0x00000000

08012040 <wait_session_status>:
 8012040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	4604      	mov	r4, r0
 8012046:	b09d      	sub	sp, #116	@ 0x74
 8012048:	20ff      	movs	r0, #255	@ 0xff
 801204a:	9303      	str	r3, [sp, #12]
 801204c:	7160      	strb	r0, [r4, #5]
 801204e:	2b00      	cmp	r3, #0
 8012050:	f000 80b6 	beq.w	80121c0 <wait_session_status+0x180>
 8012054:	4689      	mov	r9, r1
 8012056:	4692      	mov	sl, r2
 8012058:	f04f 0b00 	mov.w	fp, #0
 801205c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801205e:	4652      	mov	r2, sl
 8012060:	4649      	mov	r1, r9
 8012062:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012066:	47a8      	blx	r5
 8012068:	f001 f92e 	bl	80132c8 <uxr_millis>
 801206c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012070:	4605      	mov	r5, r0
 8012072:	e009      	b.n	8012088 <wait_session_status+0x48>
 8012074:	f001 f928 	bl	80132c8 <uxr_millis>
 8012078:	1b40      	subs	r0, r0, r5
 801207a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801207e:	2b00      	cmp	r3, #0
 8012080:	dd40      	ble.n	8012104 <wait_session_status+0xc4>
 8012082:	7960      	ldrb	r0, [r4, #5]
 8012084:	28ff      	cmp	r0, #255	@ 0xff
 8012086:	d145      	bne.n	8012114 <wait_session_status+0xd4>
 8012088:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801208a:	a908      	add	r1, sp, #32
 801208c:	6896      	ldr	r6, [r2, #8]
 801208e:	6810      	ldr	r0, [r2, #0]
 8012090:	aa09      	add	r2, sp, #36	@ 0x24
 8012092:	47b0      	blx	r6
 8012094:	2800      	cmp	r0, #0
 8012096:	d0ed      	beq.n	8012074 <wait_session_status+0x34>
 8012098:	a80c      	add	r0, sp, #48	@ 0x30
 801209a:	2600      	movs	r6, #0
 801209c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80120a0:	f7fe feac 	bl	8010dfc <ucdr_init_buffer>
 80120a4:	f10d 031e 	add.w	r3, sp, #30
 80120a8:	aa07      	add	r2, sp, #28
 80120aa:	a90c      	add	r1, sp, #48	@ 0x30
 80120ac:	4620      	mov	r0, r4
 80120ae:	f88d 601c 	strb.w	r6, [sp, #28]
 80120b2:	f000 fa8f 	bl	80125d4 <uxr_read_session_header>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d0dc      	beq.n	8012074 <wait_session_status+0x34>
 80120ba:	4631      	mov	r1, r6
 80120bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80120c0:	f000 ffac 	bl	801301c <uxr_stream_id_from_raw>
 80120c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80120c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80120cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80120d0:	2f01      	cmp	r7, #1
 80120d2:	9302      	str	r3, [sp, #8]
 80120d4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80120d8:	d05c      	beq.n	8012194 <wait_session_status+0x154>
 80120da:	2f02      	cmp	r7, #2
 80120dc:	d020      	beq.n	8012120 <wait_session_status+0xe0>
 80120de:	2f00      	cmp	r7, #0
 80120e0:	d1c8      	bne.n	8012074 <wait_session_status+0x34>
 80120e2:	4639      	mov	r1, r7
 80120e4:	4638      	mov	r0, r7
 80120e6:	f000 ff99 	bl	801301c <uxr_stream_id_from_raw>
 80120ea:	a90c      	add	r1, sp, #48	@ 0x30
 80120ec:	4602      	mov	r2, r0
 80120ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 80120f0:	4620      	mov	r0, r4
 80120f2:	f7ff fc13 	bl	801191c <read_submessage_list>
 80120f6:	f001 f8e7 	bl	80132c8 <uxr_millis>
 80120fa:	1b40      	subs	r0, r0, r5
 80120fc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012100:	2b00      	cmp	r3, #0
 8012102:	dcbe      	bgt.n	8012082 <wait_session_status+0x42>
 8012104:	f10b 0b01 	add.w	fp, fp, #1
 8012108:	9b03      	ldr	r3, [sp, #12]
 801210a:	7960      	ldrb	r0, [r4, #5]
 801210c:	455b      	cmp	r3, fp
 801210e:	d001      	beq.n	8012114 <wait_session_status+0xd4>
 8012110:	28ff      	cmp	r0, #255	@ 0xff
 8012112:	d0a3      	beq.n	801205c <wait_session_status+0x1c>
 8012114:	38ff      	subs	r0, #255	@ 0xff
 8012116:	bf18      	it	ne
 8012118:	2001      	movne	r0, #1
 801211a:	b01d      	add	sp, #116	@ 0x74
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012124:	4631      	mov	r1, r6
 8012126:	f104 0008 	add.w	r0, r4, #8
 801212a:	9304      	str	r3, [sp, #16]
 801212c:	f001 f864 	bl	80131f8 <uxr_get_input_reliable_stream>
 8012130:	4680      	mov	r8, r0
 8012132:	b348      	cbz	r0, 8012188 <wait_session_status+0x148>
 8012134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012136:	a80c      	add	r0, sp, #48	@ 0x30
 8012138:	9205      	str	r2, [sp, #20]
 801213a:	f7fe fe91 	bl	8010e60 <ucdr_buffer_remaining>
 801213e:	4603      	mov	r3, r0
 8012140:	f10d 001d 	add.w	r0, sp, #29
 8012144:	9a05      	ldr	r2, [sp, #20]
 8012146:	9000      	str	r0, [sp, #0]
 8012148:	4640      	mov	r0, r8
 801214a:	9902      	ldr	r1, [sp, #8]
 801214c:	f004 f91a 	bl	8016384 <uxr_receive_reliable_message>
 8012150:	b1d0      	cbz	r0, 8012188 <wait_session_status+0x148>
 8012152:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d03a      	beq.n	80121d0 <wait_session_status+0x190>
 801215a:	9f04      	ldr	r7, [sp, #16]
 801215c:	e00a      	b.n	8012174 <wait_session_status+0x134>
 801215e:	f04f 0302 	mov.w	r3, #2
 8012162:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012166:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801216a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801216e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012170:	f7ff fbd4 	bl	801191c <read_submessage_list>
 8012174:	a914      	add	r1, sp, #80	@ 0x50
 8012176:	2204      	movs	r2, #4
 8012178:	4640      	mov	r0, r8
 801217a:	f004 f985 	bl	8016488 <uxr_next_input_reliable_buffer_available>
 801217e:	4603      	mov	r3, r0
 8012180:	a914      	add	r1, sp, #80	@ 0x50
 8012182:	4620      	mov	r0, r4
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1ea      	bne.n	801215e <wait_session_status+0x11e>
 8012188:	4632      	mov	r2, r6
 801218a:	9904      	ldr	r1, [sp, #16]
 801218c:	4620      	mov	r0, r4
 801218e:	f7ff fa3f 	bl	8011610 <write_submessage_acknack.isra.0>
 8012192:	e76f      	b.n	8012074 <wait_session_status+0x34>
 8012194:	4631      	mov	r1, r6
 8012196:	f104 0008 	add.w	r0, r4, #8
 801219a:	f001 f823 	bl	80131e4 <uxr_get_input_best_effort_stream>
 801219e:	2800      	cmp	r0, #0
 80121a0:	f43f af68 	beq.w	8012074 <wait_session_status+0x34>
 80121a4:	9902      	ldr	r1, [sp, #8]
 80121a6:	f004 f863 	bl	8016270 <uxr_receive_best_effort_message>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	f43f af62 	beq.w	8012074 <wait_session_status+0x34>
 80121b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80121b4:	a90c      	add	r1, sp, #48	@ 0x30
 80121b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7ff fbaf 	bl	801191c <read_submessage_list>
 80121be:	e759      	b.n	8012074 <wait_session_status+0x34>
 80121c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80121c2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80121c6:	47a0      	blx	r4
 80121c8:	2001      	movs	r0, #1
 80121ca:	b01d      	add	sp, #116	@ 0x74
 80121cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80121d4:	a90c      	add	r1, sp, #48	@ 0x30
 80121d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80121d8:	4620      	mov	r0, r4
 80121da:	f7ff fb9f 	bl	801191c <read_submessage_list>
 80121de:	e7bc      	b.n	801215a <wait_session_status+0x11a>

080121e0 <uxr_delete_session_retries>:
 80121e0:	b530      	push	{r4, r5, lr}
 80121e2:	b08f      	sub	sp, #60	@ 0x3c
 80121e4:	4604      	mov	r4, r0
 80121e6:	460d      	mov	r5, r1
 80121e8:	f000 fa34 	bl	8012654 <uxr_session_header_offset>
 80121ec:	2300      	movs	r3, #0
 80121ee:	2210      	movs	r2, #16
 80121f0:	a902      	add	r1, sp, #8
 80121f2:	9000      	str	r0, [sp, #0]
 80121f4:	a806      	add	r0, sp, #24
 80121f6:	f7fe fdef 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 80121fa:	a906      	add	r1, sp, #24
 80121fc:	4620      	mov	r0, r4
 80121fe:	f000 f979 	bl	80124f4 <uxr_buffer_delete_session>
 8012202:	2200      	movs	r2, #0
 8012204:	9b06      	ldr	r3, [sp, #24]
 8012206:	4620      	mov	r0, r4
 8012208:	4611      	mov	r1, r2
 801220a:	f000 f9cf 	bl	80125ac <uxr_stamp_session_header>
 801220e:	a806      	add	r0, sp, #24
 8012210:	f7fe fe22 	bl	8010e58 <ucdr_buffer_length>
 8012214:	462b      	mov	r3, r5
 8012216:	4602      	mov	r2, r0
 8012218:	a902      	add	r1, sp, #8
 801221a:	4620      	mov	r0, r4
 801221c:	f7ff ff10 	bl	8012040 <wait_session_status>
 8012220:	b118      	cbz	r0, 801222a <uxr_delete_session_retries+0x4a>
 8012222:	7960      	ldrb	r0, [r4, #5]
 8012224:	fab0 f080 	clz	r0, r0
 8012228:	0940      	lsrs	r0, r0, #5
 801222a:	b00f      	add	sp, #60	@ 0x3c
 801222c:	bd30      	pop	{r4, r5, pc}
 801222e:	bf00      	nop

08012230 <uxr_create_session>:
 8012230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	f100 0b08 	add.w	fp, r0, #8
 8012238:	4604      	mov	r4, r0
 801223a:	b0ab      	sub	sp, #172	@ 0xac
 801223c:	4658      	mov	r0, fp
 801223e:	465e      	mov	r6, fp
 8012240:	f000 ff22 	bl	8013088 <uxr_reset_stream_storage>
 8012244:	4620      	mov	r0, r4
 8012246:	f000 fa05 	bl	8012654 <uxr_session_header_offset>
 801224a:	2300      	movs	r3, #0
 801224c:	221c      	movs	r2, #28
 801224e:	a90b      	add	r1, sp, #44	@ 0x2c
 8012250:	9000      	str	r0, [sp, #0]
 8012252:	a812      	add	r0, sp, #72	@ 0x48
 8012254:	f7fe fdc0 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8012258:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801225a:	a912      	add	r1, sp, #72	@ 0x48
 801225c:	4620      	mov	r0, r4
 801225e:	8a1a      	ldrh	r2, [r3, #16]
 8012260:	3a04      	subs	r2, #4
 8012262:	b292      	uxth	r2, r2
 8012264:	f000 f91c 	bl	80124a0 <uxr_buffer_create_session>
 8012268:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801226a:	4620      	mov	r0, r4
 801226c:	f000 f98a 	bl	8012584 <uxr_stamp_create_session_header>
 8012270:	a812      	add	r0, sp, #72	@ 0x48
 8012272:	f7fe fdf1 	bl	8010e58 <ucdr_buffer_length>
 8012276:	23ff      	movs	r3, #255	@ 0xff
 8012278:	4681      	mov	r9, r0
 801227a:	7163      	strb	r3, [r4, #5]
 801227c:	230a      	movs	r3, #10
 801227e:	9303      	str	r3, [sp, #12]
 8012280:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012282:	464a      	mov	r2, r9
 8012284:	a90b      	add	r1, sp, #44	@ 0x2c
 8012286:	e9d3 0500 	ldrd	r0, r5, [r3]
 801228a:	47a8      	blx	r5
 801228c:	f001 f81c 	bl	80132c8 <uxr_millis>
 8012290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012294:	4605      	mov	r5, r0
 8012296:	e009      	b.n	80122ac <uxr_create_session+0x7c>
 8012298:	f001 f816 	bl	80132c8 <uxr_millis>
 801229c:	1b40      	subs	r0, r0, r5
 801229e:	7962      	ldrb	r2, [r4, #5]
 80122a0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	dd38      	ble.n	801231a <uxr_create_session+0xea>
 80122a8:	2aff      	cmp	r2, #255	@ 0xff
 80122aa:	d13c      	bne.n	8012326 <uxr_create_session+0xf6>
 80122ac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80122ae:	a907      	add	r1, sp, #28
 80122b0:	6897      	ldr	r7, [r2, #8]
 80122b2:	6810      	ldr	r0, [r2, #0]
 80122b4:	aa08      	add	r2, sp, #32
 80122b6:	47b8      	blx	r7
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d0ed      	beq.n	8012298 <uxr_create_session+0x68>
 80122bc:	a81a      	add	r0, sp, #104	@ 0x68
 80122be:	2700      	movs	r7, #0
 80122c0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80122c4:	f7fe fd9a 	bl	8010dfc <ucdr_init_buffer>
 80122c8:	f10d 031a 	add.w	r3, sp, #26
 80122cc:	aa06      	add	r2, sp, #24
 80122ce:	a91a      	add	r1, sp, #104	@ 0x68
 80122d0:	4620      	mov	r0, r4
 80122d2:	f88d 7018 	strb.w	r7, [sp, #24]
 80122d6:	f000 f97d 	bl	80125d4 <uxr_read_session_header>
 80122da:	2800      	cmp	r0, #0
 80122dc:	d0dc      	beq.n	8012298 <uxr_create_session+0x68>
 80122de:	4639      	mov	r1, r7
 80122e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80122e4:	f000 fe9a 	bl	801301c <uxr_stream_id_from_raw>
 80122e8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80122ec:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80122f0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80122f4:	2f01      	cmp	r7, #1
 80122f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80122fa:	d053      	beq.n	80123a4 <uxr_create_session+0x174>
 80122fc:	2f02      	cmp	r7, #2
 80122fe:	d018      	beq.n	8012332 <uxr_create_session+0x102>
 8012300:	2f00      	cmp	r7, #0
 8012302:	d1c9      	bne.n	8012298 <uxr_create_session+0x68>
 8012304:	4639      	mov	r1, r7
 8012306:	4638      	mov	r0, r7
 8012308:	f000 fe88 	bl	801301c <uxr_stream_id_from_raw>
 801230c:	a91a      	add	r1, sp, #104	@ 0x68
 801230e:	4602      	mov	r2, r0
 8012310:	900a      	str	r0, [sp, #40]	@ 0x28
 8012312:	4620      	mov	r0, r4
 8012314:	f7ff fb02 	bl	801191c <read_submessage_list>
 8012318:	e7be      	b.n	8012298 <uxr_create_session+0x68>
 801231a:	9b03      	ldr	r3, [sp, #12]
 801231c:	3b01      	subs	r3, #1
 801231e:	9303      	str	r3, [sp, #12]
 8012320:	d001      	beq.n	8012326 <uxr_create_session+0xf6>
 8012322:	2aff      	cmp	r2, #255	@ 0xff
 8012324:	d0ac      	beq.n	8012280 <uxr_create_session+0x50>
 8012326:	2a00      	cmp	r2, #0
 8012328:	d051      	beq.n	80123ce <uxr_create_session+0x19e>
 801232a:	2000      	movs	r0, #0
 801232c:	b02b      	add	sp, #172	@ 0xac
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012332:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012336:	4641      	mov	r1, r8
 8012338:	4630      	mov	r0, r6
 801233a:	9304      	str	r3, [sp, #16]
 801233c:	f000 ff5c 	bl	80131f8 <uxr_get_input_reliable_stream>
 8012340:	4682      	mov	sl, r0
 8012342:	b348      	cbz	r0, 8012398 <uxr_create_session+0x168>
 8012344:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012346:	a81a      	add	r0, sp, #104	@ 0x68
 8012348:	9205      	str	r2, [sp, #20]
 801234a:	f7fe fd89 	bl	8010e60 <ucdr_buffer_remaining>
 801234e:	4603      	mov	r3, r0
 8012350:	f10d 0019 	add.w	r0, sp, #25
 8012354:	9a05      	ldr	r2, [sp, #20]
 8012356:	4659      	mov	r1, fp
 8012358:	9000      	str	r0, [sp, #0]
 801235a:	4650      	mov	r0, sl
 801235c:	f004 f812 	bl	8016384 <uxr_receive_reliable_message>
 8012360:	b1d0      	cbz	r0, 8012398 <uxr_create_session+0x168>
 8012362:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d038      	beq.n	80123dc <uxr_create_session+0x1ac>
 801236a:	9f04      	ldr	r7, [sp, #16]
 801236c:	e00a      	b.n	8012384 <uxr_create_session+0x154>
 801236e:	f04f 0302 	mov.w	r3, #2
 8012372:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8012376:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801237a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801237e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012380:	f7ff facc 	bl	801191c <read_submessage_list>
 8012384:	a922      	add	r1, sp, #136	@ 0x88
 8012386:	2204      	movs	r2, #4
 8012388:	4650      	mov	r0, sl
 801238a:	f004 f87d 	bl	8016488 <uxr_next_input_reliable_buffer_available>
 801238e:	4603      	mov	r3, r0
 8012390:	a922      	add	r1, sp, #136	@ 0x88
 8012392:	4620      	mov	r0, r4
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1ea      	bne.n	801236e <uxr_create_session+0x13e>
 8012398:	4642      	mov	r2, r8
 801239a:	9904      	ldr	r1, [sp, #16]
 801239c:	4620      	mov	r0, r4
 801239e:	f7ff f937 	bl	8011610 <write_submessage_acknack.isra.0>
 80123a2:	e779      	b.n	8012298 <uxr_create_session+0x68>
 80123a4:	4641      	mov	r1, r8
 80123a6:	4630      	mov	r0, r6
 80123a8:	f000 ff1c 	bl	80131e4 <uxr_get_input_best_effort_stream>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	f43f af73 	beq.w	8012298 <uxr_create_session+0x68>
 80123b2:	4659      	mov	r1, fp
 80123b4:	f003 ff5c 	bl	8016270 <uxr_receive_best_effort_message>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	f43f af6d 	beq.w	8012298 <uxr_create_session+0x68>
 80123be:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80123c2:	a91a      	add	r1, sp, #104	@ 0x68
 80123c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7ff faa8 	bl	801191c <read_submessage_list>
 80123cc:	e764      	b.n	8012298 <uxr_create_session+0x68>
 80123ce:	4630      	mov	r0, r6
 80123d0:	f000 fe5a 	bl	8013088 <uxr_reset_stream_storage>
 80123d4:	2001      	movs	r0, #1
 80123d6:	b02b      	add	sp, #172	@ 0xac
 80123d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123dc:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80123e0:	a91a      	add	r1, sp, #104	@ 0x68
 80123e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7ff fa99 	bl	801191c <read_submessage_list>
 80123ea:	e7be      	b.n	801236a <uxr_create_session+0x13a>

080123ec <uxr_prepare_stream_to_write_submessage>:
 80123ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123f0:	b082      	sub	sp, #8
 80123f2:	4604      	mov	r4, r0
 80123f4:	4610      	mov	r0, r2
 80123f6:	4615      	mov	r5, r2
 80123f8:	461e      	mov	r6, r3
 80123fa:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80123fe:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8012402:	f105 0904 	add.w	r9, r5, #4
 8012406:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801240a:	9101      	str	r1, [sp, #4]
 801240c:	f000 ff56 	bl	80132bc <uxr_submessage_padding>
 8012410:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012414:	4481      	add	r9, r0
 8012416:	2b01      	cmp	r3, #1
 8012418:	d01d      	beq.n	8012456 <uxr_prepare_stream_to_write_submessage+0x6a>
 801241a:	2b02      	cmp	r3, #2
 801241c:	d116      	bne.n	801244c <uxr_prepare_stream_to_write_submessage+0x60>
 801241e:	f104 0008 	add.w	r0, r4, #8
 8012422:	4651      	mov	r1, sl
 8012424:	f000 fed2 	bl	80131cc <uxr_get_output_reliable_stream>
 8012428:	4604      	mov	r4, r0
 801242a:	b158      	cbz	r0, 8012444 <uxr_prepare_stream_to_write_submessage+0x58>
 801242c:	4649      	mov	r1, r9
 801242e:	4632      	mov	r2, r6
 8012430:	f004 f9f0 	bl	8016814 <uxr_prepare_reliable_buffer_to_write>
 8012434:	4604      	mov	r4, r0
 8012436:	b12c      	cbz	r4, 8012444 <uxr_prepare_stream_to_write_submessage+0x58>
 8012438:	4643      	mov	r3, r8
 801243a:	b2aa      	uxth	r2, r5
 801243c:	4639      	mov	r1, r7
 801243e:	4630      	mov	r0, r6
 8012440:	f000 fefc 	bl	801323c <uxr_buffer_submessage_header>
 8012444:	4620      	mov	r0, r4
 8012446:	b002      	add	sp, #8
 8012448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801244c:	2400      	movs	r4, #0
 801244e:	4620      	mov	r0, r4
 8012450:	b002      	add	sp, #8
 8012452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012456:	f104 0008 	add.w	r0, r4, #8
 801245a:	4651      	mov	r1, sl
 801245c:	f000 feae 	bl	80131bc <uxr_get_output_best_effort_stream>
 8012460:	4604      	mov	r4, r0
 8012462:	2800      	cmp	r0, #0
 8012464:	d0ee      	beq.n	8012444 <uxr_prepare_stream_to_write_submessage+0x58>
 8012466:	4649      	mov	r1, r9
 8012468:	4632      	mov	r2, r6
 801246a:	f004 f8fd 	bl	8016668 <uxr_prepare_best_effort_buffer_to_write>
 801246e:	4604      	mov	r4, r0
 8012470:	e7e1      	b.n	8012436 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012472:	bf00      	nop

08012474 <uxr_init_session_info>:
 8012474:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8012478:	23ff      	movs	r3, #255	@ 0xff
 801247a:	7102      	strb	r2, [r0, #4]
 801247c:	f880 c001 	strb.w	ip, [r0, #1]
 8012480:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012484:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012488:	7001      	strb	r1, [r0, #0]
 801248a:	f880 c002 	strb.w	ip, [r0, #2]
 801248e:	7143      	strb	r3, [r0, #5]
 8012490:	70c2      	strb	r2, [r0, #3]
 8012492:	b500      	push	{lr}
 8012494:	f04f 0e09 	mov.w	lr, #9
 8012498:	f8a0 e006 	strh.w	lr, [r0, #6]
 801249c:	f85d fb04 	ldr.w	pc, [sp], #4

080124a0 <uxr_buffer_create_session>:
 80124a0:	b530      	push	{r4, r5, lr}
 80124a2:	2300      	movs	r3, #0
 80124a4:	b089      	sub	sp, #36	@ 0x24
 80124a6:	4d12      	ldr	r5, [pc, #72]	@ (80124f0 <uxr_buffer_create_session+0x50>)
 80124a8:	460c      	mov	r4, r1
 80124aa:	9307      	str	r3, [sp, #28]
 80124ac:	4619      	mov	r1, r3
 80124ae:	f8ad 201c 	strh.w	r2, [sp, #28]
 80124b2:	2201      	movs	r2, #1
 80124b4:	9301      	str	r3, [sp, #4]
 80124b6:	80c2      	strh	r2, [r0, #6]
 80124b8:	f88d 2004 	strb.w	r2, [sp, #4]
 80124bc:	682a      	ldr	r2, [r5, #0]
 80124be:	9303      	str	r3, [sp, #12]
 80124c0:	9200      	str	r2, [sp, #0]
 80124c2:	88aa      	ldrh	r2, [r5, #4]
 80124c4:	9306      	str	r3, [sp, #24]
 80124c6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80124ca:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80124ce:	9202      	str	r2, [sp, #8]
 80124d0:	7802      	ldrb	r2, [r0, #0]
 80124d2:	4620      	mov	r0, r4
 80124d4:	f88d 200c 	strb.w	r2, [sp, #12]
 80124d8:	2210      	movs	r2, #16
 80124da:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80124de:	f000 fead 	bl	801323c <uxr_buffer_submessage_header>
 80124e2:	4669      	mov	r1, sp
 80124e4:	4620      	mov	r0, r4
 80124e6:	f001 fdff 	bl	80140e8 <uxr_serialize_CREATE_CLIENT_Payload>
 80124ea:	b009      	add	sp, #36	@ 0x24
 80124ec:	bd30      	pop	{r4, r5, pc}
 80124ee:	bf00      	nop
 80124f0:	08018b74 	.word	0x08018b74

080124f4 <uxr_buffer_delete_session>:
 80124f4:	4a0c      	ldr	r2, [pc, #48]	@ (8012528 <uxr_buffer_delete_session+0x34>)
 80124f6:	2302      	movs	r3, #2
 80124f8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80124fc:	b510      	push	{r4, lr}
 80124fe:	460c      	mov	r4, r1
 8012500:	b082      	sub	sp, #8
 8012502:	8911      	ldrh	r1, [r2, #8]
 8012504:	2204      	movs	r2, #4
 8012506:	80c3      	strh	r3, [r0, #6]
 8012508:	2300      	movs	r3, #0
 801250a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801250e:	4620      	mov	r0, r4
 8012510:	2103      	movs	r1, #3
 8012512:	f8ad c004 	strh.w	ip, [sp, #4]
 8012516:	f000 fe91 	bl	801323c <uxr_buffer_submessage_header>
 801251a:	a901      	add	r1, sp, #4
 801251c:	4620      	mov	r0, r4
 801251e:	f001 fe8b 	bl	8014238 <uxr_serialize_DELETE_Payload>
 8012522:	b002      	add	sp, #8
 8012524:	bd10      	pop	{r4, pc}
 8012526:	bf00      	nop
 8012528:	08018b74 	.word	0x08018b74

0801252c <uxr_read_create_session_status>:
 801252c:	b510      	push	{r4, lr}
 801252e:	460b      	mov	r3, r1
 8012530:	b088      	sub	sp, #32
 8012532:	4604      	mov	r4, r0
 8012534:	a901      	add	r1, sp, #4
 8012536:	4618      	mov	r0, r3
 8012538:	f001 fe8e 	bl	8014258 <uxr_deserialize_STATUS_AGENT_Payload>
 801253c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012540:	7163      	strb	r3, [r4, #5]
 8012542:	b008      	add	sp, #32
 8012544:	bd10      	pop	{r4, pc}
 8012546:	bf00      	nop

08012548 <uxr_read_delete_session_status>:
 8012548:	b510      	push	{r4, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	4604      	mov	r4, r0
 801254e:	4608      	mov	r0, r1
 8012550:	a902      	add	r1, sp, #8
 8012552:	f001 feb1 	bl	80142b8 <uxr_deserialize_STATUS_Payload>
 8012556:	88e3      	ldrh	r3, [r4, #6]
 8012558:	2b02      	cmp	r3, #2
 801255a:	d001      	beq.n	8012560 <uxr_read_delete_session_status+0x18>
 801255c:	b004      	add	sp, #16
 801255e:	bd10      	pop	{r4, pc}
 8012560:	f10d 000a 	add.w	r0, sp, #10
 8012564:	f7fe fee4 	bl	8011330 <uxr_object_id_from_raw>
 8012568:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801256c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012570:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012574:	b29b      	uxth	r3, r3
 8012576:	2b02      	cmp	r3, #2
 8012578:	d1f0      	bne.n	801255c <uxr_read_delete_session_status+0x14>
 801257a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801257e:	7163      	strb	r3, [r4, #5]
 8012580:	e7ec      	b.n	801255c <uxr_read_delete_session_status+0x14>
 8012582:	bf00      	nop

08012584 <uxr_stamp_create_session_header>:
 8012584:	b510      	push	{r4, lr}
 8012586:	2208      	movs	r2, #8
 8012588:	b08a      	sub	sp, #40	@ 0x28
 801258a:	4604      	mov	r4, r0
 801258c:	eb0d 0002 	add.w	r0, sp, r2
 8012590:	f7fe fc34 	bl	8010dfc <ucdr_init_buffer>
 8012594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012598:	2300      	movs	r3, #0
 801259a:	a802      	add	r0, sp, #8
 801259c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80125a0:	9400      	str	r4, [sp, #0]
 80125a2:	461a      	mov	r2, r3
 80125a4:	f001 f846 	bl	8013634 <uxr_serialize_message_header>
 80125a8:	b00a      	add	sp, #40	@ 0x28
 80125aa:	bd10      	pop	{r4, pc}

080125ac <uxr_stamp_session_header>:
 80125ac:	b530      	push	{r4, r5, lr}
 80125ae:	b08d      	sub	sp, #52	@ 0x34
 80125b0:	4604      	mov	r4, r0
 80125b2:	460d      	mov	r5, r1
 80125b4:	4619      	mov	r1, r3
 80125b6:	a804      	add	r0, sp, #16
 80125b8:	9203      	str	r2, [sp, #12]
 80125ba:	2208      	movs	r2, #8
 80125bc:	f7fe fc1e 	bl	8010dfc <ucdr_init_buffer>
 80125c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c4:	9b03      	ldr	r3, [sp, #12]
 80125c6:	462a      	mov	r2, r5
 80125c8:	a804      	add	r0, sp, #16
 80125ca:	9400      	str	r4, [sp, #0]
 80125cc:	f001 f832 	bl	8013634 <uxr_serialize_message_header>
 80125d0:	b00d      	add	sp, #52	@ 0x34
 80125d2:	bd30      	pop	{r4, r5, pc}

080125d4 <uxr_read_session_header>:
 80125d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d8:	4607      	mov	r7, r0
 80125da:	b084      	sub	sp, #16
 80125dc:	4608      	mov	r0, r1
 80125de:	460c      	mov	r4, r1
 80125e0:	4615      	mov	r5, r2
 80125e2:	461e      	mov	r6, r3
 80125e4:	f7fe fc3c 	bl	8010e60 <ucdr_buffer_remaining>
 80125e8:	2808      	cmp	r0, #8
 80125ea:	d803      	bhi.n	80125f4 <uxr_read_session_header+0x20>
 80125ec:	2000      	movs	r0, #0
 80125ee:	b004      	add	sp, #16
 80125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f4:	f10d 080c 	add.w	r8, sp, #12
 80125f8:	4633      	mov	r3, r6
 80125fa:	462a      	mov	r2, r5
 80125fc:	4620      	mov	r0, r4
 80125fe:	f10d 010b 	add.w	r1, sp, #11
 8012602:	f8cd 8000 	str.w	r8, [sp]
 8012606:	f001 f833 	bl	8013670 <uxr_deserialize_message_header>
 801260a:	783a      	ldrb	r2, [r7, #0]
 801260c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012610:	4293      	cmp	r3, r2
 8012612:	d1eb      	bne.n	80125ec <uxr_read_session_header+0x18>
 8012614:	061b      	lsls	r3, r3, #24
 8012616:	d41b      	bmi.n	8012650 <uxr_read_session_header+0x7c>
 8012618:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801261c:	787b      	ldrb	r3, [r7, #1]
 801261e:	429a      	cmp	r2, r3
 8012620:	d003      	beq.n	801262a <uxr_read_session_header+0x56>
 8012622:	2001      	movs	r0, #1
 8012624:	f080 0001 	eor.w	r0, r0, #1
 8012628:	e7e1      	b.n	80125ee <uxr_read_session_header+0x1a>
 801262a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801262e:	1cb8      	adds	r0, r7, #2
 8012630:	78bb      	ldrb	r3, [r7, #2]
 8012632:	429a      	cmp	r2, r3
 8012634:	d1f5      	bne.n	8012622 <uxr_read_session_header+0x4e>
 8012636:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801263a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801263e:	429a      	cmp	r2, r3
 8012640:	d1ef      	bne.n	8012622 <uxr_read_session_header+0x4e>
 8012642:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012646:	7843      	ldrb	r3, [r0, #1]
 8012648:	429a      	cmp	r2, r3
 801264a:	d1ea      	bne.n	8012622 <uxr_read_session_header+0x4e>
 801264c:	2000      	movs	r0, #0
 801264e:	e7e9      	b.n	8012624 <uxr_read_session_header+0x50>
 8012650:	2001      	movs	r0, #1
 8012652:	e7cc      	b.n	80125ee <uxr_read_session_header+0x1a>

08012654 <uxr_session_header_offset>:
 8012654:	f990 3000 	ldrsb.w	r3, [r0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	bfac      	ite	ge
 801265c:	2008      	movge	r0, #8
 801265e:	2004      	movlt	r0, #4
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop

08012664 <uxr_init_base_object_request>:
 8012664:	b510      	push	{r4, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801266c:	9101      	str	r1, [sp, #4]
 801266e:	88c3      	ldrh	r3, [r0, #6]
 8012670:	f1a3 010a 	sub.w	r1, r3, #10
 8012674:	b289      	uxth	r1, r1
 8012676:	42a1      	cmp	r1, r4
 8012678:	d80f      	bhi.n	801269a <uxr_init_base_object_request+0x36>
 801267a:	3301      	adds	r3, #1
 801267c:	b29c      	uxth	r4, r3
 801267e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8012682:	b2db      	uxtb	r3, r3
 8012684:	80c4      	strh	r4, [r0, #6]
 8012686:	1c91      	adds	r1, r2, #2
 8012688:	9801      	ldr	r0, [sp, #4]
 801268a:	f882 c000 	strb.w	ip, [r2]
 801268e:	7053      	strb	r3, [r2, #1]
 8012690:	f7fe fe62 	bl	8011358 <uxr_object_id_to_raw>
 8012694:	4620      	mov	r0, r4
 8012696:	b002      	add	sp, #8
 8012698:	bd10      	pop	{r4, pc}
 801269a:	230a      	movs	r3, #10
 801269c:	f04f 0c00 	mov.w	ip, #0
 80126a0:	461c      	mov	r4, r3
 80126a2:	e7ef      	b.n	8012684 <uxr_init_base_object_request+0x20>

080126a4 <uxr_parse_base_object_request>:
 80126a4:	b570      	push	{r4, r5, r6, lr}
 80126a6:	4604      	mov	r4, r0
 80126a8:	3002      	adds	r0, #2
 80126aa:	460d      	mov	r5, r1
 80126ac:	4616      	mov	r6, r2
 80126ae:	f7fe fe3f 	bl	8011330 <uxr_object_id_from_raw>
 80126b2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80126b6:	8028      	strh	r0, [r5, #0]
 80126b8:	806b      	strh	r3, [r5, #2]
 80126ba:	7822      	ldrb	r2, [r4, #0]
 80126bc:	7863      	ldrb	r3, [r4, #1]
 80126be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80126c2:	8033      	strh	r3, [r6, #0]
 80126c4:	bd70      	pop	{r4, r5, r6, pc}
 80126c6:	bf00      	nop

080126c8 <uxr_init_framing_io>:
 80126c8:	2300      	movs	r3, #0
 80126ca:	7041      	strb	r1, [r0, #1]
 80126cc:	7003      	strb	r3, [r0, #0]
 80126ce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop

080126d4 <uxr_write_framed_msg>:
 80126d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	4617      	mov	r7, r2
 80126da:	7842      	ldrb	r2, [r0, #1]
 80126dc:	460e      	mov	r6, r1
 80126de:	b083      	sub	sp, #12
 80126e0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80126e4:	469b      	mov	fp, r3
 80126e6:	237e      	movs	r3, #126	@ 0x7e
 80126e8:	4604      	mov	r4, r0
 80126ea:	2901      	cmp	r1, #1
 80126ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80126f0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80126f4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80126f8:	f240 8115 	bls.w	8012926 <uxr_write_framed_msg+0x252>
 80126fc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012700:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012704:	2202      	movs	r2, #2
 8012706:	2901      	cmp	r1, #1
 8012708:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801270c:	d952      	bls.n	80127b4 <uxr_write_framed_msg+0xe0>
 801270e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012710:	2103      	movs	r1, #3
 8012712:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8012716:	b2dd      	uxtb	r5, r3
 8012718:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801271c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8012720:	2a01      	cmp	r2, #1
 8012722:	d95c      	bls.n	80127de <uxr_write_framed_msg+0x10a>
 8012724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012726:	1862      	adds	r2, r4, r1
 8012728:	3101      	adds	r1, #1
 801272a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801272e:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8012732:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8012736:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801273a:	2a01      	cmp	r2, #1
 801273c:	d961      	bls.n	8012802 <uxr_write_framed_msg+0x12e>
 801273e:	1c4a      	adds	r2, r1, #1
 8012740:	4421      	add	r1, r4
 8012742:	b2d2      	uxtb	r2, r2
 8012744:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012748:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801274c:	2b00      	cmp	r3, #0
 801274e:	d06a      	beq.n	8012826 <uxr_write_framed_msg+0x152>
 8012750:	f04f 0800 	mov.w	r8, #0
 8012754:	46c1      	mov	r9, r8
 8012756:	e016      	b.n	8012786 <uxr_write_framed_msg+0xb2>
 8012758:	2a29      	cmp	r2, #41	@ 0x29
 801275a:	d868      	bhi.n	801282e <uxr_write_framed_msg+0x15a>
 801275c:	18a0      	adds	r0, r4, r2
 801275e:	3201      	adds	r2, #1
 8012760:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012764:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012768:	ea88 0101 	eor.w	r1, r8, r1
 801276c:	4b7d      	ldr	r3, [pc, #500]	@ (8012964 <uxr_write_framed_msg+0x290>)
 801276e:	f109 0901 	add.w	r9, r9, #1
 8012772:	b2c9      	uxtb	r1, r1
 8012774:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8012778:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801277c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801277e:	454b      	cmp	r3, r9
 8012780:	d969      	bls.n	8012856 <uxr_write_framed_msg+0x182>
 8012782:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012786:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801278a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801278e:	2801      	cmp	r0, #1
 8012790:	d8e2      	bhi.n	8012758 <uxr_write_framed_msg+0x84>
 8012792:	1c50      	adds	r0, r2, #1
 8012794:	b2c0      	uxtb	r0, r0
 8012796:	2829      	cmp	r0, #41	@ 0x29
 8012798:	d849      	bhi.n	801282e <uxr_write_framed_msg+0x15a>
 801279a:	18a0      	adds	r0, r4, r2
 801279c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80127a0:	3202      	adds	r2, #2
 80127a2:	f081 0520 	eor.w	r5, r1, #32
 80127a6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80127aa:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80127ae:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127b2:	e7d9      	b.n	8012768 <uxr_write_framed_msg+0x94>
 80127b4:	2104      	movs	r1, #4
 80127b6:	f04f 0c03 	mov.w	ip, #3
 80127ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127bc:	4422      	add	r2, r4
 80127be:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80127c2:	44a4      	add	ip, r4
 80127c4:	b2dd      	uxtb	r5, r3
 80127c6:	f080 0020 	eor.w	r0, r0, #32
 80127ca:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80127ce:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80127d2:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80127d6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80127da:	2a01      	cmp	r2, #1
 80127dc:	d8a2      	bhi.n	8012724 <uxr_write_framed_msg+0x50>
 80127de:	1862      	adds	r2, r4, r1
 80127e0:	207d      	movs	r0, #125	@ 0x7d
 80127e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127e4:	f085 0520 	eor.w	r5, r5, #32
 80127e8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80127ec:	3102      	adds	r1, #2
 80127ee:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80127f2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80127f6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80127fa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80127fe:	2a01      	cmp	r2, #1
 8012800:	d89d      	bhi.n	801273e <uxr_write_framed_msg+0x6a>
 8012802:	1c4d      	adds	r5, r1, #1
 8012804:	1c8a      	adds	r2, r1, #2
 8012806:	f080 0020 	eor.w	r0, r0, #32
 801280a:	4421      	add	r1, r4
 801280c:	fa54 f585 	uxtab	r5, r4, r5
 8012810:	b2d2      	uxtb	r2, r2
 8012812:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012816:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801281a:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801281e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012822:	2b00      	cmp	r3, #0
 8012824:	d194      	bne.n	8012750 <uxr_write_framed_msg+0x7c>
 8012826:	4619      	mov	r1, r3
 8012828:	f8ad 3004 	strh.w	r3, [sp, #4]
 801282c:	e019      	b.n	8012862 <uxr_write_framed_msg+0x18e>
 801282e:	2500      	movs	r5, #0
 8012830:	e000      	b.n	8012834 <uxr_write_framed_msg+0x160>
 8012832:	b160      	cbz	r0, 801284e <uxr_write_framed_msg+0x17a>
 8012834:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012838:	1b52      	subs	r2, r2, r5
 801283a:	4653      	mov	r3, sl
 801283c:	4638      	mov	r0, r7
 801283e:	4421      	add	r1, r4
 8012840:	47b0      	blx	r6
 8012842:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012846:	4405      	add	r5, r0
 8012848:	4295      	cmp	r5, r2
 801284a:	d3f2      	bcc.n	8012832 <uxr_write_framed_msg+0x15e>
 801284c:	d066      	beq.n	801291c <uxr_write_framed_msg+0x248>
 801284e:	2000      	movs	r0, #0
 8012850:	b003      	add	sp, #12
 8012852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012856:	fa5f f188 	uxtb.w	r1, r8
 801285a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801285e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8012862:	f04f 0900 	mov.w	r9, #0
 8012866:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801286a:	46c8      	mov	r8, r9
 801286c:	e013      	b.n	8012896 <uxr_write_framed_msg+0x1c2>
 801286e:	2a29      	cmp	r2, #41	@ 0x29
 8012870:	d824      	bhi.n	80128bc <uxr_write_framed_msg+0x1e8>
 8012872:	18a3      	adds	r3, r4, r2
 8012874:	3201      	adds	r2, #1
 8012876:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801287a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801287e:	f109 0901 	add.w	r9, r9, #1
 8012882:	f1b9 0f02 	cmp.w	r9, #2
 8012886:	d02d      	beq.n	80128e4 <uxr_write_framed_msg+0x210>
 8012888:	f109 0308 	add.w	r3, r9, #8
 801288c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012890:	446b      	add	r3, sp
 8012892:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8012896:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801289a:	2b01      	cmp	r3, #1
 801289c:	d8e7      	bhi.n	801286e <uxr_write_framed_msg+0x19a>
 801289e:	1c53      	adds	r3, r2, #1
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	2b29      	cmp	r3, #41	@ 0x29
 80128a4:	d80a      	bhi.n	80128bc <uxr_write_framed_msg+0x1e8>
 80128a6:	18a3      	adds	r3, r4, r2
 80128a8:	f081 0120 	eor.w	r1, r1, #32
 80128ac:	3202      	adds	r2, #2
 80128ae:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80128b2:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80128b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128ba:	e7e0      	b.n	801287e <uxr_write_framed_msg+0x1aa>
 80128bc:	2500      	movs	r5, #0
 80128be:	e001      	b.n	80128c4 <uxr_write_framed_msg+0x1f0>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d0c4      	beq.n	801284e <uxr_write_framed_msg+0x17a>
 80128c4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128c8:	1b52      	subs	r2, r2, r5
 80128ca:	4653      	mov	r3, sl
 80128cc:	4638      	mov	r0, r7
 80128ce:	4421      	add	r1, r4
 80128d0:	47b0      	blx	r6
 80128d2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80128d6:	4405      	add	r5, r0
 80128d8:	4295      	cmp	r5, r2
 80128da:	d3f1      	bcc.n	80128c0 <uxr_write_framed_msg+0x1ec>
 80128dc:	d1b7      	bne.n	801284e <uxr_write_framed_msg+0x17a>
 80128de:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80128e2:	e7d1      	b.n	8012888 <uxr_write_framed_msg+0x1b4>
 80128e4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80128e8:	b19a      	cbz	r2, 8012912 <uxr_write_framed_msg+0x23e>
 80128ea:	2500      	movs	r5, #0
 80128ec:	e001      	b.n	80128f2 <uxr_write_framed_msg+0x21e>
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d0ad      	beq.n	801284e <uxr_write_framed_msg+0x17a>
 80128f2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128f6:	1b52      	subs	r2, r2, r5
 80128f8:	4653      	mov	r3, sl
 80128fa:	4638      	mov	r0, r7
 80128fc:	4421      	add	r1, r4
 80128fe:	47b0      	blx	r6
 8012900:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012904:	4405      	add	r5, r0
 8012906:	4295      	cmp	r5, r2
 8012908:	d3f1      	bcc.n	80128ee <uxr_write_framed_msg+0x21a>
 801290a:	d1a0      	bne.n	801284e <uxr_write_framed_msg+0x17a>
 801290c:	2300      	movs	r3, #0
 801290e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012914:	b298      	uxth	r0, r3
 8012916:	b003      	add	sp, #12
 8012918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801291c:	f04f 0300 	mov.w	r3, #0
 8012920:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012924:	e72a      	b.n	801277c <uxr_write_framed_msg+0xa8>
 8012926:	217d      	movs	r1, #125	@ 0x7d
 8012928:	f082 0220 	eor.w	r2, r2, #32
 801292c:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012930:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012934:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012938:	2203      	movs	r2, #3
 801293a:	2901      	cmp	r1, #1
 801293c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012940:	d803      	bhi.n	801294a <uxr_write_framed_msg+0x276>
 8012942:	2105      	movs	r1, #5
 8012944:	f04f 0c04 	mov.w	ip, #4
 8012948:	e737      	b.n	80127ba <uxr_write_framed_msg+0xe6>
 801294a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801294c:	2104      	movs	r1, #4
 801294e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012952:	b2dd      	uxtb	r5, r3
 8012954:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8012958:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801295c:	2a01      	cmp	r2, #1
 801295e:	f63f aee1 	bhi.w	8012724 <uxr_write_framed_msg+0x50>
 8012962:	e73c      	b.n	80127de <uxr_write_framed_msg+0x10a>
 8012964:	08018e48 	.word	0x08018e48

08012968 <uxr_framing_read_transport>:
 8012968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296c:	4604      	mov	r4, r0
 801296e:	b085      	sub	sp, #20
 8012970:	4692      	mov	sl, r2
 8012972:	4689      	mov	r9, r1
 8012974:	461d      	mov	r5, r3
 8012976:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8012978:	f000 fca6 	bl	80132c8 <uxr_millis>
 801297c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8012980:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8012984:	4680      	mov	r8, r0
 8012986:	42ba      	cmp	r2, r7
 8012988:	d05f      	beq.n	8012a4a <uxr_framing_read_transport+0xe2>
 801298a:	d817      	bhi.n	80129bc <uxr_framing_read_transport+0x54>
 801298c:	3f01      	subs	r7, #1
 801298e:	1aba      	subs	r2, r7, r2
 8012990:	2700      	movs	r7, #0
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	42b2      	cmp	r2, r6
 8012996:	d81a      	bhi.n	80129ce <uxr_framing_read_transport+0x66>
 8012998:	19d3      	adds	r3, r2, r7
 801299a:	42b3      	cmp	r3, r6
 801299c:	d852      	bhi.n	8012a44 <uxr_framing_read_transport+0xdc>
 801299e:	b9d2      	cbnz	r2, 80129d6 <uxr_framing_read_transport+0x6e>
 80129a0:	2600      	movs	r6, #0
 80129a2:	f000 fc91 	bl	80132c8 <uxr_millis>
 80129a6:	682b      	ldr	r3, [r5, #0]
 80129a8:	eba0 0008 	sub.w	r0, r0, r8
 80129ac:	1a1b      	subs	r3, r3, r0
 80129ae:	4630      	mov	r0, r6
 80129b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80129b4:	602b      	str	r3, [r5, #0]
 80129b6:	b005      	add	sp, #20
 80129b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129bc:	2f00      	cmp	r7, #0
 80129be:	d060      	beq.n	8012a82 <uxr_framing_read_transport+0x11a>
 80129c0:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80129c4:	3f01      	subs	r7, #1
 80129c6:	b2d2      	uxtb	r2, r2
 80129c8:	b2ff      	uxtb	r7, r7
 80129ca:	42b2      	cmp	r2, r6
 80129cc:	d9e4      	bls.n	8012998 <uxr_framing_read_transport+0x30>
 80129ce:	b2f2      	uxtb	r2, r6
 80129d0:	2700      	movs	r7, #0
 80129d2:	2a00      	cmp	r2, #0
 80129d4:	d0e4      	beq.n	80129a0 <uxr_framing_read_transport+0x38>
 80129d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129d8:	4650      	mov	r0, sl
 80129da:	9203      	str	r2, [sp, #12]
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129e2:	682b      	ldr	r3, [r5, #0]
 80129e4:	3102      	adds	r1, #2
 80129e6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8012a8c <uxr_framing_read_transport+0x124>
 80129ea:	4421      	add	r1, r4
 80129ec:	47c8      	blx	r9
 80129ee:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80129f2:	4606      	mov	r6, r0
 80129f4:	4403      	add	r3, r0
 80129f6:	0859      	lsrs	r1, r3, #1
 80129f8:	fbab 2101 	umull	r2, r1, fp, r1
 80129fc:	222a      	movs	r2, #42	@ 0x2a
 80129fe:	0889      	lsrs	r1, r1, #2
 8012a00:	fb02 3111 	mls	r1, r2, r1, r3
 8012a04:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d0c9      	beq.n	80129a0 <uxr_framing_read_transport+0x38>
 8012a0c:	9a03      	ldr	r2, [sp, #12]
 8012a0e:	4290      	cmp	r0, r2
 8012a10:	d1c7      	bne.n	80129a2 <uxr_framing_read_transport+0x3a>
 8012a12:	2f00      	cmp	r7, #0
 8012a14:	d0c5      	beq.n	80129a2 <uxr_framing_read_transport+0x3a>
 8012a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a18:	3102      	adds	r1, #2
 8012a1a:	463a      	mov	r2, r7
 8012a1c:	4650      	mov	r0, sl
 8012a1e:	4421      	add	r1, r4
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	2300      	movs	r3, #0
 8012a24:	47c8      	blx	r9
 8012a26:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8012a2a:	4406      	add	r6, r0
 8012a2c:	1813      	adds	r3, r2, r0
 8012a2e:	085a      	lsrs	r2, r3, #1
 8012a30:	fbab 1b02 	umull	r1, fp, fp, r2
 8012a34:	222a      	movs	r2, #42	@ 0x2a
 8012a36:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8012a3a:	fb02 331b 	mls	r3, r2, fp, r3
 8012a3e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012a42:	e7ae      	b.n	80129a2 <uxr_framing_read_transport+0x3a>
 8012a44:	1ab6      	subs	r6, r6, r2
 8012a46:	b2f7      	uxtb	r7, r6
 8012a48:	e7a9      	b.n	801299e <uxr_framing_read_transport+0x36>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	2e28      	cmp	r6, #40	@ 0x28
 8012a4e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8012a50:	d9bd      	bls.n	80129ce <uxr_framing_read_transport+0x66>
 8012a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a54:	2229      	movs	r2, #41	@ 0x29
 8012a56:	1ca1      	adds	r1, r4, #2
 8012a58:	4650      	mov	r0, sl
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	682b      	ldr	r3, [r5, #0]
 8012a5e:	47c8      	blx	r9
 8012a60:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a64:	4606      	mov	r6, r0
 8012a66:	212a      	movs	r1, #42	@ 0x2a
 8012a68:	4403      	add	r3, r0
 8012a6a:	4808      	ldr	r0, [pc, #32]	@ (8012a8c <uxr_framing_read_transport+0x124>)
 8012a6c:	085a      	lsrs	r2, r3, #1
 8012a6e:	fba0 0202 	umull	r0, r2, r0, r2
 8012a72:	0892      	lsrs	r2, r2, #2
 8012a74:	fb01 3312 	mls	r3, r1, r2, r3
 8012a78:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012a7c:	2e00      	cmp	r6, #0
 8012a7e:	d08f      	beq.n	80129a0 <uxr_framing_read_transport+0x38>
 8012a80:	e78f      	b.n	80129a2 <uxr_framing_read_transport+0x3a>
 8012a82:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8012a86:	b2d2      	uxtb	r2, r2
 8012a88:	e784      	b.n	8012994 <uxr_framing_read_transport+0x2c>
 8012a8a:	bf00      	nop
 8012a8c:	30c30c31 	.word	0x30c30c31

08012a90 <uxr_read_framed_msg>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	461e      	mov	r6, r3
 8012a96:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012a9a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	4688      	mov	r8, r1
 8012aa4:	429d      	cmp	r5, r3
 8012aa6:	4691      	mov	r9, r2
 8012aa8:	f000 818c 	beq.w	8012dc4 <uxr_read_framed_msg+0x334>
 8012aac:	7823      	ldrb	r3, [r4, #0]
 8012aae:	4dc3      	ldr	r5, [pc, #780]	@ (8012dbc <uxr_read_framed_msg+0x32c>)
 8012ab0:	4fc3      	ldr	r7, [pc, #780]	@ (8012dc0 <uxr_read_framed_msg+0x330>)
 8012ab2:	2b07      	cmp	r3, #7
 8012ab4:	d8fd      	bhi.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012ab6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012aba:	011c      	.short	0x011c
 8012abc:	00d900fb 	.word	0x00d900fb
 8012ac0:	008f00ba 	.word	0x008f00ba
 8012ac4:	00320051 	.word	0x00320051
 8012ac8:	0008      	.short	0x0008
 8012aca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012ace:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012ad2:	4299      	cmp	r1, r3
 8012ad4:	f000 814d 	beq.w	8012d72 <uxr_read_framed_msg+0x2e2>
 8012ad8:	18e2      	adds	r2, r4, r3
 8012ada:	7892      	ldrb	r2, [r2, #2]
 8012adc:	2a7d      	cmp	r2, #125	@ 0x7d
 8012ade:	f000 81b8 	beq.w	8012e52 <uxr_read_framed_msg+0x3c2>
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	212a      	movs	r1, #42	@ 0x2a
 8012ae6:	2a7e      	cmp	r2, #126	@ 0x7e
 8012ae8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8012aec:	fba5 c000 	umull	ip, r0, r5, r0
 8012af0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8012af4:	fb01 3310 	mls	r3, r1, r0, r3
 8012af8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012afc:	f000 8257 	beq.w	8012fae <uxr_read_framed_msg+0x51e>
 8012b00:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012b02:	2000      	movs	r0, #0
 8012b04:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012b06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012b0a:	7020      	strb	r0, [r4, #0]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	4299      	cmp	r1, r3
 8012b10:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012b12:	f000 8178 	beq.w	8012e06 <uxr_read_framed_msg+0x376>
 8012b16:	2000      	movs	r0, #0
 8012b18:	b003      	add	sp, #12
 8012b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012b22:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012b26:	4298      	cmp	r0, r3
 8012b28:	f000 8132 	beq.w	8012d90 <uxr_read_framed_msg+0x300>
 8012b2c:	18e2      	adds	r2, r4, r3
 8012b2e:	7891      	ldrb	r1, [r2, #2]
 8012b30:	297d      	cmp	r1, #125	@ 0x7d
 8012b32:	f000 8170 	beq.w	8012e16 <uxr_read_framed_msg+0x386>
 8012b36:	3301      	adds	r3, #1
 8012b38:	202a      	movs	r0, #42	@ 0x2a
 8012b3a:	297e      	cmp	r1, #126	@ 0x7e
 8012b3c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012b40:	fba5 c202 	umull	ip, r2, r5, r2
 8012b44:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012b48:	fb00 3312 	mls	r3, r0, r2, r3
 8012b4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b50:	f000 821d 	beq.w	8012f8e <uxr_read_framed_msg+0x4fe>
 8012b54:	2307      	movs	r3, #7
 8012b56:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8012b58:	7023      	strb	r3, [r4, #0]
 8012b5a:	e7aa      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012b5c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b5e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b62:	459e      	cmp	lr, r3
 8012b64:	d827      	bhi.n	8012bb6 <uxr_read_framed_msg+0x126>
 8012b66:	e032      	b.n	8012bce <uxr_read_framed_msg+0x13e>
 8012b68:	fba5 b101 	umull	fp, r1, r5, r1
 8012b6c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8012b70:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8012b74:	0889      	lsrs	r1, r1, #2
 8012b76:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012b7a:	fb0b 0111 	mls	r1, fp, r1, r0
 8012b7e:	f000 80d4 	beq.w	8012d2a <uxr_read_framed_msg+0x29a>
 8012b82:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012b86:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8012b8a:	f000 80cb 	beq.w	8012d24 <uxr_read_framed_msg+0x294>
 8012b8e:	f806 c003 	strb.w	ip, [r6, r3]
 8012b92:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8012b94:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b96:	ea80 010c 	eor.w	r1, r0, ip
 8012b9a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	b2c9      	uxtb	r1, r1
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8012ba8:	4573      	cmp	r3, lr
 8012baa:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012bac:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012bb0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012bb2:	f080 811d 	bcs.w	8012df0 <uxr_read_framed_msg+0x360>
 8012bb6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012bba:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012bbe:	1c50      	adds	r0, r2, #1
 8012bc0:	eb04 0c02 	add.w	ip, r4, r2
 8012bc4:	4592      	cmp	sl, r2
 8012bc6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8012bca:	d1cd      	bne.n	8012b68 <uxr_read_framed_msg+0xd8>
 8012bcc:	459e      	cmp	lr, r3
 8012bce:	f040 8114 	bne.w	8012dfa <uxr_read_framed_msg+0x36a>
 8012bd2:	2306      	movs	r3, #6
 8012bd4:	7023      	strb	r3, [r4, #0]
 8012bd6:	e76c      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012bd8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012bdc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012be0:	4298      	cmp	r0, r3
 8012be2:	f000 80c6 	beq.w	8012d72 <uxr_read_framed_msg+0x2e2>
 8012be6:	18e2      	adds	r2, r4, r3
 8012be8:	7891      	ldrb	r1, [r2, #2]
 8012bea:	297d      	cmp	r1, #125	@ 0x7d
 8012bec:	f000 8193 	beq.w	8012f16 <uxr_read_framed_msg+0x486>
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	202a      	movs	r0, #42	@ 0x2a
 8012bf4:	297e      	cmp	r1, #126	@ 0x7e
 8012bf6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012bfa:	fba5 c202 	umull	ip, r2, r5, r2
 8012bfe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012c02:	fb00 3312 	mls	r3, r0, r2, r3
 8012c06:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c0a:	f000 81d0 	beq.w	8012fae <uxr_read_framed_msg+0x51e>
 8012c0e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012c10:	2000      	movs	r0, #0
 8012c12:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012c16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c18:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012c1e:	428b      	cmp	r3, r1
 8012c20:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012c22:	f240 80e2 	bls.w	8012dea <uxr_read_framed_msg+0x35a>
 8012c26:	7020      	strb	r0, [r4, #0]
 8012c28:	b003      	add	sp, #12
 8012c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c32:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c36:	4298      	cmp	r0, r3
 8012c38:	f000 80aa 	beq.w	8012d90 <uxr_read_framed_msg+0x300>
 8012c3c:	18e2      	adds	r2, r4, r3
 8012c3e:	7891      	ldrb	r1, [r2, #2]
 8012c40:	297d      	cmp	r1, #125	@ 0x7d
 8012c42:	f000 8186 	beq.w	8012f52 <uxr_read_framed_msg+0x4c2>
 8012c46:	3301      	adds	r3, #1
 8012c48:	202a      	movs	r0, #42	@ 0x2a
 8012c4a:	297e      	cmp	r1, #126	@ 0x7e
 8012c4c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012c50:	fba5 c202 	umull	ip, r2, r5, r2
 8012c54:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012c58:	fb00 3312 	mls	r3, r0, r2, r3
 8012c5c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c60:	f000 8195 	beq.w	8012f8e <uxr_read_framed_msg+0x4fe>
 8012c64:	2304      	movs	r3, #4
 8012c66:	8621      	strh	r1, [r4, #48]	@ 0x30
 8012c68:	7023      	strb	r3, [r4, #0]
 8012c6a:	e722      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012c6c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c70:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012c74:	4290      	cmp	r0, r2
 8012c76:	f000 80b4 	beq.w	8012de2 <uxr_read_framed_msg+0x352>
 8012c7a:	18a3      	adds	r3, r4, r2
 8012c7c:	7899      	ldrb	r1, [r3, #2]
 8012c7e:	297d      	cmp	r1, #125	@ 0x7d
 8012c80:	f000 8107 	beq.w	8012e92 <uxr_read_framed_msg+0x402>
 8012c84:	3201      	adds	r2, #1
 8012c86:	232a      	movs	r3, #42	@ 0x2a
 8012c88:	297e      	cmp	r1, #126	@ 0x7e
 8012c8a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8012c8e:	fba5 c000 	umull	ip, r0, r5, r0
 8012c92:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8012c96:	fb03 2210 	mls	r2, r3, r0, r2
 8012c9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c9e:	f000 818a 	beq.w	8012fb6 <uxr_read_framed_msg+0x526>
 8012ca2:	7863      	ldrb	r3, [r4, #1]
 8012ca4:	428b      	cmp	r3, r1
 8012ca6:	bf0c      	ite	eq
 8012ca8:	2303      	moveq	r3, #3
 8012caa:	2300      	movne	r3, #0
 8012cac:	7023      	strb	r3, [r4, #0]
 8012cae:	e700      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012cb6:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8012cba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012cbe:	4299      	cmp	r1, r3
 8012cc0:	d06a      	beq.n	8012d98 <uxr_read_framed_msg+0x308>
 8012cc2:	18e2      	adds	r2, r4, r3
 8012cc4:	7890      	ldrb	r0, [r2, #2]
 8012cc6:	287d      	cmp	r0, #125	@ 0x7d
 8012cc8:	f000 8100 	beq.w	8012ecc <uxr_read_framed_msg+0x43c>
 8012ccc:	3301      	adds	r3, #1
 8012cce:	212a      	movs	r1, #42	@ 0x2a
 8012cd0:	287e      	cmp	r0, #126	@ 0x7e
 8012cd2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012cd6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8012cda:	fba5 c202 	umull	ip, r2, r5, r2
 8012cde:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012ce2:	fb01 3312 	mls	r3, r1, r2, r3
 8012ce6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012cea:	d055      	beq.n	8012d98 <uxr_read_framed_msg+0x308>
 8012cec:	2302      	movs	r3, #2
 8012cee:	7023      	strb	r3, [r4, #0]
 8012cf0:	e6df      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012cf2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8012cf6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012cfa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	459c      	cmp	ip, r3
 8012d02:	eb04 0103 	add.w	r1, r4, r3
 8012d06:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8012d0a:	f43f af04 	beq.w	8012b16 <uxr_read_framed_msg+0x86>
 8012d0e:	fba5 0303 	umull	r0, r3, r5, r3
 8012d12:	7889      	ldrb	r1, [r1, #2]
 8012d14:	089b      	lsrs	r3, r3, #2
 8012d16:	297e      	cmp	r1, #126	@ 0x7e
 8012d18:	fb0e 2313 	mls	r3, lr, r3, r2
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d22:	d1ec      	bne.n	8012cfe <uxr_read_framed_msg+0x26e>
 8012d24:	2301      	movs	r3, #1
 8012d26:	7023      	strb	r3, [r4, #0]
 8012d28:	e6c3      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012d2a:	1c50      	adds	r0, r2, #1
 8012d2c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8012d30:	3202      	adds	r2, #2
 8012d32:	0841      	lsrs	r1, r0, #1
 8012d34:	fba5 c101 	umull	ip, r1, r5, r1
 8012d38:	0889      	lsrs	r1, r1, #2
 8012d3a:	fb0b 0111 	mls	r1, fp, r1, r0
 8012d3e:	1860      	adds	r0, r4, r1
 8012d40:	b2c9      	uxtb	r1, r1
 8012d42:	458a      	cmp	sl, r1
 8012d44:	f43f af42 	beq.w	8012bcc <uxr_read_framed_msg+0x13c>
 8012d48:	0851      	lsrs	r1, r2, #1
 8012d4a:	7880      	ldrb	r0, [r0, #2]
 8012d4c:	fba5 a101 	umull	sl, r1, r5, r1
 8012d50:	287e      	cmp	r0, #126	@ 0x7e
 8012d52:	f080 0c20 	eor.w	ip, r0, #32
 8012d56:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8012d5a:	fb0b 2211 	mls	r2, fp, r1, r2
 8012d5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012d62:	f47f af14 	bne.w	8012b8e <uxr_read_framed_msg+0xfe>
 8012d66:	459e      	cmp	lr, r3
 8012d68:	f43f af33 	beq.w	8012bd2 <uxr_read_framed_msg+0x142>
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	7023      	strb	r3, [r4, #0]
 8012d70:	e69f      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012d72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	2301      	movs	r3, #1
 8012d78:	9301      	str	r3, [sp, #4]
 8012d7a:	464a      	mov	r2, r9
 8012d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d7e:	4641      	mov	r1, r8
 8012d80:	4620      	mov	r0, r4
 8012d82:	f7ff fdf1 	bl	8012968 <uxr_framing_read_transport>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	f43f aec5 	beq.w	8012b16 <uxr_read_framed_msg+0x86>
 8012d8c:	7823      	ldrb	r3, [r4, #0]
 8012d8e:	e690      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	2302      	movs	r3, #2
 8012d96:	e7ef      	b.n	8012d78 <uxr_read_framed_msg+0x2e8>
 8012d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d9a:	464a      	mov	r2, r9
 8012d9c:	4641      	mov	r1, r8
 8012d9e:	4620      	mov	r0, r4
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	2304      	movs	r3, #4
 8012da4:	9301      	str	r3, [sp, #4]
 8012da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012da8:	f7ff fdde 	bl	8012968 <uxr_framing_read_transport>
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d1ed      	bne.n	8012d8c <uxr_read_framed_msg+0x2fc>
 8012db0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012db4:	2b7e      	cmp	r3, #126	@ 0x7e
 8012db6:	d0e9      	beq.n	8012d8c <uxr_read_framed_msg+0x2fc>
 8012db8:	e6ad      	b.n	8012b16 <uxr_read_framed_msg+0x86>
 8012dba:	bf00      	nop
 8012dbc:	30c30c31 	.word	0x30c30c31
 8012dc0:	08018e48 	.word	0x08018e48
 8012dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	2305      	movs	r3, #5
 8012dca:	9301      	str	r3, [sp, #4]
 8012dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dce:	f7ff fdcb 	bl	8012968 <uxr_framing_read_transport>
 8012dd2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012dd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	f43f ae9b 	beq.w	8012b16 <uxr_read_framed_msg+0x86>
 8012de0:	e664      	b.n	8012aac <uxr_read_framed_msg+0x1c>
 8012de2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	2303      	movs	r3, #3
 8012de8:	e7c6      	b.n	8012d78 <uxr_read_framed_msg+0x2e8>
 8012dea:	2305      	movs	r3, #5
 8012dec:	7023      	strb	r3, [r4, #0]
 8012dee:	e660      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012df0:	f43f aeef 	beq.w	8012bd2 <uxr_read_framed_msg+0x142>
 8012df4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012df8:	d094      	beq.n	8012d24 <uxr_read_framed_msg+0x294>
 8012dfa:	ebae 0303 	sub.w	r3, lr, r3
 8012dfe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e00:	3302      	adds	r3, #2
 8012e02:	9200      	str	r2, [sp, #0]
 8012e04:	e7b8      	b.n	8012d78 <uxr_read_framed_msg+0x2e8>
 8012e06:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012e0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e0c:	7013      	strb	r3, [r2, #0]
 8012e0e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012e10:	b003      	add	sp, #12
 8012e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e16:	1c59      	adds	r1, r3, #1
 8012e18:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e1c:	084a      	lsrs	r2, r1, #1
 8012e1e:	fba5 e202 	umull	lr, r2, r5, r2
 8012e22:	0892      	lsrs	r2, r2, #2
 8012e24:	fb0c 1212 	mls	r2, ip, r2, r1
 8012e28:	b2d1      	uxtb	r1, r2
 8012e2a:	4288      	cmp	r0, r1
 8012e2c:	d0b0      	beq.n	8012d90 <uxr_read_framed_msg+0x300>
 8012e2e:	3302      	adds	r3, #2
 8012e30:	4422      	add	r2, r4
 8012e32:	7891      	ldrb	r1, [r2, #2]
 8012e34:	085a      	lsrs	r2, r3, #1
 8012e36:	fba5 0202 	umull	r0, r2, r5, r2
 8012e3a:	297e      	cmp	r1, #126	@ 0x7e
 8012e3c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012e40:	fb0c 3312 	mls	r3, ip, r2, r3
 8012e44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e48:	f000 80a1 	beq.w	8012f8e <uxr_read_framed_msg+0x4fe>
 8012e4c:	f081 0120 	eor.w	r1, r1, #32
 8012e50:	e680      	b.n	8012b54 <uxr_read_framed_msg+0xc4>
 8012e52:	f103 0c01 	add.w	ip, r3, #1
 8012e56:	202a      	movs	r0, #42	@ 0x2a
 8012e58:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e5c:	fba5 e202 	umull	lr, r2, r5, r2
 8012e60:	0892      	lsrs	r2, r2, #2
 8012e62:	fb00 c212 	mls	r2, r0, r2, ip
 8012e66:	fa5f fc82 	uxtb.w	ip, r2
 8012e6a:	4561      	cmp	r1, ip
 8012e6c:	d081      	beq.n	8012d72 <uxr_read_framed_msg+0x2e2>
 8012e6e:	3302      	adds	r3, #2
 8012e70:	4422      	add	r2, r4
 8012e72:	0859      	lsrs	r1, r3, #1
 8012e74:	7892      	ldrb	r2, [r2, #2]
 8012e76:	fba5 c101 	umull	ip, r1, r5, r1
 8012e7a:	2a7e      	cmp	r2, #126	@ 0x7e
 8012e7c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8012e80:	fb00 3311 	mls	r3, r0, r1, r3
 8012e84:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e88:	f000 8091 	beq.w	8012fae <uxr_read_framed_msg+0x51e>
 8012e8c:	f082 0220 	eor.w	r2, r2, #32
 8012e90:	e636      	b.n	8012b00 <uxr_read_framed_msg+0x70>
 8012e92:	1c51      	adds	r1, r2, #1
 8012e94:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e98:	084b      	lsrs	r3, r1, #1
 8012e9a:	fba5 e303 	umull	lr, r3, r5, r3
 8012e9e:	089b      	lsrs	r3, r3, #2
 8012ea0:	fb0c 1313 	mls	r3, ip, r3, r1
 8012ea4:	b2d9      	uxtb	r1, r3
 8012ea6:	4288      	cmp	r0, r1
 8012ea8:	d09b      	beq.n	8012de2 <uxr_read_framed_msg+0x352>
 8012eaa:	3202      	adds	r2, #2
 8012eac:	4423      	add	r3, r4
 8012eae:	0850      	lsrs	r0, r2, #1
 8012eb0:	789b      	ldrb	r3, [r3, #2]
 8012eb2:	fba5 1000 	umull	r1, r0, r5, r0
 8012eb6:	2b7e      	cmp	r3, #126	@ 0x7e
 8012eb8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8012ebc:	fb0c 2210 	mls	r2, ip, r0, r2
 8012ec0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012ec4:	d077      	beq.n	8012fb6 <uxr_read_framed_msg+0x526>
 8012ec6:	f083 0120 	eor.w	r1, r3, #32
 8012eca:	e6ea      	b.n	8012ca2 <uxr_read_framed_msg+0x212>
 8012ecc:	f103 0c01 	add.w	ip, r3, #1
 8012ed0:	202a      	movs	r0, #42	@ 0x2a
 8012ed2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ed6:	fba5 e202 	umull	lr, r2, r5, r2
 8012eda:	0892      	lsrs	r2, r2, #2
 8012edc:	fb00 c212 	mls	r2, r0, r2, ip
 8012ee0:	fa5f fc82 	uxtb.w	ip, r2
 8012ee4:	4561      	cmp	r1, ip
 8012ee6:	f43f af57 	beq.w	8012d98 <uxr_read_framed_msg+0x308>
 8012eea:	3302      	adds	r3, #2
 8012eec:	4422      	add	r2, r4
 8012eee:	7891      	ldrb	r1, [r2, #2]
 8012ef0:	085a      	lsrs	r2, r3, #1
 8012ef2:	fba5 c202 	umull	ip, r2, r5, r2
 8012ef6:	297e      	cmp	r1, #126	@ 0x7e
 8012ef8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012efc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012f00:	fb00 3312 	mls	r3, r0, r2, r3
 8012f04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f08:	f43f af46 	beq.w	8012d98 <uxr_read_framed_msg+0x308>
 8012f0c:	f081 0120 	eor.w	r1, r1, #32
 8012f10:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012f14:	e6ea      	b.n	8012cec <uxr_read_framed_msg+0x25c>
 8012f16:	1c59      	adds	r1, r3, #1
 8012f18:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f1c:	084a      	lsrs	r2, r1, #1
 8012f1e:	fba5 e202 	umull	lr, r2, r5, r2
 8012f22:	0892      	lsrs	r2, r2, #2
 8012f24:	fb0c 1212 	mls	r2, ip, r2, r1
 8012f28:	b2d1      	uxtb	r1, r2
 8012f2a:	4288      	cmp	r0, r1
 8012f2c:	f43f af21 	beq.w	8012d72 <uxr_read_framed_msg+0x2e2>
 8012f30:	3302      	adds	r3, #2
 8012f32:	4422      	add	r2, r4
 8012f34:	7891      	ldrb	r1, [r2, #2]
 8012f36:	085a      	lsrs	r2, r3, #1
 8012f38:	fba5 0202 	umull	r0, r2, r5, r2
 8012f3c:	297e      	cmp	r1, #126	@ 0x7e
 8012f3e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012f42:	fb0c 3312 	mls	r3, ip, r2, r3
 8012f46:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f4a:	d030      	beq.n	8012fae <uxr_read_framed_msg+0x51e>
 8012f4c:	f081 0120 	eor.w	r1, r1, #32
 8012f50:	e65d      	b.n	8012c0e <uxr_read_framed_msg+0x17e>
 8012f52:	1c59      	adds	r1, r3, #1
 8012f54:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f58:	084a      	lsrs	r2, r1, #1
 8012f5a:	fba5 e202 	umull	lr, r2, r5, r2
 8012f5e:	0892      	lsrs	r2, r2, #2
 8012f60:	fb0c 1212 	mls	r2, ip, r2, r1
 8012f64:	b2d1      	uxtb	r1, r2
 8012f66:	4288      	cmp	r0, r1
 8012f68:	f43f af12 	beq.w	8012d90 <uxr_read_framed_msg+0x300>
 8012f6c:	3302      	adds	r3, #2
 8012f6e:	4422      	add	r2, r4
 8012f70:	7891      	ldrb	r1, [r2, #2]
 8012f72:	085a      	lsrs	r2, r3, #1
 8012f74:	fba5 0202 	umull	r0, r2, r5, r2
 8012f78:	297e      	cmp	r1, #126	@ 0x7e
 8012f7a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8012f7e:	fb0c 3312 	mls	r3, ip, r2, r3
 8012f82:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f86:	d002      	beq.n	8012f8e <uxr_read_framed_msg+0x4fe>
 8012f88:	f081 0120 	eor.w	r1, r1, #32
 8012f8c:	e66a      	b.n	8012c64 <uxr_read_framed_msg+0x1d4>
 8012f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	2302      	movs	r3, #2
 8012f94:	9301      	str	r3, [sp, #4]
 8012f96:	464a      	mov	r2, r9
 8012f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f9a:	4641      	mov	r1, r8
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f7ff fce3 	bl	8012968 <uxr_framing_read_transport>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	f47f aef2 	bne.w	8012d8c <uxr_read_framed_msg+0x2fc>
 8012fa8:	2301      	movs	r3, #1
 8012faa:	7023      	strb	r3, [r4, #0]
 8012fac:	e581      	b.n	8012ab2 <uxr_read_framed_msg+0x22>
 8012fae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	e7ee      	b.n	8012f94 <uxr_read_framed_msg+0x504>
 8012fb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	2303      	movs	r3, #3
 8012fbc:	e7ea      	b.n	8012f94 <uxr_read_framed_msg+0x504>
 8012fbe:	bf00      	nop

08012fc0 <uxr_stream_id>:
 8012fc0:	2901      	cmp	r1, #1
 8012fc2:	4684      	mov	ip, r0
 8012fc4:	b500      	push	{lr}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	d01f      	beq.n	801300a <uxr_stream_id+0x4a>
 8012fca:	2902      	cmp	r1, #2
 8012fcc:	f04f 0e00 	mov.w	lr, #0
 8012fd0:	d020      	beq.n	8013014 <uxr_stream_id+0x54>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	f36e 0307 	bfi	r3, lr, #0, #8
 8012fda:	f36c 230f 	bfi	r3, ip, #8, #8
 8012fde:	f361 4317 	bfi	r3, r1, #16, #8
 8012fe2:	f362 631f 	bfi	r3, r2, #24, #8
 8012fe6:	fa5f fc83 	uxtb.w	ip, r3
 8012fea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012fee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012ff2:	0e1b      	lsrs	r3, r3, #24
 8012ff4:	f36c 0007 	bfi	r0, ip, #0, #8
 8012ff8:	f361 200f 	bfi	r0, r1, #8, #8
 8012ffc:	f362 4017 	bfi	r0, r2, #16, #8
 8013000:	f363 601f 	bfi	r0, r3, #24, #8
 8013004:	b003      	add	sp, #12
 8013006:	f85d fb04 	ldr.w	pc, [sp], #4
 801300a:	f100 0e01 	add.w	lr, r0, #1
 801300e:	fa5f fe8e 	uxtb.w	lr, lr
 8013012:	e7de      	b.n	8012fd2 <uxr_stream_id+0x12>
 8013014:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8013018:	e7db      	b.n	8012fd2 <uxr_stream_id+0x12>
 801301a:	bf00      	nop

0801301c <uxr_stream_id_from_raw>:
 801301c:	b082      	sub	sp, #8
 801301e:	b130      	cbz	r0, 801302e <uxr_stream_id_from_raw+0x12>
 8013020:	0603      	lsls	r3, r0, #24
 8013022:	d421      	bmi.n	8013068 <uxr_stream_id_from_raw+0x4c>
 8013024:	1e42      	subs	r2, r0, #1
 8013026:	f04f 0c01 	mov.w	ip, #1
 801302a:	b2d2      	uxtb	r2, r2
 801302c:	e001      	b.n	8013032 <uxr_stream_id_from_raw+0x16>
 801302e:	4684      	mov	ip, r0
 8013030:	4602      	mov	r2, r0
 8013032:	2300      	movs	r3, #0
 8013034:	f360 0307 	bfi	r3, r0, #0, #8
 8013038:	2000      	movs	r0, #0
 801303a:	f362 230f 	bfi	r3, r2, #8, #8
 801303e:	f36c 4317 	bfi	r3, ip, #16, #8
 8013042:	f361 631f 	bfi	r3, r1, #24, #8
 8013046:	fa5f fc83 	uxtb.w	ip, r3
 801304a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801304e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013052:	0e1b      	lsrs	r3, r3, #24
 8013054:	f36c 0007 	bfi	r0, ip, #0, #8
 8013058:	f361 200f 	bfi	r0, r1, #8, #8
 801305c:	f362 4017 	bfi	r0, r2, #16, #8
 8013060:	f363 601f 	bfi	r0, r3, #24, #8
 8013064:	b002      	add	sp, #8
 8013066:	4770      	bx	lr
 8013068:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801306c:	f04f 0c02 	mov.w	ip, #2
 8013070:	e7df      	b.n	8013032 <uxr_stream_id_from_raw+0x16>
 8013072:	bf00      	nop

08013074 <uxr_init_stream_storage>:
 8013074:	2300      	movs	r3, #0
 8013076:	7403      	strb	r3, [r0, #16]
 8013078:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801307c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013080:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop

08013088 <uxr_reset_stream_storage>:
 8013088:	b570      	push	{r4, r5, r6, lr}
 801308a:	7c03      	ldrb	r3, [r0, #16]
 801308c:	4604      	mov	r4, r0
 801308e:	b14b      	cbz	r3, 80130a4 <uxr_reset_stream_storage+0x1c>
 8013090:	4606      	mov	r6, r0
 8013092:	2500      	movs	r5, #0
 8013094:	4630      	mov	r0, r6
 8013096:	3501      	adds	r5, #1
 8013098:	f003 fae0 	bl	801665c <uxr_reset_output_best_effort_stream>
 801309c:	7c23      	ldrb	r3, [r4, #16]
 801309e:	3610      	adds	r6, #16
 80130a0:	42ab      	cmp	r3, r5
 80130a2:	d8f7      	bhi.n	8013094 <uxr_reset_stream_storage+0xc>
 80130a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80130a8:	b15b      	cbz	r3, 80130c2 <uxr_reset_stream_storage+0x3a>
 80130aa:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130ae:	2500      	movs	r5, #0
 80130b0:	4630      	mov	r0, r6
 80130b2:	3501      	adds	r5, #1
 80130b4:	f003 f8d8 	bl	8016268 <uxr_reset_input_best_effort_stream>
 80130b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80130bc:	3602      	adds	r6, #2
 80130be:	42ab      	cmp	r3, r5
 80130c0:	d8f6      	bhi.n	80130b0 <uxr_reset_stream_storage+0x28>
 80130c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80130c6:	b15b      	cbz	r3, 80130e0 <uxr_reset_stream_storage+0x58>
 80130c8:	f104 0618 	add.w	r6, r4, #24
 80130cc:	2500      	movs	r5, #0
 80130ce:	4630      	mov	r0, r6
 80130d0:	3501      	adds	r5, #1
 80130d2:	f003 fb71 	bl	80167b8 <uxr_reset_output_reliable_stream>
 80130d6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80130da:	3628      	adds	r6, #40	@ 0x28
 80130dc:	42ab      	cmp	r3, r5
 80130de:	d8f6      	bhi.n	80130ce <uxr_reset_stream_storage+0x46>
 80130e0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80130e4:	b15b      	cbz	r3, 80130fe <uxr_reset_stream_storage+0x76>
 80130e6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80130ea:	2500      	movs	r5, #0
 80130ec:	4630      	mov	r0, r6
 80130ee:	3501      	adds	r5, #1
 80130f0:	f003 f926 	bl	8016340 <uxr_reset_input_reliable_stream>
 80130f4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80130f8:	3618      	adds	r6, #24
 80130fa:	42ab      	cmp	r3, r5
 80130fc:	d8f6      	bhi.n	80130ec <uxr_reset_stream_storage+0x64>
 80130fe:	bd70      	pop	{r4, r5, r6, pc}

08013100 <uxr_add_output_best_effort_buffer>:
 8013100:	b510      	push	{r4, lr}
 8013102:	7c04      	ldrb	r4, [r0, #16]
 8013104:	b082      	sub	sp, #8
 8013106:	f104 0c01 	add.w	ip, r4, #1
 801310a:	f880 c010 	strb.w	ip, [r0, #16]
 801310e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013112:	f003 fa99 	bl	8016648 <uxr_init_output_best_effort_stream>
 8013116:	2201      	movs	r2, #1
 8013118:	4620      	mov	r0, r4
 801311a:	4611      	mov	r1, r2
 801311c:	b002      	add	sp, #8
 801311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013122:	f7ff bf4d 	b.w	8012fc0 <uxr_stream_id>
 8013126:	bf00      	nop

08013128 <uxr_add_output_reliable_buffer>:
 8013128:	b510      	push	{r4, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	4684      	mov	ip, r0
 801312e:	2028      	movs	r0, #40	@ 0x28
 8013130:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013134:	9400      	str	r4, [sp, #0]
 8013136:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801313a:	fb00 c004 	mla	r0, r0, r4, ip
 801313e:	f104 0e01 	add.w	lr, r4, #1
 8013142:	3018      	adds	r0, #24
 8013144:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013148:	f003 fafe 	bl	8016748 <uxr_init_output_reliable_stream>
 801314c:	2201      	movs	r2, #1
 801314e:	2102      	movs	r1, #2
 8013150:	4620      	mov	r0, r4
 8013152:	b004      	add	sp, #16
 8013154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013158:	f7ff bf32 	b.w	8012fc0 <uxr_stream_id>

0801315c <uxr_add_input_best_effort_buffer>:
 801315c:	b510      	push	{r4, lr}
 801315e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013162:	b082      	sub	sp, #8
 8013164:	1c62      	adds	r2, r4, #1
 8013166:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801316a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801316e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013172:	f003 f875 	bl	8016260 <uxr_init_input_best_effort_stream>
 8013176:	2200      	movs	r2, #0
 8013178:	2101      	movs	r1, #1
 801317a:	4620      	mov	r0, r4
 801317c:	b002      	add	sp, #8
 801317e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013182:	f7ff bf1d 	b.w	8012fc0 <uxr_stream_id>
 8013186:	bf00      	nop

08013188 <uxr_add_input_reliable_buffer>:
 8013188:	b510      	push	{r4, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	4684      	mov	ip, r0
 801318e:	2018      	movs	r0, #24
 8013190:	9c06      	ldr	r4, [sp, #24]
 8013192:	9400      	str	r4, [sp, #0]
 8013194:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013198:	fb00 c004 	mla	r0, r0, r4, ip
 801319c:	f104 0e01 	add.w	lr, r4, #1
 80131a0:	3048      	adds	r0, #72	@ 0x48
 80131a2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80131a6:	f003 f8a5 	bl	80162f4 <uxr_init_input_reliable_stream>
 80131aa:	2200      	movs	r2, #0
 80131ac:	2102      	movs	r1, #2
 80131ae:	4620      	mov	r0, r4
 80131b0:	b004      	add	sp, #16
 80131b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131b6:	f7ff bf03 	b.w	8012fc0 <uxr_stream_id>
 80131ba:	bf00      	nop

080131bc <uxr_get_output_best_effort_stream>:
 80131bc:	7c03      	ldrb	r3, [r0, #16]
 80131be:	428b      	cmp	r3, r1
 80131c0:	bf8c      	ite	hi
 80131c2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80131c6:	2000      	movls	r0, #0
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop

080131cc <uxr_get_output_reliable_stream>:
 80131cc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80131d0:	428b      	cmp	r3, r1
 80131d2:	d904      	bls.n	80131de <uxr_get_output_reliable_stream+0x12>
 80131d4:	2328      	movs	r3, #40	@ 0x28
 80131d6:	fb03 0001 	mla	r0, r3, r1, r0
 80131da:	3018      	adds	r0, #24
 80131dc:	4770      	bx	lr
 80131de:	2000      	movs	r0, #0
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop

080131e4 <uxr_get_input_best_effort_stream>:
 80131e4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80131e8:	428b      	cmp	r3, r1
 80131ea:	d903      	bls.n	80131f4 <uxr_get_input_best_effort_stream+0x10>
 80131ec:	3121      	adds	r1, #33	@ 0x21
 80131ee:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80131f2:	4770      	bx	lr
 80131f4:	2000      	movs	r0, #0
 80131f6:	4770      	bx	lr

080131f8 <uxr_get_input_reliable_stream>:
 80131f8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80131fc:	428b      	cmp	r3, r1
 80131fe:	d904      	bls.n	801320a <uxr_get_input_reliable_stream+0x12>
 8013200:	2318      	movs	r3, #24
 8013202:	fb03 0001 	mla	r0, r3, r1, r0
 8013206:	3048      	adds	r0, #72	@ 0x48
 8013208:	4770      	bx	lr
 801320a:	2000      	movs	r0, #0
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop

08013210 <uxr_output_streams_confirmed>:
 8013210:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013214:	b183      	cbz	r3, 8013238 <uxr_output_streams_confirmed+0x28>
 8013216:	b570      	push	{r4, r5, r6, lr}
 8013218:	4606      	mov	r6, r0
 801321a:	f100 0518 	add.w	r5, r0, #24
 801321e:	2400      	movs	r4, #0
 8013220:	e000      	b.n	8013224 <uxr_output_streams_confirmed+0x14>
 8013222:	b140      	cbz	r0, 8013236 <uxr_output_streams_confirmed+0x26>
 8013224:	4628      	mov	r0, r5
 8013226:	3401      	adds	r4, #1
 8013228:	f003 fd3a 	bl	8016ca0 <uxr_is_output_up_to_date>
 801322c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013230:	3528      	adds	r5, #40	@ 0x28
 8013232:	42a3      	cmp	r3, r4
 8013234:	d8f5      	bhi.n	8013222 <uxr_output_streams_confirmed+0x12>
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	2001      	movs	r0, #1
 801323a:	4770      	bx	lr

0801323c <uxr_buffer_submessage_header>:
 801323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801323e:	460e      	mov	r6, r1
 8013240:	2104      	movs	r1, #4
 8013242:	4604      	mov	r4, r0
 8013244:	4615      	mov	r5, r2
 8013246:	461f      	mov	r7, r3
 8013248:	f7fd fdf4 	bl	8010e34 <ucdr_align_to>
 801324c:	2301      	movs	r3, #1
 801324e:	4631      	mov	r1, r6
 8013250:	4620      	mov	r0, r4
 8013252:	ea47 0203 	orr.w	r2, r7, r3
 8013256:	7523      	strb	r3, [r4, #20]
 8013258:	462b      	mov	r3, r5
 801325a:	f000 fa29 	bl	80136b0 <uxr_serialize_submessage_header>
 801325e:	4620      	mov	r0, r4
 8013260:	f7fd fdfe 	bl	8010e60 <ucdr_buffer_remaining>
 8013264:	42a8      	cmp	r0, r5
 8013266:	bf34      	ite	cc
 8013268:	2000      	movcc	r0, #0
 801326a:	2001      	movcs	r0, #1
 801326c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801326e:	bf00      	nop

08013270 <uxr_read_submessage_header>:
 8013270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013274:	4604      	mov	r4, r0
 8013276:	460d      	mov	r5, r1
 8013278:	2104      	movs	r1, #4
 801327a:	4616      	mov	r6, r2
 801327c:	4698      	mov	r8, r3
 801327e:	f7fd fdd9 	bl	8010e34 <ucdr_align_to>
 8013282:	4620      	mov	r0, r4
 8013284:	f7fd fdec 	bl	8010e60 <ucdr_buffer_remaining>
 8013288:	2803      	cmp	r0, #3
 801328a:	bf8c      	ite	hi
 801328c:	2701      	movhi	r7, #1
 801328e:	2700      	movls	r7, #0
 8013290:	d802      	bhi.n	8013298 <uxr_read_submessage_header+0x28>
 8013292:	4638      	mov	r0, r7
 8013294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013298:	4633      	mov	r3, r6
 801329a:	4642      	mov	r2, r8
 801329c:	4620      	mov	r0, r4
 801329e:	4629      	mov	r1, r5
 80132a0:	f000 fa1a 	bl	80136d8 <uxr_deserialize_submessage_header>
 80132a4:	f898 3000 	ldrb.w	r3, [r8]
 80132a8:	4638      	mov	r0, r7
 80132aa:	f003 0201 	and.w	r2, r3, #1
 80132ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80132b2:	f888 3000 	strb.w	r3, [r8]
 80132b6:	7522      	strb	r2, [r4, #20]
 80132b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132bc <uxr_submessage_padding>:
 80132bc:	f010 0003 	ands.w	r0, r0, #3
 80132c0:	bf18      	it	ne
 80132c2:	f1c0 0004 	rsbne	r0, r0, #4
 80132c6:	4770      	bx	lr

080132c8 <uxr_millis>:
 80132c8:	b510      	push	{r4, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	2001      	movs	r0, #1
 80132ce:	4669      	mov	r1, sp
 80132d0:	f7ee fa3a 	bl	8001748 <clock_gettime>
 80132d4:	4908      	ldr	r1, [pc, #32]	@ (80132f8 <uxr_millis+0x30>)
 80132d6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80132da:	fba0 0301 	umull	r0, r3, r0, r1
 80132de:	1900      	adds	r0, r0, r4
 80132e0:	fb01 3102 	mla	r1, r1, r2, r3
 80132e4:	4a05      	ldr	r2, [pc, #20]	@ (80132fc <uxr_millis+0x34>)
 80132e6:	f04f 0300 	mov.w	r3, #0
 80132ea:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80132ee:	f7ed f85f 	bl	80003b0 <__aeabi_ldivmod>
 80132f2:	b004      	add	sp, #16
 80132f4:	bd10      	pop	{r4, pc}
 80132f6:	bf00      	nop
 80132f8:	3b9aca00 	.word	0x3b9aca00
 80132fc:	000f4240 	.word	0x000f4240

08013300 <uxr_nanos>:
 8013300:	b510      	push	{r4, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	2001      	movs	r0, #1
 8013306:	4669      	mov	r1, sp
 8013308:	f7ee fa1e 	bl	8001748 <clock_gettime>
 801330c:	4a06      	ldr	r2, [pc, #24]	@ (8013328 <uxr_nanos+0x28>)
 801330e:	9800      	ldr	r0, [sp, #0]
 8013310:	9902      	ldr	r1, [sp, #8]
 8013312:	fba0 0302 	umull	r0, r3, r0, r2
 8013316:	9c01      	ldr	r4, [sp, #4]
 8013318:	1840      	adds	r0, r0, r1
 801331a:	fb02 3304 	mla	r3, r2, r4, r3
 801331e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013322:	b004      	add	sp, #16
 8013324:	bd10      	pop	{r4, pc}
 8013326:	bf00      	nop
 8013328:	3b9aca00 	.word	0x3b9aca00

0801332c <on_full_output_buffer_fragmented>:
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	460c      	mov	r4, r1
 8013332:	b08a      	sub	sp, #40	@ 0x28
 8013334:	4606      	mov	r6, r0
 8013336:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801333a:	f104 0008 	add.w	r0, r4, #8
 801333e:	f7ff ff45 	bl	80131cc <uxr_get_output_reliable_stream>
 8013342:	4605      	mov	r5, r0
 8013344:	f003 fcb6 	bl	8016cb4 <get_available_free_slots>
 8013348:	b968      	cbnz	r0, 8013366 <on_full_output_buffer_fragmented+0x3a>
 801334a:	4620      	mov	r0, r4
 801334c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013350:	4798      	blx	r3
 8013352:	b918      	cbnz	r0, 801335c <on_full_output_buffer_fragmented+0x30>
 8013354:	2001      	movs	r0, #1
 8013356:	b00a      	add	sp, #40	@ 0x28
 8013358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801335c:	4628      	mov	r0, r5
 801335e:	f003 fca9 	bl	8016cb4 <get_available_free_slots>
 8013362:	2800      	cmp	r0, #0
 8013364:	d0f6      	beq.n	8013354 <on_full_output_buffer_fragmented+0x28>
 8013366:	8929      	ldrh	r1, [r5, #8]
 8013368:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801336c:	89eb      	ldrh	r3, [r5, #14]
 801336e:	7b28      	ldrb	r0, [r5, #12]
 8013370:	686f      	ldr	r7, [r5, #4]
 8013372:	1a12      	subs	r2, r2, r0
 8013374:	fbb3 f0f1 	udiv	r0, r3, r1
 8013378:	fbb7 f7f1 	udiv	r7, r7, r1
 801337c:	fb01 3110 	mls	r1, r1, r0, r3
 8013380:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013384:	b289      	uxth	r1, r1
 8013386:	fb07 f101 	mul.w	r1, r7, r1
 801338a:	3f04      	subs	r7, #4
 801338c:	443a      	add	r2, r7
 801338e:	3104      	adds	r1, #4
 8013390:	fa1f f882 	uxth.w	r8, r2
 8013394:	463a      	mov	r2, r7
 8013396:	eba3 0308 	sub.w	r3, r3, r8
 801339a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801339e:	682b      	ldr	r3, [r5, #0]
 80133a0:	4419      	add	r1, r3
 80133a2:	2300      	movs	r3, #0
 80133a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80133a8:	9000      	str	r0, [sp, #0]
 80133aa:	a802      	add	r0, sp, #8
 80133ac:	f7fd fd14 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 80133b0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80133b4:	f102 0308 	add.w	r3, r2, #8
 80133b8:	42bb      	cmp	r3, r7
 80133ba:	d927      	bls.n	801340c <on_full_output_buffer_fragmented+0xe0>
 80133bc:	4642      	mov	r2, r8
 80133be:	2300      	movs	r3, #0
 80133c0:	210d      	movs	r1, #13
 80133c2:	a802      	add	r0, sp, #8
 80133c4:	f7ff ff3a 	bl	801323c <uxr_buffer_submessage_header>
 80133c8:	8929      	ldrh	r1, [r5, #8]
 80133ca:	89eb      	ldrh	r3, [r5, #14]
 80133cc:	686a      	ldr	r2, [r5, #4]
 80133ce:	fbb3 f0f1 	udiv	r0, r3, r1
 80133d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80133d6:	fb01 3310 	mls	r3, r1, r0, r3
 80133da:	b29b      	uxth	r3, r3
 80133dc:	fb02 f303 	mul.w	r3, r2, r3
 80133e0:	682a      	ldr	r2, [r5, #0]
 80133e2:	50d7      	str	r7, [r2, r3]
 80133e4:	2101      	movs	r1, #1
 80133e6:	89e8      	ldrh	r0, [r5, #14]
 80133e8:	f003 fc86 	bl	8016cf8 <uxr_seq_num_add>
 80133ec:	9904      	ldr	r1, [sp, #16]
 80133ee:	9a03      	ldr	r2, [sp, #12]
 80133f0:	81e8      	strh	r0, [r5, #14]
 80133f2:	4630      	mov	r0, r6
 80133f4:	1a52      	subs	r2, r2, r1
 80133f6:	f7fd fd01 	bl	8010dfc <ucdr_init_buffer>
 80133fa:	4630      	mov	r0, r6
 80133fc:	4622      	mov	r2, r4
 80133fe:	490f      	ldr	r1, [pc, #60]	@ (801343c <on_full_output_buffer_fragmented+0x110>)
 8013400:	f7fd fcd0 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 8013404:	2000      	movs	r0, #0
 8013406:	b00a      	add	sp, #40	@ 0x28
 8013408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801340c:	b292      	uxth	r2, r2
 801340e:	2302      	movs	r3, #2
 8013410:	210d      	movs	r1, #13
 8013412:	a802      	add	r0, sp, #8
 8013414:	f7ff ff12 	bl	801323c <uxr_buffer_submessage_header>
 8013418:	8928      	ldrh	r0, [r5, #8]
 801341a:	89eb      	ldrh	r3, [r5, #14]
 801341c:	6869      	ldr	r1, [r5, #4]
 801341e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013422:	fbb3 f7f0 	udiv	r7, r3, r0
 8013426:	fbb1 f1f0 	udiv	r1, r1, r0
 801342a:	fb00 3317 	mls	r3, r0, r7, r3
 801342e:	3208      	adds	r2, #8
 8013430:	b29b      	uxth	r3, r3
 8013432:	fb01 f303 	mul.w	r3, r1, r3
 8013436:	6829      	ldr	r1, [r5, #0]
 8013438:	50ca      	str	r2, [r1, r3]
 801343a:	e7d3      	b.n	80133e4 <on_full_output_buffer_fragmented+0xb8>
 801343c:	0801332d 	.word	0x0801332d

08013440 <uxr_prepare_output_stream>:
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	b087      	sub	sp, #28
 8013444:	2707      	movs	r7, #7
 8013446:	2500      	movs	r5, #0
 8013448:	461c      	mov	r4, r3
 801344a:	4606      	mov	r6, r0
 801344c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013450:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013452:	e9cd 7500 	strd	r7, r5, [sp]
 8013456:	3204      	adds	r2, #4
 8013458:	f7fe ffc8 	bl	80123ec <uxr_prepare_stream_to_write_submessage>
 801345c:	f080 0201 	eor.w	r2, r0, #1
 8013460:	b2d2      	uxtb	r2, r2
 8013462:	75a2      	strb	r2, [r4, #22]
 8013464:	b112      	cbz	r2, 801346c <uxr_prepare_output_stream+0x2c>
 8013466:	4628      	mov	r0, r5
 8013468:	b007      	add	sp, #28
 801346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801346c:	aa05      	add	r2, sp, #20
 801346e:	9902      	ldr	r1, [sp, #8]
 8013470:	4630      	mov	r0, r6
 8013472:	f7ff f8f7 	bl	8012664 <uxr_init_base_object_request>
 8013476:	a905      	add	r1, sp, #20
 8013478:	4605      	mov	r5, r0
 801347a:	4620      	mov	r0, r4
 801347c:	f000 ff9c 	bl	80143b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013480:	69a6      	ldr	r6, [r4, #24]
 8013482:	69e7      	ldr	r7, [r4, #28]
 8013484:	4620      	mov	r0, r4
 8013486:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801348a:	1a52      	subs	r2, r2, r1
 801348c:	f7fd fcb6 	bl	8010dfc <ucdr_init_buffer>
 8013490:	4620      	mov	r0, r4
 8013492:	463a      	mov	r2, r7
 8013494:	4631      	mov	r1, r6
 8013496:	f7fd fc85 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 801349a:	4628      	mov	r0, r5
 801349c:	b007      	add	sp, #28
 801349e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134a0 <uxr_prepare_output_stream_fragmented>:
 80134a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a4:	b091      	sub	sp, #68	@ 0x44
 80134a6:	4605      	mov	r5, r0
 80134a8:	3008      	adds	r0, #8
 80134aa:	461e      	mov	r6, r3
 80134ac:	9105      	str	r1, [sp, #20]
 80134ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80134b2:	9204      	str	r2, [sp, #16]
 80134b4:	f7ff fe8a 	bl	80131cc <uxr_get_output_reliable_stream>
 80134b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80134bc:	2b01      	cmp	r3, #1
 80134be:	f000 8093 	beq.w	80135e8 <uxr_prepare_output_stream_fragmented+0x148>
 80134c2:	4604      	mov	r4, r0
 80134c4:	2800      	cmp	r0, #0
 80134c6:	f000 808f 	beq.w	80135e8 <uxr_prepare_output_stream_fragmented+0x148>
 80134ca:	f003 fbf3 	bl	8016cb4 <get_available_free_slots>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	f000 8085 	beq.w	80135de <uxr_prepare_output_stream_fragmented+0x13e>
 80134d4:	8923      	ldrh	r3, [r4, #8]
 80134d6:	89e7      	ldrh	r7, [r4, #14]
 80134d8:	6862      	ldr	r2, [r4, #4]
 80134da:	fbb7 f9f3 	udiv	r9, r7, r3
 80134de:	fbb2 f2f3 	udiv	r2, r2, r3
 80134e2:	fb03 7919 	mls	r9, r3, r9, r7
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	f1a2 0b04 	sub.w	fp, r2, #4
 80134ec:	9203      	str	r2, [sp, #12]
 80134ee:	fa1f f989 	uxth.w	r9, r9
 80134f2:	fb02 f909 	mul.w	r9, r2, r9
 80134f6:	f109 0904 	add.w	r9, r9, #4
 80134fa:	4499      	add	r9, r3
 80134fc:	7b23      	ldrb	r3, [r4, #12]
 80134fe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013502:	4543      	cmp	r3, r8
 8013504:	d37c      	bcc.n	8013600 <uxr_prepare_output_stream_fragmented+0x160>
 8013506:	f1ab 0a04 	sub.w	sl, fp, #4
 801350a:	465a      	mov	r2, fp
 801350c:	4649      	mov	r1, r9
 801350e:	a808      	add	r0, sp, #32
 8013510:	ebaa 0a03 	sub.w	sl, sl, r3
 8013514:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013516:	f8cd 8000 	str.w	r8, [sp]
 801351a:	3308      	adds	r3, #8
 801351c:	fa1f fa8a 	uxth.w	sl, sl
 8013520:	9302      	str	r3, [sp, #8]
 8013522:	2300      	movs	r3, #0
 8013524:	f7fd fc58 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8013528:	9b02      	ldr	r3, [sp, #8]
 801352a:	4652      	mov	r2, sl
 801352c:	210d      	movs	r1, #13
 801352e:	455b      	cmp	r3, fp
 8013530:	bf34      	ite	cc
 8013532:	2302      	movcc	r3, #2
 8013534:	2300      	movcs	r3, #0
 8013536:	a808      	add	r0, sp, #32
 8013538:	f7ff fe80 	bl	801323c <uxr_buffer_submessage_header>
 801353c:	8921      	ldrh	r1, [r4, #8]
 801353e:	6863      	ldr	r3, [r4, #4]
 8013540:	4638      	mov	r0, r7
 8013542:	fbb7 f2f1 	udiv	r2, r7, r1
 8013546:	fbb3 f3f1 	udiv	r3, r3, r1
 801354a:	fb01 7212 	mls	r2, r1, r2, r7
 801354e:	2101      	movs	r1, #1
 8013550:	b292      	uxth	r2, r2
 8013552:	fb02 f303 	mul.w	r3, r2, r3
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	f842 b003 	str.w	fp, [r2, r3]
 801355c:	f003 fbcc 	bl	8016cf8 <uxr_seq_num_add>
 8013560:	9b03      	ldr	r3, [sp, #12]
 8013562:	f108 0104 	add.w	r1, r8, #4
 8013566:	4607      	mov	r7, r0
 8013568:	f1a3 0208 	sub.w	r2, r3, #8
 801356c:	4630      	mov	r0, r6
 801356e:	4449      	add	r1, r9
 8013570:	eba2 0208 	sub.w	r2, r2, r8
 8013574:	f7fd fc42 	bl	8010dfc <ucdr_init_buffer>
 8013578:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801357a:	2107      	movs	r1, #7
 801357c:	81e7      	strh	r7, [r4, #14]
 801357e:	1d1a      	adds	r2, r3, #4
 8013580:	2300      	movs	r3, #0
 8013582:	4630      	mov	r0, r6
 8013584:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013588:	bf28      	it	cs
 801358a:	461a      	movcs	r2, r3
 801358c:	b292      	uxth	r2, r2
 801358e:	f7ff fe55 	bl	801323c <uxr_buffer_submessage_header>
 8013592:	aa07      	add	r2, sp, #28
 8013594:	9904      	ldr	r1, [sp, #16]
 8013596:	4628      	mov	r0, r5
 8013598:	f7ff f864 	bl	8012664 <uxr_init_base_object_request>
 801359c:	4604      	mov	r4, r0
 801359e:	b320      	cbz	r0, 80135ea <uxr_prepare_output_stream_fragmented+0x14a>
 80135a0:	a907      	add	r1, sp, #28
 80135a2:	4630      	mov	r0, r6
 80135a4:	f000 ff08 	bl	80143b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80135a8:	4630      	mov	r0, r6
 80135aa:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80135ae:	1a52      	subs	r2, r2, r1
 80135b0:	f7fd fc24 	bl	8010dfc <ucdr_init_buffer>
 80135b4:	9b05      	ldr	r3, [sp, #20]
 80135b6:	9a02      	ldr	r2, [sp, #8]
 80135b8:	4630      	mov	r0, r6
 80135ba:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80135be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135c0:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80135c4:	462a      	mov	r2, r5
 80135c6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80135ca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80135cc:	4918      	ldr	r1, [pc, #96]	@ (8013630 <uxr_prepare_output_stream_fragmented+0x190>)
 80135ce:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80135d2:	f7fd fbe7 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 80135d6:	4620      	mov	r0, r4
 80135d8:	b011      	add	sp, #68	@ 0x44
 80135da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135de:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80135e0:	4628      	mov	r0, r5
 80135e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135e4:	4798      	blx	r3
 80135e6:	b920      	cbnz	r0, 80135f2 <uxr_prepare_output_stream_fragmented+0x152>
 80135e8:	2400      	movs	r4, #0
 80135ea:	4620      	mov	r0, r4
 80135ec:	b011      	add	sp, #68	@ 0x44
 80135ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f2:	4620      	mov	r0, r4
 80135f4:	f003 fb5e 	bl	8016cb4 <get_available_free_slots>
 80135f8:	2800      	cmp	r0, #0
 80135fa:	f47f af6b 	bne.w	80134d4 <uxr_prepare_output_stream_fragmented+0x34>
 80135fe:	e7f3      	b.n	80135e8 <uxr_prepare_output_stream_fragmented+0x148>
 8013600:	4638      	mov	r0, r7
 8013602:	2101      	movs	r1, #1
 8013604:	f003 fb78 	bl	8016cf8 <uxr_seq_num_add>
 8013608:	8922      	ldrh	r2, [r4, #8]
 801360a:	6863      	ldr	r3, [r4, #4]
 801360c:	4607      	mov	r7, r0
 801360e:	fbb3 f9f2 	udiv	r9, r3, r2
 8013612:	fbb0 f3f2 	udiv	r3, r0, r2
 8013616:	fb02 0313 	mls	r3, r2, r3, r0
 801361a:	b29b      	uxth	r3, r3
 801361c:	fb03 f909 	mul.w	r9, r3, r9
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	f109 0904 	add.w	r9, r9, #4
 8013626:	4499      	add	r9, r3
 8013628:	7b23      	ldrb	r3, [r4, #12]
 801362a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801362e:	e76a      	b.n	8013506 <uxr_prepare_output_stream_fragmented+0x66>
 8013630:	0801332d 	.word	0x0801332d

08013634 <uxr_serialize_message_header>:
 8013634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013636:	4616      	mov	r6, r2
 8013638:	b083      	sub	sp, #12
 801363a:	4604      	mov	r4, r0
 801363c:	460d      	mov	r5, r1
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	9f08      	ldr	r7, [sp, #32]
 8013642:	f7fc fc2f 	bl	800fea4 <ucdr_serialize_uint8_t>
 8013646:	4631      	mov	r1, r6
 8013648:	4620      	mov	r0, r4
 801364a:	f7fc fc2b 	bl	800fea4 <ucdr_serialize_uint8_t>
 801364e:	9a01      	ldr	r2, [sp, #4]
 8013650:	2101      	movs	r1, #1
 8013652:	4620      	mov	r0, r4
 8013654:	f7fc fcd2 	bl	800fffc <ucdr_serialize_endian_uint16_t>
 8013658:	062b      	lsls	r3, r5, #24
 801365a:	d501      	bpl.n	8013660 <uxr_serialize_message_header+0x2c>
 801365c:	b003      	add	sp, #12
 801365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013660:	2204      	movs	r2, #4
 8013662:	4639      	mov	r1, r7
 8013664:	4620      	mov	r0, r4
 8013666:	b003      	add	sp, #12
 8013668:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801366c:	f002 bcbc 	b.w	8015fe8 <ucdr_serialize_array_uint8_t>

08013670 <uxr_deserialize_message_header>:
 8013670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013672:	4616      	mov	r6, r2
 8013674:	b083      	sub	sp, #12
 8013676:	4604      	mov	r4, r0
 8013678:	460d      	mov	r5, r1
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	9f08      	ldr	r7, [sp, #32]
 801367e:	f7fc fc27 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013682:	4631      	mov	r1, r6
 8013684:	4620      	mov	r0, r4
 8013686:	f7fc fc23 	bl	800fed0 <ucdr_deserialize_uint8_t>
 801368a:	9a01      	ldr	r2, [sp, #4]
 801368c:	2101      	movs	r1, #1
 801368e:	4620      	mov	r0, r4
 8013690:	f7fc fda8 	bl	80101e4 <ucdr_deserialize_endian_uint16_t>
 8013694:	f995 3000 	ldrsb.w	r3, [r5]
 8013698:	2b00      	cmp	r3, #0
 801369a:	da01      	bge.n	80136a0 <uxr_deserialize_message_header+0x30>
 801369c:	b003      	add	sp, #12
 801369e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136a0:	2204      	movs	r2, #4
 80136a2:	4639      	mov	r1, r7
 80136a4:	4620      	mov	r0, r4
 80136a6:	b003      	add	sp, #12
 80136a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80136ac:	f002 bd00 	b.w	80160b0 <ucdr_deserialize_array_uint8_t>

080136b0 <uxr_serialize_submessage_header>:
 80136b0:	b530      	push	{r4, r5, lr}
 80136b2:	4615      	mov	r5, r2
 80136b4:	b083      	sub	sp, #12
 80136b6:	4604      	mov	r4, r0
 80136b8:	9301      	str	r3, [sp, #4]
 80136ba:	f7fc fbf3 	bl	800fea4 <ucdr_serialize_uint8_t>
 80136be:	4629      	mov	r1, r5
 80136c0:	4620      	mov	r0, r4
 80136c2:	f7fc fbef 	bl	800fea4 <ucdr_serialize_uint8_t>
 80136c6:	9a01      	ldr	r2, [sp, #4]
 80136c8:	2101      	movs	r1, #1
 80136ca:	4620      	mov	r0, r4
 80136cc:	b003      	add	sp, #12
 80136ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136d2:	f7fc bc93 	b.w	800fffc <ucdr_serialize_endian_uint16_t>
 80136d6:	bf00      	nop

080136d8 <uxr_deserialize_submessage_header>:
 80136d8:	b530      	push	{r4, r5, lr}
 80136da:	4615      	mov	r5, r2
 80136dc:	b083      	sub	sp, #12
 80136de:	4604      	mov	r4, r0
 80136e0:	9301      	str	r3, [sp, #4]
 80136e2:	f7fc fbf5 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80136e6:	4629      	mov	r1, r5
 80136e8:	4620      	mov	r0, r4
 80136ea:	f7fc fbf1 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80136ee:	9a01      	ldr	r2, [sp, #4]
 80136f0:	2101      	movs	r1, #1
 80136f2:	4620      	mov	r0, r4
 80136f4:	b003      	add	sp, #12
 80136f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136fa:	f7fc bd73 	b.w	80101e4 <ucdr_deserialize_endian_uint16_t>
 80136fe:	bf00      	nop

08013700 <uxr_serialize_CLIENT_Representation>:
 8013700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013704:	2204      	movs	r2, #4
 8013706:	460e      	mov	r6, r1
 8013708:	4605      	mov	r5, r0
 801370a:	f002 fc6d 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 801370e:	4607      	mov	r7, r0
 8013710:	2202      	movs	r2, #2
 8013712:	1d31      	adds	r1, r6, #4
 8013714:	4628      	mov	r0, r5
 8013716:	f002 fc67 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 801371a:	4038      	ands	r0, r7
 801371c:	2202      	movs	r2, #2
 801371e:	1db1      	adds	r1, r6, #6
 8013720:	b2c7      	uxtb	r7, r0
 8013722:	4628      	mov	r0, r5
 8013724:	f002 fc60 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013728:	2204      	movs	r2, #4
 801372a:	4007      	ands	r7, r0
 801372c:	f106 0108 	add.w	r1, r6, #8
 8013730:	4628      	mov	r0, r5
 8013732:	f002 fc59 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013736:	4007      	ands	r7, r0
 8013738:	7b31      	ldrb	r1, [r6, #12]
 801373a:	4628      	mov	r0, r5
 801373c:	f7fc fbb2 	bl	800fea4 <ucdr_serialize_uint8_t>
 8013740:	7b71      	ldrb	r1, [r6, #13]
 8013742:	4007      	ands	r7, r0
 8013744:	4628      	mov	r0, r5
 8013746:	f7fc fb7f 	bl	800fe48 <ucdr_serialize_bool>
 801374a:	7b73      	ldrb	r3, [r6, #13]
 801374c:	ea07 0800 	and.w	r8, r7, r0
 8013750:	b93b      	cbnz	r3, 8013762 <uxr_serialize_CLIENT_Representation+0x62>
 8013752:	8bb1      	ldrh	r1, [r6, #28]
 8013754:	4628      	mov	r0, r5
 8013756:	f7fc fbd1 	bl	800fefc <ucdr_serialize_uint16_t>
 801375a:	ea08 0000 	and.w	r0, r8, r0
 801375e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013762:	6931      	ldr	r1, [r6, #16]
 8013764:	4628      	mov	r0, r5
 8013766:	f7fc fdb3 	bl	80102d0 <ucdr_serialize_uint32_t>
 801376a:	6933      	ldr	r3, [r6, #16]
 801376c:	b1e3      	cbz	r3, 80137a8 <uxr_serialize_CLIENT_Representation+0xa8>
 801376e:	b1c0      	cbz	r0, 80137a2 <uxr_serialize_CLIENT_Representation+0xa2>
 8013770:	4637      	mov	r7, r6
 8013772:	f04f 0900 	mov.w	r9, #0
 8013776:	e000      	b.n	801377a <uxr_serialize_CLIENT_Representation+0x7a>
 8013778:	b19c      	cbz	r4, 80137a2 <uxr_serialize_CLIENT_Representation+0xa2>
 801377a:	6979      	ldr	r1, [r7, #20]
 801377c:	4628      	mov	r0, r5
 801377e:	f002 fd57 	bl	8016230 <ucdr_serialize_string>
 8013782:	69b9      	ldr	r1, [r7, #24]
 8013784:	4604      	mov	r4, r0
 8013786:	4628      	mov	r0, r5
 8013788:	f002 fd52 	bl	8016230 <ucdr_serialize_string>
 801378c:	f109 0901 	add.w	r9, r9, #1
 8013790:	6933      	ldr	r3, [r6, #16]
 8013792:	4004      	ands	r4, r0
 8013794:	3708      	adds	r7, #8
 8013796:	4599      	cmp	r9, r3
 8013798:	b2e4      	uxtb	r4, r4
 801379a:	d3ed      	bcc.n	8013778 <uxr_serialize_CLIENT_Representation+0x78>
 801379c:	ea08 0804 	and.w	r8, r8, r4
 80137a0:	e7d7      	b.n	8013752 <uxr_serialize_CLIENT_Representation+0x52>
 80137a2:	f04f 0800 	mov.w	r8, #0
 80137a6:	e7d4      	b.n	8013752 <uxr_serialize_CLIENT_Representation+0x52>
 80137a8:	ea08 0800 	and.w	r8, r8, r0
 80137ac:	e7d1      	b.n	8013752 <uxr_serialize_CLIENT_Representation+0x52>
 80137ae:	bf00      	nop

080137b0 <uxr_deserialize_CLIENT_Representation>:
 80137b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b4:	2204      	movs	r2, #4
 80137b6:	460c      	mov	r4, r1
 80137b8:	4605      	mov	r5, r0
 80137ba:	f002 fc79 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80137be:	4607      	mov	r7, r0
 80137c0:	2202      	movs	r2, #2
 80137c2:	1d21      	adds	r1, r4, #4
 80137c4:	4628      	mov	r0, r5
 80137c6:	f002 fc73 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80137ca:	4038      	ands	r0, r7
 80137cc:	2202      	movs	r2, #2
 80137ce:	1da1      	adds	r1, r4, #6
 80137d0:	b2c6      	uxtb	r6, r0
 80137d2:	4628      	mov	r0, r5
 80137d4:	f002 fc6c 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80137d8:	2204      	movs	r2, #4
 80137da:	4006      	ands	r6, r0
 80137dc:	f104 0108 	add.w	r1, r4, #8
 80137e0:	4628      	mov	r0, r5
 80137e2:	f002 fc65 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80137e6:	4006      	ands	r6, r0
 80137e8:	f104 010c 	add.w	r1, r4, #12
 80137ec:	4628      	mov	r0, r5
 80137ee:	f7fc fb6f 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80137f2:	f104 010d 	add.w	r1, r4, #13
 80137f6:	ea06 0700 	and.w	r7, r6, r0
 80137fa:	4628      	mov	r0, r5
 80137fc:	f7fc fb3a 	bl	800fe74 <ucdr_deserialize_bool>
 8013800:	7b63      	ldrb	r3, [r4, #13]
 8013802:	4007      	ands	r7, r0
 8013804:	b93b      	cbnz	r3, 8013816 <uxr_deserialize_CLIENT_Representation+0x66>
 8013806:	f104 011c 	add.w	r1, r4, #28
 801380a:	4628      	mov	r0, r5
 801380c:	f7fc fc76 	bl	80100fc <ucdr_deserialize_uint16_t>
 8013810:	4038      	ands	r0, r7
 8013812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013816:	f104 0110 	add.w	r1, r4, #16
 801381a:	4628      	mov	r0, r5
 801381c:	f7fc fe88 	bl	8010530 <ucdr_deserialize_uint32_t>
 8013820:	6923      	ldr	r3, [r4, #16]
 8013822:	2b01      	cmp	r3, #1
 8013824:	d903      	bls.n	801382e <uxr_deserialize_CLIENT_Representation+0x7e>
 8013826:	2301      	movs	r3, #1
 8013828:	2700      	movs	r7, #0
 801382a:	75ab      	strb	r3, [r5, #22]
 801382c:	e7eb      	b.n	8013806 <uxr_deserialize_CLIENT_Representation+0x56>
 801382e:	b30b      	cbz	r3, 8013874 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013830:	b1f0      	cbz	r0, 8013870 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013832:	46a0      	mov	r8, r4
 8013834:	f04f 0900 	mov.w	r9, #0
 8013838:	e000      	b.n	801383c <uxr_deserialize_CLIENT_Representation+0x8c>
 801383a:	b1ce      	cbz	r6, 8013870 <uxr_deserialize_CLIENT_Representation+0xc0>
 801383c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013840:	f108 0808 	add.w	r8, r8, #8
 8013844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013848:	4628      	mov	r0, r5
 801384a:	f002 fd01 	bl	8016250 <ucdr_deserialize_string>
 801384e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013852:	4606      	mov	r6, r0
 8013854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013858:	4628      	mov	r0, r5
 801385a:	f109 0901 	add.w	r9, r9, #1
 801385e:	f002 fcf7 	bl	8016250 <ucdr_deserialize_string>
 8013862:	6923      	ldr	r3, [r4, #16]
 8013864:	4006      	ands	r6, r0
 8013866:	4599      	cmp	r9, r3
 8013868:	b2f6      	uxtb	r6, r6
 801386a:	d3e6      	bcc.n	801383a <uxr_deserialize_CLIENT_Representation+0x8a>
 801386c:	4037      	ands	r7, r6
 801386e:	e7ca      	b.n	8013806 <uxr_deserialize_CLIENT_Representation+0x56>
 8013870:	2700      	movs	r7, #0
 8013872:	e7c8      	b.n	8013806 <uxr_deserialize_CLIENT_Representation+0x56>
 8013874:	4007      	ands	r7, r0
 8013876:	e7c6      	b.n	8013806 <uxr_deserialize_CLIENT_Representation+0x56>

08013878 <uxr_serialize_AGENT_Representation>:
 8013878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801387c:	2204      	movs	r2, #4
 801387e:	460f      	mov	r7, r1
 8013880:	4605      	mov	r5, r0
 8013882:	f002 fbb1 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013886:	4604      	mov	r4, r0
 8013888:	2202      	movs	r2, #2
 801388a:	1d39      	adds	r1, r7, #4
 801388c:	4628      	mov	r0, r5
 801388e:	f002 fbab 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013892:	4020      	ands	r0, r4
 8013894:	2202      	movs	r2, #2
 8013896:	1db9      	adds	r1, r7, #6
 8013898:	b2c4      	uxtb	r4, r0
 801389a:	4628      	mov	r0, r5
 801389c:	f002 fba4 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80138a0:	7a39      	ldrb	r1, [r7, #8]
 80138a2:	4004      	ands	r4, r0
 80138a4:	4628      	mov	r0, r5
 80138a6:	f7fc facf 	bl	800fe48 <ucdr_serialize_bool>
 80138aa:	7a3b      	ldrb	r3, [r7, #8]
 80138ac:	ea00 0804 	and.w	r8, r0, r4
 80138b0:	b913      	cbnz	r3, 80138b8 <uxr_serialize_AGENT_Representation+0x40>
 80138b2:	4640      	mov	r0, r8
 80138b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138b8:	68f9      	ldr	r1, [r7, #12]
 80138ba:	4628      	mov	r0, r5
 80138bc:	f7fc fd08 	bl	80102d0 <ucdr_serialize_uint32_t>
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	b303      	cbz	r3, 8013906 <uxr_serialize_AGENT_Representation+0x8e>
 80138c4:	b1d0      	cbz	r0, 80138fc <uxr_serialize_AGENT_Representation+0x84>
 80138c6:	463e      	mov	r6, r7
 80138c8:	f04f 0900 	mov.w	r9, #0
 80138cc:	e000      	b.n	80138d0 <uxr_serialize_AGENT_Representation+0x58>
 80138ce:	b1ac      	cbz	r4, 80138fc <uxr_serialize_AGENT_Representation+0x84>
 80138d0:	6931      	ldr	r1, [r6, #16]
 80138d2:	4628      	mov	r0, r5
 80138d4:	f002 fcac 	bl	8016230 <ucdr_serialize_string>
 80138d8:	6971      	ldr	r1, [r6, #20]
 80138da:	4604      	mov	r4, r0
 80138dc:	4628      	mov	r0, r5
 80138de:	f002 fca7 	bl	8016230 <ucdr_serialize_string>
 80138e2:	f109 0901 	add.w	r9, r9, #1
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	4004      	ands	r4, r0
 80138ea:	3608      	adds	r6, #8
 80138ec:	4599      	cmp	r9, r3
 80138ee:	b2e4      	uxtb	r4, r4
 80138f0:	d3ed      	bcc.n	80138ce <uxr_serialize_AGENT_Representation+0x56>
 80138f2:	ea08 0804 	and.w	r8, r8, r4
 80138f6:	4640      	mov	r0, r8
 80138f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138fc:	f04f 0800 	mov.w	r8, #0
 8013900:	4640      	mov	r0, r8
 8013902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013906:	ea08 0800 	and.w	r8, r8, r0
 801390a:	e7d2      	b.n	80138b2 <uxr_serialize_AGENT_Representation+0x3a>

0801390c <uxr_serialize_DATAWRITER_Representation>:
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	460d      	mov	r5, r1
 8013910:	7809      	ldrb	r1, [r1, #0]
 8013912:	4606      	mov	r6, r0
 8013914:	f7fc fac6 	bl	800fea4 <ucdr_serialize_uint8_t>
 8013918:	4604      	mov	r4, r0
 801391a:	b130      	cbz	r0, 801392a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801391c:	782b      	ldrb	r3, [r5, #0]
 801391e:	2b02      	cmp	r3, #2
 8013920:	d00c      	beq.n	801393c <uxr_serialize_DATAWRITER_Representation+0x30>
 8013922:	2b03      	cmp	r3, #3
 8013924:	d010      	beq.n	8013948 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013926:	2b01      	cmp	r3, #1
 8013928:	d008      	beq.n	801393c <uxr_serialize_DATAWRITER_Representation+0x30>
 801392a:	2202      	movs	r2, #2
 801392c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013930:	4630      	mov	r0, r6
 8013932:	f002 fb59 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013936:	4020      	ands	r0, r4
 8013938:	b2c0      	uxtb	r0, r0
 801393a:	bd70      	pop	{r4, r5, r6, pc}
 801393c:	6869      	ldr	r1, [r5, #4]
 801393e:	4630      	mov	r0, r6
 8013940:	f002 fc76 	bl	8016230 <ucdr_serialize_string>
 8013944:	4604      	mov	r4, r0
 8013946:	e7f0      	b.n	801392a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013948:	4629      	mov	r1, r5
 801394a:	4630      	mov	r0, r6
 801394c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013950:	3104      	adds	r1, #4
 8013952:	f002 fc41 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8013956:	4604      	mov	r4, r0
 8013958:	e7e7      	b.n	801392a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801395a:	bf00      	nop

0801395c <uxr_serialize_ObjectVariant.part.0>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	780b      	ldrb	r3, [r1, #0]
 8013960:	460c      	mov	r4, r1
 8013962:	4605      	mov	r5, r0
 8013964:	3b01      	subs	r3, #1
 8013966:	2b0d      	cmp	r3, #13
 8013968:	d854      	bhi.n	8013a14 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801396a:	e8df f003 	tbb	[pc, r3]
 801396e:	0730      	.short	0x0730
 8013970:	07071b1b 	.word	0x07071b1b
 8013974:	0c530707 	.word	0x0c530707
 8013978:	494e0c0c 	.word	0x494e0c0c
 801397c:	3104      	adds	r1, #4
 801397e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013982:	f7ff bfc3 	b.w	801390c <uxr_serialize_DATAWRITER_Representation>
 8013986:	7909      	ldrb	r1, [r1, #4]
 8013988:	f7fc fa8c 	bl	800fea4 <ucdr_serialize_uint8_t>
 801398c:	b1e8      	cbz	r0, 80139ca <uxr_serialize_ObjectVariant.part.0+0x6e>
 801398e:	7923      	ldrb	r3, [r4, #4]
 8013990:	2b01      	cmp	r3, #1
 8013992:	d001      	beq.n	8013998 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013994:	2b02      	cmp	r3, #2
 8013996:	d13d      	bne.n	8013a14 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013998:	68a1      	ldr	r1, [r4, #8]
 801399a:	4628      	mov	r0, r5
 801399c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139a0:	f002 bc46 	b.w	8016230 <ucdr_serialize_string>
 80139a4:	7909      	ldrb	r1, [r1, #4]
 80139a6:	f7fc fa7d 	bl	800fea4 <ucdr_serialize_uint8_t>
 80139aa:	4606      	mov	r6, r0
 80139ac:	b120      	cbz	r0, 80139b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139ae:	7923      	ldrb	r3, [r4, #4]
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d039      	beq.n	8013a28 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80139b4:	2b03      	cmp	r3, #3
 80139b6:	d02f      	beq.n	8013a18 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80139b8:	2202      	movs	r2, #2
 80139ba:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80139be:	4628      	mov	r0, r5
 80139c0:	f002 fb12 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80139c4:	4030      	ands	r0, r6
 80139c6:	b2c0      	uxtb	r0, r0
 80139c8:	bd70      	pop	{r4, r5, r6, pc}
 80139ca:	2000      	movs	r0, #0
 80139cc:	bd70      	pop	{r4, r5, r6, pc}
 80139ce:	7909      	ldrb	r1, [r1, #4]
 80139d0:	f7fc fa68 	bl	800fea4 <ucdr_serialize_uint8_t>
 80139d4:	4606      	mov	r6, r0
 80139d6:	b158      	cbz	r0, 80139f0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139d8:	7923      	ldrb	r3, [r4, #4]
 80139da:	2b02      	cmp	r3, #2
 80139dc:	d003      	beq.n	80139e6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80139de:	2b03      	cmp	r3, #3
 80139e0:	d028      	beq.n	8013a34 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d104      	bne.n	80139f0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139e6:	68a1      	ldr	r1, [r4, #8]
 80139e8:	4628      	mov	r0, r5
 80139ea:	f002 fc21 	bl	8016230 <ucdr_serialize_string>
 80139ee:	4606      	mov	r6, r0
 80139f0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80139f4:	4628      	mov	r0, r5
 80139f6:	f7fc ff91 	bl	801091c <ucdr_serialize_int16_t>
 80139fa:	4030      	ands	r0, r6
 80139fc:	b2c0      	uxtb	r0, r0
 80139fe:	bd70      	pop	{r4, r5, r6, pc}
 8013a00:	3104      	adds	r1, #4
 8013a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a06:	f7ff be7b 	b.w	8013700 <uxr_serialize_CLIENT_Representation>
 8013a0a:	3104      	adds	r1, #4
 8013a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a10:	f7ff bf32 	b.w	8013878 <uxr_serialize_AGENT_Representation>
 8013a14:	2001      	movs	r0, #1
 8013a16:	bd70      	pop	{r4, r5, r6, pc}
 8013a18:	68a2      	ldr	r2, [r4, #8]
 8013a1a:	f104 010c 	add.w	r1, r4, #12
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f002 fbda 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8013a24:	4606      	mov	r6, r0
 8013a26:	e7c7      	b.n	80139b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a28:	68a1      	ldr	r1, [r4, #8]
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f002 fc00 	bl	8016230 <ucdr_serialize_string>
 8013a30:	4606      	mov	r6, r0
 8013a32:	e7c1      	b.n	80139b8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a34:	68a2      	ldr	r2, [r4, #8]
 8013a36:	f104 010c 	add.w	r1, r4, #12
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f002 fbcc 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8013a40:	4606      	mov	r6, r0
 8013a42:	e7d5      	b.n	80139f0 <uxr_serialize_ObjectVariant.part.0+0x94>

08013a44 <uxr_deserialize_DATAWRITER_Representation>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	4606      	mov	r6, r0
 8013a48:	460d      	mov	r5, r1
 8013a4a:	f7fc fa41 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013a4e:	4604      	mov	r4, r0
 8013a50:	b130      	cbz	r0, 8013a60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a52:	782b      	ldrb	r3, [r5, #0]
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d00c      	beq.n	8013a72 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d012      	beq.n	8013a82 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d008      	beq.n	8013a72 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a60:	2202      	movs	r2, #2
 8013a62:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013a66:	4630      	mov	r0, r6
 8013a68:	f002 fb22 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013a6c:	4020      	ands	r0, r4
 8013a6e:	b2c0      	uxtb	r0, r0
 8013a70:	bd70      	pop	{r4, r5, r6, pc}
 8013a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a76:	6869      	ldr	r1, [r5, #4]
 8013a78:	4630      	mov	r0, r6
 8013a7a:	f002 fbe9 	bl	8016250 <ucdr_deserialize_string>
 8013a7e:	4604      	mov	r4, r0
 8013a80:	e7ee      	b.n	8013a60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a82:	1d2b      	adds	r3, r5, #4
 8013a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a88:	f105 0108 	add.w	r1, r5, #8
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f002 fbb5 	bl	80161fc <ucdr_deserialize_sequence_uint8_t>
 8013a92:	4604      	mov	r4, r0
 8013a94:	e7e4      	b.n	8013a60 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a96:	bf00      	nop

08013a98 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013a98:	b570      	push	{r4, r5, r6, lr}
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	7809      	ldrb	r1, [r1, #0]
 8013a9e:	4606      	mov	r6, r0
 8013aa0:	f7fc f9d2 	bl	800fe48 <ucdr_serialize_bool>
 8013aa4:	782b      	ldrb	r3, [r5, #0]
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	b94b      	cbnz	r3, 8013abe <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013aaa:	7a29      	ldrb	r1, [r5, #8]
 8013aac:	4630      	mov	r0, r6
 8013aae:	f7fc f9cb 	bl	800fe48 <ucdr_serialize_bool>
 8013ab2:	7a2b      	ldrb	r3, [r5, #8]
 8013ab4:	4004      	ands	r4, r0
 8013ab6:	b2e4      	uxtb	r4, r4
 8013ab8:	b943      	cbnz	r3, 8013acc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013aba:	4620      	mov	r0, r4
 8013abc:	bd70      	pop	{r4, r5, r6, pc}
 8013abe:	6869      	ldr	r1, [r5, #4]
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f002 fbb5 	bl	8016230 <ucdr_serialize_string>
 8013ac6:	4004      	ands	r4, r0
 8013ac8:	b2e4      	uxtb	r4, r4
 8013aca:	e7ee      	b.n	8013aaa <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013acc:	68e9      	ldr	r1, [r5, #12]
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f002 fbae 	bl	8016230 <ucdr_serialize_string>
 8013ad4:	4004      	ands	r4, r0
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	bd70      	pop	{r4, r5, r6, pc}
 8013ada:	bf00      	nop

08013adc <uxr_serialize_OBJK_Topic_Binary>:
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	460d      	mov	r5, r1
 8013ae0:	4606      	mov	r6, r0
 8013ae2:	6809      	ldr	r1, [r1, #0]
 8013ae4:	f002 fba4 	bl	8016230 <ucdr_serialize_string>
 8013ae8:	4604      	mov	r4, r0
 8013aea:	7929      	ldrb	r1, [r5, #4]
 8013aec:	4630      	mov	r0, r6
 8013aee:	f7fc f9ab 	bl	800fe48 <ucdr_serialize_bool>
 8013af2:	792b      	ldrb	r3, [r5, #4]
 8013af4:	4004      	ands	r4, r0
 8013af6:	b2e4      	uxtb	r4, r4
 8013af8:	b943      	cbnz	r3, 8013b0c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013afa:	7b29      	ldrb	r1, [r5, #12]
 8013afc:	4630      	mov	r0, r6
 8013afe:	f7fc f9a3 	bl	800fe48 <ucdr_serialize_bool>
 8013b02:	7b2b      	ldrb	r3, [r5, #12]
 8013b04:	4004      	ands	r4, r0
 8013b06:	b93b      	cbnz	r3, 8013b18 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013b08:	4620      	mov	r0, r4
 8013b0a:	bd70      	pop	{r4, r5, r6, pc}
 8013b0c:	68a9      	ldr	r1, [r5, #8]
 8013b0e:	4630      	mov	r0, r6
 8013b10:	f002 fb8e 	bl	8016230 <ucdr_serialize_string>
 8013b14:	4004      	ands	r4, r0
 8013b16:	e7f0      	b.n	8013afa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013b18:	6929      	ldr	r1, [r5, #16]
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f002 fb88 	bl	8016230 <ucdr_serialize_string>
 8013b20:	4004      	ands	r4, r0
 8013b22:	b2e4      	uxtb	r4, r4
 8013b24:	4620      	mov	r0, r4
 8013b26:	bd70      	pop	{r4, r5, r6, pc}

08013b28 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b2c:	460c      	mov	r4, r1
 8013b2e:	7809      	ldrb	r1, [r1, #0]
 8013b30:	4606      	mov	r6, r0
 8013b32:	f7fc f989 	bl	800fe48 <ucdr_serialize_bool>
 8013b36:	7823      	ldrb	r3, [r4, #0]
 8013b38:	4605      	mov	r5, r0
 8013b3a:	b96b      	cbnz	r3, 8013b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013b3c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013b40:	4630      	mov	r0, r6
 8013b42:	f7fc f981 	bl	800fe48 <ucdr_serialize_bool>
 8013b46:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013b4a:	4005      	ands	r5, r0
 8013b4c:	b2ed      	uxtb	r5, r5
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d169      	bne.n	8013c26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013b52:	4628      	mov	r0, r5
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	6861      	ldr	r1, [r4, #4]
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f7fc fbb8 	bl	80102d0 <ucdr_serialize_uint32_t>
 8013b60:	6863      	ldr	r3, [r4, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d06b      	beq.n	8013c3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d067      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b6a:	68a1      	ldr	r1, [r4, #8]
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	f002 fb5f 	bl	8016230 <ucdr_serialize_string>
 8013b72:	6863      	ldr	r3, [r4, #4]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d953      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d05e      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b7c:	68e1      	ldr	r1, [r4, #12]
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f002 fb56 	bl	8016230 <ucdr_serialize_string>
 8013b84:	6863      	ldr	r3, [r4, #4]
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	d94a      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d055      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b8e:	6921      	ldr	r1, [r4, #16]
 8013b90:	4630      	mov	r0, r6
 8013b92:	f002 fb4d 	bl	8016230 <ucdr_serialize_string>
 8013b96:	6863      	ldr	r3, [r4, #4]
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	d941      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d04c      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ba0:	6961      	ldr	r1, [r4, #20]
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f002 fb44 	bl	8016230 <ucdr_serialize_string>
 8013ba8:	6863      	ldr	r3, [r4, #4]
 8013baa:	2b04      	cmp	r3, #4
 8013bac:	d938      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d043      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bb2:	69a1      	ldr	r1, [r4, #24]
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f002 fb3b 	bl	8016230 <ucdr_serialize_string>
 8013bba:	6863      	ldr	r3, [r4, #4]
 8013bbc:	2b05      	cmp	r3, #5
 8013bbe:	d92f      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	d03a      	beq.n	8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bc4:	69e1      	ldr	r1, [r4, #28]
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	f002 fb32 	bl	8016230 <ucdr_serialize_string>
 8013bcc:	6863      	ldr	r3, [r4, #4]
 8013bce:	2b06      	cmp	r3, #6
 8013bd0:	d926      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bd2:	b390      	cbz	r0, 8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bd4:	6a21      	ldr	r1, [r4, #32]
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f002 fb2a 	bl	8016230 <ucdr_serialize_string>
 8013bdc:	6863      	ldr	r3, [r4, #4]
 8013bde:	2b07      	cmp	r3, #7
 8013be0:	d91e      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013be2:	b350      	cbz	r0, 8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013be4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013be6:	4630      	mov	r0, r6
 8013be8:	f002 fb22 	bl	8016230 <ucdr_serialize_string>
 8013bec:	6863      	ldr	r3, [r4, #4]
 8013bee:	2b08      	cmp	r3, #8
 8013bf0:	d916      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bf2:	b310      	cbz	r0, 8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bf4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f002 fb1a 	bl	8016230 <ucdr_serialize_string>
 8013bfc:	6863      	ldr	r3, [r4, #4]
 8013bfe:	2b09      	cmp	r3, #9
 8013c00:	d90e      	bls.n	8013c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c02:	b1d0      	cbz	r0, 8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c04:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013c08:	2709      	movs	r7, #9
 8013c0a:	e000      	b.n	8013c0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013c0c:	b1a8      	cbz	r0, 8013c3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c0e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013c12:	4630      	mov	r0, r6
 8013c14:	f002 fb0c 	bl	8016230 <ucdr_serialize_string>
 8013c18:	3701      	adds	r7, #1
 8013c1a:	6862      	ldr	r2, [r4, #4]
 8013c1c:	4297      	cmp	r7, r2
 8013c1e:	d3f5      	bcc.n	8013c0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013c20:	4005      	ands	r5, r0
 8013c22:	b2ed      	uxtb	r5, r5
 8013c24:	e78a      	b.n	8013b3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013c28:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f002 fad3 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8013c32:	4005      	ands	r5, r0
 8013c34:	4628      	mov	r0, r5
 8013c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c3a:	2500      	movs	r5, #0
 8013c3c:	e77e      	b.n	8013b3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c3e:	4028      	ands	r0, r5
 8013c40:	b2c5      	uxtb	r5, r0
 8013c42:	e77b      	b.n	8013b3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013c44 <uxr_serialize_OBJK_Publisher_Binary>:
 8013c44:	b570      	push	{r4, r5, r6, lr}
 8013c46:	460d      	mov	r5, r1
 8013c48:	7809      	ldrb	r1, [r1, #0]
 8013c4a:	4606      	mov	r6, r0
 8013c4c:	f7fc f8fc 	bl	800fe48 <ucdr_serialize_bool>
 8013c50:	782b      	ldrb	r3, [r5, #0]
 8013c52:	4604      	mov	r4, r0
 8013c54:	b94b      	cbnz	r3, 8013c6a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013c56:	7a29      	ldrb	r1, [r5, #8]
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f7fc f8f5 	bl	800fe48 <ucdr_serialize_bool>
 8013c5e:	7a2b      	ldrb	r3, [r5, #8]
 8013c60:	4004      	ands	r4, r0
 8013c62:	b2e4      	uxtb	r4, r4
 8013c64:	b943      	cbnz	r3, 8013c78 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013c66:	4620      	mov	r0, r4
 8013c68:	bd70      	pop	{r4, r5, r6, pc}
 8013c6a:	6869      	ldr	r1, [r5, #4]
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f002 fadf 	bl	8016230 <ucdr_serialize_string>
 8013c72:	4004      	ands	r4, r0
 8013c74:	b2e4      	uxtb	r4, r4
 8013c76:	e7ee      	b.n	8013c56 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013c78:	f105 010c 	add.w	r1, r5, #12
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7ff ff53 	bl	8013b28 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013c82:	4004      	ands	r4, r0
 8013c84:	4620      	mov	r0, r4
 8013c86:	bd70      	pop	{r4, r5, r6, pc}

08013c88 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013c88:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013c8c:	4688      	mov	r8, r1
 8013c8e:	4681      	mov	r9, r0
 8013c90:	8809      	ldrh	r1, [r1, #0]
 8013c92:	f7fc f933 	bl	800fefc <ucdr_serialize_uint16_t>
 8013c96:	4606      	mov	r6, r0
 8013c98:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013c9c:	4648      	mov	r0, r9
 8013c9e:	f7fc f8d3 	bl	800fe48 <ucdr_serialize_bool>
 8013ca2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013ca6:	4006      	ands	r6, r0
 8013ca8:	b2f5      	uxtb	r5, r6
 8013caa:	b9eb      	cbnz	r3, 8013ce8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013cac:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013cb0:	4648      	mov	r0, r9
 8013cb2:	f7fc f8c9 	bl	800fe48 <ucdr_serialize_bool>
 8013cb6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013cba:	4005      	ands	r5, r0
 8013cbc:	bb7b      	cbnz	r3, 8013d1e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013cbe:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013cc2:	4648      	mov	r0, r9
 8013cc4:	f7fc f8c0 	bl	800fe48 <ucdr_serialize_bool>
 8013cc8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013ccc:	4005      	ands	r5, r0
 8013cce:	b9f3      	cbnz	r3, 8013d0e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013cd0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013cd4:	4648      	mov	r0, r9
 8013cd6:	f7fc f8b7 	bl	800fe48 <ucdr_serialize_bool>
 8013cda:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013cde:	4005      	ands	r5, r0
 8013ce0:	b94b      	cbnz	r3, 8013cf6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013ce8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013cec:	4648      	mov	r0, r9
 8013cee:	f7fc f905 	bl	800fefc <ucdr_serialize_uint16_t>
 8013cf2:	4005      	ands	r5, r0
 8013cf4:	e7da      	b.n	8013cac <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013cf6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013cfa:	f108 011c 	add.w	r1, r8, #28
 8013cfe:	4648      	mov	r0, r9
 8013d00:	f002 fa6a 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8013d04:	4028      	ands	r0, r5
 8013d06:	b2c5      	uxtb	r5, r0
 8013d08:	4628      	mov	r0, r5
 8013d0a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013d0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d12:	4648      	mov	r0, r9
 8013d14:	f7fc fadc 	bl	80102d0 <ucdr_serialize_uint32_t>
 8013d18:	4028      	ands	r0, r5
 8013d1a:	b2c5      	uxtb	r5, r0
 8013d1c:	e7d8      	b.n	8013cd0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013d1e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013d22:	4648      	mov	r0, r9
 8013d24:	f7fc fad4 	bl	80102d0 <ucdr_serialize_uint32_t>
 8013d28:	4028      	ands	r0, r5
 8013d2a:	b2c5      	uxtb	r5, r0
 8013d2c:	e7c7      	b.n	8013cbe <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013d2e:	bf00      	nop

08013d30 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d32:	2202      	movs	r2, #2
 8013d34:	460d      	mov	r5, r1
 8013d36:	4606      	mov	r6, r0
 8013d38:	f002 f956 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	78a9      	ldrb	r1, [r5, #2]
 8013d40:	4630      	mov	r0, r6
 8013d42:	f7fc f881 	bl	800fe48 <ucdr_serialize_bool>
 8013d46:	78ab      	ldrb	r3, [r5, #2]
 8013d48:	4004      	ands	r4, r0
 8013d4a:	b2e4      	uxtb	r4, r4
 8013d4c:	b90b      	cbnz	r3, 8013d52 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013d4e:	4620      	mov	r0, r4
 8013d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d52:	f105 0108 	add.w	r1, r5, #8
 8013d56:	4630      	mov	r0, r6
 8013d58:	f7ff ff96 	bl	8013c88 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013d62:	4630      	mov	r0, r6
 8013d64:	f7fc f870 	bl	800fe48 <ucdr_serialize_bool>
 8013d68:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013d6c:	4038      	ands	r0, r7
 8013d6e:	b2c7      	uxtb	r7, r0
 8013d70:	b913      	cbnz	r3, 8013d78 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013d72:	403c      	ands	r4, r7
 8013d74:	4620      	mov	r0, r4
 8013d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d78:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7fc fcfd 	bl	801077c <ucdr_serialize_uint64_t>
 8013d82:	4007      	ands	r7, r0
 8013d84:	e7f5      	b.n	8013d72 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013d86:	bf00      	nop

08013d88 <uxr_deserialize_ObjectVariant>:
 8013d88:	b570      	push	{r4, r5, r6, lr}
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	460e      	mov	r6, r1
 8013d8e:	f7fc f89f 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013d92:	b168      	cbz	r0, 8013db0 <uxr_deserialize_ObjectVariant+0x28>
 8013d94:	7833      	ldrb	r3, [r6, #0]
 8013d96:	4604      	mov	r4, r0
 8013d98:	3b01      	subs	r3, #1
 8013d9a:	2b0d      	cmp	r3, #13
 8013d9c:	d809      	bhi.n	8013db2 <uxr_deserialize_ObjectVariant+0x2a>
 8013d9e:	e8df f003 	tbb	[pc, r3]
 8013da2:	0a41      	.short	0x0a41
 8013da4:	0a0a2323 	.word	0x0a0a2323
 8013da8:	10080a0a 	.word	0x10080a0a
 8013dac:	565c1010 	.word	0x565c1010
 8013db0:	2400      	movs	r4, #0
 8013db2:	4620      	mov	r0, r4
 8013db4:	bd70      	pop	{r4, r5, r6, pc}
 8013db6:	1d31      	adds	r1, r6, #4
 8013db8:	4628      	mov	r0, r5
 8013dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dbe:	f7ff be41 	b.w	8013a44 <uxr_deserialize_DATAWRITER_Representation>
 8013dc2:	1d31      	adds	r1, r6, #4
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	f7fc f883 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d0f0      	beq.n	8013db0 <uxr_deserialize_ObjectVariant+0x28>
 8013dce:	7933      	ldrb	r3, [r6, #4]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d001      	beq.n	8013dd8 <uxr_deserialize_ObjectVariant+0x50>
 8013dd4:	2b02      	cmp	r3, #2
 8013dd6:	d1ec      	bne.n	8013db2 <uxr_deserialize_ObjectVariant+0x2a>
 8013dd8:	68b1      	ldr	r1, [r6, #8]
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de4:	f002 ba34 	b.w	8016250 <ucdr_deserialize_string>
 8013de8:	1d31      	adds	r1, r6, #4
 8013dea:	4628      	mov	r0, r5
 8013dec:	f7fc f870 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013df0:	4604      	mov	r4, r0
 8013df2:	b170      	cbz	r0, 8013e12 <uxr_deserialize_ObjectVariant+0x8a>
 8013df4:	7933      	ldrb	r3, [r6, #4]
 8013df6:	2b02      	cmp	r3, #2
 8013df8:	d04c      	beq.n	8013e94 <uxr_deserialize_ObjectVariant+0x10c>
 8013dfa:	2b03      	cmp	r3, #3
 8013dfc:	d109      	bne.n	8013e12 <uxr_deserialize_ObjectVariant+0x8a>
 8013dfe:	f106 0308 	add.w	r3, r6, #8
 8013e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e06:	f106 010c 	add.w	r1, r6, #12
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f002 f9f6 	bl	80161fc <ucdr_deserialize_sequence_uint8_t>
 8013e10:	4604      	mov	r4, r0
 8013e12:	2202      	movs	r2, #2
 8013e14:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f002 f949 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013e1e:	4020      	ands	r0, r4
 8013e20:	b2c4      	uxtb	r4, r0
 8013e22:	e7c6      	b.n	8013db2 <uxr_deserialize_ObjectVariant+0x2a>
 8013e24:	1d31      	adds	r1, r6, #4
 8013e26:	4628      	mov	r0, r5
 8013e28:	f7fc f852 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	b130      	cbz	r0, 8013e3e <uxr_deserialize_ObjectVariant+0xb6>
 8013e30:	7933      	ldrb	r3, [r6, #4]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d036      	beq.n	8013ea4 <uxr_deserialize_ObjectVariant+0x11c>
 8013e36:	2b03      	cmp	r3, #3
 8013e38:	d03c      	beq.n	8013eb4 <uxr_deserialize_ObjectVariant+0x12c>
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d032      	beq.n	8013ea4 <uxr_deserialize_ObjectVariant+0x11c>
 8013e3e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e42:	4628      	mov	r0, r5
 8013e44:	f7fc fdea 	bl	8010a1c <ucdr_deserialize_int16_t>
 8013e48:	4020      	ands	r0, r4
 8013e4a:	b2c4      	uxtb	r4, r0
 8013e4c:	e7b1      	b.n	8013db2 <uxr_deserialize_ObjectVariant+0x2a>
 8013e4e:	1d31      	adds	r1, r6, #4
 8013e50:	4628      	mov	r0, r5
 8013e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e56:	f7ff bcab 	b.w	80137b0 <uxr_deserialize_CLIENT_Representation>
 8013e5a:	2204      	movs	r2, #4
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	18b1      	adds	r1, r6, r2
 8013e60:	f002 f926 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013e64:	4604      	mov	r4, r0
 8013e66:	2202      	movs	r2, #2
 8013e68:	f106 0108 	add.w	r1, r6, #8
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f002 f91f 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013e72:	4004      	ands	r4, r0
 8013e74:	2202      	movs	r2, #2
 8013e76:	f106 010a 	add.w	r1, r6, #10
 8013e7a:	4628      	mov	r0, r5
 8013e7c:	b2e4      	uxtb	r4, r4
 8013e7e:	f002 f917 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013e82:	4603      	mov	r3, r0
 8013e84:	f106 010c 	add.w	r1, r6, #12
 8013e88:	4628      	mov	r0, r5
 8013e8a:	401c      	ands	r4, r3
 8013e8c:	f7fb fff2 	bl	800fe74 <ucdr_deserialize_bool>
 8013e90:	4004      	ands	r4, r0
 8013e92:	e78e      	b.n	8013db2 <uxr_deserialize_ObjectVariant+0x2a>
 8013e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e98:	68b1      	ldr	r1, [r6, #8]
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	f002 f9d8 	bl	8016250 <ucdr_deserialize_string>
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	e7b6      	b.n	8013e12 <uxr_deserialize_ObjectVariant+0x8a>
 8013ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ea8:	68b1      	ldr	r1, [r6, #8]
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f002 f9d0 	bl	8016250 <ucdr_deserialize_string>
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	e7c4      	b.n	8013e3e <uxr_deserialize_ObjectVariant+0xb6>
 8013eb4:	f106 0308 	add.w	r3, r6, #8
 8013eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ebc:	f106 010c 	add.w	r1, r6, #12
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f002 f99b 	bl	80161fc <ucdr_deserialize_sequence_uint8_t>
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	e7b9      	b.n	8013e3e <uxr_deserialize_ObjectVariant+0xb6>
 8013eca:	bf00      	nop

08013ecc <uxr_deserialize_BaseObjectRequest>:
 8013ecc:	b570      	push	{r4, r5, r6, lr}
 8013ece:	2202      	movs	r2, #2
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	460e      	mov	r6, r1
 8013ed4:	f002 f8ec 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013ed8:	2202      	movs	r2, #2
 8013eda:	4604      	mov	r4, r0
 8013edc:	4628      	mov	r0, r5
 8013ede:	18b1      	adds	r1, r6, r2
 8013ee0:	f002 f8e6 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8013ee4:	4020      	ands	r0, r4
 8013ee6:	b2c0      	uxtb	r0, r0
 8013ee8:	bd70      	pop	{r4, r5, r6, pc}
 8013eea:	bf00      	nop

08013eec <uxr_serialize_ActivityInfoVariant>:
 8013eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef0:	460e      	mov	r6, r1
 8013ef2:	7809      	ldrb	r1, [r1, #0]
 8013ef4:	4680      	mov	r8, r0
 8013ef6:	f7fb ffd5 	bl	800fea4 <ucdr_serialize_uint8_t>
 8013efa:	4607      	mov	r7, r0
 8013efc:	b138      	cbz	r0, 8013f0e <uxr_serialize_ActivityInfoVariant+0x22>
 8013efe:	7833      	ldrb	r3, [r6, #0]
 8013f00:	2b06      	cmp	r3, #6
 8013f02:	f000 8081 	beq.w	8014008 <uxr_serialize_ActivityInfoVariant+0x11c>
 8013f06:	2b0d      	cmp	r3, #13
 8013f08:	d014      	beq.n	8013f34 <uxr_serialize_ActivityInfoVariant+0x48>
 8013f0a:	2b05      	cmp	r3, #5
 8013f0c:	d002      	beq.n	8013f14 <uxr_serialize_ActivityInfoVariant+0x28>
 8013f0e:	4638      	mov	r0, r7
 8013f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f14:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013f18:	4640      	mov	r0, r8
 8013f1a:	f7fc fcff 	bl	801091c <ucdr_serialize_int16_t>
 8013f1e:	4607      	mov	r7, r0
 8013f20:	4640      	mov	r0, r8
 8013f22:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8013f26:	f7fc fc29 	bl	801077c <ucdr_serialize_uint64_t>
 8013f2a:	4038      	ands	r0, r7
 8013f2c:	b2c7      	uxtb	r7, r0
 8013f2e:	4638      	mov	r0, r7
 8013f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f34:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013f38:	4640      	mov	r0, r8
 8013f3a:	f7fc fcef 	bl	801091c <ucdr_serialize_int16_t>
 8013f3e:	68f1      	ldr	r1, [r6, #12]
 8013f40:	4607      	mov	r7, r0
 8013f42:	4640      	mov	r0, r8
 8013f44:	f7fc f9c4 	bl	80102d0 <ucdr_serialize_uint32_t>
 8013f48:	68f3      	ldr	r3, [r6, #12]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0ed      	beq.n	8013f2a <uxr_serialize_ActivityInfoVariant+0x3e>
 8013f4e:	b318      	cbz	r0, 8013f98 <uxr_serialize_ActivityInfoVariant+0xac>
 8013f50:	f106 090c 	add.w	r9, r6, #12
 8013f54:	2400      	movs	r4, #0
 8013f56:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013f5a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8013f5e:	7c29      	ldrb	r1, [r5, #16]
 8013f60:	4640      	mov	r0, r8
 8013f62:	f7fb ff9f 	bl	800fea4 <ucdr_serialize_uint8_t>
 8013f66:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8013f6a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d051      	beq.n	8014016 <uxr_serialize_ActivityInfoVariant+0x12a>
 8013f72:	7c2b      	ldrb	r3, [r5, #16]
 8013f74:	00c9      	lsls	r1, r1, #3
 8013f76:	2b03      	cmp	r3, #3
 8013f78:	d854      	bhi.n	8014024 <uxr_serialize_ActivityInfoVariant+0x138>
 8013f7a:	e8df f003 	tbb	[pc, r3]
 8013f7e:	2133      	.short	0x2133
 8013f80:	020f      	.short	0x020f
 8013f82:	4449      	add	r1, r9
 8013f84:	4640      	mov	r0, r8
 8013f86:	6889      	ldr	r1, [r1, #8]
 8013f88:	f002 f952 	bl	8016230 <ucdr_serialize_string>
 8013f8c:	3401      	adds	r4, #1
 8013f8e:	68f2      	ldr	r2, [r6, #12]
 8013f90:	4294      	cmp	r4, r2
 8013f92:	d244      	bcs.n	801401e <uxr_serialize_ActivityInfoVariant+0x132>
 8013f94:	2800      	cmp	r0, #0
 8013f96:	d1de      	bne.n	8013f56 <uxr_serialize_ActivityInfoVariant+0x6a>
 8013f98:	2700      	movs	r7, #0
 8013f9a:	e7b8      	b.n	8013f0e <uxr_serialize_ActivityInfoVariant+0x22>
 8013f9c:	3108      	adds	r1, #8
 8013f9e:	44a2      	add	sl, r4
 8013fa0:	2210      	movs	r2, #16
 8013fa2:	4640      	mov	r0, r8
 8013fa4:	4449      	add	r1, r9
 8013fa6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013faa:	f002 f81d 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013fae:	4605      	mov	r5, r0
 8013fb0:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8013fb4:	4640      	mov	r0, r8
 8013fb6:	f7fc f98b 	bl	80102d0 <ucdr_serialize_uint32_t>
 8013fba:	4028      	ands	r0, r5
 8013fbc:	b2c0      	uxtb	r0, r0
 8013fbe:	e7e5      	b.n	8013f8c <uxr_serialize_ActivityInfoVariant+0xa0>
 8013fc0:	3108      	adds	r1, #8
 8013fc2:	44a2      	add	sl, r4
 8013fc4:	2204      	movs	r2, #4
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	4449      	add	r1, r9
 8013fca:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013fce:	f002 f80b 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013fd2:	4605      	mov	r5, r0
 8013fd4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8013fd8:	4640      	mov	r0, r8
 8013fda:	f7fb ff8f 	bl	800fefc <ucdr_serialize_uint16_t>
 8013fde:	4028      	ands	r0, r5
 8013fe0:	b2c0      	uxtb	r0, r0
 8013fe2:	e7d3      	b.n	8013f8c <uxr_serialize_ActivityInfoVariant+0xa0>
 8013fe4:	3108      	adds	r1, #8
 8013fe6:	44a2      	add	sl, r4
 8013fe8:	2202      	movs	r2, #2
 8013fea:	4640      	mov	r0, r8
 8013fec:	4449      	add	r1, r9
 8013fee:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013ff2:	f001 fff9 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	f7fb ff51 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014002:	4028      	ands	r0, r5
 8014004:	b2c0      	uxtb	r0, r0
 8014006:	e7c1      	b.n	8013f8c <uxr_serialize_ActivityInfoVariant+0xa0>
 8014008:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801400c:	4640      	mov	r0, r8
 801400e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014012:	f7fc bc83 	b.w	801091c <ucdr_serialize_int16_t>
 8014016:	3401      	adds	r4, #1
 8014018:	68f2      	ldr	r2, [r6, #12]
 801401a:	42a2      	cmp	r2, r4
 801401c:	d8bc      	bhi.n	8013f98 <uxr_serialize_ActivityInfoVariant+0xac>
 801401e:	4007      	ands	r7, r0
 8014020:	b2ff      	uxtb	r7, r7
 8014022:	e774      	b.n	8013f0e <uxr_serialize_ActivityInfoVariant+0x22>
 8014024:	3401      	adds	r4, #1
 8014026:	68f3      	ldr	r3, [r6, #12]
 8014028:	3518      	adds	r5, #24
 801402a:	429c      	cmp	r4, r3
 801402c:	d397      	bcc.n	8013f5e <uxr_serialize_ActivityInfoVariant+0x72>
 801402e:	e76e      	b.n	8013f0e <uxr_serialize_ActivityInfoVariant+0x22>

08014030 <uxr_deserialize_BaseObjectReply>:
 8014030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014034:	2202      	movs	r2, #2
 8014036:	4606      	mov	r6, r0
 8014038:	460f      	mov	r7, r1
 801403a:	f002 f839 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 801403e:	2202      	movs	r2, #2
 8014040:	4605      	mov	r5, r0
 8014042:	4630      	mov	r0, r6
 8014044:	18b9      	adds	r1, r7, r2
 8014046:	f002 f833 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 801404a:	4680      	mov	r8, r0
 801404c:	1d39      	adds	r1, r7, #4
 801404e:	4630      	mov	r0, r6
 8014050:	f7fb ff3e 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8014054:	ea05 0508 	and.w	r5, r5, r8
 8014058:	4604      	mov	r4, r0
 801405a:	1d79      	adds	r1, r7, #5
 801405c:	4630      	mov	r0, r6
 801405e:	402c      	ands	r4, r5
 8014060:	f7fb ff36 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8014064:	4020      	ands	r0, r4
 8014066:	b2c0      	uxtb	r0, r0
 8014068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801406c <uxr_serialize_ReadSpecification>:
 801406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801406e:	460e      	mov	r6, r1
 8014070:	4607      	mov	r7, r0
 8014072:	7809      	ldrb	r1, [r1, #0]
 8014074:	f7fb ff16 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014078:	4604      	mov	r4, r0
 801407a:	7871      	ldrb	r1, [r6, #1]
 801407c:	4638      	mov	r0, r7
 801407e:	f7fb ff11 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014082:	4004      	ands	r4, r0
 8014084:	78b1      	ldrb	r1, [r6, #2]
 8014086:	4638      	mov	r0, r7
 8014088:	f7fb fede 	bl	800fe48 <ucdr_serialize_bool>
 801408c:	78b3      	ldrb	r3, [r6, #2]
 801408e:	b2e4      	uxtb	r4, r4
 8014090:	4004      	ands	r4, r0
 8014092:	b943      	cbnz	r3, 80140a6 <uxr_serialize_ReadSpecification+0x3a>
 8014094:	7a31      	ldrb	r1, [r6, #8]
 8014096:	4638      	mov	r0, r7
 8014098:	f7fb fed6 	bl	800fe48 <ucdr_serialize_bool>
 801409c:	7a33      	ldrb	r3, [r6, #8]
 801409e:	4004      	ands	r4, r0
 80140a0:	b93b      	cbnz	r3, 80140b2 <uxr_serialize_ReadSpecification+0x46>
 80140a2:	4620      	mov	r0, r4
 80140a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a6:	6871      	ldr	r1, [r6, #4]
 80140a8:	4638      	mov	r0, r7
 80140aa:	f002 f8c1 	bl	8016230 <ucdr_serialize_string>
 80140ae:	4004      	ands	r4, r0
 80140b0:	e7f0      	b.n	8014094 <uxr_serialize_ReadSpecification+0x28>
 80140b2:	8971      	ldrh	r1, [r6, #10]
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7fb ff21 	bl	800fefc <ucdr_serialize_uint16_t>
 80140ba:	4605      	mov	r5, r0
 80140bc:	89b1      	ldrh	r1, [r6, #12]
 80140be:	4638      	mov	r0, r7
 80140c0:	f7fb ff1c 	bl	800fefc <ucdr_serialize_uint16_t>
 80140c4:	4005      	ands	r5, r0
 80140c6:	89f1      	ldrh	r1, [r6, #14]
 80140c8:	4638      	mov	r0, r7
 80140ca:	b2ed      	uxtb	r5, r5
 80140cc:	f7fb ff16 	bl	800fefc <ucdr_serialize_uint16_t>
 80140d0:	8a31      	ldrh	r1, [r6, #16]
 80140d2:	4025      	ands	r5, r4
 80140d4:	4604      	mov	r4, r0
 80140d6:	4638      	mov	r0, r7
 80140d8:	4025      	ands	r5, r4
 80140da:	f7fb ff0f 	bl	800fefc <ucdr_serialize_uint16_t>
 80140de:	ea00 0405 	and.w	r4, r0, r5
 80140e2:	4620      	mov	r0, r4
 80140e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e6:	bf00      	nop

080140e8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80140e8:	f7ff bb0a 	b.w	8013700 <uxr_serialize_CLIENT_Representation>

080140ec <uxr_serialize_CREATE_Payload>:
 80140ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ee:	2202      	movs	r2, #2
 80140f0:	4607      	mov	r7, r0
 80140f2:	460e      	mov	r6, r1
 80140f4:	f001 ff78 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80140f8:	2202      	movs	r2, #2
 80140fa:	4605      	mov	r5, r0
 80140fc:	4638      	mov	r0, r7
 80140fe:	18b1      	adds	r1, r6, r2
 8014100:	f001 ff72 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014104:	7931      	ldrb	r1, [r6, #4]
 8014106:	4604      	mov	r4, r0
 8014108:	4638      	mov	r0, r7
 801410a:	f7fb fecb 	bl	800fea4 <ucdr_serialize_uint8_t>
 801410e:	b170      	cbz	r0, 801412e <uxr_serialize_CREATE_Payload+0x42>
 8014110:	7933      	ldrb	r3, [r6, #4]
 8014112:	402c      	ands	r4, r5
 8014114:	3b01      	subs	r3, #1
 8014116:	b2e4      	uxtb	r4, r4
 8014118:	2b0d      	cmp	r3, #13
 801411a:	d809      	bhi.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 801411c:	e8df f003 	tbb	[pc, r3]
 8014120:	23230a4c 	.word	0x23230a4c
 8014124:	0a0a0a0a 	.word	0x0a0a0a0a
 8014128:	12121208 	.word	0x12121208
 801412c:	3e45      	.short	0x3e45
 801412e:	2400      	movs	r4, #0
 8014130:	4620      	mov	r0, r4
 8014132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014134:	f106 0108 	add.w	r1, r6, #8
 8014138:	4638      	mov	r0, r7
 801413a:	f7ff fbe7 	bl	801390c <uxr_serialize_DATAWRITER_Representation>
 801413e:	4004      	ands	r4, r0
 8014140:	4620      	mov	r0, r4
 8014142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014144:	7a31      	ldrb	r1, [r6, #8]
 8014146:	4638      	mov	r0, r7
 8014148:	f7fb feac 	bl	800fea4 <ucdr_serialize_uint8_t>
 801414c:	2800      	cmp	r0, #0
 801414e:	d0ee      	beq.n	801412e <uxr_serialize_CREATE_Payload+0x42>
 8014150:	7a33      	ldrb	r3, [r6, #8]
 8014152:	2b01      	cmp	r3, #1
 8014154:	d001      	beq.n	801415a <uxr_serialize_CREATE_Payload+0x6e>
 8014156:	2b02      	cmp	r3, #2
 8014158:	d1ea      	bne.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 801415a:	68f1      	ldr	r1, [r6, #12]
 801415c:	4638      	mov	r0, r7
 801415e:	f002 f867 	bl	8016230 <ucdr_serialize_string>
 8014162:	4004      	ands	r4, r0
 8014164:	e7e4      	b.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 8014166:	7a31      	ldrb	r1, [r6, #8]
 8014168:	4638      	mov	r0, r7
 801416a:	f7fb fe9b 	bl	800fea4 <ucdr_serialize_uint8_t>
 801416e:	4605      	mov	r5, r0
 8014170:	b158      	cbz	r0, 801418a <uxr_serialize_CREATE_Payload+0x9e>
 8014172:	7a33      	ldrb	r3, [r6, #8]
 8014174:	2b02      	cmp	r3, #2
 8014176:	d034      	beq.n	80141e2 <uxr_serialize_CREATE_Payload+0xf6>
 8014178:	2b03      	cmp	r3, #3
 801417a:	d106      	bne.n	801418a <uxr_serialize_CREATE_Payload+0x9e>
 801417c:	68f2      	ldr	r2, [r6, #12]
 801417e:	f106 0110 	add.w	r1, r6, #16
 8014182:	4638      	mov	r0, r7
 8014184:	f002 f828 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8014188:	4605      	mov	r5, r0
 801418a:	2202      	movs	r2, #2
 801418c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014190:	4638      	mov	r0, r7
 8014192:	f001 ff29 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014196:	4028      	ands	r0, r5
 8014198:	4004      	ands	r4, r0
 801419a:	e7c9      	b.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 801419c:	f106 0108 	add.w	r1, r6, #8
 80141a0:	4638      	mov	r0, r7
 80141a2:	f7ff faad 	bl	8013700 <uxr_serialize_CLIENT_Representation>
 80141a6:	4004      	ands	r4, r0
 80141a8:	e7c2      	b.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 80141aa:	f106 0108 	add.w	r1, r6, #8
 80141ae:	4638      	mov	r0, r7
 80141b0:	f7ff fb62 	bl	8013878 <uxr_serialize_AGENT_Representation>
 80141b4:	4004      	ands	r4, r0
 80141b6:	e7bb      	b.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 80141b8:	7a31      	ldrb	r1, [r6, #8]
 80141ba:	4638      	mov	r0, r7
 80141bc:	f7fb fe72 	bl	800fea4 <ucdr_serialize_uint8_t>
 80141c0:	4605      	mov	r5, r0
 80141c2:	b130      	cbz	r0, 80141d2 <uxr_serialize_CREATE_Payload+0xe6>
 80141c4:	7a33      	ldrb	r3, [r6, #8]
 80141c6:	2b02      	cmp	r3, #2
 80141c8:	d011      	beq.n	80141ee <uxr_serialize_CREATE_Payload+0x102>
 80141ca:	2b03      	cmp	r3, #3
 80141cc:	d015      	beq.n	80141fa <uxr_serialize_CREATE_Payload+0x10e>
 80141ce:	2b01      	cmp	r3, #1
 80141d0:	d00d      	beq.n	80141ee <uxr_serialize_CREATE_Payload+0x102>
 80141d2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80141d6:	4638      	mov	r0, r7
 80141d8:	f7fc fba0 	bl	801091c <ucdr_serialize_int16_t>
 80141dc:	4028      	ands	r0, r5
 80141de:	4004      	ands	r4, r0
 80141e0:	e7a6      	b.n	8014130 <uxr_serialize_CREATE_Payload+0x44>
 80141e2:	68f1      	ldr	r1, [r6, #12]
 80141e4:	4638      	mov	r0, r7
 80141e6:	f002 f823 	bl	8016230 <ucdr_serialize_string>
 80141ea:	4605      	mov	r5, r0
 80141ec:	e7cd      	b.n	801418a <uxr_serialize_CREATE_Payload+0x9e>
 80141ee:	68f1      	ldr	r1, [r6, #12]
 80141f0:	4638      	mov	r0, r7
 80141f2:	f002 f81d 	bl	8016230 <ucdr_serialize_string>
 80141f6:	4605      	mov	r5, r0
 80141f8:	e7eb      	b.n	80141d2 <uxr_serialize_CREATE_Payload+0xe6>
 80141fa:	68f2      	ldr	r2, [r6, #12]
 80141fc:	f106 0110 	add.w	r1, r6, #16
 8014200:	4638      	mov	r0, r7
 8014202:	f001 ffe9 	bl	80161d8 <ucdr_serialize_sequence_uint8_t>
 8014206:	4605      	mov	r5, r0
 8014208:	e7e3      	b.n	80141d2 <uxr_serialize_CREATE_Payload+0xe6>
 801420a:	bf00      	nop

0801420c <uxr_deserialize_GET_INFO_Payload>:
 801420c:	b570      	push	{r4, r5, r6, lr}
 801420e:	2202      	movs	r2, #2
 8014210:	4605      	mov	r5, r0
 8014212:	460e      	mov	r6, r1
 8014214:	f001 ff4c 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8014218:	2202      	movs	r2, #2
 801421a:	4604      	mov	r4, r0
 801421c:	4628      	mov	r0, r5
 801421e:	18b1      	adds	r1, r6, r2
 8014220:	f001 ff46 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8014224:	4603      	mov	r3, r0
 8014226:	1d31      	adds	r1, r6, #4
 8014228:	4628      	mov	r0, r5
 801422a:	401c      	ands	r4, r3
 801422c:	f7fc f980 	bl	8010530 <ucdr_deserialize_uint32_t>
 8014230:	b2e4      	uxtb	r4, r4
 8014232:	4020      	ands	r0, r4
 8014234:	bd70      	pop	{r4, r5, r6, pc}
 8014236:	bf00      	nop

08014238 <uxr_serialize_DELETE_Payload>:
 8014238:	b570      	push	{r4, r5, r6, lr}
 801423a:	2202      	movs	r2, #2
 801423c:	4605      	mov	r5, r0
 801423e:	460e      	mov	r6, r1
 8014240:	f001 fed2 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014244:	2202      	movs	r2, #2
 8014246:	4604      	mov	r4, r0
 8014248:	4628      	mov	r0, r5
 801424a:	18b1      	adds	r1, r6, r2
 801424c:	f001 fecc 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014250:	4020      	ands	r0, r4
 8014252:	b2c0      	uxtb	r0, r0
 8014254:	bd70      	pop	{r4, r5, r6, pc}
 8014256:	bf00      	nop

08014258 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801425c:	460e      	mov	r6, r1
 801425e:	4605      	mov	r5, r0
 8014260:	f7fb fe36 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8014264:	4604      	mov	r4, r0
 8014266:	1c71      	adds	r1, r6, #1
 8014268:	4628      	mov	r0, r5
 801426a:	f7fb fe31 	bl	800fed0 <ucdr_deserialize_uint8_t>
 801426e:	2204      	movs	r2, #4
 8014270:	4681      	mov	r9, r0
 8014272:	4628      	mov	r0, r5
 8014274:	18b1      	adds	r1, r6, r2
 8014276:	f001 ff1b 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 801427a:	f106 0108 	add.w	r1, r6, #8
 801427e:	4680      	mov	r8, r0
 8014280:	2202      	movs	r2, #2
 8014282:	4628      	mov	r0, r5
 8014284:	f001 ff14 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8014288:	ea04 0309 	and.w	r3, r4, r9
 801428c:	4607      	mov	r7, r0
 801428e:	2202      	movs	r2, #2
 8014290:	b2db      	uxtb	r3, r3
 8014292:	f106 010a 	add.w	r1, r6, #10
 8014296:	4628      	mov	r0, r5
 8014298:	ea03 0408 	and.w	r4, r3, r8
 801429c:	f001 ff08 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80142a0:	4603      	mov	r3, r0
 80142a2:	4628      	mov	r0, r5
 80142a4:	403c      	ands	r4, r7
 80142a6:	f106 010c 	add.w	r1, r6, #12
 80142aa:	461d      	mov	r5, r3
 80142ac:	f7fb fde2 	bl	800fe74 <ucdr_deserialize_bool>
 80142b0:	4025      	ands	r5, r4
 80142b2:	4028      	ands	r0, r5
 80142b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080142b8 <uxr_deserialize_STATUS_Payload>:
 80142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	2202      	movs	r2, #2
 80142be:	4606      	mov	r6, r0
 80142c0:	460f      	mov	r7, r1
 80142c2:	f001 fef5 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80142c6:	2202      	movs	r2, #2
 80142c8:	4605      	mov	r5, r0
 80142ca:	4630      	mov	r0, r6
 80142cc:	18b9      	adds	r1, r7, r2
 80142ce:	f001 feef 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 80142d2:	4680      	mov	r8, r0
 80142d4:	1d39      	adds	r1, r7, #4
 80142d6:	4630      	mov	r0, r6
 80142d8:	f7fb fdfa 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80142dc:	ea05 0508 	and.w	r5, r5, r8
 80142e0:	4604      	mov	r4, r0
 80142e2:	1d79      	adds	r1, r7, #5
 80142e4:	4630      	mov	r0, r6
 80142e6:	402c      	ands	r4, r5
 80142e8:	f7fb fdf2 	bl	800fed0 <ucdr_deserialize_uint8_t>
 80142ec:	4020      	ands	r0, r4
 80142ee:	b2c0      	uxtb	r0, r0
 80142f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142f4 <uxr_serialize_INFO_Payload>:
 80142f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f8:	2202      	movs	r2, #2
 80142fa:	460c      	mov	r4, r1
 80142fc:	4605      	mov	r5, r0
 80142fe:	f001 fe73 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014302:	2202      	movs	r2, #2
 8014304:	4680      	mov	r8, r0
 8014306:	4628      	mov	r0, r5
 8014308:	18a1      	adds	r1, r4, r2
 801430a:	f001 fe6d 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 801430e:	4607      	mov	r7, r0
 8014310:	7921      	ldrb	r1, [r4, #4]
 8014312:	4628      	mov	r0, r5
 8014314:	f7fb fdc6 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014318:	ea08 0807 	and.w	r8, r8, r7
 801431c:	4606      	mov	r6, r0
 801431e:	7961      	ldrb	r1, [r4, #5]
 8014320:	4628      	mov	r0, r5
 8014322:	ea06 0608 	and.w	r6, r6, r8
 8014326:	f7fb fdbd 	bl	800fea4 <ucdr_serialize_uint8_t>
 801432a:	7a21      	ldrb	r1, [r4, #8]
 801432c:	4030      	ands	r0, r6
 801432e:	b2c7      	uxtb	r7, r0
 8014330:	4628      	mov	r0, r5
 8014332:	f7fb fd89 	bl	800fe48 <ucdr_serialize_bool>
 8014336:	7a23      	ldrb	r3, [r4, #8]
 8014338:	4606      	mov	r6, r0
 801433a:	b96b      	cbnz	r3, 8014358 <uxr_serialize_INFO_Payload+0x64>
 801433c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014340:	4628      	mov	r0, r5
 8014342:	f7fb fd81 	bl	800fe48 <ucdr_serialize_bool>
 8014346:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801434a:	4030      	ands	r0, r6
 801434c:	b2c6      	uxtb	r6, r0
 801434e:	b983      	cbnz	r3, 8014372 <uxr_serialize_INFO_Payload+0x7e>
 8014350:	ea06 0007 	and.w	r0, r6, r7
 8014354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014358:	7b21      	ldrb	r1, [r4, #12]
 801435a:	4628      	mov	r0, r5
 801435c:	f7fb fda2 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014360:	b188      	cbz	r0, 8014386 <uxr_serialize_INFO_Payload+0x92>
 8014362:	f104 010c 	add.w	r1, r4, #12
 8014366:	4628      	mov	r0, r5
 8014368:	f7ff faf8 	bl	801395c <uxr_serialize_ObjectVariant.part.0>
 801436c:	4030      	ands	r0, r6
 801436e:	b2c6      	uxtb	r6, r0
 8014370:	e7e4      	b.n	801433c <uxr_serialize_INFO_Payload+0x48>
 8014372:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014376:	4628      	mov	r0, r5
 8014378:	f7ff fdb8 	bl	8013eec <uxr_serialize_ActivityInfoVariant>
 801437c:	4006      	ands	r6, r0
 801437e:	ea06 0007 	and.w	r0, r6, r7
 8014382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014386:	4606      	mov	r6, r0
 8014388:	e7d8      	b.n	801433c <uxr_serialize_INFO_Payload+0x48>
 801438a:	bf00      	nop

0801438c <uxr_serialize_READ_DATA_Payload>:
 801438c:	b570      	push	{r4, r5, r6, lr}
 801438e:	2202      	movs	r2, #2
 8014390:	4605      	mov	r5, r0
 8014392:	460e      	mov	r6, r1
 8014394:	f001 fe28 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 8014398:	2202      	movs	r2, #2
 801439a:	4604      	mov	r4, r0
 801439c:	4628      	mov	r0, r5
 801439e:	18b1      	adds	r1, r6, r2
 80143a0:	f001 fe22 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80143a4:	4603      	mov	r3, r0
 80143a6:	1d31      	adds	r1, r6, #4
 80143a8:	4628      	mov	r0, r5
 80143aa:	401c      	ands	r4, r3
 80143ac:	f7ff fe5e 	bl	801406c <uxr_serialize_ReadSpecification>
 80143b0:	b2e4      	uxtb	r4, r4
 80143b2:	4020      	ands	r0, r4
 80143b4:	bd70      	pop	{r4, r5, r6, pc}
 80143b6:	bf00      	nop

080143b8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80143b8:	b570      	push	{r4, r5, r6, lr}
 80143ba:	2202      	movs	r2, #2
 80143bc:	4605      	mov	r5, r0
 80143be:	460e      	mov	r6, r1
 80143c0:	f001 fe12 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80143c4:	2202      	movs	r2, #2
 80143c6:	4604      	mov	r4, r0
 80143c8:	4628      	mov	r0, r5
 80143ca:	18b1      	adds	r1, r6, r2
 80143cc:	f001 fe0c 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80143d0:	4020      	ands	r0, r4
 80143d2:	b2c0      	uxtb	r0, r0
 80143d4:	bd70      	pop	{r4, r5, r6, pc}
 80143d6:	bf00      	nop

080143d8 <uxr_serialize_ACKNACK_Payload>:
 80143d8:	b570      	push	{r4, r5, r6, lr}
 80143da:	460c      	mov	r4, r1
 80143dc:	4605      	mov	r5, r0
 80143de:	460e      	mov	r6, r1
 80143e0:	f834 1b02 	ldrh.w	r1, [r4], #2
 80143e4:	f7fb fd8a 	bl	800fefc <ucdr_serialize_uint16_t>
 80143e8:	2202      	movs	r2, #2
 80143ea:	4621      	mov	r1, r4
 80143ec:	4604      	mov	r4, r0
 80143ee:	4628      	mov	r0, r5
 80143f0:	f001 fdfa 	bl	8015fe8 <ucdr_serialize_array_uint8_t>
 80143f4:	4603      	mov	r3, r0
 80143f6:	7931      	ldrb	r1, [r6, #4]
 80143f8:	4628      	mov	r0, r5
 80143fa:	401c      	ands	r4, r3
 80143fc:	f7fb fd52 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014400:	b2e4      	uxtb	r4, r4
 8014402:	4020      	ands	r0, r4
 8014404:	bd70      	pop	{r4, r5, r6, pc}
 8014406:	bf00      	nop

08014408 <uxr_deserialize_ACKNACK_Payload>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	460e      	mov	r6, r1
 801440c:	4605      	mov	r5, r0
 801440e:	f7fb fe75 	bl	80100fc <ucdr_deserialize_uint16_t>
 8014412:	2202      	movs	r2, #2
 8014414:	4604      	mov	r4, r0
 8014416:	4628      	mov	r0, r5
 8014418:	18b1      	adds	r1, r6, r2
 801441a:	f001 fe49 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 801441e:	4603      	mov	r3, r0
 8014420:	1d31      	adds	r1, r6, #4
 8014422:	4628      	mov	r0, r5
 8014424:	401c      	ands	r4, r3
 8014426:	f7fb fd53 	bl	800fed0 <ucdr_deserialize_uint8_t>
 801442a:	b2e4      	uxtb	r4, r4
 801442c:	4020      	ands	r0, r4
 801442e:	bd70      	pop	{r4, r5, r6, pc}

08014430 <uxr_serialize_HEARTBEAT_Payload>:
 8014430:	b570      	push	{r4, r5, r6, lr}
 8014432:	460d      	mov	r5, r1
 8014434:	4606      	mov	r6, r0
 8014436:	8809      	ldrh	r1, [r1, #0]
 8014438:	f7fb fd60 	bl	800fefc <ucdr_serialize_uint16_t>
 801443c:	8869      	ldrh	r1, [r5, #2]
 801443e:	4604      	mov	r4, r0
 8014440:	4630      	mov	r0, r6
 8014442:	f7fb fd5b 	bl	800fefc <ucdr_serialize_uint16_t>
 8014446:	4603      	mov	r3, r0
 8014448:	7929      	ldrb	r1, [r5, #4]
 801444a:	4630      	mov	r0, r6
 801444c:	401c      	ands	r4, r3
 801444e:	f7fb fd29 	bl	800fea4 <ucdr_serialize_uint8_t>
 8014452:	b2e4      	uxtb	r4, r4
 8014454:	4020      	ands	r0, r4
 8014456:	bd70      	pop	{r4, r5, r6, pc}

08014458 <uxr_deserialize_HEARTBEAT_Payload>:
 8014458:	b570      	push	{r4, r5, r6, lr}
 801445a:	460e      	mov	r6, r1
 801445c:	4605      	mov	r5, r0
 801445e:	f7fb fe4d 	bl	80100fc <ucdr_deserialize_uint16_t>
 8014462:	4604      	mov	r4, r0
 8014464:	1cb1      	adds	r1, r6, #2
 8014466:	4628      	mov	r0, r5
 8014468:	f7fb fe48 	bl	80100fc <ucdr_deserialize_uint16_t>
 801446c:	4603      	mov	r3, r0
 801446e:	1d31      	adds	r1, r6, #4
 8014470:	4628      	mov	r0, r5
 8014472:	401c      	ands	r4, r3
 8014474:	f7fb fd2c 	bl	800fed0 <ucdr_deserialize_uint8_t>
 8014478:	b2e4      	uxtb	r4, r4
 801447a:	4020      	ands	r0, r4
 801447c:	bd70      	pop	{r4, r5, r6, pc}
 801447e:	bf00      	nop

08014480 <uxr_serialize_TIMESTAMP_Payload>:
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	460d      	mov	r5, r1
 8014484:	4606      	mov	r6, r0
 8014486:	6809      	ldr	r1, [r1, #0]
 8014488:	f7fc fb3c 	bl	8010b04 <ucdr_serialize_int32_t>
 801448c:	4604      	mov	r4, r0
 801448e:	6869      	ldr	r1, [r5, #4]
 8014490:	4630      	mov	r0, r6
 8014492:	f7fb ff1d 	bl	80102d0 <ucdr_serialize_uint32_t>
 8014496:	4020      	ands	r0, r4
 8014498:	b2c0      	uxtb	r0, r0
 801449a:	bd70      	pop	{r4, r5, r6, pc}

0801449c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144a0:	460e      	mov	r6, r1
 80144a2:	4605      	mov	r5, r0
 80144a4:	f7fc fbc6 	bl	8010c34 <ucdr_deserialize_int32_t>
 80144a8:	4607      	mov	r7, r0
 80144aa:	1d31      	adds	r1, r6, #4
 80144ac:	4628      	mov	r0, r5
 80144ae:	f7fc f83f 	bl	8010530 <ucdr_deserialize_uint32_t>
 80144b2:	4680      	mov	r8, r0
 80144b4:	f106 0108 	add.w	r1, r6, #8
 80144b8:	4628      	mov	r0, r5
 80144ba:	f7fc fbbb 	bl	8010c34 <ucdr_deserialize_int32_t>
 80144be:	ea07 0708 	and.w	r7, r7, r8
 80144c2:	4604      	mov	r4, r0
 80144c4:	f106 010c 	add.w	r1, r6, #12
 80144c8:	4628      	mov	r0, r5
 80144ca:	403c      	ands	r4, r7
 80144cc:	f7fc f830 	bl	8010530 <ucdr_deserialize_uint32_t>
 80144d0:	f106 0110 	add.w	r1, r6, #16
 80144d4:	4004      	ands	r4, r0
 80144d6:	4628      	mov	r0, r5
 80144d8:	f7fc fbac 	bl	8010c34 <ucdr_deserialize_int32_t>
 80144dc:	4603      	mov	r3, r0
 80144de:	b2e4      	uxtb	r4, r4
 80144e0:	4628      	mov	r0, r5
 80144e2:	461d      	mov	r5, r3
 80144e4:	f106 0114 	add.w	r1, r6, #20
 80144e8:	f7fc f822 	bl	8010530 <ucdr_deserialize_uint32_t>
 80144ec:	402c      	ands	r4, r5
 80144ee:	4020      	ands	r0, r4
 80144f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080144f4 <uxr_deserialize_SampleIdentity>:
 80144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f8:	4604      	mov	r4, r0
 80144fa:	460d      	mov	r5, r1
 80144fc:	220c      	movs	r2, #12
 80144fe:	f001 fdd7 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8014502:	2203      	movs	r2, #3
 8014504:	f105 010c 	add.w	r1, r5, #12
 8014508:	4607      	mov	r7, r0
 801450a:	4620      	mov	r0, r4
 801450c:	f001 fdd0 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8014510:	f105 010f 	add.w	r1, r5, #15
 8014514:	4680      	mov	r8, r0
 8014516:	4620      	mov	r0, r4
 8014518:	f7fb fcda 	bl	800fed0 <ucdr_deserialize_uint8_t>
 801451c:	f105 0110 	add.w	r1, r5, #16
 8014520:	4606      	mov	r6, r0
 8014522:	4620      	mov	r0, r4
 8014524:	f7fc fb86 	bl	8010c34 <ucdr_deserialize_int32_t>
 8014528:	ea07 0708 	and.w	r7, r7, r8
 801452c:	4603      	mov	r3, r0
 801452e:	4620      	mov	r0, r4
 8014530:	403e      	ands	r6, r7
 8014532:	f105 0114 	add.w	r1, r5, #20
 8014536:	461c      	mov	r4, r3
 8014538:	f7fb fffa 	bl	8010530 <ucdr_deserialize_uint32_t>
 801453c:	4034      	ands	r4, r6
 801453e:	4020      	ands	r0, r4
 8014540:	b2c0      	uxtb	r0, r0
 8014542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014546:	bf00      	nop

08014548 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014548:	280b      	cmp	r0, #11
 801454a:	dc0d      	bgt.n	8014568 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801454c:	2800      	cmp	r0, #0
 801454e:	db09      	blt.n	8014564 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014550:	280b      	cmp	r0, #11
 8014552:	d807      	bhi.n	8014564 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014554:	e8df f000 	tbb	[pc, r0]
 8014558:	07060607 	.word	0x07060607
 801455c:	06060606 	.word	0x06060606
 8014560:	07070606 	.word	0x07070606
 8014564:	2001      	movs	r0, #1
 8014566:	4770      	bx	lr
 8014568:	28cb      	cmp	r0, #203	@ 0xcb
 801456a:	bf18      	it	ne
 801456c:	2001      	movne	r0, #1
 801456e:	4770      	bx	lr

08014570 <rcl_get_zero_initialized_context>:
 8014570:	4a03      	ldr	r2, [pc, #12]	@ (8014580 <rcl_get_zero_initialized_context+0x10>)
 8014572:	4603      	mov	r3, r0
 8014574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014578:	e883 0003 	stmia.w	r3, {r0, r1}
 801457c:	4618      	mov	r0, r3
 801457e:	4770      	bx	lr
 8014580:	08019048 	.word	0x08019048

08014584 <rcl_context_is_valid>:
 8014584:	b118      	cbz	r0, 801458e <rcl_context_is_valid+0xa>
 8014586:	6840      	ldr	r0, [r0, #4]
 8014588:	3800      	subs	r0, #0
 801458a:	bf18      	it	ne
 801458c:	2001      	movne	r0, #1
 801458e:	4770      	bx	lr

08014590 <__cleanup_context>:
 8014590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014594:	4606      	mov	r6, r0
 8014596:	2300      	movs	r3, #0
 8014598:	6800      	ldr	r0, [r0, #0]
 801459a:	6073      	str	r3, [r6, #4]
 801459c:	2800      	cmp	r0, #0
 801459e:	d049      	beq.n	8014634 <__cleanup_context+0xa4>
 80145a0:	6947      	ldr	r7, [r0, #20]
 80145a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80145a6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80145aa:	b137      	cbz	r7, 80145ba <__cleanup_context+0x2a>
 80145ac:	3014      	adds	r0, #20
 80145ae:	f7fa f82d 	bl	800e60c <rcl_init_options_fini>
 80145b2:	4607      	mov	r7, r0
 80145b4:	2800      	cmp	r0, #0
 80145b6:	d144      	bne.n	8014642 <__cleanup_context+0xb2>
 80145b8:	6830      	ldr	r0, [r6, #0]
 80145ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80145bc:	b143      	cbz	r3, 80145d0 <__cleanup_context+0x40>
 80145be:	3028      	adds	r0, #40	@ 0x28
 80145c0:	f7fa fd44 	bl	800f04c <rmw_context_fini>
 80145c4:	b118      	cbz	r0, 80145ce <__cleanup_context+0x3e>
 80145c6:	2f00      	cmp	r7, #0
 80145c8:	d03e      	beq.n	8014648 <__cleanup_context+0xb8>
 80145ca:	f7fa fac1 	bl	800eb50 <rcutils_reset_error>
 80145ce:	6830      	ldr	r0, [r6, #0]
 80145d0:	6a03      	ldr	r3, [r0, #32]
 80145d2:	b1db      	cbz	r3, 801460c <__cleanup_context+0x7c>
 80145d4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80145d8:	2a01      	cmp	r2, #1
 80145da:	f17c 0100 	sbcs.w	r1, ip, #0
 80145de:	db11      	blt.n	8014604 <__cleanup_context+0x74>
 80145e0:	2400      	movs	r4, #0
 80145e2:	4625      	mov	r5, r4
 80145e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145e8:	4649      	mov	r1, r9
 80145ea:	b1b8      	cbz	r0, 801461c <__cleanup_context+0x8c>
 80145ec:	47c0      	blx	r8
 80145ee:	6833      	ldr	r3, [r6, #0]
 80145f0:	3401      	adds	r4, #1
 80145f2:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80145f6:	f145 0500 	adc.w	r5, r5, #0
 80145fa:	6a1b      	ldr	r3, [r3, #32]
 80145fc:	4294      	cmp	r4, r2
 80145fe:	eb75 010c 	sbcs.w	r1, r5, ip
 8014602:	dbef      	blt.n	80145e4 <__cleanup_context+0x54>
 8014604:	4618      	mov	r0, r3
 8014606:	4649      	mov	r1, r9
 8014608:	47c0      	blx	r8
 801460a:	6830      	ldr	r0, [r6, #0]
 801460c:	4649      	mov	r1, r9
 801460e:	47c0      	blx	r8
 8014610:	2300      	movs	r3, #0
 8014612:	4638      	mov	r0, r7
 8014614:	e9c6 3300 	strd	r3, r3, [r6]
 8014618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801461c:	3401      	adds	r4, #1
 801461e:	f145 0500 	adc.w	r5, r5, #0
 8014622:	4294      	cmp	r4, r2
 8014624:	eb75 010c 	sbcs.w	r1, r5, ip
 8014628:	dbdc      	blt.n	80145e4 <__cleanup_context+0x54>
 801462a:	4618      	mov	r0, r3
 801462c:	4649      	mov	r1, r9
 801462e:	47c0      	blx	r8
 8014630:	6830      	ldr	r0, [r6, #0]
 8014632:	e7eb      	b.n	801460c <__cleanup_context+0x7c>
 8014634:	4607      	mov	r7, r0
 8014636:	2300      	movs	r3, #0
 8014638:	4638      	mov	r0, r7
 801463a:	e9c6 3300 	strd	r3, r3, [r6]
 801463e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014642:	f7fa fa85 	bl	800eb50 <rcutils_reset_error>
 8014646:	e7b7      	b.n	80145b8 <__cleanup_context+0x28>
 8014648:	f7ff ff7e 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 801464c:	4607      	mov	r7, r0
 801464e:	e7bc      	b.n	80145ca <__cleanup_context+0x3a>

08014650 <rcl_init>:
 8014650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014654:	1e05      	subs	r5, r0, #0
 8014656:	b09e      	sub	sp, #120	@ 0x78
 8014658:	460e      	mov	r6, r1
 801465a:	4690      	mov	r8, r2
 801465c:	461f      	mov	r7, r3
 801465e:	f340 809f 	ble.w	80147a0 <rcl_init+0x150>
 8014662:	2900      	cmp	r1, #0
 8014664:	f000 809f 	beq.w	80147a6 <rcl_init+0x156>
 8014668:	f1a1 0e04 	sub.w	lr, r1, #4
 801466c:	f04f 0c00 	mov.w	ip, #0
 8014670:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014674:	f10c 0c01 	add.w	ip, ip, #1
 8014678:	2c00      	cmp	r4, #0
 801467a:	f000 8094 	beq.w	80147a6 <rcl_init+0x156>
 801467e:	4565      	cmp	r5, ip
 8014680:	d1f6      	bne.n	8014670 <rcl_init+0x20>
 8014682:	f1b8 0f00 	cmp.w	r8, #0
 8014686:	f000 808e 	beq.w	80147a6 <rcl_init+0x156>
 801468a:	f8d8 4000 	ldr.w	r4, [r8]
 801468e:	2c00      	cmp	r4, #0
 8014690:	f000 8089 	beq.w	80147a6 <rcl_init+0x156>
 8014694:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801469a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	a819      	add	r0, sp, #100	@ 0x64
 80146a2:	f8cc 3000 	str.w	r3, [ip]
 80146a6:	f7fa fa2f 	bl	800eb08 <rcutils_allocator_is_valid>
 80146aa:	f080 0001 	eor.w	r0, r0, #1
 80146ae:	b2c0      	uxtb	r0, r0
 80146b0:	2800      	cmp	r0, #0
 80146b2:	d178      	bne.n	80147a6 <rcl_init+0x156>
 80146b4:	2f00      	cmp	r7, #0
 80146b6:	d076      	beq.n	80147a6 <rcl_init+0x156>
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d178      	bne.n	80147b0 <rcl_init+0x160>
 80146be:	2178      	movs	r1, #120	@ 0x78
 80146c0:	2001      	movs	r0, #1
 80146c2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80146c6:	4798      	blx	r3
 80146c8:	4604      	mov	r4, r0
 80146ca:	6038      	str	r0, [r7, #0]
 80146cc:	2800      	cmp	r0, #0
 80146ce:	f000 80b6 	beq.w	801483e <rcl_init+0x1ee>
 80146d2:	a802      	add	r0, sp, #8
 80146d4:	f001 f8c4 	bl	8015860 <rmw_get_zero_initialized_context>
 80146d8:	a902      	add	r1, sp, #8
 80146da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80146de:	2250      	movs	r2, #80	@ 0x50
 80146e0:	f003 fb27 	bl	8017d32 <memcpy>
 80146e4:	ac19      	add	r4, sp, #100	@ 0x64
 80146e6:	f8d7 e000 	ldr.w	lr, [r7]
 80146ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ec:	46f4      	mov	ip, lr
 80146ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f2:	6823      	ldr	r3, [r4, #0]
 80146f4:	f10e 0114 	add.w	r1, lr, #20
 80146f8:	4640      	mov	r0, r8
 80146fa:	f8cc 3000 	str.w	r3, [ip]
 80146fe:	f7f9 ffaf 	bl	800e660 <rcl_init_options_copy>
 8014702:	4604      	mov	r4, r0
 8014704:	2800      	cmp	r0, #0
 8014706:	d144      	bne.n	8014792 <rcl_init+0x142>
 8014708:	f8d7 9000 	ldr.w	r9, [r7]
 801470c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014710:	f8c9 0020 	str.w	r0, [r9, #32]
 8014714:	f8c9 5018 	str.w	r5, [r9, #24]
 8014718:	f8c9 801c 	str.w	r8, [r9, #28]
 801471c:	2d00      	cmp	r5, #0
 801471e:	d04e      	beq.n	80147be <rcl_init+0x16e>
 8014720:	2e00      	cmp	r6, #0
 8014722:	d04c      	beq.n	80147be <rcl_init+0x16e>
 8014724:	2104      	movs	r1, #4
 8014726:	4628      	mov	r0, r5
 8014728:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801472c:	4798      	blx	r3
 801472e:	f8c9 0020 	str.w	r0, [r9, #32]
 8014732:	f8d7 9000 	ldr.w	r9, [r7]
 8014736:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801473a:	46ca      	mov	sl, r9
 801473c:	b343      	cbz	r3, 8014790 <rcl_init+0x140>
 801473e:	2d01      	cmp	r5, #1
 8014740:	f178 0300 	sbcs.w	r3, r8, #0
 8014744:	db3b      	blt.n	80147be <rcl_init+0x16e>
 8014746:	2400      	movs	r4, #0
 8014748:	3e04      	subs	r6, #4
 801474a:	46a1      	mov	r9, r4
 801474c:	e00b      	b.n	8014766 <rcl_init+0x116>
 801474e:	6831      	ldr	r1, [r6, #0]
 8014750:	f003 faef 	bl	8017d32 <memcpy>
 8014754:	3401      	adds	r4, #1
 8014756:	f149 0900 	adc.w	r9, r9, #0
 801475a:	45c8      	cmp	r8, r9
 801475c:	bf08      	it	eq
 801475e:	42a5      	cmpeq	r5, r4
 8014760:	d02b      	beq.n	80147ba <rcl_init+0x16a>
 8014762:	f8d7 a000 	ldr.w	sl, [r7]
 8014766:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801476a:	f7eb fdc3 	bl	80002f4 <strlen>
 801476e:	1c42      	adds	r2, r0, #1
 8014770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014772:	4610      	mov	r0, r2
 8014774:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014776:	f8da a020 	ldr.w	sl, [sl, #32]
 801477a:	9201      	str	r2, [sp, #4]
 801477c:	4798      	blx	r3
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014784:	6a1b      	ldr	r3, [r3, #32]
 8014786:	9a01      	ldr	r2, [sp, #4]
 8014788:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801478c:	2800      	cmp	r0, #0
 801478e:	d1de      	bne.n	801474e <rcl_init+0xfe>
 8014790:	240a      	movs	r4, #10
 8014792:	4638      	mov	r0, r7
 8014794:	f7ff fefc 	bl	8014590 <__cleanup_context>
 8014798:	4620      	mov	r0, r4
 801479a:	b01e      	add	sp, #120	@ 0x78
 801479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a0:	2900      	cmp	r1, #0
 80147a2:	f43f af6e 	beq.w	8014682 <rcl_init+0x32>
 80147a6:	240b      	movs	r4, #11
 80147a8:	4620      	mov	r0, r4
 80147aa:	b01e      	add	sp, #120	@ 0x78
 80147ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b0:	2464      	movs	r4, #100	@ 0x64
 80147b2:	4620      	mov	r0, r4
 80147b4:	b01e      	add	sp, #120	@ 0x78
 80147b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ba:	f8d7 9000 	ldr.w	r9, [r7]
 80147be:	4926      	ldr	r1, [pc, #152]	@ (8014858 <rcl_init+0x208>)
 80147c0:	680b      	ldr	r3, [r1, #0]
 80147c2:	3301      	adds	r3, #1
 80147c4:	d036      	beq.n	8014834 <rcl_init+0x1e4>
 80147c6:	461a      	mov	r2, r3
 80147c8:	2400      	movs	r4, #0
 80147ca:	600b      	str	r3, [r1, #0]
 80147cc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80147d0:	607b      	str	r3, [r7, #4]
 80147d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80147d4:	3301      	adds	r3, #1
 80147d6:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80147da:	d034      	beq.n	8014846 <rcl_init+0x1f6>
 80147dc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80147e0:	b93b      	cbnz	r3, 80147f2 <rcl_init+0x1a2>
 80147e2:	3030      	adds	r0, #48	@ 0x30
 80147e4:	f000 f83a 	bl	801485c <rcl_get_localhost_only>
 80147e8:	4604      	mov	r4, r0
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d1d1      	bne.n	8014792 <rcl_init+0x142>
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	6958      	ldr	r0, [r3, #20]
 80147f2:	aa18      	add	r2, sp, #96	@ 0x60
 80147f4:	a917      	add	r1, sp, #92	@ 0x5c
 80147f6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80147f8:	f000 fcce 	bl	8015198 <rcl_validate_enclave_name>
 80147fc:	4604      	mov	r4, r0
 80147fe:	2800      	cmp	r0, #0
 8014800:	d1c7      	bne.n	8014792 <rcl_init+0x142>
 8014802:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014804:	b9eb      	cbnz	r3, 8014842 <rcl_init+0x1f2>
 8014806:	6839      	ldr	r1, [r7, #0]
 8014808:	694b      	ldr	r3, [r1, #20]
 801480a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801480e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014810:	f000 fb72 	bl	8014ef8 <rcl_get_security_options_from_environment>
 8014814:	4604      	mov	r4, r0
 8014816:	2800      	cmp	r0, #0
 8014818:	d1bb      	bne.n	8014792 <rcl_init+0x142>
 801481a:	6839      	ldr	r1, [r7, #0]
 801481c:	6948      	ldr	r0, [r1, #20]
 801481e:	3128      	adds	r1, #40	@ 0x28
 8014820:	3018      	adds	r0, #24
 8014822:	f7fa fadd 	bl	800ede0 <rmw_init>
 8014826:	4604      	mov	r4, r0
 8014828:	2800      	cmp	r0, #0
 801482a:	d0bd      	beq.n	80147a8 <rcl_init+0x158>
 801482c:	f7ff fe8c 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 8014830:	4604      	mov	r4, r0
 8014832:	e7ae      	b.n	8014792 <rcl_init+0x142>
 8014834:	2201      	movs	r2, #1
 8014836:	461c      	mov	r4, r3
 8014838:	600a      	str	r2, [r1, #0]
 801483a:	4613      	mov	r3, r2
 801483c:	e7c6      	b.n	80147cc <rcl_init+0x17c>
 801483e:	240a      	movs	r4, #10
 8014840:	e7b2      	b.n	80147a8 <rcl_init+0x158>
 8014842:	2401      	movs	r4, #1
 8014844:	e7a5      	b.n	8014792 <rcl_init+0x142>
 8014846:	3024      	adds	r0, #36	@ 0x24
 8014848:	f002 fa76 	bl	8016d38 <rcl_get_default_domain_id>
 801484c:	4604      	mov	r4, r0
 801484e:	2800      	cmp	r0, #0
 8014850:	d19f      	bne.n	8014792 <rcl_init+0x142>
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	6958      	ldr	r0, [r3, #20]
 8014856:	e7c1      	b.n	80147dc <rcl_init+0x18c>
 8014858:	24068470 	.word	0x24068470

0801485c <rcl_get_localhost_only>:
 801485c:	b510      	push	{r4, lr}
 801485e:	2300      	movs	r3, #0
 8014860:	b082      	sub	sp, #8
 8014862:	9301      	str	r3, [sp, #4]
 8014864:	b1b8      	cbz	r0, 8014896 <rcl_get_localhost_only+0x3a>
 8014866:	4604      	mov	r4, r0
 8014868:	a901      	add	r1, sp, #4
 801486a:	480c      	ldr	r0, [pc, #48]	@ (801489c <rcl_get_localhost_only+0x40>)
 801486c:	f000 fcdc 	bl	8015228 <rcutils_get_env>
 8014870:	b110      	cbz	r0, 8014878 <rcl_get_localhost_only+0x1c>
 8014872:	2001      	movs	r0, #1
 8014874:	b002      	add	sp, #8
 8014876:	bd10      	pop	{r4, pc}
 8014878:	9b01      	ldr	r3, [sp, #4]
 801487a:	b113      	cbz	r3, 8014882 <rcl_get_localhost_only+0x26>
 801487c:	781a      	ldrb	r2, [r3, #0]
 801487e:	2a31      	cmp	r2, #49	@ 0x31
 8014880:	d004      	beq.n	801488c <rcl_get_localhost_only+0x30>
 8014882:	2302      	movs	r3, #2
 8014884:	2000      	movs	r0, #0
 8014886:	7023      	strb	r3, [r4, #0]
 8014888:	b002      	add	sp, #8
 801488a:	bd10      	pop	{r4, pc}
 801488c:	785b      	ldrb	r3, [r3, #1]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d1f7      	bne.n	8014882 <rcl_get_localhost_only+0x26>
 8014892:	2301      	movs	r3, #1
 8014894:	e7f6      	b.n	8014884 <rcl_get_localhost_only+0x28>
 8014896:	200b      	movs	r0, #11
 8014898:	b002      	add	sp, #8
 801489a:	bd10      	pop	{r4, pc}
 801489c:	08019050 	.word	0x08019050

080148a0 <rcl_get_zero_initialized_node>:
 80148a0:	4a03      	ldr	r2, [pc, #12]	@ (80148b0 <rcl_get_zero_initialized_node+0x10>)
 80148a2:	4603      	mov	r3, r0
 80148a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80148ac:	4618      	mov	r0, r3
 80148ae:	4770      	bx	lr
 80148b0:	0801906c 	.word	0x0801906c

080148b4 <rcl_node_init>:
 80148b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b8:	b0a9      	sub	sp, #164	@ 0xa4
 80148ba:	4604      	mov	r4, r0
 80148bc:	460e      	mov	r6, r1
 80148be:	4615      	mov	r5, r2
 80148c0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80148c4:	a823      	add	r0, sp, #140	@ 0x8c
 80148c6:	461f      	mov	r7, r3
 80148c8:	f002 fc5c 	bl	8017184 <rcl_guard_condition_get_default_options>
 80148cc:	f1b8 0f00 	cmp.w	r8, #0
 80148d0:	f000 80f3 	beq.w	8014aba <rcl_node_init+0x206>
 80148d4:	4640      	mov	r0, r8
 80148d6:	f7fa f917 	bl	800eb08 <rcutils_allocator_is_valid>
 80148da:	2d00      	cmp	r5, #0
 80148dc:	bf18      	it	ne
 80148de:	2c00      	cmpne	r4, #0
 80148e0:	f080 0001 	eor.w	r0, r0, #1
 80148e4:	bf0c      	ite	eq
 80148e6:	f04f 0c01 	moveq.w	ip, #1
 80148ea:	f04f 0c00 	movne.w	ip, #0
 80148ee:	2e00      	cmp	r6, #0
 80148f0:	bf08      	it	eq
 80148f2:	f04c 0c01 	orreq.w	ip, ip, #1
 80148f6:	ea4c 0c00 	orr.w	ip, ip, r0
 80148fa:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80148fe:	f040 80dc 	bne.w	8014aba <rcl_node_init+0x206>
 8014902:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014906:	f1ba 0f00 	cmp.w	sl, #0
 801490a:	f040 80fc 	bne.w	8014b06 <rcl_node_init+0x252>
 801490e:	2f00      	cmp	r7, #0
 8014910:	f000 80d3 	beq.w	8014aba <rcl_node_init+0x206>
 8014914:	4638      	mov	r0, r7
 8014916:	f7ff fe35 	bl	8014584 <rcl_context_is_valid>
 801491a:	4683      	mov	fp, r0
 801491c:	2800      	cmp	r0, #0
 801491e:	f000 80d2 	beq.w	8014ac6 <rcl_node_init+0x212>
 8014922:	4652      	mov	r2, sl
 8014924:	4630      	mov	r0, r6
 8014926:	a922      	add	r1, sp, #136	@ 0x88
 8014928:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801492c:	f001 f89a 	bl	8015a64 <rmw_validate_node_name>
 8014930:	4682      	mov	sl, r0
 8014932:	2800      	cmp	r0, #0
 8014934:	f040 80c3 	bne.w	8014abe <rcl_node_init+0x20a>
 8014938:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801493a:	2800      	cmp	r0, #0
 801493c:	f040 80f1 	bne.w	8014b22 <rcl_node_init+0x26e>
 8014940:	4628      	mov	r0, r5
 8014942:	f7eb fcd7 	bl	80002f4 <strlen>
 8014946:	2800      	cmp	r0, #0
 8014948:	f040 80c0 	bne.w	8014acc <rcl_node_init+0x218>
 801494c:	4d79      	ldr	r5, [pc, #484]	@ (8014b34 <rcl_node_init+0x280>)
 801494e:	a922      	add	r1, sp, #136	@ 0x88
 8014950:	2200      	movs	r2, #0
 8014952:	4628      	mov	r0, r5
 8014954:	f001 f868 	bl	8015a28 <rmw_validate_namespace>
 8014958:	4682      	mov	sl, r0
 801495a:	2800      	cmp	r0, #0
 801495c:	f040 80af 	bne.w	8014abe <rcl_node_init+0x20a>
 8014960:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014962:	2800      	cmp	r0, #0
 8014964:	f040 80d5 	bne.w	8014b12 <rcl_node_init+0x25e>
 8014968:	f8d8 3000 	ldr.w	r3, [r8]
 801496c:	2078      	movs	r0, #120	@ 0x78
 801496e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014972:	4798      	blx	r3
 8014974:	4682      	mov	sl, r0
 8014976:	6060      	str	r0, [r4, #4]
 8014978:	2800      	cmp	r0, #0
 801497a:	f000 80cf 	beq.w	8014b1c <rcl_node_init+0x268>
 801497e:	2200      	movs	r2, #0
 8014980:	2300      	movs	r3, #0
 8014982:	a808      	add	r0, sp, #32
 8014984:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8014988:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801498c:	f000 f902 	bl	8014b94 <rcl_node_get_default_options>
 8014990:	a908      	add	r1, sp, #32
 8014992:	4650      	mov	r0, sl
 8014994:	2268      	movs	r2, #104	@ 0x68
 8014996:	f003 f9cc 	bl	8017d32 <memcpy>
 801499a:	6861      	ldr	r1, [r4, #4]
 801499c:	4640      	mov	r0, r8
 801499e:	6027      	str	r7, [r4, #0]
 80149a0:	f000 f906 	bl	8014bb0 <rcl_node_options_copy>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d158      	bne.n	8014a5a <rcl_node_init+0x1a6>
 80149a8:	4628      	mov	r0, r5
 80149aa:	f7eb fca3 	bl	80002f4 <strlen>
 80149ae:	4428      	add	r0, r5
 80149b0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80149b4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80149b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80149ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	bf0c      	ite	eq
 80149c2:	4b5d      	ldreq	r3, [pc, #372]	@ (8014b38 <rcl_node_init+0x284>)
 80149c4:	4b5d      	ldrne	r3, [pc, #372]	@ (8014b3c <rcl_node_init+0x288>)
 80149c6:	9302      	str	r3, [sp, #8]
 80149c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80149cc:	9301      	str	r3, [sp, #4]
 80149ce:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80149d2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80149d6:	f000 fc4f 	bl	8015278 <rcutils_format_string_limit>
 80149da:	6823      	ldr	r3, [r4, #0]
 80149dc:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80149e0:	4631      	mov	r1, r6
 80149e2:	6818      	ldr	r0, [r3, #0]
 80149e4:	462a      	mov	r2, r5
 80149e6:	6866      	ldr	r6, [r4, #4]
 80149e8:	3028      	adds	r0, #40	@ 0x28
 80149ea:	f7fa fbe1 	bl	800f1b0 <rmw_create_node>
 80149ee:	6863      	ldr	r3, [r4, #4]
 80149f0:	66b0      	str	r0, [r6, #104]	@ 0x68
 80149f2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d032      	beq.n	8014a5e <rcl_node_init+0x1aa>
 80149f8:	f7fa fc6a 	bl	800f2d0 <rmw_node_get_graph_guard_condition>
 80149fc:	4682      	mov	sl, r0
 80149fe:	b360      	cbz	r0, 8014a5a <rcl_node_init+0x1a6>
 8014a00:	f8d8 3000 	ldr.w	r3, [r8]
 8014a04:	2008      	movs	r0, #8
 8014a06:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a0a:	6866      	ldr	r6, [r4, #4]
 8014a0c:	4798      	blx	r3
 8014a0e:	6863      	ldr	r3, [r4, #4]
 8014a10:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014a12:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014a16:	f1bb 0f00 	cmp.w	fp, #0
 8014a1a:	d020      	beq.n	8014a5e <rcl_node_init+0x1aa>
 8014a1c:	a806      	add	r0, sp, #24
 8014a1e:	ae23      	add	r6, sp, #140	@ 0x8c
 8014a20:	f002 fb24 	bl	801706c <rcl_get_zero_initialized_guard_condition>
 8014a24:	a806      	add	r0, sp, #24
 8014a26:	6863      	ldr	r3, [r4, #4]
 8014a28:	46c4      	mov	ip, r8
 8014a2a:	c803      	ldmia	r0, {r0, r1}
 8014a2c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014a30:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014a34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8014a3e:	6033      	str	r3, [r6, #0]
 8014a40:	ab28      	add	r3, sp, #160	@ 0xa0
 8014a42:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014a46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a4a:	4651      	mov	r1, sl
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	4670      	mov	r0, lr
 8014a50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014a52:	f002 fb15 	bl	8017080 <rcl_guard_condition_init_from_rmw>
 8014a56:	4682      	mov	sl, r0
 8014a58:	b328      	cbz	r0, 8014aa6 <rcl_node_init+0x1f2>
 8014a5a:	6863      	ldr	r3, [r4, #4]
 8014a5c:	b1f3      	cbz	r3, 8014a9c <rcl_node_init+0x1e8>
 8014a5e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014a60:	b128      	cbz	r0, 8014a6e <rcl_node_init+0x1ba>
 8014a62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a6a:	4798      	blx	r3
 8014a6c:	6863      	ldr	r3, [r4, #4]
 8014a6e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014a70:	b110      	cbz	r0, 8014a78 <rcl_node_init+0x1c4>
 8014a72:	f7fa fbaf 	bl	800f1d4 <rmw_destroy_node>
 8014a76:	6863      	ldr	r3, [r4, #4]
 8014a78:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014a7a:	b148      	cbz	r0, 8014a90 <rcl_node_init+0x1dc>
 8014a7c:	f002 fb5c 	bl	8017138 <rcl_guard_condition_fini>
 8014a80:	6863      	ldr	r3, [r4, #4]
 8014a82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a86:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014a88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a8c:	4798      	blx	r3
 8014a8e:	6863      	ldr	r3, [r4, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a9a:	4798      	blx	r3
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	f04f 0a01 	mov.w	sl, #1
 8014aa2:	e9c4 3300 	strd	r3, r3, [r4]
 8014aa6:	f1b9 0f00 	cmp.w	r9, #0
 8014aaa:	d008      	beq.n	8014abe <rcl_node_init+0x20a>
 8014aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ab0:	4628      	mov	r0, r5
 8014ab2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014ab6:	4798      	blx	r3
 8014ab8:	e001      	b.n	8014abe <rcl_node_init+0x20a>
 8014aba:	f04f 0a0b 	mov.w	sl, #11
 8014abe:	4650      	mov	r0, sl
 8014ac0:	b029      	add	sp, #164	@ 0xa4
 8014ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac6:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8014aca:	e7f8      	b.n	8014abe <rcl_node_init+0x20a>
 8014acc:	782b      	ldrb	r3, [r5, #0]
 8014ace:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ad0:	f43f af3d 	beq.w	801494e <rcl_node_init+0x9a>
 8014ad4:	9503      	str	r5, [sp, #12]
 8014ad6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014ada:	9300      	str	r3, [sp, #0]
 8014adc:	4b18      	ldr	r3, [pc, #96]	@ (8014b40 <rcl_node_init+0x28c>)
 8014ade:	9302      	str	r3, [sp, #8]
 8014ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014aea:	f000 fbc5 	bl	8015278 <rcutils_format_string_limit>
 8014aee:	4605      	mov	r5, r0
 8014af0:	b1e0      	cbz	r0, 8014b2c <rcl_node_init+0x278>
 8014af2:	2200      	movs	r2, #0
 8014af4:	a922      	add	r1, sp, #136	@ 0x88
 8014af6:	9222      	str	r2, [sp, #136]	@ 0x88
 8014af8:	f000 ff96 	bl	8015a28 <rmw_validate_namespace>
 8014afc:	4682      	mov	sl, r0
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d1d4      	bne.n	8014aac <rcl_node_init+0x1f8>
 8014b02:	46d9      	mov	r9, fp
 8014b04:	e72c      	b.n	8014960 <rcl_node_init+0xac>
 8014b06:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8014b0a:	4650      	mov	r0, sl
 8014b0c:	b029      	add	sp, #164	@ 0xa4
 8014b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b12:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8014b16:	f000 ff99 	bl	8015a4c <rmw_namespace_validation_result_string>
 8014b1a:	e7c4      	b.n	8014aa6 <rcl_node_init+0x1f2>
 8014b1c:	f04f 0a0a 	mov.w	sl, #10
 8014b20:	e7c1      	b.n	8014aa6 <rcl_node_init+0x1f2>
 8014b22:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8014b26:	f000 fff1 	bl	8015b0c <rmw_node_name_validation_result_string>
 8014b2a:	e7c8      	b.n	8014abe <rcl_node_init+0x20a>
 8014b2c:	f04f 0a0a 	mov.w	sl, #10
 8014b30:	e7c5      	b.n	8014abe <rcl_node_init+0x20a>
 8014b32:	bf00      	nop
 8014b34:	08018ca0 	.word	0x08018ca0
 8014b38:	08018cec 	.word	0x08018cec
 8014b3c:	08018ca4 	.word	0x08018ca4
 8014b40:	08019068 	.word	0x08019068

08014b44 <rcl_node_is_valid>:
 8014b44:	b130      	cbz	r0, 8014b54 <rcl_node_is_valid+0x10>
 8014b46:	6843      	ldr	r3, [r0, #4]
 8014b48:	b123      	cbz	r3, 8014b54 <rcl_node_is_valid+0x10>
 8014b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b4c:	b113      	cbz	r3, 8014b54 <rcl_node_is_valid+0x10>
 8014b4e:	6800      	ldr	r0, [r0, #0]
 8014b50:	f7ff bd18 	b.w	8014584 <rcl_context_is_valid>
 8014b54:	2000      	movs	r0, #0
 8014b56:	4770      	bx	lr

08014b58 <rcl_node_get_name>:
 8014b58:	b120      	cbz	r0, 8014b64 <rcl_node_get_name+0xc>
 8014b5a:	6840      	ldr	r0, [r0, #4]
 8014b5c:	b110      	cbz	r0, 8014b64 <rcl_node_get_name+0xc>
 8014b5e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014b60:	b100      	cbz	r0, 8014b64 <rcl_node_get_name+0xc>
 8014b62:	6880      	ldr	r0, [r0, #8]
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop

08014b68 <rcl_node_get_namespace>:
 8014b68:	b120      	cbz	r0, 8014b74 <rcl_node_get_namespace+0xc>
 8014b6a:	6840      	ldr	r0, [r0, #4]
 8014b6c:	b110      	cbz	r0, 8014b74 <rcl_node_get_namespace+0xc>
 8014b6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014b70:	b100      	cbz	r0, 8014b74 <rcl_node_get_namespace+0xc>
 8014b72:	68c0      	ldr	r0, [r0, #12]
 8014b74:	4770      	bx	lr
 8014b76:	bf00      	nop

08014b78 <rcl_node_get_options>:
 8014b78:	b128      	cbz	r0, 8014b86 <rcl_node_get_options+0xe>
 8014b7a:	6840      	ldr	r0, [r0, #4]
 8014b7c:	b118      	cbz	r0, 8014b86 <rcl_node_get_options+0xe>
 8014b7e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	bf08      	it	eq
 8014b84:	2000      	moveq	r0, #0
 8014b86:	4770      	bx	lr

08014b88 <rcl_node_get_rmw_handle>:
 8014b88:	b110      	cbz	r0, 8014b90 <rcl_node_get_rmw_handle+0x8>
 8014b8a:	6840      	ldr	r0, [r0, #4]
 8014b8c:	b100      	cbz	r0, 8014b90 <rcl_node_get_rmw_handle+0x8>
 8014b8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014b90:	4770      	bx	lr
 8014b92:	bf00      	nop

08014b94 <rcl_node_get_default_options>:
 8014b94:	b510      	push	{r4, lr}
 8014b96:	4604      	mov	r4, r0
 8014b98:	2268      	movs	r2, #104	@ 0x68
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	f002 ffaa 	bl	8017af4 <memset>
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f7f9 ffa3 	bl	800eaec <rcutils_get_default_allocator>
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	4620      	mov	r0, r4
 8014baa:	7523      	strb	r3, [r4, #20]
 8014bac:	bd10      	pop	{r4, pc}
 8014bae:	bf00      	nop

08014bb0 <rcl_node_options_copy>:
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	bf18      	it	ne
 8014bb4:	4288      	cmpne	r0, r1
 8014bb6:	d01b      	beq.n	8014bf0 <rcl_node_options_copy+0x40>
 8014bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bba:	fab1 f681 	clz	r6, r1
 8014bbe:	460c      	mov	r4, r1
 8014bc0:	0976      	lsrs	r6, r6, #5
 8014bc2:	b199      	cbz	r1, 8014bec <rcl_node_options_copy+0x3c>
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	8a87      	ldrh	r7, [r0, #20]
 8014bc8:	4684      	mov	ip, r0
 8014bca:	468e      	mov	lr, r1
 8014bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bd2:	682b      	ldr	r3, [r5, #0]
 8014bd4:	2250      	movs	r2, #80	@ 0x50
 8014bd6:	f10c 0118 	add.w	r1, ip, #24
 8014bda:	f104 0018 	add.w	r0, r4, #24
 8014bde:	f8ce 3000 	str.w	r3, [lr]
 8014be2:	82a7      	strh	r7, [r4, #20]
 8014be4:	f003 f8a5 	bl	8017d32 <memcpy>
 8014be8:	4630      	mov	r0, r6
 8014bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bec:	200b      	movs	r0, #11
 8014bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bf0:	200b      	movs	r0, #11
 8014bf2:	4770      	bx	lr

08014bf4 <rcl_node_resolve_name>:
 8014bf4:	b082      	sub	sp, #8
 8014bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bfa:	b091      	sub	sp, #68	@ 0x44
 8014bfc:	ac1a      	add	r4, sp, #104	@ 0x68
 8014bfe:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014c02:	e884 000c 	stmia.w	r4, {r2, r3}
 8014c06:	2800      	cmp	r0, #0
 8014c08:	d03d      	beq.n	8014c86 <rcl_node_resolve_name+0x92>
 8014c0a:	460c      	mov	r4, r1
 8014c0c:	4605      	mov	r5, r0
 8014c0e:	f7ff ffb3 	bl	8014b78 <rcl_node_get_options>
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d03a      	beq.n	8014c8c <rcl_node_resolve_name+0x98>
 8014c16:	4628      	mov	r0, r5
 8014c18:	f7ff ff9e 	bl	8014b58 <rcl_node_get_name>
 8014c1c:	4606      	mov	r6, r0
 8014c1e:	4628      	mov	r0, r5
 8014c20:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014c22:	f7ff ffa1 	bl	8014b68 <rcl_node_get_namespace>
 8014c26:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014c2a:	4607      	mov	r7, r0
 8014c2c:	46ac      	mov	ip, r5
 8014c2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c36:	f8de 3000 	ldr.w	r3, [lr]
 8014c3a:	f8cc 3000 	str.w	r3, [ip]
 8014c3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c40:	b30b      	cbz	r3, 8014c86 <rcl_node_resolve_name+0x92>
 8014c42:	4689      	mov	r9, r1
 8014c44:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8014c48:	f000 fc8e 	bl	8015568 <rcutils_get_zero_initialized_string_map>
 8014c4c:	ab10      	add	r3, sp, #64	@ 0x40
 8014c4e:	9008      	str	r0, [sp, #32]
 8014c50:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014c54:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c58:	2100      	movs	r1, #0
 8014c5a:	a808      	add	r0, sp, #32
 8014c5c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014c60:	f000 fcf8 	bl	8015654 <rcutils_string_map_init>
 8014c64:	4683      	mov	fp, r0
 8014c66:	b1a0      	cbz	r0, 8014c92 <rcl_node_resolve_name+0x9e>
 8014c68:	f7f9 ff5c 	bl	800eb24 <rcutils_get_error_string>
 8014c6c:	f7f9 ff70 	bl	800eb50 <rcutils_reset_error>
 8014c70:	f1bb 0f0a 	cmp.w	fp, #10
 8014c74:	bf18      	it	ne
 8014c76:	f04f 0b01 	movne.w	fp, #1
 8014c7a:	4658      	mov	r0, fp
 8014c7c:	b011      	add	sp, #68	@ 0x44
 8014c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c82:	b002      	add	sp, #8
 8014c84:	4770      	bx	lr
 8014c86:	f04f 0b0b 	mov.w	fp, #11
 8014c8a:	e7f6      	b.n	8014c7a <rcl_node_resolve_name+0x86>
 8014c8c:	f04f 0b01 	mov.w	fp, #1
 8014c90:	e7f3      	b.n	8014c7a <rcl_node_resolve_name+0x86>
 8014c92:	9009      	str	r0, [sp, #36]	@ 0x24
 8014c94:	9007      	str	r0, [sp, #28]
 8014c96:	a808      	add	r0, sp, #32
 8014c98:	f002 f9e2 	bl	8017060 <rcl_get_default_topic_name_substitutions>
 8014c9c:	4683      	mov	fp, r0
 8014c9e:	b180      	cbz	r0, 8014cc2 <rcl_node_resolve_name+0xce>
 8014ca0:	280a      	cmp	r0, #10
 8014ca2:	a808      	add	r0, sp, #32
 8014ca4:	bf18      	it	ne
 8014ca6:	f04f 0b01 	movne.w	fp, #1
 8014caa:	f000 fd13 	bl	80156d4 <rcutils_string_map_fini>
 8014cae:	4604      	mov	r4, r0
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	d15b      	bne.n	8014d6c <rcl_node_resolve_name+0x178>
 8014cb4:	4651      	mov	r1, sl
 8014cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cb8:	47c8      	blx	r9
 8014cba:	4651      	mov	r1, sl
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	47c8      	blx	r9
 8014cc0:	e7db      	b.n	8014c7a <rcl_node_resolve_name+0x86>
 8014cc2:	ab09      	add	r3, sp, #36	@ 0x24
 8014cc4:	46ec      	mov	ip, sp
 8014cc6:	9305      	str	r3, [sp, #20]
 8014cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cce:	682b      	ldr	r3, [r5, #0]
 8014cd0:	463a      	mov	r2, r7
 8014cd2:	4631      	mov	r1, r6
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f8cc 3000 	str.w	r3, [ip]
 8014cda:	ab08      	add	r3, sp, #32
 8014cdc:	f002 f860 	bl	8016da0 <rcl_expand_topic_name>
 8014ce0:	4683      	mov	fp, r0
 8014ce2:	b9d8      	cbnz	r0, 8014d1c <rcl_node_resolve_name+0x128>
 8014ce4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	9009      	str	r0, [sp, #36]	@ 0x24
 8014cea:	a90a      	add	r1, sp, #40	@ 0x28
 8014cec:	4620      	mov	r0, r4
 8014cee:	f000 fdcb 	bl	8015888 <rmw_validate_full_topic_name>
 8014cf2:	bb50      	cbnz	r0, 8014d4a <rcl_node_resolve_name+0x156>
 8014cf4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014cf6:	2d00      	cmp	r5, #0
 8014cf8:	d140      	bne.n	8014d7c <rcl_node_resolve_name+0x188>
 8014cfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014cfc:	a808      	add	r0, sp, #32
 8014cfe:	601c      	str	r4, [r3, #0]
 8014d00:	f000 fce8 	bl	80156d4 <rcutils_string_map_fini>
 8014d04:	4683      	mov	fp, r0
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d043      	beq.n	8014d92 <rcl_node_resolve_name+0x19e>
 8014d0a:	f7f9 ff0b 	bl	800eb24 <rcutils_get_error_string>
 8014d0e:	46a8      	mov	r8, r5
 8014d10:	f04f 0b01 	mov.w	fp, #1
 8014d14:	462c      	mov	r4, r5
 8014d16:	f7f9 ff1b 	bl	800eb50 <rcutils_reset_error>
 8014d1a:	e00a      	b.n	8014d32 <rcl_node_resolve_name+0x13e>
 8014d1c:	2867      	cmp	r0, #103	@ 0x67
 8014d1e:	bf14      	ite	ne
 8014d20:	f04f 0800 	movne.w	r8, #0
 8014d24:	f008 0801 	andeq.w	r8, r8, #1
 8014d28:	9c07      	ldr	r4, [sp, #28]
 8014d2a:	a808      	add	r0, sp, #32
 8014d2c:	f000 fcd2 	bl	80156d4 <rcutils_string_map_fini>
 8014d30:	bb50      	cbnz	r0, 8014d88 <rcl_node_resolve_name+0x194>
 8014d32:	4651      	mov	r1, sl
 8014d34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d36:	47c8      	blx	r9
 8014d38:	4651      	mov	r1, sl
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	47c8      	blx	r9
 8014d3e:	f1b8 0f00 	cmp.w	r8, #0
 8014d42:	bf18      	it	ne
 8014d44:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8014d48:	e797      	b.n	8014c7a <rcl_node_resolve_name+0x86>
 8014d4a:	f7f9 feeb 	bl	800eb24 <rcutils_get_error_string>
 8014d4e:	f7f9 feff 	bl	800eb50 <rcutils_reset_error>
 8014d52:	a808      	add	r0, sp, #32
 8014d54:	f000 fcbe 	bl	80156d4 <rcutils_string_map_fini>
 8014d58:	b998      	cbnz	r0, 8014d82 <rcl_node_resolve_name+0x18e>
 8014d5a:	4651      	mov	r1, sl
 8014d5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d5e:	47c8      	blx	r9
 8014d60:	4651      	mov	r1, sl
 8014d62:	4620      	mov	r0, r4
 8014d64:	f04f 0b01 	mov.w	fp, #1
 8014d68:	47c8      	blx	r9
 8014d6a:	e786      	b.n	8014c7a <rcl_node_resolve_name+0x86>
 8014d6c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014d70:	f7f9 fed8 	bl	800eb24 <rcutils_get_error_string>
 8014d74:	f7f9 feec 	bl	800eb50 <rcutils_reset_error>
 8014d78:	4644      	mov	r4, r8
 8014d7a:	e7da      	b.n	8014d32 <rcl_node_resolve_name+0x13e>
 8014d7c:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8014d80:	e7d3      	b.n	8014d2a <rcl_node_resolve_name+0x136>
 8014d82:	46d8      	mov	r8, fp
 8014d84:	f04f 0b01 	mov.w	fp, #1
 8014d88:	f7f9 fecc 	bl	800eb24 <rcutils_get_error_string>
 8014d8c:	f7f9 fee0 	bl	800eb50 <rcutils_reset_error>
 8014d90:	e7cf      	b.n	8014d32 <rcl_node_resolve_name+0x13e>
 8014d92:	4651      	mov	r1, sl
 8014d94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d96:	47c8      	blx	r9
 8014d98:	4651      	mov	r1, sl
 8014d9a:	4658      	mov	r0, fp
 8014d9c:	47c8      	blx	r9
 8014d9e:	e76c      	b.n	8014c7a <rcl_node_resolve_name+0x86>

08014da0 <exact_match_lookup>:
 8014da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014da2:	f102 0708 	add.w	r7, r2, #8
 8014da6:	460b      	mov	r3, r1
 8014da8:	b085      	sub	sp, #20
 8014daa:	4614      	mov	r4, r2
 8014dac:	4606      	mov	r6, r0
 8014dae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014db2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014db6:	4618      	mov	r0, r3
 8014db8:	4919      	ldr	r1, [pc, #100]	@ (8014e20 <exact_match_lookup+0x80>)
 8014dba:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014dbe:	f000 fa4d 	bl	801525c <rcutils_join_path>
 8014dc2:	7833      	ldrb	r3, [r6, #0]
 8014dc4:	4605      	mov	r5, r0
 8014dc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014dc8:	d023      	beq.n	8014e12 <exact_match_lookup+0x72>
 8014dca:	f104 030c 	add.w	r3, r4, #12
 8014dce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dd2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014dd6:	1c70      	adds	r0, r6, #1
 8014dd8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014ddc:	f000 fa44 	bl	8015268 <rcutils_to_native_path>
 8014de0:	4606      	mov	r6, r0
 8014de2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014de6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014dea:	4631      	mov	r1, r6
 8014dec:	4628      	mov	r0, r5
 8014dee:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014df2:	f000 fa33 	bl	801525c <rcutils_join_path>
 8014df6:	4603      	mov	r3, r0
 8014df8:	4630      	mov	r0, r6
 8014dfa:	6862      	ldr	r2, [r4, #4]
 8014dfc:	461e      	mov	r6, r3
 8014dfe:	6921      	ldr	r1, [r4, #16]
 8014e00:	4790      	blx	r2
 8014e02:	4628      	mov	r0, r5
 8014e04:	4635      	mov	r5, r6
 8014e06:	6863      	ldr	r3, [r4, #4]
 8014e08:	6921      	ldr	r1, [r4, #16]
 8014e0a:	4798      	blx	r3
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	b005      	add	sp, #20
 8014e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e12:	7873      	ldrb	r3, [r6, #1]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1d8      	bne.n	8014dca <exact_match_lookup+0x2a>
 8014e18:	4628      	mov	r0, r5
 8014e1a:	b005      	add	sp, #20
 8014e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	080190b0 	.word	0x080190b0

08014e24 <rcl_get_secure_root>:
 8014e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e28:	b085      	sub	sp, #20
 8014e2a:	b168      	cbz	r0, 8014e48 <rcl_get_secure_root+0x24>
 8014e2c:	4607      	mov	r7, r0
 8014e2e:	4608      	mov	r0, r1
 8014e30:	460c      	mov	r4, r1
 8014e32:	f7f9 fe69 	bl	800eb08 <rcutils_allocator_is_valid>
 8014e36:	b138      	cbz	r0, 8014e48 <rcl_get_secure_root+0x24>
 8014e38:	2300      	movs	r3, #0
 8014e3a:	482d      	ldr	r0, [pc, #180]	@ (8014ef0 <rcl_get_secure_root+0xcc>)
 8014e3c:	a903      	add	r1, sp, #12
 8014e3e:	9303      	str	r3, [sp, #12]
 8014e40:	f000 f9f2 	bl	8015228 <rcutils_get_env>
 8014e44:	4605      	mov	r5, r0
 8014e46:	b120      	cbz	r0, 8014e52 <rcl_get_secure_root+0x2e>
 8014e48:	2500      	movs	r5, #0
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	b005      	add	sp, #20
 8014e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e52:	9b03      	ldr	r3, [sp, #12]
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	2a00      	cmp	r2, #0
 8014e58:	d0f6      	beq.n	8014e48 <rcl_get_secure_root+0x24>
 8014e5a:	f104 090c 	add.w	r9, r4, #12
 8014e5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014e62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014e66:	4618      	mov	r0, r3
 8014e68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014e6c:	f000 fb3e 	bl	80154ec <rcutils_strdup>
 8014e70:	4680      	mov	r8, r0
 8014e72:	2800      	cmp	r0, #0
 8014e74:	d0e8      	beq.n	8014e48 <rcl_get_secure_root+0x24>
 8014e76:	a903      	add	r1, sp, #12
 8014e78:	481e      	ldr	r0, [pc, #120]	@ (8014ef4 <rcl_get_secure_root+0xd0>)
 8014e7a:	9503      	str	r5, [sp, #12]
 8014e7c:	f000 f9d4 	bl	8015228 <rcutils_get_env>
 8014e80:	b160      	cbz	r0, 8014e9c <rcl_get_secure_root+0x78>
 8014e82:	2600      	movs	r6, #0
 8014e84:	4630      	mov	r0, r6
 8014e86:	6863      	ldr	r3, [r4, #4]
 8014e88:	6921      	ldr	r1, [r4, #16]
 8014e8a:	4798      	blx	r3
 8014e8c:	4640      	mov	r0, r8
 8014e8e:	6863      	ldr	r3, [r4, #4]
 8014e90:	6921      	ldr	r1, [r4, #16]
 8014e92:	4798      	blx	r3
 8014e94:	4628      	mov	r0, r5
 8014e96:	b005      	add	sp, #20
 8014e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e9c:	9b03      	ldr	r3, [sp, #12]
 8014e9e:	781e      	ldrb	r6, [r3, #0]
 8014ea0:	b1f6      	cbz	r6, 8014ee0 <rcl_get_secure_root+0xbc>
 8014ea2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014ea6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014eb0:	f000 fb1c 	bl	80154ec <rcutils_strdup>
 8014eb4:	4606      	mov	r6, r0
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	d0e3      	beq.n	8014e82 <rcl_get_secure_root+0x5e>
 8014eba:	4622      	mov	r2, r4
 8014ebc:	4641      	mov	r1, r8
 8014ebe:	f7ff ff6f 	bl	8014da0 <exact_match_lookup>
 8014ec2:	4605      	mov	r5, r0
 8014ec4:	2d00      	cmp	r5, #0
 8014ec6:	d0dd      	beq.n	8014e84 <rcl_get_secure_root+0x60>
 8014ec8:	4628      	mov	r0, r5
 8014eca:	f000 f9c5 	bl	8015258 <rcutils_is_directory>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d1d7      	bne.n	8014e84 <rcl_get_secure_root+0x60>
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	6921      	ldr	r1, [r4, #16]
 8014ed8:	461d      	mov	r5, r3
 8014eda:	6863      	ldr	r3, [r4, #4]
 8014edc:	4798      	blx	r3
 8014ede:	e7d1      	b.n	8014e84 <rcl_get_secure_root+0x60>
 8014ee0:	4622      	mov	r2, r4
 8014ee2:	4638      	mov	r0, r7
 8014ee4:	4641      	mov	r1, r8
 8014ee6:	f7ff ff5b 	bl	8014da0 <exact_match_lookup>
 8014eea:	4605      	mov	r5, r0
 8014eec:	e7ea      	b.n	8014ec4 <rcl_get_secure_root+0xa0>
 8014eee:	bf00      	nop
 8014ef0:	080190bc 	.word	0x080190bc
 8014ef4:	080190d4 	.word	0x080190d4

08014ef8 <rcl_get_security_options_from_environment>:
 8014ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014efc:	b082      	sub	sp, #8
 8014efe:	2300      	movs	r3, #0
 8014f00:	4606      	mov	r6, r0
 8014f02:	460f      	mov	r7, r1
 8014f04:	4821      	ldr	r0, [pc, #132]	@ (8014f8c <rcl_get_security_options_from_environment+0x94>)
 8014f06:	a901      	add	r1, sp, #4
 8014f08:	4690      	mov	r8, r2
 8014f0a:	9301      	str	r3, [sp, #4]
 8014f0c:	f000 f98c 	bl	8015228 <rcutils_get_env>
 8014f10:	b120      	cbz	r0, 8014f1c <rcl_get_security_options_from_environment+0x24>
 8014f12:	2501      	movs	r5, #1
 8014f14:	4628      	mov	r0, r5
 8014f16:	b002      	add	sp, #8
 8014f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	491c      	ldr	r1, [pc, #112]	@ (8014f90 <rcl_get_security_options_from_environment+0x98>)
 8014f20:	9801      	ldr	r0, [sp, #4]
 8014f22:	f7eb f9dd 	bl	80002e0 <strcmp>
 8014f26:	4605      	mov	r5, r0
 8014f28:	b9f0      	cbnz	r0, 8014f68 <rcl_get_security_options_from_environment+0x70>
 8014f2a:	9001      	str	r0, [sp, #4]
 8014f2c:	f1b8 0f00 	cmp.w	r8, #0
 8014f30:	d021      	beq.n	8014f76 <rcl_get_security_options_from_environment+0x7e>
 8014f32:	a901      	add	r1, sp, #4
 8014f34:	4817      	ldr	r0, [pc, #92]	@ (8014f94 <rcl_get_security_options_from_environment+0x9c>)
 8014f36:	f000 f977 	bl	8015228 <rcutils_get_env>
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	d1e9      	bne.n	8014f12 <rcl_get_security_options_from_environment+0x1a>
 8014f3e:	4916      	ldr	r1, [pc, #88]	@ (8014f98 <rcl_get_security_options_from_environment+0xa0>)
 8014f40:	9801      	ldr	r0, [sp, #4]
 8014f42:	f7eb f9cd 	bl	80002e0 <strcmp>
 8014f46:	4603      	mov	r3, r0
 8014f48:	4639      	mov	r1, r7
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	fab3 f383 	clz	r3, r3
 8014f50:	095b      	lsrs	r3, r3, #5
 8014f52:	f888 3000 	strb.w	r3, [r8]
 8014f56:	f7ff ff65 	bl	8014e24 <rcl_get_secure_root>
 8014f5a:	b170      	cbz	r0, 8014f7a <rcl_get_security_options_from_environment+0x82>
 8014f5c:	f8c8 0004 	str.w	r0, [r8, #4]
 8014f60:	4628      	mov	r0, r5
 8014f62:	b002      	add	sp, #8
 8014f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f68:	4625      	mov	r5, r4
 8014f6a:	f888 4000 	strb.w	r4, [r8]
 8014f6e:	4628      	mov	r0, r5
 8014f70:	b002      	add	sp, #8
 8014f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f76:	250b      	movs	r5, #11
 8014f78:	e7cc      	b.n	8014f14 <rcl_get_security_options_from_environment+0x1c>
 8014f7a:	f898 5000 	ldrb.w	r5, [r8]
 8014f7e:	f1a5 0501 	sub.w	r5, r5, #1
 8014f82:	fab5 f585 	clz	r5, r5
 8014f86:	096d      	lsrs	r5, r5, #5
 8014f88:	e7c4      	b.n	8014f14 <rcl_get_security_options_from_environment+0x1c>
 8014f8a:	bf00      	nop
 8014f8c:	08019074 	.word	0x08019074
 8014f90:	08019088 	.word	0x08019088
 8014f94:	08019090 	.word	0x08019090
 8014f98:	080190a8 	.word	0x080190a8

08014f9c <rcl_get_system_time>:
 8014f9c:	4608      	mov	r0, r1
 8014f9e:	f000 bc11 	b.w	80157c4 <rcutils_system_time_now>
 8014fa2:	bf00      	nop

08014fa4 <rcl_get_steady_time>:
 8014fa4:	4608      	mov	r0, r1
 8014fa6:	f000 bc33 	b.w	8015810 <rcutils_steady_time_now>
 8014faa:	bf00      	nop

08014fac <rcl_get_ros_time>:
 8014fac:	7a03      	ldrb	r3, [r0, #8]
 8014fae:	b510      	push	{r4, lr}
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	b143      	cbz	r3, 8014fc6 <rcl_get_ros_time+0x1a>
 8014fb4:	2105      	movs	r1, #5
 8014fb6:	f000 f901 	bl	80151bc <__atomic_load_8>
 8014fba:	4602      	mov	r2, r0
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	e9c4 2300 	strd	r2, r3, [r4]
 8014fc4:	bd10      	pop	{r4, pc}
 8014fc6:	4608      	mov	r0, r1
 8014fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fcc:	f000 bbfa 	b.w	80157c4 <rcutils_system_time_now>

08014fd0 <rcl_clock_init>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	4605      	mov	r5, r0
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	4614      	mov	r4, r2
 8014fd8:	460e      	mov	r6, r1
 8014fda:	f7f9 fd95 	bl	800eb08 <rcutils_allocator_is_valid>
 8014fde:	b128      	cbz	r0, 8014fec <rcl_clock_init+0x1c>
 8014fe0:	2d03      	cmp	r5, #3
 8014fe2:	d803      	bhi.n	8014fec <rcl_clock_init+0x1c>
 8014fe4:	e8df f005 	tbb	[pc, r5]
 8014fe8:	0659301f 	.word	0x0659301f
 8014fec:	f04f 0c0b 	mov.w	ip, #11
 8014ff0:	4660      	mov	r0, ip
 8014ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ff4:	2c00      	cmp	r4, #0
 8014ff6:	d0f9      	beq.n	8014fec <rcl_clock_init+0x1c>
 8014ff8:	fab6 f386 	clz	r3, r6
 8014ffc:	095b      	lsrs	r3, r3, #5
 8014ffe:	2e00      	cmp	r6, #0
 8015000:	d0f4      	beq.n	8014fec <rcl_clock_init+0x1c>
 8015002:	6133      	str	r3, [r6, #16]
 8015004:	469c      	mov	ip, r3
 8015006:	f106 0514 	add.w	r5, r6, #20
 801500a:	4f32      	ldr	r7, [pc, #200]	@ (80150d4 <rcl_clock_init+0x104>)
 801500c:	f04f 0e03 	mov.w	lr, #3
 8015010:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	4660      	mov	r0, ip
 801501c:	602b      	str	r3, [r5, #0]
 801501e:	60f7      	str	r7, [r6, #12]
 8015020:	f886 e000 	strb.w	lr, [r6]
 8015024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015026:	2e00      	cmp	r6, #0
 8015028:	d0e0      	beq.n	8014fec <rcl_clock_init+0x1c>
 801502a:	2300      	movs	r3, #0
 801502c:	f106 0514 	add.w	r5, r6, #20
 8015030:	7033      	strb	r3, [r6, #0]
 8015032:	469c      	mov	ip, r3
 8015034:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015038:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801503c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801503e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	4660      	mov	r0, ip
 8015044:	602b      	str	r3, [r5, #0]
 8015046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015048:	2c00      	cmp	r4, #0
 801504a:	d0cf      	beq.n	8014fec <rcl_clock_init+0x1c>
 801504c:	fab6 f586 	clz	r5, r6
 8015050:	096d      	lsrs	r5, r5, #5
 8015052:	2e00      	cmp	r6, #0
 8015054:	d0ca      	beq.n	8014fec <rcl_clock_init+0x1c>
 8015056:	46a6      	mov	lr, r4
 8015058:	7035      	strb	r5, [r6, #0]
 801505a:	f106 0c14 	add.w	ip, r6, #20
 801505e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015062:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015066:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801506a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801506e:	f8de 3000 	ldr.w	r3, [lr]
 8015072:	2010      	movs	r0, #16
 8015074:	f8cc 3000 	str.w	r3, [ip]
 8015078:	6823      	ldr	r3, [r4, #0]
 801507a:	6921      	ldr	r1, [r4, #16]
 801507c:	4798      	blx	r3
 801507e:	6130      	str	r0, [r6, #16]
 8015080:	b320      	cbz	r0, 80150cc <rcl_clock_init+0xfc>
 8015082:	2200      	movs	r2, #0
 8015084:	2300      	movs	r3, #0
 8015086:	46ac      	mov	ip, r5
 8015088:	7205      	strb	r5, [r0, #8]
 801508a:	e9c0 2300 	strd	r2, r3, [r0]
 801508e:	4a12      	ldr	r2, [pc, #72]	@ (80150d8 <rcl_clock_init+0x108>)
 8015090:	2301      	movs	r3, #1
 8015092:	4660      	mov	r0, ip
 8015094:	60f2      	str	r2, [r6, #12]
 8015096:	7033      	strb	r3, [r6, #0]
 8015098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801509a:	2c00      	cmp	r4, #0
 801509c:	d0a6      	beq.n	8014fec <rcl_clock_init+0x1c>
 801509e:	fab6 f386 	clz	r3, r6
 80150a2:	095b      	lsrs	r3, r3, #5
 80150a4:	2e00      	cmp	r6, #0
 80150a6:	d0a1      	beq.n	8014fec <rcl_clock_init+0x1c>
 80150a8:	6133      	str	r3, [r6, #16]
 80150aa:	469c      	mov	ip, r3
 80150ac:	f106 0514 	add.w	r5, r6, #20
 80150b0:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80150dc <rcl_clock_init+0x10c>
 80150b4:	2702      	movs	r7, #2
 80150b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80150ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150be:	6823      	ldr	r3, [r4, #0]
 80150c0:	4660      	mov	r0, ip
 80150c2:	602b      	str	r3, [r5, #0]
 80150c4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80150c8:	7037      	strb	r7, [r6, #0]
 80150ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150cc:	f04f 0c0a 	mov.w	ip, #10
 80150d0:	e78e      	b.n	8014ff0 <rcl_clock_init+0x20>
 80150d2:	bf00      	nop
 80150d4:	08014fa5 	.word	0x08014fa5
 80150d8:	08014fad 	.word	0x08014fad
 80150dc:	08014f9d 	.word	0x08014f9d

080150e0 <rcl_validate_enclave_name_with_size>:
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d049      	beq.n	8015178 <rcl_validate_enclave_name_with_size+0x98>
 80150e4:	b570      	push	{r4, r5, r6, lr}
 80150e6:	4615      	mov	r5, r2
 80150e8:	b0c2      	sub	sp, #264	@ 0x108
 80150ea:	b19a      	cbz	r2, 8015114 <rcl_validate_enclave_name_with_size+0x34>
 80150ec:	461e      	mov	r6, r3
 80150ee:	466a      	mov	r2, sp
 80150f0:	ab01      	add	r3, sp, #4
 80150f2:	460c      	mov	r4, r1
 80150f4:	f000 fc44 	bl	8015980 <rmw_validate_namespace_with_size>
 80150f8:	4684      	mov	ip, r0
 80150fa:	b9b8      	cbnz	r0, 801512c <rcl_validate_enclave_name_with_size+0x4c>
 80150fc:	9900      	ldr	r1, [sp, #0]
 80150fe:	b171      	cbz	r1, 801511e <rcl_validate_enclave_name_with_size+0x3e>
 8015100:	2907      	cmp	r1, #7
 8015102:	d019      	beq.n	8015138 <rcl_validate_enclave_name_with_size+0x58>
 8015104:	1e4b      	subs	r3, r1, #1
 8015106:	2b05      	cmp	r3, #5
 8015108:	d83a      	bhi.n	8015180 <rcl_validate_enclave_name_with_size+0xa0>
 801510a:	e8df f003 	tbb	[pc, r3]
 801510e:	2926      	.short	0x2926
 8015110:	1d322f2c 	.word	0x1d322f2c
 8015114:	f04f 0c0b 	mov.w	ip, #11
 8015118:	4660      	mov	r0, ip
 801511a:	b042      	add	sp, #264	@ 0x108
 801511c:	bd70      	pop	{r4, r5, r6, pc}
 801511e:	2907      	cmp	r1, #7
 8015120:	d00a      	beq.n	8015138 <rcl_validate_enclave_name_with_size+0x58>
 8015122:	2300      	movs	r3, #0
 8015124:	4660      	mov	r0, ip
 8015126:	602b      	str	r3, [r5, #0]
 8015128:	b042      	add	sp, #264	@ 0x108
 801512a:	bd70      	pop	{r4, r5, r6, pc}
 801512c:	f7ff fa0c 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 8015130:	4684      	mov	ip, r0
 8015132:	4660      	mov	r0, ip
 8015134:	b042      	add	sp, #264	@ 0x108
 8015136:	bd70      	pop	{r4, r5, r6, pc}
 8015138:	2cff      	cmp	r4, #255	@ 0xff
 801513a:	d9f2      	bls.n	8015122 <rcl_validate_enclave_name_with_size+0x42>
 801513c:	6029      	str	r1, [r5, #0]
 801513e:	2e00      	cmp	r6, #0
 8015140:	d0ea      	beq.n	8015118 <rcl_validate_enclave_name_with_size+0x38>
 8015142:	23fe      	movs	r3, #254	@ 0xfe
 8015144:	6033      	str	r3, [r6, #0]
 8015146:	e7e7      	b.n	8015118 <rcl_validate_enclave_name_with_size+0x38>
 8015148:	2306      	movs	r3, #6
 801514a:	602b      	str	r3, [r5, #0]
 801514c:	2e00      	cmp	r6, #0
 801514e:	d0e3      	beq.n	8015118 <rcl_validate_enclave_name_with_size+0x38>
 8015150:	9b01      	ldr	r3, [sp, #4]
 8015152:	4660      	mov	r0, ip
 8015154:	6033      	str	r3, [r6, #0]
 8015156:	b042      	add	sp, #264	@ 0x108
 8015158:	bd70      	pop	{r4, r5, r6, pc}
 801515a:	2301      	movs	r3, #1
 801515c:	602b      	str	r3, [r5, #0]
 801515e:	e7f5      	b.n	801514c <rcl_validate_enclave_name_with_size+0x6c>
 8015160:	2302      	movs	r3, #2
 8015162:	602b      	str	r3, [r5, #0]
 8015164:	e7f2      	b.n	801514c <rcl_validate_enclave_name_with_size+0x6c>
 8015166:	2303      	movs	r3, #3
 8015168:	602b      	str	r3, [r5, #0]
 801516a:	e7ef      	b.n	801514c <rcl_validate_enclave_name_with_size+0x6c>
 801516c:	2304      	movs	r3, #4
 801516e:	602b      	str	r3, [r5, #0]
 8015170:	e7ec      	b.n	801514c <rcl_validate_enclave_name_with_size+0x6c>
 8015172:	2305      	movs	r3, #5
 8015174:	602b      	str	r3, [r5, #0]
 8015176:	e7e9      	b.n	801514c <rcl_validate_enclave_name_with_size+0x6c>
 8015178:	f04f 0c0b 	mov.w	ip, #11
 801517c:	4660      	mov	r0, ip
 801517e:	4770      	bx	lr
 8015180:	460b      	mov	r3, r1
 8015182:	4a04      	ldr	r2, [pc, #16]	@ (8015194 <rcl_validate_enclave_name_with_size+0xb4>)
 8015184:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015188:	a802      	add	r0, sp, #8
 801518a:	f000 f961 	bl	8015450 <rcutils_snprintf>
 801518e:	f04f 0c01 	mov.w	ip, #1
 8015192:	e7c1      	b.n	8015118 <rcl_validate_enclave_name_with_size+0x38>
 8015194:	080190f4 	.word	0x080190f4

08015198 <rcl_validate_enclave_name>:
 8015198:	b168      	cbz	r0, 80151b6 <rcl_validate_enclave_name+0x1e>
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	460d      	mov	r5, r1
 801519e:	4616      	mov	r6, r2
 80151a0:	4604      	mov	r4, r0
 80151a2:	f7eb f8a7 	bl	80002f4 <strlen>
 80151a6:	4633      	mov	r3, r6
 80151a8:	4601      	mov	r1, r0
 80151aa:	462a      	mov	r2, r5
 80151ac:	4620      	mov	r0, r4
 80151ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151b2:	f7ff bf95 	b.w	80150e0 <rcl_validate_enclave_name_with_size>
 80151b6:	200b      	movs	r0, #11
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop

080151bc <__atomic_load_8>:
 80151bc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80151c0:	4a16      	ldr	r2, [pc, #88]	@ (801521c <__atomic_load_8+0x60>)
 80151c2:	4b17      	ldr	r3, [pc, #92]	@ (8015220 <__atomic_load_8+0x64>)
 80151c4:	f04f 0c01 	mov.w	ip, #1
 80151c8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80151cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80151d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80151d4:	fb02 f101 	mul.w	r1, r2, r1
 80151d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80151dc:	fba3 2301 	umull	r2, r3, r3, r1
 80151e0:	091b      	lsrs	r3, r3, #4
 80151e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80151e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80151ea:	b4d0      	push	{r4, r6, r7}
 80151ec:	1ac9      	subs	r1, r1, r3
 80151ee:	4c0d      	ldr	r4, [pc, #52]	@ (8015224 <__atomic_load_8+0x68>)
 80151f0:	1862      	adds	r2, r4, r1
 80151f2:	e8d2 3f4f 	ldrexb	r3, [r2]
 80151f6:	e8c2 cf46 	strexb	r6, ip, [r2]
 80151fa:	2e00      	cmp	r6, #0
 80151fc:	d1f9      	bne.n	80151f2 <__atomic_load_8+0x36>
 80151fe:	b2db      	uxtb	r3, r3
 8015200:	f3bf 8f5b 	dmb	ish
 8015204:	2b00      	cmp	r3, #0
 8015206:	d1f4      	bne.n	80151f2 <__atomic_load_8+0x36>
 8015208:	e9d0 6700 	ldrd	r6, r7, [r0]
 801520c:	f3bf 8f5b 	dmb	ish
 8015210:	5463      	strb	r3, [r4, r1]
 8015212:	4630      	mov	r0, r6
 8015214:	4639      	mov	r1, r7
 8015216:	bcd0      	pop	{r4, r6, r7}
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	27d4eb2d 	.word	0x27d4eb2d
 8015220:	b21642c9 	.word	0xb21642c9
 8015224:	24068474 	.word	0x24068474

08015228 <rcutils_get_env>:
 8015228:	b168      	cbz	r0, 8015246 <rcutils_get_env+0x1e>
 801522a:	b510      	push	{r4, lr}
 801522c:	460c      	mov	r4, r1
 801522e:	b129      	cbz	r1, 801523c <rcutils_get_env+0x14>
 8015230:	f002 f8ce 	bl	80173d0 <getenv>
 8015234:	b120      	cbz	r0, 8015240 <rcutils_get_env+0x18>
 8015236:	6020      	str	r0, [r4, #0]
 8015238:	2000      	movs	r0, #0
 801523a:	bd10      	pop	{r4, pc}
 801523c:	4803      	ldr	r0, [pc, #12]	@ (801524c <rcutils_get_env+0x24>)
 801523e:	bd10      	pop	{r4, pc}
 8015240:	4b03      	ldr	r3, [pc, #12]	@ (8015250 <rcutils_get_env+0x28>)
 8015242:	6023      	str	r3, [r4, #0]
 8015244:	bd10      	pop	{r4, pc}
 8015246:	4803      	ldr	r0, [pc, #12]	@ (8015254 <rcutils_get_env+0x2c>)
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop
 801524c:	08019170 	.word	0x08019170
 8015250:	08019294 	.word	0x08019294
 8015254:	08019154 	.word	0x08019154

08015258 <rcutils_is_directory>:
 8015258:	2000      	movs	r0, #0
 801525a:	4770      	bx	lr

0801525c <rcutils_join_path>:
 801525c:	b082      	sub	sp, #8
 801525e:	2000      	movs	r0, #0
 8015260:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015264:	b002      	add	sp, #8
 8015266:	4770      	bx	lr

08015268 <rcutils_to_native_path>:
 8015268:	b084      	sub	sp, #16
 801526a:	2000      	movs	r0, #0
 801526c:	f10d 0c04 	add.w	ip, sp, #4
 8015270:	b004      	add	sp, #16
 8015272:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8015276:	4770      	bx	lr

08015278 <rcutils_format_string_limit>:
 8015278:	b40f      	push	{r0, r1, r2, r3}
 801527a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801527c:	b083      	sub	sp, #12
 801527e:	ac08      	add	r4, sp, #32
 8015280:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015286:	b326      	cbz	r6, 80152d2 <rcutils_format_string_limit+0x5a>
 8015288:	a808      	add	r0, sp, #32
 801528a:	f7f9 fc3d 	bl	800eb08 <rcutils_allocator_is_valid>
 801528e:	b300      	cbz	r0, 80152d2 <rcutils_format_string_limit+0x5a>
 8015290:	2100      	movs	r1, #0
 8015292:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015294:	4632      	mov	r2, r6
 8015296:	4608      	mov	r0, r1
 8015298:	e9cd 3300 	strd	r3, r3, [sp]
 801529c:	f000 f906 	bl	80154ac <rcutils_vsnprintf>
 80152a0:	1c43      	adds	r3, r0, #1
 80152a2:	4605      	mov	r5, r0
 80152a4:	d015      	beq.n	80152d2 <rcutils_format_string_limit+0x5a>
 80152a6:	1c47      	adds	r7, r0, #1
 80152a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152aa:	429f      	cmp	r7, r3
 80152ac:	d901      	bls.n	80152b2 <rcutils_format_string_limit+0x3a>
 80152ae:	1e5d      	subs	r5, r3, #1
 80152b0:	461f      	mov	r7, r3
 80152b2:	9b08      	ldr	r3, [sp, #32]
 80152b4:	4638      	mov	r0, r7
 80152b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80152b8:	4798      	blx	r3
 80152ba:	4604      	mov	r4, r0
 80152bc:	b148      	cbz	r0, 80152d2 <rcutils_format_string_limit+0x5a>
 80152be:	4632      	mov	r2, r6
 80152c0:	4639      	mov	r1, r7
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	f000 f8f2 	bl	80154ac <rcutils_vsnprintf>
 80152c8:	2800      	cmp	r0, #0
 80152ca:	db09      	blt.n	80152e0 <rcutils_format_string_limit+0x68>
 80152cc:	2300      	movs	r3, #0
 80152ce:	5563      	strb	r3, [r4, r5]
 80152d0:	e000      	b.n	80152d4 <rcutils_format_string_limit+0x5c>
 80152d2:	2400      	movs	r4, #0
 80152d4:	4620      	mov	r0, r4
 80152d6:	b003      	add	sp, #12
 80152d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80152dc:	b004      	add	sp, #16
 80152de:	4770      	bx	lr
 80152e0:	4620      	mov	r0, r4
 80152e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80152e6:	2400      	movs	r4, #0
 80152e8:	4798      	blx	r3
 80152ea:	e7f3      	b.n	80152d4 <rcutils_format_string_limit+0x5c>

080152ec <rcutils_repl_str>:
 80152ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f0:	ed2d 8b02 	vpush	{d8}
 80152f4:	b087      	sub	sp, #28
 80152f6:	2600      	movs	r6, #0
 80152f8:	4680      	mov	r8, r0
 80152fa:	468a      	mov	sl, r1
 80152fc:	9000      	str	r0, [sp, #0]
 80152fe:	4608      	mov	r0, r1
 8015300:	ee08 2a10 	vmov	s16, r2
 8015304:	4699      	mov	r9, r3
 8015306:	2510      	movs	r5, #16
 8015308:	f7ea fff4 	bl	80002f4 <strlen>
 801530c:	4637      	mov	r7, r6
 801530e:	46b3      	mov	fp, r6
 8015310:	9001      	str	r0, [sp, #4]
 8015312:	e01e      	b.n	8015352 <rcutils_repl_str+0x66>
 8015314:	f10b 0b01 	add.w	fp, fp, #1
 8015318:	9b01      	ldr	r3, [sp, #4]
 801531a:	455e      	cmp	r6, fp
 801531c:	eb04 0803 	add.w	r8, r4, r3
 8015320:	d211      	bcs.n	8015346 <rcutils_repl_str+0x5a>
 8015322:	442e      	add	r6, r5
 8015324:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015328:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801532c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015330:	00b1      	lsls	r1, r6, #2
 8015332:	4798      	blx	r3
 8015334:	2800      	cmp	r0, #0
 8015336:	f000 8088 	beq.w	801544a <rcutils_repl_str+0x15e>
 801533a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801533e:	4607      	mov	r7, r0
 8015340:	bf28      	it	cs
 8015342:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015346:	9a00      	ldr	r2, [sp, #0]
 8015348:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801534c:	1aa4      	subs	r4, r4, r2
 801534e:	f843 4c04 	str.w	r4, [r3, #-4]
 8015352:	4651      	mov	r1, sl
 8015354:	4640      	mov	r0, r8
 8015356:	f002 fbf4 	bl	8017b42 <strstr>
 801535a:	4604      	mov	r4, r0
 801535c:	4638      	mov	r0, r7
 801535e:	2c00      	cmp	r4, #0
 8015360:	d1d8      	bne.n	8015314 <rcutils_repl_str+0x28>
 8015362:	4640      	mov	r0, r8
 8015364:	f7ea ffc6 	bl	80002f4 <strlen>
 8015368:	9b00      	ldr	r3, [sp, #0]
 801536a:	eba8 0803 	sub.w	r8, r8, r3
 801536e:	eb08 0400 	add.w	r4, r8, r0
 8015372:	9402      	str	r4, [sp, #8]
 8015374:	f1bb 0f00 	cmp.w	fp, #0
 8015378:	d045      	beq.n	8015406 <rcutils_repl_str+0x11a>
 801537a:	ee18 0a10 	vmov	r0, s16
 801537e:	f7ea ffb9 	bl	80002f4 <strlen>
 8015382:	9a01      	ldr	r2, [sp, #4]
 8015384:	4606      	mov	r6, r0
 8015386:	f8d9 3000 	ldr.w	r3, [r9]
 801538a:	1a82      	subs	r2, r0, r2
 801538c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015390:	fb0b 4202 	mla	r2, fp, r2, r4
 8015394:	1c50      	adds	r0, r2, #1
 8015396:	9205      	str	r2, [sp, #20]
 8015398:	4798      	blx	r3
 801539a:	4682      	mov	sl, r0
 801539c:	2800      	cmp	r0, #0
 801539e:	d054      	beq.n	801544a <rcutils_repl_str+0x15e>
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	463d      	mov	r5, r7
 80153a4:	9900      	ldr	r1, [sp, #0]
 80153a6:	2401      	movs	r4, #1
 80153a8:	f002 fcc3 	bl	8017d32 <memcpy>
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80153b2:	eb0a 0803 	add.w	r8, sl, r3
 80153b6:	ee18 7a10 	vmov	r7, s16
 80153ba:	f8dd a000 	ldr.w	sl, [sp]
 80153be:	f8cd 9000 	str.w	r9, [sp]
 80153c2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80153c6:	4632      	mov	r2, r6
 80153c8:	4639      	mov	r1, r7
 80153ca:	4640      	mov	r0, r8
 80153cc:	44b0      	add	r8, r6
 80153ce:	f002 fcb0 	bl	8017d32 <memcpy>
 80153d2:	f855 2b04 	ldr.w	r2, [r5], #4
 80153d6:	45a3      	cmp	fp, r4
 80153d8:	444a      	add	r2, r9
 80153da:	eb0a 0102 	add.w	r1, sl, r2
 80153de:	d02a      	beq.n	8015436 <rcutils_repl_str+0x14a>
 80153e0:	6828      	ldr	r0, [r5, #0]
 80153e2:	1a82      	subs	r2, r0, r2
 80153e4:	4640      	mov	r0, r8
 80153e6:	4490      	add	r8, r2
 80153e8:	f002 fca3 	bl	8017d32 <memcpy>
 80153ec:	1c62      	adds	r2, r4, #1
 80153ee:	45a3      	cmp	fp, r4
 80153f0:	4614      	mov	r4, r2
 80153f2:	d8e8      	bhi.n	80153c6 <rcutils_repl_str+0xda>
 80153f4:	f8dd 9000 	ldr.w	r9, [sp]
 80153f8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80153fc:	2300      	movs	r3, #0
 80153fe:	9a05      	ldr	r2, [sp, #20]
 8015400:	f80a 3002 	strb.w	r3, [sl, r2]
 8015404:	e00b      	b.n	801541e <rcutils_repl_str+0x132>
 8015406:	4620      	mov	r0, r4
 8015408:	f8d9 3000 	ldr.w	r3, [r9]
 801540c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015410:	3001      	adds	r0, #1
 8015412:	4798      	blx	r3
 8015414:	4682      	mov	sl, r0
 8015416:	b110      	cbz	r0, 801541e <rcutils_repl_str+0x132>
 8015418:	9900      	ldr	r1, [sp, #0]
 801541a:	f002 fc82 	bl	8017d22 <strcpy>
 801541e:	4638      	mov	r0, r7
 8015420:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015424:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015428:	4798      	blx	r3
 801542a:	4650      	mov	r0, sl
 801542c:	b007      	add	sp, #28
 801542e:	ecbd 8b02 	vpop	{d8}
 8015432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015436:	9b02      	ldr	r3, [sp, #8]
 8015438:	4640      	mov	r0, r8
 801543a:	f8dd 9000 	ldr.w	r9, [sp]
 801543e:	1a9a      	subs	r2, r3, r2
 8015440:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015444:	f002 fc75 	bl	8017d32 <memcpy>
 8015448:	e7d8      	b.n	80153fc <rcutils_repl_str+0x110>
 801544a:	f04f 0a00 	mov.w	sl, #0
 801544e:	e7e6      	b.n	801541e <rcutils_repl_str+0x132>

08015450 <rcutils_snprintf>:
 8015450:	b40c      	push	{r2, r3}
 8015452:	b530      	push	{r4, r5, lr}
 8015454:	b083      	sub	sp, #12
 8015456:	ab06      	add	r3, sp, #24
 8015458:	f853 2b04 	ldr.w	r2, [r3], #4
 801545c:	9301      	str	r3, [sp, #4]
 801545e:	b1e2      	cbz	r2, 801549a <rcutils_snprintf+0x4a>
 8015460:	fab0 f480 	clz	r4, r0
 8015464:	fab1 f581 	clz	r5, r1
 8015468:	ea50 0c01 	orrs.w	ip, r0, r1
 801546c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015470:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015474:	d008      	beq.n	8015488 <rcutils_snprintf+0x38>
 8015476:	b984      	cbnz	r4, 801549a <rcutils_snprintf+0x4a>
 8015478:	b97d      	cbnz	r5, 801549a <rcutils_snprintf+0x4a>
 801547a:	f002 fb2d 	bl	8017ad8 <vsniprintf>
 801547e:	b003      	add	sp, #12
 8015480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015484:	b002      	add	sp, #8
 8015486:	4770      	bx	lr
 8015488:	4661      	mov	r1, ip
 801548a:	4660      	mov	r0, ip
 801548c:	f002 fb24 	bl	8017ad8 <vsniprintf>
 8015490:	b003      	add	sp, #12
 8015492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015496:	b002      	add	sp, #8
 8015498:	4770      	bx	lr
 801549a:	f002 fc15 	bl	8017cc8 <__errno>
 801549e:	2216      	movs	r2, #22
 80154a0:	4603      	mov	r3, r0
 80154a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154a6:	601a      	str	r2, [r3, #0]
 80154a8:	e7e9      	b.n	801547e <rcutils_snprintf+0x2e>
 80154aa:	bf00      	nop

080154ac <rcutils_vsnprintf>:
 80154ac:	b570      	push	{r4, r5, r6, lr}
 80154ae:	b1b2      	cbz	r2, 80154de <rcutils_vsnprintf+0x32>
 80154b0:	fab0 f480 	clz	r4, r0
 80154b4:	fab1 f581 	clz	r5, r1
 80154b8:	ea50 0c01 	orrs.w	ip, r0, r1
 80154bc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80154c0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80154c4:	d005      	beq.n	80154d2 <rcutils_vsnprintf+0x26>
 80154c6:	b954      	cbnz	r4, 80154de <rcutils_vsnprintf+0x32>
 80154c8:	b94d      	cbnz	r5, 80154de <rcutils_vsnprintf+0x32>
 80154ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154ce:	f002 bb03 	b.w	8017ad8 <vsniprintf>
 80154d2:	4661      	mov	r1, ip
 80154d4:	4660      	mov	r0, ip
 80154d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154da:	f002 bafd 	b.w	8017ad8 <vsniprintf>
 80154de:	f002 fbf3 	bl	8017cc8 <__errno>
 80154e2:	2316      	movs	r3, #22
 80154e4:	6003      	str	r3, [r0, #0]
 80154e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154ea:	bd70      	pop	{r4, r5, r6, pc}

080154ec <rcutils_strdup>:
 80154ec:	b084      	sub	sp, #16
 80154ee:	b570      	push	{r4, r5, r6, lr}
 80154f0:	b082      	sub	sp, #8
 80154f2:	4605      	mov	r5, r0
 80154f4:	ac07      	add	r4, sp, #28
 80154f6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80154fa:	b1b0      	cbz	r0, 801552a <rcutils_strdup+0x3e>
 80154fc:	f7ea fefa 	bl	80002f4 <strlen>
 8015500:	1c42      	adds	r2, r0, #1
 8015502:	9b07      	ldr	r3, [sp, #28]
 8015504:	4606      	mov	r6, r0
 8015506:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015508:	4610      	mov	r0, r2
 801550a:	9201      	str	r2, [sp, #4]
 801550c:	4798      	blx	r3
 801550e:	4604      	mov	r4, r0
 8015510:	b128      	cbz	r0, 801551e <rcutils_strdup+0x32>
 8015512:	9a01      	ldr	r2, [sp, #4]
 8015514:	4629      	mov	r1, r5
 8015516:	f002 fc0c 	bl	8017d32 <memcpy>
 801551a:	2300      	movs	r3, #0
 801551c:	55a3      	strb	r3, [r4, r6]
 801551e:	4620      	mov	r0, r4
 8015520:	b002      	add	sp, #8
 8015522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015526:	b004      	add	sp, #16
 8015528:	4770      	bx	lr
 801552a:	4604      	mov	r4, r0
 801552c:	e7f7      	b.n	801551e <rcutils_strdup+0x32>
 801552e:	bf00      	nop

08015530 <rcutils_strndup>:
 8015530:	b082      	sub	sp, #8
 8015532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015534:	ac06      	add	r4, sp, #24
 8015536:	4605      	mov	r5, r0
 8015538:	e884 000c 	stmia.w	r4, {r2, r3}
 801553c:	b188      	cbz	r0, 8015562 <rcutils_strndup+0x32>
 801553e:	1c4f      	adds	r7, r1, #1
 8015540:	460e      	mov	r6, r1
 8015542:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015544:	4638      	mov	r0, r7
 8015546:	4790      	blx	r2
 8015548:	4604      	mov	r4, r0
 801554a:	b128      	cbz	r0, 8015558 <rcutils_strndup+0x28>
 801554c:	463a      	mov	r2, r7
 801554e:	4629      	mov	r1, r5
 8015550:	f002 fbef 	bl	8017d32 <memcpy>
 8015554:	2300      	movs	r3, #0
 8015556:	55a3      	strb	r3, [r4, r6]
 8015558:	4620      	mov	r0, r4
 801555a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801555e:	b002      	add	sp, #8
 8015560:	4770      	bx	lr
 8015562:	4604      	mov	r4, r0
 8015564:	e7f8      	b.n	8015558 <rcutils_strndup+0x28>
 8015566:	bf00      	nop

08015568 <rcutils_get_zero_initialized_string_map>:
 8015568:	2000      	movs	r0, #0
 801556a:	4b01      	ldr	r3, [pc, #4]	@ (8015570 <rcutils_get_zero_initialized_string_map+0x8>)
 801556c:	6018      	str	r0, [r3, #0]
 801556e:	4770      	bx	lr
 8015570:	2406848c 	.word	0x2406848c

08015574 <rcutils_string_map_reserve>:
 8015574:	2800      	cmp	r0, #0
 8015576:	d05e      	beq.n	8015636 <rcutils_string_map_reserve+0xc2>
 8015578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801557c:	460c      	mov	r4, r1
 801557e:	6801      	ldr	r1, [r0, #0]
 8015580:	b082      	sub	sp, #8
 8015582:	4605      	mov	r5, r0
 8015584:	b129      	cbz	r1, 8015592 <rcutils_string_map_reserve+0x1e>
 8015586:	68cb      	ldr	r3, [r1, #12]
 8015588:	42a3      	cmp	r3, r4
 801558a:	d906      	bls.n	801559a <rcutils_string_map_reserve+0x26>
 801558c:	461c      	mov	r4, r3
 801558e:	2900      	cmp	r1, #0
 8015590:	d1f9      	bne.n	8015586 <rcutils_string_map_reserve+0x12>
 8015592:	201f      	movs	r0, #31
 8015594:	b002      	add	sp, #8
 8015596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801559a:	688b      	ldr	r3, [r1, #8]
 801559c:	42a3      	cmp	r3, r4
 801559e:	d046      	beq.n	801562e <rcutils_string_map_reserve+0xba>
 80155a0:	6a0e      	ldr	r6, [r1, #32]
 80155a2:	2c00      	cmp	r4, #0
 80155a4:	d033      	beq.n	801560e <rcutils_string_map_reserve+0x9a>
 80155a6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80155aa:	d242      	bcs.n	8015632 <rcutils_string_map_reserve+0xbe>
 80155ac:	00a7      	lsls	r7, r4, #2
 80155ae:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80155b2:	6808      	ldr	r0, [r1, #0]
 80155b4:	4632      	mov	r2, r6
 80155b6:	4639      	mov	r1, r7
 80155b8:	47c0      	blx	r8
 80155ba:	2800      	cmp	r0, #0
 80155bc:	d039      	beq.n	8015632 <rcutils_string_map_reserve+0xbe>
 80155be:	682b      	ldr	r3, [r5, #0]
 80155c0:	4632      	mov	r2, r6
 80155c2:	4639      	mov	r1, r7
 80155c4:	6018      	str	r0, [r3, #0]
 80155c6:	6858      	ldr	r0, [r3, #4]
 80155c8:	47c0      	blx	r8
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d031      	beq.n	8015632 <rcutils_string_map_reserve+0xbe>
 80155ce:	682d      	ldr	r5, [r5, #0]
 80155d0:	68ab      	ldr	r3, [r5, #8]
 80155d2:	6068      	str	r0, [r5, #4]
 80155d4:	42a3      	cmp	r3, r4
 80155d6:	d225      	bcs.n	8015624 <rcutils_string_map_reserve+0xb0>
 80155d8:	682a      	ldr	r2, [r5, #0]
 80155da:	eb00 0c07 	add.w	ip, r0, r7
 80155de:	0099      	lsls	r1, r3, #2
 80155e0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80155e4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80155e8:	45e6      	cmp	lr, ip
 80155ea:	d203      	bcs.n	80155f4 <rcutils_string_map_reserve+0x80>
 80155ec:	eb02 0c07 	add.w	ip, r2, r7
 80155f0:	4566      	cmp	r6, ip
 80155f2:	d322      	bcc.n	801563a <rcutils_string_map_reserve+0xc6>
 80155f4:	1ae3      	subs	r3, r4, r3
 80155f6:	4670      	mov	r0, lr
 80155f8:	2100      	movs	r1, #0
 80155fa:	009a      	lsls	r2, r3, #2
 80155fc:	9201      	str	r2, [sp, #4]
 80155fe:	f002 fa79 	bl	8017af4 <memset>
 8015602:	9a01      	ldr	r2, [sp, #4]
 8015604:	2100      	movs	r1, #0
 8015606:	4630      	mov	r0, r6
 8015608:	f002 fa74 	bl	8017af4 <memset>
 801560c:	e00a      	b.n	8015624 <rcutils_string_map_reserve+0xb0>
 801560e:	694f      	ldr	r7, [r1, #20]
 8015610:	6808      	ldr	r0, [r1, #0]
 8015612:	4631      	mov	r1, r6
 8015614:	47b8      	blx	r7
 8015616:	682b      	ldr	r3, [r5, #0]
 8015618:	4631      	mov	r1, r6
 801561a:	6858      	ldr	r0, [r3, #4]
 801561c:	601c      	str	r4, [r3, #0]
 801561e:	47b8      	blx	r7
 8015620:	682d      	ldr	r5, [r5, #0]
 8015622:	606c      	str	r4, [r5, #4]
 8015624:	2000      	movs	r0, #0
 8015626:	60ac      	str	r4, [r5, #8]
 8015628:	b002      	add	sp, #8
 801562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801562e:	2000      	movs	r0, #0
 8015630:	e7b0      	b.n	8015594 <rcutils_string_map_reserve+0x20>
 8015632:	200a      	movs	r0, #10
 8015634:	e7ae      	b.n	8015594 <rcutils_string_map_reserve+0x20>
 8015636:	200b      	movs	r0, #11
 8015638:	4770      	bx	lr
 801563a:	1f0b      	subs	r3, r1, #4
 801563c:	4418      	add	r0, r3
 801563e:	4413      	add	r3, r2
 8015640:	3a04      	subs	r2, #4
 8015642:	4417      	add	r7, r2
 8015644:	2200      	movs	r2, #0
 8015646:	f843 2f04 	str.w	r2, [r3, #4]!
 801564a:	42bb      	cmp	r3, r7
 801564c:	f840 2f04 	str.w	r2, [r0, #4]!
 8015650:	d1f9      	bne.n	8015646 <rcutils_string_map_reserve+0xd2>
 8015652:	e7e7      	b.n	8015624 <rcutils_string_map_reserve+0xb0>

08015654 <rcutils_string_map_init>:
 8015654:	b082      	sub	sp, #8
 8015656:	b570      	push	{r4, r5, r6, lr}
 8015658:	ac04      	add	r4, sp, #16
 801565a:	e884 000c 	stmia.w	r4, {r2, r3}
 801565e:	b380      	cbz	r0, 80156c2 <rcutils_string_map_init+0x6e>
 8015660:	6806      	ldr	r6, [r0, #0]
 8015662:	4604      	mov	r4, r0
 8015664:	b12e      	cbz	r6, 8015672 <rcutils_string_map_init+0x1e>
 8015666:	251e      	movs	r5, #30
 8015668:	4628      	mov	r0, r5
 801566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801566e:	b002      	add	sp, #8
 8015670:	4770      	bx	lr
 8015672:	a804      	add	r0, sp, #16
 8015674:	460d      	mov	r5, r1
 8015676:	f7f9 fa47 	bl	800eb08 <rcutils_allocator_is_valid>
 801567a:	b310      	cbz	r0, 80156c2 <rcutils_string_map_init+0x6e>
 801567c:	9b04      	ldr	r3, [sp, #16]
 801567e:	2024      	movs	r0, #36	@ 0x24
 8015680:	9908      	ldr	r1, [sp, #32]
 8015682:	4798      	blx	r3
 8015684:	6020      	str	r0, [r4, #0]
 8015686:	b310      	cbz	r0, 80156ce <rcutils_string_map_init+0x7a>
 8015688:	f10d 0e10 	add.w	lr, sp, #16
 801568c:	f100 0c10 	add.w	ip, r0, #16
 8015690:	e9c0 6600 	strd	r6, r6, [r0]
 8015694:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015698:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801569c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156a0:	f8de 3000 	ldr.w	r3, [lr]
 80156a4:	4629      	mov	r1, r5
 80156a6:	4620      	mov	r0, r4
 80156a8:	f8cc 3000 	str.w	r3, [ip]
 80156ac:	f7ff ff62 	bl	8015574 <rcutils_string_map_reserve>
 80156b0:	4605      	mov	r5, r0
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d0d8      	beq.n	8015668 <rcutils_string_map_init+0x14>
 80156b6:	9b05      	ldr	r3, [sp, #20]
 80156b8:	9908      	ldr	r1, [sp, #32]
 80156ba:	6820      	ldr	r0, [r4, #0]
 80156bc:	4798      	blx	r3
 80156be:	6026      	str	r6, [r4, #0]
 80156c0:	e7d2      	b.n	8015668 <rcutils_string_map_init+0x14>
 80156c2:	250b      	movs	r5, #11
 80156c4:	4628      	mov	r0, r5
 80156c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156ca:	b002      	add	sp, #8
 80156cc:	4770      	bx	lr
 80156ce:	250a      	movs	r5, #10
 80156d0:	e7ca      	b.n	8015668 <rcutils_string_map_init+0x14>
 80156d2:	bf00      	nop

080156d4 <rcutils_string_map_fini>:
 80156d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d8:	b082      	sub	sp, #8
 80156da:	2800      	cmp	r0, #0
 80156dc:	d03a      	beq.n	8015754 <rcutils_string_map_fini+0x80>
 80156de:	6804      	ldr	r4, [r0, #0]
 80156e0:	4606      	mov	r6, r0
 80156e2:	2c00      	cmp	r4, #0
 80156e4:	d032      	beq.n	801574c <rcutils_string_map_fini+0x78>
 80156e6:	68a3      	ldr	r3, [r4, #8]
 80156e8:	b32b      	cbz	r3, 8015736 <rcutils_string_map_fini+0x62>
 80156ea:	2500      	movs	r5, #0
 80156ec:	6822      	ldr	r2, [r4, #0]
 80156ee:	462f      	mov	r7, r5
 80156f0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80156f4:	b1e0      	cbz	r0, 8015730 <rcutils_string_map_fini+0x5c>
 80156f6:	6a21      	ldr	r1, [r4, #32]
 80156f8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80156fc:	9101      	str	r1, [sp, #4]
 80156fe:	47c0      	blx	r8
 8015700:	9901      	ldr	r1, [sp, #4]
 8015702:	e9d4 3200 	ldrd	r3, r2, [r4]
 8015706:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801570a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801570e:	47c0      	blx	r8
 8015710:	68e3      	ldr	r3, [r4, #12]
 8015712:	6862      	ldr	r2, [r4, #4]
 8015714:	3b01      	subs	r3, #1
 8015716:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801571a:	3501      	adds	r5, #1
 801571c:	60e3      	str	r3, [r4, #12]
 801571e:	6834      	ldr	r4, [r6, #0]
 8015720:	68a3      	ldr	r3, [r4, #8]
 8015722:	429d      	cmp	r5, r3
 8015724:	d207      	bcs.n	8015736 <rcutils_string_map_fini+0x62>
 8015726:	6822      	ldr	r2, [r4, #0]
 8015728:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801572c:	2800      	cmp	r0, #0
 801572e:	d1e2      	bne.n	80156f6 <rcutils_string_map_fini+0x22>
 8015730:	3501      	adds	r5, #1
 8015732:	429d      	cmp	r5, r3
 8015734:	d3dc      	bcc.n	80156f0 <rcutils_string_map_fini+0x1c>
 8015736:	2100      	movs	r1, #0
 8015738:	4630      	mov	r0, r6
 801573a:	f7ff ff1b 	bl	8015574 <rcutils_string_map_reserve>
 801573e:	4604      	mov	r4, r0
 8015740:	b920      	cbnz	r0, 801574c <rcutils_string_map_fini+0x78>
 8015742:	6830      	ldr	r0, [r6, #0]
 8015744:	6943      	ldr	r3, [r0, #20]
 8015746:	6a01      	ldr	r1, [r0, #32]
 8015748:	4798      	blx	r3
 801574a:	6034      	str	r4, [r6, #0]
 801574c:	4620      	mov	r0, r4
 801574e:	b002      	add	sp, #8
 8015750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015754:	240b      	movs	r4, #11
 8015756:	4620      	mov	r0, r4
 8015758:	b002      	add	sp, #8
 801575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575e:	bf00      	nop

08015760 <rcutils_string_map_getn>:
 8015760:	b378      	cbz	r0, 80157c2 <rcutils_string_map_getn+0x62>
 8015762:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015766:	f8d0 b000 	ldr.w	fp, [r0]
 801576a:	f1bb 0f00 	cmp.w	fp, #0
 801576e:	d01f      	beq.n	80157b0 <rcutils_string_map_getn+0x50>
 8015770:	fab1 f481 	clz	r4, r1
 8015774:	4688      	mov	r8, r1
 8015776:	0964      	lsrs	r4, r4, #5
 8015778:	b1d1      	cbz	r1, 80157b0 <rcutils_string_map_getn+0x50>
 801577a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801577e:	f8db 6000 	ldr.w	r6, [fp]
 8015782:	b1af      	cbz	r7, 80157b0 <rcutils_string_map_getn+0x50>
 8015784:	4691      	mov	r9, r2
 8015786:	3e04      	subs	r6, #4
 8015788:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801578c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8015790:	3401      	adds	r4, #1
 8015792:	4628      	mov	r0, r5
 8015794:	b155      	cbz	r5, 80157ac <rcutils_string_map_getn+0x4c>
 8015796:	f7ea fdad 	bl	80002f4 <strlen>
 801579a:	4602      	mov	r2, r0
 801579c:	4629      	mov	r1, r5
 801579e:	4640      	mov	r0, r8
 80157a0:	454a      	cmp	r2, r9
 80157a2:	bf38      	it	cc
 80157a4:	464a      	movcc	r2, r9
 80157a6:	f002 f9ba 	bl	8017b1e <strncmp>
 80157aa:	b120      	cbz	r0, 80157b6 <rcutils_string_map_getn+0x56>
 80157ac:	42a7      	cmp	r7, r4
 80157ae:	d1eb      	bne.n	8015788 <rcutils_string_map_getn+0x28>
 80157b0:	2000      	movs	r0, #0
 80157b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80157ba:	f853 000a 	ldr.w	r0, [r3, sl]
 80157be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	4770      	bx	lr

080157c4 <rcutils_system_time_now>:
 80157c4:	b300      	cbz	r0, 8015808 <rcutils_system_time_now+0x44>
 80157c6:	b570      	push	{r4, r5, r6, lr}
 80157c8:	b084      	sub	sp, #16
 80157ca:	4604      	mov	r4, r0
 80157cc:	2001      	movs	r0, #1
 80157ce:	4669      	mov	r1, sp
 80157d0:	f7eb ffba 	bl	8001748 <clock_gettime>
 80157d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80157d8:	2900      	cmp	r1, #0
 80157da:	db12      	blt.n	8015802 <rcutils_system_time_now+0x3e>
 80157dc:	ea53 0201 	orrs.w	r2, r3, r1
 80157e0:	9d02      	ldr	r5, [sp, #8]
 80157e2:	d101      	bne.n	80157e8 <rcutils_system_time_now+0x24>
 80157e4:	2d00      	cmp	r5, #0
 80157e6:	db0c      	blt.n	8015802 <rcutils_system_time_now+0x3e>
 80157e8:	4e08      	ldr	r6, [pc, #32]	@ (801580c <rcutils_system_time_now+0x48>)
 80157ea:	2000      	movs	r0, #0
 80157ec:	fba3 3206 	umull	r3, r2, r3, r6
 80157f0:	195b      	adds	r3, r3, r5
 80157f2:	fb06 2201 	mla	r2, r6, r1, r2
 80157f6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80157fa:	e9c4 3200 	strd	r3, r2, [r4]
 80157fe:	b004      	add	sp, #16
 8015800:	bd70      	pop	{r4, r5, r6, pc}
 8015802:	2002      	movs	r0, #2
 8015804:	b004      	add	sp, #16
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	200b      	movs	r0, #11
 801580a:	4770      	bx	lr
 801580c:	3b9aca00 	.word	0x3b9aca00

08015810 <rcutils_steady_time_now>:
 8015810:	b300      	cbz	r0, 8015854 <rcutils_steady_time_now+0x44>
 8015812:	b570      	push	{r4, r5, r6, lr}
 8015814:	b084      	sub	sp, #16
 8015816:	4604      	mov	r4, r0
 8015818:	2000      	movs	r0, #0
 801581a:	4669      	mov	r1, sp
 801581c:	f7eb ff94 	bl	8001748 <clock_gettime>
 8015820:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015824:	2900      	cmp	r1, #0
 8015826:	db12      	blt.n	801584e <rcutils_steady_time_now+0x3e>
 8015828:	ea53 0201 	orrs.w	r2, r3, r1
 801582c:	9d02      	ldr	r5, [sp, #8]
 801582e:	d101      	bne.n	8015834 <rcutils_steady_time_now+0x24>
 8015830:	2d00      	cmp	r5, #0
 8015832:	db0c      	blt.n	801584e <rcutils_steady_time_now+0x3e>
 8015834:	4e08      	ldr	r6, [pc, #32]	@ (8015858 <rcutils_steady_time_now+0x48>)
 8015836:	2000      	movs	r0, #0
 8015838:	fba3 3206 	umull	r3, r2, r3, r6
 801583c:	195b      	adds	r3, r3, r5
 801583e:	fb06 2201 	mla	r2, r6, r1, r2
 8015842:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015846:	e9c4 3200 	strd	r3, r2, [r4]
 801584a:	b004      	add	sp, #16
 801584c:	bd70      	pop	{r4, r5, r6, pc}
 801584e:	2002      	movs	r0, #2
 8015850:	b004      	add	sp, #16
 8015852:	bd70      	pop	{r4, r5, r6, pc}
 8015854:	200b      	movs	r0, #11
 8015856:	4770      	bx	lr
 8015858:	3b9aca00 	.word	0x3b9aca00
 801585c:	00000000 	.word	0x00000000

08015860 <rmw_get_zero_initialized_context>:
 8015860:	b510      	push	{r4, lr}
 8015862:	4604      	mov	r4, r0
 8015864:	3010      	adds	r0, #16
 8015866:	f7f9 f98f 	bl	800eb88 <rmw_get_zero_initialized_init_options>
 801586a:	2300      	movs	r3, #0
 801586c:	4620      	mov	r0, r4
 801586e:	60a3      	str	r3, [r4, #8]
 8015870:	64a3      	str	r3, [r4, #72]	@ 0x48
 8015872:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8015874:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8015880 <rmw_get_zero_initialized_context+0x20>
 8015878:	ed84 7b00 	vstr	d7, [r4]
 801587c:	bd10      	pop	{r4, pc}
 801587e:	bf00      	nop
	...

08015888 <rmw_validate_full_topic_name>:
 8015888:	2800      	cmp	r0, #0
 801588a:	d05d      	beq.n	8015948 <rmw_validate_full_topic_name+0xc0>
 801588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015890:	460d      	mov	r5, r1
 8015892:	2900      	cmp	r1, #0
 8015894:	d05a      	beq.n	801594c <rmw_validate_full_topic_name+0xc4>
 8015896:	4604      	mov	r4, r0
 8015898:	4616      	mov	r6, r2
 801589a:	f7ea fd2b 	bl	80002f4 <strlen>
 801589e:	b150      	cbz	r0, 80158b6 <rmw_validate_full_topic_name+0x2e>
 80158a0:	7823      	ldrb	r3, [r4, #0]
 80158a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80158a4:	d00e      	beq.n	80158c4 <rmw_validate_full_topic_name+0x3c>
 80158a6:	2302      	movs	r3, #2
 80158a8:	602b      	str	r3, [r5, #0]
 80158aa:	b146      	cbz	r6, 80158be <rmw_validate_full_topic_name+0x36>
 80158ac:	2300      	movs	r3, #0
 80158ae:	4618      	mov	r0, r3
 80158b0:	6033      	str	r3, [r6, #0]
 80158b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158b6:	2301      	movs	r3, #1
 80158b8:	602b      	str	r3, [r5, #0]
 80158ba:	2e00      	cmp	r6, #0
 80158bc:	d1f6      	bne.n	80158ac <rmw_validate_full_topic_name+0x24>
 80158be:	2000      	movs	r0, #0
 80158c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158c4:	1e43      	subs	r3, r0, #1
 80158c6:	5ce2      	ldrb	r2, [r4, r3]
 80158c8:	2a2f      	cmp	r2, #47	@ 0x2f
 80158ca:	d041      	beq.n	8015950 <rmw_validate_full_topic_name+0xc8>
 80158cc:	1e62      	subs	r2, r4, #1
 80158ce:	f1c4 0e01 	rsb	lr, r4, #1
 80158d2:	eb02 0800 	add.w	r8, r2, r0
 80158d6:	eb0e 0702 	add.w	r7, lr, r2
 80158da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80158de:	f023 0120 	bic.w	r1, r3, #32
 80158e2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80158e6:	3941      	subs	r1, #65	@ 0x41
 80158e8:	2919      	cmp	r1, #25
 80158ea:	d90f      	bls.n	801590c <rmw_validate_full_topic_name+0x84>
 80158ec:	f1bc 0f0a 	cmp.w	ip, #10
 80158f0:	d90c      	bls.n	801590c <rmw_validate_full_topic_name+0x84>
 80158f2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80158f6:	fab3 f383 	clz	r3, r3
 80158fa:	095b      	lsrs	r3, r3, #5
 80158fc:	b933      	cbnz	r3, 801590c <rmw_validate_full_topic_name+0x84>
 80158fe:	2204      	movs	r2, #4
 8015900:	602a      	str	r2, [r5, #0]
 8015902:	2e00      	cmp	r6, #0
 8015904:	d0db      	beq.n	80158be <rmw_validate_full_topic_name+0x36>
 8015906:	4618      	mov	r0, r3
 8015908:	6037      	str	r7, [r6, #0]
 801590a:	e7d2      	b.n	80158b2 <rmw_validate_full_topic_name+0x2a>
 801590c:	4542      	cmp	r2, r8
 801590e:	d1e2      	bne.n	80158d6 <rmw_validate_full_topic_name+0x4e>
 8015910:	2301      	movs	r3, #1
 8015912:	4f1a      	ldr	r7, [pc, #104]	@ (801597c <rmw_validate_full_topic_name+0xf4>)
 8015914:	e004      	b.n	8015920 <rmw_validate_full_topic_name+0x98>
 8015916:	4298      	cmp	r0, r3
 8015918:	f104 0401 	add.w	r4, r4, #1
 801591c:	4613      	mov	r3, r2
 801591e:	d91c      	bls.n	801595a <rmw_validate_full_topic_name+0xd2>
 8015920:	4298      	cmp	r0, r3
 8015922:	f103 0201 	add.w	r2, r3, #1
 8015926:	d0f6      	beq.n	8015916 <rmw_validate_full_topic_name+0x8e>
 8015928:	7821      	ldrb	r1, [r4, #0]
 801592a:	292f      	cmp	r1, #47	@ 0x2f
 801592c:	d1f3      	bne.n	8015916 <rmw_validate_full_topic_name+0x8e>
 801592e:	7861      	ldrb	r1, [r4, #1]
 8015930:	292f      	cmp	r1, #47	@ 0x2f
 8015932:	d01e      	beq.n	8015972 <rmw_validate_full_topic_name+0xea>
 8015934:	5dc9      	ldrb	r1, [r1, r7]
 8015936:	0749      	lsls	r1, r1, #29
 8015938:	d5ed      	bpl.n	8015916 <rmw_validate_full_topic_name+0x8e>
 801593a:	2206      	movs	r2, #6
 801593c:	602a      	str	r2, [r5, #0]
 801593e:	2e00      	cmp	r6, #0
 8015940:	d0bd      	beq.n	80158be <rmw_validate_full_topic_name+0x36>
 8015942:	2000      	movs	r0, #0
 8015944:	6033      	str	r3, [r6, #0]
 8015946:	e7b4      	b.n	80158b2 <rmw_validate_full_topic_name+0x2a>
 8015948:	200b      	movs	r0, #11
 801594a:	4770      	bx	lr
 801594c:	200b      	movs	r0, #11
 801594e:	e7b0      	b.n	80158b2 <rmw_validate_full_topic_name+0x2a>
 8015950:	2203      	movs	r2, #3
 8015952:	602a      	str	r2, [r5, #0]
 8015954:	2e00      	cmp	r6, #0
 8015956:	d1f4      	bne.n	8015942 <rmw_validate_full_topic_name+0xba>
 8015958:	e7b1      	b.n	80158be <rmw_validate_full_topic_name+0x36>
 801595a:	28f7      	cmp	r0, #247	@ 0xf7
 801595c:	d803      	bhi.n	8015966 <rmw_validate_full_topic_name+0xde>
 801595e:	2300      	movs	r3, #0
 8015960:	4618      	mov	r0, r3
 8015962:	602b      	str	r3, [r5, #0]
 8015964:	e7a5      	b.n	80158b2 <rmw_validate_full_topic_name+0x2a>
 8015966:	2307      	movs	r3, #7
 8015968:	602b      	str	r3, [r5, #0]
 801596a:	2e00      	cmp	r6, #0
 801596c:	d0a7      	beq.n	80158be <rmw_validate_full_topic_name+0x36>
 801596e:	23f6      	movs	r3, #246	@ 0xf6
 8015970:	e7e7      	b.n	8015942 <rmw_validate_full_topic_name+0xba>
 8015972:	2205      	movs	r2, #5
 8015974:	602a      	str	r2, [r5, #0]
 8015976:	2e00      	cmp	r6, #0
 8015978:	d1e3      	bne.n	8015942 <rmw_validate_full_topic_name+0xba>
 801597a:	e7a0      	b.n	80158be <rmw_validate_full_topic_name+0x36>
 801597c:	08019584 	.word	0x08019584

08015980 <rmw_validate_namespace_with_size>:
 8015980:	2800      	cmp	r0, #0
 8015982:	d043      	beq.n	8015a0c <rmw_validate_namespace_with_size+0x8c>
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	4614      	mov	r4, r2
 8015988:	b0c2      	sub	sp, #264	@ 0x108
 801598a:	b32a      	cbz	r2, 80159d8 <rmw_validate_namespace_with_size+0x58>
 801598c:	2901      	cmp	r1, #1
 801598e:	460d      	mov	r5, r1
 8015990:	461e      	mov	r6, r3
 8015992:	d102      	bne.n	801599a <rmw_validate_namespace_with_size+0x1a>
 8015994:	7803      	ldrb	r3, [r0, #0]
 8015996:	2b2f      	cmp	r3, #47	@ 0x2f
 8015998:	d012      	beq.n	80159c0 <rmw_validate_namespace_with_size+0x40>
 801599a:	aa01      	add	r2, sp, #4
 801599c:	4669      	mov	r1, sp
 801599e:	f7ff ff73 	bl	8015888 <rmw_validate_full_topic_name>
 80159a2:	b980      	cbnz	r0, 80159c6 <rmw_validate_namespace_with_size+0x46>
 80159a4:	9a00      	ldr	r2, [sp, #0]
 80159a6:	b14a      	cbz	r2, 80159bc <rmw_validate_namespace_with_size+0x3c>
 80159a8:	2a07      	cmp	r2, #7
 80159aa:	d007      	beq.n	80159bc <rmw_validate_namespace_with_size+0x3c>
 80159ac:	1e53      	subs	r3, r2, #1
 80159ae:	2b05      	cmp	r3, #5
 80159b0:	d82e      	bhi.n	8015a10 <rmw_validate_namespace_with_size+0x90>
 80159b2:	e8df f003 	tbb	[pc, r3]
 80159b6:	1f1c      	.short	0x1f1c
 80159b8:	14282522 	.word	0x14282522
 80159bc:	2df5      	cmp	r5, #245	@ 0xf5
 80159be:	d804      	bhi.n	80159ca <rmw_validate_namespace_with_size+0x4a>
 80159c0:	2300      	movs	r3, #0
 80159c2:	4618      	mov	r0, r3
 80159c4:	6023      	str	r3, [r4, #0]
 80159c6:	b042      	add	sp, #264	@ 0x108
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
 80159ca:	2307      	movs	r3, #7
 80159cc:	6023      	str	r3, [r4, #0]
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d0f9      	beq.n	80159c6 <rmw_validate_namespace_with_size+0x46>
 80159d2:	23f4      	movs	r3, #244	@ 0xf4
 80159d4:	6033      	str	r3, [r6, #0]
 80159d6:	e7f6      	b.n	80159c6 <rmw_validate_namespace_with_size+0x46>
 80159d8:	200b      	movs	r0, #11
 80159da:	b042      	add	sp, #264	@ 0x108
 80159dc:	bd70      	pop	{r4, r5, r6, pc}
 80159de:	2306      	movs	r3, #6
 80159e0:	6023      	str	r3, [r4, #0]
 80159e2:	2e00      	cmp	r6, #0
 80159e4:	d0ef      	beq.n	80159c6 <rmw_validate_namespace_with_size+0x46>
 80159e6:	9b01      	ldr	r3, [sp, #4]
 80159e8:	6033      	str	r3, [r6, #0]
 80159ea:	b042      	add	sp, #264	@ 0x108
 80159ec:	bd70      	pop	{r4, r5, r6, pc}
 80159ee:	2301      	movs	r3, #1
 80159f0:	6023      	str	r3, [r4, #0]
 80159f2:	e7f6      	b.n	80159e2 <rmw_validate_namespace_with_size+0x62>
 80159f4:	2302      	movs	r3, #2
 80159f6:	6023      	str	r3, [r4, #0]
 80159f8:	e7f3      	b.n	80159e2 <rmw_validate_namespace_with_size+0x62>
 80159fa:	2303      	movs	r3, #3
 80159fc:	6023      	str	r3, [r4, #0]
 80159fe:	e7f0      	b.n	80159e2 <rmw_validate_namespace_with_size+0x62>
 8015a00:	2304      	movs	r3, #4
 8015a02:	6023      	str	r3, [r4, #0]
 8015a04:	e7ed      	b.n	80159e2 <rmw_validate_namespace_with_size+0x62>
 8015a06:	2305      	movs	r3, #5
 8015a08:	6023      	str	r3, [r4, #0]
 8015a0a:	e7ea      	b.n	80159e2 <rmw_validate_namespace_with_size+0x62>
 8015a0c:	200b      	movs	r0, #11
 8015a0e:	4770      	bx	lr
 8015a10:	4613      	mov	r3, r2
 8015a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a16:	4a03      	ldr	r2, [pc, #12]	@ (8015a24 <rmw_validate_namespace_with_size+0xa4>)
 8015a18:	a802      	add	r0, sp, #8
 8015a1a:	f7ff fd19 	bl	8015450 <rcutils_snprintf>
 8015a1e:	2001      	movs	r0, #1
 8015a20:	e7d1      	b.n	80159c6 <rmw_validate_namespace_with_size+0x46>
 8015a22:	bf00      	nop
 8015a24:	0801918c 	.word	0x0801918c

08015a28 <rmw_validate_namespace>:
 8015a28:	b168      	cbz	r0, 8015a46 <rmw_validate_namespace+0x1e>
 8015a2a:	b570      	push	{r4, r5, r6, lr}
 8015a2c:	460d      	mov	r5, r1
 8015a2e:	4616      	mov	r6, r2
 8015a30:	4604      	mov	r4, r0
 8015a32:	f7ea fc5f 	bl	80002f4 <strlen>
 8015a36:	4633      	mov	r3, r6
 8015a38:	4601      	mov	r1, r0
 8015a3a:	462a      	mov	r2, r5
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a42:	f7ff bf9d 	b.w	8015980 <rmw_validate_namespace_with_size>
 8015a46:	200b      	movs	r0, #11
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop

08015a4c <rmw_namespace_validation_result_string>:
 8015a4c:	2807      	cmp	r0, #7
 8015a4e:	d803      	bhi.n	8015a58 <rmw_namespace_validation_result_string+0xc>
 8015a50:	4b02      	ldr	r3, [pc, #8]	@ (8015a5c <rmw_namespace_validation_result_string+0x10>)
 8015a52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015a56:	4770      	bx	lr
 8015a58:	4801      	ldr	r0, [pc, #4]	@ (8015a60 <rmw_namespace_validation_result_string+0x14>)
 8015a5a:	4770      	bx	lr
 8015a5c:	08019384 	.word	0x08019384
 8015a60:	080191dc 	.word	0x080191dc

08015a64 <rmw_validate_node_name>:
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d042      	beq.n	8015aee <rmw_validate_node_name+0x8a>
 8015a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a6c:	460d      	mov	r5, r1
 8015a6e:	2900      	cmp	r1, #0
 8015a70:	d03f      	beq.n	8015af2 <rmw_validate_node_name+0x8e>
 8015a72:	4604      	mov	r4, r0
 8015a74:	4616      	mov	r6, r2
 8015a76:	f7ea fc3d 	bl	80002f4 <strlen>
 8015a7a:	b310      	cbz	r0, 8015ac2 <rmw_validate_node_name+0x5e>
 8015a7c:	1e63      	subs	r3, r4, #1
 8015a7e:	f1c4 0101 	rsb	r1, r4, #1
 8015a82:	eb03 0800 	add.w	r8, r3, r0
 8015a86:	18cf      	adds	r7, r1, r3
 8015a88:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015a8c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015a90:	f02e 0c20 	bic.w	ip, lr, #32
 8015a94:	2a09      	cmp	r2, #9
 8015a96:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015a9a:	d905      	bls.n	8015aa8 <rmw_validate_node_name+0x44>
 8015a9c:	f1bc 0f19 	cmp.w	ip, #25
 8015aa0:	d902      	bls.n	8015aa8 <rmw_validate_node_name+0x44>
 8015aa2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015aa6:	d114      	bne.n	8015ad2 <rmw_validate_node_name+0x6e>
 8015aa8:	4598      	cmp	r8, r3
 8015aaa:	d1ec      	bne.n	8015a86 <rmw_validate_node_name+0x22>
 8015aac:	7822      	ldrb	r2, [r4, #0]
 8015aae:	4b16      	ldr	r3, [pc, #88]	@ (8015b08 <rmw_validate_node_name+0xa4>)
 8015ab0:	5cd3      	ldrb	r3, [r2, r3]
 8015ab2:	f013 0304 	ands.w	r3, r3, #4
 8015ab6:	d113      	bne.n	8015ae0 <rmw_validate_node_name+0x7c>
 8015ab8:	28ff      	cmp	r0, #255	@ 0xff
 8015aba:	d81c      	bhi.n	8015af6 <rmw_validate_node_name+0x92>
 8015abc:	4618      	mov	r0, r3
 8015abe:	602b      	str	r3, [r5, #0]
 8015ac0:	e00c      	b.n	8015adc <rmw_validate_node_name+0x78>
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	602b      	str	r3, [r5, #0]
 8015ac6:	b17e      	cbz	r6, 8015ae8 <rmw_validate_node_name+0x84>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4618      	mov	r0, r3
 8015acc:	6033      	str	r3, [r6, #0]
 8015ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad2:	2302      	movs	r3, #2
 8015ad4:	602b      	str	r3, [r5, #0]
 8015ad6:	b13e      	cbz	r6, 8015ae8 <rmw_validate_node_name+0x84>
 8015ad8:	2000      	movs	r0, #0
 8015ada:	6037      	str	r7, [r6, #0]
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae0:	2303      	movs	r3, #3
 8015ae2:	602b      	str	r3, [r5, #0]
 8015ae4:	2e00      	cmp	r6, #0
 8015ae6:	d1ef      	bne.n	8015ac8 <rmw_validate_node_name+0x64>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aee:	200b      	movs	r0, #11
 8015af0:	4770      	bx	lr
 8015af2:	200b      	movs	r0, #11
 8015af4:	e7f2      	b.n	8015adc <rmw_validate_node_name+0x78>
 8015af6:	2204      	movs	r2, #4
 8015af8:	602a      	str	r2, [r5, #0]
 8015afa:	2e00      	cmp	r6, #0
 8015afc:	d0f4      	beq.n	8015ae8 <rmw_validate_node_name+0x84>
 8015afe:	22fe      	movs	r2, #254	@ 0xfe
 8015b00:	4618      	mov	r0, r3
 8015b02:	6032      	str	r2, [r6, #0]
 8015b04:	e7ea      	b.n	8015adc <rmw_validate_node_name+0x78>
 8015b06:	bf00      	nop
 8015b08:	08019584 	.word	0x08019584

08015b0c <rmw_node_name_validation_result_string>:
 8015b0c:	2804      	cmp	r0, #4
 8015b0e:	d803      	bhi.n	8015b18 <rmw_node_name_validation_result_string+0xc>
 8015b10:	4b02      	ldr	r3, [pc, #8]	@ (8015b1c <rmw_node_name_validation_result_string+0x10>)
 8015b12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015b16:	4770      	bx	lr
 8015b18:	4801      	ldr	r0, [pc, #4]	@ (8015b20 <rmw_node_name_validation_result_string+0x14>)
 8015b1a:	4770      	bx	lr
 8015b1c:	08019490 	.word	0x08019490
 8015b20:	080193a4 	.word	0x080193a4

08015b24 <on_status>:
 8015b24:	b082      	sub	sp, #8
 8015b26:	b002      	add	sp, #8
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop

08015b2c <on_topic>:
 8015b2c:	4a23      	ldr	r2, [pc, #140]	@ (8015bbc <on_topic+0x90>)
 8015b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	6812      	ldr	r2, [r2, #0]
 8015b34:	b094      	sub	sp, #80	@ 0x50
 8015b36:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015b38:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8015b3c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b40:	b3c2      	cbz	r2, 8015bb4 <on_topic+0x88>
 8015b42:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015b46:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015b4a:	e001      	b.n	8015b50 <on_topic+0x24>
 8015b4c:	6852      	ldr	r2, [r2, #4]
 8015b4e:	b38a      	cbz	r2, 8015bb4 <on_topic+0x88>
 8015b50:	6894      	ldr	r4, [r2, #8]
 8015b52:	8aa3      	ldrh	r3, [r4, #20]
 8015b54:	428b      	cmp	r3, r1
 8015b56:	d1f9      	bne.n	8015b4c <on_topic+0x20>
 8015b58:	7da3      	ldrb	r3, [r4, #22]
 8015b5a:	4283      	cmp	r3, r0
 8015b5c:	d1f6      	bne.n	8015b4c <on_topic+0x20>
 8015b5e:	2248      	movs	r2, #72	@ 0x48
 8015b60:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015b64:	4668      	mov	r0, sp
 8015b66:	f002 f8e4 	bl	8017d32 <memcpy>
 8015b6a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015b6e:	4620      	mov	r0, r4
 8015b70:	cb0c      	ldmia	r3, {r2, r3}
 8015b72:	f7fa f823 	bl	800fbbc <rmw_uxrce_get_static_input_buffer_for_entity>
 8015b76:	4607      	mov	r7, r0
 8015b78:	b1e0      	cbz	r0, 8015bb4 <on_topic+0x88>
 8015b7a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015b7e:	462a      	mov	r2, r5
 8015b80:	4630      	mov	r0, r6
 8015b82:	f108 0110 	add.w	r1, r8, #16
 8015b86:	f000 fa93 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8015b8a:	b930      	cbnz	r0, 8015b9a <on_topic+0x6e>
 8015b8c:	4639      	mov	r1, r7
 8015b8e:	480c      	ldr	r0, [pc, #48]	@ (8015bc0 <on_topic+0x94>)
 8015b90:	b014      	add	sp, #80	@ 0x50
 8015b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b96:	f000 b8bd 	b.w	8015d14 <put_memory>
 8015b9a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015b9e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8015ba2:	f7f9 fe09 	bl	800f7b8 <rmw_uros_epoch_nanos>
 8015ba6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015baa:	2305      	movs	r3, #5
 8015bac:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015bb0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015bb4:	b014      	add	sp, #80	@ 0x50
 8015bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bba:	bf00      	nop
 8015bbc:	2406843c 	.word	0x2406843c
 8015bc0:	2406842c 	.word	0x2406842c

08015bc4 <on_request>:
 8015bc4:	4824      	ldr	r0, [pc, #144]	@ (8015c58 <on_request+0x94>)
 8015bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bca:	6800      	ldr	r0, [r0, #0]
 8015bcc:	b094      	sub	sp, #80	@ 0x50
 8015bce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015bd0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015bd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d03b      	beq.n	8015c52 <on_request+0x8e>
 8015bda:	461d      	mov	r5, r3
 8015bdc:	e001      	b.n	8015be2 <on_request+0x1e>
 8015bde:	6840      	ldr	r0, [r0, #4]
 8015be0:	b3b8      	cbz	r0, 8015c52 <on_request+0x8e>
 8015be2:	6884      	ldr	r4, [r0, #8]
 8015be4:	8b21      	ldrh	r1, [r4, #24]
 8015be6:	4291      	cmp	r1, r2
 8015be8:	d1f9      	bne.n	8015bde <on_request+0x1a>
 8015bea:	2248      	movs	r2, #72	@ 0x48
 8015bec:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015bf0:	4668      	mov	r0, sp
 8015bf2:	f002 f89e 	bl	8017d32 <memcpy>
 8015bf6:	f104 0320 	add.w	r3, r4, #32
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	cb0c      	ldmia	r3, {r2, r3}
 8015bfe:	f7f9 ffdd 	bl	800fbbc <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c02:	4680      	mov	r8, r0
 8015c04:	b328      	cbz	r0, 8015c52 <on_request+0x8e>
 8015c06:	4630      	mov	r0, r6
 8015c08:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015c0c:	463a      	mov	r2, r7
 8015c0e:	f106 0110 	add.w	r1, r6, #16
 8015c12:	f000 fa4d 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8015c16:	b930      	cbnz	r0, 8015c26 <on_request+0x62>
 8015c18:	4641      	mov	r1, r8
 8015c1a:	4810      	ldr	r0, [pc, #64]	@ (8015c5c <on_request+0x98>)
 8015c1c:	b014      	add	sp, #80	@ 0x50
 8015c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c22:	f000 b877 	b.w	8015d14 <put_memory>
 8015c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c28:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8015c2c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8015c30:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8015c34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015c3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c40:	f7f9 fdba 	bl	800f7b8 <rmw_uros_epoch_nanos>
 8015c44:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8015c48:	2303      	movs	r3, #3
 8015c4a:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015c4e:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8015c52:	b014      	add	sp, #80	@ 0x50
 8015c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c58:	2406840c 	.word	0x2406840c
 8015c5c:	2406842c 	.word	0x2406842c

08015c60 <on_reply>:
 8015c60:	4822      	ldr	r0, [pc, #136]	@ (8015cec <on_reply+0x8c>)
 8015c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c66:	6800      	ldr	r0, [r0, #0]
 8015c68:	b094      	sub	sp, #80	@ 0x50
 8015c6a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015c6c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8015c70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015c72:	b3b8      	cbz	r0, 8015ce4 <on_reply+0x84>
 8015c74:	461d      	mov	r5, r3
 8015c76:	e001      	b.n	8015c7c <on_reply+0x1c>
 8015c78:	6840      	ldr	r0, [r0, #4]
 8015c7a:	b398      	cbz	r0, 8015ce4 <on_reply+0x84>
 8015c7c:	6884      	ldr	r4, [r0, #8]
 8015c7e:	8b21      	ldrh	r1, [r4, #24]
 8015c80:	4291      	cmp	r1, r2
 8015c82:	d1f9      	bne.n	8015c78 <on_reply+0x18>
 8015c84:	2248      	movs	r2, #72	@ 0x48
 8015c86:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015c8a:	4668      	mov	r0, sp
 8015c8c:	f002 f851 	bl	8017d32 <memcpy>
 8015c90:	f104 0320 	add.w	r3, r4, #32
 8015c94:	4620      	mov	r0, r4
 8015c96:	cb0c      	ldmia	r3, {r2, r3}
 8015c98:	f7f9 ff90 	bl	800fbbc <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c9c:	4680      	mov	r8, r0
 8015c9e:	b308      	cbz	r0, 8015ce4 <on_reply+0x84>
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015ca6:	463a      	mov	r2, r7
 8015ca8:	f106 0110 	add.w	r1, r6, #16
 8015cac:	f000 fa00 	bl	80160b0 <ucdr_deserialize_array_uint8_t>
 8015cb0:	b930      	cbnz	r0, 8015cc0 <on_reply+0x60>
 8015cb2:	4641      	mov	r1, r8
 8015cb4:	480e      	ldr	r0, [pc, #56]	@ (8015cf0 <on_reply+0x90>)
 8015cb6:	b014      	add	sp, #80	@ 0x50
 8015cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cbc:	f000 b82a 	b.w	8015d14 <put_memory>
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8015cc6:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8015cca:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8015cce:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8015cd2:	f7f9 fd71 	bl	800f7b8 <rmw_uros_epoch_nanos>
 8015cd6:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8015cda:	2304      	movs	r3, #4
 8015cdc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ce0:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8015ce4:	b014      	add	sp, #80	@ 0x50
 8015ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cea:	bf00      	nop
 8015cec:	24063b1c 	.word	0x24063b1c
 8015cf0:	2406842c 	.word	0x2406842c

08015cf4 <get_memory>:
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	6840      	ldr	r0, [r0, #4]
 8015cf8:	b158      	cbz	r0, 8015d12 <get_memory+0x1e>
 8015cfa:	6842      	ldr	r2, [r0, #4]
 8015cfc:	605a      	str	r2, [r3, #4]
 8015cfe:	b10a      	cbz	r2, 8015d04 <get_memory+0x10>
 8015d00:	2100      	movs	r1, #0
 8015d02:	6011      	str	r1, [r2, #0]
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	6042      	str	r2, [r0, #4]
 8015d08:	b102      	cbz	r2, 8015d0c <get_memory+0x18>
 8015d0a:	6010      	str	r0, [r2, #0]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	6002      	str	r2, [r0, #0]
 8015d10:	6018      	str	r0, [r3, #0]
 8015d12:	4770      	bx	lr

08015d14 <put_memory>:
 8015d14:	680b      	ldr	r3, [r1, #0]
 8015d16:	b10b      	cbz	r3, 8015d1c <put_memory+0x8>
 8015d18:	684a      	ldr	r2, [r1, #4]
 8015d1a:	605a      	str	r2, [r3, #4]
 8015d1c:	684a      	ldr	r2, [r1, #4]
 8015d1e:	b102      	cbz	r2, 8015d22 <put_memory+0xe>
 8015d20:	6013      	str	r3, [r2, #0]
 8015d22:	6803      	ldr	r3, [r0, #0]
 8015d24:	428b      	cmp	r3, r1
 8015d26:	6843      	ldr	r3, [r0, #4]
 8015d28:	bf08      	it	eq
 8015d2a:	6002      	streq	r2, [r0, #0]
 8015d2c:	604b      	str	r3, [r1, #4]
 8015d2e:	b103      	cbz	r3, 8015d32 <put_memory+0x1e>
 8015d30:	6019      	str	r1, [r3, #0]
 8015d32:	2300      	movs	r3, #0
 8015d34:	600b      	str	r3, [r1, #0]
 8015d36:	6041      	str	r1, [r0, #4]
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop

08015d3c <rmw_destroy_client>:
 8015d3c:	b570      	push	{r4, r5, r6, lr}
 8015d3e:	b128      	cbz	r0, 8015d4c <rmw_destroy_client+0x10>
 8015d40:	4604      	mov	r4, r0
 8015d42:	6800      	ldr	r0, [r0, #0]
 8015d44:	460d      	mov	r5, r1
 8015d46:	f7fa f80d 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 8015d4a:	b910      	cbnz	r0, 8015d52 <rmw_destroy_client+0x16>
 8015d4c:	2401      	movs	r4, #1
 8015d4e:	4620      	mov	r0, r4
 8015d50:	bd70      	pop	{r4, r5, r6, pc}
 8015d52:	6863      	ldr	r3, [r4, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d0f9      	beq.n	8015d4c <rmw_destroy_client+0x10>
 8015d58:	2d00      	cmp	r5, #0
 8015d5a:	d0f7      	beq.n	8015d4c <rmw_destroy_client+0x10>
 8015d5c:	6828      	ldr	r0, [r5, #0]
 8015d5e:	f7fa f801 	bl	800fd64 <is_uxrce_rmw_identifier_valid>
 8015d62:	2800      	cmp	r0, #0
 8015d64:	d0f2      	beq.n	8015d4c <rmw_destroy_client+0x10>
 8015d66:	686e      	ldr	r6, [r5, #4]
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	d0ef      	beq.n	8015d4c <rmw_destroy_client+0x10>
 8015d6c:	6864      	ldr	r4, [r4, #4]
 8015d6e:	6932      	ldr	r2, [r6, #16]
 8015d70:	6920      	ldr	r0, [r4, #16]
 8015d72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015d76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d7a:	6819      	ldr	r1, [r3, #0]
 8015d7c:	f7fb fafa 	bl	8011374 <uxr_buffer_cancel_data>
 8015d80:	4602      	mov	r2, r0
 8015d82:	6920      	ldr	r0, [r4, #16]
 8015d84:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015d88:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015d8c:	f7f9 ff70 	bl	800fc70 <run_xrce_session>
 8015d90:	6920      	ldr	r0, [r4, #16]
 8015d92:	6932      	ldr	r2, [r6, #16]
 8015d94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015d98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d9c:	6819      	ldr	r1, [r3, #0]
 8015d9e:	f7fb f8a1 	bl	8010ee4 <uxr_buffer_delete_entity>
 8015da2:	4602      	mov	r2, r0
 8015da4:	6920      	ldr	r0, [r4, #16]
 8015da6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015daa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015dae:	f7f9 ff5f 	bl	800fc70 <run_xrce_session>
 8015db2:	4603      	mov	r3, r0
 8015db4:	4628      	mov	r0, r5
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	bf14      	ite	ne
 8015dba:	2400      	movne	r4, #0
 8015dbc:	2402      	moveq	r4, #2
 8015dbe:	f7f9 fedb 	bl	800fb78 <rmw_uxrce_fini_client_memory>
 8015dc2:	e7c4      	b.n	8015d4e <rmw_destroy_client+0x12>

08015dc4 <rmw_get_implementation_identifier>:
 8015dc4:	4b01      	ldr	r3, [pc, #4]	@ (8015dcc <rmw_get_implementation_identifier+0x8>)
 8015dc6:	6818      	ldr	r0, [r3, #0]
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	080194bc 	.word	0x080194bc

08015dd0 <create_topic>:
 8015dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd4:	4605      	mov	r5, r0
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	4822      	ldr	r0, [pc, #136]	@ (8015e64 <create_topic+0x94>)
 8015dda:	460f      	mov	r7, r1
 8015ddc:	4616      	mov	r6, r2
 8015dde:	f7ff ff89 	bl	8015cf4 <get_memory>
 8015de2:	4604      	mov	r4, r0
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d039      	beq.n	8015e5c <create_topic+0x8c>
 8015de8:	692b      	ldr	r3, [r5, #16]
 8015dea:	2102      	movs	r1, #2
 8015dec:	6884      	ldr	r4, [r0, #8]
 8015dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015df2:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8015e6c <create_topic+0x9c>
 8015df6:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015dfa:	1c42      	adds	r2, r0, #1
 8015dfc:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015e00:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015e04:	f7fb fa86 	bl	8011314 <uxr_object_id>
 8015e08:	223c      	movs	r2, #60	@ 0x3c
 8015e0a:	6120      	str	r0, [r4, #16]
 8015e0c:	4641      	mov	r1, r8
 8015e0e:	4638      	mov	r0, r7
 8015e10:	f7f9 ff90 	bl	800fd34 <generate_topic_name>
 8015e14:	b1f0      	cbz	r0, 8015e54 <create_topic+0x84>
 8015e16:	4f14      	ldr	r7, [pc, #80]	@ (8015e68 <create_topic+0x98>)
 8015e18:	4630      	mov	r0, r6
 8015e1a:	2264      	movs	r2, #100	@ 0x64
 8015e1c:	4639      	mov	r1, r7
 8015e1e:	f7f9 ff5b 	bl	800fcd8 <generate_type_name>
 8015e22:	b1b8      	cbz	r0, 8015e54 <create_topic+0x84>
 8015e24:	6928      	ldr	r0, [r5, #16]
 8015e26:	2106      	movs	r1, #6
 8015e28:	696b      	ldr	r3, [r5, #20]
 8015e2a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015e2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e32:	f8cd 8000 	str.w	r8, [sp]
 8015e36:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8015e3a:	6811      	ldr	r1, [r2, #0]
 8015e3c:	6922      	ldr	r2, [r4, #16]
 8015e3e:	f7fb f8cf 	bl	8010fe0 <uxr_buffer_create_topic_bin>
 8015e42:	4602      	mov	r2, r0
 8015e44:	6928      	ldr	r0, [r5, #16]
 8015e46:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015e4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015e4e:	f7f9 ff0f 	bl	800fc70 <run_xrce_session>
 8015e52:	b918      	cbnz	r0, 8015e5c <create_topic+0x8c>
 8015e54:	4620      	mov	r0, r4
 8015e56:	2400      	movs	r4, #0
 8015e58:	f7f9 fea4 	bl	800fba4 <rmw_uxrce_fini_topic_memory>
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	b004      	add	sp, #16
 8015e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e64:	2406844c 	.word	0x2406844c
 8015e68:	240684cc 	.word	0x240684cc
 8015e6c:	24068490 	.word	0x24068490

08015e70 <destroy_topic>:
 8015e70:	b538      	push	{r3, r4, r5, lr}
 8015e72:	6985      	ldr	r5, [r0, #24]
 8015e74:	b1dd      	cbz	r5, 8015eae <destroy_topic+0x3e>
 8015e76:	4604      	mov	r4, r0
 8015e78:	6928      	ldr	r0, [r5, #16]
 8015e7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015e7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e82:	6922      	ldr	r2, [r4, #16]
 8015e84:	6819      	ldr	r1, [r3, #0]
 8015e86:	f7fb f82d 	bl	8010ee4 <uxr_buffer_delete_entity>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	6928      	ldr	r0, [r5, #16]
 8015e8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015e92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015e96:	f7f9 feeb 	bl	800fc70 <run_xrce_session>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	bf14      	ite	ne
 8015ea2:	2400      	movne	r4, #0
 8015ea4:	2402      	moveq	r4, #2
 8015ea6:	f7f9 fe7d 	bl	800fba4 <rmw_uxrce_fini_topic_memory>
 8015eaa:	4620      	mov	r0, r4
 8015eac:	bd38      	pop	{r3, r4, r5, pc}
 8015eae:	2401      	movs	r4, #1
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	bd38      	pop	{r3, r4, r5, pc}

08015eb4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb8:	6805      	ldr	r5, [r0, #0]
 8015eba:	4604      	mov	r4, r0
 8015ebc:	460e      	mov	r6, r1
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	f7ea fa0e 	bl	80002e0 <strcmp>
 8015ec4:	b1c8      	cbz	r0, 8015efa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015ec6:	4b11      	ldr	r3, [pc, #68]	@ (8015f0c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	429d      	cmp	r5, r3
 8015ecc:	d112      	bne.n	8015ef4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015ece:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015ed2:	f8d8 4000 	ldr.w	r4, [r8]
 8015ed6:	b16c      	cbz	r4, 8015ef4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015ed8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015edc:	2700      	movs	r7, #0
 8015ede:	3d04      	subs	r5, #4
 8015ee0:	4631      	mov	r1, r6
 8015ee2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015ee6:	f7ea f9fb 	bl	80002e0 <strcmp>
 8015eea:	00bb      	lsls	r3, r7, #2
 8015eec:	b140      	cbz	r0, 8015f00 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015eee:	3701      	adds	r7, #1
 8015ef0:	42bc      	cmp	r4, r7
 8015ef2:	d1f5      	bne.n	8015ee0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015efa:	4620      	mov	r0, r4
 8015efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f08:	58d3      	ldr	r3, [r2, r3]
 8015f0a:	4718      	bx	r3
 8015f0c:	240000b0 	.word	0x240000b0

08015f10 <std_msgs__msg__Int32__init>:
 8015f10:	3800      	subs	r0, #0
 8015f12:	bf18      	it	ne
 8015f14:	2001      	movne	r0, #1
 8015f16:	4770      	bx	lr

08015f18 <std_msgs__msg__Int32__fini>:
 8015f18:	4770      	bx	lr
 8015f1a:	bf00      	nop

08015f1c <ucdr_serialize_endian_array_char>:
 8015f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f20:	4619      	mov	r1, r3
 8015f22:	461f      	mov	r7, r3
 8015f24:	4605      	mov	r5, r0
 8015f26:	4690      	mov	r8, r2
 8015f28:	f7fa ff14 	bl	8010d54 <ucdr_check_buffer_available_for>
 8015f2c:	b9e0      	cbnz	r0, 8015f68 <ucdr_serialize_endian_array_char+0x4c>
 8015f2e:	463e      	mov	r6, r7
 8015f30:	e00b      	b.n	8015f4a <ucdr_serialize_endian_array_char+0x2e>
 8015f32:	4441      	add	r1, r8
 8015f34:	68a8      	ldr	r0, [r5, #8]
 8015f36:	4622      	mov	r2, r4
 8015f38:	1b36      	subs	r6, r6, r4
 8015f3a:	f001 fefa 	bl	8017d32 <memcpy>
 8015f3e:	68ab      	ldr	r3, [r5, #8]
 8015f40:	6928      	ldr	r0, [r5, #16]
 8015f42:	4423      	add	r3, r4
 8015f44:	4420      	add	r0, r4
 8015f46:	60ab      	str	r3, [r5, #8]
 8015f48:	6128      	str	r0, [r5, #16]
 8015f4a:	4631      	mov	r1, r6
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	4628      	mov	r0, r5
 8015f50:	f7fa ff8a 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8015f54:	1bb9      	subs	r1, r7, r6
 8015f56:	4604      	mov	r4, r0
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	d1ea      	bne.n	8015f32 <ucdr_serialize_endian_array_char+0x16>
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	7da8      	ldrb	r0, [r5, #22]
 8015f60:	756b      	strb	r3, [r5, #21]
 8015f62:	4058      	eors	r0, r3
 8015f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f68:	463a      	mov	r2, r7
 8015f6a:	4641      	mov	r1, r8
 8015f6c:	68a8      	ldr	r0, [r5, #8]
 8015f6e:	f001 fee0 	bl	8017d32 <memcpy>
 8015f72:	68aa      	ldr	r2, [r5, #8]
 8015f74:	692b      	ldr	r3, [r5, #16]
 8015f76:	443a      	add	r2, r7
 8015f78:	443b      	add	r3, r7
 8015f7a:	60aa      	str	r2, [r5, #8]
 8015f7c:	612b      	str	r3, [r5, #16]
 8015f7e:	e7ed      	b.n	8015f5c <ucdr_serialize_endian_array_char+0x40>

08015f80 <ucdr_deserialize_endian_array_char>:
 8015f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	4619      	mov	r1, r3
 8015f86:	461f      	mov	r7, r3
 8015f88:	4605      	mov	r5, r0
 8015f8a:	4690      	mov	r8, r2
 8015f8c:	f7fa fee2 	bl	8010d54 <ucdr_check_buffer_available_for>
 8015f90:	b9e8      	cbnz	r0, 8015fce <ucdr_deserialize_endian_array_char+0x4e>
 8015f92:	463e      	mov	r6, r7
 8015f94:	e00c      	b.n	8015fb0 <ucdr_deserialize_endian_array_char+0x30>
 8015f96:	eb08 0003 	add.w	r0, r8, r3
 8015f9a:	68a9      	ldr	r1, [r5, #8]
 8015f9c:	4622      	mov	r2, r4
 8015f9e:	1b36      	subs	r6, r6, r4
 8015fa0:	f001 fec7 	bl	8017d32 <memcpy>
 8015fa4:	68ab      	ldr	r3, [r5, #8]
 8015fa6:	6928      	ldr	r0, [r5, #16]
 8015fa8:	4423      	add	r3, r4
 8015faa:	4420      	add	r0, r4
 8015fac:	60ab      	str	r3, [r5, #8]
 8015fae:	6128      	str	r0, [r5, #16]
 8015fb0:	4631      	mov	r1, r6
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	4628      	mov	r0, r5
 8015fb6:	f7fa ff57 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8015fba:	1bbb      	subs	r3, r7, r6
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	d1e9      	bne.n	8015f96 <ucdr_deserialize_endian_array_char+0x16>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	7da8      	ldrb	r0, [r5, #22]
 8015fc6:	756b      	strb	r3, [r5, #21]
 8015fc8:	4058      	eors	r0, r3
 8015fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fce:	463a      	mov	r2, r7
 8015fd0:	68a9      	ldr	r1, [r5, #8]
 8015fd2:	4640      	mov	r0, r8
 8015fd4:	f001 fead 	bl	8017d32 <memcpy>
 8015fd8:	68aa      	ldr	r2, [r5, #8]
 8015fda:	692b      	ldr	r3, [r5, #16]
 8015fdc:	443a      	add	r2, r7
 8015fde:	443b      	add	r3, r7
 8015fe0:	60aa      	str	r2, [r5, #8]
 8015fe2:	612b      	str	r3, [r5, #16]
 8015fe4:	e7ed      	b.n	8015fc2 <ucdr_deserialize_endian_array_char+0x42>
 8015fe6:	bf00      	nop

08015fe8 <ucdr_serialize_array_uint8_t>:
 8015fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fec:	4688      	mov	r8, r1
 8015fee:	4611      	mov	r1, r2
 8015ff0:	4617      	mov	r7, r2
 8015ff2:	4605      	mov	r5, r0
 8015ff4:	f7fa feae 	bl	8010d54 <ucdr_check_buffer_available_for>
 8015ff8:	b9e0      	cbnz	r0, 8016034 <ucdr_serialize_array_uint8_t+0x4c>
 8015ffa:	463e      	mov	r6, r7
 8015ffc:	e00b      	b.n	8016016 <ucdr_serialize_array_uint8_t+0x2e>
 8015ffe:	4441      	add	r1, r8
 8016000:	68a8      	ldr	r0, [r5, #8]
 8016002:	4622      	mov	r2, r4
 8016004:	1b36      	subs	r6, r6, r4
 8016006:	f001 fe94 	bl	8017d32 <memcpy>
 801600a:	68ab      	ldr	r3, [r5, #8]
 801600c:	6928      	ldr	r0, [r5, #16]
 801600e:	4423      	add	r3, r4
 8016010:	4420      	add	r0, r4
 8016012:	60ab      	str	r3, [r5, #8]
 8016014:	6128      	str	r0, [r5, #16]
 8016016:	4631      	mov	r1, r6
 8016018:	2201      	movs	r2, #1
 801601a:	4628      	mov	r0, r5
 801601c:	f7fa ff24 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8016020:	1bb9      	subs	r1, r7, r6
 8016022:	4604      	mov	r4, r0
 8016024:	2800      	cmp	r0, #0
 8016026:	d1ea      	bne.n	8015ffe <ucdr_serialize_array_uint8_t+0x16>
 8016028:	2301      	movs	r3, #1
 801602a:	7da8      	ldrb	r0, [r5, #22]
 801602c:	756b      	strb	r3, [r5, #21]
 801602e:	4058      	eors	r0, r3
 8016030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016034:	463a      	mov	r2, r7
 8016036:	4641      	mov	r1, r8
 8016038:	68a8      	ldr	r0, [r5, #8]
 801603a:	f001 fe7a 	bl	8017d32 <memcpy>
 801603e:	68aa      	ldr	r2, [r5, #8]
 8016040:	692b      	ldr	r3, [r5, #16]
 8016042:	443a      	add	r2, r7
 8016044:	443b      	add	r3, r7
 8016046:	60aa      	str	r2, [r5, #8]
 8016048:	612b      	str	r3, [r5, #16]
 801604a:	e7ed      	b.n	8016028 <ucdr_serialize_array_uint8_t+0x40>

0801604c <ucdr_serialize_endian_array_uint8_t>:
 801604c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016050:	4619      	mov	r1, r3
 8016052:	461f      	mov	r7, r3
 8016054:	4605      	mov	r5, r0
 8016056:	4690      	mov	r8, r2
 8016058:	f7fa fe7c 	bl	8010d54 <ucdr_check_buffer_available_for>
 801605c:	b9e0      	cbnz	r0, 8016098 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801605e:	463e      	mov	r6, r7
 8016060:	e00b      	b.n	801607a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8016062:	4441      	add	r1, r8
 8016064:	68a8      	ldr	r0, [r5, #8]
 8016066:	4622      	mov	r2, r4
 8016068:	1b36      	subs	r6, r6, r4
 801606a:	f001 fe62 	bl	8017d32 <memcpy>
 801606e:	68ab      	ldr	r3, [r5, #8]
 8016070:	6928      	ldr	r0, [r5, #16]
 8016072:	4423      	add	r3, r4
 8016074:	4420      	add	r0, r4
 8016076:	60ab      	str	r3, [r5, #8]
 8016078:	6128      	str	r0, [r5, #16]
 801607a:	4631      	mov	r1, r6
 801607c:	2201      	movs	r2, #1
 801607e:	4628      	mov	r0, r5
 8016080:	f7fa fef2 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8016084:	1bb9      	subs	r1, r7, r6
 8016086:	4604      	mov	r4, r0
 8016088:	2800      	cmp	r0, #0
 801608a:	d1ea      	bne.n	8016062 <ucdr_serialize_endian_array_uint8_t+0x16>
 801608c:	2301      	movs	r3, #1
 801608e:	7da8      	ldrb	r0, [r5, #22]
 8016090:	756b      	strb	r3, [r5, #21]
 8016092:	4058      	eors	r0, r3
 8016094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016098:	463a      	mov	r2, r7
 801609a:	4641      	mov	r1, r8
 801609c:	68a8      	ldr	r0, [r5, #8]
 801609e:	f001 fe48 	bl	8017d32 <memcpy>
 80160a2:	68aa      	ldr	r2, [r5, #8]
 80160a4:	692b      	ldr	r3, [r5, #16]
 80160a6:	443a      	add	r2, r7
 80160a8:	443b      	add	r3, r7
 80160aa:	60aa      	str	r2, [r5, #8]
 80160ac:	612b      	str	r3, [r5, #16]
 80160ae:	e7ed      	b.n	801608c <ucdr_serialize_endian_array_uint8_t+0x40>

080160b0 <ucdr_deserialize_array_uint8_t>:
 80160b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b4:	4688      	mov	r8, r1
 80160b6:	4611      	mov	r1, r2
 80160b8:	4617      	mov	r7, r2
 80160ba:	4605      	mov	r5, r0
 80160bc:	f7fa fe4a 	bl	8010d54 <ucdr_check_buffer_available_for>
 80160c0:	b9e8      	cbnz	r0, 80160fe <ucdr_deserialize_array_uint8_t+0x4e>
 80160c2:	463e      	mov	r6, r7
 80160c4:	e00c      	b.n	80160e0 <ucdr_deserialize_array_uint8_t+0x30>
 80160c6:	eb08 0003 	add.w	r0, r8, r3
 80160ca:	68a9      	ldr	r1, [r5, #8]
 80160cc:	4622      	mov	r2, r4
 80160ce:	1b36      	subs	r6, r6, r4
 80160d0:	f001 fe2f 	bl	8017d32 <memcpy>
 80160d4:	68ab      	ldr	r3, [r5, #8]
 80160d6:	6928      	ldr	r0, [r5, #16]
 80160d8:	4423      	add	r3, r4
 80160da:	4420      	add	r0, r4
 80160dc:	60ab      	str	r3, [r5, #8]
 80160de:	6128      	str	r0, [r5, #16]
 80160e0:	4631      	mov	r1, r6
 80160e2:	2201      	movs	r2, #1
 80160e4:	4628      	mov	r0, r5
 80160e6:	f7fa febf 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 80160ea:	1bbb      	subs	r3, r7, r6
 80160ec:	4604      	mov	r4, r0
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d1e9      	bne.n	80160c6 <ucdr_deserialize_array_uint8_t+0x16>
 80160f2:	2301      	movs	r3, #1
 80160f4:	7da8      	ldrb	r0, [r5, #22]
 80160f6:	756b      	strb	r3, [r5, #21]
 80160f8:	4058      	eors	r0, r3
 80160fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fe:	463a      	mov	r2, r7
 8016100:	68a9      	ldr	r1, [r5, #8]
 8016102:	4640      	mov	r0, r8
 8016104:	f001 fe15 	bl	8017d32 <memcpy>
 8016108:	68aa      	ldr	r2, [r5, #8]
 801610a:	692b      	ldr	r3, [r5, #16]
 801610c:	443a      	add	r2, r7
 801610e:	443b      	add	r3, r7
 8016110:	60aa      	str	r2, [r5, #8]
 8016112:	612b      	str	r3, [r5, #16]
 8016114:	e7ed      	b.n	80160f2 <ucdr_deserialize_array_uint8_t+0x42>
 8016116:	bf00      	nop

08016118 <ucdr_deserialize_endian_array_uint8_t>:
 8016118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801611c:	4619      	mov	r1, r3
 801611e:	461f      	mov	r7, r3
 8016120:	4605      	mov	r5, r0
 8016122:	4690      	mov	r8, r2
 8016124:	f7fa fe16 	bl	8010d54 <ucdr_check_buffer_available_for>
 8016128:	b9e8      	cbnz	r0, 8016166 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801612a:	463e      	mov	r6, r7
 801612c:	e00c      	b.n	8016148 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801612e:	eb08 0003 	add.w	r0, r8, r3
 8016132:	68a9      	ldr	r1, [r5, #8]
 8016134:	4622      	mov	r2, r4
 8016136:	1b36      	subs	r6, r6, r4
 8016138:	f001 fdfb 	bl	8017d32 <memcpy>
 801613c:	68ab      	ldr	r3, [r5, #8]
 801613e:	6928      	ldr	r0, [r5, #16]
 8016140:	4423      	add	r3, r4
 8016142:	4420      	add	r0, r4
 8016144:	60ab      	str	r3, [r5, #8]
 8016146:	6128      	str	r0, [r5, #16]
 8016148:	4631      	mov	r1, r6
 801614a:	2201      	movs	r2, #1
 801614c:	4628      	mov	r0, r5
 801614e:	f7fa fe8b 	bl	8010e68 <ucdr_check_final_buffer_behavior_array>
 8016152:	1bbb      	subs	r3, r7, r6
 8016154:	4604      	mov	r4, r0
 8016156:	2800      	cmp	r0, #0
 8016158:	d1e9      	bne.n	801612e <ucdr_deserialize_endian_array_uint8_t+0x16>
 801615a:	2301      	movs	r3, #1
 801615c:	7da8      	ldrb	r0, [r5, #22]
 801615e:	756b      	strb	r3, [r5, #21]
 8016160:	4058      	eors	r0, r3
 8016162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016166:	463a      	mov	r2, r7
 8016168:	68a9      	ldr	r1, [r5, #8]
 801616a:	4640      	mov	r0, r8
 801616c:	f001 fde1 	bl	8017d32 <memcpy>
 8016170:	68aa      	ldr	r2, [r5, #8]
 8016172:	692b      	ldr	r3, [r5, #16]
 8016174:	443a      	add	r2, r7
 8016176:	443b      	add	r3, r7
 8016178:	60aa      	str	r2, [r5, #8]
 801617a:	612b      	str	r3, [r5, #16]
 801617c:	e7ed      	b.n	801615a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801617e:	bf00      	nop

08016180 <ucdr_serialize_sequence_char>:
 8016180:	b570      	push	{r4, r5, r6, lr}
 8016182:	4615      	mov	r5, r2
 8016184:	460e      	mov	r6, r1
 8016186:	7d01      	ldrb	r1, [r0, #20]
 8016188:	4604      	mov	r4, r0
 801618a:	f7fa f939 	bl	8010400 <ucdr_serialize_endian_uint32_t>
 801618e:	b90d      	cbnz	r5, 8016194 <ucdr_serialize_sequence_char+0x14>
 8016190:	2001      	movs	r0, #1
 8016192:	bd70      	pop	{r4, r5, r6, pc}
 8016194:	462b      	mov	r3, r5
 8016196:	4632      	mov	r2, r6
 8016198:	7d21      	ldrb	r1, [r4, #20]
 801619a:	4620      	mov	r0, r4
 801619c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161a0:	f7ff bebc 	b.w	8015f1c <ucdr_serialize_endian_array_char>

080161a4 <ucdr_deserialize_sequence_char>:
 80161a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a8:	461d      	mov	r5, r3
 80161aa:	4616      	mov	r6, r2
 80161ac:	460f      	mov	r7, r1
 80161ae:	461a      	mov	r2, r3
 80161b0:	7d01      	ldrb	r1, [r0, #20]
 80161b2:	4604      	mov	r4, r0
 80161b4:	f7fa fa4c 	bl	8010650 <ucdr_deserialize_endian_uint32_t>
 80161b8:	682b      	ldr	r3, [r5, #0]
 80161ba:	429e      	cmp	r6, r3
 80161bc:	d201      	bcs.n	80161c2 <ucdr_deserialize_sequence_char+0x1e>
 80161be:	2201      	movs	r2, #1
 80161c0:	75a2      	strb	r2, [r4, #22]
 80161c2:	b913      	cbnz	r3, 80161ca <ucdr_deserialize_sequence_char+0x26>
 80161c4:	2001      	movs	r0, #1
 80161c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ca:	463a      	mov	r2, r7
 80161cc:	7d21      	ldrb	r1, [r4, #20]
 80161ce:	4620      	mov	r0, r4
 80161d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161d4:	f7ff bed4 	b.w	8015f80 <ucdr_deserialize_endian_array_char>

080161d8 <ucdr_serialize_sequence_uint8_t>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	4615      	mov	r5, r2
 80161dc:	460e      	mov	r6, r1
 80161de:	7d01      	ldrb	r1, [r0, #20]
 80161e0:	4604      	mov	r4, r0
 80161e2:	f7fa f90d 	bl	8010400 <ucdr_serialize_endian_uint32_t>
 80161e6:	b90d      	cbnz	r5, 80161ec <ucdr_serialize_sequence_uint8_t+0x14>
 80161e8:	2001      	movs	r0, #1
 80161ea:	bd70      	pop	{r4, r5, r6, pc}
 80161ec:	462b      	mov	r3, r5
 80161ee:	4632      	mov	r2, r6
 80161f0:	7d21      	ldrb	r1, [r4, #20]
 80161f2:	4620      	mov	r0, r4
 80161f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161f8:	f7ff bf28 	b.w	801604c <ucdr_serialize_endian_array_uint8_t>

080161fc <ucdr_deserialize_sequence_uint8_t>:
 80161fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016200:	461d      	mov	r5, r3
 8016202:	4616      	mov	r6, r2
 8016204:	460f      	mov	r7, r1
 8016206:	461a      	mov	r2, r3
 8016208:	7d01      	ldrb	r1, [r0, #20]
 801620a:	4604      	mov	r4, r0
 801620c:	f7fa fa20 	bl	8010650 <ucdr_deserialize_endian_uint32_t>
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	429e      	cmp	r6, r3
 8016214:	d201      	bcs.n	801621a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016216:	2201      	movs	r2, #1
 8016218:	75a2      	strb	r2, [r4, #22]
 801621a:	b913      	cbnz	r3, 8016222 <ucdr_deserialize_sequence_uint8_t+0x26>
 801621c:	2001      	movs	r0, #1
 801621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016222:	463a      	mov	r2, r7
 8016224:	7d21      	ldrb	r1, [r4, #20]
 8016226:	4620      	mov	r0, r4
 8016228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801622c:	f7ff bf74 	b.w	8016118 <ucdr_deserialize_endian_array_uint8_t>

08016230 <ucdr_serialize_string>:
 8016230:	b510      	push	{r4, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	4604      	mov	r4, r0
 8016236:	4608      	mov	r0, r1
 8016238:	9101      	str	r1, [sp, #4]
 801623a:	f7ea f85b 	bl	80002f4 <strlen>
 801623e:	4602      	mov	r2, r0
 8016240:	9901      	ldr	r1, [sp, #4]
 8016242:	4620      	mov	r0, r4
 8016244:	3201      	adds	r2, #1
 8016246:	b002      	add	sp, #8
 8016248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801624c:	f7ff bf98 	b.w	8016180 <ucdr_serialize_sequence_char>

08016250 <ucdr_deserialize_string>:
 8016250:	b500      	push	{lr}
 8016252:	b083      	sub	sp, #12
 8016254:	ab01      	add	r3, sp, #4
 8016256:	f7ff ffa5 	bl	80161a4 <ucdr_deserialize_sequence_char>
 801625a:	b003      	add	sp, #12
 801625c:	f85d fb04 	ldr.w	pc, [sp], #4

08016260 <uxr_init_input_best_effort_stream>:
 8016260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016264:	8003      	strh	r3, [r0, #0]
 8016266:	4770      	bx	lr

08016268 <uxr_reset_input_best_effort_stream>:
 8016268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801626c:	8003      	strh	r3, [r0, #0]
 801626e:	4770      	bx	lr

08016270 <uxr_receive_best_effort_message>:
 8016270:	b538      	push	{r3, r4, r5, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	8800      	ldrh	r0, [r0, #0]
 8016276:	460d      	mov	r5, r1
 8016278:	f000 fd46 	bl	8016d08 <uxr_seq_num_cmp>
 801627c:	4603      	mov	r3, r0
 801627e:	0fc0      	lsrs	r0, r0, #31
 8016280:	2b00      	cmp	r3, #0
 8016282:	bfb8      	it	lt
 8016284:	8025      	strhlt	r5, [r4, #0]
 8016286:	bd38      	pop	{r3, r4, r5, pc}

08016288 <on_full_input_buffer>:
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	460c      	mov	r4, r1
 801628c:	4605      	mov	r5, r0
 801628e:	8908      	ldrh	r0, [r1, #8]
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	7d26      	ldrb	r6, [r4, #20]
 8016294:	e9d1 1200 	ldrd	r1, r2, [r1]
 8016298:	fbb2 f2f0 	udiv	r2, r2, r0
 801629c:	eba3 0c01 	sub.w	ip, r3, r1
 80162a0:	fbbc fcf2 	udiv	ip, ip, r2
 80162a4:	f10c 0c01 	add.w	ip, ip, #1
 80162a8:	fa1f f38c 	uxth.w	r3, ip
 80162ac:	fbb3 fcf0 	udiv	ip, r3, r0
 80162b0:	fb00 331c 	mls	r3, r0, ip, r3
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	fb02 f303 	mul.w	r3, r2, r3
 80162ba:	1d18      	adds	r0, r3, #4
 80162bc:	4408      	add	r0, r1
 80162be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80162c2:	b116      	cbz	r6, 80162ca <on_full_input_buffer+0x42>
 80162c4:	2600      	movs	r6, #0
 80162c6:	f840 6c04 	str.w	r6, [r0, #-4]
 80162ca:	2a03      	cmp	r2, #3
 80162cc:	d801      	bhi.n	80162d2 <on_full_input_buffer+0x4a>
 80162ce:	2001      	movs	r0, #1
 80162d0:	bd70      	pop	{r4, r5, r6, pc}
 80162d2:	3308      	adds	r3, #8
 80162d4:	4628      	mov	r0, r5
 80162d6:	3a04      	subs	r2, #4
 80162d8:	4419      	add	r1, r3
 80162da:	692b      	ldr	r3, [r5, #16]
 80162dc:	f7fa fd86 	bl	8010dec <ucdr_init_buffer_origin>
 80162e0:	4628      	mov	r0, r5
 80162e2:	4622      	mov	r2, r4
 80162e4:	4902      	ldr	r1, [pc, #8]	@ (80162f0 <on_full_input_buffer+0x68>)
 80162e6:	f7fa fd5d 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 80162ea:	2000      	movs	r0, #0
 80162ec:	bd70      	pop	{r4, r5, r6, pc}
 80162ee:	bf00      	nop
 80162f0:	08016289 	.word	0x08016289

080162f4 <uxr_init_input_reliable_stream>:
 80162f4:	b510      	push	{r4, lr}
 80162f6:	e9c0 1200 	strd	r1, r2, [r0]
 80162fa:	2400      	movs	r4, #0
 80162fc:	9a02      	ldr	r2, [sp, #8]
 80162fe:	8103      	strh	r3, [r0, #8]
 8016300:	6102      	str	r2, [r0, #16]
 8016302:	7504      	strb	r4, [r0, #20]
 8016304:	b1c3      	cbz	r3, 8016338 <uxr_init_input_reliable_stream+0x44>
 8016306:	600c      	str	r4, [r1, #0]
 8016308:	8901      	ldrh	r1, [r0, #8]
 801630a:	2901      	cmp	r1, #1
 801630c:	d914      	bls.n	8016338 <uxr_init_input_reliable_stream+0x44>
 801630e:	f04f 0c01 	mov.w	ip, #1
 8016312:	6843      	ldr	r3, [r0, #4]
 8016314:	f10c 0e01 	add.w	lr, ip, #1
 8016318:	fbbc f2f1 	udiv	r2, ip, r1
 801631c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016320:	fb01 c212 	mls	r2, r1, r2, ip
 8016324:	fa1f fc8e 	uxth.w	ip, lr
 8016328:	b292      	uxth	r2, r2
 801632a:	fb02 f303 	mul.w	r3, r2, r3
 801632e:	6802      	ldr	r2, [r0, #0]
 8016330:	50d4      	str	r4, [r2, r3]
 8016332:	8901      	ldrh	r1, [r0, #8]
 8016334:	4561      	cmp	r1, ip
 8016336:	d8ec      	bhi.n	8016312 <uxr_init_input_reliable_stream+0x1e>
 8016338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801633c:	60c3      	str	r3, [r0, #12]
 801633e:	bd10      	pop	{r4, pc}

08016340 <uxr_reset_input_reliable_stream>:
 8016340:	8901      	ldrh	r1, [r0, #8]
 8016342:	b1d9      	cbz	r1, 801637c <uxr_reset_input_reliable_stream+0x3c>
 8016344:	b510      	push	{r4, lr}
 8016346:	f04f 0e00 	mov.w	lr, #0
 801634a:	46f4      	mov	ip, lr
 801634c:	4674      	mov	r4, lr
 801634e:	6843      	ldr	r3, [r0, #4]
 8016350:	f10e 0e01 	add.w	lr, lr, #1
 8016354:	fbbc f2f1 	udiv	r2, ip, r1
 8016358:	fbb3 f3f1 	udiv	r3, r3, r1
 801635c:	fb01 c212 	mls	r2, r1, r2, ip
 8016360:	fa1f fc8e 	uxth.w	ip, lr
 8016364:	b292      	uxth	r2, r2
 8016366:	fb02 f303 	mul.w	r3, r2, r3
 801636a:	6802      	ldr	r2, [r0, #0]
 801636c:	50d4      	str	r4, [r2, r3]
 801636e:	8901      	ldrh	r1, [r0, #8]
 8016370:	4561      	cmp	r1, ip
 8016372:	d8ec      	bhi.n	801634e <uxr_reset_input_reliable_stream+0xe>
 8016374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016378:	60c3      	str	r3, [r0, #12]
 801637a:	bd10      	pop	{r4, pc}
 801637c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016380:	60c3      	str	r3, [r0, #12]
 8016382:	4770      	bx	lr

08016384 <uxr_receive_reliable_message>:
 8016384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016388:	4604      	mov	r4, r0
 801638a:	460d      	mov	r5, r1
 801638c:	8901      	ldrh	r1, [r0, #8]
 801638e:	4617      	mov	r7, r2
 8016390:	8980      	ldrh	r0, [r0, #12]
 8016392:	4698      	mov	r8, r3
 8016394:	f000 fcb0 	bl	8016cf8 <uxr_seq_num_add>
 8016398:	4629      	mov	r1, r5
 801639a:	4606      	mov	r6, r0
 801639c:	89a0      	ldrh	r0, [r4, #12]
 801639e:	f000 fcb3 	bl	8016d08 <uxr_seq_num_cmp>
 80163a2:	2800      	cmp	r0, #0
 80163a4:	db0a      	blt.n	80163bc <uxr_receive_reliable_message+0x38>
 80163a6:	2600      	movs	r6, #0
 80163a8:	4629      	mov	r1, r5
 80163aa:	89e0      	ldrh	r0, [r4, #14]
 80163ac:	f000 fcac 	bl	8016d08 <uxr_seq_num_cmp>
 80163b0:	2800      	cmp	r0, #0
 80163b2:	da00      	bge.n	80163b6 <uxr_receive_reliable_message+0x32>
 80163b4:	81e5      	strh	r5, [r4, #14]
 80163b6:	4630      	mov	r0, r6
 80163b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163bc:	4630      	mov	r0, r6
 80163be:	4629      	mov	r1, r5
 80163c0:	f000 fca2 	bl	8016d08 <uxr_seq_num_cmp>
 80163c4:	2800      	cmp	r0, #0
 80163c6:	dbee      	blt.n	80163a6 <uxr_receive_reliable_message+0x22>
 80163c8:	6923      	ldr	r3, [r4, #16]
 80163ca:	4638      	mov	r0, r7
 80163cc:	4798      	blx	r3
 80163ce:	4681      	mov	r9, r0
 80163d0:	2101      	movs	r1, #1
 80163d2:	89a0      	ldrh	r0, [r4, #12]
 80163d4:	f000 fc90 	bl	8016cf8 <uxr_seq_num_add>
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	bf08      	it	eq
 80163de:	4285      	cmpeq	r5, r0
 80163e0:	bf0c      	ite	eq
 80163e2:	2601      	moveq	r6, #1
 80163e4:	2600      	movne	r6, #0
 80163e6:	d104      	bne.n	80163f2 <uxr_receive_reliable_message+0x6e>
 80163e8:	2300      	movs	r3, #0
 80163ea:	9a08      	ldr	r2, [sp, #32]
 80163ec:	81a0      	strh	r0, [r4, #12]
 80163ee:	7013      	strb	r3, [r2, #0]
 80163f0:	e7da      	b.n	80163a8 <uxr_receive_reliable_message+0x24>
 80163f2:	8922      	ldrh	r2, [r4, #8]
 80163f4:	6863      	ldr	r3, [r4, #4]
 80163f6:	fbb5 f0f2 	udiv	r0, r5, r2
 80163fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80163fe:	fb02 5010 	mls	r0, r2, r0, r5
 8016402:	b280      	uxth	r0, r0
 8016404:	fb03 f000 	mul.w	r0, r3, r0
 8016408:	6823      	ldr	r3, [r4, #0]
 801640a:	3004      	adds	r0, #4
 801640c:	4418      	add	r0, r3
 801640e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d1c7      	bne.n	80163a6 <uxr_receive_reliable_message+0x22>
 8016416:	4639      	mov	r1, r7
 8016418:	4642      	mov	r2, r8
 801641a:	f001 fc8a 	bl	8017d32 <memcpy>
 801641e:	8921      	ldrh	r1, [r4, #8]
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	fbb5 f2f1 	udiv	r2, r5, r1
 8016426:	fbb3 f3f1 	udiv	r3, r3, r1
 801642a:	fb01 5212 	mls	r2, r1, r2, r5
 801642e:	b292      	uxth	r2, r2
 8016430:	fb02 f303 	mul.w	r3, r2, r3
 8016434:	6822      	ldr	r2, [r4, #0]
 8016436:	f842 8003 	str.w	r8, [r2, r3]
 801643a:	2301      	movs	r3, #1
 801643c:	9a08      	ldr	r2, [sp, #32]
 801643e:	7013      	strb	r3, [r2, #0]
 8016440:	f1b9 0f00 	cmp.w	r9, #0
 8016444:	d0af      	beq.n	80163a6 <uxr_receive_reliable_message+0x22>
 8016446:	89a6      	ldrh	r6, [r4, #12]
 8016448:	2101      	movs	r1, #1
 801644a:	4630      	mov	r0, r6
 801644c:	f000 fc54 	bl	8016cf8 <uxr_seq_num_add>
 8016450:	8921      	ldrh	r1, [r4, #8]
 8016452:	6863      	ldr	r3, [r4, #4]
 8016454:	4606      	mov	r6, r0
 8016456:	fbb0 f2f1 	udiv	r2, r0, r1
 801645a:	fbb3 f3f1 	udiv	r3, r3, r1
 801645e:	fb01 0212 	mls	r2, r1, r2, r0
 8016462:	6820      	ldr	r0, [r4, #0]
 8016464:	b292      	uxth	r2, r2
 8016466:	fb02 f303 	mul.w	r3, r2, r3
 801646a:	3304      	adds	r3, #4
 801646c:	4418      	add	r0, r3
 801646e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d097      	beq.n	80163a6 <uxr_receive_reliable_message+0x22>
 8016476:	6923      	ldr	r3, [r4, #16]
 8016478:	4798      	blx	r3
 801647a:	2802      	cmp	r0, #2
 801647c:	d002      	beq.n	8016484 <uxr_receive_reliable_message+0x100>
 801647e:	2801      	cmp	r0, #1
 8016480:	d0e2      	beq.n	8016448 <uxr_receive_reliable_message+0xc4>
 8016482:	e790      	b.n	80163a6 <uxr_receive_reliable_message+0x22>
 8016484:	2601      	movs	r6, #1
 8016486:	e78f      	b.n	80163a8 <uxr_receive_reliable_message+0x24>

08016488 <uxr_next_input_reliable_buffer_available>:
 8016488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801648c:	4604      	mov	r4, r0
 801648e:	460f      	mov	r7, r1
 8016490:	8980      	ldrh	r0, [r0, #12]
 8016492:	2101      	movs	r1, #1
 8016494:	4690      	mov	r8, r2
 8016496:	f000 fc2f 	bl	8016cf8 <uxr_seq_num_add>
 801649a:	8922      	ldrh	r2, [r4, #8]
 801649c:	6866      	ldr	r6, [r4, #4]
 801649e:	fbb0 f3f2 	udiv	r3, r0, r2
 80164a2:	fbb6 f6f2 	udiv	r6, r6, r2
 80164a6:	fb02 0313 	mls	r3, r2, r3, r0
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	fb03 f606 	mul.w	r6, r3, r6
 80164b0:	6823      	ldr	r3, [r4, #0]
 80164b2:	3604      	adds	r6, #4
 80164b4:	441e      	add	r6, r3
 80164b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80164ba:	f1b9 0f00 	cmp.w	r9, #0
 80164be:	d023      	beq.n	8016508 <uxr_next_input_reliable_buffer_available+0x80>
 80164c0:	4605      	mov	r5, r0
 80164c2:	6923      	ldr	r3, [r4, #16]
 80164c4:	4630      	mov	r0, r6
 80164c6:	4798      	blx	r3
 80164c8:	4682      	mov	sl, r0
 80164ca:	b300      	cbz	r0, 801650e <uxr_next_input_reliable_buffer_available+0x86>
 80164cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80164d0:	2101      	movs	r1, #1
 80164d2:	4650      	mov	r0, sl
 80164d4:	f000 fc10 	bl	8016cf8 <uxr_seq_num_add>
 80164d8:	8921      	ldrh	r1, [r4, #8]
 80164da:	4682      	mov	sl, r0
 80164dc:	6863      	ldr	r3, [r4, #4]
 80164de:	6820      	ldr	r0, [r4, #0]
 80164e0:	fbba f2f1 	udiv	r2, sl, r1
 80164e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80164e8:	fb01 a212 	mls	r2, r1, r2, sl
 80164ec:	b292      	uxth	r2, r2
 80164ee:	fb02 f303 	mul.w	r3, r2, r3
 80164f2:	3304      	adds	r3, #4
 80164f4:	4418      	add	r0, r3
 80164f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80164fa:	b12b      	cbz	r3, 8016508 <uxr_next_input_reliable_buffer_available+0x80>
 80164fc:	6923      	ldr	r3, [r4, #16]
 80164fe:	4798      	blx	r3
 8016500:	2802      	cmp	r0, #2
 8016502:	d01b      	beq.n	801653c <uxr_next_input_reliable_buffer_available+0xb4>
 8016504:	2801      	cmp	r0, #1
 8016506:	d0e3      	beq.n	80164d0 <uxr_next_input_reliable_buffer_available+0x48>
 8016508:	2000      	movs	r0, #0
 801650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801650e:	464a      	mov	r2, r9
 8016510:	4631      	mov	r1, r6
 8016512:	4638      	mov	r0, r7
 8016514:	f7fa fc72 	bl	8010dfc <ucdr_init_buffer>
 8016518:	8921      	ldrh	r1, [r4, #8]
 801651a:	6863      	ldr	r3, [r4, #4]
 801651c:	2001      	movs	r0, #1
 801651e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016522:	fbb3 f3f1 	udiv	r3, r3, r1
 8016526:	fb01 5212 	mls	r2, r1, r2, r5
 801652a:	b292      	uxth	r2, r2
 801652c:	fb02 f303 	mul.w	r3, r2, r3
 8016530:	6822      	ldr	r2, [r4, #0]
 8016532:	f842 a003 	str.w	sl, [r2, r3]
 8016536:	81a5      	strh	r5, [r4, #12]
 8016538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801653c:	8920      	ldrh	r0, [r4, #8]
 801653e:	eb06 0108 	add.w	r1, r6, r8
 8016542:	6863      	ldr	r3, [r4, #4]
 8016544:	eba9 0208 	sub.w	r2, r9, r8
 8016548:	fbb5 f6f0 	udiv	r6, r5, r0
 801654c:	fbb3 f3f0 	udiv	r3, r3, r0
 8016550:	fb00 5516 	mls	r5, r0, r6, r5
 8016554:	2000      	movs	r0, #0
 8016556:	b2ad      	uxth	r5, r5
 8016558:	fb03 f505 	mul.w	r5, r3, r5
 801655c:	6823      	ldr	r3, [r4, #0]
 801655e:	5158      	str	r0, [r3, r5]
 8016560:	4638      	mov	r0, r7
 8016562:	f7fa fc4b 	bl	8010dfc <ucdr_init_buffer>
 8016566:	4638      	mov	r0, r7
 8016568:	4622      	mov	r2, r4
 801656a:	4903      	ldr	r1, [pc, #12]	@ (8016578 <uxr_next_input_reliable_buffer_available+0xf0>)
 801656c:	f7fa fc1a 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 8016570:	2001      	movs	r0, #1
 8016572:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016576:	e7c8      	b.n	801650a <uxr_next_input_reliable_buffer_available+0x82>
 8016578:	08016289 	.word	0x08016289

0801657c <uxr_process_heartbeat>:
 801657c:	b538      	push	{r3, r4, r5, lr}
 801657e:	4611      	mov	r1, r2
 8016580:	4604      	mov	r4, r0
 8016582:	89c0      	ldrh	r0, [r0, #14]
 8016584:	4615      	mov	r5, r2
 8016586:	f000 fbbf 	bl	8016d08 <uxr_seq_num_cmp>
 801658a:	2800      	cmp	r0, #0
 801658c:	bfb8      	it	lt
 801658e:	81e5      	strhlt	r5, [r4, #14]
 8016590:	bd38      	pop	{r3, r4, r5, pc}
 8016592:	bf00      	nop

08016594 <uxr_compute_acknack>:
 8016594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016598:	8903      	ldrh	r3, [r0, #8]
 801659a:	4604      	mov	r4, r0
 801659c:	460f      	mov	r7, r1
 801659e:	8985      	ldrh	r5, [r0, #12]
 80165a0:	b1db      	cbz	r3, 80165da <uxr_compute_acknack+0x46>
 80165a2:	4628      	mov	r0, r5
 80165a4:	2601      	movs	r6, #1
 80165a6:	e004      	b.n	80165b2 <uxr_compute_acknack+0x1e>
 80165a8:	4566      	cmp	r6, ip
 80165aa:	f106 0601 	add.w	r6, r6, #1
 80165ae:	d214      	bcs.n	80165da <uxr_compute_acknack+0x46>
 80165b0:	89a0      	ldrh	r0, [r4, #12]
 80165b2:	b2b1      	uxth	r1, r6
 80165b4:	f000 fba0 	bl	8016cf8 <uxr_seq_num_add>
 80165b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80165bc:	fbb0 f2fc 	udiv	r2, r0, ip
 80165c0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80165c4:	fb0c 0212 	mls	r2, ip, r2, r0
 80165c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80165cc:	b292      	uxth	r2, r2
 80165ce:	fb02 f303 	mul.w	r3, r2, r3
 80165d2:	58cb      	ldr	r3, [r1, r3]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1e7      	bne.n	80165a8 <uxr_compute_acknack+0x14>
 80165d8:	4605      	mov	r5, r0
 80165da:	803d      	strh	r5, [r7, #0]
 80165dc:	2101      	movs	r1, #1
 80165de:	89e6      	ldrh	r6, [r4, #14]
 80165e0:	4628      	mov	r0, r5
 80165e2:	f000 fb8d 	bl	8016d00 <uxr_seq_num_sub>
 80165e6:	4601      	mov	r1, r0
 80165e8:	4630      	mov	r0, r6
 80165ea:	f000 fb89 	bl	8016d00 <uxr_seq_num_sub>
 80165ee:	4606      	mov	r6, r0
 80165f0:	b328      	cbz	r0, 801663e <uxr_compute_acknack+0xaa>
 80165f2:	f04f 0900 	mov.w	r9, #0
 80165f6:	f04f 0801 	mov.w	r8, #1
 80165fa:	464d      	mov	r5, r9
 80165fc:	fa1f f189 	uxth.w	r1, r9
 8016600:	8838      	ldrh	r0, [r7, #0]
 8016602:	f000 fb79 	bl	8016cf8 <uxr_seq_num_add>
 8016606:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801660a:	6861      	ldr	r1, [r4, #4]
 801660c:	fa08 fe09 	lsl.w	lr, r8, r9
 8016610:	6822      	ldr	r2, [r4, #0]
 8016612:	f109 0901 	add.w	r9, r9, #1
 8016616:	ea4e 0e05 	orr.w	lr, lr, r5
 801661a:	fbb0 f3fc 	udiv	r3, r0, ip
 801661e:	fbb1 f1fc 	udiv	r1, r1, ip
 8016622:	fb03 001c 	mls	r0, r3, ip, r0
 8016626:	b283      	uxth	r3, r0
 8016628:	fb01 f303 	mul.w	r3, r1, r3
 801662c:	58d3      	ldr	r3, [r2, r3]
 801662e:	b90b      	cbnz	r3, 8016634 <uxr_compute_acknack+0xa0>
 8016630:	fa1f f58e 	uxth.w	r5, lr
 8016634:	454e      	cmp	r6, r9
 8016636:	d1e1      	bne.n	80165fc <uxr_compute_acknack+0x68>
 8016638:	4628      	mov	r0, r5
 801663a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801663e:	4605      	mov	r5, r0
 8016640:	4628      	mov	r0, r5
 8016642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016646:	bf00      	nop

08016648 <uxr_init_output_best_effort_stream>:
 8016648:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801664c:	6001      	str	r1, [r0, #0]
 801664e:	7303      	strb	r3, [r0, #12]
 8016650:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016654:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop

0801665c <uxr_reset_output_best_effort_stream>:
 801665c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016660:	7b03      	ldrb	r3, [r0, #12]
 8016662:	81c2      	strh	r2, [r0, #14]
 8016664:	6043      	str	r3, [r0, #4]
 8016666:	4770      	bx	lr

08016668 <uxr_prepare_best_effort_buffer_to_write>:
 8016668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666a:	4604      	mov	r4, r0
 801666c:	b083      	sub	sp, #12
 801666e:	6840      	ldr	r0, [r0, #4]
 8016670:	460d      	mov	r5, r1
 8016672:	4616      	mov	r6, r2
 8016674:	f7fc fe22 	bl	80132bc <uxr_submessage_padding>
 8016678:	6863      	ldr	r3, [r4, #4]
 801667a:	4418      	add	r0, r3
 801667c:	68a3      	ldr	r3, [r4, #8]
 801667e:	1942      	adds	r2, r0, r5
 8016680:	4293      	cmp	r3, r2
 8016682:	bf2c      	ite	cs
 8016684:	2701      	movcs	r7, #1
 8016686:	2700      	movcc	r7, #0
 8016688:	d202      	bcs.n	8016690 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801668a:	4638      	mov	r0, r7
 801668c:	b003      	add	sp, #12
 801668e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016690:	9000      	str	r0, [sp, #0]
 8016692:	2300      	movs	r3, #0
 8016694:	4630      	mov	r0, r6
 8016696:	6821      	ldr	r1, [r4, #0]
 8016698:	f7fa fb9e 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 801669c:	6861      	ldr	r1, [r4, #4]
 801669e:	4638      	mov	r0, r7
 80166a0:	4429      	add	r1, r5
 80166a2:	6061      	str	r1, [r4, #4]
 80166a4:	b003      	add	sp, #12
 80166a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166a8 <uxr_prepare_best_effort_buffer_to_send>:
 80166a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ac:	4604      	mov	r4, r0
 80166ae:	461d      	mov	r5, r3
 80166b0:	6840      	ldr	r0, [r0, #4]
 80166b2:	7b23      	ldrb	r3, [r4, #12]
 80166b4:	4298      	cmp	r0, r3
 80166b6:	bf8c      	ite	hi
 80166b8:	2601      	movhi	r6, #1
 80166ba:	2600      	movls	r6, #0
 80166bc:	d802      	bhi.n	80166c4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80166be:	4630      	mov	r0, r6
 80166c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c4:	4688      	mov	r8, r1
 80166c6:	89e0      	ldrh	r0, [r4, #14]
 80166c8:	2101      	movs	r1, #1
 80166ca:	4617      	mov	r7, r2
 80166cc:	f000 fb14 	bl	8016cf8 <uxr_seq_num_add>
 80166d0:	6823      	ldr	r3, [r4, #0]
 80166d2:	81e0      	strh	r0, [r4, #14]
 80166d4:	8028      	strh	r0, [r5, #0]
 80166d6:	4630      	mov	r0, r6
 80166d8:	f8c8 3000 	str.w	r3, [r8]
 80166dc:	6863      	ldr	r3, [r4, #4]
 80166de:	603b      	str	r3, [r7, #0]
 80166e0:	7b23      	ldrb	r3, [r4, #12]
 80166e2:	6063      	str	r3, [r4, #4]
 80166e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166e8 <on_full_output_buffer>:
 80166e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ea:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80166ee:	460c      	mov	r4, r1
 80166f0:	6803      	ldr	r3, [r0, #0]
 80166f2:	4605      	mov	r5, r0
 80166f4:	7b26      	ldrb	r6, [r4, #12]
 80166f6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80166fa:	fbb2 f2fc 	udiv	r2, r2, ip
 80166fe:	eba3 0e01 	sub.w	lr, r3, r1
 8016702:	6903      	ldr	r3, [r0, #16]
 8016704:	fbbe fef2 	udiv	lr, lr, r2
 8016708:	f10e 0e01 	add.w	lr, lr, #1
 801670c:	fa1f fe8e 	uxth.w	lr, lr
 8016710:	fbbe f7fc 	udiv	r7, lr, ip
 8016714:	fb0c ec17 	mls	ip, ip, r7, lr
 8016718:	fa1f fc8c 	uxth.w	ip, ip
 801671c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016720:	f851 200c 	ldr.w	r2, [r1, ip]
 8016724:	44b4      	add	ip, r6
 8016726:	1b92      	subs	r2, r2, r6
 8016728:	f10c 0c08 	add.w	ip, ip, #8
 801672c:	3a04      	subs	r2, #4
 801672e:	4461      	add	r1, ip
 8016730:	f7fa fb5c 	bl	8010dec <ucdr_init_buffer_origin>
 8016734:	4628      	mov	r0, r5
 8016736:	4622      	mov	r2, r4
 8016738:	4902      	ldr	r1, [pc, #8]	@ (8016744 <on_full_output_buffer+0x5c>)
 801673a:	f7fa fb33 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 801673e:	2000      	movs	r0, #0
 8016740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016742:	bf00      	nop
 8016744:	080166e9 	.word	0x080166e9

08016748 <uxr_init_output_reliable_stream>:
 8016748:	b530      	push	{r4, r5, lr}
 801674a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801674e:	8103      	strh	r3, [r0, #8]
 8016750:	7304      	strb	r4, [r0, #12]
 8016752:	e9c0 1200 	strd	r1, r2, [r0]
 8016756:	b1e3      	cbz	r3, 8016792 <uxr_init_output_reliable_stream+0x4a>
 8016758:	600c      	str	r4, [r1, #0]
 801675a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801675e:	f1bc 0f01 	cmp.w	ip, #1
 8016762:	d916      	bls.n	8016792 <uxr_init_output_reliable_stream+0x4a>
 8016764:	f04f 0e01 	mov.w	lr, #1
 8016768:	6843      	ldr	r3, [r0, #4]
 801676a:	f10e 0501 	add.w	r5, lr, #1
 801676e:	7b04      	ldrb	r4, [r0, #12]
 8016770:	6801      	ldr	r1, [r0, #0]
 8016772:	fbbe f2fc 	udiv	r2, lr, ip
 8016776:	fbb3 f3fc 	udiv	r3, r3, ip
 801677a:	fb0c e212 	mls	r2, ip, r2, lr
 801677e:	fa1f fe85 	uxth.w	lr, r5
 8016782:	b292      	uxth	r2, r2
 8016784:	fb02 f303 	mul.w	r3, r2, r3
 8016788:	50cc      	str	r4, [r1, r3]
 801678a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801678e:	45f4      	cmp	ip, lr
 8016790:	d8ea      	bhi.n	8016768 <uxr_init_output_reliable_stream+0x20>
 8016792:	4b07      	ldr	r3, [pc, #28]	@ (80167b0 <uxr_init_output_reliable_stream+0x68>)
 8016794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016798:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801679c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80167a0:	f8c0 300e 	str.w	r3, [r0, #14]
 80167a4:	2300      	movs	r3, #0
 80167a6:	8242      	strh	r2, [r0, #18]
 80167a8:	8403      	strh	r3, [r0, #32]
 80167aa:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80167ae:	bd30      	pop	{r4, r5, pc}
 80167b0:	ffff0000 	.word	0xffff0000
 80167b4:	00000000 	.word	0x00000000

080167b8 <uxr_reset_output_reliable_stream>:
 80167b8:	8901      	ldrh	r1, [r0, #8]
 80167ba:	b510      	push	{r4, lr}
 80167bc:	b1b1      	cbz	r1, 80167ec <uxr_reset_output_reliable_stream+0x34>
 80167be:	f04f 0e00 	mov.w	lr, #0
 80167c2:	46f4      	mov	ip, lr
 80167c4:	6843      	ldr	r3, [r0, #4]
 80167c6:	f10e 0e01 	add.w	lr, lr, #1
 80167ca:	7b04      	ldrb	r4, [r0, #12]
 80167cc:	fbbc f2f1 	udiv	r2, ip, r1
 80167d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80167d4:	fb01 c212 	mls	r2, r1, r2, ip
 80167d8:	fa1f fc8e 	uxth.w	ip, lr
 80167dc:	b292      	uxth	r2, r2
 80167de:	fb02 f303 	mul.w	r3, r2, r3
 80167e2:	6802      	ldr	r2, [r0, #0]
 80167e4:	50d4      	str	r4, [r2, r3]
 80167e6:	8901      	ldrh	r1, [r0, #8]
 80167e8:	4561      	cmp	r1, ip
 80167ea:	d8eb      	bhi.n	80167c4 <uxr_reset_output_reliable_stream+0xc>
 80167ec:	4b08      	ldr	r3, [pc, #32]	@ (8016810 <uxr_reset_output_reliable_stream+0x58>)
 80167ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167f2:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8016808 <uxr_reset_output_reliable_stream+0x50>
 80167f6:	f8c0 300e 	str.w	r3, [r0, #14]
 80167fa:	2300      	movs	r3, #0
 80167fc:	8242      	strh	r2, [r0, #18]
 80167fe:	8403      	strh	r3, [r0, #32]
 8016800:	ed80 7b06 	vstr	d7, [r0, #24]
 8016804:	bd10      	pop	{r4, pc}
 8016806:	bf00      	nop
 8016808:	ffffffff 	.word	0xffffffff
 801680c:	7fffffff 	.word	0x7fffffff
 8016810:	ffff0000 	.word	0xffff0000

08016814 <uxr_prepare_reliable_buffer_to_write>:
 8016814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016818:	4604      	mov	r4, r0
 801681a:	b091      	sub	sp, #68	@ 0x44
 801681c:	8900      	ldrh	r0, [r0, #8]
 801681e:	468b      	mov	fp, r1
 8016820:	89e6      	ldrh	r6, [r4, #14]
 8016822:	9204      	str	r2, [sp, #16]
 8016824:	6865      	ldr	r5, [r4, #4]
 8016826:	6823      	ldr	r3, [r4, #0]
 8016828:	f894 900c 	ldrb.w	r9, [r4, #12]
 801682c:	fbb6 f2f0 	udiv	r2, r6, r0
 8016830:	fbb5 f5f0 	udiv	r5, r5, r0
 8016834:	fb00 6212 	mls	r2, r0, r2, r6
 8016838:	1f2f      	subs	r7, r5, #4
 801683a:	b292      	uxth	r2, r2
 801683c:	fb05 3202 	mla	r2, r5, r2, r3
 8016840:	1d11      	adds	r1, r2, #4
 8016842:	f8d2 8000 	ldr.w	r8, [r2]
 8016846:	9103      	str	r1, [sp, #12]
 8016848:	2800      	cmp	r0, #0
 801684a:	f000 814a 	beq.w	8016ae2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801684e:	f04f 0c00 	mov.w	ip, #0
 8016852:	46e2      	mov	sl, ip
 8016854:	4661      	mov	r1, ip
 8016856:	f10c 0c01 	add.w	ip, ip, #1
 801685a:	fbb1 f2f0 	udiv	r2, r1, r0
 801685e:	fb00 1212 	mls	r2, r0, r2, r1
 8016862:	fa1f f18c 	uxth.w	r1, ip
 8016866:	b292      	uxth	r2, r2
 8016868:	fb05 f202 	mul.w	r2, r5, r2
 801686c:	589a      	ldr	r2, [r3, r2]
 801686e:	454a      	cmp	r2, r9
 8016870:	d103      	bne.n	801687a <uxr_prepare_reliable_buffer_to_write+0x66>
 8016872:	f10a 0a01 	add.w	sl, sl, #1
 8016876:	fa1f fa8a 	uxth.w	sl, sl
 801687a:	4281      	cmp	r1, r0
 801687c:	d3eb      	bcc.n	8016856 <uxr_prepare_reliable_buffer_to_write+0x42>
 801687e:	4640      	mov	r0, r8
 8016880:	2104      	movs	r1, #4
 8016882:	f8cd a014 	str.w	sl, [sp, #20]
 8016886:	f7fa fabd 	bl	8010e04 <ucdr_alignment>
 801688a:	4480      	add	r8, r0
 801688c:	eb08 020b 	add.w	r2, r8, fp
 8016890:	42ba      	cmp	r2, r7
 8016892:	f240 80ca 	bls.w	8016a2a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016896:	7b22      	ldrb	r2, [r4, #12]
 8016898:	445a      	add	r2, fp
 801689a:	42ba      	cmp	r2, r7
 801689c:	f240 80b2 	bls.w	8016a04 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80168a0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80168a4:	b2bb      	uxth	r3, r7
 80168a6:	eba2 0209 	sub.w	r2, r2, r9
 80168aa:	441a      	add	r2, r3
 80168ac:	b292      	uxth	r2, r2
 80168ae:	fb0a f902 	mul.w	r9, sl, r2
 80168b2:	9205      	str	r2, [sp, #20]
 80168b4:	45d9      	cmp	r9, fp
 80168b6:	9206      	str	r2, [sp, #24]
 80168b8:	f0c0 80b3 	bcc.w	8016a22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80168bc:	f108 0204 	add.w	r2, r8, #4
 80168c0:	42ba      	cmp	r2, r7
 80168c2:	f080 80da 	bcs.w	8016a7a <uxr_prepare_reliable_buffer_to_write+0x266>
 80168c6:	f1a3 0904 	sub.w	r9, r3, #4
 80168ca:	9b05      	ldr	r3, [sp, #20]
 80168cc:	eba9 0908 	sub.w	r9, r9, r8
 80168d0:	fa1f f989 	uxth.w	r9, r9
 80168d4:	ebab 0b09 	sub.w	fp, fp, r9
 80168d8:	fbbb f2f3 	udiv	r2, fp, r3
 80168dc:	fb03 b312 	mls	r3, r3, r2, fp
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	f040 80c4 	bne.w	8016a6e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80168e6:	b293      	uxth	r3, r2
 80168e8:	4553      	cmp	r3, sl
 80168ea:	f200 809a 	bhi.w	8016a22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f000 80f9 	beq.w	8016ae6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80168f4:	f8cd 801c 	str.w	r8, [sp, #28]
 80168f8:	f04f 0a00 	mov.w	sl, #0
 80168fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016900:	f10d 0b20 	add.w	fp, sp, #32
 8016904:	9505      	str	r5, [sp, #20]
 8016906:	461d      	mov	r5, r3
 8016908:	e000      	b.n	801690c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801690a:	46c1      	mov	r9, r8
 801690c:	8922      	ldrh	r2, [r4, #8]
 801690e:	4658      	mov	r0, fp
 8016910:	6863      	ldr	r3, [r4, #4]
 8016912:	f10a 0a01 	add.w	sl, sl, #1
 8016916:	fbb6 f1f2 	udiv	r1, r6, r2
 801691a:	fbb3 f3f2 	udiv	r3, r3, r2
 801691e:	fb02 6111 	mls	r1, r2, r1, r6
 8016922:	463a      	mov	r2, r7
 8016924:	b289      	uxth	r1, r1
 8016926:	fb03 f101 	mul.w	r1, r3, r1
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	3104      	adds	r1, #4
 801692e:	4419      	add	r1, r3
 8016930:	2300      	movs	r3, #0
 8016932:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8016936:	f8cd c000 	str.w	ip, [sp]
 801693a:	f7fa fa4d 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 801693e:	464a      	mov	r2, r9
 8016940:	2300      	movs	r3, #0
 8016942:	210d      	movs	r1, #13
 8016944:	4658      	mov	r0, fp
 8016946:	f7fc fc79 	bl	801323c <uxr_buffer_submessage_header>
 801694a:	8921      	ldrh	r1, [r4, #8]
 801694c:	6863      	ldr	r3, [r4, #4]
 801694e:	4630      	mov	r0, r6
 8016950:	fbb6 f2f1 	udiv	r2, r6, r1
 8016954:	fbb3 f3f1 	udiv	r3, r3, r1
 8016958:	fb01 6212 	mls	r2, r1, r2, r6
 801695c:	2101      	movs	r1, #1
 801695e:	b292      	uxth	r2, r2
 8016960:	fb02 f303 	mul.w	r3, r2, r3
 8016964:	6822      	ldr	r2, [r4, #0]
 8016966:	50d7      	str	r7, [r2, r3]
 8016968:	f000 f9c6 	bl	8016cf8 <uxr_seq_num_add>
 801696c:	4606      	mov	r6, r0
 801696e:	fa1f f38a 	uxth.w	r3, sl
 8016972:	429d      	cmp	r5, r3
 8016974:	d8c9      	bhi.n	801690a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8016976:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801697a:	9d05      	ldr	r5, [sp, #20]
 801697c:	8920      	ldrh	r0, [r4, #8]
 801697e:	463a      	mov	r2, r7
 8016980:	6863      	ldr	r3, [r4, #4]
 8016982:	fbb6 f1f0 	udiv	r1, r6, r0
 8016986:	fbb3 f3f0 	udiv	r3, r3, r0
 801698a:	fb00 6111 	mls	r1, r0, r1, r6
 801698e:	4658      	mov	r0, fp
 8016990:	b289      	uxth	r1, r1
 8016992:	fb01 f303 	mul.w	r3, r1, r3
 8016996:	6821      	ldr	r1, [r4, #0]
 8016998:	3304      	adds	r3, #4
 801699a:	4419      	add	r1, r3
 801699c:	2300      	movs	r3, #0
 801699e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80169a2:	9700      	str	r7, [sp, #0]
 80169a4:	f7fa fa18 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 80169a8:	9f06      	ldr	r7, [sp, #24]
 80169aa:	4658      	mov	r0, fp
 80169ac:	2302      	movs	r3, #2
 80169ae:	b2ba      	uxth	r2, r7
 80169b0:	210d      	movs	r1, #13
 80169b2:	f7fc fc43 	bl	801323c <uxr_buffer_submessage_header>
 80169b6:	f108 0104 	add.w	r1, r8, #4
 80169ba:	9b03      	ldr	r3, [sp, #12]
 80169bc:	f1a5 0208 	sub.w	r2, r5, #8
 80169c0:	8925      	ldrh	r5, [r4, #8]
 80169c2:	440b      	add	r3, r1
 80169c4:	eba2 0208 	sub.w	r2, r2, r8
 80169c8:	fbb6 f0f5 	udiv	r0, r6, r5
 80169cc:	4619      	mov	r1, r3
 80169ce:	6863      	ldr	r3, [r4, #4]
 80169d0:	fb05 6010 	mls	r0, r5, r0, r6
 80169d4:	fbb3 f3f5 	udiv	r3, r3, r5
 80169d8:	b280      	uxth	r0, r0
 80169da:	6825      	ldr	r5, [r4, #0]
 80169dc:	fb00 f303 	mul.w	r3, r0, r3
 80169e0:	7b20      	ldrb	r0, [r4, #12]
 80169e2:	3004      	adds	r0, #4
 80169e4:	4438      	add	r0, r7
 80169e6:	50e8      	str	r0, [r5, r3]
 80169e8:	9d04      	ldr	r5, [sp, #16]
 80169ea:	4628      	mov	r0, r5
 80169ec:	f7fa fa06 	bl	8010dfc <ucdr_init_buffer>
 80169f0:	4628      	mov	r0, r5
 80169f2:	4622      	mov	r2, r4
 80169f4:	493d      	ldr	r1, [pc, #244]	@ (8016aec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80169f6:	f7fa f9d5 	bl	8010da4 <ucdr_set_on_full_buffer_callback>
 80169fa:	2001      	movs	r0, #1
 80169fc:	81e6      	strh	r6, [r4, #14]
 80169fe:	b011      	add	sp, #68	@ 0x44
 8016a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a04:	2101      	movs	r1, #1
 8016a06:	89e0      	ldrh	r0, [r4, #14]
 8016a08:	f000 f976 	bl	8016cf8 <uxr_seq_num_add>
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	8921      	ldrh	r1, [r4, #8]
 8016a10:	8a60      	ldrh	r0, [r4, #18]
 8016a12:	f000 f971 	bl	8016cf8 <uxr_seq_num_add>
 8016a16:	4601      	mov	r1, r0
 8016a18:	4628      	mov	r0, r5
 8016a1a:	f000 f975 	bl	8016d08 <uxr_seq_num_cmp>
 8016a1e:	2800      	cmp	r0, #0
 8016a20:	dd44      	ble.n	8016aac <uxr_prepare_reliable_buffer_to_write+0x298>
 8016a22:	2000      	movs	r0, #0
 8016a24:	b011      	add	sp, #68	@ 0x44
 8016a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a2a:	8921      	ldrh	r1, [r4, #8]
 8016a2c:	8a60      	ldrh	r0, [r4, #18]
 8016a2e:	9205      	str	r2, [sp, #20]
 8016a30:	f000 f962 	bl	8016cf8 <uxr_seq_num_add>
 8016a34:	4601      	mov	r1, r0
 8016a36:	4630      	mov	r0, r6
 8016a38:	f000 f966 	bl	8016d08 <uxr_seq_num_cmp>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	9a05      	ldr	r2, [sp, #20]
 8016a40:	dcef      	bgt.n	8016a22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016a42:	8925      	ldrh	r5, [r4, #8]
 8016a44:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016a48:	fbb6 f4f5 	udiv	r4, r6, r5
 8016a4c:	fbb3 f3f5 	udiv	r3, r3, r5
 8016a50:	fb05 6414 	mls	r4, r5, r4, r6
 8016a54:	b2a4      	uxth	r4, r4
 8016a56:	fb04 f303 	mul.w	r3, r4, r3
 8016a5a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016a5e:	50fa      	str	r2, [r7, r3]
 8016a60:	2300      	movs	r3, #0
 8016a62:	f8cd 8000 	str.w	r8, [sp]
 8016a66:	f7fa f9b7 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8016a6a:	2001      	movs	r0, #1
 8016a6c:	e7da      	b.n	8016a24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8016a6e:	3201      	adds	r2, #1
 8016a70:	9306      	str	r3, [sp, #24]
 8016a72:	b293      	uxth	r3, r2
 8016a74:	4553      	cmp	r3, sl
 8016a76:	d8d4      	bhi.n	8016a22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8016a78:	e739      	b.n	80168ee <uxr_prepare_reliable_buffer_to_write+0xda>
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	2101      	movs	r1, #1
 8016a7e:	9307      	str	r3, [sp, #28]
 8016a80:	f000 f93a 	bl	8016cf8 <uxr_seq_num_add>
 8016a84:	4606      	mov	r6, r0
 8016a86:	8920      	ldrh	r0, [r4, #8]
 8016a88:	6862      	ldr	r2, [r4, #4]
 8016a8a:	fbb6 f1f0 	udiv	r1, r6, r0
 8016a8e:	fbb2 f2f0 	udiv	r2, r2, r0
 8016a92:	fb00 6111 	mls	r1, r0, r1, r6
 8016a96:	b289      	uxth	r1, r1
 8016a98:	fb01 f202 	mul.w	r2, r1, r2
 8016a9c:	6821      	ldr	r1, [r4, #0]
 8016a9e:	3204      	adds	r2, #4
 8016aa0:	188b      	adds	r3, r1, r2
 8016aa2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016aa6:	9303      	str	r3, [sp, #12]
 8016aa8:	9b07      	ldr	r3, [sp, #28]
 8016aaa:	e70c      	b.n	80168c6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016aac:	8921      	ldrh	r1, [r4, #8]
 8016aae:	6863      	ldr	r3, [r4, #4]
 8016ab0:	9804      	ldr	r0, [sp, #16]
 8016ab2:	fbb5 f2f1 	udiv	r2, r5, r1
 8016ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8016aba:	fb01 5212 	mls	r2, r1, r2, r5
 8016abe:	6821      	ldr	r1, [r4, #0]
 8016ac0:	b292      	uxth	r2, r2
 8016ac2:	fb02 f303 	mul.w	r3, r2, r3
 8016ac6:	7b22      	ldrb	r2, [r4, #12]
 8016ac8:	3304      	adds	r3, #4
 8016aca:	445a      	add	r2, fp
 8016acc:	4419      	add	r1, r3
 8016ace:	f841 2c04 	str.w	r2, [r1, #-4]
 8016ad2:	7b23      	ldrb	r3, [r4, #12]
 8016ad4:	9300      	str	r3, [sp, #0]
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	f7fa f97e 	bl	8010dd8 <ucdr_init_buffer_origin_offset>
 8016adc:	2001      	movs	r0, #1
 8016ade:	81e5      	strh	r5, [r4, #14]
 8016ae0:	e7a0      	b.n	8016a24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8016ae2:	4682      	mov	sl, r0
 8016ae4:	e6cb      	b.n	801687e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8016ae6:	f10d 0b20 	add.w	fp, sp, #32
 8016aea:	e747      	b.n	801697c <uxr_prepare_reliable_buffer_to_write+0x168>
 8016aec:	080166e9 	.word	0x080166e9

08016af0 <uxr_prepare_next_reliable_buffer_to_send>:
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4604      	mov	r4, r0
 8016af4:	461d      	mov	r5, r3
 8016af6:	460f      	mov	r7, r1
 8016af8:	8a00      	ldrh	r0, [r0, #16]
 8016afa:	2101      	movs	r1, #1
 8016afc:	4616      	mov	r6, r2
 8016afe:	f000 f8fb 	bl	8016cf8 <uxr_seq_num_add>
 8016b02:	8028      	strh	r0, [r5, #0]
 8016b04:	8922      	ldrh	r2, [r4, #8]
 8016b06:	6863      	ldr	r3, [r4, #4]
 8016b08:	fbb0 f1f2 	udiv	r1, r0, r2
 8016b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b10:	fb02 0c11 	mls	ip, r2, r1, r0
 8016b14:	89e1      	ldrh	r1, [r4, #14]
 8016b16:	fa1f fc8c 	uxth.w	ip, ip
 8016b1a:	fb0c fc03 	mul.w	ip, ip, r3
 8016b1e:	6823      	ldr	r3, [r4, #0]
 8016b20:	f10c 0c04 	add.w	ip, ip, #4
 8016b24:	4463      	add	r3, ip
 8016b26:	603b      	str	r3, [r7, #0]
 8016b28:	6823      	ldr	r3, [r4, #0]
 8016b2a:	449c      	add	ip, r3
 8016b2c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016b30:	6033      	str	r3, [r6, #0]
 8016b32:	f000 f8e9 	bl	8016d08 <uxr_seq_num_cmp>
 8016b36:	2800      	cmp	r0, #0
 8016b38:	dd01      	ble.n	8016b3e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016b3a:	2000      	movs	r0, #0
 8016b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b3e:	7b23      	ldrb	r3, [r4, #12]
 8016b40:	6832      	ldr	r2, [r6, #0]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d9f9      	bls.n	8016b3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b46:	8a61      	ldrh	r1, [r4, #18]
 8016b48:	8a20      	ldrh	r0, [r4, #16]
 8016b4a:	f000 f8d9 	bl	8016d00 <uxr_seq_num_sub>
 8016b4e:	8923      	ldrh	r3, [r4, #8]
 8016b50:	4283      	cmp	r3, r0
 8016b52:	d0f2      	beq.n	8016b3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016b54:	8828      	ldrh	r0, [r5, #0]
 8016b56:	89e3      	ldrh	r3, [r4, #14]
 8016b58:	8220      	strh	r0, [r4, #16]
 8016b5a:	4298      	cmp	r0, r3
 8016b5c:	d001      	beq.n	8016b62 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016b5e:	2001      	movs	r0, #1
 8016b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b62:	2101      	movs	r1, #1
 8016b64:	f000 f8c8 	bl	8016cf8 <uxr_seq_num_add>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2001      	movs	r0, #1
 8016b6c:	81e3      	strh	r3, [r4, #14]
 8016b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b70 <uxr_update_output_stream_heartbeat_timestamp>:
 8016b70:	b570      	push	{r4, r5, r6, lr}
 8016b72:	8a01      	ldrh	r1, [r0, #16]
 8016b74:	4604      	mov	r4, r0
 8016b76:	8a40      	ldrh	r0, [r0, #18]
 8016b78:	4615      	mov	r5, r2
 8016b7a:	461e      	mov	r6, r3
 8016b7c:	f000 f8c4 	bl	8016d08 <uxr_seq_num_cmp>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	db07      	blt.n	8016b94 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016b88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016b8c:	2000      	movs	r0, #0
 8016b8e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016b92:	bd70      	pop	{r4, r5, r6, pc}
 8016b94:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016b98:	b940      	cbnz	r0, 8016bac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	f884 3020 	strb.w	r3, [r4, #32]
 8016ba0:	3564      	adds	r5, #100	@ 0x64
 8016ba2:	f146 0600 	adc.w	r6, r6, #0
 8016ba6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016baa:	bd70      	pop	{r4, r5, r6, pc}
 8016bac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016bb0:	4295      	cmp	r5, r2
 8016bb2:	eb76 0303 	sbcs.w	r3, r6, r3
 8016bb6:	db04      	blt.n	8016bc2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	2001      	movs	r0, #1
 8016bbc:	f884 3020 	strb.w	r3, [r4, #32]
 8016bc0:	e7ee      	b.n	8016ba0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	e7ec      	b.n	8016ba0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016bc6:	bf00      	nop

08016bc8 <uxr_begin_output_nack_buffer_it>:
 8016bc8:	8a40      	ldrh	r0, [r0, #18]
 8016bca:	4770      	bx	lr

08016bcc <uxr_next_reliable_nack_buffer_to_send>:
 8016bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd0:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8016bd4:	b197      	cbz	r7, 8016bfc <uxr_next_reliable_nack_buffer_to_send+0x30>
 8016bd6:	4680      	mov	r8, r0
 8016bd8:	460d      	mov	r5, r1
 8016bda:	4616      	mov	r6, r2
 8016bdc:	461c      	mov	r4, r3
 8016bde:	8818      	ldrh	r0, [r3, #0]
 8016be0:	2101      	movs	r1, #1
 8016be2:	f000 f889 	bl	8016cf8 <uxr_seq_num_add>
 8016be6:	8020      	strh	r0, [r4, #0]
 8016be8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8016bec:	f000 f88c 	bl	8016d08 <uxr_seq_num_cmp>
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	dd06      	ble.n	8016c02 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	461f      	mov	r7, r3
 8016bf8:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8016bfc:	4638      	mov	r0, r7
 8016bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c02:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8016c06:	8820      	ldrh	r0, [r4, #0]
 8016c08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016c0c:	fbb0 f3f2 	udiv	r3, r0, r2
 8016c10:	fbb1 fcf2 	udiv	ip, r1, r2
 8016c14:	fb02 0313 	mls	r3, r2, r3, r0
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	fb03 fc0c 	mul.w	ip, r3, ip
 8016c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c22:	f10c 0c04 	add.w	ip, ip, #4
 8016c26:	4463      	add	r3, ip
 8016c28:	602b      	str	r3, [r5, #0]
 8016c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8016c2e:	4463      	add	r3, ip
 8016c30:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016c34:	6033      	str	r3, [r6, #0]
 8016c36:	f898 200c 	ldrb.w	r2, [r8, #12]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d0d0      	beq.n	8016be0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8016c3e:	e7dd      	b.n	8016bfc <uxr_next_reliable_nack_buffer_to_send+0x30>

08016c40 <uxr_process_acknack>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	4604      	mov	r4, r0
 8016c44:	460e      	mov	r6, r1
 8016c46:	4610      	mov	r0, r2
 8016c48:	2101      	movs	r1, #1
 8016c4a:	f000 f859 	bl	8016d00 <uxr_seq_num_sub>
 8016c4e:	8a61      	ldrh	r1, [r4, #18]
 8016c50:	f000 f856 	bl	8016d00 <uxr_seq_num_sub>
 8016c54:	b1c8      	cbz	r0, 8016c8a <uxr_process_acknack+0x4a>
 8016c56:	4605      	mov	r5, r0
 8016c58:	2700      	movs	r7, #0
 8016c5a:	2101      	movs	r1, #1
 8016c5c:	8a60      	ldrh	r0, [r4, #18]
 8016c5e:	f000 f84b 	bl	8016cf8 <uxr_seq_num_add>
 8016c62:	8923      	ldrh	r3, [r4, #8]
 8016c64:	6862      	ldr	r2, [r4, #4]
 8016c66:	3701      	adds	r7, #1
 8016c68:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016c6c:	6821      	ldr	r1, [r4, #0]
 8016c6e:	42bd      	cmp	r5, r7
 8016c70:	8260      	strh	r0, [r4, #18]
 8016c72:	fbb0 fef3 	udiv	lr, r0, r3
 8016c76:	fbb2 f2f3 	udiv	r2, r2, r3
 8016c7a:	fb03 031e 	mls	r3, r3, lr, r0
 8016c7e:	b29b      	uxth	r3, r3
 8016c80:	fb02 f303 	mul.w	r3, r2, r3
 8016c84:	f841 c003 	str.w	ip, [r1, r3]
 8016c88:	d1e7      	bne.n	8016c5a <uxr_process_acknack+0x1a>
 8016c8a:	3e00      	subs	r6, #0
 8016c8c:	f04f 0300 	mov.w	r3, #0
 8016c90:	bf18      	it	ne
 8016c92:	2601      	movne	r6, #1
 8016c94:	f884 3020 	strb.w	r3, [r4, #32]
 8016c98:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c9e:	bf00      	nop

08016ca0 <uxr_is_output_up_to_date>:
 8016ca0:	8a01      	ldrh	r1, [r0, #16]
 8016ca2:	8a40      	ldrh	r0, [r0, #18]
 8016ca4:	b508      	push	{r3, lr}
 8016ca6:	f000 f82f 	bl	8016d08 <uxr_seq_num_cmp>
 8016caa:	fab0 f080 	clz	r0, r0
 8016cae:	0940      	lsrs	r0, r0, #5
 8016cb0:	bd08      	pop	{r3, pc}
 8016cb2:	bf00      	nop

08016cb4 <get_available_free_slots>:
 8016cb4:	8901      	ldrh	r1, [r0, #8]
 8016cb6:	b1e1      	cbz	r1, 8016cf2 <get_available_free_slots+0x3e>
 8016cb8:	6843      	ldr	r3, [r0, #4]
 8016cba:	f04f 0c00 	mov.w	ip, #0
 8016cbe:	b530      	push	{r4, r5, lr}
 8016cc0:	fbb3 fef1 	udiv	lr, r3, r1
 8016cc4:	6805      	ldr	r5, [r0, #0]
 8016cc6:	4662      	mov	r2, ip
 8016cc8:	7b04      	ldrb	r4, [r0, #12]
 8016cca:	4660      	mov	r0, ip
 8016ccc:	f10c 0c01 	add.w	ip, ip, #1
 8016cd0:	fbb2 f3f1 	udiv	r3, r2, r1
 8016cd4:	fb01 2313 	mls	r3, r1, r3, r2
 8016cd8:	fa1f f28c 	uxth.w	r2, ip
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	fb0e f303 	mul.w	r3, lr, r3
 8016ce2:	58eb      	ldr	r3, [r5, r3]
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	d101      	bne.n	8016cec <get_available_free_slots+0x38>
 8016ce8:	3001      	adds	r0, #1
 8016cea:	b280      	uxth	r0, r0
 8016cec:	428a      	cmp	r2, r1
 8016cee:	d3ed      	bcc.n	8016ccc <get_available_free_slots+0x18>
 8016cf0:	bd30      	pop	{r4, r5, pc}
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	4770      	bx	lr
 8016cf6:	bf00      	nop

08016cf8 <uxr_seq_num_add>:
 8016cf8:	4408      	add	r0, r1
 8016cfa:	b280      	uxth	r0, r0
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop

08016d00 <uxr_seq_num_sub>:
 8016d00:	1a40      	subs	r0, r0, r1
 8016d02:	b280      	uxth	r0, r0
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop

08016d08 <uxr_seq_num_cmp>:
 8016d08:	4288      	cmp	r0, r1
 8016d0a:	d011      	beq.n	8016d30 <uxr_seq_num_cmp+0x28>
 8016d0c:	d309      	bcc.n	8016d22 <uxr_seq_num_cmp+0x1a>
 8016d0e:	4288      	cmp	r0, r1
 8016d10:	d910      	bls.n	8016d34 <uxr_seq_num_cmp+0x2c>
 8016d12:	1a40      	subs	r0, r0, r1
 8016d14:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016d18:	bfd4      	ite	le
 8016d1a:	2001      	movle	r0, #1
 8016d1c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016d20:	4770      	bx	lr
 8016d22:	1a0b      	subs	r3, r1, r0
 8016d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016d28:	daf1      	bge.n	8016d0e <uxr_seq_num_cmp+0x6>
 8016d2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d2e:	4770      	bx	lr
 8016d30:	2000      	movs	r0, #0
 8016d32:	4770      	bx	lr
 8016d34:	2001      	movs	r0, #1
 8016d36:	4770      	bx	lr

08016d38 <rcl_get_default_domain_id>:
 8016d38:	b530      	push	{r4, r5, lr}
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	b083      	sub	sp, #12
 8016d3e:	9300      	str	r3, [sp, #0]
 8016d40:	b1d0      	cbz	r0, 8016d78 <rcl_get_default_domain_id+0x40>
 8016d42:	4604      	mov	r4, r0
 8016d44:	4669      	mov	r1, sp
 8016d46:	4815      	ldr	r0, [pc, #84]	@ (8016d9c <rcl_get_default_domain_id+0x64>)
 8016d48:	f7fe fa6e 	bl	8015228 <rcutils_get_env>
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	b110      	cbz	r0, 8016d56 <rcl_get_default_domain_id+0x1e>
 8016d50:	2001      	movs	r0, #1
 8016d52:	b003      	add	sp, #12
 8016d54:	bd30      	pop	{r4, r5, pc}
 8016d56:	9b00      	ldr	r3, [sp, #0]
 8016d58:	b18b      	cbz	r3, 8016d7e <rcl_get_default_domain_id+0x46>
 8016d5a:	7818      	ldrb	r0, [r3, #0]
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d0f8      	beq.n	8016d52 <rcl_get_default_domain_id+0x1a>
 8016d60:	a901      	add	r1, sp, #4
 8016d62:	4618      	mov	r0, r3
 8016d64:	9201      	str	r2, [sp, #4]
 8016d66:	f000 fd49 	bl	80177fc <strtoul>
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	b150      	cbz	r0, 8016d84 <rcl_get_default_domain_id+0x4c>
 8016d6e:	1c43      	adds	r3, r0, #1
 8016d70:	d00d      	beq.n	8016d8e <rcl_get_default_domain_id+0x56>
 8016d72:	2000      	movs	r0, #0
 8016d74:	6025      	str	r5, [r4, #0]
 8016d76:	e7ec      	b.n	8016d52 <rcl_get_default_domain_id+0x1a>
 8016d78:	200b      	movs	r0, #11
 8016d7a:	b003      	add	sp, #12
 8016d7c:	bd30      	pop	{r4, r5, pc}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	b003      	add	sp, #12
 8016d82:	bd30      	pop	{r4, r5, pc}
 8016d84:	9b01      	ldr	r3, [sp, #4]
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d0f2      	beq.n	8016d72 <rcl_get_default_domain_id+0x3a>
 8016d8c:	e7e0      	b.n	8016d50 <rcl_get_default_domain_id+0x18>
 8016d8e:	f000 ff9b 	bl	8017cc8 <__errno>
 8016d92:	6803      	ldr	r3, [r0, #0]
 8016d94:	2b22      	cmp	r3, #34	@ 0x22
 8016d96:	d1ec      	bne.n	8016d72 <rcl_get_default_domain_id+0x3a>
 8016d98:	e7da      	b.n	8016d50 <rcl_get_default_domain_id+0x18>
 8016d9a:	bf00      	nop
 8016d9c:	080194d8 	.word	0x080194d8

08016da0 <rcl_expand_topic_name>:
 8016da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da4:	b08d      	sub	sp, #52	@ 0x34
 8016da6:	4698      	mov	r8, r3
 8016da8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016daa:	9207      	str	r2, [sp, #28]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	bf18      	it	ne
 8016db0:	f1b8 0f00 	cmpne.w	r8, #0
 8016db4:	bf0c      	ite	eq
 8016db6:	2301      	moveq	r3, #1
 8016db8:	2300      	movne	r3, #0
 8016dba:	2a00      	cmp	r2, #0
 8016dbc:	bf08      	it	eq
 8016dbe:	f043 0301 	orreq.w	r3, r3, #1
 8016dc2:	2900      	cmp	r1, #0
 8016dc4:	bf08      	it	eq
 8016dc6:	f043 0301 	orreq.w	r3, r3, #1
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d13d      	bne.n	8016e4a <rcl_expand_topic_name+0xaa>
 8016dce:	fab0 f280 	clz	r2, r0
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	0952      	lsrs	r2, r2, #5
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d037      	beq.n	8016e4a <rcl_expand_topic_name+0xaa>
 8016dda:	460f      	mov	r7, r1
 8016ddc:	a90b      	add	r1, sp, #44	@ 0x2c
 8016dde:	f000 f9ed 	bl	80171bc <rcl_validate_topic_name>
 8016de2:	4605      	mov	r5, r0
 8016de4:	bb68      	cbnz	r0, 8016e42 <rcl_expand_topic_name+0xa2>
 8016de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d137      	bne.n	8016e5c <rcl_expand_topic_name+0xbc>
 8016dec:	4602      	mov	r2, r0
 8016dee:	a90b      	add	r1, sp, #44	@ 0x2c
 8016df0:	4638      	mov	r0, r7
 8016df2:	f7fe fe37 	bl	8015a64 <rmw_validate_node_name>
 8016df6:	bb68      	cbnz	r0, 8016e54 <rcl_expand_topic_name+0xb4>
 8016df8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d133      	bne.n	8016e66 <rcl_expand_topic_name+0xc6>
 8016dfe:	462a      	mov	r2, r5
 8016e00:	a90b      	add	r1, sp, #44	@ 0x2c
 8016e02:	9807      	ldr	r0, [sp, #28]
 8016e04:	f7fe fe10 	bl	8015a28 <rmw_validate_namespace>
 8016e08:	bb20      	cbnz	r0, 8016e54 <rcl_expand_topic_name+0xb4>
 8016e0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016e0c:	2d00      	cmp	r5, #0
 8016e0e:	f040 80a2 	bne.w	8016f56 <rcl_expand_topic_name+0x1b6>
 8016e12:	217b      	movs	r1, #123	@ 0x7b
 8016e14:	4620      	mov	r0, r4
 8016e16:	f000 fe75 	bl	8017b04 <strchr>
 8016e1a:	7823      	ldrb	r3, [r4, #0]
 8016e1c:	4681      	mov	r9, r0
 8016e1e:	bb20      	cbnz	r0, 8016e6a <rcl_expand_topic_name+0xca>
 8016e20:	2b2f      	cmp	r3, #47	@ 0x2f
 8016e22:	d122      	bne.n	8016e6a <rcl_expand_topic_name+0xca>
 8016e24:	ab19      	add	r3, sp, #100	@ 0x64
 8016e26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e2a:	ab16      	add	r3, sp, #88	@ 0x58
 8016e2c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e30:	4620      	mov	r0, r4
 8016e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016e34:	f7fe fb5a 	bl	80154ec <rcutils_strdup>
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016e3c:	bf08      	it	eq
 8016e3e:	250a      	moveq	r5, #10
 8016e40:	6018      	str	r0, [r3, #0]
 8016e42:	4628      	mov	r0, r5
 8016e44:	b00d      	add	sp, #52	@ 0x34
 8016e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e4a:	250b      	movs	r5, #11
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	b00d      	add	sp, #52	@ 0x34
 8016e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e54:	f7fd fb78 	bl	8014548 <rcl_convert_rmw_ret_to_rcl_ret>
 8016e58:	4605      	mov	r5, r0
 8016e5a:	e7f2      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016e5c:	2567      	movs	r5, #103	@ 0x67
 8016e5e:	4628      	mov	r0, r5
 8016e60:	b00d      	add	sp, #52	@ 0x34
 8016e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e66:	25c9      	movs	r5, #201	@ 0xc9
 8016e68:	e7eb      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016e6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8016e6c:	d075      	beq.n	8016f5a <rcl_expand_topic_name+0x1ba>
 8016e6e:	f1b9 0f00 	cmp.w	r9, #0
 8016e72:	f000 80c2 	beq.w	8016ffa <rcl_expand_topic_name+0x25a>
 8016e76:	2300      	movs	r3, #0
 8016e78:	46a2      	mov	sl, r4
 8016e7a:	461e      	mov	r6, r3
 8016e7c:	9508      	str	r5, [sp, #32]
 8016e7e:	4655      	mov	r5, sl
 8016e80:	9409      	str	r4, [sp, #36]	@ 0x24
 8016e82:	46b2      	mov	sl, r6
 8016e84:	464c      	mov	r4, r9
 8016e86:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016e8a:	2c00      	cmp	r4, #0
 8016e8c:	f000 80ae 	beq.w	8016fec <rcl_expand_topic_name+0x24c>
 8016e90:	217d      	movs	r1, #125	@ 0x7d
 8016e92:	4628      	mov	r0, r5
 8016e94:	f000 fe36 	bl	8017b04 <strchr>
 8016e98:	eba0 0904 	sub.w	r9, r0, r4
 8016e9c:	4621      	mov	r1, r4
 8016e9e:	4869      	ldr	r0, [pc, #420]	@ (8017044 <rcl_expand_topic_name+0x2a4>)
 8016ea0:	f109 0601 	add.w	r6, r9, #1
 8016ea4:	4632      	mov	r2, r6
 8016ea6:	f000 fe3a 	bl	8017b1e <strncmp>
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	d051      	beq.n	8016f52 <rcl_expand_topic_name+0x1b2>
 8016eae:	4632      	mov	r2, r6
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	4865      	ldr	r0, [pc, #404]	@ (8017048 <rcl_expand_topic_name+0x2a8>)
 8016eb4:	f000 fe33 	bl	8017b1e <strncmp>
 8016eb8:	b128      	cbz	r0, 8016ec6 <rcl_expand_topic_name+0x126>
 8016eba:	4632      	mov	r2, r6
 8016ebc:	4621      	mov	r1, r4
 8016ebe:	4863      	ldr	r0, [pc, #396]	@ (801704c <rcl_expand_topic_name+0x2ac>)
 8016ec0:	f000 fe2d 	bl	8017b1e <strncmp>
 8016ec4:	bb38      	cbnz	r0, 8016f16 <rcl_expand_topic_name+0x176>
 8016ec6:	46d9      	mov	r9, fp
 8016ec8:	ab18      	add	r3, sp, #96	@ 0x60
 8016eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ece:	ab16      	add	r3, sp, #88	@ 0x58
 8016ed0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	4631      	mov	r1, r6
 8016ed8:	cb0c      	ldmia	r3, {r2, r3}
 8016eda:	f7fe fb29 	bl	8015530 <rcutils_strndup>
 8016ede:	4604      	mov	r4, r0
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	f000 80a3 	beq.w	801702c <rcl_expand_topic_name+0x28c>
 8016ee6:	464a      	mov	r2, r9
 8016ee8:	4628      	mov	r0, r5
 8016eea:	ab16      	add	r3, sp, #88	@ 0x58
 8016eec:	4621      	mov	r1, r4
 8016eee:	f7fe f9fd 	bl	80152ec <rcutils_repl_str>
 8016ef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016ef4:	4605      	mov	r5, r0
 8016ef6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016ef8:	4620      	mov	r0, r4
 8016efa:	4798      	blx	r3
 8016efc:	4650      	mov	r0, sl
 8016efe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f02:	4798      	blx	r3
 8016f04:	2d00      	cmp	r5, #0
 8016f06:	d06c      	beq.n	8016fe2 <rcl_expand_topic_name+0x242>
 8016f08:	217b      	movs	r1, #123	@ 0x7b
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f000 fdfa 	bl	8017b04 <strchr>
 8016f10:	46aa      	mov	sl, r5
 8016f12:	4604      	mov	r4, r0
 8016f14:	e7b9      	b.n	8016e8a <rcl_expand_topic_name+0xea>
 8016f16:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016f1a:	1c61      	adds	r1, r4, #1
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	f7fe fc1f 	bl	8015760 <rcutils_string_map_getn>
 8016f22:	4681      	mov	r9, r0
 8016f24:	2800      	cmp	r0, #0
 8016f26:	d1cf      	bne.n	8016ec8 <rcl_expand_topic_name+0x128>
 8016f28:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016f2a:	aa18      	add	r2, sp, #96	@ 0x60
 8016f2c:	2569      	movs	r5, #105	@ 0x69
 8016f2e:	6018      	str	r0, [r3, #0]
 8016f30:	ab16      	add	r3, sp, #88	@ 0x58
 8016f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8016f34:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f38:	4631      	mov	r1, r6
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	cb0c      	ldmia	r3, {r2, r3}
 8016f3e:	f7fe faf7 	bl	8015530 <rcutils_strndup>
 8016f42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f46:	4798      	blx	r3
 8016f48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f4c:	4650      	mov	r0, sl
 8016f4e:	4798      	blx	r3
 8016f50:	e777      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016f52:	46b9      	mov	r9, r7
 8016f54:	e7b8      	b.n	8016ec8 <rcl_expand_topic_name+0x128>
 8016f56:	25ca      	movs	r5, #202	@ 0xca
 8016f58:	e773      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016f5a:	9e07      	ldr	r6, [sp, #28]
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	f7e9 f9c9 	bl	80002f4 <strlen>
 8016f62:	4a3b      	ldr	r2, [pc, #236]	@ (8017050 <rcl_expand_topic_name+0x2b0>)
 8016f64:	4b3b      	ldr	r3, [pc, #236]	@ (8017054 <rcl_expand_topic_name+0x2b4>)
 8016f66:	9603      	str	r6, [sp, #12]
 8016f68:	2801      	cmp	r0, #1
 8016f6a:	bf18      	it	ne
 8016f6c:	4613      	movne	r3, r2
 8016f6e:	9704      	str	r7, [sp, #16]
 8016f70:	9302      	str	r3, [sp, #8]
 8016f72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	1c63      	adds	r3, r4, #1
 8016f78:	9305      	str	r3, [sp, #20]
 8016f7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016f7e:	9301      	str	r3, [sp, #4]
 8016f80:	ab16      	add	r3, sp, #88	@ 0x58
 8016f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f84:	f7fe f978 	bl	8015278 <rcutils_format_string_limit>
 8016f88:	4606      	mov	r6, r0
 8016f8a:	b350      	cbz	r0, 8016fe2 <rcl_expand_topic_name+0x242>
 8016f8c:	f1b9 0f00 	cmp.w	r9, #0
 8016f90:	d005      	beq.n	8016f9e <rcl_expand_topic_name+0x1fe>
 8016f92:	217b      	movs	r1, #123	@ 0x7b
 8016f94:	46b2      	mov	sl, r6
 8016f96:	f000 fdb5 	bl	8017b04 <strchr>
 8016f9a:	4681      	mov	r9, r0
 8016f9c:	e76e      	b.n	8016e7c <rcl_expand_topic_name+0xdc>
 8016f9e:	7833      	ldrb	r3, [r6, #0]
 8016fa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8016fa2:	d01b      	beq.n	8016fdc <rcl_expand_topic_name+0x23c>
 8016fa4:	9c07      	ldr	r4, [sp, #28]
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f7e9 f9a4 	bl	80002f4 <strlen>
 8016fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016fb0:	4a29      	ldr	r2, [pc, #164]	@ (8017058 <rcl_expand_topic_name+0x2b8>)
 8016fb2:	9301      	str	r3, [sp, #4]
 8016fb4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016fb6:	9604      	str	r6, [sp, #16]
 8016fb8:	9300      	str	r3, [sp, #0]
 8016fba:	4b28      	ldr	r3, [pc, #160]	@ (801705c <rcl_expand_topic_name+0x2bc>)
 8016fbc:	9403      	str	r4, [sp, #12]
 8016fbe:	2801      	cmp	r0, #1
 8016fc0:	bf18      	it	ne
 8016fc2:	4613      	movne	r3, r2
 8016fc4:	9302      	str	r3, [sp, #8]
 8016fc6:	ab16      	add	r3, sp, #88	@ 0x58
 8016fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fca:	f7fe f955 	bl	8015278 <rcutils_format_string_limit>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016fd6:	461e      	mov	r6, r3
 8016fd8:	4790      	blx	r2
 8016fda:	b116      	cbz	r6, 8016fe2 <rcl_expand_topic_name+0x242>
 8016fdc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016fde:	601e      	str	r6, [r3, #0]
 8016fe0:	e72f      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016fe6:	250a      	movs	r5, #10
 8016fe8:	6013      	str	r3, [r2, #0]
 8016fea:	e72a      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 8016fec:	4653      	mov	r3, sl
 8016fee:	4656      	mov	r6, sl
 8016ff0:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d1d2      	bne.n	8016f9e <rcl_expand_topic_name+0x1fe>
 8016ff8:	7823      	ldrb	r3, [r4, #0]
 8016ffa:	2b2f      	cmp	r3, #47	@ 0x2f
 8016ffc:	d01e      	beq.n	801703c <rcl_expand_topic_name+0x29c>
 8016ffe:	9e07      	ldr	r6, [sp, #28]
 8017000:	4630      	mov	r0, r6
 8017002:	f7e9 f977 	bl	80002f4 <strlen>
 8017006:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017008:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801700c:	9603      	str	r6, [sp, #12]
 801700e:	9404      	str	r4, [sp, #16]
 8017010:	e9cd 2300 	strd	r2, r3, [sp]
 8017014:	4a10      	ldr	r2, [pc, #64]	@ (8017058 <rcl_expand_topic_name+0x2b8>)
 8017016:	4b11      	ldr	r3, [pc, #68]	@ (801705c <rcl_expand_topic_name+0x2bc>)
 8017018:	2801      	cmp	r0, #1
 801701a:	bf18      	it	ne
 801701c:	4613      	movne	r3, r2
 801701e:	9302      	str	r3, [sp, #8]
 8017020:	ab16      	add	r3, sp, #88	@ 0x58
 8017022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017024:	f7fe f928 	bl	8015278 <rcutils_format_string_limit>
 8017028:	4606      	mov	r6, r0
 801702a:	e7d6      	b.n	8016fda <rcl_expand_topic_name+0x23a>
 801702c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8017030:	4650      	mov	r0, sl
 8017032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017034:	6014      	str	r4, [r2, #0]
 8017036:	250a      	movs	r5, #10
 8017038:	4798      	blx	r3
 801703a:	e702      	b.n	8016e42 <rcl_expand_topic_name+0xa2>
 801703c:	2300      	movs	r3, #0
 801703e:	461e      	mov	r6, r3
 8017040:	e7cc      	b.n	8016fdc <rcl_expand_topic_name+0x23c>
 8017042:	bf00      	nop
 8017044:	080194f0 	.word	0x080194f0
 8017048:	080194f8 	.word	0x080194f8
 801704c:	08019500 	.word	0x08019500
 8017050:	080194e8 	.word	0x080194e8
 8017054:	08018cdc 	.word	0x08018cdc
 8017058:	08018ca4 	.word	0x08018ca4
 801705c:	08018cec 	.word	0x08018cec

08017060 <rcl_get_default_topic_name_substitutions>:
 8017060:	2800      	cmp	r0, #0
 8017062:	bf0c      	ite	eq
 8017064:	200b      	moveq	r0, #11
 8017066:	2000      	movne	r0, #0
 8017068:	4770      	bx	lr
 801706a:	bf00      	nop

0801706c <rcl_get_zero_initialized_guard_condition>:
 801706c:	4a03      	ldr	r2, [pc, #12]	@ (801707c <rcl_get_zero_initialized_guard_condition+0x10>)
 801706e:	4603      	mov	r3, r0
 8017070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017074:	e883 0003 	stmia.w	r3, {r0, r1}
 8017078:	4618      	mov	r0, r3
 801707a:	4770      	bx	lr
 801707c:	0801950c 	.word	0x0801950c

08017080 <rcl_guard_condition_init_from_rmw>:
 8017080:	b082      	sub	sp, #8
 8017082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017086:	b086      	sub	sp, #24
 8017088:	4604      	mov	r4, r0
 801708a:	460e      	mov	r6, r1
 801708c:	4615      	mov	r5, r2
 801708e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017092:	f10d 0e04 	add.w	lr, sp, #4
 8017096:	f84c 3f04 	str.w	r3, [ip, #4]!
 801709a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801709e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80170a2:	f8dc 3000 	ldr.w	r3, [ip]
 80170a6:	a801      	add	r0, sp, #4
 80170a8:	f8ce 3000 	str.w	r3, [lr]
 80170ac:	f7f7 fd2c 	bl	800eb08 <rcutils_allocator_is_valid>
 80170b0:	f080 0301 	eor.w	r3, r0, #1
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	bb3b      	cbnz	r3, 8017108 <rcl_guard_condition_init_from_rmw+0x88>
 80170b8:	b334      	cbz	r4, 8017108 <rcl_guard_condition_init_from_rmw+0x88>
 80170ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80170be:	f1b8 0f00 	cmp.w	r8, #0
 80170c2:	d11a      	bne.n	80170fa <rcl_guard_condition_init_from_rmw+0x7a>
 80170c4:	b305      	cbz	r5, 8017108 <rcl_guard_condition_init_from_rmw+0x88>
 80170c6:	4628      	mov	r0, r5
 80170c8:	f7fd fa5c 	bl	8014584 <rcl_context_is_valid>
 80170cc:	b1f0      	cbz	r0, 801710c <rcl_guard_condition_init_from_rmw+0x8c>
 80170ce:	9b01      	ldr	r3, [sp, #4]
 80170d0:	201c      	movs	r0, #28
 80170d2:	9905      	ldr	r1, [sp, #20]
 80170d4:	4798      	blx	r3
 80170d6:	4607      	mov	r7, r0
 80170d8:	6060      	str	r0, [r4, #4]
 80170da:	b320      	cbz	r0, 8017126 <rcl_guard_condition_init_from_rmw+0xa6>
 80170dc:	b1c6      	cbz	r6, 8017110 <rcl_guard_condition_init_from_rmw+0x90>
 80170de:	6006      	str	r6, [r0, #0]
 80170e0:	f880 8004 	strb.w	r8, [r0, #4]
 80170e4:	ac01      	add	r4, sp, #4
 80170e6:	f107 0c08 	add.w	ip, r7, #8
 80170ea:	2500      	movs	r5, #0
 80170ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170f2:	6823      	ldr	r3, [r4, #0]
 80170f4:	f8cc 3000 	str.w	r3, [ip]
 80170f8:	e000      	b.n	80170fc <rcl_guard_condition_init_from_rmw+0x7c>
 80170fa:	2564      	movs	r5, #100	@ 0x64
 80170fc:	4628      	mov	r0, r5
 80170fe:	b006      	add	sp, #24
 8017100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017104:	b002      	add	sp, #8
 8017106:	4770      	bx	lr
 8017108:	250b      	movs	r5, #11
 801710a:	e7f7      	b.n	80170fc <rcl_guard_condition_init_from_rmw+0x7c>
 801710c:	2565      	movs	r5, #101	@ 0x65
 801710e:	e7f5      	b.n	80170fc <rcl_guard_condition_init_from_rmw+0x7c>
 8017110:	6828      	ldr	r0, [r5, #0]
 8017112:	3028      	adds	r0, #40	@ 0x28
 8017114:	f000 f916 	bl	8017344 <rmw_create_guard_condition>
 8017118:	6038      	str	r0, [r7, #0]
 801711a:	6867      	ldr	r7, [r4, #4]
 801711c:	683e      	ldr	r6, [r7, #0]
 801711e:	b126      	cbz	r6, 801712a <rcl_guard_condition_init_from_rmw+0xaa>
 8017120:	2301      	movs	r3, #1
 8017122:	713b      	strb	r3, [r7, #4]
 8017124:	e7de      	b.n	80170e4 <rcl_guard_condition_init_from_rmw+0x64>
 8017126:	250a      	movs	r5, #10
 8017128:	e7e8      	b.n	80170fc <rcl_guard_condition_init_from_rmw+0x7c>
 801712a:	9b02      	ldr	r3, [sp, #8]
 801712c:	4638      	mov	r0, r7
 801712e:	9905      	ldr	r1, [sp, #20]
 8017130:	2501      	movs	r5, #1
 8017132:	4798      	blx	r3
 8017134:	6066      	str	r6, [r4, #4]
 8017136:	e7e1      	b.n	80170fc <rcl_guard_condition_init_from_rmw+0x7c>

08017138 <rcl_guard_condition_fini>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	b082      	sub	sp, #8
 801713c:	b1f0      	cbz	r0, 801717c <rcl_guard_condition_fini+0x44>
 801713e:	6843      	ldr	r3, [r0, #4]
 8017140:	4604      	mov	r4, r0
 8017142:	b163      	cbz	r3, 801715e <rcl_guard_condition_fini+0x26>
 8017144:	6818      	ldr	r0, [r3, #0]
 8017146:	68de      	ldr	r6, [r3, #12]
 8017148:	6999      	ldr	r1, [r3, #24]
 801714a:	b160      	cbz	r0, 8017166 <rcl_guard_condition_fini+0x2e>
 801714c:	791d      	ldrb	r5, [r3, #4]
 801714e:	b965      	cbnz	r5, 801716a <rcl_guard_condition_fini+0x32>
 8017150:	4618      	mov	r0, r3
 8017152:	47b0      	blx	r6
 8017154:	2300      	movs	r3, #0
 8017156:	4628      	mov	r0, r5
 8017158:	6063      	str	r3, [r4, #4]
 801715a:	b002      	add	sp, #8
 801715c:	bd70      	pop	{r4, r5, r6, pc}
 801715e:	461d      	mov	r5, r3
 8017160:	4628      	mov	r0, r5
 8017162:	b002      	add	sp, #8
 8017164:	bd70      	pop	{r4, r5, r6, pc}
 8017166:	4605      	mov	r5, r0
 8017168:	e7f2      	b.n	8017150 <rcl_guard_condition_fini+0x18>
 801716a:	9101      	str	r1, [sp, #4]
 801716c:	f000 f900 	bl	8017370 <rmw_destroy_guard_condition>
 8017170:	1e05      	subs	r5, r0, #0
 8017172:	6863      	ldr	r3, [r4, #4]
 8017174:	9901      	ldr	r1, [sp, #4]
 8017176:	bf18      	it	ne
 8017178:	2501      	movne	r5, #1
 801717a:	e7e9      	b.n	8017150 <rcl_guard_condition_fini+0x18>
 801717c:	250b      	movs	r5, #11
 801717e:	4628      	mov	r0, r5
 8017180:	b002      	add	sp, #8
 8017182:	bd70      	pop	{r4, r5, r6, pc}

08017184 <rcl_guard_condition_get_default_options>:
 8017184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017186:	b087      	sub	sp, #28
 8017188:	4606      	mov	r6, r0
 801718a:	4c0b      	ldr	r4, [pc, #44]	@ (80171b8 <rcl_guard_condition_get_default_options+0x34>)
 801718c:	4668      	mov	r0, sp
 801718e:	f7f7 fcad 	bl	800eaec <rcutils_get_default_allocator>
 8017192:	46ee      	mov	lr, sp
 8017194:	46a4      	mov	ip, r4
 8017196:	4625      	mov	r5, r4
 8017198:	4634      	mov	r4, r6
 801719a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801719e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171a4:	f8de 7000 	ldr.w	r7, [lr]
 80171a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171aa:	4630      	mov	r0, r6
 80171ac:	f8cc 7000 	str.w	r7, [ip]
 80171b0:	6027      	str	r7, [r4, #0]
 80171b2:	b007      	add	sp, #28
 80171b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171b6:	bf00      	nop
 80171b8:	24068530 	.word	0x24068530

080171bc <rcl_validate_topic_name>:
 80171bc:	2800      	cmp	r0, #0
 80171be:	f000 8089 	beq.w	80172d4 <rcl_validate_topic_name+0x118>
 80171c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c6:	460e      	mov	r6, r1
 80171c8:	2900      	cmp	r1, #0
 80171ca:	f000 8085 	beq.w	80172d8 <rcl_validate_topic_name+0x11c>
 80171ce:	4604      	mov	r4, r0
 80171d0:	4617      	mov	r7, r2
 80171d2:	f7e9 f88f 	bl	80002f4 <strlen>
 80171d6:	b1b0      	cbz	r0, 8017206 <rcl_validate_topic_name+0x4a>
 80171d8:	f894 e000 	ldrb.w	lr, [r4]
 80171dc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8017340 <rcl_validate_topic_name+0x184>
 80171e0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80171e4:	f013 0304 	ands.w	r3, r3, #4
 80171e8:	d139      	bne.n	801725e <rcl_validate_topic_name+0xa2>
 80171ea:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80171ee:	f814 2008 	ldrb.w	r2, [r4, r8]
 80171f2:	2a2f      	cmp	r2, #47	@ 0x2f
 80171f4:	d10f      	bne.n	8017216 <rcl_validate_topic_name+0x5a>
 80171f6:	2202      	movs	r2, #2
 80171f8:	6032      	str	r2, [r6, #0]
 80171fa:	b3a7      	cbz	r7, 8017266 <rcl_validate_topic_name+0xaa>
 80171fc:	4618      	mov	r0, r3
 80171fe:	f8c7 8000 	str.w	r8, [r7]
 8017202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017206:	2301      	movs	r3, #1
 8017208:	6033      	str	r3, [r6, #0]
 801720a:	b367      	cbz	r7, 8017266 <rcl_validate_topic_name+0xaa>
 801720c:	2300      	movs	r3, #0
 801720e:	4618      	mov	r0, r3
 8017210:	603b      	str	r3, [r7, #0]
 8017212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017216:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801721a:	461d      	mov	r5, r3
 801721c:	4619      	mov	r1, r3
 801721e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017222:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8017226:	f1b9 0f09 	cmp.w	r9, #9
 801722a:	d91f      	bls.n	801726c <rcl_validate_topic_name+0xb0>
 801722c:	f022 0920 	bic.w	r9, r2, #32
 8017230:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8017234:	f1b9 0f19 	cmp.w	r9, #25
 8017238:	d918      	bls.n	801726c <rcl_validate_topic_name+0xb0>
 801723a:	2a5f      	cmp	r2, #95	@ 0x5f
 801723c:	d024      	beq.n	8017288 <rcl_validate_topic_name+0xcc>
 801723e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017240:	d058      	beq.n	80172f4 <rcl_validate_topic_name+0x138>
 8017242:	2a7e      	cmp	r2, #126	@ 0x7e
 8017244:	d04a      	beq.n	80172dc <rcl_validate_topic_name+0x120>
 8017246:	2a7b      	cmp	r2, #123	@ 0x7b
 8017248:	d05b      	beq.n	8017302 <rcl_validate_topic_name+0x146>
 801724a:	2a7d      	cmp	r2, #125	@ 0x7d
 801724c:	d169      	bne.n	8017322 <rcl_validate_topic_name+0x166>
 801724e:	2d00      	cmp	r5, #0
 8017250:	d15c      	bne.n	801730c <rcl_validate_topic_name+0x150>
 8017252:	2305      	movs	r3, #5
 8017254:	6033      	str	r3, [r6, #0]
 8017256:	b137      	cbz	r7, 8017266 <rcl_validate_topic_name+0xaa>
 8017258:	2000      	movs	r0, #0
 801725a:	6039      	str	r1, [r7, #0]
 801725c:	e7d9      	b.n	8017212 <rcl_validate_topic_name+0x56>
 801725e:	2304      	movs	r3, #4
 8017260:	6033      	str	r3, [r6, #0]
 8017262:	2f00      	cmp	r7, #0
 8017264:	d1d2      	bne.n	801720c <rcl_validate_topic_name+0x50>
 8017266:	2000      	movs	r0, #0
 8017268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801726c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017270:	0752      	lsls	r2, r2, #29
 8017272:	d509      	bpl.n	8017288 <rcl_validate_topic_name+0xcc>
 8017274:	2900      	cmp	r1, #0
 8017276:	bf0c      	ite	eq
 8017278:	2200      	moveq	r2, #0
 801727a:	f005 0201 	andne.w	r2, r5, #1
 801727e:	b11a      	cbz	r2, 8017288 <rcl_validate_topic_name+0xcc>
 8017280:	1e4d      	subs	r5, r1, #1
 8017282:	429d      	cmp	r5, r3
 8017284:	d031      	beq.n	80172ea <rcl_validate_topic_name+0x12e>
 8017286:	4615      	mov	r5, r2
 8017288:	3101      	adds	r1, #1
 801728a:	4288      	cmp	r0, r1
 801728c:	d1c7      	bne.n	801721e <rcl_validate_topic_name+0x62>
 801728e:	2d00      	cmp	r5, #0
 8017290:	d142      	bne.n	8017318 <rcl_validate_topic_name+0x15c>
 8017292:	4628      	mov	r0, r5
 8017294:	2301      	movs	r3, #1
 8017296:	e00c      	b.n	80172b2 <rcl_validate_topic_name+0xf6>
 8017298:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801729c:	d101      	bne.n	80172a2 <rcl_validate_topic_name+0xe6>
 801729e:	2801      	cmp	r0, #1
 80172a0:	d047      	beq.n	8017332 <rcl_validate_topic_name+0x176>
 80172a2:	1c5a      	adds	r2, r3, #1
 80172a4:	428b      	cmp	r3, r1
 80172a6:	f100 0001 	add.w	r0, r0, #1
 80172aa:	f104 0401 	add.w	r4, r4, #1
 80172ae:	4613      	mov	r3, r2
 80172b0:	d22e      	bcs.n	8017310 <rcl_validate_topic_name+0x154>
 80172b2:	4580      	cmp	r8, r0
 80172b4:	d0f5      	beq.n	80172a2 <rcl_validate_topic_name+0xe6>
 80172b6:	7822      	ldrb	r2, [r4, #0]
 80172b8:	2a2f      	cmp	r2, #47	@ 0x2f
 80172ba:	d1ed      	bne.n	8017298 <rcl_validate_topic_name+0xdc>
 80172bc:	7862      	ldrb	r2, [r4, #1]
 80172be:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80172c2:	0752      	lsls	r2, r2, #29
 80172c4:	d5ed      	bpl.n	80172a2 <rcl_validate_topic_name+0xe6>
 80172c6:	2204      	movs	r2, #4
 80172c8:	6032      	str	r2, [r6, #0]
 80172ca:	2f00      	cmp	r7, #0
 80172cc:	d0cb      	beq.n	8017266 <rcl_validate_topic_name+0xaa>
 80172ce:	2000      	movs	r0, #0
 80172d0:	603b      	str	r3, [r7, #0]
 80172d2:	e79e      	b.n	8017212 <rcl_validate_topic_name+0x56>
 80172d4:	200b      	movs	r0, #11
 80172d6:	4770      	bx	lr
 80172d8:	200b      	movs	r0, #11
 80172da:	e79a      	b.n	8017212 <rcl_validate_topic_name+0x56>
 80172dc:	2900      	cmp	r1, #0
 80172de:	d0d3      	beq.n	8017288 <rcl_validate_topic_name+0xcc>
 80172e0:	2306      	movs	r3, #6
 80172e2:	6033      	str	r3, [r6, #0]
 80172e4:	2f00      	cmp	r7, #0
 80172e6:	d1b7      	bne.n	8017258 <rcl_validate_topic_name+0x9c>
 80172e8:	e7bd      	b.n	8017266 <rcl_validate_topic_name+0xaa>
 80172ea:	2309      	movs	r3, #9
 80172ec:	6033      	str	r3, [r6, #0]
 80172ee:	2f00      	cmp	r7, #0
 80172f0:	d1b2      	bne.n	8017258 <rcl_validate_topic_name+0x9c>
 80172f2:	e7b8      	b.n	8017266 <rcl_validate_topic_name+0xaa>
 80172f4:	2d00      	cmp	r5, #0
 80172f6:	d0c7      	beq.n	8017288 <rcl_validate_topic_name+0xcc>
 80172f8:	2308      	movs	r3, #8
 80172fa:	6033      	str	r3, [r6, #0]
 80172fc:	2f00      	cmp	r7, #0
 80172fe:	d1ab      	bne.n	8017258 <rcl_validate_topic_name+0x9c>
 8017300:	e7b1      	b.n	8017266 <rcl_validate_topic_name+0xaa>
 8017302:	2d00      	cmp	r5, #0
 8017304:	d1f8      	bne.n	80172f8 <rcl_validate_topic_name+0x13c>
 8017306:	460b      	mov	r3, r1
 8017308:	2501      	movs	r5, #1
 801730a:	e7bd      	b.n	8017288 <rcl_validate_topic_name+0xcc>
 801730c:	2500      	movs	r5, #0
 801730e:	e7bb      	b.n	8017288 <rcl_validate_topic_name+0xcc>
 8017310:	2300      	movs	r3, #0
 8017312:	4618      	mov	r0, r3
 8017314:	6033      	str	r3, [r6, #0]
 8017316:	e77c      	b.n	8017212 <rcl_validate_topic_name+0x56>
 8017318:	2205      	movs	r2, #5
 801731a:	6032      	str	r2, [r6, #0]
 801731c:	2f00      	cmp	r7, #0
 801731e:	d1d6      	bne.n	80172ce <rcl_validate_topic_name+0x112>
 8017320:	e7a1      	b.n	8017266 <rcl_validate_topic_name+0xaa>
 8017322:	2d00      	cmp	r5, #0
 8017324:	bf14      	ite	ne
 8017326:	2308      	movne	r3, #8
 8017328:	2303      	moveq	r3, #3
 801732a:	6033      	str	r3, [r6, #0]
 801732c:	2f00      	cmp	r7, #0
 801732e:	d193      	bne.n	8017258 <rcl_validate_topic_name+0x9c>
 8017330:	e799      	b.n	8017266 <rcl_validate_topic_name+0xaa>
 8017332:	2307      	movs	r3, #7
 8017334:	6033      	str	r3, [r6, #0]
 8017336:	2f00      	cmp	r7, #0
 8017338:	d095      	beq.n	8017266 <rcl_validate_topic_name+0xaa>
 801733a:	2301      	movs	r3, #1
 801733c:	e7c7      	b.n	80172ce <rcl_validate_topic_name+0x112>
 801733e:	bf00      	nop
 8017340:	08019584 	.word	0x08019584

08017344 <rmw_create_guard_condition>:
 8017344:	b538      	push	{r3, r4, r5, lr}
 8017346:	4605      	mov	r5, r0
 8017348:	4808      	ldr	r0, [pc, #32]	@ (801736c <rmw_create_guard_condition+0x28>)
 801734a:	f7fe fcd3 	bl	8015cf4 <get_memory>
 801734e:	4603      	mov	r3, r0
 8017350:	b148      	cbz	r0, 8017366 <rmw_create_guard_condition+0x22>
 8017352:	6884      	ldr	r4, [r0, #8]
 8017354:	2300      	movs	r3, #0
 8017356:	61e5      	str	r5, [r4, #28]
 8017358:	7423      	strb	r3, [r4, #16]
 801735a:	f7fe fd33 	bl	8015dc4 <rmw_get_implementation_identifier>
 801735e:	f104 0314 	add.w	r3, r4, #20
 8017362:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017366:	4618      	mov	r0, r3
 8017368:	bd38      	pop	{r3, r4, r5, pc}
 801736a:	bf00      	nop
 801736c:	240683cc 	.word	0x240683cc

08017370 <rmw_destroy_guard_condition>:
 8017370:	b508      	push	{r3, lr}
 8017372:	4b08      	ldr	r3, [pc, #32]	@ (8017394 <rmw_destroy_guard_condition+0x24>)
 8017374:	6819      	ldr	r1, [r3, #0]
 8017376:	b911      	cbnz	r1, 801737e <rmw_destroy_guard_condition+0xe>
 8017378:	e00a      	b.n	8017390 <rmw_destroy_guard_condition+0x20>
 801737a:	6849      	ldr	r1, [r1, #4]
 801737c:	b141      	cbz	r1, 8017390 <rmw_destroy_guard_condition+0x20>
 801737e:	688b      	ldr	r3, [r1, #8]
 8017380:	3314      	adds	r3, #20
 8017382:	4298      	cmp	r0, r3
 8017384:	d1f9      	bne.n	801737a <rmw_destroy_guard_condition+0xa>
 8017386:	4803      	ldr	r0, [pc, #12]	@ (8017394 <rmw_destroy_guard_condition+0x24>)
 8017388:	f7fe fcc4 	bl	8015d14 <put_memory>
 801738c:	2000      	movs	r0, #0
 801738e:	bd08      	pop	{r3, pc}
 8017390:	2001      	movs	r0, #1
 8017392:	bd08      	pop	{r3, pc}
 8017394:	240683cc 	.word	0x240683cc

08017398 <calloc>:
 8017398:	4b02      	ldr	r3, [pc, #8]	@ (80173a4 <calloc+0xc>)
 801739a:	460a      	mov	r2, r1
 801739c:	4601      	mov	r1, r0
 801739e:	6818      	ldr	r0, [r3, #0]
 80173a0:	f000 b802 	b.w	80173a8 <_calloc_r>
 80173a4:	240000c4 	.word	0x240000c4

080173a8 <_calloc_r>:
 80173a8:	b570      	push	{r4, r5, r6, lr}
 80173aa:	fba1 5402 	umull	r5, r4, r1, r2
 80173ae:	b93c      	cbnz	r4, 80173c0 <_calloc_r+0x18>
 80173b0:	4629      	mov	r1, r5
 80173b2:	f000 f887 	bl	80174c4 <_malloc_r>
 80173b6:	4606      	mov	r6, r0
 80173b8:	b928      	cbnz	r0, 80173c6 <_calloc_r+0x1e>
 80173ba:	2600      	movs	r6, #0
 80173bc:	4630      	mov	r0, r6
 80173be:	bd70      	pop	{r4, r5, r6, pc}
 80173c0:	220c      	movs	r2, #12
 80173c2:	6002      	str	r2, [r0, #0]
 80173c4:	e7f9      	b.n	80173ba <_calloc_r+0x12>
 80173c6:	462a      	mov	r2, r5
 80173c8:	4621      	mov	r1, r4
 80173ca:	f000 fb93 	bl	8017af4 <memset>
 80173ce:	e7f5      	b.n	80173bc <_calloc_r+0x14>

080173d0 <getenv>:
 80173d0:	b507      	push	{r0, r1, r2, lr}
 80173d2:	4b04      	ldr	r3, [pc, #16]	@ (80173e4 <getenv+0x14>)
 80173d4:	4601      	mov	r1, r0
 80173d6:	aa01      	add	r2, sp, #4
 80173d8:	6818      	ldr	r0, [r3, #0]
 80173da:	f000 f805 	bl	80173e8 <_findenv_r>
 80173de:	b003      	add	sp, #12
 80173e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80173e4:	240000c4 	.word	0x240000c4

080173e8 <_findenv_r>:
 80173e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ec:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801745c <_findenv_r+0x74>
 80173f0:	4606      	mov	r6, r0
 80173f2:	4689      	mov	r9, r1
 80173f4:	4617      	mov	r7, r2
 80173f6:	f000 fcc9 	bl	8017d8c <__env_lock>
 80173fa:	f8da 4000 	ldr.w	r4, [sl]
 80173fe:	b134      	cbz	r4, 801740e <_findenv_r+0x26>
 8017400:	464b      	mov	r3, r9
 8017402:	4698      	mov	r8, r3
 8017404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017408:	b13a      	cbz	r2, 801741a <_findenv_r+0x32>
 801740a:	2a3d      	cmp	r2, #61	@ 0x3d
 801740c:	d1f9      	bne.n	8017402 <_findenv_r+0x1a>
 801740e:	4630      	mov	r0, r6
 8017410:	f000 fcc2 	bl	8017d98 <__env_unlock>
 8017414:	2000      	movs	r0, #0
 8017416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801741a:	eba8 0809 	sub.w	r8, r8, r9
 801741e:	46a3      	mov	fp, r4
 8017420:	f854 0b04 	ldr.w	r0, [r4], #4
 8017424:	2800      	cmp	r0, #0
 8017426:	d0f2      	beq.n	801740e <_findenv_r+0x26>
 8017428:	4642      	mov	r2, r8
 801742a:	4649      	mov	r1, r9
 801742c:	f000 fb77 	bl	8017b1e <strncmp>
 8017430:	2800      	cmp	r0, #0
 8017432:	d1f4      	bne.n	801741e <_findenv_r+0x36>
 8017434:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017438:	eb03 0508 	add.w	r5, r3, r8
 801743c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017440:	2b3d      	cmp	r3, #61	@ 0x3d
 8017442:	d1ec      	bne.n	801741e <_findenv_r+0x36>
 8017444:	f8da 3000 	ldr.w	r3, [sl]
 8017448:	ebab 0303 	sub.w	r3, fp, r3
 801744c:	109b      	asrs	r3, r3, #2
 801744e:	4630      	mov	r0, r6
 8017450:	603b      	str	r3, [r7, #0]
 8017452:	f000 fca1 	bl	8017d98 <__env_unlock>
 8017456:	1c68      	adds	r0, r5, #1
 8017458:	e7dd      	b.n	8017416 <_findenv_r+0x2e>
 801745a:	bf00      	nop
 801745c:	24000000 	.word	0x24000000

08017460 <malloc>:
 8017460:	4b02      	ldr	r3, [pc, #8]	@ (801746c <malloc+0xc>)
 8017462:	4601      	mov	r1, r0
 8017464:	6818      	ldr	r0, [r3, #0]
 8017466:	f000 b82d 	b.w	80174c4 <_malloc_r>
 801746a:	bf00      	nop
 801746c:	240000c4 	.word	0x240000c4

08017470 <free>:
 8017470:	4b02      	ldr	r3, [pc, #8]	@ (801747c <free+0xc>)
 8017472:	4601      	mov	r1, r0
 8017474:	6818      	ldr	r0, [r3, #0]
 8017476:	f000 bc95 	b.w	8017da4 <_free_r>
 801747a:	bf00      	nop
 801747c:	240000c4 	.word	0x240000c4

08017480 <sbrk_aligned>:
 8017480:	b570      	push	{r4, r5, r6, lr}
 8017482:	4e0f      	ldr	r6, [pc, #60]	@ (80174c0 <sbrk_aligned+0x40>)
 8017484:	460c      	mov	r4, r1
 8017486:	6831      	ldr	r1, [r6, #0]
 8017488:	4605      	mov	r5, r0
 801748a:	b911      	cbnz	r1, 8017492 <sbrk_aligned+0x12>
 801748c:	f000 fbfa 	bl	8017c84 <_sbrk_r>
 8017490:	6030      	str	r0, [r6, #0]
 8017492:	4621      	mov	r1, r4
 8017494:	4628      	mov	r0, r5
 8017496:	f000 fbf5 	bl	8017c84 <_sbrk_r>
 801749a:	1c43      	adds	r3, r0, #1
 801749c:	d103      	bne.n	80174a6 <sbrk_aligned+0x26>
 801749e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80174a2:	4620      	mov	r0, r4
 80174a4:	bd70      	pop	{r4, r5, r6, pc}
 80174a6:	1cc4      	adds	r4, r0, #3
 80174a8:	f024 0403 	bic.w	r4, r4, #3
 80174ac:	42a0      	cmp	r0, r4
 80174ae:	d0f8      	beq.n	80174a2 <sbrk_aligned+0x22>
 80174b0:	1a21      	subs	r1, r4, r0
 80174b2:	4628      	mov	r0, r5
 80174b4:	f000 fbe6 	bl	8017c84 <_sbrk_r>
 80174b8:	3001      	adds	r0, #1
 80174ba:	d1f2      	bne.n	80174a2 <sbrk_aligned+0x22>
 80174bc:	e7ef      	b.n	801749e <sbrk_aligned+0x1e>
 80174be:	bf00      	nop
 80174c0:	24068544 	.word	0x24068544

080174c4 <_malloc_r>:
 80174c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174c8:	1ccd      	adds	r5, r1, #3
 80174ca:	f025 0503 	bic.w	r5, r5, #3
 80174ce:	3508      	adds	r5, #8
 80174d0:	2d0c      	cmp	r5, #12
 80174d2:	bf38      	it	cc
 80174d4:	250c      	movcc	r5, #12
 80174d6:	2d00      	cmp	r5, #0
 80174d8:	4606      	mov	r6, r0
 80174da:	db01      	blt.n	80174e0 <_malloc_r+0x1c>
 80174dc:	42a9      	cmp	r1, r5
 80174de:	d904      	bls.n	80174ea <_malloc_r+0x26>
 80174e0:	230c      	movs	r3, #12
 80174e2:	6033      	str	r3, [r6, #0]
 80174e4:	2000      	movs	r0, #0
 80174e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80175c0 <_malloc_r+0xfc>
 80174ee:	f000 f869 	bl	80175c4 <__malloc_lock>
 80174f2:	f8d8 3000 	ldr.w	r3, [r8]
 80174f6:	461c      	mov	r4, r3
 80174f8:	bb44      	cbnz	r4, 801754c <_malloc_r+0x88>
 80174fa:	4629      	mov	r1, r5
 80174fc:	4630      	mov	r0, r6
 80174fe:	f7ff ffbf 	bl	8017480 <sbrk_aligned>
 8017502:	1c43      	adds	r3, r0, #1
 8017504:	4604      	mov	r4, r0
 8017506:	d158      	bne.n	80175ba <_malloc_r+0xf6>
 8017508:	f8d8 4000 	ldr.w	r4, [r8]
 801750c:	4627      	mov	r7, r4
 801750e:	2f00      	cmp	r7, #0
 8017510:	d143      	bne.n	801759a <_malloc_r+0xd6>
 8017512:	2c00      	cmp	r4, #0
 8017514:	d04b      	beq.n	80175ae <_malloc_r+0xea>
 8017516:	6823      	ldr	r3, [r4, #0]
 8017518:	4639      	mov	r1, r7
 801751a:	4630      	mov	r0, r6
 801751c:	eb04 0903 	add.w	r9, r4, r3
 8017520:	f000 fbb0 	bl	8017c84 <_sbrk_r>
 8017524:	4581      	cmp	r9, r0
 8017526:	d142      	bne.n	80175ae <_malloc_r+0xea>
 8017528:	6821      	ldr	r1, [r4, #0]
 801752a:	1a6d      	subs	r5, r5, r1
 801752c:	4629      	mov	r1, r5
 801752e:	4630      	mov	r0, r6
 8017530:	f7ff ffa6 	bl	8017480 <sbrk_aligned>
 8017534:	3001      	adds	r0, #1
 8017536:	d03a      	beq.n	80175ae <_malloc_r+0xea>
 8017538:	6823      	ldr	r3, [r4, #0]
 801753a:	442b      	add	r3, r5
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	f8d8 3000 	ldr.w	r3, [r8]
 8017542:	685a      	ldr	r2, [r3, #4]
 8017544:	bb62      	cbnz	r2, 80175a0 <_malloc_r+0xdc>
 8017546:	f8c8 7000 	str.w	r7, [r8]
 801754a:	e00f      	b.n	801756c <_malloc_r+0xa8>
 801754c:	6822      	ldr	r2, [r4, #0]
 801754e:	1b52      	subs	r2, r2, r5
 8017550:	d420      	bmi.n	8017594 <_malloc_r+0xd0>
 8017552:	2a0b      	cmp	r2, #11
 8017554:	d917      	bls.n	8017586 <_malloc_r+0xc2>
 8017556:	1961      	adds	r1, r4, r5
 8017558:	42a3      	cmp	r3, r4
 801755a:	6025      	str	r5, [r4, #0]
 801755c:	bf18      	it	ne
 801755e:	6059      	strne	r1, [r3, #4]
 8017560:	6863      	ldr	r3, [r4, #4]
 8017562:	bf08      	it	eq
 8017564:	f8c8 1000 	streq.w	r1, [r8]
 8017568:	5162      	str	r2, [r4, r5]
 801756a:	604b      	str	r3, [r1, #4]
 801756c:	4630      	mov	r0, r6
 801756e:	f000 f82f 	bl	80175d0 <__malloc_unlock>
 8017572:	f104 000b 	add.w	r0, r4, #11
 8017576:	1d23      	adds	r3, r4, #4
 8017578:	f020 0007 	bic.w	r0, r0, #7
 801757c:	1ac2      	subs	r2, r0, r3
 801757e:	bf1c      	itt	ne
 8017580:	1a1b      	subne	r3, r3, r0
 8017582:	50a3      	strne	r3, [r4, r2]
 8017584:	e7af      	b.n	80174e6 <_malloc_r+0x22>
 8017586:	6862      	ldr	r2, [r4, #4]
 8017588:	42a3      	cmp	r3, r4
 801758a:	bf0c      	ite	eq
 801758c:	f8c8 2000 	streq.w	r2, [r8]
 8017590:	605a      	strne	r2, [r3, #4]
 8017592:	e7eb      	b.n	801756c <_malloc_r+0xa8>
 8017594:	4623      	mov	r3, r4
 8017596:	6864      	ldr	r4, [r4, #4]
 8017598:	e7ae      	b.n	80174f8 <_malloc_r+0x34>
 801759a:	463c      	mov	r4, r7
 801759c:	687f      	ldr	r7, [r7, #4]
 801759e:	e7b6      	b.n	801750e <_malloc_r+0x4a>
 80175a0:	461a      	mov	r2, r3
 80175a2:	685b      	ldr	r3, [r3, #4]
 80175a4:	42a3      	cmp	r3, r4
 80175a6:	d1fb      	bne.n	80175a0 <_malloc_r+0xdc>
 80175a8:	2300      	movs	r3, #0
 80175aa:	6053      	str	r3, [r2, #4]
 80175ac:	e7de      	b.n	801756c <_malloc_r+0xa8>
 80175ae:	230c      	movs	r3, #12
 80175b0:	6033      	str	r3, [r6, #0]
 80175b2:	4630      	mov	r0, r6
 80175b4:	f000 f80c 	bl	80175d0 <__malloc_unlock>
 80175b8:	e794      	b.n	80174e4 <_malloc_r+0x20>
 80175ba:	6005      	str	r5, [r0, #0]
 80175bc:	e7d6      	b.n	801756c <_malloc_r+0xa8>
 80175be:	bf00      	nop
 80175c0:	24068548 	.word	0x24068548

080175c4 <__malloc_lock>:
 80175c4:	4801      	ldr	r0, [pc, #4]	@ (80175cc <__malloc_lock+0x8>)
 80175c6:	f000 bbaa 	b.w	8017d1e <__retarget_lock_acquire_recursive>
 80175ca:	bf00      	nop
 80175cc:	2406868d 	.word	0x2406868d

080175d0 <__malloc_unlock>:
 80175d0:	4801      	ldr	r0, [pc, #4]	@ (80175d8 <__malloc_unlock+0x8>)
 80175d2:	f000 bba5 	b.w	8017d20 <__retarget_lock_release_recursive>
 80175d6:	bf00      	nop
 80175d8:	2406868d 	.word	0x2406868d

080175dc <srand>:
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4b10      	ldr	r3, [pc, #64]	@ (8017620 <srand+0x44>)
 80175e0:	681d      	ldr	r5, [r3, #0]
 80175e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175e4:	4604      	mov	r4, r0
 80175e6:	b9b3      	cbnz	r3, 8017616 <srand+0x3a>
 80175e8:	2018      	movs	r0, #24
 80175ea:	f7ff ff39 	bl	8017460 <malloc>
 80175ee:	4602      	mov	r2, r0
 80175f0:	6328      	str	r0, [r5, #48]	@ 0x30
 80175f2:	b920      	cbnz	r0, 80175fe <srand+0x22>
 80175f4:	4b0b      	ldr	r3, [pc, #44]	@ (8017624 <srand+0x48>)
 80175f6:	480c      	ldr	r0, [pc, #48]	@ (8017628 <srand+0x4c>)
 80175f8:	2146      	movs	r1, #70	@ 0x46
 80175fa:	f000 fba9 	bl	8017d50 <__assert_func>
 80175fe:	490b      	ldr	r1, [pc, #44]	@ (801762c <srand+0x50>)
 8017600:	4b0b      	ldr	r3, [pc, #44]	@ (8017630 <srand+0x54>)
 8017602:	e9c0 1300 	strd	r1, r3, [r0]
 8017606:	4b0b      	ldr	r3, [pc, #44]	@ (8017634 <srand+0x58>)
 8017608:	6083      	str	r3, [r0, #8]
 801760a:	230b      	movs	r3, #11
 801760c:	8183      	strh	r3, [r0, #12]
 801760e:	2100      	movs	r1, #0
 8017610:	2001      	movs	r0, #1
 8017612:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017616:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017618:	2200      	movs	r2, #0
 801761a:	611c      	str	r4, [r3, #16]
 801761c:	615a      	str	r2, [r3, #20]
 801761e:	bd38      	pop	{r3, r4, r5, pc}
 8017620:	240000c4 	.word	0x240000c4
 8017624:	08019514 	.word	0x08019514
 8017628:	0801952b 	.word	0x0801952b
 801762c:	abcd330e 	.word	0xabcd330e
 8017630:	e66d1234 	.word	0xe66d1234
 8017634:	0005deec 	.word	0x0005deec

08017638 <rand>:
 8017638:	4b16      	ldr	r3, [pc, #88]	@ (8017694 <rand+0x5c>)
 801763a:	b510      	push	{r4, lr}
 801763c:	681c      	ldr	r4, [r3, #0]
 801763e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017640:	b9b3      	cbnz	r3, 8017670 <rand+0x38>
 8017642:	2018      	movs	r0, #24
 8017644:	f7ff ff0c 	bl	8017460 <malloc>
 8017648:	4602      	mov	r2, r0
 801764a:	6320      	str	r0, [r4, #48]	@ 0x30
 801764c:	b920      	cbnz	r0, 8017658 <rand+0x20>
 801764e:	4b12      	ldr	r3, [pc, #72]	@ (8017698 <rand+0x60>)
 8017650:	4812      	ldr	r0, [pc, #72]	@ (801769c <rand+0x64>)
 8017652:	2152      	movs	r1, #82	@ 0x52
 8017654:	f000 fb7c 	bl	8017d50 <__assert_func>
 8017658:	4911      	ldr	r1, [pc, #68]	@ (80176a0 <rand+0x68>)
 801765a:	4b12      	ldr	r3, [pc, #72]	@ (80176a4 <rand+0x6c>)
 801765c:	e9c0 1300 	strd	r1, r3, [r0]
 8017660:	4b11      	ldr	r3, [pc, #68]	@ (80176a8 <rand+0x70>)
 8017662:	6083      	str	r3, [r0, #8]
 8017664:	230b      	movs	r3, #11
 8017666:	8183      	strh	r3, [r0, #12]
 8017668:	2100      	movs	r1, #0
 801766a:	2001      	movs	r0, #1
 801766c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017670:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017672:	480e      	ldr	r0, [pc, #56]	@ (80176ac <rand+0x74>)
 8017674:	690b      	ldr	r3, [r1, #16]
 8017676:	694c      	ldr	r4, [r1, #20]
 8017678:	4a0d      	ldr	r2, [pc, #52]	@ (80176b0 <rand+0x78>)
 801767a:	4358      	muls	r0, r3
 801767c:	fb02 0004 	mla	r0, r2, r4, r0
 8017680:	fba3 3202 	umull	r3, r2, r3, r2
 8017684:	3301      	adds	r3, #1
 8017686:	eb40 0002 	adc.w	r0, r0, r2
 801768a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801768e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017692:	bd10      	pop	{r4, pc}
 8017694:	240000c4 	.word	0x240000c4
 8017698:	08019514 	.word	0x08019514
 801769c:	0801952b 	.word	0x0801952b
 80176a0:	abcd330e 	.word	0xabcd330e
 80176a4:	e66d1234 	.word	0xe66d1234
 80176a8:	0005deec 	.word	0x0005deec
 80176ac:	5851f42d 	.word	0x5851f42d
 80176b0:	4c957f2d 	.word	0x4c957f2d

080176b4 <realloc>:
 80176b4:	4b02      	ldr	r3, [pc, #8]	@ (80176c0 <realloc+0xc>)
 80176b6:	460a      	mov	r2, r1
 80176b8:	4601      	mov	r1, r0
 80176ba:	6818      	ldr	r0, [r3, #0]
 80176bc:	f000 b802 	b.w	80176c4 <_realloc_r>
 80176c0:	240000c4 	.word	0x240000c4

080176c4 <_realloc_r>:
 80176c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176c8:	4680      	mov	r8, r0
 80176ca:	4615      	mov	r5, r2
 80176cc:	460c      	mov	r4, r1
 80176ce:	b921      	cbnz	r1, 80176da <_realloc_r+0x16>
 80176d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176d4:	4611      	mov	r1, r2
 80176d6:	f7ff bef5 	b.w	80174c4 <_malloc_r>
 80176da:	b92a      	cbnz	r2, 80176e8 <_realloc_r+0x24>
 80176dc:	f000 fb62 	bl	8017da4 <_free_r>
 80176e0:	2400      	movs	r4, #0
 80176e2:	4620      	mov	r0, r4
 80176e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176e8:	f000 fba6 	bl	8017e38 <_malloc_usable_size_r>
 80176ec:	4285      	cmp	r5, r0
 80176ee:	4606      	mov	r6, r0
 80176f0:	d802      	bhi.n	80176f8 <_realloc_r+0x34>
 80176f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80176f6:	d8f4      	bhi.n	80176e2 <_realloc_r+0x1e>
 80176f8:	4629      	mov	r1, r5
 80176fa:	4640      	mov	r0, r8
 80176fc:	f7ff fee2 	bl	80174c4 <_malloc_r>
 8017700:	4607      	mov	r7, r0
 8017702:	2800      	cmp	r0, #0
 8017704:	d0ec      	beq.n	80176e0 <_realloc_r+0x1c>
 8017706:	42b5      	cmp	r5, r6
 8017708:	462a      	mov	r2, r5
 801770a:	4621      	mov	r1, r4
 801770c:	bf28      	it	cs
 801770e:	4632      	movcs	r2, r6
 8017710:	f000 fb0f 	bl	8017d32 <memcpy>
 8017714:	4621      	mov	r1, r4
 8017716:	4640      	mov	r0, r8
 8017718:	f000 fb44 	bl	8017da4 <_free_r>
 801771c:	463c      	mov	r4, r7
 801771e:	e7e0      	b.n	80176e2 <_realloc_r+0x1e>

08017720 <_strtoul_l.constprop.0>:
 8017720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017724:	4e34      	ldr	r6, [pc, #208]	@ (80177f8 <_strtoul_l.constprop.0+0xd8>)
 8017726:	4686      	mov	lr, r0
 8017728:	460d      	mov	r5, r1
 801772a:	4628      	mov	r0, r5
 801772c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017730:	5d37      	ldrb	r7, [r6, r4]
 8017732:	f017 0708 	ands.w	r7, r7, #8
 8017736:	d1f8      	bne.n	801772a <_strtoul_l.constprop.0+0xa>
 8017738:	2c2d      	cmp	r4, #45	@ 0x2d
 801773a:	d12f      	bne.n	801779c <_strtoul_l.constprop.0+0x7c>
 801773c:	782c      	ldrb	r4, [r5, #0]
 801773e:	2701      	movs	r7, #1
 8017740:	1c85      	adds	r5, r0, #2
 8017742:	f033 0010 	bics.w	r0, r3, #16
 8017746:	d109      	bne.n	801775c <_strtoul_l.constprop.0+0x3c>
 8017748:	2c30      	cmp	r4, #48	@ 0x30
 801774a:	d12c      	bne.n	80177a6 <_strtoul_l.constprop.0+0x86>
 801774c:	7828      	ldrb	r0, [r5, #0]
 801774e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017752:	2858      	cmp	r0, #88	@ 0x58
 8017754:	d127      	bne.n	80177a6 <_strtoul_l.constprop.0+0x86>
 8017756:	786c      	ldrb	r4, [r5, #1]
 8017758:	2310      	movs	r3, #16
 801775a:	3502      	adds	r5, #2
 801775c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017760:	2600      	movs	r6, #0
 8017762:	fbb8 f8f3 	udiv	r8, r8, r3
 8017766:	fb03 f908 	mul.w	r9, r3, r8
 801776a:	ea6f 0909 	mvn.w	r9, r9
 801776e:	4630      	mov	r0, r6
 8017770:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017774:	f1bc 0f09 	cmp.w	ip, #9
 8017778:	d81c      	bhi.n	80177b4 <_strtoul_l.constprop.0+0x94>
 801777a:	4664      	mov	r4, ip
 801777c:	42a3      	cmp	r3, r4
 801777e:	dd2a      	ble.n	80177d6 <_strtoul_l.constprop.0+0xb6>
 8017780:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017784:	d007      	beq.n	8017796 <_strtoul_l.constprop.0+0x76>
 8017786:	4580      	cmp	r8, r0
 8017788:	d322      	bcc.n	80177d0 <_strtoul_l.constprop.0+0xb0>
 801778a:	d101      	bne.n	8017790 <_strtoul_l.constprop.0+0x70>
 801778c:	45a1      	cmp	r9, r4
 801778e:	db1f      	blt.n	80177d0 <_strtoul_l.constprop.0+0xb0>
 8017790:	fb00 4003 	mla	r0, r0, r3, r4
 8017794:	2601      	movs	r6, #1
 8017796:	f815 4b01 	ldrb.w	r4, [r5], #1
 801779a:	e7e9      	b.n	8017770 <_strtoul_l.constprop.0+0x50>
 801779c:	2c2b      	cmp	r4, #43	@ 0x2b
 801779e:	bf04      	itt	eq
 80177a0:	782c      	ldrbeq	r4, [r5, #0]
 80177a2:	1c85      	addeq	r5, r0, #2
 80177a4:	e7cd      	b.n	8017742 <_strtoul_l.constprop.0+0x22>
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1d8      	bne.n	801775c <_strtoul_l.constprop.0+0x3c>
 80177aa:	2c30      	cmp	r4, #48	@ 0x30
 80177ac:	bf0c      	ite	eq
 80177ae:	2308      	moveq	r3, #8
 80177b0:	230a      	movne	r3, #10
 80177b2:	e7d3      	b.n	801775c <_strtoul_l.constprop.0+0x3c>
 80177b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80177b8:	f1bc 0f19 	cmp.w	ip, #25
 80177bc:	d801      	bhi.n	80177c2 <_strtoul_l.constprop.0+0xa2>
 80177be:	3c37      	subs	r4, #55	@ 0x37
 80177c0:	e7dc      	b.n	801777c <_strtoul_l.constprop.0+0x5c>
 80177c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80177c6:	f1bc 0f19 	cmp.w	ip, #25
 80177ca:	d804      	bhi.n	80177d6 <_strtoul_l.constprop.0+0xb6>
 80177cc:	3c57      	subs	r4, #87	@ 0x57
 80177ce:	e7d5      	b.n	801777c <_strtoul_l.constprop.0+0x5c>
 80177d0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80177d4:	e7df      	b.n	8017796 <_strtoul_l.constprop.0+0x76>
 80177d6:	1c73      	adds	r3, r6, #1
 80177d8:	d106      	bne.n	80177e8 <_strtoul_l.constprop.0+0xc8>
 80177da:	2322      	movs	r3, #34	@ 0x22
 80177dc:	f8ce 3000 	str.w	r3, [lr]
 80177e0:	4630      	mov	r0, r6
 80177e2:	b932      	cbnz	r2, 80177f2 <_strtoul_l.constprop.0+0xd2>
 80177e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177e8:	b107      	cbz	r7, 80177ec <_strtoul_l.constprop.0+0xcc>
 80177ea:	4240      	negs	r0, r0
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	d0f9      	beq.n	80177e4 <_strtoul_l.constprop.0+0xc4>
 80177f0:	b106      	cbz	r6, 80177f4 <_strtoul_l.constprop.0+0xd4>
 80177f2:	1e69      	subs	r1, r5, #1
 80177f4:	6011      	str	r1, [r2, #0]
 80177f6:	e7f5      	b.n	80177e4 <_strtoul_l.constprop.0+0xc4>
 80177f8:	08019584 	.word	0x08019584

080177fc <strtoul>:
 80177fc:	4613      	mov	r3, r2
 80177fe:	460a      	mov	r2, r1
 8017800:	4601      	mov	r1, r0
 8017802:	4802      	ldr	r0, [pc, #8]	@ (801780c <strtoul+0x10>)
 8017804:	6800      	ldr	r0, [r0, #0]
 8017806:	f7ff bf8b 	b.w	8017720 <_strtoul_l.constprop.0>
 801780a:	bf00      	nop
 801780c:	240000c4 	.word	0x240000c4

08017810 <std>:
 8017810:	2300      	movs	r3, #0
 8017812:	b510      	push	{r4, lr}
 8017814:	4604      	mov	r4, r0
 8017816:	e9c0 3300 	strd	r3, r3, [r0]
 801781a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801781e:	6083      	str	r3, [r0, #8]
 8017820:	8181      	strh	r1, [r0, #12]
 8017822:	6643      	str	r3, [r0, #100]	@ 0x64
 8017824:	81c2      	strh	r2, [r0, #14]
 8017826:	6183      	str	r3, [r0, #24]
 8017828:	4619      	mov	r1, r3
 801782a:	2208      	movs	r2, #8
 801782c:	305c      	adds	r0, #92	@ 0x5c
 801782e:	f000 f961 	bl	8017af4 <memset>
 8017832:	4b0d      	ldr	r3, [pc, #52]	@ (8017868 <std+0x58>)
 8017834:	6263      	str	r3, [r4, #36]	@ 0x24
 8017836:	4b0d      	ldr	r3, [pc, #52]	@ (801786c <std+0x5c>)
 8017838:	62a3      	str	r3, [r4, #40]	@ 0x28
 801783a:	4b0d      	ldr	r3, [pc, #52]	@ (8017870 <std+0x60>)
 801783c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801783e:	4b0d      	ldr	r3, [pc, #52]	@ (8017874 <std+0x64>)
 8017840:	6323      	str	r3, [r4, #48]	@ 0x30
 8017842:	4b0d      	ldr	r3, [pc, #52]	@ (8017878 <std+0x68>)
 8017844:	6224      	str	r4, [r4, #32]
 8017846:	429c      	cmp	r4, r3
 8017848:	d006      	beq.n	8017858 <std+0x48>
 801784a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801784e:	4294      	cmp	r4, r2
 8017850:	d002      	beq.n	8017858 <std+0x48>
 8017852:	33d0      	adds	r3, #208	@ 0xd0
 8017854:	429c      	cmp	r4, r3
 8017856:	d105      	bne.n	8017864 <std+0x54>
 8017858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017860:	f000 ba5c 	b.w	8017d1c <__retarget_lock_init_recursive>
 8017864:	bd10      	pop	{r4, pc}
 8017866:	bf00      	nop
 8017868:	080179fd 	.word	0x080179fd
 801786c:	08017a1f 	.word	0x08017a1f
 8017870:	08017a57 	.word	0x08017a57
 8017874:	08017a7b 	.word	0x08017a7b
 8017878:	2406854c 	.word	0x2406854c

0801787c <stdio_exit_handler>:
 801787c:	4a02      	ldr	r2, [pc, #8]	@ (8017888 <stdio_exit_handler+0xc>)
 801787e:	4903      	ldr	r1, [pc, #12]	@ (801788c <stdio_exit_handler+0x10>)
 8017880:	4803      	ldr	r0, [pc, #12]	@ (8017890 <stdio_exit_handler+0x14>)
 8017882:	f000 b869 	b.w	8017958 <_fwalk_sglue>
 8017886:	bf00      	nop
 8017888:	240000b8 	.word	0x240000b8
 801788c:	0801851d 	.word	0x0801851d
 8017890:	240000c8 	.word	0x240000c8

08017894 <cleanup_stdio>:
 8017894:	6841      	ldr	r1, [r0, #4]
 8017896:	4b0c      	ldr	r3, [pc, #48]	@ (80178c8 <cleanup_stdio+0x34>)
 8017898:	4299      	cmp	r1, r3
 801789a:	b510      	push	{r4, lr}
 801789c:	4604      	mov	r4, r0
 801789e:	d001      	beq.n	80178a4 <cleanup_stdio+0x10>
 80178a0:	f000 fe3c 	bl	801851c <_fflush_r>
 80178a4:	68a1      	ldr	r1, [r4, #8]
 80178a6:	4b09      	ldr	r3, [pc, #36]	@ (80178cc <cleanup_stdio+0x38>)
 80178a8:	4299      	cmp	r1, r3
 80178aa:	d002      	beq.n	80178b2 <cleanup_stdio+0x1e>
 80178ac:	4620      	mov	r0, r4
 80178ae:	f000 fe35 	bl	801851c <_fflush_r>
 80178b2:	68e1      	ldr	r1, [r4, #12]
 80178b4:	4b06      	ldr	r3, [pc, #24]	@ (80178d0 <cleanup_stdio+0x3c>)
 80178b6:	4299      	cmp	r1, r3
 80178b8:	d004      	beq.n	80178c4 <cleanup_stdio+0x30>
 80178ba:	4620      	mov	r0, r4
 80178bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178c0:	f000 be2c 	b.w	801851c <_fflush_r>
 80178c4:	bd10      	pop	{r4, pc}
 80178c6:	bf00      	nop
 80178c8:	2406854c 	.word	0x2406854c
 80178cc:	240685b4 	.word	0x240685b4
 80178d0:	2406861c 	.word	0x2406861c

080178d4 <global_stdio_init.part.0>:
 80178d4:	b510      	push	{r4, lr}
 80178d6:	4b0b      	ldr	r3, [pc, #44]	@ (8017904 <global_stdio_init.part.0+0x30>)
 80178d8:	4c0b      	ldr	r4, [pc, #44]	@ (8017908 <global_stdio_init.part.0+0x34>)
 80178da:	4a0c      	ldr	r2, [pc, #48]	@ (801790c <global_stdio_init.part.0+0x38>)
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	4620      	mov	r0, r4
 80178e0:	2200      	movs	r2, #0
 80178e2:	2104      	movs	r1, #4
 80178e4:	f7ff ff94 	bl	8017810 <std>
 80178e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80178ec:	2201      	movs	r2, #1
 80178ee:	2109      	movs	r1, #9
 80178f0:	f7ff ff8e 	bl	8017810 <std>
 80178f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80178f8:	2202      	movs	r2, #2
 80178fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178fe:	2112      	movs	r1, #18
 8017900:	f7ff bf86 	b.w	8017810 <std>
 8017904:	24068684 	.word	0x24068684
 8017908:	2406854c 	.word	0x2406854c
 801790c:	0801787d 	.word	0x0801787d

08017910 <__sfp_lock_acquire>:
 8017910:	4801      	ldr	r0, [pc, #4]	@ (8017918 <__sfp_lock_acquire+0x8>)
 8017912:	f000 ba04 	b.w	8017d1e <__retarget_lock_acquire_recursive>
 8017916:	bf00      	nop
 8017918:	2406868e 	.word	0x2406868e

0801791c <__sfp_lock_release>:
 801791c:	4801      	ldr	r0, [pc, #4]	@ (8017924 <__sfp_lock_release+0x8>)
 801791e:	f000 b9ff 	b.w	8017d20 <__retarget_lock_release_recursive>
 8017922:	bf00      	nop
 8017924:	2406868e 	.word	0x2406868e

08017928 <__sinit>:
 8017928:	b510      	push	{r4, lr}
 801792a:	4604      	mov	r4, r0
 801792c:	f7ff fff0 	bl	8017910 <__sfp_lock_acquire>
 8017930:	6a23      	ldr	r3, [r4, #32]
 8017932:	b11b      	cbz	r3, 801793c <__sinit+0x14>
 8017934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017938:	f7ff bff0 	b.w	801791c <__sfp_lock_release>
 801793c:	4b04      	ldr	r3, [pc, #16]	@ (8017950 <__sinit+0x28>)
 801793e:	6223      	str	r3, [r4, #32]
 8017940:	4b04      	ldr	r3, [pc, #16]	@ (8017954 <__sinit+0x2c>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d1f5      	bne.n	8017934 <__sinit+0xc>
 8017948:	f7ff ffc4 	bl	80178d4 <global_stdio_init.part.0>
 801794c:	e7f2      	b.n	8017934 <__sinit+0xc>
 801794e:	bf00      	nop
 8017950:	08017895 	.word	0x08017895
 8017954:	24068684 	.word	0x24068684

08017958 <_fwalk_sglue>:
 8017958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801795c:	4607      	mov	r7, r0
 801795e:	4688      	mov	r8, r1
 8017960:	4614      	mov	r4, r2
 8017962:	2600      	movs	r6, #0
 8017964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017968:	f1b9 0901 	subs.w	r9, r9, #1
 801796c:	d505      	bpl.n	801797a <_fwalk_sglue+0x22>
 801796e:	6824      	ldr	r4, [r4, #0]
 8017970:	2c00      	cmp	r4, #0
 8017972:	d1f7      	bne.n	8017964 <_fwalk_sglue+0xc>
 8017974:	4630      	mov	r0, r6
 8017976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801797a:	89ab      	ldrh	r3, [r5, #12]
 801797c:	2b01      	cmp	r3, #1
 801797e:	d907      	bls.n	8017990 <_fwalk_sglue+0x38>
 8017980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017984:	3301      	adds	r3, #1
 8017986:	d003      	beq.n	8017990 <_fwalk_sglue+0x38>
 8017988:	4629      	mov	r1, r5
 801798a:	4638      	mov	r0, r7
 801798c:	47c0      	blx	r8
 801798e:	4306      	orrs	r6, r0
 8017990:	3568      	adds	r5, #104	@ 0x68
 8017992:	e7e9      	b.n	8017968 <_fwalk_sglue+0x10>

08017994 <sniprintf>:
 8017994:	b40c      	push	{r2, r3}
 8017996:	b530      	push	{r4, r5, lr}
 8017998:	4b17      	ldr	r3, [pc, #92]	@ (80179f8 <sniprintf+0x64>)
 801799a:	1e0c      	subs	r4, r1, #0
 801799c:	681d      	ldr	r5, [r3, #0]
 801799e:	b09d      	sub	sp, #116	@ 0x74
 80179a0:	da08      	bge.n	80179b4 <sniprintf+0x20>
 80179a2:	238b      	movs	r3, #139	@ 0x8b
 80179a4:	602b      	str	r3, [r5, #0]
 80179a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179aa:	b01d      	add	sp, #116	@ 0x74
 80179ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179b0:	b002      	add	sp, #8
 80179b2:	4770      	bx	lr
 80179b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80179b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179bc:	bf14      	ite	ne
 80179be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80179c2:	4623      	moveq	r3, r4
 80179c4:	9304      	str	r3, [sp, #16]
 80179c6:	9307      	str	r3, [sp, #28]
 80179c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179cc:	9002      	str	r0, [sp, #8]
 80179ce:	9006      	str	r0, [sp, #24]
 80179d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80179d6:	ab21      	add	r3, sp, #132	@ 0x84
 80179d8:	a902      	add	r1, sp, #8
 80179da:	4628      	mov	r0, r5
 80179dc:	9301      	str	r3, [sp, #4]
 80179de:	f000 fa8f 	bl	8017f00 <_svfiprintf_r>
 80179e2:	1c43      	adds	r3, r0, #1
 80179e4:	bfbc      	itt	lt
 80179e6:	238b      	movlt	r3, #139	@ 0x8b
 80179e8:	602b      	strlt	r3, [r5, #0]
 80179ea:	2c00      	cmp	r4, #0
 80179ec:	d0dd      	beq.n	80179aa <sniprintf+0x16>
 80179ee:	9b02      	ldr	r3, [sp, #8]
 80179f0:	2200      	movs	r2, #0
 80179f2:	701a      	strb	r2, [r3, #0]
 80179f4:	e7d9      	b.n	80179aa <sniprintf+0x16>
 80179f6:	bf00      	nop
 80179f8:	240000c4 	.word	0x240000c4

080179fc <__sread>:
 80179fc:	b510      	push	{r4, lr}
 80179fe:	460c      	mov	r4, r1
 8017a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a04:	f000 f92c 	bl	8017c60 <_read_r>
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	bfab      	itete	ge
 8017a0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8017a10:	181b      	addge	r3, r3, r0
 8017a12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017a16:	bfac      	ite	ge
 8017a18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017a1a:	81a3      	strhlt	r3, [r4, #12]
 8017a1c:	bd10      	pop	{r4, pc}

08017a1e <__swrite>:
 8017a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a22:	461f      	mov	r7, r3
 8017a24:	898b      	ldrh	r3, [r1, #12]
 8017a26:	05db      	lsls	r3, r3, #23
 8017a28:	4605      	mov	r5, r0
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	4616      	mov	r6, r2
 8017a2e:	d505      	bpl.n	8017a3c <__swrite+0x1e>
 8017a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a34:	2302      	movs	r3, #2
 8017a36:	2200      	movs	r2, #0
 8017a38:	f000 f900 	bl	8017c3c <_lseek_r>
 8017a3c:	89a3      	ldrh	r3, [r4, #12]
 8017a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a46:	81a3      	strh	r3, [r4, #12]
 8017a48:	4632      	mov	r2, r6
 8017a4a:	463b      	mov	r3, r7
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a52:	f000 b927 	b.w	8017ca4 <_write_r>

08017a56 <__sseek>:
 8017a56:	b510      	push	{r4, lr}
 8017a58:	460c      	mov	r4, r1
 8017a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a5e:	f000 f8ed 	bl	8017c3c <_lseek_r>
 8017a62:	1c43      	adds	r3, r0, #1
 8017a64:	89a3      	ldrh	r3, [r4, #12]
 8017a66:	bf15      	itete	ne
 8017a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a72:	81a3      	strheq	r3, [r4, #12]
 8017a74:	bf18      	it	ne
 8017a76:	81a3      	strhne	r3, [r4, #12]
 8017a78:	bd10      	pop	{r4, pc}

08017a7a <__sclose>:
 8017a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a7e:	f000 b877 	b.w	8017b70 <_close_r>

08017a82 <_vsniprintf_r>:
 8017a82:	b530      	push	{r4, r5, lr}
 8017a84:	4614      	mov	r4, r2
 8017a86:	2c00      	cmp	r4, #0
 8017a88:	b09b      	sub	sp, #108	@ 0x6c
 8017a8a:	4605      	mov	r5, r0
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	da05      	bge.n	8017a9c <_vsniprintf_r+0x1a>
 8017a90:	238b      	movs	r3, #139	@ 0x8b
 8017a92:	6003      	str	r3, [r0, #0]
 8017a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a98:	b01b      	add	sp, #108	@ 0x6c
 8017a9a:	bd30      	pop	{r4, r5, pc}
 8017a9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017aa4:	bf14      	ite	ne
 8017aa6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017aaa:	4623      	moveq	r3, r4
 8017aac:	9302      	str	r3, [sp, #8]
 8017aae:	9305      	str	r3, [sp, #20]
 8017ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ab4:	9100      	str	r1, [sp, #0]
 8017ab6:	9104      	str	r1, [sp, #16]
 8017ab8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017abc:	4669      	mov	r1, sp
 8017abe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017ac0:	f000 fa1e 	bl	8017f00 <_svfiprintf_r>
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	bfbc      	itt	lt
 8017ac8:	238b      	movlt	r3, #139	@ 0x8b
 8017aca:	602b      	strlt	r3, [r5, #0]
 8017acc:	2c00      	cmp	r4, #0
 8017ace:	d0e3      	beq.n	8017a98 <_vsniprintf_r+0x16>
 8017ad0:	9b00      	ldr	r3, [sp, #0]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	701a      	strb	r2, [r3, #0]
 8017ad6:	e7df      	b.n	8017a98 <_vsniprintf_r+0x16>

08017ad8 <vsniprintf>:
 8017ad8:	b507      	push	{r0, r1, r2, lr}
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	4613      	mov	r3, r2
 8017ade:	460a      	mov	r2, r1
 8017ae0:	4601      	mov	r1, r0
 8017ae2:	4803      	ldr	r0, [pc, #12]	@ (8017af0 <vsniprintf+0x18>)
 8017ae4:	6800      	ldr	r0, [r0, #0]
 8017ae6:	f7ff ffcc 	bl	8017a82 <_vsniprintf_r>
 8017aea:	b003      	add	sp, #12
 8017aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8017af0:	240000c4 	.word	0x240000c4

08017af4 <memset>:
 8017af4:	4402      	add	r2, r0
 8017af6:	4603      	mov	r3, r0
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d100      	bne.n	8017afe <memset+0xa>
 8017afc:	4770      	bx	lr
 8017afe:	f803 1b01 	strb.w	r1, [r3], #1
 8017b02:	e7f9      	b.n	8017af8 <memset+0x4>

08017b04 <strchr>:
 8017b04:	b2c9      	uxtb	r1, r1
 8017b06:	4603      	mov	r3, r0
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b0e:	b112      	cbz	r2, 8017b16 <strchr+0x12>
 8017b10:	428a      	cmp	r2, r1
 8017b12:	d1f9      	bne.n	8017b08 <strchr+0x4>
 8017b14:	4770      	bx	lr
 8017b16:	2900      	cmp	r1, #0
 8017b18:	bf18      	it	ne
 8017b1a:	2000      	movne	r0, #0
 8017b1c:	4770      	bx	lr

08017b1e <strncmp>:
 8017b1e:	b510      	push	{r4, lr}
 8017b20:	b16a      	cbz	r2, 8017b3e <strncmp+0x20>
 8017b22:	3901      	subs	r1, #1
 8017b24:	1884      	adds	r4, r0, r2
 8017b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d103      	bne.n	8017b3a <strncmp+0x1c>
 8017b32:	42a0      	cmp	r0, r4
 8017b34:	d001      	beq.n	8017b3a <strncmp+0x1c>
 8017b36:	2a00      	cmp	r2, #0
 8017b38:	d1f5      	bne.n	8017b26 <strncmp+0x8>
 8017b3a:	1ad0      	subs	r0, r2, r3
 8017b3c:	bd10      	pop	{r4, pc}
 8017b3e:	4610      	mov	r0, r2
 8017b40:	e7fc      	b.n	8017b3c <strncmp+0x1e>

08017b42 <strstr>:
 8017b42:	780a      	ldrb	r2, [r1, #0]
 8017b44:	b570      	push	{r4, r5, r6, lr}
 8017b46:	b96a      	cbnz	r2, 8017b64 <strstr+0x22>
 8017b48:	bd70      	pop	{r4, r5, r6, pc}
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d109      	bne.n	8017b62 <strstr+0x20>
 8017b4e:	460c      	mov	r4, r1
 8017b50:	4605      	mov	r5, r0
 8017b52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d0f6      	beq.n	8017b48 <strstr+0x6>
 8017b5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017b5e:	429e      	cmp	r6, r3
 8017b60:	d0f7      	beq.n	8017b52 <strstr+0x10>
 8017b62:	3001      	adds	r0, #1
 8017b64:	7803      	ldrb	r3, [r0, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d1ef      	bne.n	8017b4a <strstr+0x8>
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	e7ec      	b.n	8017b48 <strstr+0x6>
	...

08017b70 <_close_r>:
 8017b70:	b538      	push	{r3, r4, r5, lr}
 8017b72:	4d06      	ldr	r5, [pc, #24]	@ (8017b8c <_close_r+0x1c>)
 8017b74:	2300      	movs	r3, #0
 8017b76:	4604      	mov	r4, r0
 8017b78:	4608      	mov	r0, r1
 8017b7a:	602b      	str	r3, [r5, #0]
 8017b7c:	f7e9 ff86 	bl	8001a8c <_close>
 8017b80:	1c43      	adds	r3, r0, #1
 8017b82:	d102      	bne.n	8017b8a <_close_r+0x1a>
 8017b84:	682b      	ldr	r3, [r5, #0]
 8017b86:	b103      	cbz	r3, 8017b8a <_close_r+0x1a>
 8017b88:	6023      	str	r3, [r4, #0]
 8017b8a:	bd38      	pop	{r3, r4, r5, pc}
 8017b8c:	24068688 	.word	0x24068688

08017b90 <_reclaim_reent>:
 8017b90:	4b29      	ldr	r3, [pc, #164]	@ (8017c38 <_reclaim_reent+0xa8>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	4283      	cmp	r3, r0
 8017b96:	b570      	push	{r4, r5, r6, lr}
 8017b98:	4604      	mov	r4, r0
 8017b9a:	d04b      	beq.n	8017c34 <_reclaim_reent+0xa4>
 8017b9c:	69c3      	ldr	r3, [r0, #28]
 8017b9e:	b1ab      	cbz	r3, 8017bcc <_reclaim_reent+0x3c>
 8017ba0:	68db      	ldr	r3, [r3, #12]
 8017ba2:	b16b      	cbz	r3, 8017bc0 <_reclaim_reent+0x30>
 8017ba4:	2500      	movs	r5, #0
 8017ba6:	69e3      	ldr	r3, [r4, #28]
 8017ba8:	68db      	ldr	r3, [r3, #12]
 8017baa:	5959      	ldr	r1, [r3, r5]
 8017bac:	2900      	cmp	r1, #0
 8017bae:	d13b      	bne.n	8017c28 <_reclaim_reent+0x98>
 8017bb0:	3504      	adds	r5, #4
 8017bb2:	2d80      	cmp	r5, #128	@ 0x80
 8017bb4:	d1f7      	bne.n	8017ba6 <_reclaim_reent+0x16>
 8017bb6:	69e3      	ldr	r3, [r4, #28]
 8017bb8:	4620      	mov	r0, r4
 8017bba:	68d9      	ldr	r1, [r3, #12]
 8017bbc:	f000 f8f2 	bl	8017da4 <_free_r>
 8017bc0:	69e3      	ldr	r3, [r4, #28]
 8017bc2:	6819      	ldr	r1, [r3, #0]
 8017bc4:	b111      	cbz	r1, 8017bcc <_reclaim_reent+0x3c>
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f000 f8ec 	bl	8017da4 <_free_r>
 8017bcc:	6961      	ldr	r1, [r4, #20]
 8017bce:	b111      	cbz	r1, 8017bd6 <_reclaim_reent+0x46>
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f000 f8e7 	bl	8017da4 <_free_r>
 8017bd6:	69e1      	ldr	r1, [r4, #28]
 8017bd8:	b111      	cbz	r1, 8017be0 <_reclaim_reent+0x50>
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f000 f8e2 	bl	8017da4 <_free_r>
 8017be0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017be2:	b111      	cbz	r1, 8017bea <_reclaim_reent+0x5a>
 8017be4:	4620      	mov	r0, r4
 8017be6:	f000 f8dd 	bl	8017da4 <_free_r>
 8017bea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bec:	b111      	cbz	r1, 8017bf4 <_reclaim_reent+0x64>
 8017bee:	4620      	mov	r0, r4
 8017bf0:	f000 f8d8 	bl	8017da4 <_free_r>
 8017bf4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017bf6:	b111      	cbz	r1, 8017bfe <_reclaim_reent+0x6e>
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	f000 f8d3 	bl	8017da4 <_free_r>
 8017bfe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017c00:	b111      	cbz	r1, 8017c08 <_reclaim_reent+0x78>
 8017c02:	4620      	mov	r0, r4
 8017c04:	f000 f8ce 	bl	8017da4 <_free_r>
 8017c08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017c0a:	b111      	cbz	r1, 8017c12 <_reclaim_reent+0x82>
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f000 f8c9 	bl	8017da4 <_free_r>
 8017c12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017c14:	b111      	cbz	r1, 8017c1c <_reclaim_reent+0x8c>
 8017c16:	4620      	mov	r0, r4
 8017c18:	f000 f8c4 	bl	8017da4 <_free_r>
 8017c1c:	6a23      	ldr	r3, [r4, #32]
 8017c1e:	b14b      	cbz	r3, 8017c34 <_reclaim_reent+0xa4>
 8017c20:	4620      	mov	r0, r4
 8017c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c26:	4718      	bx	r3
 8017c28:	680e      	ldr	r6, [r1, #0]
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	f000 f8ba 	bl	8017da4 <_free_r>
 8017c30:	4631      	mov	r1, r6
 8017c32:	e7bb      	b.n	8017bac <_reclaim_reent+0x1c>
 8017c34:	bd70      	pop	{r4, r5, r6, pc}
 8017c36:	bf00      	nop
 8017c38:	240000c4 	.word	0x240000c4

08017c3c <_lseek_r>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	4d07      	ldr	r5, [pc, #28]	@ (8017c5c <_lseek_r+0x20>)
 8017c40:	4604      	mov	r4, r0
 8017c42:	4608      	mov	r0, r1
 8017c44:	4611      	mov	r1, r2
 8017c46:	2200      	movs	r2, #0
 8017c48:	602a      	str	r2, [r5, #0]
 8017c4a:	461a      	mov	r2, r3
 8017c4c:	f7e9 ff45 	bl	8001ada <_lseek>
 8017c50:	1c43      	adds	r3, r0, #1
 8017c52:	d102      	bne.n	8017c5a <_lseek_r+0x1e>
 8017c54:	682b      	ldr	r3, [r5, #0]
 8017c56:	b103      	cbz	r3, 8017c5a <_lseek_r+0x1e>
 8017c58:	6023      	str	r3, [r4, #0]
 8017c5a:	bd38      	pop	{r3, r4, r5, pc}
 8017c5c:	24068688 	.word	0x24068688

08017c60 <_read_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	4d07      	ldr	r5, [pc, #28]	@ (8017c80 <_read_r+0x20>)
 8017c64:	4604      	mov	r4, r0
 8017c66:	4608      	mov	r0, r1
 8017c68:	4611      	mov	r1, r2
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	602a      	str	r2, [r5, #0]
 8017c6e:	461a      	mov	r2, r3
 8017c70:	f7e9 fed3 	bl	8001a1a <_read>
 8017c74:	1c43      	adds	r3, r0, #1
 8017c76:	d102      	bne.n	8017c7e <_read_r+0x1e>
 8017c78:	682b      	ldr	r3, [r5, #0]
 8017c7a:	b103      	cbz	r3, 8017c7e <_read_r+0x1e>
 8017c7c:	6023      	str	r3, [r4, #0]
 8017c7e:	bd38      	pop	{r3, r4, r5, pc}
 8017c80:	24068688 	.word	0x24068688

08017c84 <_sbrk_r>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	4d06      	ldr	r5, [pc, #24]	@ (8017ca0 <_sbrk_r+0x1c>)
 8017c88:	2300      	movs	r3, #0
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	4608      	mov	r0, r1
 8017c8e:	602b      	str	r3, [r5, #0]
 8017c90:	f7e9 ff30 	bl	8001af4 <_sbrk>
 8017c94:	1c43      	adds	r3, r0, #1
 8017c96:	d102      	bne.n	8017c9e <_sbrk_r+0x1a>
 8017c98:	682b      	ldr	r3, [r5, #0]
 8017c9a:	b103      	cbz	r3, 8017c9e <_sbrk_r+0x1a>
 8017c9c:	6023      	str	r3, [r4, #0]
 8017c9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ca0:	24068688 	.word	0x24068688

08017ca4 <_write_r>:
 8017ca4:	b538      	push	{r3, r4, r5, lr}
 8017ca6:	4d07      	ldr	r5, [pc, #28]	@ (8017cc4 <_write_r+0x20>)
 8017ca8:	4604      	mov	r4, r0
 8017caa:	4608      	mov	r0, r1
 8017cac:	4611      	mov	r1, r2
 8017cae:	2200      	movs	r2, #0
 8017cb0:	602a      	str	r2, [r5, #0]
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	f7e9 fece 	bl	8001a54 <_write>
 8017cb8:	1c43      	adds	r3, r0, #1
 8017cba:	d102      	bne.n	8017cc2 <_write_r+0x1e>
 8017cbc:	682b      	ldr	r3, [r5, #0]
 8017cbe:	b103      	cbz	r3, 8017cc2 <_write_r+0x1e>
 8017cc0:	6023      	str	r3, [r4, #0]
 8017cc2:	bd38      	pop	{r3, r4, r5, pc}
 8017cc4:	24068688 	.word	0x24068688

08017cc8 <__errno>:
 8017cc8:	4b01      	ldr	r3, [pc, #4]	@ (8017cd0 <__errno+0x8>)
 8017cca:	6818      	ldr	r0, [r3, #0]
 8017ccc:	4770      	bx	lr
 8017cce:	bf00      	nop
 8017cd0:	240000c4 	.word	0x240000c4

08017cd4 <__libc_init_array>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8017d0c <__libc_init_array+0x38>)
 8017cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8017d10 <__libc_init_array+0x3c>)
 8017cda:	1b64      	subs	r4, r4, r5
 8017cdc:	10a4      	asrs	r4, r4, #2
 8017cde:	2600      	movs	r6, #0
 8017ce0:	42a6      	cmp	r6, r4
 8017ce2:	d109      	bne.n	8017cf8 <__libc_init_array+0x24>
 8017ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8017d14 <__libc_init_array+0x40>)
 8017ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8017d18 <__libc_init_array+0x44>)
 8017ce8:	f000 ff10 	bl	8018b0c <_init>
 8017cec:	1b64      	subs	r4, r4, r5
 8017cee:	10a4      	asrs	r4, r4, #2
 8017cf0:	2600      	movs	r6, #0
 8017cf2:	42a6      	cmp	r6, r4
 8017cf4:	d105      	bne.n	8017d02 <__libc_init_array+0x2e>
 8017cf6:	bd70      	pop	{r4, r5, r6, pc}
 8017cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cfc:	4798      	blx	r3
 8017cfe:	3601      	adds	r6, #1
 8017d00:	e7ee      	b.n	8017ce0 <__libc_init_array+0xc>
 8017d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d06:	4798      	blx	r3
 8017d08:	3601      	adds	r6, #1
 8017d0a:	e7f2      	b.n	8017cf2 <__libc_init_array+0x1e>
 8017d0c:	080196fc 	.word	0x080196fc
 8017d10:	080196fc 	.word	0x080196fc
 8017d14:	080196fc 	.word	0x080196fc
 8017d18:	08019704 	.word	0x08019704

08017d1c <__retarget_lock_init_recursive>:
 8017d1c:	4770      	bx	lr

08017d1e <__retarget_lock_acquire_recursive>:
 8017d1e:	4770      	bx	lr

08017d20 <__retarget_lock_release_recursive>:
 8017d20:	4770      	bx	lr

08017d22 <strcpy>:
 8017d22:	4603      	mov	r3, r0
 8017d24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d28:	f803 2b01 	strb.w	r2, [r3], #1
 8017d2c:	2a00      	cmp	r2, #0
 8017d2e:	d1f9      	bne.n	8017d24 <strcpy+0x2>
 8017d30:	4770      	bx	lr

08017d32 <memcpy>:
 8017d32:	440a      	add	r2, r1
 8017d34:	4291      	cmp	r1, r2
 8017d36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017d3a:	d100      	bne.n	8017d3e <memcpy+0xc>
 8017d3c:	4770      	bx	lr
 8017d3e:	b510      	push	{r4, lr}
 8017d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d48:	4291      	cmp	r1, r2
 8017d4a:	d1f9      	bne.n	8017d40 <memcpy+0xe>
 8017d4c:	bd10      	pop	{r4, pc}
	...

08017d50 <__assert_func>:
 8017d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d52:	4614      	mov	r4, r2
 8017d54:	461a      	mov	r2, r3
 8017d56:	4b09      	ldr	r3, [pc, #36]	@ (8017d7c <__assert_func+0x2c>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	4605      	mov	r5, r0
 8017d5c:	68d8      	ldr	r0, [r3, #12]
 8017d5e:	b954      	cbnz	r4, 8017d76 <__assert_func+0x26>
 8017d60:	4b07      	ldr	r3, [pc, #28]	@ (8017d80 <__assert_func+0x30>)
 8017d62:	461c      	mov	r4, r3
 8017d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d68:	9100      	str	r1, [sp, #0]
 8017d6a:	462b      	mov	r3, r5
 8017d6c:	4905      	ldr	r1, [pc, #20]	@ (8017d84 <__assert_func+0x34>)
 8017d6e:	f000 fbfd 	bl	801856c <fiprintf>
 8017d72:	f000 fc27 	bl	80185c4 <abort>
 8017d76:	4b04      	ldr	r3, [pc, #16]	@ (8017d88 <__assert_func+0x38>)
 8017d78:	e7f4      	b.n	8017d64 <__assert_func+0x14>
 8017d7a:	bf00      	nop
 8017d7c:	240000c4 	.word	0x240000c4
 8017d80:	080196bf 	.word	0x080196bf
 8017d84:	08019691 	.word	0x08019691
 8017d88:	08019684 	.word	0x08019684

08017d8c <__env_lock>:
 8017d8c:	4801      	ldr	r0, [pc, #4]	@ (8017d94 <__env_lock+0x8>)
 8017d8e:	f7ff bfc6 	b.w	8017d1e <__retarget_lock_acquire_recursive>
 8017d92:	bf00      	nop
 8017d94:	2406868c 	.word	0x2406868c

08017d98 <__env_unlock>:
 8017d98:	4801      	ldr	r0, [pc, #4]	@ (8017da0 <__env_unlock+0x8>)
 8017d9a:	f7ff bfc1 	b.w	8017d20 <__retarget_lock_release_recursive>
 8017d9e:	bf00      	nop
 8017da0:	2406868c 	.word	0x2406868c

08017da4 <_free_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4605      	mov	r5, r0
 8017da8:	2900      	cmp	r1, #0
 8017daa:	d041      	beq.n	8017e30 <_free_r+0x8c>
 8017dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017db0:	1f0c      	subs	r4, r1, #4
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	bfb8      	it	lt
 8017db6:	18e4      	addlt	r4, r4, r3
 8017db8:	f7ff fc04 	bl	80175c4 <__malloc_lock>
 8017dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8017e34 <_free_r+0x90>)
 8017dbe:	6813      	ldr	r3, [r2, #0]
 8017dc0:	b933      	cbnz	r3, 8017dd0 <_free_r+0x2c>
 8017dc2:	6063      	str	r3, [r4, #4]
 8017dc4:	6014      	str	r4, [r2, #0]
 8017dc6:	4628      	mov	r0, r5
 8017dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dcc:	f7ff bc00 	b.w	80175d0 <__malloc_unlock>
 8017dd0:	42a3      	cmp	r3, r4
 8017dd2:	d908      	bls.n	8017de6 <_free_r+0x42>
 8017dd4:	6820      	ldr	r0, [r4, #0]
 8017dd6:	1821      	adds	r1, r4, r0
 8017dd8:	428b      	cmp	r3, r1
 8017dda:	bf01      	itttt	eq
 8017ddc:	6819      	ldreq	r1, [r3, #0]
 8017dde:	685b      	ldreq	r3, [r3, #4]
 8017de0:	1809      	addeq	r1, r1, r0
 8017de2:	6021      	streq	r1, [r4, #0]
 8017de4:	e7ed      	b.n	8017dc2 <_free_r+0x1e>
 8017de6:	461a      	mov	r2, r3
 8017de8:	685b      	ldr	r3, [r3, #4]
 8017dea:	b10b      	cbz	r3, 8017df0 <_free_r+0x4c>
 8017dec:	42a3      	cmp	r3, r4
 8017dee:	d9fa      	bls.n	8017de6 <_free_r+0x42>
 8017df0:	6811      	ldr	r1, [r2, #0]
 8017df2:	1850      	adds	r0, r2, r1
 8017df4:	42a0      	cmp	r0, r4
 8017df6:	d10b      	bne.n	8017e10 <_free_r+0x6c>
 8017df8:	6820      	ldr	r0, [r4, #0]
 8017dfa:	4401      	add	r1, r0
 8017dfc:	1850      	adds	r0, r2, r1
 8017dfe:	4283      	cmp	r3, r0
 8017e00:	6011      	str	r1, [r2, #0]
 8017e02:	d1e0      	bne.n	8017dc6 <_free_r+0x22>
 8017e04:	6818      	ldr	r0, [r3, #0]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	6053      	str	r3, [r2, #4]
 8017e0a:	4408      	add	r0, r1
 8017e0c:	6010      	str	r0, [r2, #0]
 8017e0e:	e7da      	b.n	8017dc6 <_free_r+0x22>
 8017e10:	d902      	bls.n	8017e18 <_free_r+0x74>
 8017e12:	230c      	movs	r3, #12
 8017e14:	602b      	str	r3, [r5, #0]
 8017e16:	e7d6      	b.n	8017dc6 <_free_r+0x22>
 8017e18:	6820      	ldr	r0, [r4, #0]
 8017e1a:	1821      	adds	r1, r4, r0
 8017e1c:	428b      	cmp	r3, r1
 8017e1e:	bf04      	itt	eq
 8017e20:	6819      	ldreq	r1, [r3, #0]
 8017e22:	685b      	ldreq	r3, [r3, #4]
 8017e24:	6063      	str	r3, [r4, #4]
 8017e26:	bf04      	itt	eq
 8017e28:	1809      	addeq	r1, r1, r0
 8017e2a:	6021      	streq	r1, [r4, #0]
 8017e2c:	6054      	str	r4, [r2, #4]
 8017e2e:	e7ca      	b.n	8017dc6 <_free_r+0x22>
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
 8017e32:	bf00      	nop
 8017e34:	24068548 	.word	0x24068548

08017e38 <_malloc_usable_size_r>:
 8017e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e3c:	1f18      	subs	r0, r3, #4
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	bfbc      	itt	lt
 8017e42:	580b      	ldrlt	r3, [r1, r0]
 8017e44:	18c0      	addlt	r0, r0, r3
 8017e46:	4770      	bx	lr

08017e48 <__ssputs_r>:
 8017e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e4c:	688e      	ldr	r6, [r1, #8]
 8017e4e:	461f      	mov	r7, r3
 8017e50:	42be      	cmp	r6, r7
 8017e52:	680b      	ldr	r3, [r1, #0]
 8017e54:	4682      	mov	sl, r0
 8017e56:	460c      	mov	r4, r1
 8017e58:	4690      	mov	r8, r2
 8017e5a:	d82d      	bhi.n	8017eb8 <__ssputs_r+0x70>
 8017e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e64:	d026      	beq.n	8017eb4 <__ssputs_r+0x6c>
 8017e66:	6965      	ldr	r5, [r4, #20]
 8017e68:	6909      	ldr	r1, [r1, #16]
 8017e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e6e:	eba3 0901 	sub.w	r9, r3, r1
 8017e72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e76:	1c7b      	adds	r3, r7, #1
 8017e78:	444b      	add	r3, r9
 8017e7a:	106d      	asrs	r5, r5, #1
 8017e7c:	429d      	cmp	r5, r3
 8017e7e:	bf38      	it	cc
 8017e80:	461d      	movcc	r5, r3
 8017e82:	0553      	lsls	r3, r2, #21
 8017e84:	d527      	bpl.n	8017ed6 <__ssputs_r+0x8e>
 8017e86:	4629      	mov	r1, r5
 8017e88:	f7ff fb1c 	bl	80174c4 <_malloc_r>
 8017e8c:	4606      	mov	r6, r0
 8017e8e:	b360      	cbz	r0, 8017eea <__ssputs_r+0xa2>
 8017e90:	6921      	ldr	r1, [r4, #16]
 8017e92:	464a      	mov	r2, r9
 8017e94:	f7ff ff4d 	bl	8017d32 <memcpy>
 8017e98:	89a3      	ldrh	r3, [r4, #12]
 8017e9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ea2:	81a3      	strh	r3, [r4, #12]
 8017ea4:	6126      	str	r6, [r4, #16]
 8017ea6:	6165      	str	r5, [r4, #20]
 8017ea8:	444e      	add	r6, r9
 8017eaa:	eba5 0509 	sub.w	r5, r5, r9
 8017eae:	6026      	str	r6, [r4, #0]
 8017eb0:	60a5      	str	r5, [r4, #8]
 8017eb2:	463e      	mov	r6, r7
 8017eb4:	42be      	cmp	r6, r7
 8017eb6:	d900      	bls.n	8017eba <__ssputs_r+0x72>
 8017eb8:	463e      	mov	r6, r7
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	4632      	mov	r2, r6
 8017ebe:	4641      	mov	r1, r8
 8017ec0:	f000 fb66 	bl	8018590 <memmove>
 8017ec4:	68a3      	ldr	r3, [r4, #8]
 8017ec6:	1b9b      	subs	r3, r3, r6
 8017ec8:	60a3      	str	r3, [r4, #8]
 8017eca:	6823      	ldr	r3, [r4, #0]
 8017ecc:	4433      	add	r3, r6
 8017ece:	6023      	str	r3, [r4, #0]
 8017ed0:	2000      	movs	r0, #0
 8017ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ed6:	462a      	mov	r2, r5
 8017ed8:	f7ff fbf4 	bl	80176c4 <_realloc_r>
 8017edc:	4606      	mov	r6, r0
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d1e0      	bne.n	8017ea4 <__ssputs_r+0x5c>
 8017ee2:	6921      	ldr	r1, [r4, #16]
 8017ee4:	4650      	mov	r0, sl
 8017ee6:	f7ff ff5d 	bl	8017da4 <_free_r>
 8017eea:	230c      	movs	r3, #12
 8017eec:	f8ca 3000 	str.w	r3, [sl]
 8017ef0:	89a3      	ldrh	r3, [r4, #12]
 8017ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ef6:	81a3      	strh	r3, [r4, #12]
 8017ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017efc:	e7e9      	b.n	8017ed2 <__ssputs_r+0x8a>
	...

08017f00 <_svfiprintf_r>:
 8017f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f04:	4698      	mov	r8, r3
 8017f06:	898b      	ldrh	r3, [r1, #12]
 8017f08:	061b      	lsls	r3, r3, #24
 8017f0a:	b09d      	sub	sp, #116	@ 0x74
 8017f0c:	4607      	mov	r7, r0
 8017f0e:	460d      	mov	r5, r1
 8017f10:	4614      	mov	r4, r2
 8017f12:	d510      	bpl.n	8017f36 <_svfiprintf_r+0x36>
 8017f14:	690b      	ldr	r3, [r1, #16]
 8017f16:	b973      	cbnz	r3, 8017f36 <_svfiprintf_r+0x36>
 8017f18:	2140      	movs	r1, #64	@ 0x40
 8017f1a:	f7ff fad3 	bl	80174c4 <_malloc_r>
 8017f1e:	6028      	str	r0, [r5, #0]
 8017f20:	6128      	str	r0, [r5, #16]
 8017f22:	b930      	cbnz	r0, 8017f32 <_svfiprintf_r+0x32>
 8017f24:	230c      	movs	r3, #12
 8017f26:	603b      	str	r3, [r7, #0]
 8017f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f2c:	b01d      	add	sp, #116	@ 0x74
 8017f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f32:	2340      	movs	r3, #64	@ 0x40
 8017f34:	616b      	str	r3, [r5, #20]
 8017f36:	2300      	movs	r3, #0
 8017f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f3a:	2320      	movs	r3, #32
 8017f3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f44:	2330      	movs	r3, #48	@ 0x30
 8017f46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180e4 <_svfiprintf_r+0x1e4>
 8017f4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f4e:	f04f 0901 	mov.w	r9, #1
 8017f52:	4623      	mov	r3, r4
 8017f54:	469a      	mov	sl, r3
 8017f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f5a:	b10a      	cbz	r2, 8017f60 <_svfiprintf_r+0x60>
 8017f5c:	2a25      	cmp	r2, #37	@ 0x25
 8017f5e:	d1f9      	bne.n	8017f54 <_svfiprintf_r+0x54>
 8017f60:	ebba 0b04 	subs.w	fp, sl, r4
 8017f64:	d00b      	beq.n	8017f7e <_svfiprintf_r+0x7e>
 8017f66:	465b      	mov	r3, fp
 8017f68:	4622      	mov	r2, r4
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	4638      	mov	r0, r7
 8017f6e:	f7ff ff6b 	bl	8017e48 <__ssputs_r>
 8017f72:	3001      	adds	r0, #1
 8017f74:	f000 80a7 	beq.w	80180c6 <_svfiprintf_r+0x1c6>
 8017f78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f7a:	445a      	add	r2, fp
 8017f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	f000 809f 	beq.w	80180c6 <_svfiprintf_r+0x1c6>
 8017f88:	2300      	movs	r3, #0
 8017f8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f92:	f10a 0a01 	add.w	sl, sl, #1
 8017f96:	9304      	str	r3, [sp, #16]
 8017f98:	9307      	str	r3, [sp, #28]
 8017f9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017fa0:	4654      	mov	r4, sl
 8017fa2:	2205      	movs	r2, #5
 8017fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fa8:	484e      	ldr	r0, [pc, #312]	@ (80180e4 <_svfiprintf_r+0x1e4>)
 8017faa:	f7e8 f9b1 	bl	8000310 <memchr>
 8017fae:	9a04      	ldr	r2, [sp, #16]
 8017fb0:	b9d8      	cbnz	r0, 8017fea <_svfiprintf_r+0xea>
 8017fb2:	06d0      	lsls	r0, r2, #27
 8017fb4:	bf44      	itt	mi
 8017fb6:	2320      	movmi	r3, #32
 8017fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fbc:	0711      	lsls	r1, r2, #28
 8017fbe:	bf44      	itt	mi
 8017fc0:	232b      	movmi	r3, #43	@ 0x2b
 8017fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8017fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fcc:	d015      	beq.n	8017ffa <_svfiprintf_r+0xfa>
 8017fce:	9a07      	ldr	r2, [sp, #28]
 8017fd0:	4654      	mov	r4, sl
 8017fd2:	2000      	movs	r0, #0
 8017fd4:	f04f 0c0a 	mov.w	ip, #10
 8017fd8:	4621      	mov	r1, r4
 8017fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fde:	3b30      	subs	r3, #48	@ 0x30
 8017fe0:	2b09      	cmp	r3, #9
 8017fe2:	d94b      	bls.n	801807c <_svfiprintf_r+0x17c>
 8017fe4:	b1b0      	cbz	r0, 8018014 <_svfiprintf_r+0x114>
 8017fe6:	9207      	str	r2, [sp, #28]
 8017fe8:	e014      	b.n	8018014 <_svfiprintf_r+0x114>
 8017fea:	eba0 0308 	sub.w	r3, r0, r8
 8017fee:	fa09 f303 	lsl.w	r3, r9, r3
 8017ff2:	4313      	orrs	r3, r2
 8017ff4:	9304      	str	r3, [sp, #16]
 8017ff6:	46a2      	mov	sl, r4
 8017ff8:	e7d2      	b.n	8017fa0 <_svfiprintf_r+0xa0>
 8017ffa:	9b03      	ldr	r3, [sp, #12]
 8017ffc:	1d19      	adds	r1, r3, #4
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	9103      	str	r1, [sp, #12]
 8018002:	2b00      	cmp	r3, #0
 8018004:	bfbb      	ittet	lt
 8018006:	425b      	neglt	r3, r3
 8018008:	f042 0202 	orrlt.w	r2, r2, #2
 801800c:	9307      	strge	r3, [sp, #28]
 801800e:	9307      	strlt	r3, [sp, #28]
 8018010:	bfb8      	it	lt
 8018012:	9204      	strlt	r2, [sp, #16]
 8018014:	7823      	ldrb	r3, [r4, #0]
 8018016:	2b2e      	cmp	r3, #46	@ 0x2e
 8018018:	d10a      	bne.n	8018030 <_svfiprintf_r+0x130>
 801801a:	7863      	ldrb	r3, [r4, #1]
 801801c:	2b2a      	cmp	r3, #42	@ 0x2a
 801801e:	d132      	bne.n	8018086 <_svfiprintf_r+0x186>
 8018020:	9b03      	ldr	r3, [sp, #12]
 8018022:	1d1a      	adds	r2, r3, #4
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	9203      	str	r2, [sp, #12]
 8018028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801802c:	3402      	adds	r4, #2
 801802e:	9305      	str	r3, [sp, #20]
 8018030:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80180f4 <_svfiprintf_r+0x1f4>
 8018034:	7821      	ldrb	r1, [r4, #0]
 8018036:	2203      	movs	r2, #3
 8018038:	4650      	mov	r0, sl
 801803a:	f7e8 f969 	bl	8000310 <memchr>
 801803e:	b138      	cbz	r0, 8018050 <_svfiprintf_r+0x150>
 8018040:	9b04      	ldr	r3, [sp, #16]
 8018042:	eba0 000a 	sub.w	r0, r0, sl
 8018046:	2240      	movs	r2, #64	@ 0x40
 8018048:	4082      	lsls	r2, r0
 801804a:	4313      	orrs	r3, r2
 801804c:	3401      	adds	r4, #1
 801804e:	9304      	str	r3, [sp, #16]
 8018050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018054:	4824      	ldr	r0, [pc, #144]	@ (80180e8 <_svfiprintf_r+0x1e8>)
 8018056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801805a:	2206      	movs	r2, #6
 801805c:	f7e8 f958 	bl	8000310 <memchr>
 8018060:	2800      	cmp	r0, #0
 8018062:	d036      	beq.n	80180d2 <_svfiprintf_r+0x1d2>
 8018064:	4b21      	ldr	r3, [pc, #132]	@ (80180ec <_svfiprintf_r+0x1ec>)
 8018066:	bb1b      	cbnz	r3, 80180b0 <_svfiprintf_r+0x1b0>
 8018068:	9b03      	ldr	r3, [sp, #12]
 801806a:	3307      	adds	r3, #7
 801806c:	f023 0307 	bic.w	r3, r3, #7
 8018070:	3308      	adds	r3, #8
 8018072:	9303      	str	r3, [sp, #12]
 8018074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018076:	4433      	add	r3, r6
 8018078:	9309      	str	r3, [sp, #36]	@ 0x24
 801807a:	e76a      	b.n	8017f52 <_svfiprintf_r+0x52>
 801807c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018080:	460c      	mov	r4, r1
 8018082:	2001      	movs	r0, #1
 8018084:	e7a8      	b.n	8017fd8 <_svfiprintf_r+0xd8>
 8018086:	2300      	movs	r3, #0
 8018088:	3401      	adds	r4, #1
 801808a:	9305      	str	r3, [sp, #20]
 801808c:	4619      	mov	r1, r3
 801808e:	f04f 0c0a 	mov.w	ip, #10
 8018092:	4620      	mov	r0, r4
 8018094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018098:	3a30      	subs	r2, #48	@ 0x30
 801809a:	2a09      	cmp	r2, #9
 801809c:	d903      	bls.n	80180a6 <_svfiprintf_r+0x1a6>
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d0c6      	beq.n	8018030 <_svfiprintf_r+0x130>
 80180a2:	9105      	str	r1, [sp, #20]
 80180a4:	e7c4      	b.n	8018030 <_svfiprintf_r+0x130>
 80180a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80180aa:	4604      	mov	r4, r0
 80180ac:	2301      	movs	r3, #1
 80180ae:	e7f0      	b.n	8018092 <_svfiprintf_r+0x192>
 80180b0:	ab03      	add	r3, sp, #12
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	462a      	mov	r2, r5
 80180b6:	4b0e      	ldr	r3, [pc, #56]	@ (80180f0 <_svfiprintf_r+0x1f0>)
 80180b8:	a904      	add	r1, sp, #16
 80180ba:	4638      	mov	r0, r7
 80180bc:	f3af 8000 	nop.w
 80180c0:	1c42      	adds	r2, r0, #1
 80180c2:	4606      	mov	r6, r0
 80180c4:	d1d6      	bne.n	8018074 <_svfiprintf_r+0x174>
 80180c6:	89ab      	ldrh	r3, [r5, #12]
 80180c8:	065b      	lsls	r3, r3, #25
 80180ca:	f53f af2d 	bmi.w	8017f28 <_svfiprintf_r+0x28>
 80180ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180d0:	e72c      	b.n	8017f2c <_svfiprintf_r+0x2c>
 80180d2:	ab03      	add	r3, sp, #12
 80180d4:	9300      	str	r3, [sp, #0]
 80180d6:	462a      	mov	r2, r5
 80180d8:	4b05      	ldr	r3, [pc, #20]	@ (80180f0 <_svfiprintf_r+0x1f0>)
 80180da:	a904      	add	r1, sp, #16
 80180dc:	4638      	mov	r0, r7
 80180de:	f000 f879 	bl	80181d4 <_printf_i>
 80180e2:	e7ed      	b.n	80180c0 <_svfiprintf_r+0x1c0>
 80180e4:	080196c0 	.word	0x080196c0
 80180e8:	080196ca 	.word	0x080196ca
 80180ec:	00000000 	.word	0x00000000
 80180f0:	08017e49 	.word	0x08017e49
 80180f4:	080196c6 	.word	0x080196c6

080180f8 <_printf_common>:
 80180f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180fc:	4616      	mov	r6, r2
 80180fe:	4698      	mov	r8, r3
 8018100:	688a      	ldr	r2, [r1, #8]
 8018102:	690b      	ldr	r3, [r1, #16]
 8018104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018108:	4293      	cmp	r3, r2
 801810a:	bfb8      	it	lt
 801810c:	4613      	movlt	r3, r2
 801810e:	6033      	str	r3, [r6, #0]
 8018110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018114:	4607      	mov	r7, r0
 8018116:	460c      	mov	r4, r1
 8018118:	b10a      	cbz	r2, 801811e <_printf_common+0x26>
 801811a:	3301      	adds	r3, #1
 801811c:	6033      	str	r3, [r6, #0]
 801811e:	6823      	ldr	r3, [r4, #0]
 8018120:	0699      	lsls	r1, r3, #26
 8018122:	bf42      	ittt	mi
 8018124:	6833      	ldrmi	r3, [r6, #0]
 8018126:	3302      	addmi	r3, #2
 8018128:	6033      	strmi	r3, [r6, #0]
 801812a:	6825      	ldr	r5, [r4, #0]
 801812c:	f015 0506 	ands.w	r5, r5, #6
 8018130:	d106      	bne.n	8018140 <_printf_common+0x48>
 8018132:	f104 0a19 	add.w	sl, r4, #25
 8018136:	68e3      	ldr	r3, [r4, #12]
 8018138:	6832      	ldr	r2, [r6, #0]
 801813a:	1a9b      	subs	r3, r3, r2
 801813c:	42ab      	cmp	r3, r5
 801813e:	dc26      	bgt.n	801818e <_printf_common+0x96>
 8018140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018144:	6822      	ldr	r2, [r4, #0]
 8018146:	3b00      	subs	r3, #0
 8018148:	bf18      	it	ne
 801814a:	2301      	movne	r3, #1
 801814c:	0692      	lsls	r2, r2, #26
 801814e:	d42b      	bmi.n	80181a8 <_printf_common+0xb0>
 8018150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018154:	4641      	mov	r1, r8
 8018156:	4638      	mov	r0, r7
 8018158:	47c8      	blx	r9
 801815a:	3001      	adds	r0, #1
 801815c:	d01e      	beq.n	801819c <_printf_common+0xa4>
 801815e:	6823      	ldr	r3, [r4, #0]
 8018160:	6922      	ldr	r2, [r4, #16]
 8018162:	f003 0306 	and.w	r3, r3, #6
 8018166:	2b04      	cmp	r3, #4
 8018168:	bf02      	ittt	eq
 801816a:	68e5      	ldreq	r5, [r4, #12]
 801816c:	6833      	ldreq	r3, [r6, #0]
 801816e:	1aed      	subeq	r5, r5, r3
 8018170:	68a3      	ldr	r3, [r4, #8]
 8018172:	bf0c      	ite	eq
 8018174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018178:	2500      	movne	r5, #0
 801817a:	4293      	cmp	r3, r2
 801817c:	bfc4      	itt	gt
 801817e:	1a9b      	subgt	r3, r3, r2
 8018180:	18ed      	addgt	r5, r5, r3
 8018182:	2600      	movs	r6, #0
 8018184:	341a      	adds	r4, #26
 8018186:	42b5      	cmp	r5, r6
 8018188:	d11a      	bne.n	80181c0 <_printf_common+0xc8>
 801818a:	2000      	movs	r0, #0
 801818c:	e008      	b.n	80181a0 <_printf_common+0xa8>
 801818e:	2301      	movs	r3, #1
 8018190:	4652      	mov	r2, sl
 8018192:	4641      	mov	r1, r8
 8018194:	4638      	mov	r0, r7
 8018196:	47c8      	blx	r9
 8018198:	3001      	adds	r0, #1
 801819a:	d103      	bne.n	80181a4 <_printf_common+0xac>
 801819c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181a4:	3501      	adds	r5, #1
 80181a6:	e7c6      	b.n	8018136 <_printf_common+0x3e>
 80181a8:	18e1      	adds	r1, r4, r3
 80181aa:	1c5a      	adds	r2, r3, #1
 80181ac:	2030      	movs	r0, #48	@ 0x30
 80181ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80181b2:	4422      	add	r2, r4
 80181b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80181b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80181bc:	3302      	adds	r3, #2
 80181be:	e7c7      	b.n	8018150 <_printf_common+0x58>
 80181c0:	2301      	movs	r3, #1
 80181c2:	4622      	mov	r2, r4
 80181c4:	4641      	mov	r1, r8
 80181c6:	4638      	mov	r0, r7
 80181c8:	47c8      	blx	r9
 80181ca:	3001      	adds	r0, #1
 80181cc:	d0e6      	beq.n	801819c <_printf_common+0xa4>
 80181ce:	3601      	adds	r6, #1
 80181d0:	e7d9      	b.n	8018186 <_printf_common+0x8e>
	...

080181d4 <_printf_i>:
 80181d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80181d8:	7e0f      	ldrb	r7, [r1, #24]
 80181da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80181dc:	2f78      	cmp	r7, #120	@ 0x78
 80181de:	4691      	mov	r9, r2
 80181e0:	4680      	mov	r8, r0
 80181e2:	460c      	mov	r4, r1
 80181e4:	469a      	mov	sl, r3
 80181e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80181ea:	d807      	bhi.n	80181fc <_printf_i+0x28>
 80181ec:	2f62      	cmp	r7, #98	@ 0x62
 80181ee:	d80a      	bhi.n	8018206 <_printf_i+0x32>
 80181f0:	2f00      	cmp	r7, #0
 80181f2:	f000 80d2 	beq.w	801839a <_printf_i+0x1c6>
 80181f6:	2f58      	cmp	r7, #88	@ 0x58
 80181f8:	f000 80b9 	beq.w	801836e <_printf_i+0x19a>
 80181fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018204:	e03a      	b.n	801827c <_printf_i+0xa8>
 8018206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801820a:	2b15      	cmp	r3, #21
 801820c:	d8f6      	bhi.n	80181fc <_printf_i+0x28>
 801820e:	a101      	add	r1, pc, #4	@ (adr r1, 8018214 <_printf_i+0x40>)
 8018210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018214:	0801826d 	.word	0x0801826d
 8018218:	08018281 	.word	0x08018281
 801821c:	080181fd 	.word	0x080181fd
 8018220:	080181fd 	.word	0x080181fd
 8018224:	080181fd 	.word	0x080181fd
 8018228:	080181fd 	.word	0x080181fd
 801822c:	08018281 	.word	0x08018281
 8018230:	080181fd 	.word	0x080181fd
 8018234:	080181fd 	.word	0x080181fd
 8018238:	080181fd 	.word	0x080181fd
 801823c:	080181fd 	.word	0x080181fd
 8018240:	08018381 	.word	0x08018381
 8018244:	080182ab 	.word	0x080182ab
 8018248:	0801833b 	.word	0x0801833b
 801824c:	080181fd 	.word	0x080181fd
 8018250:	080181fd 	.word	0x080181fd
 8018254:	080183a3 	.word	0x080183a3
 8018258:	080181fd 	.word	0x080181fd
 801825c:	080182ab 	.word	0x080182ab
 8018260:	080181fd 	.word	0x080181fd
 8018264:	080181fd 	.word	0x080181fd
 8018268:	08018343 	.word	0x08018343
 801826c:	6833      	ldr	r3, [r6, #0]
 801826e:	1d1a      	adds	r2, r3, #4
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	6032      	str	r2, [r6, #0]
 8018274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801827c:	2301      	movs	r3, #1
 801827e:	e09d      	b.n	80183bc <_printf_i+0x1e8>
 8018280:	6833      	ldr	r3, [r6, #0]
 8018282:	6820      	ldr	r0, [r4, #0]
 8018284:	1d19      	adds	r1, r3, #4
 8018286:	6031      	str	r1, [r6, #0]
 8018288:	0606      	lsls	r6, r0, #24
 801828a:	d501      	bpl.n	8018290 <_printf_i+0xbc>
 801828c:	681d      	ldr	r5, [r3, #0]
 801828e:	e003      	b.n	8018298 <_printf_i+0xc4>
 8018290:	0645      	lsls	r5, r0, #25
 8018292:	d5fb      	bpl.n	801828c <_printf_i+0xb8>
 8018294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018298:	2d00      	cmp	r5, #0
 801829a:	da03      	bge.n	80182a4 <_printf_i+0xd0>
 801829c:	232d      	movs	r3, #45	@ 0x2d
 801829e:	426d      	negs	r5, r5
 80182a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80182a4:	4859      	ldr	r0, [pc, #356]	@ (801840c <_printf_i+0x238>)
 80182a6:	230a      	movs	r3, #10
 80182a8:	e011      	b.n	80182ce <_printf_i+0xfa>
 80182aa:	6821      	ldr	r1, [r4, #0]
 80182ac:	6833      	ldr	r3, [r6, #0]
 80182ae:	0608      	lsls	r0, r1, #24
 80182b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80182b4:	d402      	bmi.n	80182bc <_printf_i+0xe8>
 80182b6:	0649      	lsls	r1, r1, #25
 80182b8:	bf48      	it	mi
 80182ba:	b2ad      	uxthmi	r5, r5
 80182bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80182be:	4853      	ldr	r0, [pc, #332]	@ (801840c <_printf_i+0x238>)
 80182c0:	6033      	str	r3, [r6, #0]
 80182c2:	bf14      	ite	ne
 80182c4:	230a      	movne	r3, #10
 80182c6:	2308      	moveq	r3, #8
 80182c8:	2100      	movs	r1, #0
 80182ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80182ce:	6866      	ldr	r6, [r4, #4]
 80182d0:	60a6      	str	r6, [r4, #8]
 80182d2:	2e00      	cmp	r6, #0
 80182d4:	bfa2      	ittt	ge
 80182d6:	6821      	ldrge	r1, [r4, #0]
 80182d8:	f021 0104 	bicge.w	r1, r1, #4
 80182dc:	6021      	strge	r1, [r4, #0]
 80182de:	b90d      	cbnz	r5, 80182e4 <_printf_i+0x110>
 80182e0:	2e00      	cmp	r6, #0
 80182e2:	d04b      	beq.n	801837c <_printf_i+0x1a8>
 80182e4:	4616      	mov	r6, r2
 80182e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80182ea:	fb03 5711 	mls	r7, r3, r1, r5
 80182ee:	5dc7      	ldrb	r7, [r0, r7]
 80182f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80182f4:	462f      	mov	r7, r5
 80182f6:	42bb      	cmp	r3, r7
 80182f8:	460d      	mov	r5, r1
 80182fa:	d9f4      	bls.n	80182e6 <_printf_i+0x112>
 80182fc:	2b08      	cmp	r3, #8
 80182fe:	d10b      	bne.n	8018318 <_printf_i+0x144>
 8018300:	6823      	ldr	r3, [r4, #0]
 8018302:	07df      	lsls	r7, r3, #31
 8018304:	d508      	bpl.n	8018318 <_printf_i+0x144>
 8018306:	6923      	ldr	r3, [r4, #16]
 8018308:	6861      	ldr	r1, [r4, #4]
 801830a:	4299      	cmp	r1, r3
 801830c:	bfde      	ittt	le
 801830e:	2330      	movle	r3, #48	@ 0x30
 8018310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018314:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018318:	1b92      	subs	r2, r2, r6
 801831a:	6122      	str	r2, [r4, #16]
 801831c:	f8cd a000 	str.w	sl, [sp]
 8018320:	464b      	mov	r3, r9
 8018322:	aa03      	add	r2, sp, #12
 8018324:	4621      	mov	r1, r4
 8018326:	4640      	mov	r0, r8
 8018328:	f7ff fee6 	bl	80180f8 <_printf_common>
 801832c:	3001      	adds	r0, #1
 801832e:	d14a      	bne.n	80183c6 <_printf_i+0x1f2>
 8018330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018334:	b004      	add	sp, #16
 8018336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801833a:	6823      	ldr	r3, [r4, #0]
 801833c:	f043 0320 	orr.w	r3, r3, #32
 8018340:	6023      	str	r3, [r4, #0]
 8018342:	4833      	ldr	r0, [pc, #204]	@ (8018410 <_printf_i+0x23c>)
 8018344:	2778      	movs	r7, #120	@ 0x78
 8018346:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801834a:	6823      	ldr	r3, [r4, #0]
 801834c:	6831      	ldr	r1, [r6, #0]
 801834e:	061f      	lsls	r7, r3, #24
 8018350:	f851 5b04 	ldr.w	r5, [r1], #4
 8018354:	d402      	bmi.n	801835c <_printf_i+0x188>
 8018356:	065f      	lsls	r7, r3, #25
 8018358:	bf48      	it	mi
 801835a:	b2ad      	uxthmi	r5, r5
 801835c:	6031      	str	r1, [r6, #0]
 801835e:	07d9      	lsls	r1, r3, #31
 8018360:	bf44      	itt	mi
 8018362:	f043 0320 	orrmi.w	r3, r3, #32
 8018366:	6023      	strmi	r3, [r4, #0]
 8018368:	b11d      	cbz	r5, 8018372 <_printf_i+0x19e>
 801836a:	2310      	movs	r3, #16
 801836c:	e7ac      	b.n	80182c8 <_printf_i+0xf4>
 801836e:	4827      	ldr	r0, [pc, #156]	@ (801840c <_printf_i+0x238>)
 8018370:	e7e9      	b.n	8018346 <_printf_i+0x172>
 8018372:	6823      	ldr	r3, [r4, #0]
 8018374:	f023 0320 	bic.w	r3, r3, #32
 8018378:	6023      	str	r3, [r4, #0]
 801837a:	e7f6      	b.n	801836a <_printf_i+0x196>
 801837c:	4616      	mov	r6, r2
 801837e:	e7bd      	b.n	80182fc <_printf_i+0x128>
 8018380:	6833      	ldr	r3, [r6, #0]
 8018382:	6825      	ldr	r5, [r4, #0]
 8018384:	6961      	ldr	r1, [r4, #20]
 8018386:	1d18      	adds	r0, r3, #4
 8018388:	6030      	str	r0, [r6, #0]
 801838a:	062e      	lsls	r6, r5, #24
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	d501      	bpl.n	8018394 <_printf_i+0x1c0>
 8018390:	6019      	str	r1, [r3, #0]
 8018392:	e002      	b.n	801839a <_printf_i+0x1c6>
 8018394:	0668      	lsls	r0, r5, #25
 8018396:	d5fb      	bpl.n	8018390 <_printf_i+0x1bc>
 8018398:	8019      	strh	r1, [r3, #0]
 801839a:	2300      	movs	r3, #0
 801839c:	6123      	str	r3, [r4, #16]
 801839e:	4616      	mov	r6, r2
 80183a0:	e7bc      	b.n	801831c <_printf_i+0x148>
 80183a2:	6833      	ldr	r3, [r6, #0]
 80183a4:	1d1a      	adds	r2, r3, #4
 80183a6:	6032      	str	r2, [r6, #0]
 80183a8:	681e      	ldr	r6, [r3, #0]
 80183aa:	6862      	ldr	r2, [r4, #4]
 80183ac:	2100      	movs	r1, #0
 80183ae:	4630      	mov	r0, r6
 80183b0:	f7e7 ffae 	bl	8000310 <memchr>
 80183b4:	b108      	cbz	r0, 80183ba <_printf_i+0x1e6>
 80183b6:	1b80      	subs	r0, r0, r6
 80183b8:	6060      	str	r0, [r4, #4]
 80183ba:	6863      	ldr	r3, [r4, #4]
 80183bc:	6123      	str	r3, [r4, #16]
 80183be:	2300      	movs	r3, #0
 80183c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183c4:	e7aa      	b.n	801831c <_printf_i+0x148>
 80183c6:	6923      	ldr	r3, [r4, #16]
 80183c8:	4632      	mov	r2, r6
 80183ca:	4649      	mov	r1, r9
 80183cc:	4640      	mov	r0, r8
 80183ce:	47d0      	blx	sl
 80183d0:	3001      	adds	r0, #1
 80183d2:	d0ad      	beq.n	8018330 <_printf_i+0x15c>
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	079b      	lsls	r3, r3, #30
 80183d8:	d413      	bmi.n	8018402 <_printf_i+0x22e>
 80183da:	68e0      	ldr	r0, [r4, #12]
 80183dc:	9b03      	ldr	r3, [sp, #12]
 80183de:	4298      	cmp	r0, r3
 80183e0:	bfb8      	it	lt
 80183e2:	4618      	movlt	r0, r3
 80183e4:	e7a6      	b.n	8018334 <_printf_i+0x160>
 80183e6:	2301      	movs	r3, #1
 80183e8:	4632      	mov	r2, r6
 80183ea:	4649      	mov	r1, r9
 80183ec:	4640      	mov	r0, r8
 80183ee:	47d0      	blx	sl
 80183f0:	3001      	adds	r0, #1
 80183f2:	d09d      	beq.n	8018330 <_printf_i+0x15c>
 80183f4:	3501      	adds	r5, #1
 80183f6:	68e3      	ldr	r3, [r4, #12]
 80183f8:	9903      	ldr	r1, [sp, #12]
 80183fa:	1a5b      	subs	r3, r3, r1
 80183fc:	42ab      	cmp	r3, r5
 80183fe:	dcf2      	bgt.n	80183e6 <_printf_i+0x212>
 8018400:	e7eb      	b.n	80183da <_printf_i+0x206>
 8018402:	2500      	movs	r5, #0
 8018404:	f104 0619 	add.w	r6, r4, #25
 8018408:	e7f5      	b.n	80183f6 <_printf_i+0x222>
 801840a:	bf00      	nop
 801840c:	080196d1 	.word	0x080196d1
 8018410:	080196e2 	.word	0x080196e2

08018414 <__sflush_r>:
 8018414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801841c:	0716      	lsls	r6, r2, #28
 801841e:	4605      	mov	r5, r0
 8018420:	460c      	mov	r4, r1
 8018422:	d454      	bmi.n	80184ce <__sflush_r+0xba>
 8018424:	684b      	ldr	r3, [r1, #4]
 8018426:	2b00      	cmp	r3, #0
 8018428:	dc02      	bgt.n	8018430 <__sflush_r+0x1c>
 801842a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801842c:	2b00      	cmp	r3, #0
 801842e:	dd48      	ble.n	80184c2 <__sflush_r+0xae>
 8018430:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018432:	2e00      	cmp	r6, #0
 8018434:	d045      	beq.n	80184c2 <__sflush_r+0xae>
 8018436:	2300      	movs	r3, #0
 8018438:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801843c:	682f      	ldr	r7, [r5, #0]
 801843e:	6a21      	ldr	r1, [r4, #32]
 8018440:	602b      	str	r3, [r5, #0]
 8018442:	d030      	beq.n	80184a6 <__sflush_r+0x92>
 8018444:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	0759      	lsls	r1, r3, #29
 801844a:	d505      	bpl.n	8018458 <__sflush_r+0x44>
 801844c:	6863      	ldr	r3, [r4, #4]
 801844e:	1ad2      	subs	r2, r2, r3
 8018450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018452:	b10b      	cbz	r3, 8018458 <__sflush_r+0x44>
 8018454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018456:	1ad2      	subs	r2, r2, r3
 8018458:	2300      	movs	r3, #0
 801845a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801845c:	6a21      	ldr	r1, [r4, #32]
 801845e:	4628      	mov	r0, r5
 8018460:	47b0      	blx	r6
 8018462:	1c43      	adds	r3, r0, #1
 8018464:	89a3      	ldrh	r3, [r4, #12]
 8018466:	d106      	bne.n	8018476 <__sflush_r+0x62>
 8018468:	6829      	ldr	r1, [r5, #0]
 801846a:	291d      	cmp	r1, #29
 801846c:	d82b      	bhi.n	80184c6 <__sflush_r+0xb2>
 801846e:	4a2a      	ldr	r2, [pc, #168]	@ (8018518 <__sflush_r+0x104>)
 8018470:	410a      	asrs	r2, r1
 8018472:	07d6      	lsls	r6, r2, #31
 8018474:	d427      	bmi.n	80184c6 <__sflush_r+0xb2>
 8018476:	2200      	movs	r2, #0
 8018478:	6062      	str	r2, [r4, #4]
 801847a:	04d9      	lsls	r1, r3, #19
 801847c:	6922      	ldr	r2, [r4, #16]
 801847e:	6022      	str	r2, [r4, #0]
 8018480:	d504      	bpl.n	801848c <__sflush_r+0x78>
 8018482:	1c42      	adds	r2, r0, #1
 8018484:	d101      	bne.n	801848a <__sflush_r+0x76>
 8018486:	682b      	ldr	r3, [r5, #0]
 8018488:	b903      	cbnz	r3, 801848c <__sflush_r+0x78>
 801848a:	6560      	str	r0, [r4, #84]	@ 0x54
 801848c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801848e:	602f      	str	r7, [r5, #0]
 8018490:	b1b9      	cbz	r1, 80184c2 <__sflush_r+0xae>
 8018492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018496:	4299      	cmp	r1, r3
 8018498:	d002      	beq.n	80184a0 <__sflush_r+0x8c>
 801849a:	4628      	mov	r0, r5
 801849c:	f7ff fc82 	bl	8017da4 <_free_r>
 80184a0:	2300      	movs	r3, #0
 80184a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80184a4:	e00d      	b.n	80184c2 <__sflush_r+0xae>
 80184a6:	2301      	movs	r3, #1
 80184a8:	4628      	mov	r0, r5
 80184aa:	47b0      	blx	r6
 80184ac:	4602      	mov	r2, r0
 80184ae:	1c50      	adds	r0, r2, #1
 80184b0:	d1c9      	bne.n	8018446 <__sflush_r+0x32>
 80184b2:	682b      	ldr	r3, [r5, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d0c6      	beq.n	8018446 <__sflush_r+0x32>
 80184b8:	2b1d      	cmp	r3, #29
 80184ba:	d001      	beq.n	80184c0 <__sflush_r+0xac>
 80184bc:	2b16      	cmp	r3, #22
 80184be:	d11e      	bne.n	80184fe <__sflush_r+0xea>
 80184c0:	602f      	str	r7, [r5, #0]
 80184c2:	2000      	movs	r0, #0
 80184c4:	e022      	b.n	801850c <__sflush_r+0xf8>
 80184c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ca:	b21b      	sxth	r3, r3
 80184cc:	e01b      	b.n	8018506 <__sflush_r+0xf2>
 80184ce:	690f      	ldr	r7, [r1, #16]
 80184d0:	2f00      	cmp	r7, #0
 80184d2:	d0f6      	beq.n	80184c2 <__sflush_r+0xae>
 80184d4:	0793      	lsls	r3, r2, #30
 80184d6:	680e      	ldr	r6, [r1, #0]
 80184d8:	bf08      	it	eq
 80184da:	694b      	ldreq	r3, [r1, #20]
 80184dc:	600f      	str	r7, [r1, #0]
 80184de:	bf18      	it	ne
 80184e0:	2300      	movne	r3, #0
 80184e2:	eba6 0807 	sub.w	r8, r6, r7
 80184e6:	608b      	str	r3, [r1, #8]
 80184e8:	f1b8 0f00 	cmp.w	r8, #0
 80184ec:	dde9      	ble.n	80184c2 <__sflush_r+0xae>
 80184ee:	6a21      	ldr	r1, [r4, #32]
 80184f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80184f2:	4643      	mov	r3, r8
 80184f4:	463a      	mov	r2, r7
 80184f6:	4628      	mov	r0, r5
 80184f8:	47b0      	blx	r6
 80184fa:	2800      	cmp	r0, #0
 80184fc:	dc08      	bgt.n	8018510 <__sflush_r+0xfc>
 80184fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018506:	81a3      	strh	r3, [r4, #12]
 8018508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018510:	4407      	add	r7, r0
 8018512:	eba8 0800 	sub.w	r8, r8, r0
 8018516:	e7e7      	b.n	80184e8 <__sflush_r+0xd4>
 8018518:	dfbffffe 	.word	0xdfbffffe

0801851c <_fflush_r>:
 801851c:	b538      	push	{r3, r4, r5, lr}
 801851e:	690b      	ldr	r3, [r1, #16]
 8018520:	4605      	mov	r5, r0
 8018522:	460c      	mov	r4, r1
 8018524:	b913      	cbnz	r3, 801852c <_fflush_r+0x10>
 8018526:	2500      	movs	r5, #0
 8018528:	4628      	mov	r0, r5
 801852a:	bd38      	pop	{r3, r4, r5, pc}
 801852c:	b118      	cbz	r0, 8018536 <_fflush_r+0x1a>
 801852e:	6a03      	ldr	r3, [r0, #32]
 8018530:	b90b      	cbnz	r3, 8018536 <_fflush_r+0x1a>
 8018532:	f7ff f9f9 	bl	8017928 <__sinit>
 8018536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d0f3      	beq.n	8018526 <_fflush_r+0xa>
 801853e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018540:	07d0      	lsls	r0, r2, #31
 8018542:	d404      	bmi.n	801854e <_fflush_r+0x32>
 8018544:	0599      	lsls	r1, r3, #22
 8018546:	d402      	bmi.n	801854e <_fflush_r+0x32>
 8018548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801854a:	f7ff fbe8 	bl	8017d1e <__retarget_lock_acquire_recursive>
 801854e:	4628      	mov	r0, r5
 8018550:	4621      	mov	r1, r4
 8018552:	f7ff ff5f 	bl	8018414 <__sflush_r>
 8018556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018558:	07da      	lsls	r2, r3, #31
 801855a:	4605      	mov	r5, r0
 801855c:	d4e4      	bmi.n	8018528 <_fflush_r+0xc>
 801855e:	89a3      	ldrh	r3, [r4, #12]
 8018560:	059b      	lsls	r3, r3, #22
 8018562:	d4e1      	bmi.n	8018528 <_fflush_r+0xc>
 8018564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018566:	f7ff fbdb 	bl	8017d20 <__retarget_lock_release_recursive>
 801856a:	e7dd      	b.n	8018528 <_fflush_r+0xc>

0801856c <fiprintf>:
 801856c:	b40e      	push	{r1, r2, r3}
 801856e:	b503      	push	{r0, r1, lr}
 8018570:	4601      	mov	r1, r0
 8018572:	ab03      	add	r3, sp, #12
 8018574:	4805      	ldr	r0, [pc, #20]	@ (801858c <fiprintf+0x20>)
 8018576:	f853 2b04 	ldr.w	r2, [r3], #4
 801857a:	6800      	ldr	r0, [r0, #0]
 801857c:	9301      	str	r3, [sp, #4]
 801857e:	f000 f851 	bl	8018624 <_vfiprintf_r>
 8018582:	b002      	add	sp, #8
 8018584:	f85d eb04 	ldr.w	lr, [sp], #4
 8018588:	b003      	add	sp, #12
 801858a:	4770      	bx	lr
 801858c:	240000c4 	.word	0x240000c4

08018590 <memmove>:
 8018590:	4288      	cmp	r0, r1
 8018592:	b510      	push	{r4, lr}
 8018594:	eb01 0402 	add.w	r4, r1, r2
 8018598:	d902      	bls.n	80185a0 <memmove+0x10>
 801859a:	4284      	cmp	r4, r0
 801859c:	4623      	mov	r3, r4
 801859e:	d807      	bhi.n	80185b0 <memmove+0x20>
 80185a0:	1e43      	subs	r3, r0, #1
 80185a2:	42a1      	cmp	r1, r4
 80185a4:	d008      	beq.n	80185b8 <memmove+0x28>
 80185a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185ae:	e7f8      	b.n	80185a2 <memmove+0x12>
 80185b0:	4402      	add	r2, r0
 80185b2:	4601      	mov	r1, r0
 80185b4:	428a      	cmp	r2, r1
 80185b6:	d100      	bne.n	80185ba <memmove+0x2a>
 80185b8:	bd10      	pop	{r4, pc}
 80185ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185c2:	e7f7      	b.n	80185b4 <memmove+0x24>

080185c4 <abort>:
 80185c4:	b508      	push	{r3, lr}
 80185c6:	2006      	movs	r0, #6
 80185c8:	f000 fa00 	bl	80189cc <raise>
 80185cc:	2001      	movs	r0, #1
 80185ce:	f7e9 fa19 	bl	8001a04 <_exit>

080185d2 <__sfputc_r>:
 80185d2:	6893      	ldr	r3, [r2, #8]
 80185d4:	3b01      	subs	r3, #1
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	b410      	push	{r4}
 80185da:	6093      	str	r3, [r2, #8]
 80185dc:	da08      	bge.n	80185f0 <__sfputc_r+0x1e>
 80185de:	6994      	ldr	r4, [r2, #24]
 80185e0:	42a3      	cmp	r3, r4
 80185e2:	db01      	blt.n	80185e8 <__sfputc_r+0x16>
 80185e4:	290a      	cmp	r1, #10
 80185e6:	d103      	bne.n	80185f0 <__sfputc_r+0x1e>
 80185e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185ec:	f000 b932 	b.w	8018854 <__swbuf_r>
 80185f0:	6813      	ldr	r3, [r2, #0]
 80185f2:	1c58      	adds	r0, r3, #1
 80185f4:	6010      	str	r0, [r2, #0]
 80185f6:	7019      	strb	r1, [r3, #0]
 80185f8:	4608      	mov	r0, r1
 80185fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185fe:	4770      	bx	lr

08018600 <__sfputs_r>:
 8018600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018602:	4606      	mov	r6, r0
 8018604:	460f      	mov	r7, r1
 8018606:	4614      	mov	r4, r2
 8018608:	18d5      	adds	r5, r2, r3
 801860a:	42ac      	cmp	r4, r5
 801860c:	d101      	bne.n	8018612 <__sfputs_r+0x12>
 801860e:	2000      	movs	r0, #0
 8018610:	e007      	b.n	8018622 <__sfputs_r+0x22>
 8018612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018616:	463a      	mov	r2, r7
 8018618:	4630      	mov	r0, r6
 801861a:	f7ff ffda 	bl	80185d2 <__sfputc_r>
 801861e:	1c43      	adds	r3, r0, #1
 8018620:	d1f3      	bne.n	801860a <__sfputs_r+0xa>
 8018622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018624 <_vfiprintf_r>:
 8018624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018628:	460d      	mov	r5, r1
 801862a:	b09d      	sub	sp, #116	@ 0x74
 801862c:	4614      	mov	r4, r2
 801862e:	4698      	mov	r8, r3
 8018630:	4606      	mov	r6, r0
 8018632:	b118      	cbz	r0, 801863c <_vfiprintf_r+0x18>
 8018634:	6a03      	ldr	r3, [r0, #32]
 8018636:	b90b      	cbnz	r3, 801863c <_vfiprintf_r+0x18>
 8018638:	f7ff f976 	bl	8017928 <__sinit>
 801863c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801863e:	07d9      	lsls	r1, r3, #31
 8018640:	d405      	bmi.n	801864e <_vfiprintf_r+0x2a>
 8018642:	89ab      	ldrh	r3, [r5, #12]
 8018644:	059a      	lsls	r2, r3, #22
 8018646:	d402      	bmi.n	801864e <_vfiprintf_r+0x2a>
 8018648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801864a:	f7ff fb68 	bl	8017d1e <__retarget_lock_acquire_recursive>
 801864e:	89ab      	ldrh	r3, [r5, #12]
 8018650:	071b      	lsls	r3, r3, #28
 8018652:	d501      	bpl.n	8018658 <_vfiprintf_r+0x34>
 8018654:	692b      	ldr	r3, [r5, #16]
 8018656:	b99b      	cbnz	r3, 8018680 <_vfiprintf_r+0x5c>
 8018658:	4629      	mov	r1, r5
 801865a:	4630      	mov	r0, r6
 801865c:	f000 f938 	bl	80188d0 <__swsetup_r>
 8018660:	b170      	cbz	r0, 8018680 <_vfiprintf_r+0x5c>
 8018662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018664:	07dc      	lsls	r4, r3, #31
 8018666:	d504      	bpl.n	8018672 <_vfiprintf_r+0x4e>
 8018668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801866c:	b01d      	add	sp, #116	@ 0x74
 801866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018672:	89ab      	ldrh	r3, [r5, #12]
 8018674:	0598      	lsls	r0, r3, #22
 8018676:	d4f7      	bmi.n	8018668 <_vfiprintf_r+0x44>
 8018678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801867a:	f7ff fb51 	bl	8017d20 <__retarget_lock_release_recursive>
 801867e:	e7f3      	b.n	8018668 <_vfiprintf_r+0x44>
 8018680:	2300      	movs	r3, #0
 8018682:	9309      	str	r3, [sp, #36]	@ 0x24
 8018684:	2320      	movs	r3, #32
 8018686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801868a:	f8cd 800c 	str.w	r8, [sp, #12]
 801868e:	2330      	movs	r3, #48	@ 0x30
 8018690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018840 <_vfiprintf_r+0x21c>
 8018694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018698:	f04f 0901 	mov.w	r9, #1
 801869c:	4623      	mov	r3, r4
 801869e:	469a      	mov	sl, r3
 80186a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186a4:	b10a      	cbz	r2, 80186aa <_vfiprintf_r+0x86>
 80186a6:	2a25      	cmp	r2, #37	@ 0x25
 80186a8:	d1f9      	bne.n	801869e <_vfiprintf_r+0x7a>
 80186aa:	ebba 0b04 	subs.w	fp, sl, r4
 80186ae:	d00b      	beq.n	80186c8 <_vfiprintf_r+0xa4>
 80186b0:	465b      	mov	r3, fp
 80186b2:	4622      	mov	r2, r4
 80186b4:	4629      	mov	r1, r5
 80186b6:	4630      	mov	r0, r6
 80186b8:	f7ff ffa2 	bl	8018600 <__sfputs_r>
 80186bc:	3001      	adds	r0, #1
 80186be:	f000 80a7 	beq.w	8018810 <_vfiprintf_r+0x1ec>
 80186c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186c4:	445a      	add	r2, fp
 80186c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80186c8:	f89a 3000 	ldrb.w	r3, [sl]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	f000 809f 	beq.w	8018810 <_vfiprintf_r+0x1ec>
 80186d2:	2300      	movs	r3, #0
 80186d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80186d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80186dc:	f10a 0a01 	add.w	sl, sl, #1
 80186e0:	9304      	str	r3, [sp, #16]
 80186e2:	9307      	str	r3, [sp, #28]
 80186e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80186e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80186ea:	4654      	mov	r4, sl
 80186ec:	2205      	movs	r2, #5
 80186ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186f2:	4853      	ldr	r0, [pc, #332]	@ (8018840 <_vfiprintf_r+0x21c>)
 80186f4:	f7e7 fe0c 	bl	8000310 <memchr>
 80186f8:	9a04      	ldr	r2, [sp, #16]
 80186fa:	b9d8      	cbnz	r0, 8018734 <_vfiprintf_r+0x110>
 80186fc:	06d1      	lsls	r1, r2, #27
 80186fe:	bf44      	itt	mi
 8018700:	2320      	movmi	r3, #32
 8018702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018706:	0713      	lsls	r3, r2, #28
 8018708:	bf44      	itt	mi
 801870a:	232b      	movmi	r3, #43	@ 0x2b
 801870c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018710:	f89a 3000 	ldrb.w	r3, [sl]
 8018714:	2b2a      	cmp	r3, #42	@ 0x2a
 8018716:	d015      	beq.n	8018744 <_vfiprintf_r+0x120>
 8018718:	9a07      	ldr	r2, [sp, #28]
 801871a:	4654      	mov	r4, sl
 801871c:	2000      	movs	r0, #0
 801871e:	f04f 0c0a 	mov.w	ip, #10
 8018722:	4621      	mov	r1, r4
 8018724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018728:	3b30      	subs	r3, #48	@ 0x30
 801872a:	2b09      	cmp	r3, #9
 801872c:	d94b      	bls.n	80187c6 <_vfiprintf_r+0x1a2>
 801872e:	b1b0      	cbz	r0, 801875e <_vfiprintf_r+0x13a>
 8018730:	9207      	str	r2, [sp, #28]
 8018732:	e014      	b.n	801875e <_vfiprintf_r+0x13a>
 8018734:	eba0 0308 	sub.w	r3, r0, r8
 8018738:	fa09 f303 	lsl.w	r3, r9, r3
 801873c:	4313      	orrs	r3, r2
 801873e:	9304      	str	r3, [sp, #16]
 8018740:	46a2      	mov	sl, r4
 8018742:	e7d2      	b.n	80186ea <_vfiprintf_r+0xc6>
 8018744:	9b03      	ldr	r3, [sp, #12]
 8018746:	1d19      	adds	r1, r3, #4
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	9103      	str	r1, [sp, #12]
 801874c:	2b00      	cmp	r3, #0
 801874e:	bfbb      	ittet	lt
 8018750:	425b      	neglt	r3, r3
 8018752:	f042 0202 	orrlt.w	r2, r2, #2
 8018756:	9307      	strge	r3, [sp, #28]
 8018758:	9307      	strlt	r3, [sp, #28]
 801875a:	bfb8      	it	lt
 801875c:	9204      	strlt	r2, [sp, #16]
 801875e:	7823      	ldrb	r3, [r4, #0]
 8018760:	2b2e      	cmp	r3, #46	@ 0x2e
 8018762:	d10a      	bne.n	801877a <_vfiprintf_r+0x156>
 8018764:	7863      	ldrb	r3, [r4, #1]
 8018766:	2b2a      	cmp	r3, #42	@ 0x2a
 8018768:	d132      	bne.n	80187d0 <_vfiprintf_r+0x1ac>
 801876a:	9b03      	ldr	r3, [sp, #12]
 801876c:	1d1a      	adds	r2, r3, #4
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	9203      	str	r2, [sp, #12]
 8018772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018776:	3402      	adds	r4, #2
 8018778:	9305      	str	r3, [sp, #20]
 801877a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018850 <_vfiprintf_r+0x22c>
 801877e:	7821      	ldrb	r1, [r4, #0]
 8018780:	2203      	movs	r2, #3
 8018782:	4650      	mov	r0, sl
 8018784:	f7e7 fdc4 	bl	8000310 <memchr>
 8018788:	b138      	cbz	r0, 801879a <_vfiprintf_r+0x176>
 801878a:	9b04      	ldr	r3, [sp, #16]
 801878c:	eba0 000a 	sub.w	r0, r0, sl
 8018790:	2240      	movs	r2, #64	@ 0x40
 8018792:	4082      	lsls	r2, r0
 8018794:	4313      	orrs	r3, r2
 8018796:	3401      	adds	r4, #1
 8018798:	9304      	str	r3, [sp, #16]
 801879a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801879e:	4829      	ldr	r0, [pc, #164]	@ (8018844 <_vfiprintf_r+0x220>)
 80187a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80187a4:	2206      	movs	r2, #6
 80187a6:	f7e7 fdb3 	bl	8000310 <memchr>
 80187aa:	2800      	cmp	r0, #0
 80187ac:	d03f      	beq.n	801882e <_vfiprintf_r+0x20a>
 80187ae:	4b26      	ldr	r3, [pc, #152]	@ (8018848 <_vfiprintf_r+0x224>)
 80187b0:	bb1b      	cbnz	r3, 80187fa <_vfiprintf_r+0x1d6>
 80187b2:	9b03      	ldr	r3, [sp, #12]
 80187b4:	3307      	adds	r3, #7
 80187b6:	f023 0307 	bic.w	r3, r3, #7
 80187ba:	3308      	adds	r3, #8
 80187bc:	9303      	str	r3, [sp, #12]
 80187be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187c0:	443b      	add	r3, r7
 80187c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80187c4:	e76a      	b.n	801869c <_vfiprintf_r+0x78>
 80187c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80187ca:	460c      	mov	r4, r1
 80187cc:	2001      	movs	r0, #1
 80187ce:	e7a8      	b.n	8018722 <_vfiprintf_r+0xfe>
 80187d0:	2300      	movs	r3, #0
 80187d2:	3401      	adds	r4, #1
 80187d4:	9305      	str	r3, [sp, #20]
 80187d6:	4619      	mov	r1, r3
 80187d8:	f04f 0c0a 	mov.w	ip, #10
 80187dc:	4620      	mov	r0, r4
 80187de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187e2:	3a30      	subs	r2, #48	@ 0x30
 80187e4:	2a09      	cmp	r2, #9
 80187e6:	d903      	bls.n	80187f0 <_vfiprintf_r+0x1cc>
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d0c6      	beq.n	801877a <_vfiprintf_r+0x156>
 80187ec:	9105      	str	r1, [sp, #20]
 80187ee:	e7c4      	b.n	801877a <_vfiprintf_r+0x156>
 80187f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80187f4:	4604      	mov	r4, r0
 80187f6:	2301      	movs	r3, #1
 80187f8:	e7f0      	b.n	80187dc <_vfiprintf_r+0x1b8>
 80187fa:	ab03      	add	r3, sp, #12
 80187fc:	9300      	str	r3, [sp, #0]
 80187fe:	462a      	mov	r2, r5
 8018800:	4b12      	ldr	r3, [pc, #72]	@ (801884c <_vfiprintf_r+0x228>)
 8018802:	a904      	add	r1, sp, #16
 8018804:	4630      	mov	r0, r6
 8018806:	f3af 8000 	nop.w
 801880a:	4607      	mov	r7, r0
 801880c:	1c78      	adds	r0, r7, #1
 801880e:	d1d6      	bne.n	80187be <_vfiprintf_r+0x19a>
 8018810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018812:	07d9      	lsls	r1, r3, #31
 8018814:	d405      	bmi.n	8018822 <_vfiprintf_r+0x1fe>
 8018816:	89ab      	ldrh	r3, [r5, #12]
 8018818:	059a      	lsls	r2, r3, #22
 801881a:	d402      	bmi.n	8018822 <_vfiprintf_r+0x1fe>
 801881c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801881e:	f7ff fa7f 	bl	8017d20 <__retarget_lock_release_recursive>
 8018822:	89ab      	ldrh	r3, [r5, #12]
 8018824:	065b      	lsls	r3, r3, #25
 8018826:	f53f af1f 	bmi.w	8018668 <_vfiprintf_r+0x44>
 801882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801882c:	e71e      	b.n	801866c <_vfiprintf_r+0x48>
 801882e:	ab03      	add	r3, sp, #12
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	462a      	mov	r2, r5
 8018834:	4b05      	ldr	r3, [pc, #20]	@ (801884c <_vfiprintf_r+0x228>)
 8018836:	a904      	add	r1, sp, #16
 8018838:	4630      	mov	r0, r6
 801883a:	f7ff fccb 	bl	80181d4 <_printf_i>
 801883e:	e7e4      	b.n	801880a <_vfiprintf_r+0x1e6>
 8018840:	080196c0 	.word	0x080196c0
 8018844:	080196ca 	.word	0x080196ca
 8018848:	00000000 	.word	0x00000000
 801884c:	08018601 	.word	0x08018601
 8018850:	080196c6 	.word	0x080196c6

08018854 <__swbuf_r>:
 8018854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018856:	460e      	mov	r6, r1
 8018858:	4614      	mov	r4, r2
 801885a:	4605      	mov	r5, r0
 801885c:	b118      	cbz	r0, 8018866 <__swbuf_r+0x12>
 801885e:	6a03      	ldr	r3, [r0, #32]
 8018860:	b90b      	cbnz	r3, 8018866 <__swbuf_r+0x12>
 8018862:	f7ff f861 	bl	8017928 <__sinit>
 8018866:	69a3      	ldr	r3, [r4, #24]
 8018868:	60a3      	str	r3, [r4, #8]
 801886a:	89a3      	ldrh	r3, [r4, #12]
 801886c:	071a      	lsls	r2, r3, #28
 801886e:	d501      	bpl.n	8018874 <__swbuf_r+0x20>
 8018870:	6923      	ldr	r3, [r4, #16]
 8018872:	b943      	cbnz	r3, 8018886 <__swbuf_r+0x32>
 8018874:	4621      	mov	r1, r4
 8018876:	4628      	mov	r0, r5
 8018878:	f000 f82a 	bl	80188d0 <__swsetup_r>
 801887c:	b118      	cbz	r0, 8018886 <__swbuf_r+0x32>
 801887e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018882:	4638      	mov	r0, r7
 8018884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018886:	6823      	ldr	r3, [r4, #0]
 8018888:	6922      	ldr	r2, [r4, #16]
 801888a:	1a98      	subs	r0, r3, r2
 801888c:	6963      	ldr	r3, [r4, #20]
 801888e:	b2f6      	uxtb	r6, r6
 8018890:	4283      	cmp	r3, r0
 8018892:	4637      	mov	r7, r6
 8018894:	dc05      	bgt.n	80188a2 <__swbuf_r+0x4e>
 8018896:	4621      	mov	r1, r4
 8018898:	4628      	mov	r0, r5
 801889a:	f7ff fe3f 	bl	801851c <_fflush_r>
 801889e:	2800      	cmp	r0, #0
 80188a0:	d1ed      	bne.n	801887e <__swbuf_r+0x2a>
 80188a2:	68a3      	ldr	r3, [r4, #8]
 80188a4:	3b01      	subs	r3, #1
 80188a6:	60a3      	str	r3, [r4, #8]
 80188a8:	6823      	ldr	r3, [r4, #0]
 80188aa:	1c5a      	adds	r2, r3, #1
 80188ac:	6022      	str	r2, [r4, #0]
 80188ae:	701e      	strb	r6, [r3, #0]
 80188b0:	6962      	ldr	r2, [r4, #20]
 80188b2:	1c43      	adds	r3, r0, #1
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d004      	beq.n	80188c2 <__swbuf_r+0x6e>
 80188b8:	89a3      	ldrh	r3, [r4, #12]
 80188ba:	07db      	lsls	r3, r3, #31
 80188bc:	d5e1      	bpl.n	8018882 <__swbuf_r+0x2e>
 80188be:	2e0a      	cmp	r6, #10
 80188c0:	d1df      	bne.n	8018882 <__swbuf_r+0x2e>
 80188c2:	4621      	mov	r1, r4
 80188c4:	4628      	mov	r0, r5
 80188c6:	f7ff fe29 	bl	801851c <_fflush_r>
 80188ca:	2800      	cmp	r0, #0
 80188cc:	d0d9      	beq.n	8018882 <__swbuf_r+0x2e>
 80188ce:	e7d6      	b.n	801887e <__swbuf_r+0x2a>

080188d0 <__swsetup_r>:
 80188d0:	b538      	push	{r3, r4, r5, lr}
 80188d2:	4b29      	ldr	r3, [pc, #164]	@ (8018978 <__swsetup_r+0xa8>)
 80188d4:	4605      	mov	r5, r0
 80188d6:	6818      	ldr	r0, [r3, #0]
 80188d8:	460c      	mov	r4, r1
 80188da:	b118      	cbz	r0, 80188e4 <__swsetup_r+0x14>
 80188dc:	6a03      	ldr	r3, [r0, #32]
 80188de:	b90b      	cbnz	r3, 80188e4 <__swsetup_r+0x14>
 80188e0:	f7ff f822 	bl	8017928 <__sinit>
 80188e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e8:	0719      	lsls	r1, r3, #28
 80188ea:	d422      	bmi.n	8018932 <__swsetup_r+0x62>
 80188ec:	06da      	lsls	r2, r3, #27
 80188ee:	d407      	bmi.n	8018900 <__swsetup_r+0x30>
 80188f0:	2209      	movs	r2, #9
 80188f2:	602a      	str	r2, [r5, #0]
 80188f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188f8:	81a3      	strh	r3, [r4, #12]
 80188fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188fe:	e033      	b.n	8018968 <__swsetup_r+0x98>
 8018900:	0758      	lsls	r0, r3, #29
 8018902:	d512      	bpl.n	801892a <__swsetup_r+0x5a>
 8018904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018906:	b141      	cbz	r1, 801891a <__swsetup_r+0x4a>
 8018908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801890c:	4299      	cmp	r1, r3
 801890e:	d002      	beq.n	8018916 <__swsetup_r+0x46>
 8018910:	4628      	mov	r0, r5
 8018912:	f7ff fa47 	bl	8017da4 <_free_r>
 8018916:	2300      	movs	r3, #0
 8018918:	6363      	str	r3, [r4, #52]	@ 0x34
 801891a:	89a3      	ldrh	r3, [r4, #12]
 801891c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018920:	81a3      	strh	r3, [r4, #12]
 8018922:	2300      	movs	r3, #0
 8018924:	6063      	str	r3, [r4, #4]
 8018926:	6923      	ldr	r3, [r4, #16]
 8018928:	6023      	str	r3, [r4, #0]
 801892a:	89a3      	ldrh	r3, [r4, #12]
 801892c:	f043 0308 	orr.w	r3, r3, #8
 8018930:	81a3      	strh	r3, [r4, #12]
 8018932:	6923      	ldr	r3, [r4, #16]
 8018934:	b94b      	cbnz	r3, 801894a <__swsetup_r+0x7a>
 8018936:	89a3      	ldrh	r3, [r4, #12]
 8018938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801893c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018940:	d003      	beq.n	801894a <__swsetup_r+0x7a>
 8018942:	4621      	mov	r1, r4
 8018944:	4628      	mov	r0, r5
 8018946:	f000 f883 	bl	8018a50 <__smakebuf_r>
 801894a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801894e:	f013 0201 	ands.w	r2, r3, #1
 8018952:	d00a      	beq.n	801896a <__swsetup_r+0x9a>
 8018954:	2200      	movs	r2, #0
 8018956:	60a2      	str	r2, [r4, #8]
 8018958:	6962      	ldr	r2, [r4, #20]
 801895a:	4252      	negs	r2, r2
 801895c:	61a2      	str	r2, [r4, #24]
 801895e:	6922      	ldr	r2, [r4, #16]
 8018960:	b942      	cbnz	r2, 8018974 <__swsetup_r+0xa4>
 8018962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018966:	d1c5      	bne.n	80188f4 <__swsetup_r+0x24>
 8018968:	bd38      	pop	{r3, r4, r5, pc}
 801896a:	0799      	lsls	r1, r3, #30
 801896c:	bf58      	it	pl
 801896e:	6962      	ldrpl	r2, [r4, #20]
 8018970:	60a2      	str	r2, [r4, #8]
 8018972:	e7f4      	b.n	801895e <__swsetup_r+0x8e>
 8018974:	2000      	movs	r0, #0
 8018976:	e7f7      	b.n	8018968 <__swsetup_r+0x98>
 8018978:	240000c4 	.word	0x240000c4

0801897c <_raise_r>:
 801897c:	291f      	cmp	r1, #31
 801897e:	b538      	push	{r3, r4, r5, lr}
 8018980:	4605      	mov	r5, r0
 8018982:	460c      	mov	r4, r1
 8018984:	d904      	bls.n	8018990 <_raise_r+0x14>
 8018986:	2316      	movs	r3, #22
 8018988:	6003      	str	r3, [r0, #0]
 801898a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801898e:	bd38      	pop	{r3, r4, r5, pc}
 8018990:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018992:	b112      	cbz	r2, 801899a <_raise_r+0x1e>
 8018994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018998:	b94b      	cbnz	r3, 80189ae <_raise_r+0x32>
 801899a:	4628      	mov	r0, r5
 801899c:	f000 f830 	bl	8018a00 <_getpid_r>
 80189a0:	4622      	mov	r2, r4
 80189a2:	4601      	mov	r1, r0
 80189a4:	4628      	mov	r0, r5
 80189a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189aa:	f000 b817 	b.w	80189dc <_kill_r>
 80189ae:	2b01      	cmp	r3, #1
 80189b0:	d00a      	beq.n	80189c8 <_raise_r+0x4c>
 80189b2:	1c59      	adds	r1, r3, #1
 80189b4:	d103      	bne.n	80189be <_raise_r+0x42>
 80189b6:	2316      	movs	r3, #22
 80189b8:	6003      	str	r3, [r0, #0]
 80189ba:	2001      	movs	r0, #1
 80189bc:	e7e7      	b.n	801898e <_raise_r+0x12>
 80189be:	2100      	movs	r1, #0
 80189c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80189c4:	4620      	mov	r0, r4
 80189c6:	4798      	blx	r3
 80189c8:	2000      	movs	r0, #0
 80189ca:	e7e0      	b.n	801898e <_raise_r+0x12>

080189cc <raise>:
 80189cc:	4b02      	ldr	r3, [pc, #8]	@ (80189d8 <raise+0xc>)
 80189ce:	4601      	mov	r1, r0
 80189d0:	6818      	ldr	r0, [r3, #0]
 80189d2:	f7ff bfd3 	b.w	801897c <_raise_r>
 80189d6:	bf00      	nop
 80189d8:	240000c4 	.word	0x240000c4

080189dc <_kill_r>:
 80189dc:	b538      	push	{r3, r4, r5, lr}
 80189de:	4d07      	ldr	r5, [pc, #28]	@ (80189fc <_kill_r+0x20>)
 80189e0:	2300      	movs	r3, #0
 80189e2:	4604      	mov	r4, r0
 80189e4:	4608      	mov	r0, r1
 80189e6:	4611      	mov	r1, r2
 80189e8:	602b      	str	r3, [r5, #0]
 80189ea:	f7e8 fffb 	bl	80019e4 <_kill>
 80189ee:	1c43      	adds	r3, r0, #1
 80189f0:	d102      	bne.n	80189f8 <_kill_r+0x1c>
 80189f2:	682b      	ldr	r3, [r5, #0]
 80189f4:	b103      	cbz	r3, 80189f8 <_kill_r+0x1c>
 80189f6:	6023      	str	r3, [r4, #0]
 80189f8:	bd38      	pop	{r3, r4, r5, pc}
 80189fa:	bf00      	nop
 80189fc:	24068688 	.word	0x24068688

08018a00 <_getpid_r>:
 8018a00:	f7e8 bfe8 	b.w	80019d4 <_getpid>

08018a04 <__swhatbuf_r>:
 8018a04:	b570      	push	{r4, r5, r6, lr}
 8018a06:	460c      	mov	r4, r1
 8018a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a0c:	2900      	cmp	r1, #0
 8018a0e:	b096      	sub	sp, #88	@ 0x58
 8018a10:	4615      	mov	r5, r2
 8018a12:	461e      	mov	r6, r3
 8018a14:	da0d      	bge.n	8018a32 <__swhatbuf_r+0x2e>
 8018a16:	89a3      	ldrh	r3, [r4, #12]
 8018a18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018a1c:	f04f 0100 	mov.w	r1, #0
 8018a20:	bf14      	ite	ne
 8018a22:	2340      	movne	r3, #64	@ 0x40
 8018a24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018a28:	2000      	movs	r0, #0
 8018a2a:	6031      	str	r1, [r6, #0]
 8018a2c:	602b      	str	r3, [r5, #0]
 8018a2e:	b016      	add	sp, #88	@ 0x58
 8018a30:	bd70      	pop	{r4, r5, r6, pc}
 8018a32:	466a      	mov	r2, sp
 8018a34:	f000 f848 	bl	8018ac8 <_fstat_r>
 8018a38:	2800      	cmp	r0, #0
 8018a3a:	dbec      	blt.n	8018a16 <__swhatbuf_r+0x12>
 8018a3c:	9901      	ldr	r1, [sp, #4]
 8018a3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018a42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018a46:	4259      	negs	r1, r3
 8018a48:	4159      	adcs	r1, r3
 8018a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018a4e:	e7eb      	b.n	8018a28 <__swhatbuf_r+0x24>

08018a50 <__smakebuf_r>:
 8018a50:	898b      	ldrh	r3, [r1, #12]
 8018a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a54:	079d      	lsls	r5, r3, #30
 8018a56:	4606      	mov	r6, r0
 8018a58:	460c      	mov	r4, r1
 8018a5a:	d507      	bpl.n	8018a6c <__smakebuf_r+0x1c>
 8018a5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018a60:	6023      	str	r3, [r4, #0]
 8018a62:	6123      	str	r3, [r4, #16]
 8018a64:	2301      	movs	r3, #1
 8018a66:	6163      	str	r3, [r4, #20]
 8018a68:	b003      	add	sp, #12
 8018a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a6c:	ab01      	add	r3, sp, #4
 8018a6e:	466a      	mov	r2, sp
 8018a70:	f7ff ffc8 	bl	8018a04 <__swhatbuf_r>
 8018a74:	9f00      	ldr	r7, [sp, #0]
 8018a76:	4605      	mov	r5, r0
 8018a78:	4639      	mov	r1, r7
 8018a7a:	4630      	mov	r0, r6
 8018a7c:	f7fe fd22 	bl	80174c4 <_malloc_r>
 8018a80:	b948      	cbnz	r0, 8018a96 <__smakebuf_r+0x46>
 8018a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a86:	059a      	lsls	r2, r3, #22
 8018a88:	d4ee      	bmi.n	8018a68 <__smakebuf_r+0x18>
 8018a8a:	f023 0303 	bic.w	r3, r3, #3
 8018a8e:	f043 0302 	orr.w	r3, r3, #2
 8018a92:	81a3      	strh	r3, [r4, #12]
 8018a94:	e7e2      	b.n	8018a5c <__smakebuf_r+0xc>
 8018a96:	89a3      	ldrh	r3, [r4, #12]
 8018a98:	6020      	str	r0, [r4, #0]
 8018a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a9e:	81a3      	strh	r3, [r4, #12]
 8018aa0:	9b01      	ldr	r3, [sp, #4]
 8018aa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018aa6:	b15b      	cbz	r3, 8018ac0 <__smakebuf_r+0x70>
 8018aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018aac:	4630      	mov	r0, r6
 8018aae:	f000 f81d 	bl	8018aec <_isatty_r>
 8018ab2:	b128      	cbz	r0, 8018ac0 <__smakebuf_r+0x70>
 8018ab4:	89a3      	ldrh	r3, [r4, #12]
 8018ab6:	f023 0303 	bic.w	r3, r3, #3
 8018aba:	f043 0301 	orr.w	r3, r3, #1
 8018abe:	81a3      	strh	r3, [r4, #12]
 8018ac0:	89a3      	ldrh	r3, [r4, #12]
 8018ac2:	431d      	orrs	r5, r3
 8018ac4:	81a5      	strh	r5, [r4, #12]
 8018ac6:	e7cf      	b.n	8018a68 <__smakebuf_r+0x18>

08018ac8 <_fstat_r>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4d07      	ldr	r5, [pc, #28]	@ (8018ae8 <_fstat_r+0x20>)
 8018acc:	2300      	movs	r3, #0
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	4611      	mov	r1, r2
 8018ad4:	602b      	str	r3, [r5, #0]
 8018ad6:	f7e8 ffe5 	bl	8001aa4 <_fstat>
 8018ada:	1c43      	adds	r3, r0, #1
 8018adc:	d102      	bne.n	8018ae4 <_fstat_r+0x1c>
 8018ade:	682b      	ldr	r3, [r5, #0]
 8018ae0:	b103      	cbz	r3, 8018ae4 <_fstat_r+0x1c>
 8018ae2:	6023      	str	r3, [r4, #0]
 8018ae4:	bd38      	pop	{r3, r4, r5, pc}
 8018ae6:	bf00      	nop
 8018ae8:	24068688 	.word	0x24068688

08018aec <_isatty_r>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4d06      	ldr	r5, [pc, #24]	@ (8018b08 <_isatty_r+0x1c>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	4604      	mov	r4, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	602b      	str	r3, [r5, #0]
 8018af8:	f7e8 ffe4 	bl	8001ac4 <_isatty>
 8018afc:	1c43      	adds	r3, r0, #1
 8018afe:	d102      	bne.n	8018b06 <_isatty_r+0x1a>
 8018b00:	682b      	ldr	r3, [r5, #0]
 8018b02:	b103      	cbz	r3, 8018b06 <_isatty_r+0x1a>
 8018b04:	6023      	str	r3, [r4, #0]
 8018b06:	bd38      	pop	{r3, r4, r5, pc}
 8018b08:	24068688 	.word	0x24068688

08018b0c <_init>:
 8018b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b0e:	bf00      	nop
 8018b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b12:	bc08      	pop	{r3}
 8018b14:	469e      	mov	lr, r3
 8018b16:	4770      	bx	lr

08018b18 <_fini>:
 8018b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b1a:	bf00      	nop
 8018b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b1e:	bc08      	pop	{r3}
 8018b20:	469e      	mov	lr, r3
 8018b22:	4770      	bx	lr
