
nucleo-H753ZI_TemplateMicroROS_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018868  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  08018b08  08018b08  00019b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080196d4  080196d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080196dc  080196dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080196e4  080196e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000114  24000000  080196e8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000114  080197fc  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000174  0801985c  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000684b4  240001d8  080198bc  0001b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2406868c  080198bc  0001b68c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e17c  00000000  00000000  0001b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c0e  00000000  00000000  0004937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002020  00000000  00000000  0004ef90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018c9  00000000  00000000  00050fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004041b  00000000  00000000  00052879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c91a  00000000  00000000  00092c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182d9c  00000000  00000000  000bf5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0024234a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009488  00000000  00000000  002423c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0024b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018af0 	.word	0x08018af0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08018af0 	.word	0x08018af0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800074c:	f00c fa3a 	bl	800cbc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000750:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000758:	f000 f986 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800075c:	4b58      	ldr	r3, [pc, #352]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8090 	bne.w	800088a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000770:	2208      	movs	r2, #8
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d015      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	3308      	adds	r3, #8
 800078a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00b      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d865      	bhi.n	800088a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c2:	4b41      	ldr	r3, [pc, #260]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007c8:	e004      	b.n	80007d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <pvPortMallocMicroROS+0xa6>
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f1      	bne.n	80007ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d04c      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2208      	movs	r2, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d920      	bls.n	8000854 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f000 f96e 	bl	8000b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d203      	bcs.n	8000876 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	431a      	orrs	r2, r3
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088a:	f00c f9a9 	bl	800cbe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008b0:	69fb      	ldr	r3, [r7, #28]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24030f3c 	.word	0x24030f3c
 80008c0:	24030f48 	.word	0x24030f48
 80008c4:	24030f40 	.word	0x24030f40
 80008c8:	24030f34 	.word	0x24030f34
 80008cc:	24030f44 	.word	0x24030f44

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <vPortFreeMicroROS+0x66>
	__asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00c f932 	bl	800cbc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8de 	bl	8000b30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00c f934 	bl	800cbe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24030f48 	.word	0x24030f48
 8000984:	24030f40 	.word	0x24030f40

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24030f48 	.word	0x24030f48

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00c f8f9 	bl	800cbc4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feb4 	bl	8000740 <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f017 f986 	bl	8017d16 <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff60 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00c f8e6 	bl	800cbe0 <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00c f8cc 	bl	800cbc4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe82 	bl	8000740 <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00c f8c2 	bl	800cbe0 <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <prvHeapInit+0xac>)
 8000a70:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a74:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3307      	adds	r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ac6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <prvHeapInit+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <prvHeapInit+0xbc>)
 8000af4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <prvHeapInit+0xc0>)
 8000afc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <prvHeapInit+0xc4>)
 8000b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	00030d40 	.word	0x00030d40
 8000b18:	240001f4 	.word	0x240001f4
 8000b1c:	24030f34 	.word	0x24030f34
 8000b20:	24030f3c 	.word	0x24030f3c
 8000b24:	24030f44 	.word	0x24030f44
 8000b28:	24030f40 	.word	0x24030f40
 8000b2c:	24030f48 	.word	0x24030f48

08000b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <prvInsertBlockIntoFreeList+0xac>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <prvInsertBlockIntoFreeList+0x14>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8f7      	bhi.n	8000b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d108      	bne.n	8000b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d118      	bne.n	8000bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00d      	beq.n	8000bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24030f34 	.word	0x24030f34
 8000be0:	24030f3c 	.word	0x24030f3c

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	200b      	movs	r0, #11
 8000c0e:	f001 fb63 	bl	80022d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c12:	200b      	movs	r0, #11
 8000c14:	f001 fb7a 	bl	800230c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f001 fb5b 	bl	80022d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c22:	200c      	movs	r0, #12
 8000c24:	f001 fb72 	bl	800230c <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400

08000c34 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c42:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c48:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <cubemx_transport_open+0x28>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f008 fb38 	bl	80092c0 <HAL_UART_Receive_DMA>
    return true;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24030f4c 	.word	0x24030f4c

08000c60 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f008 fb71 	bl	8009358 <HAL_UART_DMAStop>
    return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c94:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d11b      	bne.n	8000cd8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f008 fa89 	bl	80091c0 <HAL_UART_Transmit_DMA>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cb2:	e002      	b.n	8000cba <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f00a ff23 	bl	800bb00 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <cubemx_transport_write+0x4a>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d1f4      	bne.n	8000cb4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <cubemx_transport_write+0x54>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e002      	b.n	8000cda <cubemx_transport_write+0x5a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000cd8:	2300      	movs	r3, #0
    }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfe:	b672      	cpsid	i
}
 8000d00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e74 <cubemx_transport_read+0x190>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d068      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a57      	ldr	r2, [pc, #348]	@ (8000e78 <cubemx_transport_read+0x194>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d061      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a55      	ldr	r2, [pc, #340]	@ (8000e7c <cubemx_transport_read+0x198>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05a      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a52      	ldr	r2, [pc, #328]	@ (8000e80 <cubemx_transport_read+0x19c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d053      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <cubemx_transport_read+0x1a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d04c      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <cubemx_transport_read+0x1a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d045      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e8c <cubemx_transport_read+0x1a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d03e      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <cubemx_transport_read+0x1ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d037      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <cubemx_transport_read+0x1b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d030      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <cubemx_transport_read+0x1b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d029      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <cubemx_transport_read+0x1b8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d022      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ea0 <cubemx_transport_read+0x1bc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01b      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <cubemx_transport_read+0x1c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d014      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <cubemx_transport_read+0x1c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <cubemx_transport_read+0x1c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d006      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <cubemx_transport_read+0x1cc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d107      	bne.n	8000df2 <cubemx_transport_read+0x10e>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000df0:	e006      	b.n	8000e00 <cubemx_transport_read+0x11c>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e00:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e04:	b662      	cpsie	i
}
 8000e06:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f00a fe76 	bl	800bb00 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d104      	bne.n	8000e2a <cubemx_transport_read+0x146>
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f6ff af6a 	blt.w	8000cfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e2e:	e011      	b.n	8000e54 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	440b      	add	r3, r1
 8000e3a:	4920      	ldr	r1, [pc, #128]	@ (8000ebc <cubemx_transport_read+0x1d8>)
 8000e3c:	5c8a      	ldrb	r2, [r1, r2]
 8000e3e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e4c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d003      	beq.n	8000e68 <cubemx_transport_read+0x184>
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d3e3      	bcc.n	8000e30 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000e68:	69bb      	ldr	r3, [r7, #24]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020010 	.word	0x40020010
 8000e78:	40020028 	.word	0x40020028
 8000e7c:	40020040 	.word	0x40020040
 8000e80:	40020058 	.word	0x40020058
 8000e84:	40020070 	.word	0x40020070
 8000e88:	40020088 	.word	0x40020088
 8000e8c:	400200a0 	.word	0x400200a0
 8000e90:	400200b8 	.word	0x400200b8
 8000e94:	40020410 	.word	0x40020410
 8000e98:	40020428 	.word	0x40020428
 8000e9c:	40020440 	.word	0x40020440
 8000ea0:	40020458 	.word	0x40020458
 8000ea4:	40020470 	.word	0x40020470
 8000ea8:	40020488 	.word	0x40020488
 8000eac:	400204a0 	.word	0x400204a0
 8000eb0:	400204b8 	.word	0x400204b8
 8000eb4:	24031750 	.word	0x24031750
 8000eb8:	2403174c 	.word	0x2403174c
 8000ebc:	24030f4c 	.word	0x24030f4c

08000ec0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <MX_ETH_Init+0x84>)
 8000ec8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ed8:	22e1      	movs	r2, #225	@ 0xe1
 8000eda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef0:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_ETH_Init+0x88>)
 8000ef2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_ETH_Init+0x8c>)
 8000efe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <MX_ETH_Init+0x90>)
 8000f04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f08:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f0e:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_ETH_Init+0x80>)
 8000f10:	f004 f852 	bl	8004fb8 <HAL_ETH_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f1a:	f000 fb01 	bl	8001520 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f1e:	2238      	movs	r2, #56	@ 0x38
 8000f20:	2100      	movs	r1, #0
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f24:	f016 fdd8 	bl	8017ad8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f2a:	2221      	movs	r2, #33	@ 0x21
 8000f2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <MX_ETH_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2403178c 	.word	0x2403178c
 8000f44:	40028000 	.word	0x40028000
 8000f48:	2403183c 	.word	0x2403183c
 8000f4c:	24000174 	.word	0x24000174
 8000f50:	24000114 	.word	0x24000114
 8000f54:	24031754 	.word	0x24031754

08000f58 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	@ 0x38
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a59      	ldr	r2, [pc, #356]	@ (80010dc <HAL_ETH_MspInit+0x184>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 80ab 	bne.w	80010d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f82:	4a57      	ldr	r2, [pc, #348]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f8c:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	623b      	str	r3, [r7, #32]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f9a:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000faa:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fb8:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbe:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a39      	ldr	r2, [pc, #228]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a2a      	ldr	r2, [pc, #168]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <HAL_ETH_MspInit+0x188>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800104e:	2332      	movs	r3, #50	@ 0x32
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <HAL_ETH_MspInit+0x18c>)
 800106a:	f004 fbd9 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800106e:	2386      	movs	r3, #134	@ 0x86
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <HAL_ETH_MspInit+0x190>)
 800108a:	f004 fbc9 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4810      	ldr	r0, [pc, #64]	@ (80010ec <HAL_ETH_MspInit+0x194>)
 80010ac:	f004 fbb8 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c2:	230b      	movs	r3, #11
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <HAL_ETH_MspInit+0x198>)
 80010ce:	f004 fba7 	bl	8005820 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	@ 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40028000 	.word	0x40028000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020400 	.word	0x58020400
 80010f0:	58021800 	.word	0x58021800

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMicroROS */
  TaskMicroROSHandle = osThreadNew(StartTaskMicroROS, NULL, &TaskMicroROS_attributes);
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <MX_FREERTOS_Init+0x18>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_FREERTOS_Init+0x1c>)
 80010fe:	f00a fc6d 	bl	800b9dc <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <MX_FREERTOS_Init+0x20>)
 8001106:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08018b60 	.word	0x08018b60
 8001110:	08001119 	.word	0x08001119
 8001114:	24031844 	.word	0x24031844

08001118 <StartTaskMicroROS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMicroROS */
void StartTaskMicroROS(void *argument)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0a6      	sub	sp, #152	@ 0x98
 800111c:	af02      	add	r7, sp, #8
 800111e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskMicroROS */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <StartTaskMicroROS+0xc8>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <StartTaskMicroROS+0xcc>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <StartTaskMicroROS+0xd0>)
 800112a:	4a30      	ldr	r2, [pc, #192]	@ (80011ec <StartTaskMicroROS+0xd4>)
 800112c:	4930      	ldr	r1, [pc, #192]	@ (80011f0 <StartTaskMicroROS+0xd8>)
 800112e:	2001      	movs	r0, #1
 8001130:	f00d fc22 	bl	800e978 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001134:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001138:	4618      	mov	r0, r3
 800113a:	f00d fb9f 	bl	800e87c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <StartTaskMicroROS+0xdc>)
 8001140:	67bb      	str	r3, [r7, #120]	@ 0x78
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <StartTaskMicroROS+0xe0>)
 8001144:	67fb      	str	r3, [r7, #124]	@ 0x7c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <StartTaskMicroROS+0xe4>)
 8001148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800114c:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <StartTaskMicroROS+0xe8>)
 800114e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001152:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001156:	4618      	mov	r0, r3
 8001158:	f00d fb9e 	bl	800e898 <rcutils_set_default_allocator>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 800115c:	463b      	mov	r3, r7
 800115e:	4618      	mov	r0, r3
 8001160:	f00d fbb8 	bl	800e8d4 <rcutils_get_default_allocator>
 8001164:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001168:	463d      	mov	r5, r7
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001176:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	f00d faaf 	bl	800e6e0 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001182:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001186:	f107 0020 	add.w	r0, r7, #32
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <StartTaskMicroROS+0xec>)
 800118c:	491e      	ldr	r1, [pc, #120]	@ (8001208 <StartTaskMicroROS+0xf0>)
 800118e:	f00d faf1 	bl	800e774 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8001192:	f00e f8a7 	bl	800f2e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001196:	4602      	mov	r2, r0
 8001198:	f107 0120 	add.w	r1, r7, #32
 800119c:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <StartTaskMicroROS+0xf4>)
 80011a2:	f00d fb29 	bl	800e7f8 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

  msg.data = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	673b      	str	r3, [r7, #112]	@ 0x70

  for(;;)
  {

	rmw_uros_sync_session(1000);
 80011aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ae:	f00d fdb7 	bl	800ed20 <rmw_uros_sync_session>
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80011b2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80011b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011ba:	2200      	movs	r2, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00d fa6b 	bl	800e698 <rcl_publish>
 80011c2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (ret != RCL_RET_OK)
	{
	  //printf_("Error publishing (line %d)\n", __LINE__);
	}

	msg.data++;
 80011c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011c8:	3301      	adds	r3, #1
 80011ca:	673b      	str	r3, [r7, #112]	@ 0x70

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011cc:	2102      	movs	r1, #2
 80011ce:	4810      	ldr	r0, [pc, #64]	@ (8001210 <StartTaskMicroROS+0xf8>)
 80011d0:	f004 fcef 	bl	8005bb2 <HAL_GPIO_TogglePin>

	osDelay(500);
 80011d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d8:	f00a fc92 	bl	800bb00 <osDelay>
  {
 80011dc:	e7e5      	b.n	80011aa <StartTaskMicroROS+0x92>
 80011de:	bf00      	nop
 80011e0:	08000ce5 	.word	0x08000ce5
 80011e4:	08000c81 	.word	0x08000c81
 80011e8:	08000c61 	.word	0x08000c61
 80011ec:	08000c35 	.word	0x08000c35
 80011f0:	240318a4 	.word	0x240318a4
 80011f4:	0800152d 	.word	0x0800152d
 80011f8:	08001571 	.word	0x08001571
 80011fc:	080015a9 	.word	0x080015a9
 8001200:	08001615 	.word	0x08001615
 8001204:	08018b18 	.word	0x08018b18
 8001208:	08018b1c 	.word	0x08018b1c
 800120c:	08018b28 	.word	0x08018b28
 8001210:	58021000 	.word	0x58021000

08001214 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b62      	ldr	r3, [pc, #392]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001230:	4a60      	ldr	r2, [pc, #384]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123a:	4b5e      	ldr	r3, [pc, #376]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001248:	4b5a      	ldr	r3, [pc, #360]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124e:	4a59      	ldr	r2, [pc, #356]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001258:	4b56      	ldr	r3, [pc, #344]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b53      	ldr	r3, [pc, #332]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a51      	ldr	r2, [pc, #324]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b4f      	ldr	r3, [pc, #316]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b4b      	ldr	r3, [pc, #300]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128a:	4a4a      	ldr	r2, [pc, #296]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001294:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	4a42      	ldr	r2, [pc, #264]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b2:	4b40      	ldr	r3, [pc, #256]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	4b3c      	ldr	r3, [pc, #240]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	4a3b      	ldr	r2, [pc, #236]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d0:	4b38      	ldr	r3, [pc, #224]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a33      	ldr	r2, [pc, #204]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <MX_GPIO_Init+0x1a0>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001302:	482d      	ldr	r0, [pc, #180]	@ (80013b8 <MX_GPIO_Init+0x1a4>)
 8001304:	f004 fc3c 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800130e:	482b      	ldr	r0, [pc, #172]	@ (80013bc <MX_GPIO_Init+0x1a8>)
 8001310:	f004 fc36 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2102      	movs	r1, #2
 8001318:	4829      	ldr	r0, [pc, #164]	@ (80013c0 <MX_GPIO_Init+0x1ac>)
 800131a:	f004 fc31 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4824      	ldr	r0, [pc, #144]	@ (80013c4 <MX_GPIO_Init+0x1b0>)
 8001334:	f004 fa74 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001338:	f244 0301 	movw	r3, #16385	@ 0x4001
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4819      	ldr	r0, [pc, #100]	@ (80013b8 <MX_GPIO_Init+0x1a4>)
 8001352:	f004 fa65 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4813      	ldr	r0, [pc, #76]	@ (80013bc <MX_GPIO_Init+0x1a8>)
 8001370:	f004 fa56 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001378:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	480f      	ldr	r0, [pc, #60]	@ (80013c8 <MX_GPIO_Init+0x1b4>)
 800138a:	f004 fa49 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138e:	2302      	movs	r3, #2
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_GPIO_Init+0x1ac>)
 80013a6:	f004 fa3b 	bl	8005820 <HAL_GPIO_Init>

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	@ 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020400 	.word	0x58020400
 80013bc:	58020c00 	.word	0x58020c00
 80013c0:	58021000 	.word	0x58021000
 80013c4:	58020800 	.word	0x58020800
 80013c8:	58021800 	.word	0x58021800

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f000 fe2a 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f812 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f7ff ff1c 	bl	8001214 <MX_GPIO_Init>
  MX_DMA_Init();
 80013dc:	f7ff fc02 	bl	8000be4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80013e0:	f000 fc26 	bl	8001c30 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80013e4:	f7ff fd6c 	bl	8000ec0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013e8:	f000 fd46 	bl	8001e78 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013ec:	f00a faac 	bl	800b948 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013f0:	f7ff fe80 	bl	80010f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013f4:	f00a facc 	bl	800b990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <main+0x2c>

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b09c      	sub	sp, #112	@ 0x70
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	224c      	movs	r2, #76	@ 0x4c
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f016 fb64 	bl	8017ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2220      	movs	r2, #32
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f016 fb5e 	bl	8017ad8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800141c:	2002      	movs	r0, #2
 800141e:	f004 fd13 	bl	8005e48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <SystemClock_Config+0xf8>)
 8001428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142a:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <SystemClock_Config+0xf8>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001432:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <SystemClock_Config+0xf8>)
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <SystemClock_Config+0xfc>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001444:	4a2c      	ldr	r2, [pc, #176]	@ (80014f8 <SystemClock_Config+0xfc>)
 8001446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <SystemClock_Config+0xfc>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001458:	bf00      	nop
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <SystemClock_Config+0xfc>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001466:	d1f8      	bne.n	800145a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001468:	2303      	movs	r3, #3
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800146c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001472:	2301      	movs	r3, #1
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2340      	movs	r3, #64	@ 0x40
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147e:	2302      	movs	r3, #2
 8001480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001486:	2318      	movs	r3, #24
 8001488:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800148a:	2302      	movs	r3, #2
 800148c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800148e:	2304      	movs	r3, #4
 8001490:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001496:	230c      	movs	r3, #12
 8001498:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800149a:	2300      	movs	r3, #0
 800149c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fd18 	bl	8005edc <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80014b2:	f000 f835 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	233f      	movs	r3, #63	@ 0x3f
 80014b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2101      	movs	r1, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 f958 	bl	8006790 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80014e6:	f000 f81b 	bl	8001520 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3770      	adds	r7, #112	@ 0x70
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	58000400 	.word	0x58000400
 80014f8:	58024800 	.word	0x58024800

080014fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150e:	f000 fdc7 	bl	80020a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40001000 	.word	0x40001000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>

0800152c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <microros_allocate+0x3c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <microros_allocate+0x3c>)
 8001544:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <microros_allocate+0x40>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <microros_allocate+0x40>)
 8001554:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff f8f2 	bl	8000740 <pvPortMallocMicroROS>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24031848 	.word	0x24031848
 800156c:	2403184c 	.word	0x2403184c

08001570 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00c      	beq.n	800159a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fa01 	bl	8000988 <getBlockSize>
 8001586:	4603      	mov	r3, r0
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <microros_deallocate+0x34>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <microros_deallocate+0x34>)
 8001592:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff f99b 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2403184c 	.word	0x2403184c

080015a8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <microros_reallocate+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4413      	add	r3, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <microros_reallocate+0x64>)
 80015c2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <microros_reallocate+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <microros_reallocate+0x68>)
 80015d2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f7ff f8b0 	bl	8000740 <pvPortMallocMicroROS>
 80015e0:	4603      	mov	r3, r0
 80015e2:	e00e      	b.n	8001602 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff f9cf 	bl	8000988 <getBlockSize>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <microros_reallocate+0x68>)
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <microros_reallocate+0x68>)
 80015f6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff f9e2 	bl	80009c4 <pvPortReallocMicroROS>
 8001600:	4603      	mov	r3, r0
  }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24031848 	.word	0x24031848
 8001610:	2403184c 	.word	0x2403184c

08001614 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <microros_zero_allocate+0x48>)
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	4413      	add	r3, r2
 800162e:	461a      	mov	r2, r3
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <microros_zero_allocate+0x48>)
 8001632:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <microros_zero_allocate+0x4c>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4413      	add	r3, r2
 8001642:	461a      	mov	r2, r3
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <microros_zero_allocate+0x4c>)
 8001646:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff f9e7 	bl	8000a1e <pvPortCallocMicroROS>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	24031848 	.word	0x24031848
 8001660:	2403184c 	.word	0x2403184c
 8001664:	00000000 	.word	0x00000000

08001668 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800167a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167e:	a320      	add	r3, pc, #128	@ (adr r3, 8001700 <UTILS_NanosecondsToTimespec+0x98>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe94 	bl	80003b0 <__aeabi_ldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001696:	a31a      	add	r3, pc, #104	@ (adr r3, 8001700 <UTILS_NanosecondsToTimespec+0x98>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe fe88 	bl	80003b0 <__aeabi_ldivmod>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da20      	bge.n	80016ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a11      	ldr	r2, [pc, #68]	@ (80016f8 <UTILS_NanosecondsToTimespec+0x90>)
 80016b2:	fb82 1203 	smull	r1, r2, r2, r3
 80016b6:	1712      	asrs	r2, r2, #28
 80016b8:	17db      	asrs	r3, r3, #31
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	6979      	ldr	r1, [r7, #20]
 80016c8:	17c8      	asrs	r0, r1, #31
 80016ca:	460c      	mov	r4, r1
 80016cc:	4605      	mov	r5, r0
 80016ce:	ebb2 0804 	subs.w	r8, r2, r4
 80016d2:	eb63 0905 	sbc.w	r9, r3, r5
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4906      	ldr	r1, [pc, #24]	@ (80016fc <UTILS_NanosecondsToTimespec+0x94>)
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
    }
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016f8:	44b82fa1 	.word	0x44b82fa1
 80016fc:	3b9aca00 	.word	0x3b9aca00
 8001700:	3b9aca00 	.word	0x3b9aca00
 8001704:	00000000 	.word	0x00000000

08001708 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800170c:	b08e      	sub	sp, #56	@ 0x38
 800170e:	af00      	add	r7, sp, #0
 8001710:	6278      	str	r0, [r7, #36]	@ 0x24
 8001712:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001714:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001718:	2300      	movs	r3, #0
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800172a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172e:	4618      	mov	r0, r3
 8001730:	f00b fcda 	bl	800d0e8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	17da      	asrs	r2, r3, #31
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	61fa      	str	r2, [r7, #28]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	69b9      	ldr	r1, [r7, #24]
 8001746:	000b      	movs	r3, r1
 8001748:	2200      	movs	r2, #0
 800174a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800174e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001750:	2200      	movs	r2, #0
 8001752:	461c      	mov	r4, r3
 8001754:	4615      	mov	r5, r2
 8001756:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800175a:	1911      	adds	r1, r2, r4
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	416b      	adcs	r3, r5
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001766:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800176a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	f04f 0400 	mov.w	r4, #0
 8001776:	f04f 0500 	mov.w	r5, #0
 800177a:	015d      	lsls	r5, r3, #5
 800177c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001780:	0154      	lsls	r4, r2, #5
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	ebb2 0800 	subs.w	r8, r2, r0
 800178a:	eb63 0901 	sbc.w	r9, r3, r1
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800179a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800179e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80017a2:	4690      	mov	r8, r2
 80017a4:	4699      	mov	r9, r3
 80017a6:	eb18 0a00 	adds.w	sl, r8, r0
 80017aa:	eb49 0b01 	adc.w	fp, r9, r1
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017c2:	ebb2 040a 	subs.w	r4, r2, sl
 80017c6:	603c      	str	r4, [r7, #0]
 80017c8:	eb63 030b 	sbc.w	r3, r3, fp
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d2:	4623      	mov	r3, r4
 80017d4:	181b      	adds	r3, r3, r0
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	462b      	mov	r3, r5
 80017da:	eb41 0303 	adc.w	r3, r1, r3
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017e6:	f7ff ff3f 	bl	8001668 <UTILS_NanosecondsToTimespec>

    return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	3738      	adds	r7, #56	@ 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_MspInit+0x38>)
 8001800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_MspInit+0x38>)
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_MspInit+0x38>)
 8001810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	210f      	movs	r1, #15
 8001820:	f06f 0001 	mvn.w	r0, #1
 8001824:	f000 fd58 	bl	80022d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58024400 	.word	0x58024400

08001834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b090      	sub	sp, #64	@ 0x40
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d827      	bhi.n	8001892 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001842:	2200      	movs	r2, #0
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	2036      	movs	r0, #54	@ 0x36
 8001848:	f000 fd46 	bl	80022d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f000 fd5d 	bl	800230c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001852:	4a29      	ldr	r2, [pc, #164]	@ (80018f8 <HAL_InitTick+0xc4>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001858:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_InitTick+0xc8>)
 800185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800185e:	4a27      	ldr	r2, [pc, #156]	@ (80018fc <HAL_InitTick+0xc8>)
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_InitTick+0xc8>)
 800186a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001876:	f107 0210 	add.w	r2, r7, #16
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fb11 	bl	8006ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800188a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_InitTick+0x6a>
 8001890:	e001      	b.n	8001896 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e02b      	b.n	80018ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001896:	f005 fadb 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 800189a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800189c:	e004      	b.n	80018a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800189e:	f005 fad7 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 80018a2:	4603      	mov	r3, r0
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <HAL_InitTick+0xcc>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	3b01      	subs	r3, #1
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <HAL_InitTick+0xd0>)
 80018b8:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <HAL_InitTick+0xd4>)
 80018ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_InitTick+0xd0>)
 80018be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_InitTick+0xd0>)
 80018c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_InitTick+0xd0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <HAL_InitTick+0xd0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <HAL_InitTick+0xd0>)
 80018d8:	f007 f954 	bl	8008b84 <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018e2:	4808      	ldr	r0, [pc, #32]	@ (8001904 <HAL_InitTick+0xd0>)
 80018e4:	f007 f9b0 	bl	8008c48 <HAL_TIM_Base_Start_IT>
 80018e8:	4603      	mov	r3, r0
 80018ea:	e000      	b.n	80018ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3740      	adds	r7, #64	@ 0x40
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2400000c 	.word	0x2400000c
 80018fc:	58024400 	.word	0x58024400
 8001900:	431bde83 	.word	0x431bde83
 8001904:	24031850 	.word	0x24031850
 8001908:	40001000 	.word	0x40001000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Stream0_IRQHandler+0x10>)
 800194a:	f002 f817 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	24031938 	.word	0x24031938

08001958 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Stream1_IRQHandler+0x10>)
 800195e:	f002 f80d 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	240319b0 	.word	0x240319b0

0800196c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <USART3_IRQHandler+0x10>)
 8001972:	f007 fd87 	bl	8009484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240318a4 	.word	0x240318a4

08001980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM6_DAC_IRQHandler+0x10>)
 8001986:	f007 f9d7 	bl	8008d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24031850 	.word	0x24031850

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_kill>:

int _kill(int pid, int sig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ae:	f016 f97d 	bl	8017cac <__errno>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2216      	movs	r2, #22
 80019b6:	601a      	str	r2, [r3, #0]
  return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_exit>:

void _exit (int status)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ffe7 	bl	80019a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d6:	bf00      	nop
 80019d8:	e7fd      	b.n	80019d6 <_exit+0x12>

080019da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e00a      	b.n	8001a02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ec:	f3af 8000 	nop.w
 80019f0:	4601      	mov	r1, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	60ba      	str	r2, [r7, #8]
 80019f8:	b2ca      	uxtb	r2, r1
 80019fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dbf0      	blt.n	80019ec <_read+0x12>
  }

  return len;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e009      	b.n	8001a3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf1      	blt.n	8001a26 <_write+0x12>
  }
  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_close>:

int _close(int file)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a74:	605a      	str	r2, [r3, #4]
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_isatty>:

int _isatty(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f016 f8e2 	bl	8017cac <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	24080000 	.word	0x24080000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	240318a0 	.word	0x240318a0
 8001b1c:	24068690 	.word	0x24068690

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <SystemInit+0xe4>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a36      	ldr	r2, [pc, #216]	@ (8001c04 <SystemInit+0xe4>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <SystemInit+0xe8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d807      	bhi.n	8001b50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <SystemInit+0xe8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 030f 	bic.w	r3, r3, #15
 8001b48:	4a2f      	ldr	r2, [pc, #188]	@ (8001c08 <SystemInit+0xe8>)
 8001b4a:	f043 0307 	orr.w	r3, r3, #7
 8001b4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b50:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <SystemInit+0xec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <SystemInit+0xec>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <SystemInit+0xec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <SystemInit+0xec>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4929      	ldr	r1, [pc, #164]	@ (8001c0c <SystemInit+0xec>)
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <SystemInit+0xf0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6e:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <SystemInit+0xe8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <SystemInit+0xe8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 030f 	bic.w	r3, r3, #15
 8001b82:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <SystemInit+0xe8>)
 8001b84:	f043 0307 	orr.w	r3, r3, #7
 8001b88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <SystemInit+0xec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <SystemInit+0xec>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <SystemInit+0xec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <SystemInit+0xec>)
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <SystemInit+0xf4>)
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <SystemInit+0xec>)
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <SystemInit+0xf8>)
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <SystemInit+0xec>)
 8001baa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <SystemInit+0xfc>)
 8001bac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bae:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <SystemInit+0xec>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <SystemInit+0xec>)
 8001bb6:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <SystemInit+0xfc>)
 8001bb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <SystemInit+0xec>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <SystemInit+0xec>)
 8001bc2:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <SystemInit+0xfc>)
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <SystemInit+0xec>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <SystemInit+0xec>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c0c <SystemInit+0xec>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <SystemInit+0xec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <SystemInit+0x100>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <SystemInit+0x104>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bea:	d202      	bcs.n	8001bf2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <SystemInit+0x108>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <SystemInit+0x10c>)
 8001bf4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00
 8001c08:	52002000 	.word	0x52002000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c14:	02020200 	.word	0x02020200
 8001c18:	01ff0000 	.word	0x01ff0000
 8001c1c:	01010280 	.word	0x01010280
 8001c20:	5c001000 	.word	0x5c001000
 8001c24:	ffff0000 	.word	0xffff0000
 8001c28:	51008108 	.word	0x51008108
 8001c2c:	52004000 	.word	0x52004000

08001c30 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c36:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <MX_USART3_UART_Init+0x94>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c78:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c7a:	f007 fa51 	bl	8009120 <HAL_UART_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c84:	f7ff fc4c 	bl	8001520 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	480d      	ldr	r0, [pc, #52]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c8c:	f009 fa46 	bl	800b11c <HAL_UARTEx_SetTxFifoThreshold>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c96:	f7ff fc43 	bl	8001520 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001c9e:	f009 fa7b 	bl	800b198 <HAL_UARTEx_SetRxFifoThreshold>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ca8:	f7ff fc3a 	bl	8001520 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <MX_USART3_UART_Init+0x90>)
 8001cae:	f009 f9fc 	bl	800b0aa <HAL_UARTEx_DisableFifoMode>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cb8:	f7ff fc32 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	240318a4 	.word	0x240318a4
 8001cc4:	40004800 	.word	0x40004800

08001cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ba      	sub	sp, #232	@ 0xe8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	22c0      	movs	r2, #192	@ 0xc0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f015 fef5 	bl	8017ad8 <memset>
  if(uartHandle->Instance==USART3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_UART_MspInit+0x194>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	f040 80ad 	bne.w	8001e54 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cfa:	f04f 0202 	mov.w	r2, #2
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f90b 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001d1c:	f7ff fc00 	bl	8001520 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d20:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d26:	4a4e      	ldr	r2, [pc, #312]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3e:	4b48      	ldr	r3, [pc, #288]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	4a46      	ldr	r2, [pc, #280]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4e:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <HAL_UART_MspInit+0x198>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d76:	2307      	movs	r3, #7
 8001d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4838      	ldr	r0, [pc, #224]	@ (8001e64 <HAL_UART_MspInit+0x19c>)
 8001d84:	f003 fd4c 	bl	8005820 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001d88:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001d8a:	4a38      	ldr	r2, [pc, #224]	@ (8001e6c <HAL_UART_MspInit+0x1a4>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001d90:	222d      	movs	r2, #45	@ 0x2d
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d94:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001da2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001dbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dca:	4827      	ldr	r0, [pc, #156]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001dcc:	f000 faac 	bl	8002328 <HAL_DMA_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001dd6:	f7ff fba3 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001de2:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_UART_MspInit+0x1a0>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001dea:	4a22      	ldr	r2, [pc, #136]	@ (8001e74 <HAL_UART_MspInit+0x1ac>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001df0:	222e      	movs	r2, #46	@ 0x2e
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e20:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e28:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e2a:	f000 fa7d 	bl	8002328 <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8001e34:	f7ff fb74 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e70 <HAL_UART_MspInit+0x1a8>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2105      	movs	r1, #5
 8001e48:	2027      	movs	r0, #39	@ 0x27
 8001e4a:	f000 fa45 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e4e:	2027      	movs	r0, #39	@ 0x27
 8001e50:	f000 fa5c 	bl	800230c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e54:	bf00      	nop
 8001e56:	37e8      	adds	r7, #232	@ 0xe8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004800 	.word	0x40004800
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020c00 	.word	0x58020c00
 8001e68:	24031938 	.word	0x24031938
 8001e6c:	40020010 	.word	0x40020010
 8001e70:	240319b0 	.word	0x240319b0
 8001e74:	40020028 	.word	0x40020028

08001e78 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e7e:	4a16      	ldr	r2, [pc, #88]	@ (8001ed8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e84:	2209      	movs	r2, #9
 8001e86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec0:	f003 fe91 	bl	8005be6 <HAL_PCD_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001eca:	f7ff fb29 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24031a28 	.word	0x24031a28
 8001ed8:	40080000 	.word	0x40080000

08001edc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ba      	sub	sp, #232	@ 0xe8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	22c0      	movs	r2, #192	@ 0xc0
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f015 fdeb 	bl	8017ad8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a30      	ldr	r2, [pc, #192]	@ (8001fc8 <HAL_PCD_MspInit+0xec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d159      	bne.n	8001fc0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001f18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 f801 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001f30:	f7ff faf6 	bl	8001520 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f34:	f003 ffc2 	bl	8005ebc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f56:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f70:	230a      	movs	r3, #10
 8001f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <HAL_PCD_MspInit+0xf4>)
 8001f7e:	f003 fc4f 	bl	8005820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <HAL_PCD_MspInit+0xf4>)
 8001f9e:	f003 fc3f 	bl	8005820 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa8:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_PCD_MspInit+0xf0>)
 8001fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	37e8      	adds	r7, #232	@ 0xe8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40080000 	.word	0x40080000
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58020000 	.word	0x58020000

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800200c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd8:	f7ff fda2 	bl	8001b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	@ (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f015 fe59 	bl	8017cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff f9e1 	bl	80013cc <main>
  bx  lr
 800200a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002010:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002014:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8002018:	080196e8 	.word	0x080196e8
  ldr r2, =_sbss
 800201c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002020:	2406868c 	.word	0x2406868c

08002024 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC3_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202e:	2003      	movs	r0, #3
 8002030:	f000 f947 	bl	80022c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002034:	f004 fd62 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_Init+0x68>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	4913      	ldr	r1, [pc, #76]	@ (8002094 <HAL_Init+0x6c>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_Init+0x68>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <HAL_Init+0x6c>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	4a0b      	ldr	r2, [pc, #44]	@ (8002098 <HAL_Init+0x70>)
 800206a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800206c:	4a0b      	ldr	r2, [pc, #44]	@ (800209c <HAL_Init+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002072:	200f      	movs	r0, #15
 8002074:	f7ff fbde 	bl	8001834 <HAL_InitTick>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e002      	b.n	8002088 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002082:	f7ff fbb9 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	58024400 	.word	0x58024400
 8002094:	08018b84 	.word	0x08018b84
 8002098:	24000008 	.word	0x24000008
 800209c:	24000004 	.word	0x24000004

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	24000010 	.word	0x24000010
 80020c4:	24031f0c 	.word	0x24031f0c

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	24031f0c 	.word	0x24031f0c

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	24000010 	.word	0x24000010

08002128 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetREVID+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0c1b      	lsrs	r3, r3, #16
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	5c001000 	.word	0x5c001000

08002140 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002150:	4904      	ldr	r1, [pc, #16]	@ (8002164 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	58000400 	.word	0x58000400

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x40>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	4313      	orrs	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00
 80021ac:	05fa0000 	.word	0x05fa0000

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	@ (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	@ (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff4c 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e6:	f7ff ff63 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 80022ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f7ff ffb3 	bl	800225c <NVIC_EncodePriority>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff82 	bl	8002208 <__NVIC_SetPriority>
}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff56 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff feca 	bl	80020c8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e316      	b.n	800296e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a66      	ldr	r2, [pc, #408]	@ (80024e0 <HAL_DMA_Init+0x1b8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a65      	ldr	r2, [pc, #404]	@ (80024e4 <HAL_DMA_Init+0x1bc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a63      	ldr	r2, [pc, #396]	@ (80024e8 <HAL_DMA_Init+0x1c0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a62      	ldr	r2, [pc, #392]	@ (80024ec <HAL_DMA_Init+0x1c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a60      	ldr	r2, [pc, #384]	@ (80024f0 <HAL_DMA_Init+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5f      	ldr	r2, [pc, #380]	@ (80024f4 <HAL_DMA_Init+0x1cc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5d      	ldr	r2, [pc, #372]	@ (80024f8 <HAL_DMA_Init+0x1d0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5c      	ldr	r2, [pc, #368]	@ (80024fc <HAL_DMA_Init+0x1d4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5a      	ldr	r2, [pc, #360]	@ (8002500 <HAL_DMA_Init+0x1d8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a59      	ldr	r2, [pc, #356]	@ (8002504 <HAL_DMA_Init+0x1dc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a57      	ldr	r2, [pc, #348]	@ (8002508 <HAL_DMA_Init+0x1e0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a56      	ldr	r2, [pc, #344]	@ (800250c <HAL_DMA_Init+0x1e4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a54      	ldr	r2, [pc, #336]	@ (8002510 <HAL_DMA_Init+0x1e8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a53      	ldr	r2, [pc, #332]	@ (8002514 <HAL_DMA_Init+0x1ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a51      	ldr	r2, [pc, #324]	@ (8002518 <HAL_DMA_Init+0x1f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Init+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a50      	ldr	r2, [pc, #320]	@ (800251c <HAL_DMA_Init+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Init+0xbc>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_Init+0xbe>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 813b 	beq.w	8002662 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a37      	ldr	r2, [pc, #220]	@ (80024e0 <HAL_DMA_Init+0x1b8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04a      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a36      	ldr	r2, [pc, #216]	@ (80024e4 <HAL_DMA_Init+0x1bc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d045      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_DMA_Init+0x1c0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d040      	beq.n	800249c <HAL_DMA_Init+0x174>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a33      	ldr	r2, [pc, #204]	@ (80024ec <HAL_DMA_Init+0x1c4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d03b      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_DMA_Init+0x1c8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d036      	beq.n	800249c <HAL_DMA_Init+0x174>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a30      	ldr	r2, [pc, #192]	@ (80024f4 <HAL_DMA_Init+0x1cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d031      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2e      	ldr	r2, [pc, #184]	@ (80024f8 <HAL_DMA_Init+0x1d0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d02c      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2d      	ldr	r2, [pc, #180]	@ (80024fc <HAL_DMA_Init+0x1d4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d027      	beq.n	800249c <HAL_DMA_Init+0x174>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <HAL_DMA_Init+0x1d8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d022      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2a      	ldr	r2, [pc, #168]	@ (8002504 <HAL_DMA_Init+0x1dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01d      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_DMA_Init+0x1e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d018      	beq.n	800249c <HAL_DMA_Init+0x174>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a27      	ldr	r2, [pc, #156]	@ (800250c <HAL_DMA_Init+0x1e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a25      	ldr	r2, [pc, #148]	@ (8002510 <HAL_DMA_Init+0x1e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_DMA_Init+0x174>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a24      	ldr	r2, [pc, #144]	@ (8002514 <HAL_DMA_Init+0x1ec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_DMA_Init+0x1f0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Init+0x174>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a21      	ldr	r2, [pc, #132]	@ (800251c <HAL_DMA_Init+0x1f4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d108      	bne.n	80024ae <HAL_DMA_Init+0x186>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_DMA_Init+0x196>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024be:	e02f      	b.n	8002520 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c0:	f7ff fe02 	bl	80020c8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d928      	bls.n	8002520 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2203      	movs	r2, #3
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e246      	b.n	800296e <HAL_DMA_Init+0x646>
 80024e0:	40020010 	.word	0x40020010
 80024e4:	40020028 	.word	0x40020028
 80024e8:	40020040 	.word	0x40020040
 80024ec:	40020058 	.word	0x40020058
 80024f0:	40020070 	.word	0x40020070
 80024f4:	40020088 	.word	0x40020088
 80024f8:	400200a0 	.word	0x400200a0
 80024fc:	400200b8 	.word	0x400200b8
 8002500:	40020410 	.word	0x40020410
 8002504:	40020428 	.word	0x40020428
 8002508:	40020440 	.word	0x40020440
 800250c:	40020458 	.word	0x40020458
 8002510:	40020470 	.word	0x40020470
 8002514:	40020488 	.word	0x40020488
 8002518:	400204a0 	.word	0x400204a0
 800251c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c8      	bne.n	80024c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4b83      	ldr	r3, [pc, #524]	@ (8002748 <HAL_DMA_Init+0x420>)
 800253a:	4013      	ands	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002546:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4313      	orrs	r3, r2
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002584:	4b71      	ldr	r3, [pc, #452]	@ (800274c <HAL_DMA_Init+0x424>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b71      	ldr	r3, [pc, #452]	@ (8002750 <HAL_DMA_Init+0x428>)
 800258a:	4013      	ands	r3, r2
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002590:	d328      	bcc.n	80025e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b28      	cmp	r3, #40	@ 0x28
 8002598:	d903      	bls.n	80025a2 <HAL_DMA_Init+0x27a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b2e      	cmp	r3, #46	@ 0x2e
 80025a0:	d917      	bls.n	80025d2 <HAL_DMA_Init+0x2aa>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80025a8:	d903      	bls.n	80025b2 <HAL_DMA_Init+0x28a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b42      	cmp	r3, #66	@ 0x42
 80025b0:	d90f      	bls.n	80025d2 <HAL_DMA_Init+0x2aa>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b46      	cmp	r3, #70	@ 0x46
 80025b8:	d903      	bls.n	80025c2 <HAL_DMA_Init+0x29a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b48      	cmp	r3, #72	@ 0x48
 80025c0:	d907      	bls.n	80025d2 <HAL_DMA_Init+0x2aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80025c8:	d905      	bls.n	80025d6 <HAL_DMA_Init+0x2ae>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b52      	cmp	r3, #82	@ 0x52
 80025d0:	d801      	bhi.n	80025d6 <HAL_DMA_Init+0x2ae>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_DMA_Init+0x2b0>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0307 	bic.w	r3, r3, #7
 80025fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	2b04      	cmp	r3, #4
 800260c:	d117      	bne.n	800263e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00e      	beq.n	800263e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f002 fb3f 	bl	8004ca4 <DMA_CheckFifoParam>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2240      	movs	r2, #64	@ 0x40
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e197      	b.n	800296e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f002 fa7a 	bl	8004b40 <DMA_CalcBaseAndBitshift>
 800264c:	4603      	mov	r3, r0
 800264e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	223f      	movs	r2, #63	@ 0x3f
 800265a:	409a      	lsls	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e0cd      	b.n	80027fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3b      	ldr	r2, [pc, #236]	@ (8002754 <HAL_DMA_Init+0x42c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a39      	ldr	r2, [pc, #228]	@ (8002758 <HAL_DMA_Init+0x430>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01d      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_DMA_Init+0x434>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a36      	ldr	r2, [pc, #216]	@ (8002760 <HAL_DMA_Init+0x438>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a35      	ldr	r2, [pc, #212]	@ (8002764 <HAL_DMA_Init+0x43c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a33      	ldr	r2, [pc, #204]	@ (8002768 <HAL_DMA_Init+0x440>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a32      	ldr	r2, [pc, #200]	@ (800276c <HAL_DMA_Init+0x444>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_DMA_Init+0x38a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a30      	ldr	r2, [pc, #192]	@ (8002770 <HAL_DMA_Init+0x448>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_Init+0x38e>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_DMA_Init+0x390>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a24      	ldr	r2, [pc, #144]	@ (8002754 <HAL_DMA_Init+0x42c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d021      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	@ (8002758 <HAL_DMA_Init+0x430>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01c      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	@ (800275c <HAL_DMA_Init+0x434>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d017      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <HAL_DMA_Init+0x438>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d012      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002764 <HAL_DMA_Init+0x43c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00d      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <HAL_DMA_Init+0x440>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d008      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <HAL_DMA_Init+0x444>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <HAL_DMA_Init+0x3e4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_DMA_Init+0x448>)
 800270a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <HAL_DMA_Init+0x44c>)
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d021      	beq.n	8002778 <HAL_DMA_Init+0x450>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b80      	cmp	r3, #128	@ 0x80
 800273a:	d102      	bne.n	8002742 <HAL_DMA_Init+0x41a>
 800273c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002740:	e01b      	b.n	800277a <HAL_DMA_Init+0x452>
 8002742:	2300      	movs	r3, #0
 8002744:	e019      	b.n	800277a <HAL_DMA_Init+0x452>
 8002746:	bf00      	nop
 8002748:	fe10803f 	.word	0xfe10803f
 800274c:	5c001000 	.word	0x5c001000
 8002750:	ffff0000 	.word	0xffff0000
 8002754:	58025408 	.word	0x58025408
 8002758:	5802541c 	.word	0x5802541c
 800275c:	58025430 	.word	0x58025430
 8002760:	58025444 	.word	0x58025444
 8002764:	58025458 	.word	0x58025458
 8002768:	5802546c 	.word	0x5802546c
 800276c:	58025480 	.word	0x58025480
 8002770:	58025494 	.word	0x58025494
 8002774:	fffe000f 	.word	0xfffe000f
 8002778:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b6e      	ldr	r3, [pc, #440]	@ (8002978 <HAL_DMA_Init+0x650>)
 80027c0:	4413      	add	r3, r2
 80027c2:	4a6e      	ldr	r2, [pc, #440]	@ (800297c <HAL_DMA_Init+0x654>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f002 f9b5 	bl	8004b40 <DMA_CalcBaseAndBitshift>
 80027d6:	4603      	mov	r3, r0
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	e008      	b.n	80027fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2240      	movs	r2, #64	@ 0x40
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0b7      	b.n	800296e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	@ (8002980 <HAL_DMA_Init+0x658>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d072      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	@ (8002984 <HAL_DMA_Init+0x65c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d06d      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5c      	ldr	r2, [pc, #368]	@ (8002988 <HAL_DMA_Init+0x660>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d068      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5a      	ldr	r2, [pc, #360]	@ (800298c <HAL_DMA_Init+0x664>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d063      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a59      	ldr	r2, [pc, #356]	@ (8002990 <HAL_DMA_Init+0x668>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d05e      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	@ (8002994 <HAL_DMA_Init+0x66c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d059      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a56      	ldr	r2, [pc, #344]	@ (8002998 <HAL_DMA_Init+0x670>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d054      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a54      	ldr	r2, [pc, #336]	@ (800299c <HAL_DMA_Init+0x674>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04f      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a53      	ldr	r2, [pc, #332]	@ (80029a0 <HAL_DMA_Init+0x678>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04a      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a51      	ldr	r2, [pc, #324]	@ (80029a4 <HAL_DMA_Init+0x67c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d045      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a50      	ldr	r2, [pc, #320]	@ (80029a8 <HAL_DMA_Init+0x680>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a4e      	ldr	r2, [pc, #312]	@ (80029ac <HAL_DMA_Init+0x684>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03b      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4d      	ldr	r2, [pc, #308]	@ (80029b0 <HAL_DMA_Init+0x688>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d036      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4b      	ldr	r2, [pc, #300]	@ (80029b4 <HAL_DMA_Init+0x68c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4a      	ldr	r2, [pc, #296]	@ (80029b8 <HAL_DMA_Init+0x690>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02c      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a48      	ldr	r2, [pc, #288]	@ (80029bc <HAL_DMA_Init+0x694>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d027      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a47      	ldr	r2, [pc, #284]	@ (80029c0 <HAL_DMA_Init+0x698>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a45      	ldr	r2, [pc, #276]	@ (80029c4 <HAL_DMA_Init+0x69c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a44      	ldr	r2, [pc, #272]	@ (80029c8 <HAL_DMA_Init+0x6a0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a42      	ldr	r2, [pc, #264]	@ (80029cc <HAL_DMA_Init+0x6a4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a41      	ldr	r2, [pc, #260]	@ (80029d0 <HAL_DMA_Init+0x6a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3f      	ldr	r2, [pc, #252]	@ (80029d4 <HAL_DMA_Init+0x6ac>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a3e      	ldr	r2, [pc, #248]	@ (80029d8 <HAL_DMA_Init+0x6b0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_DMA_Init+0x5c6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3c      	ldr	r2, [pc, #240]	@ (80029dc <HAL_DMA_Init+0x6b4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_DMA_Init+0x5ca>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_DMA_Init+0x5cc>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d032      	beq.n	800295e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f002 fa4f 	bl	8004d9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b80      	cmp	r3, #128	@ 0x80
 8002904:	d102      	bne.n	800290c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002920:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_DMA_Init+0x624>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d80c      	bhi.n	800294c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f002 facc 	bl	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e008      	b.n	800295e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	a7fdabf8 	.word	0xa7fdabf8
 800297c:	cccccccd 	.word	0xcccccccd
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
 80029c0:	58025408 	.word	0x58025408
 80029c4:	5802541c 	.word	0x5802541c
 80029c8:	58025430 	.word	0x58025430
 80029cc:	58025444 	.word	0x58025444
 80029d0:	58025458 	.word	0x58025458
 80029d4:	5802546c 	.word	0x5802546c
 80029d8:	58025480 	.word	0x58025480
 80029dc:	58025494 	.word	0x58025494

080029e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e226      	b.n	8002e4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Start_IT+0x2a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e21f      	b.n	8002e4a <HAL_DMA_Start_IT+0x46a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 820a 	bne.w	8002e34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a68      	ldr	r2, [pc, #416]	@ (8002bd4 <HAL_DMA_Start_IT+0x1f4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d04a      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a66      	ldr	r2, [pc, #408]	@ (8002bd8 <HAL_DMA_Start_IT+0x1f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d045      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a65      	ldr	r2, [pc, #404]	@ (8002bdc <HAL_DMA_Start_IT+0x1fc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d040      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <HAL_DMA_Start_IT+0x200>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d03b      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a62      	ldr	r2, [pc, #392]	@ (8002be4 <HAL_DMA_Start_IT+0x204>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d036      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a60      	ldr	r2, [pc, #384]	@ (8002be8 <HAL_DMA_Start_IT+0x208>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d031      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bec <HAL_DMA_Start_IT+0x20c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d02c      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf0 <HAL_DMA_Start_IT+0x210>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d027      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf4 <HAL_DMA_Start_IT+0x214>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf8 <HAL_DMA_Start_IT+0x218>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01d      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a59      	ldr	r2, [pc, #356]	@ (8002bfc <HAL_DMA_Start_IT+0x21c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d018      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a57      	ldr	r2, [pc, #348]	@ (8002c00 <HAL_DMA_Start_IT+0x220>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a56      	ldr	r2, [pc, #344]	@ (8002c04 <HAL_DMA_Start_IT+0x224>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a54      	ldr	r2, [pc, #336]	@ (8002c08 <HAL_DMA_Start_IT+0x228>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a53      	ldr	r2, [pc, #332]	@ (8002c0c <HAL_DMA_Start_IT+0x22c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_DMA_Start_IT+0xee>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a51      	ldr	r2, [pc, #324]	@ (8002c10 <HAL_DMA_Start_IT+0x230>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <HAL_DMA_Start_IT+0x100>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <HAL_DMA_Start_IT+0x110>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f001 fe76 	bl	80047e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	@ (8002bd4 <HAL_DMA_Start_IT+0x1f4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04a      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_DMA_Start_IT+0x1f8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d045      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <HAL_DMA_Start_IT+0x1fc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <HAL_DMA_Start_IT+0x200>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d03b      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2e      	ldr	r2, [pc, #184]	@ (8002be4 <HAL_DMA_Start_IT+0x204>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	@ (8002be8 <HAL_DMA_Start_IT+0x208>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bec <HAL_DMA_Start_IT+0x20c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02c      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf0 <HAL_DMA_Start_IT+0x210>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d027      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <HAL_DMA_Start_IT+0x214>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <HAL_DMA_Start_IT+0x218>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01d      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_DMA_Start_IT+0x21c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_DMA_Start_IT+0x220>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_DMA_Start_IT+0x224>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_DMA_Start_IT+0x228>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <HAL_DMA_Start_IT+0x22c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Start_IT+0x1bc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_DMA_Start_IT+0x230>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_DMA_Start_IT+0x1c0>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMA_Start_IT+0x1c2>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 021e 	bic.w	r2, r3, #30
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0216 	orr.w	r2, r2, #22
 8002bb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03e      	beq.n	8002c40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0208 	orr.w	r2, r2, #8
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e035      	b.n	8002c40 <HAL_DMA_Start_IT+0x260>
 8002bd4:	40020010 	.word	0x40020010
 8002bd8:	40020028 	.word	0x40020028
 8002bdc:	40020040 	.word	0x40020040
 8002be0:	40020058 	.word	0x40020058
 8002be4:	40020070 	.word	0x40020070
 8002be8:	40020088 	.word	0x40020088
 8002bec:	400200a0 	.word	0x400200a0
 8002bf0:	400200b8 	.word	0x400200b8
 8002bf4:	40020410 	.word	0x40020410
 8002bf8:	40020428 	.word	0x40020428
 8002bfc:	40020440 	.word	0x40020440
 8002c00:	40020458 	.word	0x40020458
 8002c04:	40020470 	.word	0x40020470
 8002c08:	40020488 	.word	0x40020488
 8002c0c:	400204a0 	.word	0x400204a0
 8002c10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 020e 	bic.w	r2, r3, #14
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 020a 	orr.w	r2, r2, #10
 8002c26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0204 	orr.w	r2, r2, #4
 8002c3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a83      	ldr	r2, [pc, #524]	@ (8002e54 <HAL_DMA_Start_IT+0x474>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d072      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a82      	ldr	r2, [pc, #520]	@ (8002e58 <HAL_DMA_Start_IT+0x478>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d06d      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a80      	ldr	r2, [pc, #512]	@ (8002e5c <HAL_DMA_Start_IT+0x47c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d068      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7f      	ldr	r2, [pc, #508]	@ (8002e60 <HAL_DMA_Start_IT+0x480>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d063      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e64 <HAL_DMA_Start_IT+0x484>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d05e      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7c      	ldr	r2, [pc, #496]	@ (8002e68 <HAL_DMA_Start_IT+0x488>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d059      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7a      	ldr	r2, [pc, #488]	@ (8002e6c <HAL_DMA_Start_IT+0x48c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d054      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a79      	ldr	r2, [pc, #484]	@ (8002e70 <HAL_DMA_Start_IT+0x490>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04f      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a77      	ldr	r2, [pc, #476]	@ (8002e74 <HAL_DMA_Start_IT+0x494>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d04a      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a76      	ldr	r2, [pc, #472]	@ (8002e78 <HAL_DMA_Start_IT+0x498>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d045      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a74      	ldr	r2, [pc, #464]	@ (8002e7c <HAL_DMA_Start_IT+0x49c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d040      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a73      	ldr	r2, [pc, #460]	@ (8002e80 <HAL_DMA_Start_IT+0x4a0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d03b      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a71      	ldr	r2, [pc, #452]	@ (8002e84 <HAL_DMA_Start_IT+0x4a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d036      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a70      	ldr	r2, [pc, #448]	@ (8002e88 <HAL_DMA_Start_IT+0x4a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d031      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_DMA_Start_IT+0x4ac>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6d      	ldr	r2, [pc, #436]	@ (8002e90 <HAL_DMA_Start_IT+0x4b0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d027      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e94 <HAL_DMA_Start_IT+0x4b4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d022      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6a      	ldr	r2, [pc, #424]	@ (8002e98 <HAL_DMA_Start_IT+0x4b8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d01d      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a68      	ldr	r2, [pc, #416]	@ (8002e9c <HAL_DMA_Start_IT+0x4bc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d018      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a67      	ldr	r2, [pc, #412]	@ (8002ea0 <HAL_DMA_Start_IT+0x4c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a65      	ldr	r2, [pc, #404]	@ (8002ea4 <HAL_DMA_Start_IT+0x4c4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a64      	ldr	r2, [pc, #400]	@ (8002ea8 <HAL_DMA_Start_IT+0x4c8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a62      	ldr	r2, [pc, #392]	@ (8002eac <HAL_DMA_Start_IT+0x4cc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_DMA_Start_IT+0x350>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a61      	ldr	r2, [pc, #388]	@ (8002eb0 <HAL_DMA_Start_IT+0x4d0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Start_IT+0x354>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_DMA_Start_IT+0x356>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01a      	beq.n	8002d70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a37      	ldr	r2, [pc, #220]	@ (8002e54 <HAL_DMA_Start_IT+0x474>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d04a      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a36      	ldr	r2, [pc, #216]	@ (8002e58 <HAL_DMA_Start_IT+0x478>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d045      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a34      	ldr	r2, [pc, #208]	@ (8002e5c <HAL_DMA_Start_IT+0x47c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d040      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a33      	ldr	r2, [pc, #204]	@ (8002e60 <HAL_DMA_Start_IT+0x480>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d03b      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <HAL_DMA_Start_IT+0x484>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d036      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a30      	ldr	r2, [pc, #192]	@ (8002e68 <HAL_DMA_Start_IT+0x488>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e6c <HAL_DMA_Start_IT+0x48c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02c      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2d      	ldr	r2, [pc, #180]	@ (8002e70 <HAL_DMA_Start_IT+0x490>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d027      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e74 <HAL_DMA_Start_IT+0x494>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d022      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2a      	ldr	r2, [pc, #168]	@ (8002e78 <HAL_DMA_Start_IT+0x498>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d01d      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a28      	ldr	r2, [pc, #160]	@ (8002e7c <HAL_DMA_Start_IT+0x49c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d018      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_DMA_Start_IT+0x4a0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a25      	ldr	r2, [pc, #148]	@ (8002e84 <HAL_DMA_Start_IT+0x4a4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <HAL_DMA_Start_IT+0x4a8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a22      	ldr	r2, [pc, #136]	@ (8002e8c <HAL_DMA_Start_IT+0x4ac>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Start_IT+0x430>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <HAL_DMA_Start_IT+0x4b0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <HAL_DMA_Start_IT+0x442>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e012      	b.n	8002e48 <HAL_DMA_Start_IT+0x468>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e009      	b.n	8002e48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	58025408 	.word	0x58025408
 8002e98:	5802541c 	.word	0x5802541c
 8002e9c:	58025430 	.word	0x58025430
 8002ea0:	58025444 	.word	0x58025444
 8002ea4:	58025458 	.word	0x58025458
 8002ea8:	5802546c 	.word	0x5802546c
 8002eac:	58025480 	.word	0x58025480
 8002eb0:	58025494 	.word	0x58025494

08002eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff f904 	bl	80020c8 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e2dc      	b.n	8003486 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d008      	beq.n	8002eea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e2cd      	b.n	8003486 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a76      	ldr	r2, [pc, #472]	@ (80030c8 <HAL_DMA_Abort+0x214>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04a      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a74      	ldr	r2, [pc, #464]	@ (80030cc <HAL_DMA_Abort+0x218>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d045      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a73      	ldr	r2, [pc, #460]	@ (80030d0 <HAL_DMA_Abort+0x21c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d040      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a71      	ldr	r2, [pc, #452]	@ (80030d4 <HAL_DMA_Abort+0x220>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d03b      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a70      	ldr	r2, [pc, #448]	@ (80030d8 <HAL_DMA_Abort+0x224>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d036      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	@ (80030dc <HAL_DMA_Abort+0x228>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d031      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80030e0 <HAL_DMA_Abort+0x22c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d02c      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6b      	ldr	r2, [pc, #428]	@ (80030e4 <HAL_DMA_Abort+0x230>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d027      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80030e8 <HAL_DMA_Abort+0x234>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a68      	ldr	r2, [pc, #416]	@ (80030ec <HAL_DMA_Abort+0x238>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01d      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a67      	ldr	r2, [pc, #412]	@ (80030f0 <HAL_DMA_Abort+0x23c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_DMA_Abort+0x240>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a64      	ldr	r2, [pc, #400]	@ (80030f8 <HAL_DMA_Abort+0x244>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00e      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a62      	ldr	r2, [pc, #392]	@ (80030fc <HAL_DMA_Abort+0x248>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a61      	ldr	r2, [pc, #388]	@ (8003100 <HAL_DMA_Abort+0x24c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_DMA_Abort+0xd6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5f      	ldr	r2, [pc, #380]	@ (8003104 <HAL_DMA_Abort+0x250>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_DMA_Abort+0xda>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_Abort+0xdc>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 021e 	bic.w	r2, r2, #30
 8002fa2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e00a      	b.n	8002fd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020e 	bic.w	r2, r2, #14
 8002fca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80030c8 <HAL_DMA_Abort+0x214>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d072      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80030cc <HAL_DMA_Abort+0x218>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d06d      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a39      	ldr	r2, [pc, #228]	@ (80030d0 <HAL_DMA_Abort+0x21c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d068      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a37      	ldr	r2, [pc, #220]	@ (80030d4 <HAL_DMA_Abort+0x220>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d063      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a36      	ldr	r2, [pc, #216]	@ (80030d8 <HAL_DMA_Abort+0x224>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <HAL_DMA_Abort+0x228>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d059      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a33      	ldr	r2, [pc, #204]	@ (80030e0 <HAL_DMA_Abort+0x22c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d054      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a31      	ldr	r2, [pc, #196]	@ (80030e4 <HAL_DMA_Abort+0x230>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04f      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a30      	ldr	r2, [pc, #192]	@ (80030e8 <HAL_DMA_Abort+0x234>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2e      	ldr	r2, [pc, #184]	@ (80030ec <HAL_DMA_Abort+0x238>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2d      	ldr	r2, [pc, #180]	@ (80030f0 <HAL_DMA_Abort+0x23c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <HAL_DMA_Abort+0x240>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2a      	ldr	r2, [pc, #168]	@ (80030f8 <HAL_DMA_Abort+0x244>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a28      	ldr	r2, [pc, #160]	@ (80030fc <HAL_DMA_Abort+0x248>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <HAL_DMA_Abort+0x24c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a25      	ldr	r2, [pc, #148]	@ (8003104 <HAL_DMA_Abort+0x250>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_DMA_Abort+0x254>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_DMA_Abort+0x258>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <HAL_DMA_Abort+0x25c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_DMA_Abort+0x260>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_DMA_Abort+0x264>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_DMA_Abort+0x268>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_DMA_Abort+0x26c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x20e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_DMA_Abort+0x270>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d132      	bne.n	8003128 <HAL_DMA_Abort+0x274>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e031      	b.n	800312a <HAL_DMA_Abort+0x276>
 80030c6:	bf00      	nop
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	58025408 	.word	0x58025408
 800310c:	5802541c 	.word	0x5802541c
 8003110:	58025430 	.word	0x58025430
 8003114:	58025444 	.word	0x58025444
 8003118:	58025458 	.word	0x58025458
 800311c:	5802546c 	.word	0x5802546c
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800313c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6d      	ldr	r2, [pc, #436]	@ (80032f8 <HAL_DMA_Abort+0x444>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <HAL_DMA_Abort+0x448>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <HAL_DMA_Abort+0x44c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	@ (8003304 <HAL_DMA_Abort+0x450>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <HAL_DMA_Abort+0x454>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	@ (800330c <HAL_DMA_Abort+0x458>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a64      	ldr	r2, [pc, #400]	@ (8003310 <HAL_DMA_Abort+0x45c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a62      	ldr	r2, [pc, #392]	@ (8003314 <HAL_DMA_Abort+0x460>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a61      	ldr	r2, [pc, #388]	@ (8003318 <HAL_DMA_Abort+0x464>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5f      	ldr	r2, [pc, #380]	@ (800331c <HAL_DMA_Abort+0x468>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003320 <HAL_DMA_Abort+0x46c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003324 <HAL_DMA_Abort+0x470>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003328 <HAL_DMA_Abort+0x474>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a59      	ldr	r2, [pc, #356]	@ (800332c <HAL_DMA_Abort+0x478>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <HAL_DMA_Abort+0x47c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_Abort+0x32a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a56      	ldr	r2, [pc, #344]	@ (8003334 <HAL_DMA_Abort+0x480>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <HAL_DMA_Abort+0x33c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e007      	b.n	8003200 <HAL_DMA_Abort+0x34c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003200:	e013      	b.n	800322a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003202:	f7fe ff61 	bl	80020c8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b05      	cmp	r3, #5
 800320e:	d90c      	bls.n	800322a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e12d      	b.n	8003486 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2f      	ldr	r2, [pc, #188]	@ (80032f8 <HAL_DMA_Abort+0x444>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d04a      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <HAL_DMA_Abort+0x448>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d045      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <HAL_DMA_Abort+0x44c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d040      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <HAL_DMA_Abort+0x450>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d03b      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_DMA_Abort+0x454>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d036      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a27      	ldr	r2, [pc, #156]	@ (800330c <HAL_DMA_Abort+0x458>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d031      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <HAL_DMA_Abort+0x45c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d02c      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a24      	ldr	r2, [pc, #144]	@ (8003314 <HAL_DMA_Abort+0x460>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d027      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <HAL_DMA_Abort+0x464>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d022      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_DMA_Abort+0x468>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01d      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a20      	ldr	r2, [pc, #128]	@ (8003320 <HAL_DMA_Abort+0x46c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d018      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003324 <HAL_DMA_Abort+0x470>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_DMA_Abort+0x474>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	@ (800332c <HAL_DMA_Abort+0x478>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003330 <HAL_DMA_Abort+0x47c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_DMA_Abort+0x422>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a18      	ldr	r2, [pc, #96]	@ (8003334 <HAL_DMA_Abort+0x480>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_DMA_Abort+0x426>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_DMA_Abort+0x428>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02b      	beq.n	8003338 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	223f      	movs	r2, #63	@ 0x3f
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	e02a      	b.n	800334e <HAL_DMA_Abort+0x49a>
 80032f8:	40020010 	.word	0x40020010
 80032fc:	40020028 	.word	0x40020028
 8003300:	40020040 	.word	0x40020040
 8003304:	40020058 	.word	0x40020058
 8003308:	40020070 	.word	0x40020070
 800330c:	40020088 	.word	0x40020088
 8003310:	400200a0 	.word	0x400200a0
 8003314:	400200b8 	.word	0x400200b8
 8003318:	40020410 	.word	0x40020410
 800331c:	40020428 	.word	0x40020428
 8003320:	40020440 	.word	0x40020440
 8003324:	40020458 	.word	0x40020458
 8003328:	40020470 	.word	0x40020470
 800332c:	40020488 	.word	0x40020488
 8003330:	400204a0 	.word	0x400204a0
 8003334:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4f      	ldr	r2, [pc, #316]	@ (8003490 <HAL_DMA_Abort+0x5dc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d072      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4d      	ldr	r2, [pc, #308]	@ (8003494 <HAL_DMA_Abort+0x5e0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d06d      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a4c      	ldr	r2, [pc, #304]	@ (8003498 <HAL_DMA_Abort+0x5e4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d068      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_DMA_Abort+0x5e8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d063      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a49      	ldr	r2, [pc, #292]	@ (80034a0 <HAL_DMA_Abort+0x5ec>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d05e      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a47      	ldr	r2, [pc, #284]	@ (80034a4 <HAL_DMA_Abort+0x5f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d059      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a46      	ldr	r2, [pc, #280]	@ (80034a8 <HAL_DMA_Abort+0x5f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d054      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a44      	ldr	r2, [pc, #272]	@ (80034ac <HAL_DMA_Abort+0x5f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d04f      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a43      	ldr	r2, [pc, #268]	@ (80034b0 <HAL_DMA_Abort+0x5fc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d04a      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a41      	ldr	r2, [pc, #260]	@ (80034b4 <HAL_DMA_Abort+0x600>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d045      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a40      	ldr	r2, [pc, #256]	@ (80034b8 <HAL_DMA_Abort+0x604>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d040      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a3e      	ldr	r2, [pc, #248]	@ (80034bc <HAL_DMA_Abort+0x608>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d03b      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3d      	ldr	r2, [pc, #244]	@ (80034c0 <HAL_DMA_Abort+0x60c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d036      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <HAL_DMA_Abort+0x610>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d031      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3a      	ldr	r2, [pc, #232]	@ (80034c8 <HAL_DMA_Abort+0x614>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d02c      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_DMA_Abort+0x618>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d027      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a37      	ldr	r2, [pc, #220]	@ (80034d0 <HAL_DMA_Abort+0x61c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a35      	ldr	r2, [pc, #212]	@ (80034d4 <HAL_DMA_Abort+0x620>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01d      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a34      	ldr	r2, [pc, #208]	@ (80034d8 <HAL_DMA_Abort+0x624>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d018      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a32      	ldr	r2, [pc, #200]	@ (80034dc <HAL_DMA_Abort+0x628>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a31      	ldr	r2, [pc, #196]	@ (80034e0 <HAL_DMA_Abort+0x62c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2f      	ldr	r2, [pc, #188]	@ (80034e4 <HAL_DMA_Abort+0x630>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2e      	ldr	r2, [pc, #184]	@ (80034e8 <HAL_DMA_Abort+0x634>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_DMA_Abort+0x58a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2c      	ldr	r2, [pc, #176]	@ (80034ec <HAL_DMA_Abort+0x638>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Abort+0x58e>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_DMA_Abort+0x590>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003450:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003468:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003472:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	58025408 	.word	0x58025408
 80034d4:	5802541c 	.word	0x5802541c
 80034d8:	58025430 	.word	0x58025430
 80034dc:	58025444 	.word	0x58025444
 80034e0:	58025458 	.word	0x58025458
 80034e4:	5802546c 	.word	0x5802546c
 80034e8:	58025480 	.word	0x58025480
 80034ec:	58025494 	.word	0x58025494

080034f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e237      	b.n	8003972 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d004      	beq.n	8003518 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2280      	movs	r2, #128	@ 0x80
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e22c      	b.n	8003972 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5c      	ldr	r2, [pc, #368]	@ (8003690 <HAL_DMA_Abort_IT+0x1a0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04a      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5b      	ldr	r2, [pc, #364]	@ (8003694 <HAL_DMA_Abort_IT+0x1a4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d045      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a59      	ldr	r2, [pc, #356]	@ (8003698 <HAL_DMA_Abort_IT+0x1a8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d040      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	@ (800369c <HAL_DMA_Abort_IT+0x1ac>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d03b      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a56      	ldr	r2, [pc, #344]	@ (80036a0 <HAL_DMA_Abort_IT+0x1b0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d036      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a55      	ldr	r2, [pc, #340]	@ (80036a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d031      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a53      	ldr	r2, [pc, #332]	@ (80036a8 <HAL_DMA_Abort_IT+0x1b8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02c      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a52      	ldr	r2, [pc, #328]	@ (80036ac <HAL_DMA_Abort_IT+0x1bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d027      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a50      	ldr	r2, [pc, #320]	@ (80036b0 <HAL_DMA_Abort_IT+0x1c0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4f      	ldr	r2, [pc, #316]	@ (80036b4 <HAL_DMA_Abort_IT+0x1c4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01d      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4d      	ldr	r2, [pc, #308]	@ (80036b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <HAL_DMA_Abort_IT+0x1cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <HAL_DMA_Abort_IT+0x1d0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a49      	ldr	r2, [pc, #292]	@ (80036c4 <HAL_DMA_Abort_IT+0x1d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a47      	ldr	r2, [pc, #284]	@ (80036c8 <HAL_DMA_Abort_IT+0x1d8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_Abort_IT+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a46      	ldr	r2, [pc, #280]	@ (80036cc <HAL_DMA_Abort_IT+0x1dc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_DMA_Abort_IT+0xcc>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_DMA_Abort_IT+0xce>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8086 	beq.w	80036d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003690 <HAL_DMA_Abort_IT+0x1a0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d04a      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2e      	ldr	r2, [pc, #184]	@ (8003694 <HAL_DMA_Abort_IT+0x1a4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d045      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <HAL_DMA_Abort_IT+0x1a8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d040      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <HAL_DMA_Abort_IT+0x1ac>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d03b      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a29      	ldr	r2, [pc, #164]	@ (80036a0 <HAL_DMA_Abort_IT+0x1b0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d036      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d031      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a26      	ldr	r2, [pc, #152]	@ (80036a8 <HAL_DMA_Abort_IT+0x1b8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d02c      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a25      	ldr	r2, [pc, #148]	@ (80036ac <HAL_DMA_Abort_IT+0x1bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d027      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <HAL_DMA_Abort_IT+0x1c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d022      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a22      	ldr	r2, [pc, #136]	@ (80036b4 <HAL_DMA_Abort_IT+0x1c4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d01d      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d018      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <HAL_DMA_Abort_IT+0x1cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_DMA_Abort_IT+0x1d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00e      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <HAL_DMA_Abort_IT+0x1d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_DMA_Abort_IT+0x1d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_DMA_Abort_IT+0x17c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a19      	ldr	r2, [pc, #100]	@ (80036cc <HAL_DMA_Abort_IT+0x1dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <HAL_DMA_Abort_IT+0x18e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e178      	b.n	8003970 <HAL_DMA_Abort_IT+0x480>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e16f      	b.n	8003970 <HAL_DMA_Abort_IT+0x480>
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020e 	bic.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003898 <HAL_DMA_Abort_IT+0x3a8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04a      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6b      	ldr	r2, [pc, #428]	@ (800389c <HAL_DMA_Abort_IT+0x3ac>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d045      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a69      	ldr	r2, [pc, #420]	@ (80038a0 <HAL_DMA_Abort_IT+0x3b0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d040      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a68      	ldr	r2, [pc, #416]	@ (80038a4 <HAL_DMA_Abort_IT+0x3b4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d03b      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a66      	ldr	r2, [pc, #408]	@ (80038a8 <HAL_DMA_Abort_IT+0x3b8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d036      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a65      	ldr	r2, [pc, #404]	@ (80038ac <HAL_DMA_Abort_IT+0x3bc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d031      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a63      	ldr	r2, [pc, #396]	@ (80038b0 <HAL_DMA_Abort_IT+0x3c0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d02c      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a62      	ldr	r2, [pc, #392]	@ (80038b4 <HAL_DMA_Abort_IT+0x3c4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d027      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a60      	ldr	r2, [pc, #384]	@ (80038b8 <HAL_DMA_Abort_IT+0x3c8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d022      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5f      	ldr	r2, [pc, #380]	@ (80038bc <HAL_DMA_Abort_IT+0x3cc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d01d      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5d      	ldr	r2, [pc, #372]	@ (80038c0 <HAL_DMA_Abort_IT+0x3d0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a5c      	ldr	r2, [pc, #368]	@ (80038c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a5a      	ldr	r2, [pc, #360]	@ (80038c8 <HAL_DMA_Abort_IT+0x3d8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a59      	ldr	r2, [pc, #356]	@ (80038cc <HAL_DMA_Abort_IT+0x3dc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a57      	ldr	r2, [pc, #348]	@ (80038d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_DMA_Abort_IT+0x290>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <HAL_DMA_Abort_IT+0x3e4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d108      	bne.n	8003792 <HAL_DMA_Abort_IT+0x2a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e007      	b.n	80037a2 <HAL_DMA_Abort_IT+0x2b2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003898 <HAL_DMA_Abort_IT+0x3a8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d072      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3a      	ldr	r2, [pc, #232]	@ (800389c <HAL_DMA_Abort_IT+0x3ac>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d06d      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a39      	ldr	r2, [pc, #228]	@ (80038a0 <HAL_DMA_Abort_IT+0x3b0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d068      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a37      	ldr	r2, [pc, #220]	@ (80038a4 <HAL_DMA_Abort_IT+0x3b4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d063      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a36      	ldr	r2, [pc, #216]	@ (80038a8 <HAL_DMA_Abort_IT+0x3b8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d05e      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a34      	ldr	r2, [pc, #208]	@ (80038ac <HAL_DMA_Abort_IT+0x3bc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d059      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <HAL_DMA_Abort_IT+0x3c0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d054      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a31      	ldr	r2, [pc, #196]	@ (80038b4 <HAL_DMA_Abort_IT+0x3c4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04f      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a30      	ldr	r2, [pc, #192]	@ (80038b8 <HAL_DMA_Abort_IT+0x3c8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2e      	ldr	r2, [pc, #184]	@ (80038bc <HAL_DMA_Abort_IT+0x3cc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_DMA_Abort_IT+0x3d0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2b      	ldr	r2, [pc, #172]	@ (80038c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2a      	ldr	r2, [pc, #168]	@ (80038c8 <HAL_DMA_Abort_IT+0x3d8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a28      	ldr	r2, [pc, #160]	@ (80038cc <HAL_DMA_Abort_IT+0x3dc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a25      	ldr	r2, [pc, #148]	@ (80038d4 <HAL_DMA_Abort_IT+0x3e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <HAL_DMA_Abort_IT+0x3e8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_DMA_Abort_IT+0x3ec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <HAL_DMA_Abort_IT+0x3f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <HAL_DMA_Abort_IT+0x3f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <HAL_DMA_Abort_IT+0x3f8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_DMA_Abort_IT+0x3fc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_DMA_Abort_IT+0x400>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Abort_IT+0x3a2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <HAL_DMA_Abort_IT+0x404>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d132      	bne.n	80038f8 <HAL_DMA_Abort_IT+0x408>
 8003892:	2301      	movs	r3, #1
 8003894:	e031      	b.n	80038fa <HAL_DMA_Abort_IT+0x40a>
 8003896:	bf00      	nop
 8003898:	40020010 	.word	0x40020010
 800389c:	40020028 	.word	0x40020028
 80038a0:	40020040 	.word	0x40020040
 80038a4:	40020058 	.word	0x40020058
 80038a8:	40020070 	.word	0x40020070
 80038ac:	40020088 	.word	0x40020088
 80038b0:	400200a0 	.word	0x400200a0
 80038b4:	400200b8 	.word	0x400200b8
 80038b8:	40020410 	.word	0x40020410
 80038bc:	40020428 	.word	0x40020428
 80038c0:	40020440 	.word	0x40020440
 80038c4:	40020458 	.word	0x40020458
 80038c8:	40020470 	.word	0x40020470
 80038cc:	40020488 	.word	0x40020488
 80038d0:	400204a0 	.word	0x400204a0
 80038d4:	400204b8 	.word	0x400204b8
 80038d8:	58025408 	.word	0x58025408
 80038dc:	5802541c 	.word	0x5802541c
 80038e0:	58025430 	.word	0x58025430
 80038e4:	58025444 	.word	0x58025444
 80038e8:	58025458 	.word	0x58025458
 80038ec:	5802546c 	.word	0x5802546c
 80038f0:	58025480 	.word	0x58025480
 80038f4:	58025494 	.word	0x58025494
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d028      	beq.n	8003950 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800390c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800392c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003944:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800394e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003988:	4b67      	ldr	r3, [pc, #412]	@ (8003b28 <HAL_DMA_IRQHandler+0x1ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a67      	ldr	r2, [pc, #412]	@ (8003b2c <HAL_DMA_IRQHandler+0x1b0>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a9b      	lsrs	r3, r3, #10
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b30 <HAL_DMA_IRQHandler+0x1b4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b34 <HAL_DMA_IRQHandler+0x1b8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <HAL_DMA_IRQHandler+0x1bc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b3c <HAL_DMA_IRQHandler+0x1c0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a59      	ldr	r2, [pc, #356]	@ (8003b40 <HAL_DMA_IRQHandler+0x1c4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_DMA_IRQHandler+0x1c8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_DMA_IRQHandler+0x1cc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a54      	ldr	r2, [pc, #336]	@ (8003b4c <HAL_DMA_IRQHandler+0x1d0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a53      	ldr	r2, [pc, #332]	@ (8003b50 <HAL_DMA_IRQHandler+0x1d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a51      	ldr	r2, [pc, #324]	@ (8003b54 <HAL_DMA_IRQHandler+0x1d8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a50      	ldr	r2, [pc, #320]	@ (8003b58 <HAL_DMA_IRQHandler+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a4e      	ldr	r2, [pc, #312]	@ (8003b5c <HAL_DMA_IRQHandler+0x1e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b60 <HAL_DMA_IRQHandler+0x1e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	@ (8003b64 <HAL_DMA_IRQHandler+0x1e8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b68 <HAL_DMA_IRQHandler+0x1ec>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xd2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a48      	ldr	r2, [pc, #288]	@ (8003b6c <HAL_DMA_IRQHandler+0x1f0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_DMA_IRQHandler+0xd6>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_IRQHandler+0xd8>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 842b 	beq.w	80042b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2208      	movs	r2, #8
 8003a64:	409a      	lsls	r2, r3
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80a2 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2e      	ldr	r2, [pc, #184]	@ (8003b30 <HAL_DMA_IRQHandler+0x1b4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_DMA_IRQHandler+0x1b8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d045      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <HAL_DMA_IRQHandler+0x1bc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d040      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <HAL_DMA_IRQHandler+0x1c0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d03b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	@ (8003b40 <HAL_DMA_IRQHandler+0x1c4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d036      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	@ (8003b44 <HAL_DMA_IRQHandler+0x1c8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d031      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <HAL_DMA_IRQHandler+0x1cc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02c      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	@ (8003b4c <HAL_DMA_IRQHandler+0x1d0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d027      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_DMA_IRQHandler+0x1d4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <HAL_DMA_IRQHandler+0x1d8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01d      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_DMA_IRQHandler+0x1dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b5c <HAL_DMA_IRQHandler+0x1e0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_DMA_IRQHandler+0x1e4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_DMA_IRQHandler+0x1e8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_DMA_IRQHandler+0x1ec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x194>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <HAL_DMA_IRQHandler+0x1f0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d12f      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x1f4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e02e      	b.n	8003b84 <HAL_DMA_IRQHandler+0x208>
 8003b26:	bf00      	nop
 8003b28:	24000004 	.word	0x24000004
 8003b2c:	1b4e81b5 	.word	0x1b4e81b5
 8003b30:	40020010 	.word	0x40020010
 8003b34:	40020028 	.word	0x40020028
 8003b38:	40020040 	.word	0x40020040
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	40020070 	.word	0x40020070
 8003b44:	40020088 	.word	0x40020088
 8003b48:	400200a0 	.word	0x400200a0
 8003b4c:	400200b8 	.word	0x400200b8
 8003b50:	40020410 	.word	0x40020410
 8003b54:	40020428 	.word	0x40020428
 8003b58:	40020440 	.word	0x40020440
 8003b5c:	40020458 	.word	0x40020458
 8003b60:	40020470 	.word	0x40020470
 8003b64:	40020488 	.word	0x40020488
 8003b68:	400204a0 	.word	0x400204a0
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06e      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a69      	ldr	r2, [pc, #420]	@ (8003d74 <HAL_DMA_IRQHandler+0x3f8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d04a      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	@ (8003d78 <HAL_DMA_IRQHandler+0x3fc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d045      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a66      	ldr	r2, [pc, #408]	@ (8003d7c <HAL_DMA_IRQHandler+0x400>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a64      	ldr	r2, [pc, #400]	@ (8003d80 <HAL_DMA_IRQHandler+0x404>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d03b      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a63      	ldr	r2, [pc, #396]	@ (8003d84 <HAL_DMA_IRQHandler+0x408>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a61      	ldr	r2, [pc, #388]	@ (8003d88 <HAL_DMA_IRQHandler+0x40c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a60      	ldr	r2, [pc, #384]	@ (8003d8c <HAL_DMA_IRQHandler+0x410>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d02c      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5e      	ldr	r2, [pc, #376]	@ (8003d90 <HAL_DMA_IRQHandler+0x414>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d027      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d94 <HAL_DMA_IRQHandler+0x418>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5b      	ldr	r2, [pc, #364]	@ (8003d98 <HAL_DMA_IRQHandler+0x41c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5a      	ldr	r2, [pc, #360]	@ (8003d9c <HAL_DMA_IRQHandler+0x420>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a58      	ldr	r2, [pc, #352]	@ (8003da0 <HAL_DMA_IRQHandler+0x424>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a57      	ldr	r2, [pc, #348]	@ (8003da4 <HAL_DMA_IRQHandler+0x428>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a55      	ldr	r2, [pc, #340]	@ (8003da8 <HAL_DMA_IRQHandler+0x42c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a54      	ldr	r2, [pc, #336]	@ (8003dac <HAL_DMA_IRQHandler+0x430>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ee>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_DMA_IRQHandler+0x434>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10a      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x304>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e003      	b.n	8003c88 <HAL_DMA_IRQHandler+0x30c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f043 0202 	orr.w	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 808f 	beq.w	8003ddc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d74 <HAL_DMA_IRQHandler+0x3f8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d04a      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d78 <HAL_DMA_IRQHandler+0x3fc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d045      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_DMA_IRQHandler+0x400>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d040      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a27      	ldr	r2, [pc, #156]	@ (8003d80 <HAL_DMA_IRQHandler+0x404>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d03b      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a26      	ldr	r2, [pc, #152]	@ (8003d84 <HAL_DMA_IRQHandler+0x408>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d036      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	@ (8003d88 <HAL_DMA_IRQHandler+0x40c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d031      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a23      	ldr	r2, [pc, #140]	@ (8003d8c <HAL_DMA_IRQHandler+0x410>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d02c      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a21      	ldr	r2, [pc, #132]	@ (8003d90 <HAL_DMA_IRQHandler+0x414>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d027      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a20      	ldr	r2, [pc, #128]	@ (8003d94 <HAL_DMA_IRQHandler+0x418>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d022      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d98 <HAL_DMA_IRQHandler+0x41c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01d      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	@ (8003d9c <HAL_DMA_IRQHandler+0x420>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d018      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	@ (8003da0 <HAL_DMA_IRQHandler+0x424>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <HAL_DMA_IRQHandler+0x428>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00e      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a18      	ldr	r2, [pc, #96]	@ (8003da8 <HAL_DMA_IRQHandler+0x42c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a17      	ldr	r2, [pc, #92]	@ (8003dac <HAL_DMA_IRQHandler+0x430>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x3e2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <HAL_DMA_IRQHandler+0x434>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d12a      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x438>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e023      	b.n	8003dbc <HAL_DMA_IRQHandler+0x440>
 8003d74:	40020010 	.word	0x40020010
 8003d78:	40020028 	.word	0x40020028
 8003d7c:	40020040 	.word	0x40020040
 8003d80:	40020058 	.word	0x40020058
 8003d84:	40020070 	.word	0x40020070
 8003d88:	40020088 	.word	0x40020088
 8003d8c:	400200a0 	.word	0x400200a0
 8003d90:	400200b8 	.word	0x400200b8
 8003d94:	40020410 	.word	0x40020410
 8003d98:	40020428 	.word	0x40020428
 8003d9c:	40020440 	.word	0x40020440
 8003da0:	40020458 	.word	0x40020458
 8003da4:	40020470 	.word	0x40020470
 8003da8:	40020488 	.word	0x40020488
 8003dac:	400204a0 	.word	0x400204a0
 8003db0:	400204b8 	.word	0x400204b8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2204      	movs	r2, #4
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2210      	movs	r2, #16
 8003de6:	409a      	lsls	r2, r3
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a6 	beq.w	8003f3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a85      	ldr	r2, [pc, #532]	@ (800400c <HAL_DMA_IRQHandler+0x690>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04a      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a83      	ldr	r2, [pc, #524]	@ (8004010 <HAL_DMA_IRQHandler+0x694>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a82      	ldr	r2, [pc, #520]	@ (8004014 <HAL_DMA_IRQHandler+0x698>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d040      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a80      	ldr	r2, [pc, #512]	@ (8004018 <HAL_DMA_IRQHandler+0x69c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800401c <HAL_DMA_IRQHandler+0x6a0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d036      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a7d      	ldr	r2, [pc, #500]	@ (8004020 <HAL_DMA_IRQHandler+0x6a4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7c      	ldr	r2, [pc, #496]	@ (8004024 <HAL_DMA_IRQHandler+0x6a8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d02c      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a7a      	ldr	r2, [pc, #488]	@ (8004028 <HAL_DMA_IRQHandler+0x6ac>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d027      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a79      	ldr	r2, [pc, #484]	@ (800402c <HAL_DMA_IRQHandler+0x6b0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a77      	ldr	r2, [pc, #476]	@ (8004030 <HAL_DMA_IRQHandler+0x6b4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a76      	ldr	r2, [pc, #472]	@ (8004034 <HAL_DMA_IRQHandler+0x6b8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a74      	ldr	r2, [pc, #464]	@ (8004038 <HAL_DMA_IRQHandler+0x6bc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a73      	ldr	r2, [pc, #460]	@ (800403c <HAL_DMA_IRQHandler+0x6c0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a71      	ldr	r2, [pc, #452]	@ (8004040 <HAL_DMA_IRQHandler+0x6c4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a70      	ldr	r2, [pc, #448]	@ (8004044 <HAL_DMA_IRQHandler+0x6c8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x516>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004048 <HAL_DMA_IRQHandler+0x6cc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10a      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x52c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e009      	b.n	8003ebc <HAL_DMA_IRQHandler+0x540>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03e      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2210      	movs	r2, #16
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d024      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
 8003efc:	e01f      	b.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01b      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	e016      	b.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0208 	bic.w	r2, r2, #8
 8003f2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2220      	movs	r2, #32
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8110 	beq.w	8004174 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	@ (800400c <HAL_DMA_IRQHandler+0x690>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d04a      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	@ (8004010 <HAL_DMA_IRQHandler+0x694>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d045      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a29      	ldr	r2, [pc, #164]	@ (8004014 <HAL_DMA_IRQHandler+0x698>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d040      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a28      	ldr	r2, [pc, #160]	@ (8004018 <HAL_DMA_IRQHandler+0x69c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d03b      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	@ (800401c <HAL_DMA_IRQHandler+0x6a0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d036      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	@ (8004020 <HAL_DMA_IRQHandler+0x6a4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d031      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	@ (8004024 <HAL_DMA_IRQHandler+0x6a8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02c      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <HAL_DMA_IRQHandler+0x6ac>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d027      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <HAL_DMA_IRQHandler+0x6b0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004030 <HAL_DMA_IRQHandler+0x6b4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004034 <HAL_DMA_IRQHandler+0x6b8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <HAL_DMA_IRQHandler+0x6bc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_DMA_IRQHandler+0x6c0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <HAL_DMA_IRQHandler+0x6c4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_DMA_IRQHandler+0x6c8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x678>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a16      	ldr	r2, [pc, #88]	@ (8004048 <HAL_DMA_IRQHandler+0x6cc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d12b      	bne.n	800404c <HAL_DMA_IRQHandler+0x6d0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e02a      	b.n	8004060 <HAL_DMA_IRQHandler+0x6e4>
 800400a:	bf00      	nop
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8087 	beq.w	8004174 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2220      	movs	r2, #32
 8004070:	409a      	lsls	r2, r3
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b04      	cmp	r3, #4
 8004080:	d139      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0216 	bic.w	r2, r2, #22
 8004090:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x736>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0208 	bic.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	223f      	movs	r2, #63	@ 0x3f
 80040cc:	409a      	lsls	r2, r3
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 834a 	beq.w	8004780 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
          }
          return;
 80040f4:	e344      	b.n	8004780 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02c      	beq.n	8004174 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
 8004122:	e027      	b.n	8004174 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d023      	beq.n	8004174 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
 8004134:	e01e      	b.n	8004174 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10f      	bne.n	8004164 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0210 	bic.w	r2, r2, #16
 8004152:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8306 	beq.w	800478a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8088 	beq.w	800429c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2204      	movs	r2, #4
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a7a      	ldr	r2, [pc, #488]	@ (8004384 <HAL_DMA_IRQHandler+0xa08>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a79      	ldr	r2, [pc, #484]	@ (8004388 <HAL_DMA_IRQHandler+0xa0c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a77      	ldr	r2, [pc, #476]	@ (800438c <HAL_DMA_IRQHandler+0xa10>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a76      	ldr	r2, [pc, #472]	@ (8004390 <HAL_DMA_IRQHandler+0xa14>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a74      	ldr	r2, [pc, #464]	@ (8004394 <HAL_DMA_IRQHandler+0xa18>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a73      	ldr	r2, [pc, #460]	@ (8004398 <HAL_DMA_IRQHandler+0xa1c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a71      	ldr	r2, [pc, #452]	@ (800439c <HAL_DMA_IRQHandler+0xa20>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a70      	ldr	r2, [pc, #448]	@ (80043a0 <HAL_DMA_IRQHandler+0xa24>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	@ (80043a4 <HAL_DMA_IRQHandler+0xa28>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6d      	ldr	r2, [pc, #436]	@ (80043a8 <HAL_DMA_IRQHandler+0xa2c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6b      	ldr	r2, [pc, #428]	@ (80043ac <HAL_DMA_IRQHandler+0xa30>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6a      	ldr	r2, [pc, #424]	@ (80043b0 <HAL_DMA_IRQHandler+0xa34>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	@ (80043b4 <HAL_DMA_IRQHandler+0xa38>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a67      	ldr	r2, [pc, #412]	@ (80043b8 <HAL_DMA_IRQHandler+0xa3c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a65      	ldr	r2, [pc, #404]	@ (80043bc <HAL_DMA_IRQHandler+0xa40>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_DMA_IRQHandler+0x8b8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a64      	ldr	r2, [pc, #400]	@ (80043c0 <HAL_DMA_IRQHandler+0xa44>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_DMA_IRQHandler+0x8ca>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e007      	b.n	8004256 <HAL_DMA_IRQHandler+0x8da>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3301      	adds	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	429a      	cmp	r2, r3
 8004260:	d307      	bcc.n	8004272 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f2      	bne.n	8004256 <HAL_DMA_IRQHandler+0x8da>
 8004270:	e000      	b.n	8004274 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004272:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2203      	movs	r2, #3
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800428a:	e003      	b.n	8004294 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8272 	beq.w	800478a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
 80042ae:	e26c      	b.n	800478a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a43      	ldr	r2, [pc, #268]	@ (80043c4 <HAL_DMA_IRQHandler+0xa48>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d022      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <HAL_DMA_IRQHandler+0xa4c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01d      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a40      	ldr	r2, [pc, #256]	@ (80043cc <HAL_DMA_IRQHandler+0xa50>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3f      	ldr	r2, [pc, #252]	@ (80043d0 <HAL_DMA_IRQHandler+0xa54>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3d      	ldr	r2, [pc, #244]	@ (80043d4 <HAL_DMA_IRQHandler+0xa58>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3c      	ldr	r2, [pc, #240]	@ (80043d8 <HAL_DMA_IRQHandler+0xa5c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3a      	ldr	r2, [pc, #232]	@ (80043dc <HAL_DMA_IRQHandler+0xa60>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_IRQHandler+0x984>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a39      	ldr	r2, [pc, #228]	@ (80043e0 <HAL_DMA_IRQHandler+0xa64>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <HAL_DMA_IRQHandler+0x988>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0x98a>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 823f 	beq.w	800478a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2204      	movs	r2, #4
 800431e:	409a      	lsls	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80cd 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xb48>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80c7 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2204      	movs	r2, #4
 8004340:	409a      	lsls	r2, r3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d049      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8210 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800436c:	e20a      	b.n	8004784 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8206 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004380:	e200      	b.n	8004784 <HAL_DMA_IRQHandler+0xe08>
 8004382:	bf00      	nop
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8
 80043c4:	58025408 	.word	0x58025408
 80043c8:	5802541c 	.word	0x5802541c
 80043cc:	58025430 	.word	0x58025430
 80043d0:	58025444 	.word	0x58025444
 80043d4:	58025458 	.word	0x58025458
 80043d8:	5802546c 	.word	0x5802546c
 80043dc:	58025480 	.word	0x58025480
 80043e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d160      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7f      	ldr	r2, [pc, #508]	@ (80045f0 <HAL_DMA_IRQHandler+0xc74>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7d      	ldr	r2, [pc, #500]	@ (80045f4 <HAL_DMA_IRQHandler+0xc78>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7c      	ldr	r2, [pc, #496]	@ (80045f8 <HAL_DMA_IRQHandler+0xc7c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7a      	ldr	r2, [pc, #488]	@ (80045fc <HAL_DMA_IRQHandler+0xc80>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a79      	ldr	r2, [pc, #484]	@ (8004600 <HAL_DMA_IRQHandler+0xc84>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a77      	ldr	r2, [pc, #476]	@ (8004604 <HAL_DMA_IRQHandler+0xc88>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a76      	ldr	r2, [pc, #472]	@ (8004608 <HAL_DMA_IRQHandler+0xc8c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a74      	ldr	r2, [pc, #464]	@ (800460c <HAL_DMA_IRQHandler+0xc90>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	@ (8004610 <HAL_DMA_IRQHandler+0xc94>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a71      	ldr	r2, [pc, #452]	@ (8004614 <HAL_DMA_IRQHandler+0xc98>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a70      	ldr	r2, [pc, #448]	@ (8004618 <HAL_DMA_IRQHandler+0xc9c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	@ (800461c <HAL_DMA_IRQHandler+0xca0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	@ (8004620 <HAL_DMA_IRQHandler+0xca4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	@ (8004624 <HAL_DMA_IRQHandler+0xca8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6a      	ldr	r2, [pc, #424]	@ (8004628 <HAL_DMA_IRQHandler+0xcac>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_IRQHandler+0xb12>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a68      	ldr	r2, [pc, #416]	@ (800462c <HAL_DMA_IRQHandler+0xcb0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0xb24>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0208 	bic.w	r2, r2, #8
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e007      	b.n	80044b0 <HAL_DMA_IRQHandler+0xb34>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8165 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	e15f      	b.n	8004784 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2202      	movs	r2, #2
 80044ce:	409a      	lsls	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80c5 	beq.w	8004664 <HAL_DMA_IRQHandler+0xce8>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80bf 	beq.w	8004664 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2202      	movs	r2, #2
 80044f0:	409a      	lsls	r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 813a 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451c:	e134      	b.n	8004788 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8130 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004530:	e12a      	b.n	8004788 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8089 	bne.w	8004650 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2b      	ldr	r2, [pc, #172]	@ (80045f0 <HAL_DMA_IRQHandler+0xc74>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a29      	ldr	r2, [pc, #164]	@ (80045f4 <HAL_DMA_IRQHandler+0xc78>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a28      	ldr	r2, [pc, #160]	@ (80045f8 <HAL_DMA_IRQHandler+0xc7c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a26      	ldr	r2, [pc, #152]	@ (80045fc <HAL_DMA_IRQHandler+0xc80>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a25      	ldr	r2, [pc, #148]	@ (8004600 <HAL_DMA_IRQHandler+0xc84>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <HAL_DMA_IRQHandler+0xc88>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <HAL_DMA_IRQHandler+0xc8c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a20      	ldr	r2, [pc, #128]	@ (800460c <HAL_DMA_IRQHandler+0xc90>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <HAL_DMA_IRQHandler+0xc94>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_DMA_IRQHandler+0xc98>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <HAL_DMA_IRQHandler+0xc9c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_DMA_IRQHandler+0xca0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a19      	ldr	r2, [pc, #100]	@ (8004620 <HAL_DMA_IRQHandler+0xca4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a17      	ldr	r2, [pc, #92]	@ (8004624 <HAL_DMA_IRQHandler+0xca8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a16      	ldr	r2, [pc, #88]	@ (8004628 <HAL_DMA_IRQHandler+0xcac>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0xc62>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <HAL_DMA_IRQHandler+0xcb0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d128      	bne.n	8004630 <HAL_DMA_IRQHandler+0xcb4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0214 	bic.w	r2, r2, #20
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e027      	b.n	8004640 <HAL_DMA_IRQHandler+0xcc4>
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020a 	bic.w	r2, r2, #10
 800463e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004662:	e091      	b.n	8004788 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2208      	movs	r2, #8
 800466e:	409a      	lsls	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8088 	beq.w	800478a <HAL_DMA_IRQHandler+0xe0e>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8082 	beq.w	800478a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a41      	ldr	r2, [pc, #260]	@ (8004790 <HAL_DMA_IRQHandler+0xe14>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_DMA_IRQHandler+0xe18>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3e      	ldr	r2, [pc, #248]	@ (8004798 <HAL_DMA_IRQHandler+0xe1c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3c      	ldr	r2, [pc, #240]	@ (800479c <HAL_DMA_IRQHandler+0xe20>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	@ (80047a0 <HAL_DMA_IRQHandler+0xe24>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a39      	ldr	r2, [pc, #228]	@ (80047a4 <HAL_DMA_IRQHandler+0xe28>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <HAL_DMA_IRQHandler+0xe2c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <HAL_DMA_IRQHandler+0xe30>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <HAL_DMA_IRQHandler+0xe34>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <HAL_DMA_IRQHandler+0xe38>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <HAL_DMA_IRQHandler+0xe3c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a30      	ldr	r2, [pc, #192]	@ (80047bc <HAL_DMA_IRQHandler+0xe40>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2f      	ldr	r2, [pc, #188]	@ (80047c0 <HAL_DMA_IRQHandler+0xe44>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_DMA_IRQHandler+0xe48>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <HAL_DMA_IRQHandler+0xe4c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0xdaa>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_DMA_IRQHandler+0xe50>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <HAL_DMA_IRQHandler+0xdbc>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 021c 	bic.w	r2, r2, #28
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e007      	b.n	8004748 <HAL_DMA_IRQHandler+0xdcc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 020e 	bic.w	r2, r2, #14
 8004746:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2201      	movs	r2, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e004      	b.n	800478a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004788:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800478a:	3728      	adds	r7, #40	@ 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8

080047d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7f      	ldr	r2, [pc, #508]	@ (8004a04 <DMA_SetConfig+0x21c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d072      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a7d      	ldr	r2, [pc, #500]	@ (8004a08 <DMA_SetConfig+0x220>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d06d      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a0c <DMA_SetConfig+0x224>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d068      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7a      	ldr	r2, [pc, #488]	@ (8004a10 <DMA_SetConfig+0x228>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d063      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a79      	ldr	r2, [pc, #484]	@ (8004a14 <DMA_SetConfig+0x22c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d05e      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a77      	ldr	r2, [pc, #476]	@ (8004a18 <DMA_SetConfig+0x230>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d059      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a76      	ldr	r2, [pc, #472]	@ (8004a1c <DMA_SetConfig+0x234>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d054      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a74      	ldr	r2, [pc, #464]	@ (8004a20 <DMA_SetConfig+0x238>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04f      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a73      	ldr	r2, [pc, #460]	@ (8004a24 <DMA_SetConfig+0x23c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04a      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a71      	ldr	r2, [pc, #452]	@ (8004a28 <DMA_SetConfig+0x240>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d045      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a70      	ldr	r2, [pc, #448]	@ (8004a2c <DMA_SetConfig+0x244>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6e      	ldr	r2, [pc, #440]	@ (8004a30 <DMA_SetConfig+0x248>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a34 <DMA_SetConfig+0x24c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d036      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6b      	ldr	r2, [pc, #428]	@ (8004a38 <DMA_SetConfig+0x250>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6a      	ldr	r2, [pc, #424]	@ (8004a3c <DMA_SetConfig+0x254>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d02c      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a68      	ldr	r2, [pc, #416]	@ (8004a40 <DMA_SetConfig+0x258>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d027      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a67      	ldr	r2, [pc, #412]	@ (8004a44 <DMA_SetConfig+0x25c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a65      	ldr	r2, [pc, #404]	@ (8004a48 <DMA_SetConfig+0x260>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a64      	ldr	r2, [pc, #400]	@ (8004a4c <DMA_SetConfig+0x264>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a62      	ldr	r2, [pc, #392]	@ (8004a50 <DMA_SetConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a61      	ldr	r2, [pc, #388]	@ (8004a54 <DMA_SetConfig+0x26c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004a58 <DMA_SetConfig+0x270>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a5c <DMA_SetConfig+0x274>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004a60 <DMA_SetConfig+0x278>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <DMA_SetConfig+0x10e>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <DMA_SetConfig+0x110>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004904:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004916:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a39      	ldr	r2, [pc, #228]	@ (8004a04 <DMA_SetConfig+0x21c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <DMA_SetConfig+0x220>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <DMA_SetConfig+0x224>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a35      	ldr	r2, [pc, #212]	@ (8004a10 <DMA_SetConfig+0x228>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <DMA_SetConfig+0x22c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a32      	ldr	r2, [pc, #200]	@ (8004a18 <DMA_SetConfig+0x230>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a30      	ldr	r2, [pc, #192]	@ (8004a1c <DMA_SetConfig+0x234>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2f      	ldr	r2, [pc, #188]	@ (8004a20 <DMA_SetConfig+0x238>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a24 <DMA_SetConfig+0x23c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2c      	ldr	r2, [pc, #176]	@ (8004a28 <DMA_SetConfig+0x240>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <DMA_SetConfig+0x244>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a29      	ldr	r2, [pc, #164]	@ (8004a30 <DMA_SetConfig+0x248>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a27      	ldr	r2, [pc, #156]	@ (8004a34 <DMA_SetConfig+0x24c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <DMA_SetConfig+0x250>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a24      	ldr	r2, [pc, #144]	@ (8004a3c <DMA_SetConfig+0x254>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a23      	ldr	r2, [pc, #140]	@ (8004a40 <DMA_SetConfig+0x258>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_SetConfig+0x1d4>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_SetConfig+0x1d6>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d059      	beq.n	8004a76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	223f      	movs	r2, #63	@ 0x3f
 80049cc:	409a      	lsls	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b40      	cmp	r3, #64	@ 0x40
 80049f0:	d138      	bne.n	8004a64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a02:	e086      	b.n	8004b12 <DMA_SetConfig+0x32a>
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
}
 8004a74:	e04d      	b.n	8004b12 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <DMA_SetConfig+0x338>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a27      	ldr	r2, [pc, #156]	@ (8004b24 <DMA_SetConfig+0x33c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01d      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <DMA_SetConfig+0x340>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a24      	ldr	r2, [pc, #144]	@ (8004b2c <DMA_SetConfig+0x344>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a23      	ldr	r2, [pc, #140]	@ (8004b30 <DMA_SetConfig+0x348>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a21      	ldr	r2, [pc, #132]	@ (8004b34 <DMA_SetConfig+0x34c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <DMA_SetConfig+0x350>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <DMA_SetConfig+0x2de>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <DMA_SetConfig+0x354>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <DMA_SetConfig+0x2e2>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <DMA_SetConfig+0x2e4>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2201      	movs	r2, #1
 8004ada:	409a      	lsls	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d108      	bne.n	8004b02 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	60da      	str	r2, [r3, #12]
}
 8004b00:	e007      	b.n	8004b12 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	60da      	str	r2, [r3, #12]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	58025408 	.word	0x58025408
 8004b24:	5802541c 	.word	0x5802541c
 8004b28:	58025430 	.word	0x58025430
 8004b2c:	58025444 	.word	0x58025444
 8004b30:	58025458 	.word	0x58025458
 8004b34:	5802546c 	.word	0x5802546c
 8004b38:	58025480 	.word	0x58025480
 8004b3c:	58025494 	.word	0x58025494

08004b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a42      	ldr	r2, [pc, #264]	@ (8004c58 <DMA_CalcBaseAndBitshift+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a41      	ldr	r2, [pc, #260]	@ (8004c5c <DMA_CalcBaseAndBitshift+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3f      	ldr	r2, [pc, #252]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a39      	ldr	r2, [pc, #228]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x130>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a38      	ldr	r2, [pc, #224]	@ (8004c74 <DMA_CalcBaseAndBitshift+0x134>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a36      	ldr	r2, [pc, #216]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a35      	ldr	r2, [pc, #212]	@ (8004c7c <DMA_CalcBaseAndBitshift+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a33      	ldr	r2, [pc, #204]	@ (8004c80 <DMA_CalcBaseAndBitshift+0x140>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a32      	ldr	r2, [pc, #200]	@ (8004c84 <DMA_CalcBaseAndBitshift+0x144>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <DMA_CalcBaseAndBitshift+0x148>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2f      	ldr	r2, [pc, #188]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x14c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <DMA_CalcBaseAndBitshift+0x150>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c94 <DMA_CalcBaseAndBitshift+0x154>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <DMA_CalcBaseAndBitshift+0xac>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <DMA_CalcBaseAndBitshift+0xae>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d024      	beq.n	8004c3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3b10      	subs	r3, #16
 8004bfa:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <DMA_CalcBaseAndBitshift+0x158>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	4a24      	ldr	r2, [pc, #144]	@ (8004c9c <DMA_CalcBaseAndBitshift+0x15c>)
 8004c0c:	5cd3      	ldrb	r3, [r2, r3]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d908      	bls.n	8004c2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x160>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c2a:	e00d      	b.n	8004c48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x160>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3a:	e005      	b.n	8004c48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
 8004c98:	aaaaaaab 	.word	0xaaaaaaab
 8004c9c:	08018b94 	.word	0x08018b94
 8004ca0:	fffffc00 	.word	0xfffffc00

08004ca4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d120      	bne.n	8004cfa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d858      	bhi.n	8004d72 <DMA_CheckFifoParam+0xce>
 8004cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <DMA_CheckFifoParam+0x24>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004cd9 	.word	0x08004cd9
 8004cd4:	08004d73 	.word	0x08004d73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d048      	beq.n	8004d76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ce8:	e045      	b.n	8004d76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cf2:	d142      	bne.n	8004d7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf8:	e03f      	b.n	8004d7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	d123      	bne.n	8004d4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d838      	bhi.n	8004d7e <DMA_CheckFifoParam+0xda>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <DMA_CheckFifoParam+0x70>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d2b 	.word	0x08004d2b
 8004d1c:	08004d25 	.word	0x08004d25
 8004d20:	08004d3d 	.word	0x08004d3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
        break;
 8004d28:	e030      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d025      	beq.n	8004d82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d3a:	e022      	b.n	8004d82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d44:	d11f      	bne.n	8004d86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d4a:	e01c      	b.n	8004d86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d902      	bls.n	8004d5a <DMA_CheckFifoParam+0xb6>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d003      	beq.n	8004d60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d58:	e018      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5e:	e015      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00e      	beq.n	8004d8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8004d70:	e00b      	b.n	8004d8a <DMA_CheckFifoParam+0xe6>
        break;
 8004d72:	bf00      	nop
 8004d74:	e00a      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d76:	bf00      	nop
 8004d78:	e008      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e006      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
    break;
 8004d8a:	bf00      	nop
    }
  }

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop

08004d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a36      	ldr	r2, [pc, #216]	@ (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a33      	ldr	r2, [pc, #204]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a32      	ldr	r2, [pc, #200]	@ (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a30      	ldr	r2, [pc, #192]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2d      	ldr	r2, [pc, #180]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3b08      	subs	r3, #8
 8004e0c:	4a28      	ldr	r2, [pc, #160]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a24      	ldr	r2, [pc, #144]	@ (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e28:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e38:	e024      	b.n	8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	3b10      	subs	r3, #16
 8004e42:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d806      	bhi.n	8004e62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d902      	bls.n	8004e62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494
 8004eb0:	cccccccd 	.word	0xcccccccd
 8004eb4:	16009600 	.word	0x16009600
 8004eb8:	58025880 	.word	0x58025880
 8004ebc:	aaaaaaab 	.word	0xaaaaaaab
 8004ec0:	400204b8 	.word	0x400204b8
 8004ec4:	4002040f 	.word	0x4002040f
 8004ec8:	10008200 	.word	0x10008200
 8004ecc:	40020880 	.word	0x40020880

08004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04a      	beq.n	8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d847      	bhi.n	8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a25      	ldr	r2, [pc, #148]	@ (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a24      	ldr	r2, [pc, #144]	@ (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a22      	ldr	r2, [pc, #136]	@ (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	@ (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1f      	ldr	r2, [pc, #124]	@ (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1e      	ldr	r2, [pc, #120]	@ (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a15      	ldr	r2, [pc, #84]	@ (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f58:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f5a:	e009      	b.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4b14      	ldr	r3, [pc, #80]	@ (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a11      	ldr	r2, [pc, #68]	@ (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f6e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494
 8004fa8:	1600963f 	.word	0x1600963f
 8004fac:	58025940 	.word	0x58025940
 8004fb0:	1000823f 	.word	0x1000823f
 8004fb4:	40020940 	.word	0x40020940

08004fb8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0e3      	b.n	8005192 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2223      	movs	r2, #35	@ 0x23
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fb ffbb 	bl	8000f58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800519c <HAL_ETH_Init+0x1e4>)
 8004fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fe8:	4a6c      	ldr	r2, [pc, #432]	@ (800519c <HAL_ETH_Init+0x1e4>)
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800519c <HAL_ETH_Init+0x1e4>)
 8004ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	7a1b      	ldrb	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005008:	2000      	movs	r0, #0
 800500a:	f7fd f899 	bl	8002140 <HAL_SYSCFG_ETHInterfaceSelect>
 800500e:	e003      	b.n	8005018 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005010:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005014:	f7fd f894 	bl	8002140 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005018:	4b61      	ldr	r3, [pc, #388]	@ (80051a0 <HAL_ETH_Init+0x1e8>)
 800501a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005032:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005034:	f7fd f848 	bl	80020c8 <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800503a:	e011      	b.n	8005060 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800503c:	f7fd f844 	bl	80020c8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800504a:	d909      	bls.n	8005060 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	22e0      	movs	r2, #224	@ 0xe0
 8005058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e098      	b.n	8005192 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e4      	bne.n	800503c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f89e 	bl	80051b4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005078:	f001 feba 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 800507c:	4603      	mov	r3, r0
 800507e:	4a49      	ldr	r2, [pc, #292]	@ (80051a4 <HAL_ETH_Init+0x1ec>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	0c9a      	lsrs	r2, r3, #18
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3a01      	subs	r2, #1
 800508c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa81 	bl	8005598 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800509e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80050a2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050b2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	22e0      	movs	r2, #224	@ 0xe0
 80050ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e05d      	b.n	8005192 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80050e2:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <HAL_ETH_Init+0x1f0>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6952      	ldr	r2, [r2, #20]
 80050ea:	0051      	lsls	r1, r2, #1
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fae9 	bl	80056d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fb2f 	bl	8005764 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	3305      	adds	r3, #5
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	3303      	adds	r3, #3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	061a      	lsls	r2, r3, #24
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	3302      	adds	r3, #2
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	3301      	adds	r3, #1
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005144:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005152:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005154:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_ETH_Init+0x1f4>)
 8005166:	430b      	orrs	r3, r1
 8005168:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0d      	ldr	r3, [pc, #52]	@ (80051b0 <HAL_ETH_Init+0x1f8>)
 800517a:	430b      	orrs	r3, r1
 800517c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2210      	movs	r2, #16
 800518c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	58024400 	.word	0x58024400
 80051a0:	58000400 	.word	0x58000400
 80051a4:	431bde83 	.word	0x431bde83
 80051a8:	ffff8001 	.word	0xffff8001
 80051ac:	0c020060 	.word	0x0c020060
 80051b0:	0c20c000 	.word	0x0c20c000

080051b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80051ce:	f001 fe0f 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 80051d2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005240 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d804      	bhi.n	80051e6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e022      	b.n	800522c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <HAL_ETH_SetMDIOClockRange+0x90>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d204      	bcs.n	80051f8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e019      	b.n	800522c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <HAL_ETH_SetMDIOClockRange+0x94>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d915      	bls.n	800522c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a12      	ldr	r2, [pc, #72]	@ (800524c <HAL_ETH_SetMDIOClockRange+0x98>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d804      	bhi.n	8005212 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e00c      	b.n	800522c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a0e      	ldr	r2, [pc, #56]	@ (8005250 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d804      	bhi.n	8005224 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e003      	b.n	800522c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800522a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	02160ebf 	.word	0x02160ebf
 8005244:	03938700 	.word	0x03938700
 8005248:	05f5e0ff 	.word	0x05f5e0ff
 800524c:	08f0d17f 	.word	0x08f0d17f
 8005250:	0ee6b27f 	.word	0x0ee6b27f

08005254 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800526e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	7b1b      	ldrb	r3, [r3, #12]
 8005274:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	7b5b      	ldrb	r3, [r3, #13]
 800527c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800527e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	7b9b      	ldrb	r3, [r3, #14]
 8005284:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005286:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	7bdb      	ldrb	r3, [r3, #15]
 800528c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800528e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	7c12      	ldrb	r2, [r2, #16]
 8005294:	2a00      	cmp	r2, #0
 8005296:	d102      	bne.n	800529e <ETH_SetMACConfig+0x4a>
 8005298:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800529c:	e000      	b.n	80052a0 <ETH_SetMACConfig+0x4c>
 800529e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	7c52      	ldrb	r2, [r2, #17]
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d102      	bne.n	80052b0 <ETH_SetMACConfig+0x5c>
 80052aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052ae:	e000      	b.n	80052b2 <ETH_SetMACConfig+0x5e>
 80052b0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	7c9b      	ldrb	r3, [r3, #18]
 80052b8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052ba:	431a      	orrs	r2, r3
               macconf->Speed |
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80052c0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80052c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	7f1b      	ldrb	r3, [r3, #28]
 80052cc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80052ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7f5b      	ldrb	r3, [r3, #29]
 80052d4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80052d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	7f92      	ldrb	r2, [r2, #30]
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d102      	bne.n	80052e6 <ETH_SetMACConfig+0x92>
 80052e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e4:	e000      	b.n	80052e8 <ETH_SetMACConfig+0x94>
 80052e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80052e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	7fdb      	ldrb	r3, [r3, #31]
 80052ee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80052f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	d102      	bne.n	8005302 <ETH_SetMACConfig+0xae>
 80052fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005300:	e000      	b.n	8005304 <ETH_SetMACConfig+0xb0>
 8005302:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005304:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800530a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005312:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005314:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b56      	ldr	r3, [pc, #344]	@ (8005480 <ETH_SetMACConfig+0x22c>)
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	430b      	orrs	r3, r1
 8005330:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005336:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800533e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005340:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005348:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800534a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005352:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005354:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800535c:	2a00      	cmp	r2, #0
 800535e:	d102      	bne.n	8005366 <ETH_SetMACConfig+0x112>
 8005360:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005364:	e000      	b.n	8005368 <ETH_SetMACConfig+0x114>
 8005366:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005368:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <ETH_SetMACConfig+0x230>)
 800537a:	4013      	ands	r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	430b      	orrs	r3, r1
 8005384:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800538c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <ETH_SetMACConfig+0x234>)
 800539e:	4013      	ands	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	68f9      	ldr	r1, [r7, #12]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80053b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d101      	bne.n	80053c6 <ETH_SetMACConfig+0x172>
 80053c2:	2280      	movs	r2, #128	@ 0x80
 80053c4:	e000      	b.n	80053c8 <ETH_SetMACConfig+0x174>
 80053c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80053c8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053da:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80053f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80053f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005406:	f023 0103 	bic.w	r1, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	430a      	orrs	r2, r1
 8005412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800541e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800543a:	2a00      	cmp	r2, #0
 800543c:	d101      	bne.n	8005442 <ETH_SetMACConfig+0x1ee>
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	e000      	b.n	8005444 <ETH_SetMACConfig+0x1f0>
 8005442:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005444:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800544c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800544e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005456:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005464:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	430a      	orrs	r2, r1
 8005470:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	00048083 	.word	0x00048083
 8005484:	c0f88000 	.word	0xc0f88000
 8005488:	fffffef0 	.word	0xfffffef0

0800548c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b38      	ldr	r3, [pc, #224]	@ (8005584 <ETH_SetDMAConfig+0xf8>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	6811      	ldr	r1, [r2, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	791b      	ldrb	r3, [r3, #4]
 80054b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	7b1b      	ldrb	r3, [r3, #12]
 80054c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005588 <ETH_SetDMAConfig+0xfc>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	430b      	orrs	r3, r1
 80054e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054e4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	7b5b      	ldrb	r3, [r3, #13]
 80054ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005500:	4b22      	ldr	r3, [pc, #136]	@ (800558c <ETH_SetDMAConfig+0x100>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	430b      	orrs	r3, r1
 800550c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005510:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	7d1b      	ldrb	r3, [r3, #20]
 800551c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800551e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	7f5b      	ldrb	r3, [r3, #29]
 8005524:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005532:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005536:	4b16      	ldr	r3, [pc, #88]	@ (8005590 <ETH_SetDMAConfig+0x104>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	430b      	orrs	r3, r1
 8005542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005546:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	7f1b      	ldrb	r3, [r3, #28]
 800554e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005560:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <ETH_SetDMAConfig+0x108>)
 8005566:	4013      	ands	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	430b      	orrs	r3, r1
 8005570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005574:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	ffff87fd 	.word	0xffff87fd
 8005588:	ffff2ffe 	.word	0xffff2ffe
 800558c:	fffec000 	.word	0xfffec000
 8005590:	ffc0efef 	.word	0xffc0efef
 8005594:	7fc0ffff 	.word	0x7fc0ffff

08005598 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b0a4      	sub	sp, #144	@ 0x90
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055a6:	2300      	movs	r3, #0
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80055d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80055f0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80055f4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80055fc:	2300      	movs	r3, #0
 80055fe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005612:	2300      	movs	r3, #0
 8005614:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005616:	2300      	movs	r3, #0
 8005618:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800561a:	2300      	movs	r3, #0
 800561c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005630:	2320      	movs	r3, #32
 8005632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800563c:	2300      	movs	r3, #0
 800563e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005642:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005648:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800564c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005654:	2302      	movs	r3, #2
 8005656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005672:	2300      	movs	r3, #0
 8005674:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800567c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fde6 	bl	8005254 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005688:	2301      	movs	r3, #1
 800568a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800568c:	2301      	movs	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800569a:	2300      	movs	r3, #0
 800569c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800569e:	2300      	movs	r3, #0
 80056a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80056b8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fee1 	bl	800548c <ETH_SetDMAConfig>
}
 80056ca:	bf00      	nop
 80056cc:	3790      	adds	r7, #144	@ 0x90
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e01d      	b.n	800571c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	3206      	adds	r2, #6
 8005712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3301      	adds	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d9de      	bls.n	80056e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005730:	461a      	mov	r2, r3
 8005732:	2303      	movs	r3, #3
 8005734:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005754:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e023      	b.n	80057ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6919      	ldr	r1, [r3, #16]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2200      	movs	r2, #0
 80057a6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	3212      	adds	r2, #18
 80057b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d9d8      	bls.n	8005772 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e6:	461a      	mov	r2, r3
 80057e8:	2303      	movs	r3, #3
 80057ea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800580e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800582e:	4b89      	ldr	r3, [pc, #548]	@ (8005a54 <HAL_GPIO_Init+0x234>)
 8005830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005832:	e194      	b.n	8005b5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8186 	beq.w	8005b58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d005      	beq.n	8005864 <HAL_GPIO_Init+0x44>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d130      	bne.n	80058c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	2203      	movs	r2, #3
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800589a:	2201      	movs	r2, #1
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0201 	and.w	r2, r3, #1
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d017      	beq.n	8005902 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	2203      	movs	r2, #3
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d123      	bne.n	8005956 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	08da      	lsrs	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3208      	adds	r2, #8
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	220f      	movs	r2, #15
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4013      	ands	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	08da      	lsrs	r2, r3, #3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3208      	adds	r2, #8
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	2203      	movs	r2, #3
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80e0 	beq.w	8005b58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005998:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_GPIO_Init+0x238>)
 800599a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800599e:	4a2e      	ldr	r2, [pc, #184]	@ (8005a58 <HAL_GPIO_Init+0x238>)
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a58 <HAL_GPIO_Init+0x238>)
 80059aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059b6:	4a29      	ldr	r2, [pc, #164]	@ (8005a5c <HAL_GPIO_Init+0x23c>)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	3302      	adds	r3, #2
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a20      	ldr	r2, [pc, #128]	@ (8005a60 <HAL_GPIO_Init+0x240>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d052      	beq.n	8005a88 <HAL_GPIO_Init+0x268>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <HAL_GPIO_Init+0x244>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d031      	beq.n	8005a4e <HAL_GPIO_Init+0x22e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_GPIO_Init+0x248>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <HAL_GPIO_Init+0x22a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_GPIO_Init+0x24c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d025      	beq.n	8005a46 <HAL_GPIO_Init+0x226>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <HAL_GPIO_Init+0x250>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01f      	beq.n	8005a42 <HAL_GPIO_Init+0x222>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <HAL_GPIO_Init+0x254>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d019      	beq.n	8005a3e <HAL_GPIO_Init+0x21e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_GPIO_Init+0x258>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_GPIO_Init+0x21a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_GPIO_Init+0x25c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00d      	beq.n	8005a36 <HAL_GPIO_Init+0x216>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_GPIO_Init+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <HAL_GPIO_Init+0x212>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <HAL_GPIO_Init+0x264>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_GPIO_Init+0x20e>
 8005a2a:	2309      	movs	r3, #9
 8005a2c:	e02d      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e02b      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a32:	2308      	movs	r3, #8
 8005a34:	e029      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a36:	2307      	movs	r3, #7
 8005a38:	e027      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a3a:	2306      	movs	r3, #6
 8005a3c:	e025      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a3e:	2305      	movs	r3, #5
 8005a40:	e023      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a42:	2304      	movs	r3, #4
 8005a44:	e021      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a46:	2303      	movs	r3, #3
 8005a48:	e01f      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e01d      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e01b      	b.n	8005a8a <HAL_GPIO_Init+0x26a>
 8005a52:	bf00      	nop
 8005a54:	58000080 	.word	0x58000080
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	58000400 	.word	0x58000400
 8005a60:	58020000 	.word	0x58020000
 8005a64:	58020400 	.word	0x58020400
 8005a68:	58020800 	.word	0x58020800
 8005a6c:	58020c00 	.word	0x58020c00
 8005a70:	58021000 	.word	0x58021000
 8005a74:	58021400 	.word	0x58021400
 8005a78:	58021800 	.word	0x58021800
 8005a7c:	58021c00 	.word	0x58021c00
 8005a80:	58022000 	.word	0x58022000
 8005a84:	58022400 	.word	0x58022400
 8005a88:	2300      	movs	r3, #0
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	f002 0203 	and.w	r2, r2, #3
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	4093      	lsls	r3, r2
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a9a:	4938      	ldr	r1, [pc, #224]	@ (8005b7c <HAL_GPIO_Init+0x35c>)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ace:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f47f ae63 	bne.w	8005834 <HAL_GPIO_Init+0x14>
  }
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	3724      	adds	r7, #36	@ 0x24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	58000400 	.word	0x58000400

08005b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b90:	787b      	ldrb	r3, [r7, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b9c:	e003      	b.n	8005ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	041a      	lsls	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	619a      	str	r2, [r3, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	041a      	lsls	r2, r3, #16
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43d9      	mvns	r1, r3
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	619a      	str	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af02      	add	r7, sp, #8
 8005bec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0fe      	b.n	8005df6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fc f965 	bl	8001edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f005 fbb8 	bl	800b394 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7c1a      	ldrb	r2, [r3, #16]
 8005c2c:	f88d 2000 	strb.w	r2, [sp]
 8005c30:	3304      	adds	r3, #4
 8005c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c34:	f005 fb3c 	bl	800b2b0 <USB_CoreInit>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0d5      	b.n	8005df6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f005 fbb0 	bl	800b3b6 <USB_SetCurrentMode>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0c6      	b.n	8005df6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]
 8005c6c:	e04a      	b.n	8005d04 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c6e:	7bfa      	ldrb	r2, [r7, #15]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3315      	adds	r3, #21
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c82:	7bfa      	ldrb	r2, [r7, #15]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	3314      	adds	r3, #20
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	b298      	uxth	r0, r3
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	332e      	adds	r3, #46	@ 0x2e
 8005caa:	4602      	mov	r2, r0
 8005cac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cae:	7bfa      	ldrb	r2, [r7, #15]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	331c      	adds	r3, #28
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	3320      	adds	r3, #32
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cea:	7bfa      	ldrb	r2, [r7, #15]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3324      	adds	r3, #36	@ 0x24
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	3301      	adds	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	791b      	ldrb	r3, [r3, #4]
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3af      	bcc.n	8005c6e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	e044      	b.n	8005d9e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d14:	7bfa      	ldrb	r2, [r7, #15]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d3c:	7bfa      	ldrb	r2, [r7, #15]
 8005d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d40:	7bfa      	ldrb	r2, [r7, #15]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d56:	7bfa      	ldrb	r2, [r7, #15]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d6c:	7bfa      	ldrb	r2, [r7, #15]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	7bfa      	ldrb	r2, [r7, #15]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d3b5      	bcc.n	8005d14 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7c1a      	ldrb	r2, [r3, #16]
 8005db0:	f88d 2000 	strb.w	r2, [sp]
 8005db4:	3304      	adds	r3, #4
 8005db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db8:	f005 fb4a 	bl	800b450 <USB_DevInit>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e013      	b.n	8005df6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7b1b      	ldrb	r3, [r3, #12]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d102      	bne.n	8005dea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f80b 	bl	8005e00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f005 fd05 	bl	800b7fe <USB_DevDisconnect>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e2e:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	10000003 	.word	0x10000003

08005e48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e50:	4b19      	ldr	r3, [pc, #100]	@ (8005eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d00a      	beq.n	8005e72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e5c:	4b16      	ldr	r3, [pc, #88]	@ (8005eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e01f      	b.n	8005eae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e01d      	b.n	8005eae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e72:	4b11      	ldr	r3, [pc, #68]	@ (8005eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f023 0207 	bic.w	r2, r3, #7
 8005e7a:	490f      	ldr	r1, [pc, #60]	@ (8005eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e82:	f7fc f921 	bl	80020c8 <HAL_GetTick>
 8005e86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e88:	e009      	b.n	8005e9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e8a:	f7fc f91d 	bl	80020c8 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e98:	d901      	bls.n	8005e9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e007      	b.n	8005eae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eaa:	d1ee      	bne.n	8005e8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	58024800 	.word	0x58024800

08005ebc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eca:	60d3      	str	r3, [r2, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	58024800 	.word	0x58024800

08005edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	@ 0x30
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f000 bc48 	b.w	8006780 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8088 	beq.w	800600e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005efe:	4b99      	ldr	r3, [pc, #612]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f08:	4b96      	ldr	r3, [pc, #600]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d007      	beq.n	8005f24 <HAL_RCC_OscConfig+0x48>
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	2b18      	cmp	r3, #24
 8005f18:	d111      	bne.n	8005f3e <HAL_RCC_OscConfig+0x62>
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	4b8f      	ldr	r3, [pc, #572]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d06d      	beq.n	800600c <HAL_RCC_OscConfig+0x130>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d169      	bne.n	800600c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f000 bc21 	b.w	8006780 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f46:	d106      	bne.n	8005f56 <HAL_RCC_OscConfig+0x7a>
 8005f48:	4b86      	ldr	r3, [pc, #536]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a85      	ldr	r2, [pc, #532]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	e02e      	b.n	8005fb4 <HAL_RCC_OscConfig+0xd8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCC_OscConfig+0x9c>
 8005f5e:	4b81      	ldr	r3, [pc, #516]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a80      	ldr	r2, [pc, #512]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e01d      	b.n	8005fb4 <HAL_RCC_OscConfig+0xd8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0xc0>
 8005f82:	4b78      	ldr	r3, [pc, #480]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a77      	ldr	r2, [pc, #476]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b75      	ldr	r3, [pc, #468]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a74      	ldr	r2, [pc, #464]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0xd8>
 8005f9c:	4b71      	ldr	r3, [pc, #452]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a70      	ldr	r2, [pc, #448]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a6d      	ldr	r2, [pc, #436]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fc f884 	bl	80020c8 <HAL_GetTick>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fc f880 	bl	80020c8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	@ 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e3d4      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fd6:	4b63      	ldr	r3, [pc, #396]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xe8>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fc f870 	bl	80020c8 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fec:	f7fc f86c 	bl	80020c8 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	@ 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e3c0      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ffe:	4b59      	ldr	r3, [pc, #356]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x110>
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80ca 	beq.w	80061b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800601c:	4b51      	ldr	r3, [pc, #324]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006024:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006026:	4b4f      	ldr	r3, [pc, #316]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_RCC_OscConfig+0x166>
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b18      	cmp	r3, #24
 8006036:	d156      	bne.n	80060e6 <HAL_RCC_OscConfig+0x20a>
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d151      	bne.n	80060e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006042:	4b48      	ldr	r3, [pc, #288]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_RCC_OscConfig+0x17e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e392      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800605a:	4b42      	ldr	r3, [pc, #264]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 0219 	bic.w	r2, r3, #25
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	493f      	ldr	r1, [pc, #252]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fc f82c 	bl	80020c8 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006074:	f7fc f828 	bl	80020c8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e37c      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006086:	4b37      	ldr	r3, [pc, #220]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006092:	f7fc f849 	bl	8002128 <HAL_GetREVID>
 8006096:	4603      	mov	r3, r0
 8006098:	f241 0203 	movw	r2, #4099	@ 0x1003
 800609c:	4293      	cmp	r3, r2
 800609e:	d817      	bhi.n	80060d0 <HAL_RCC_OscConfig+0x1f4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b40      	cmp	r3, #64	@ 0x40
 80060a6:	d108      	bne.n	80060ba <HAL_RCC_OscConfig+0x1de>
 80060a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80060b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b8:	e07a      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	031b      	lsls	r3, r3, #12
 80060c8:	4926      	ldr	r1, [pc, #152]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ce:	e06f      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d0:	4b24      	ldr	r3, [pc, #144]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	4921      	ldr	r1, [pc, #132]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e4:	e064      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d047      	beq.n	800617e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 0219 	bic.w	r2, r3, #25
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	491a      	ldr	r1, [pc, #104]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fb ffe2 	bl	80020c8 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006108:	f7fb ffde 	bl	80020c8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e332      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800611a:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	f7fb ffff 	bl	8002128 <HAL_GetREVID>
 800612a:	4603      	mov	r3, r0
 800612c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006130:	4293      	cmp	r3, r2
 8006132:	d819      	bhi.n	8006168 <HAL_RCC_OscConfig+0x28c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d108      	bne.n	800614e <HAL_RCC_OscConfig+0x272>
 800613c:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006144:	4a07      	ldr	r2, [pc, #28]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614a:	6053      	str	r3, [r2, #4]
 800614c:	e030      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
 800614e:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	4901      	ldr	r1, [pc, #4]	@ (8006164 <HAL_RCC_OscConfig+0x288>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
 8006162:	e025      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
 8006164:	58024400 	.word	0x58024400
 8006168:	4b9a      	ldr	r3, [pc, #616]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	4997      	ldr	r1, [pc, #604]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
 800617c:	e018      	b.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800617e:	4b95      	ldr	r3, [pc, #596]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a94      	ldr	r2, [pc, #592]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb ff9d 	bl	80020c8 <HAL_GetTick>
 800618e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006192:	f7fb ff99 	bl	80020c8 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e2ed      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061a4:	4b8b      	ldr	r3, [pc, #556]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80a9 	beq.w	8006310 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061be:	4b85      	ldr	r3, [pc, #532]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061c8:	4b82      	ldr	r3, [pc, #520]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d007      	beq.n	80061e4 <HAL_RCC_OscConfig+0x308>
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b18      	cmp	r3, #24
 80061d8:	d13a      	bne.n	8006250 <HAL_RCC_OscConfig+0x374>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d135      	bne.n	8006250 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061e4:	4b7b      	ldr	r3, [pc, #492]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_OscConfig+0x320>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	2b80      	cmp	r3, #128	@ 0x80
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e2c1      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061fc:	f7fb ff94 	bl	8002128 <HAL_GetREVID>
 8006200:	4603      	mov	r3, r0
 8006202:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006206:	4293      	cmp	r3, r2
 8006208:	d817      	bhi.n	800623a <HAL_RCC_OscConfig+0x35e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	2b20      	cmp	r3, #32
 8006210:	d108      	bne.n	8006224 <HAL_RCC_OscConfig+0x348>
 8006212:	4b70      	ldr	r3, [pc, #448]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800621a:	4a6e      	ldr	r2, [pc, #440]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006220:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006222:	e075      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006224:	4b6b      	ldr	r3, [pc, #428]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	069b      	lsls	r3, r3, #26
 8006232:	4968      	ldr	r1, [pc, #416]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006238:	e06a      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800623a:	4b66      	ldr	r3, [pc, #408]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	4962      	ldr	r1, [pc, #392]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800624e:	e05f      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d042      	beq.n	80062de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006258:	4b5e      	ldr	r3, [pc, #376]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a5d      	ldr	r2, [pc, #372]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800625e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb ff30 	bl	80020c8 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800626c:	f7fb ff2c 	bl	80020c8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e280      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627e:	4b55      	ldr	r3, [pc, #340]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800628a:	f7fb ff4d 	bl	8002128 <HAL_GetREVID>
 800628e:	4603      	mov	r3, r0
 8006290:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006294:	4293      	cmp	r3, r2
 8006296:	d817      	bhi.n	80062c8 <HAL_RCC_OscConfig+0x3ec>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d108      	bne.n	80062b2 <HAL_RCC_OscConfig+0x3d6>
 80062a0:	4b4c      	ldr	r3, [pc, #304]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062a8:	4a4a      	ldr	r2, [pc, #296]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ae:	6053      	str	r3, [r2, #4]
 80062b0:	e02e      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
 80062b2:	4b48      	ldr	r3, [pc, #288]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	069b      	lsls	r3, r3, #26
 80062c0:	4944      	ldr	r1, [pc, #272]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
 80062c6:	e023      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
 80062c8:	4b42      	ldr	r3, [pc, #264]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	061b      	lsls	r3, r3, #24
 80062d6:	493f      	ldr	r1, [pc, #252]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	60cb      	str	r3, [r1, #12]
 80062dc:	e018      	b.n	8006310 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062de:	4b3d      	ldr	r3, [pc, #244]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a3c      	ldr	r2, [pc, #240]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80062e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fb feed 	bl	80020c8 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062f2:	f7fb fee9 	bl	80020c8 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e23d      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006304:	4b33      	ldr	r3, [pc, #204]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f0      	bne.n	80062f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d036      	beq.n	800638a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006324:	4b2b      	ldr	r3, [pc, #172]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006328:	4a2a      	ldr	r2, [pc, #168]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006330:	f7fb feca 	bl	80020c8 <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006338:	f7fb fec6 	bl	80020c8 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e21a      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800634a:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800634c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0x45c>
 8006356:	e018      	b.n	800638a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006358:	4b1e      	ldr	r3, [pc, #120]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800635a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635c:	4a1d      	ldr	r2, [pc, #116]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006364:	f7fb feb0 	bl	80020c8 <HAL_GetTick>
 8006368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800636c:	f7fb feac 	bl	80020c8 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e200      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800637e:	4b15      	ldr	r3, [pc, #84]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d039      	beq.n	800640a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01c      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a0c      	ldr	r2, [pc, #48]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80063a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063aa:	f7fb fe8d 	bl	80020c8 <HAL_GetTick>
 80063ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063b2:	f7fb fe89 	bl	80020c8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e1dd      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063c4:	4b03      	ldr	r3, [pc, #12]	@ (80063d4 <HAL_RCC_OscConfig+0x4f8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x4d6>
 80063d0:	e01b      	b.n	800640a <HAL_RCC_OscConfig+0x52e>
 80063d2:	bf00      	nop
 80063d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063d8:	4b9b      	ldr	r3, [pc, #620]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a9a      	ldr	r2, [pc, #616]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80063de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063e4:	f7fb fe70 	bl	80020c8 <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ec:	f7fb fe6c 	bl	80020c8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e1c0      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063fe:	4b92      	ldr	r3, [pc, #584]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8081 	beq.w	800651a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006418:	4b8c      	ldr	r3, [pc, #560]	@ (800664c <HAL_RCC_OscConfig+0x770>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a8b      	ldr	r2, [pc, #556]	@ (800664c <HAL_RCC_OscConfig+0x770>)
 800641e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006424:	f7fb fe50 	bl	80020c8 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642c:	f7fb fe4c 	bl	80020c8 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	@ 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1a0      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643e:	4b83      	ldr	r3, [pc, #524]	@ (800664c <HAL_RCC_OscConfig+0x770>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d106      	bne.n	8006460 <HAL_RCC_OscConfig+0x584>
 8006452:	4b7d      	ldr	r3, [pc, #500]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006456:	4a7c      	ldr	r2, [pc, #496]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6713      	str	r3, [r2, #112]	@ 0x70
 800645e:	e02d      	b.n	80064bc <HAL_RCC_OscConfig+0x5e0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10c      	bne.n	8006482 <HAL_RCC_OscConfig+0x5a6>
 8006468:	4b77      	ldr	r3, [pc, #476]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	4a76      	ldr	r2, [pc, #472]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	6713      	str	r3, [r2, #112]	@ 0x70
 8006474:	4b74      	ldr	r3, [pc, #464]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006478:	4a73      	ldr	r2, [pc, #460]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006480:	e01c      	b.n	80064bc <HAL_RCC_OscConfig+0x5e0>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b05      	cmp	r3, #5
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x5c8>
 800648a:	4b6f      	ldr	r3, [pc, #444]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648e:	4a6e      	ldr	r2, [pc, #440]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006490:	f043 0304 	orr.w	r3, r3, #4
 8006494:	6713      	str	r3, [r2, #112]	@ 0x70
 8006496:	4b6c      	ldr	r3, [pc, #432]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649a:	4a6b      	ldr	r2, [pc, #428]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064a2:	e00b      	b.n	80064bc <HAL_RCC_OscConfig+0x5e0>
 80064a4:	4b68      	ldr	r3, [pc, #416]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a8:	4a67      	ldr	r2, [pc, #412]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b0:	4b65      	ldr	r3, [pc, #404]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b4:	4a64      	ldr	r2, [pc, #400]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80064b6:	f023 0304 	bic.w	r3, r3, #4
 80064ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d015      	beq.n	80064f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c4:	f7fb fe00 	bl	80020c8 <HAL_GetTick>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064cc:	f7fb fdfc 	bl	80020c8 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e14e      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e2:	4b59      	ldr	r3, [pc, #356]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0ee      	beq.n	80064cc <HAL_RCC_OscConfig+0x5f0>
 80064ee:	e014      	b.n	800651a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fb fdea 	bl	80020c8 <HAL_GetTick>
 80064f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064f6:	e00a      	b.n	800650e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fb fde6 	bl	80020c8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e138      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800650e:	4b4e      	ldr	r3, [pc, #312]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1ee      	bne.n	80064f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 812d 	beq.w	800677e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006524:	4b48      	ldr	r3, [pc, #288]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800652c:	2b18      	cmp	r3, #24
 800652e:	f000 80bd 	beq.w	80066ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	2b02      	cmp	r3, #2
 8006538:	f040 809e 	bne.w	8006678 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653c:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a41      	ldr	r2, [pc, #260]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fb fdbe 	bl	80020c8 <HAL_GetTick>
 800654c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006550:	f7fb fdba 	bl	80020c8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e10e      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006562:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800656e:	4b36      	ldr	r3, [pc, #216]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006572:	4b37      	ldr	r3, [pc, #220]	@ (8006650 <HAL_RCC_OscConfig+0x774>)
 8006574:	4013      	ands	r3, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800657e:	0112      	lsls	r2, r2, #4
 8006580:	430a      	orrs	r2, r1
 8006582:	4931      	ldr	r1, [pc, #196]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	628b      	str	r3, [r1, #40]	@ 0x28
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	3b01      	subs	r3, #1
 800658e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	3b01      	subs	r3, #1
 8006598:	025b      	lsls	r3, r3, #9
 800659a:	b29b      	uxth	r3, r3
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	3b01      	subs	r3, #1
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	3b01      	subs	r3, #1
 80065b2:	061b      	lsls	r3, r3, #24
 80065b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065b8:	4923      	ldr	r1, [pc, #140]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80065be:	4b22      	ldr	r3, [pc, #136]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4a21      	ldr	r2, [pc, #132]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ce:	4b21      	ldr	r3, [pc, #132]	@ (8006654 <HAL_RCC_OscConfig+0x778>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065d6:	00d2      	lsls	r2, r2, #3
 80065d8:	491b      	ldr	r1, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	f023 020c 	bic.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	4917      	ldr	r1, [pc, #92]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065f0:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	f023 0202 	bic.w	r2, r3, #2
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fc:	4912      	ldr	r1, [pc, #72]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006602:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	4a10      	ldr	r2, [pc, #64]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a0d      	ldr	r2, [pc, #52]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	4a0a      	ldr	r2, [pc, #40]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006626:	4b08      	ldr	r3, [pc, #32]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662a:	4a07      	ldr	r2, [pc, #28]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006632:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a04      	ldr	r2, [pc, #16]	@ (8006648 <HAL_RCC_OscConfig+0x76c>)
 8006638:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800663c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fb fd43 	bl	80020c8 <HAL_GetTick>
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006644:	e011      	b.n	800666a <HAL_RCC_OscConfig+0x78e>
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	58024800 	.word	0x58024800
 8006650:	fffffc0c 	.word	0xfffffc0c
 8006654:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006658:	f7fb fd36 	bl	80020c8 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e08a      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800666a:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x77c>
 8006676:	e082      	b.n	800677e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b43      	ldr	r3, [pc, #268]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a42      	ldr	r2, [pc, #264]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fb fd20 	bl	80020c8 <HAL_GetTick>
 8006688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668c:	f7fb fd1c 	bl	80020c8 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e070      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800669e:	4b3a      	ldr	r3, [pc, #232]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x7b0>
 80066aa:	e068      	b.n	800677e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066ac:	4b36      	ldr	r3, [pc, #216]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 80066ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066b2:	4b35      	ldr	r3, [pc, #212]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d031      	beq.n	8006724 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f003 0203 	and.w	r2, r3, #3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d12a      	bne.n	8006724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d122      	bne.n	8006724 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11a      	bne.n	8006724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d111      	bne.n	8006724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d108      	bne.n	8006724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e02b      	b.n	8006780 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006728:	4b17      	ldr	r3, [pc, #92]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 800672a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672c:	08db      	lsrs	r3, r3, #3
 800672e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006732:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d01f      	beq.n	800677e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800673e:	4b12      	ldr	r3, [pc, #72]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	4a11      	ldr	r2, [pc, #68]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800674a:	f7fb fcbd 	bl	80020c8 <HAL_GetTick>
 800674e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006750:	bf00      	nop
 8006752:	f7fb fcb9 	bl	80020c8 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	4293      	cmp	r3, r2
 800675c:	d0f9      	beq.n	8006752 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800675e:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 8006760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <HAL_RCC_OscConfig+0x8b0>)
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800676a:	00d2      	lsls	r2, r2, #3
 800676c:	4906      	ldr	r1, [pc, #24]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 800676e:	4313      	orrs	r3, r2
 8006770:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006772:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <HAL_RCC_OscConfig+0x8ac>)
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3730      	adds	r7, #48	@ 0x30
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	58024400 	.word	0x58024400
 800678c:	ffff0007 	.word	0xffff0007

08006790 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e19c      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067a4:	4b8a      	ldr	r3, [pc, #552]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d910      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b2:	4b87      	ldr	r3, [pc, #540]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f023 020f 	bic.w	r2, r3, #15
 80067ba:	4985      	ldr	r1, [pc, #532]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b83      	ldr	r3, [pc, #524]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e184      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	4b7b      	ldr	r3, [pc, #492]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d908      	bls.n	8006802 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067f0:	4b78      	ldr	r3, [pc, #480]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	4975      	ldr	r1, [pc, #468]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d010      	beq.n	8006830 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695a      	ldr	r2, [r3, #20]
 8006812:	4b70      	ldr	r3, [pc, #448]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800681a:	429a      	cmp	r2, r3
 800681c:	d908      	bls.n	8006830 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800681e:	4b6d      	ldr	r3, [pc, #436]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	496a      	ldr	r1, [pc, #424]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800682c:	4313      	orrs	r3, r2
 800682e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	4b64      	ldr	r3, [pc, #400]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006848:	429a      	cmp	r2, r3
 800684a:	d908      	bls.n	800685e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800684c:	4b61      	ldr	r3, [pc, #388]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	495e      	ldr	r1, [pc, #376]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800685a:	4313      	orrs	r3, r2
 800685c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	4b59      	ldr	r3, [pc, #356]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006876:	429a      	cmp	r2, r3
 8006878:	d908      	bls.n	800688c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800687a:	4b56      	ldr	r3, [pc, #344]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	4953      	ldr	r1, [pc, #332]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	4b4d      	ldr	r3, [pc, #308]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d908      	bls.n	80068ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a8:	4b4a      	ldr	r3, [pc, #296]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f023 020f 	bic.w	r2, r3, #15
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4947      	ldr	r1, [pc, #284]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d055      	beq.n	8006972 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068c6:	4b43      	ldr	r3, [pc, #268]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	4940      	ldr	r1, [pc, #256]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d107      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068e0:	4b3c      	ldr	r3, [pc, #240]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d121      	bne.n	8006930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0f6      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d107      	bne.n	8006908 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068f8:	4b36      	ldr	r3, [pc, #216]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d115      	bne.n	8006930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0ea      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006910:	4b30      	ldr	r3, [pc, #192]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0de      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006920:	4b2c      	ldr	r3, [pc, #176]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0d6      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006930:	4b28      	ldr	r3, [pc, #160]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f023 0207 	bic.w	r2, r3, #7
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4925      	ldr	r1, [pc, #148]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800693e:	4313      	orrs	r3, r2
 8006940:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006942:	f7fb fbc1 	bl	80020c8 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006948:	e00a      	b.n	8006960 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694a:	f7fb fbbd 	bl	80020c8 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e0be      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006960:	4b1c      	ldr	r3, [pc, #112]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	429a      	cmp	r2, r3
 8006970:	d1eb      	bne.n	800694a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d010      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	429a      	cmp	r2, r3
 800698c:	d208      	bcs.n	80069a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800698e:	4b11      	ldr	r3, [pc, #68]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f023 020f 	bic.w	r2, r3, #15
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	490e      	ldr	r1, [pc, #56]	@ (80069d4 <HAL_RCC_ClockConfig+0x244>)
 800699c:	4313      	orrs	r3, r2
 800699e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d214      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b08      	ldr	r3, [pc, #32]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 020f 	bic.w	r2, r3, #15
 80069b6:	4906      	ldr	r1, [pc, #24]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069be:	4b04      	ldr	r3, [pc, #16]	@ (80069d0 <HAL_RCC_ClockConfig+0x240>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e086      	b.n	8006ade <HAL_RCC_ClockConfig+0x34e>
 80069d0:	52002000 	.word	0x52002000
 80069d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d010      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d208      	bcs.n	8006a06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069f4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	4939      	ldr	r1, [pc, #228]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695a      	ldr	r2, [r3, #20]
 8006a16:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d208      	bcs.n	8006a34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	492e      	ldr	r1, [pc, #184]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	4b28      	ldr	r3, [pc, #160]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d208      	bcs.n	8006a62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a50:	4b25      	ldr	r3, [pc, #148]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	4922      	ldr	r1, [pc, #136]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d208      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	4917      	ldr	r1, [pc, #92]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a90:	f000 f834 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8006a94:	4602      	mov	r2, r0
 8006a96:	4b14      	ldr	r3, [pc, #80]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	4912      	ldr	r1, [pc, #72]	@ (8006aec <HAL_RCC_ClockConfig+0x35c>)
 8006aa2:	5ccb      	ldrb	r3, [r1, r3]
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <HAL_RCC_ClockConfig+0x358>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8006aec <HAL_RCC_ClockConfig+0x35c>)
 8006ab8:	5cd3      	ldrb	r3, [r2, r3]
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8006af0 <HAL_RCC_ClockConfig+0x360>)
 8006ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8006af4 <HAL_RCC_ClockConfig+0x364>)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ace:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <HAL_RCC_ClockConfig+0x368>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa feae 	bl	8001834 <HAL_InitTick>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	08018b84 	.word	0x08018b84
 8006af0:	24000008 	.word	0x24000008
 8006af4:	24000004 	.word	0x24000004
 8006af8:	2400000c 	.word	0x2400000c

08006afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	@ 0x24
 8006b00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b02:	4bb3      	ldr	r3, [pc, #716]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0a:	2b18      	cmp	r3, #24
 8006b0c:	f200 8155 	bhi.w	8006dba <HAL_RCC_GetSysClockFreq+0x2be>
 8006b10:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b7d 	.word	0x08006b7d
 8006b1c:	08006dbb 	.word	0x08006dbb
 8006b20:	08006dbb 	.word	0x08006dbb
 8006b24:	08006dbb 	.word	0x08006dbb
 8006b28:	08006dbb 	.word	0x08006dbb
 8006b2c:	08006dbb 	.word	0x08006dbb
 8006b30:	08006dbb 	.word	0x08006dbb
 8006b34:	08006dbb 	.word	0x08006dbb
 8006b38:	08006ba3 	.word	0x08006ba3
 8006b3c:	08006dbb 	.word	0x08006dbb
 8006b40:	08006dbb 	.word	0x08006dbb
 8006b44:	08006dbb 	.word	0x08006dbb
 8006b48:	08006dbb 	.word	0x08006dbb
 8006b4c:	08006dbb 	.word	0x08006dbb
 8006b50:	08006dbb 	.word	0x08006dbb
 8006b54:	08006dbb 	.word	0x08006dbb
 8006b58:	08006ba9 	.word	0x08006ba9
 8006b5c:	08006dbb 	.word	0x08006dbb
 8006b60:	08006dbb 	.word	0x08006dbb
 8006b64:	08006dbb 	.word	0x08006dbb
 8006b68:	08006dbb 	.word	0x08006dbb
 8006b6c:	08006dbb 	.word	0x08006dbb
 8006b70:	08006dbb 	.word	0x08006dbb
 8006b74:	08006dbb 	.word	0x08006dbb
 8006b78:	08006baf 	.word	0x08006baf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b7c:	4b94      	ldr	r3, [pc, #592]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b88:	4b91      	ldr	r3, [pc, #580]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	08db      	lsrs	r3, r3, #3
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	4a90      	ldr	r2, [pc, #576]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
 8006b98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b9a:	e111      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b9e:	61bb      	str	r3, [r7, #24]
      break;
 8006ba0:	e10e      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ba4:	61bb      	str	r3, [r7, #24]
      break;
 8006ba6:	e10b      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8006ddc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006baa:	61bb      	str	r3, [r7, #24]
      break;
 8006bac:	e108      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bae:	4b88      	ldr	r3, [pc, #544]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006bb8:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	091b      	lsrs	r3, r3, #4
 8006bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006bc4:	4b82      	ldr	r3, [pc, #520]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006bce:	4b80      	ldr	r3, [pc, #512]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd2:	08db      	lsrs	r3, r3, #3
 8006bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80e1 	beq.w	8006db4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f000 8083 	beq.w	8006d00 <HAL_RCC_GetSysClockFreq+0x204>
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	f200 80a1 	bhi.w	8006d44 <HAL_RCC_GetSysClockFreq+0x248>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0x114>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d056      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c0e:	e099      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c10:	4b6f      	ldr	r3, [pc, #444]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d02d      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	4a6b      	ldr	r2, [pc, #428]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	4b62      	ldr	r3, [pc, #392]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c76:	e087      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006de4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b51      	ldr	r3, [pc, #324]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cba:	e065      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b40      	ldr	r3, [pc, #256]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cfe:	e043      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006dec <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d42:	e021      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b1e      	ldr	r3, [pc, #120]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d88:	4b11      	ldr	r3, [pc, #68]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8c:	0a5b      	lsrs	r3, r3, #9
 8006d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d92:	3301      	adds	r3, #1
 8006d94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dac:	ee17 3a90 	vmov	r3, s15
 8006db0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006db2:	e005      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
      break;
 8006db8:	e002      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006dba:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dbc:	61bb      	str	r3, [r7, #24]
      break;
 8006dbe:	bf00      	nop
  }

  return sysclockfreq;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	003d0900 	.word	0x003d0900
 8006ddc:	007a1200 	.word	0x007a1200
 8006de0:	46000000 	.word	0x46000000
 8006de4:	4c742400 	.word	0x4c742400
 8006de8:	4a742400 	.word	0x4a742400
 8006dec:	4af42400 	.word	0x4af42400

08006df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006df6:	f7ff fe81 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	4b10      	ldr	r3, [pc, #64]	@ (8006e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	490f      	ldr	r1, [pc, #60]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e08:	5ccb      	ldrb	r3, [r1, r3]
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e14:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	4a09      	ldr	r2, [pc, #36]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e1e:	5cd3      	ldrb	r3, [r2, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	4a07      	ldr	r2, [pc, #28]	@ (8006e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e2e:	4a07      	ldr	r2, [pc, #28]	@ (8006e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e34:	4b04      	ldr	r3, [pc, #16]	@ (8006e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	58024400 	.word	0x58024400
 8006e44:	08018b84 	.word	0x08018b84
 8006e48:	24000008 	.word	0x24000008
 8006e4c:	24000004 	.word	0x24000004

08006e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e54:	f7ff ffcc 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4904      	ldr	r1, [pc, #16]	@ (8006e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	58024400 	.word	0x58024400
 8006e78:	08018b84 	.word	0x08018b84

08006e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e80:	f7ff ffb6 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 8006e84:	4602      	mov	r2, r0
 8006e86:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	4904      	ldr	r1, [pc, #16]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e92:	5ccb      	ldrb	r3, [r1, r3]
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	08018b84 	.word	0x08018b84

08006ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	223f      	movs	r2, #63	@ 0x3f
 8006eb6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 0207 	and.w	r2, r3, #7
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006ec4:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006ed0:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006edc:	4b11      	ldr	r3, [pc, #68]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006f00:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <HAL_RCC_GetClockConfig+0x7c>)
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <HAL_RCC_GetClockConfig+0x80>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	58024400 	.word	0x58024400
 8006f28:	52002000 	.word	0x52002000

08006f2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f30:	b0ca      	sub	sp, #296	@ 0x128
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f50:	2500      	movs	r5, #0
 8006f52:	ea54 0305 	orrs.w	r3, r4, r5
 8006f56:	d049      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f62:	d02f      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f68:	d828      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6e:	d01a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f74:	d822      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7e:	d007      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f80:	e01c      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f82:	4bb8      	ldr	r3, [pc, #736]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	4ab7      	ldr	r2, [pc, #732]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f8e:	e01a      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	3308      	adds	r3, #8
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fc8f 	bl	80088bc <RCCEx_PLL2_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fa4:	e00f      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	3328      	adds	r3, #40	@ 0x28
 8006fac:	2102      	movs	r1, #2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fd36 	bl	8008a20 <RCCEx_PLL3_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fba:	e004      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fce:	4ba5      	ldr	r3, [pc, #660]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fdc:	4aa1      	ldr	r2, [pc, #644]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fe2:	e003      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	ea58 0309 	orrs.w	r3, r8, r9
 8007000:	d047      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007008:	2b04      	cmp	r3, #4
 800700a:	d82a      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800700c:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007029 	.word	0x08007029
 8007018:	08007037 	.word	0x08007037
 800701c:	0800704d 	.word	0x0800704d
 8007020:	0800706b 	.word	0x0800706b
 8007024:	0800706b 	.word	0x0800706b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007028:	4b8e      	ldr	r3, [pc, #568]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	4a8d      	ldr	r2, [pc, #564]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007034:	e01a      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	3308      	adds	r3, #8
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fc3c 	bl	80088bc <RCCEx_PLL2_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800704a:	e00f      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	3328      	adds	r3, #40	@ 0x28
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fce3 	bl	8008a20 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007060:	e004      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800706a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007074:	4b7b      	ldr	r3, [pc, #492]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007078:	f023 0107 	bic.w	r1, r3, #7
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	4a78      	ldr	r2, [pc, #480]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007084:	430b      	orrs	r3, r1
 8007086:	6513      	str	r3, [r2, #80]	@ 0x50
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800709e:	f04f 0b00 	mov.w	fp, #0
 80070a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80070a6:	d04c      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b2:	d030      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b8:	d829      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80070bc:	d02d      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80070be:	2bc0      	cmp	r3, #192	@ 0xc0
 80070c0:	d825      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	d018      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80070c6:	2b80      	cmp	r3, #128	@ 0x80
 80070c8:	d821      	bhi.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d007      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80070d2:	e01c      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4b63      	ldr	r3, [pc, #396]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	4a62      	ldr	r2, [pc, #392]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070e0:	e01c      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	3308      	adds	r3, #8
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fbe6 	bl	80088bc <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fc:	3328      	adds	r3, #40	@ 0x28
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fc8d 	bl	8008a20 <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007124:	4b4f      	ldr	r3, [pc, #316]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007128:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007132:	4a4c      	ldr	r2, [pc, #304]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6513      	str	r3, [r2, #80]	@ 0x50
 8007138:	e003      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800714e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007158:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800715c:	460b      	mov	r3, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	d053      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800716a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800716e:	d035      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007174:	d82e      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007176:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800717a:	d031      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800717c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007180:	d828      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007186:	d01a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800718c:	d822      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007196:	d007      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007198:	e01c      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719a:	4b32      	ldr	r3, [pc, #200]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	4a31      	ldr	r2, [pc, #196]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a6:	e01c      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	3308      	adds	r3, #8
 80071ae:	2100      	movs	r1, #0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fb83 	bl	80088bc <RCCEx_PLL2_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071bc:	e011      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	3328      	adds	r3, #40	@ 0x28
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fc2a 	bl	8008a20 <RCCEx_PLL3_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d2:	e006      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071da:	e002      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007200:	e003      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800721a:	2300      	movs	r3, #0
 800721c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007220:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007224:	460b      	mov	r3, r1
 8007226:	4313      	orrs	r3, r2
 8007228:	d056      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007236:	d038      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800723c:	d831      	bhi.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800723e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007242:	d034      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007248:	d82b      	bhi.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800724e:	d01d      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007254:	d825      	bhi.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800725a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007260:	e01f      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007262:	bf00      	nop
 8007264:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007268:	4ba2      	ldr	r3, [pc, #648]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	4aa1      	ldr	r2, [pc, #644]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007274:	e01c      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727a:	3308      	adds	r3, #8
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f001 fb1c 	bl	80088bc <RCCEx_PLL2_Config>
 8007284:	4603      	mov	r3, r0
 8007286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800728a:	e011      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007290:	3328      	adds	r3, #40	@ 0x28
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fbc3 	bl	8008a20 <RCCEx_PLL3_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072a8:	e002      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072b8:	4b8e      	ldr	r3, [pc, #568]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072c8:	4a8a      	ldr	r2, [pc, #552]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ca:	430b      	orrs	r3, r1
 80072cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80072ce:	e003      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072f2:	460b      	mov	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	d03a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fe:	2b30      	cmp	r3, #48	@ 0x30
 8007300:	d01f      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007302:	2b30      	cmp	r3, #48	@ 0x30
 8007304:	d819      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007306:	2b20      	cmp	r3, #32
 8007308:	d00c      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800730a:	2b20      	cmp	r3, #32
 800730c:	d815      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d019      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007312:	2b10      	cmp	r3, #16
 8007314:	d111      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007316:	4b77      	ldr	r3, [pc, #476]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731a:	4a76      	ldr	r2, [pc, #472]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800731c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007322:	e011      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007328:	3308      	adds	r3, #8
 800732a:	2102      	movs	r1, #2
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fac5 	bl	80088bc <RCCEx_PLL2_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007338:	e006      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007350:	4b68      	ldr	r3, [pc, #416]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007354:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800735e:	4a65      	ldr	r2, [pc, #404]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007360:	430b      	orrs	r3, r1
 8007362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800737a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800737e:	2300      	movs	r3, #0
 8007380:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007384:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007388:	460b      	mov	r3, r1
 800738a:	4313      	orrs	r3, r2
 800738c:	d051      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007398:	d035      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800739a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800739e:	d82e      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073a4:	d031      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073aa:	d828      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b0:	d01a      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b6:	d822      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80073bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c0:	d007      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80073c2:	e01c      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c4:	4b4b      	ldr	r3, [pc, #300]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	4a4a      	ldr	r2, [pc, #296]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073d0:	e01c      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	3308      	adds	r3, #8
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 fa6e 	bl	80088bc <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073e6:	e011      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ec:	3328      	adds	r3, #40	@ 0x28
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 fb15 	bl	8008a20 <RCCEx_PLL3_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073fc:	e006      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007404:	e002      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800740a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007414:	4b37      	ldr	r3, [pc, #220]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007418:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007422:	4a34      	ldr	r2, [pc, #208]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007424:	430b      	orrs	r3, r1
 8007426:	6513      	str	r3, [r2, #80]	@ 0x50
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800743e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007448:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800744c:	460b      	mov	r3, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	d056      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800745c:	d033      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800745e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007462:	d82c      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007468:	d02f      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800746a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800746e:	d826      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007474:	d02b      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007476:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800747a:	d820      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800747c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007480:	d012      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007486:	d81a      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d022      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007490:	d115      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007496:	3308      	adds	r3, #8
 8007498:	2101      	movs	r1, #1
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fa0e 	bl	80088bc <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074a6:	e015      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	3328      	adds	r3, #40	@ 0x28
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 fab5 	bl	8008a20 <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074bc:	e00a      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e004      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10d      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074dc:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ea:	4a02      	ldr	r2, [pc, #8]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80074f0:	e006      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007516:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d055      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800752c:	d033      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800752e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007532:	d82c      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007538:	d02f      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d826      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007544:	d02b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800754a:	d820      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800754c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007550:	d012      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007556:	d81a      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d022      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800755c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007560:	d115      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	3308      	adds	r3, #8
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f001 f9a6 	bl	80088bc <RCCEx_PLL2_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007576:	e015      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	3328      	adds	r3, #40	@ 0x28
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fa4d 	bl	8008a20 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800758c:	e00a      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075ac:	4ba3      	ldr	r3, [pc, #652]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075bc:	4a9f      	ldr	r2, [pc, #636]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075c2:	e003      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80075d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075e6:	460b      	mov	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	d037      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f6:	d00e      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80075f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fc:	d816      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d018      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007606:	d111      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007608:	4b8c      	ldr	r3, [pc, #560]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	4a8b      	ldr	r2, [pc, #556]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007614:	e00f      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761a:	3308      	adds	r3, #8
 800761c:	2101      	movs	r1, #1
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f94c 	bl	80088bc <RCCEx_PLL2_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800762a:	e004      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007632:	e000      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800763e:	4b7f      	ldr	r3, [pc, #508]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007642:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764c:	4a7b      	ldr	r2, [pc, #492]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800764e:	430b      	orrs	r3, r1
 8007650:	6513      	str	r3, [r2, #80]	@ 0x50
 8007652:	e003      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800766c:	2300      	movs	r3, #0
 800766e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007672:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007676:	460b      	mov	r3, r1
 8007678:	4313      	orrs	r3, r2
 800767a:	d039      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007682:	2b03      	cmp	r3, #3
 8007684:	d81c      	bhi.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007686:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	080076c9 	.word	0x080076c9
 8007690:	0800769d 	.word	0x0800769d
 8007694:	080076ab 	.word	0x080076ab
 8007698:	080076c9 	.word	0x080076c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b67      	ldr	r3, [pc, #412]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a66      	ldr	r2, [pc, #408]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076a8:	e00f      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	3308      	adds	r3, #8
 80076b0:	2102      	movs	r1, #2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 f902 	bl	80088bc <RCCEx_PLL2_Config>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076be:	e004      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80076c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076d2:	4b5a      	ldr	r3, [pc, #360]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d6:	f023 0103 	bic.w	r1, r3, #3
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076e0:	4a56      	ldr	r2, [pc, #344]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e2:	430b      	orrs	r3, r1
 80076e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076e6:	e003      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007706:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	f000 809f 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007712:	4b4b      	ldr	r3, [pc, #300]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a4a      	ldr	r2, [pc, #296]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800771c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800771e:	f7fa fcd3 	bl	80020c8 <HAL_GetTick>
 8007722:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007726:	e00b      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007728:	f7fa fcce 	bl	80020c8 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b64      	cmp	r3, #100	@ 0x64
 8007736:	d903      	bls.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800773e:	e005      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007740:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0ed      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007750:	2b00      	cmp	r3, #0
 8007752:	d179      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007754:	4b39      	ldr	r3, [pc, #228]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007760:	4053      	eors	r3, r2
 8007762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007766:	2b00      	cmp	r3, #0
 8007768:	d015      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800776a:	4b34      	ldr	r3, [pc, #208]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007772:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007776:	4b31      	ldr	r3, [pc, #196]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777a:	4a30      	ldr	r2, [pc, #192]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007780:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007782:	4b2e      	ldr	r3, [pc, #184]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007786:	4a2d      	ldr	r2, [pc, #180]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800778e:	4a2b      	ldr	r2, [pc, #172]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007794:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800779e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077a2:	d118      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fa fc90 	bl	80020c8 <HAL_GetTick>
 80077a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ac:	e00d      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ae:	f7fa fc8b 	bl	80020c8 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80077c8:	e005      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ca:	4b1c      	ldr	r3, [pc, #112]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0eb      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80077d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d129      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ee:	d10e      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80077f0:	4b12      	ldr	r3, [pc, #72]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007800:	091a      	lsrs	r2, r3, #4
 8007802:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007804:	4013      	ands	r3, r2
 8007806:	4a0d      	ldr	r2, [pc, #52]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007808:	430b      	orrs	r3, r1
 800780a:	6113      	str	r3, [r2, #16]
 800780c:	e005      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	4a0a      	ldr	r2, [pc, #40]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007818:	6113      	str	r3, [r2, #16]
 800781a:	4b08      	ldr	r3, [pc, #32]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800781c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800782a:	4a04      	ldr	r2, [pc, #16]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800782c:	430b      	orrs	r3, r1
 800782e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007830:	e00e      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800783a:	e009      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800783c:	58024400 	.word	0x58024400
 8007840:	58024800 	.word	0x58024800
 8007844:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 0301 	and.w	r3, r2, #1
 800785c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007866:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	f000 8089 	beq.w	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007878:	2b28      	cmp	r3, #40	@ 0x28
 800787a:	d86b      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800787c:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	0800795d 	.word	0x0800795d
 8007888:	08007955 	.word	0x08007955
 800788c:	08007955 	.word	0x08007955
 8007890:	08007955 	.word	0x08007955
 8007894:	08007955 	.word	0x08007955
 8007898:	08007955 	.word	0x08007955
 800789c:	08007955 	.word	0x08007955
 80078a0:	08007955 	.word	0x08007955
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007955 	.word	0x08007955
 80078ac:	08007955 	.word	0x08007955
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007955 	.word	0x08007955
 80078b8:	08007955 	.word	0x08007955
 80078bc:	08007955 	.word	0x08007955
 80078c0:	08007955 	.word	0x08007955
 80078c4:	0800793f 	.word	0x0800793f
 80078c8:	08007955 	.word	0x08007955
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	08007955 	.word	0x08007955
 80078e4:	0800795d 	.word	0x0800795d
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007955 	.word	0x08007955
 80078f8:	08007955 	.word	0x08007955
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007955 	.word	0x08007955
 8007904:	0800795d 	.word	0x0800795d
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007955 	.word	0x08007955
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
 8007920:	08007955 	.word	0x08007955
 8007924:	0800795d 	.word	0x0800795d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	3308      	adds	r3, #8
 800792e:	2101      	movs	r1, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f000 ffc3 	bl	80088bc <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800793c:	e00f      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	3328      	adds	r3, #40	@ 0x28
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f001 f86a 	bl	8008a20 <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007952:	e004      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800795a:	e000      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800795c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007966:	4bbf      	ldr	r3, [pc, #764]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007974:	4abb      	ldr	r2, [pc, #748]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007976:	430b      	orrs	r3, r1
 8007978:	6553      	str	r3, [r2, #84]	@ 0x54
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f002 0302 	and.w	r3, r2, #2
 8007990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007994:	2300      	movs	r3, #0
 8007996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800799a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d041      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d824      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	080079cd 	.word	0x080079cd
 80079bc:	080079e3 	.word	0x080079e3
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007a01 	.word	0x08007a01
 80079c8:	08007a01 	.word	0x08007a01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	3308      	adds	r3, #8
 80079d2:	2101      	movs	r1, #1
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 ff71 	bl	80088bc <RCCEx_PLL2_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079e0:	e00f      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	3328      	adds	r3, #40	@ 0x28
 80079e8:	2101      	movs	r1, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f818 	bl	8008a20 <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079f6:	e004      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a0a:	4b96      	ldr	r3, [pc, #600]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0e:	f023 0107 	bic.w	r1, r3, #7
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a18:	4a92      	ldr	r2, [pc, #584]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f002 0304 	and.w	r3, r2, #4
 8007a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d044      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d825      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007a75 	.word	0x08007a75
 8007a64:	08007a8b 	.word	0x08007a8b
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007aa9 	.word	0x08007aa9
 8007a70:	08007aa9 	.word	0x08007aa9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	3308      	adds	r3, #8
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 ff1d 	bl	80088bc <RCCEx_PLL2_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a88:	e00f      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	3328      	adds	r3, #40	@ 0x28
 8007a90:	2101      	movs	r1, #1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 ffc4 	bl	8008a20 <RCCEx_PLL3_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a9e:	e004      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10b      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab6:	f023 0107 	bic.w	r1, r3, #7
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac2:	4a68      	ldr	r2, [pc, #416]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ac8:	e003      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f002 0320 	and.w	r3, r2, #32
 8007ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aec:	460b      	mov	r3, r1
 8007aee:	4313      	orrs	r3, r2
 8007af0:	d055      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007afe:	d033      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b04:	d82c      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0a:	d02f      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b10:	d826      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b16:	d02b      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b1c:	d820      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b22:	d012      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b28:	d81a      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d022      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b32:	d115      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	3308      	adds	r3, #8
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 febd 	bl	80088bc <RCCEx_PLL2_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b48:	e015      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4e:	3328      	adds	r3, #40	@ 0x28
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 ff64 	bl	8008a20 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b66:	e006      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b7e:	4b39      	ldr	r3, [pc, #228]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	4a35      	ldr	r2, [pc, #212]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d058      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bca:	d033      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007bcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bd0:	d82c      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd6:	d02f      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bdc:	d826      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007be2:	d02b      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007be8:	d820      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bee:	d012      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf4:	d81a      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d022      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfe:	d115      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	3308      	adds	r3, #8
 8007c06:	2100      	movs	r1, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fe57 	bl	80088bc <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c14:	e015      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	3328      	adds	r3, #40	@ 0x28
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fefe 	bl	8008a20 <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c2a:	e00a      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c32:	e006      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c34:	bf00      	nop
 8007c36:	e004      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c38:	bf00      	nop
 8007c3a:	e002      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c3c:	bf00      	nop
 8007c3e:	e000      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10e      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c4a:	4b06      	ldr	r3, [pc, #24]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5a:	4a02      	ldr	r2, [pc, #8]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c60:	e006      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c80:	2300      	movs	r3, #0
 8007c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	d055      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c9c:	d033      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ca2:	d82c      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca8:	d02f      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cae:	d826      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cb4:	d02b      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007cb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cba:	d820      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cc0:	d012      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cc6:	d81a      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d022      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cd0:	d115      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fdee 	bl	80088bc <RCCEx_PLL2_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ce6:	e015      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cec:	3328      	adds	r3, #40	@ 0x28
 8007cee:	2102      	movs	r1, #2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fe95 	bl	8008a20 <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cfc:	e00a      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d04:	e006      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10b      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d2c:	4a9d      	ldr	r2, [pc, #628]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d32:	e003      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f002 0308 	and.w	r3, r2, #8
 8007d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d01e      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6e:	3328      	adds	r3, #40	@ 0x28
 8007d70:	2102      	movs	r1, #2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fe54 	bl	8008a20 <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d84:	4b87      	ldr	r3, [pc, #540]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d94:	4a83      	ldr	r2, [pc, #524]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f002 0310 	and.w	r3, r2, #16
 8007da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007daa:	2300      	movs	r3, #0
 8007dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007db0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d01e      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc6:	d10c      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	3328      	adds	r3, #40	@ 0x28
 8007dce:	2102      	movs	r1, #2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fe25 	bl	8008a20 <RCCEx_PLL3_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007de2:	4b70      	ldr	r3, [pc, #448]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007df2:	4a6c      	ldr	r2, [pc, #432]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d03e      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e24:	d022      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e2a:	d81b      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e34:	d00b      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e36:	e015      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fd3b 	bl	80088bc <RCCEx_PLL2_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e4c:	e00f      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	3328      	adds	r3, #40	@ 0x28
 8007e54:	2102      	movs	r1, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fde2 	bl	8008a20 <RCCEx_PLL3_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e62:	e004      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e6a:	e000      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e76:	4b4b      	ldr	r3, [pc, #300]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e86:	4a47      	ldr	r2, [pc, #284]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ea8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007eac:	460b      	mov	r3, r1
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	d03b      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ebe:	d01f      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ec4:	d818      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eca:	d003      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed0:	d007      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ed2:	e011      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4b33      	ldr	r3, [pc, #204]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	4a32      	ldr	r2, [pc, #200]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ee0:	e00f      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	3328      	adds	r3, #40	@ 0x28
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fd98 	bl	8008a20 <RCCEx_PLL3_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ef6:	e004      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007efe:	e000      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f0a:	4b26      	ldr	r3, [pc, #152]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f1a:	4a22      	ldr	r2, [pc, #136]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f36:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f38:	2300      	movs	r3, #0
 8007f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d034      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f54:	d007      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f56:	e011      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f58:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	4a11      	ldr	r2, [pc, #68]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f64:	e00e      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fca4 	bl	80088bc <RCCEx_PLL2_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f7a:	e003      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9a:	4a02      	ldr	r2, [pc, #8]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fa0:	e006      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d00c      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd0:	3328      	adds	r3, #40	@ 0x28
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fd23 	bl	8008a20 <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007ff2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ff8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4313      	orrs	r3, r2
 8008000:	d038      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800800e:	d018      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008014:	d811      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801a:	d014      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800801c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008020:	d80b      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d011      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800802a:	d106      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802c:	4bc3      	ldr	r3, [pc, #780]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	4ac2      	ldr	r2, [pc, #776]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008038:	e008      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008042:	bf00      	nop
 8008044:	e002      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008046:	bf00      	nop
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008054:	4bb9      	ldr	r3, [pc, #740]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008058:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008064:	4ab5      	ldr	r2, [pc, #724]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008066:	430b      	orrs	r3, r1
 8008068:	6553      	str	r3, [r2, #84]	@ 0x54
 800806a:	e003      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008080:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008082:	2300      	movs	r3, #0
 8008084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008086:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800808a:	460b      	mov	r3, r1
 800808c:	4313      	orrs	r3, r2
 800808e:	d009      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008090:	4baa      	ldr	r3, [pc, #680]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800809e:	4aa7      	ldr	r2, [pc, #668]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080a0:	430b      	orrs	r3, r1
 80080a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80080b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80080b2:	2300      	movs	r3, #0
 80080b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80080b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080ba:	460b      	mov	r3, r1
 80080bc:	4313      	orrs	r3, r2
 80080be:	d00a      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80080c0:	4b9e      	ldr	r3, [pc, #632]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080d0:	4a9a      	ldr	r2, [pc, #616]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d2:	430b      	orrs	r3, r1
 80080d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e4:	2300      	movs	r3, #0
 80080e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080f2:	4b92      	ldr	r3, [pc, #584]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008100:	4a8e      	ldr	r2, [pc, #568]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008102:	430b      	orrs	r3, r1
 8008104:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008112:	643b      	str	r3, [r7, #64]	@ 0x40
 8008114:	2300      	movs	r3, #0
 8008116:	647b      	str	r3, [r7, #68]	@ 0x44
 8008118:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800811c:	460b      	mov	r3, r1
 800811e:	4313      	orrs	r3, r2
 8008120:	d00e      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008122:	4b86      	ldr	r3, [pc, #536]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	4a85      	ldr	r2, [pc, #532]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800812c:	6113      	str	r3, [r2, #16]
 800812e:	4b83      	ldr	r3, [pc, #524]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008130:	6919      	ldr	r1, [r3, #16]
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800813a:	4a80      	ldr	r2, [pc, #512]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800813c:	430b      	orrs	r3, r1
 800813e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800814c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800814e:	2300      	movs	r3, #0
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008152:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008156:	460b      	mov	r3, r1
 8008158:	4313      	orrs	r3, r2
 800815a:	d009      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800815c:	4b77      	ldr	r3, [pc, #476]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800815e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008160:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816a:	4a74      	ldr	r2, [pc, #464]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800816c:	430b      	orrs	r3, r1
 800816e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30
 800817e:	2300      	movs	r3, #0
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
 8008182:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008186:	460b      	mov	r3, r1
 8008188:	4313      	orrs	r3, r2
 800818a:	d00a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800818c:	4b6b      	ldr	r3, [pc, #428]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008190:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800819c:	4a67      	ldr	r2, [pc, #412]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800819e:	430b      	orrs	r3, r1
 80081a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	2100      	movs	r1, #0
 80081ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081b8:	460b      	mov	r3, r1
 80081ba:	4313      	orrs	r3, r2
 80081bc:	d011      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c2:	3308      	adds	r3, #8
 80081c4:	2100      	movs	r1, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fb78 	bl	80088bc <RCCEx_PLL2_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	2100      	movs	r1, #0
 80081ec:	6239      	str	r1, [r7, #32]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081f8:	460b      	mov	r3, r1
 80081fa:	4313      	orrs	r3, r2
 80081fc:	d011      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	3308      	adds	r3, #8
 8008204:	2101      	movs	r1, #1
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fb58 	bl	80088bc <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	2100      	movs	r1, #0
 800822c:	61b9      	str	r1, [r7, #24]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008238:	460b      	mov	r3, r1
 800823a:	4313      	orrs	r3, r2
 800823c:	d011      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	3308      	adds	r3, #8
 8008244:	2102      	movs	r1, #2
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fb38 	bl	80088bc <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	2100      	movs	r1, #0
 800826c:	6139      	str	r1, [r7, #16]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008278:	460b      	mov	r3, r1
 800827a:	4313      	orrs	r3, r2
 800827c:	d011      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800827e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008282:	3328      	adds	r3, #40	@ 0x28
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fbca 	bl	8008a20 <RCCEx_PLL3_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	2100      	movs	r1, #0
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082b8:	460b      	mov	r3, r1
 80082ba:	4313      	orrs	r3, r2
 80082bc:	d011      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c2:	3328      	adds	r3, #40	@ 0x28
 80082c4:	2101      	movs	r1, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fbaa 	bl	8008a20 <RCCEx_PLL3_Config>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	2100      	movs	r1, #0
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082f8:	460b      	mov	r3, r1
 80082fa:	4313      	orrs	r3, r2
 80082fc:	d011      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	3328      	adds	r3, #40	@ 0x28
 8008304:	2102      	movs	r1, #2
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fb8a 	bl	8008a20 <RCCEx_PLL3_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008322:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
}
 8008330:	4618      	mov	r0, r3
 8008332:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008336:	46bd      	mov	sp, r7
 8008338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833c:	58024400 	.word	0x58024400

08008340 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008344:	f7fe fd54 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 8008348:	4602      	mov	r2, r0
 800834a:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	091b      	lsrs	r3, r3, #4
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	4904      	ldr	r1, [pc, #16]	@ (8008368 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008356:	5ccb      	ldrb	r3, [r1, r3]
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008360:	4618      	mov	r0, r3
 8008362:	bd80      	pop	{r7, pc}
 8008364:	58024400 	.word	0x58024400
 8008368:	08018b84 	.word	0x08018b84

0800836c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800836c:	b480      	push	{r7}
 800836e:	b089      	sub	sp, #36	@ 0x24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008374:	4ba1      	ldr	r3, [pc, #644]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800837e:	4b9f      	ldr	r3, [pc, #636]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	0b1b      	lsrs	r3, r3, #12
 8008384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008388:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800838a:	4b9c      	ldr	r3, [pc, #624]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	091b      	lsrs	r3, r3, #4
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008396:	4b99      	ldr	r3, [pc, #612]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	08db      	lsrs	r3, r3, #3
 800839c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	fb02 f303 	mul.w	r3, r2, r3
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8111 	beq.w	80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	f000 8083 	beq.w	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	f200 80a1 	bhi.w	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d056      	beq.n	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083d6:	e099      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d8:	4b88      	ldr	r3, [pc, #544]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d02d      	beq.n	8008440 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e4:	4b85      	ldr	r3, [pc, #532]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	08db      	lsrs	r3, r3, #3
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	4a84      	ldr	r2, [pc, #528]	@ (8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
 80083f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b7b      	ldr	r3, [pc, #492]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800843e:	e087      	b.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008608 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b6a      	ldr	r3, [pc, #424]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008482:	e065      	b.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800860c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b59      	ldr	r3, [pc, #356]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c6:	e043      	b.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084da:	4b48      	ldr	r3, [pc, #288]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850a:	e021      	b.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800860c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b37      	ldr	r3, [pc, #220]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008550:	4b2a      	ldr	r3, [pc, #168]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	0a5b      	lsrs	r3, r3, #9
 8008556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800856a:	edd7 6a07 	vldr	s13, [r7, #28]
 800856e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008576:	ee17 2a90 	vmov	r2, s15
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800857e:	4b1f      	ldr	r3, [pc, #124]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008582:	0c1b      	lsrs	r3, r3, #16
 8008584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008598:	edd7 6a07 	vldr	s13, [r7, #28]
 800859c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a4:	ee17 2a90 	vmov	r2, s15
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80085ac:	4b13      	ldr	r3, [pc, #76]	@ (80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	0e1b      	lsrs	r3, r3, #24
 80085b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d2:	ee17 2a90 	vmov	r2, s15
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085da:	e008      	b.n	80085ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	609a      	str	r2, [r3, #8]
}
 80085ee:	bf00      	nop
 80085f0:	3724      	adds	r7, #36	@ 0x24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	03d09000 	.word	0x03d09000
 8008604:	46000000 	.word	0x46000000
 8008608:	4c742400 	.word	0x4c742400
 800860c:	4a742400 	.word	0x4a742400
 8008610:	4af42400 	.word	0x4af42400

08008614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008614:	b480      	push	{r7}
 8008616:	b089      	sub	sp, #36	@ 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800861c:	4ba1      	ldr	r3, [pc, #644]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008626:	4b9f      	ldr	r3, [pc, #636]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	0d1b      	lsrs	r3, r3, #20
 800862c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008630:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008632:	4b9c      	ldr	r3, [pc, #624]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800863e:	4b99      	ldr	r3, [pc, #612]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008642:	08db      	lsrs	r3, r3, #3
 8008644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	fb02 f303 	mul.w	r3, r2, r3
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8111 	beq.w	8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b02      	cmp	r3, #2
 8008666:	f000 8083 	beq.w	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b02      	cmp	r3, #2
 800866e:	f200 80a1 	bhi.w	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d056      	beq.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800867e:	e099      	b.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008680:	4b88      	ldr	r3, [pc, #544]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02d      	beq.n	80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800868c:	4b85      	ldr	r3, [pc, #532]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	08db      	lsrs	r3, r3, #3
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	4a84      	ldr	r2, [pc, #528]	@ (80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b7b      	ldr	r3, [pc, #492]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086e6:	e087      	b.n	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b6a      	ldr	r3, [pc, #424]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872a:	e065      	b.n	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b59      	ldr	r3, [pc, #356]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876e:	e043      	b.n	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b48      	ldr	r3, [pc, #288]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	e021      	b.n	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b37      	ldr	r3, [pc, #220]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087f8:	4b2a      	ldr	r3, [pc, #168]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	0a5b      	lsrs	r3, r3, #9
 80087fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800880e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008812:	edd7 6a07 	vldr	s13, [r7, #28]
 8008816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800881e:	ee17 2a90 	vmov	r2, s15
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008826:	4b1f      	ldr	r3, [pc, #124]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882a:	0c1b      	lsrs	r3, r3, #16
 800882c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800883c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008840:	edd7 6a07 	vldr	s13, [r7, #28]
 8008844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884c:	ee17 2a90 	vmov	r2, s15
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008854:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008858:	0e1b      	lsrs	r3, r3, #24
 800885a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800886a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887a:	ee17 2a90 	vmov	r2, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008882:	e008      	b.n	8008896 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	609a      	str	r2, [r3, #8]
}
 8008896:	bf00      	nop
 8008898:	3724      	adds	r7, #36	@ 0x24
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	58024400 	.word	0x58024400
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	46000000 	.word	0x46000000
 80088b0:	4c742400 	.word	0x4c742400
 80088b4:	4a742400 	.word	0x4a742400
 80088b8:	4af42400 	.word	0x4af42400

080088bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ca:	4b53      	ldr	r3, [pc, #332]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d101      	bne.n	80088da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e099      	b.n	8008a0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088da:	4b4f      	ldr	r3, [pc, #316]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a4e      	ldr	r2, [pc, #312]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80088e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e6:	f7f9 fbef 	bl	80020c8 <HAL_GetTick>
 80088ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088ec:	e008      	b.n	8008900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088ee:	f7f9 fbeb 	bl	80020c8 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e086      	b.n	8008a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008900:	4b45      	ldr	r3, [pc, #276]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f0      	bne.n	80088ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800890c:	4b42      	ldr	r3, [pc, #264]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	031b      	lsls	r3, r3, #12
 800891a:	493f      	ldr	r1, [pc, #252]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 800891c:	4313      	orrs	r3, r2
 800891e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3b01      	subs	r3, #1
 8008926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	025b      	lsls	r3, r3, #9
 8008932:	b29b      	uxth	r3, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	3b01      	subs	r3, #1
 800893c:	041b      	lsls	r3, r3, #16
 800893e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	3b01      	subs	r3, #1
 800894a:	061b      	lsls	r3, r3, #24
 800894c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008950:	4931      	ldr	r1, [pc, #196]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008956:	4b30      	ldr	r3, [pc, #192]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	492d      	ldr	r1, [pc, #180]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008964:	4313      	orrs	r3, r2
 8008966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008968:	4b2b      	ldr	r3, [pc, #172]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	f023 0220 	bic.w	r2, r3, #32
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	4928      	ldr	r1, [pc, #160]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008976:	4313      	orrs	r3, r2
 8008978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800897a:	4b27      	ldr	r3, [pc, #156]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 800897c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897e:	4a26      	ldr	r2, [pc, #152]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008980:	f023 0310 	bic.w	r3, r3, #16
 8008984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008986:	4b24      	ldr	r3, [pc, #144]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800898a:	4b24      	ldr	r3, [pc, #144]	@ (8008a1c <RCCEx_PLL2_Config+0x160>)
 800898c:	4013      	ands	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	69d2      	ldr	r2, [r2, #28]
 8008992:	00d2      	lsls	r2, r2, #3
 8008994:	4920      	ldr	r1, [pc, #128]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800899a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	4a1e      	ldr	r2, [pc, #120]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089a0:	f043 0310 	orr.w	r3, r3, #16
 80089a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	4a19      	ldr	r2, [pc, #100]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089b8:	e00f      	b.n	80089da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d106      	bne.n	80089ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089c0:	4b15      	ldr	r3, [pc, #84]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c4:	4a14      	ldr	r2, [pc, #80]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089cc:	e005      	b.n	80089da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089ce:	4b12      	ldr	r3, [pc, #72]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	4a11      	ldr	r2, [pc, #68]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089da:	4b0f      	ldr	r3, [pc, #60]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a0e      	ldr	r2, [pc, #56]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 80089e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e6:	f7f9 fb6f 	bl	80020c8 <HAL_GetTick>
 80089ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089ec:	e008      	b.n	8008a00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089ee:	f7f9 fb6b 	bl	80020c8 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e006      	b.n	8008a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a00:	4b05      	ldr	r3, [pc, #20]	@ (8008a18 <RCCEx_PLL2_Config+0x15c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0f0      	beq.n	80089ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	ffff0007 	.word	0xffff0007

08008a20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a2e:	4b53      	ldr	r3, [pc, #332]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d101      	bne.n	8008a3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e099      	b.n	8008b72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4e      	ldr	r2, [pc, #312]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4a:	f7f9 fb3d 	bl	80020c8 <HAL_GetTick>
 8008a4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a50:	e008      	b.n	8008a64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a52:	f7f9 fb39 	bl	80020c8 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e086      	b.n	8008b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a64:	4b45      	ldr	r3, [pc, #276]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f0      	bne.n	8008a52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a70:	4b42      	ldr	r3, [pc, #264]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	051b      	lsls	r3, r3, #20
 8008a7e:	493f      	ldr	r1, [pc, #252]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	025b      	lsls	r3, r3, #9
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ab4:	4931      	ldr	r1, [pc, #196]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aba:	4b30      	ldr	r3, [pc, #192]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	492d      	ldr	r1, [pc, #180]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008acc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	4928      	ldr	r1, [pc, #160]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ade:	4b27      	ldr	r3, [pc, #156]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008aea:	4b24      	ldr	r3, [pc, #144]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aee:	4b24      	ldr	r3, [pc, #144]	@ (8008b80 <RCCEx_PLL3_Config+0x160>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	69d2      	ldr	r2, [r2, #28]
 8008af6:	00d2      	lsls	r2, r2, #3
 8008af8:	4920      	ldr	r1, [pc, #128]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008afe:	4b1f      	ldr	r3, [pc, #124]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	4a1e      	ldr	r2, [pc, #120]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b10:	4b1a      	ldr	r3, [pc, #104]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b14:	4a19      	ldr	r2, [pc, #100]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b1c:	e00f      	b.n	8008b3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b24:	4b15      	ldr	r3, [pc, #84]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	4a14      	ldr	r2, [pc, #80]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b30:	e005      	b.n	8008b3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b32:	4b12      	ldr	r3, [pc, #72]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	4a11      	ldr	r2, [pc, #68]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a0e      	ldr	r2, [pc, #56]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b4a:	f7f9 fabd 	bl	80020c8 <HAL_GetTick>
 8008b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b50:	e008      	b.n	8008b64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b52:	f7f9 fab9 	bl	80020c8 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e006      	b.n	8008b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b64:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <RCCEx_PLL3_Config+0x15c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	ffff0007 	.word	0xffff0007

08008b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e049      	b.n	8008c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f841 	bl	8008c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f000 f9e8 	bl	8008f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d001      	beq.n	8008c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e054      	b.n	8008d0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a26      	ldr	r2, [pc, #152]	@ (8008d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d022      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8a:	d01d      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d018      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	@ (8008d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1e      	ldr	r2, [pc, #120]	@ (8008d28 <HAL_TIM_Base_Start_IT+0xe0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d2c <HAL_TIM_Base_Start_IT+0xe4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d004      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x80>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xe8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d115      	bne.n	8008cf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	4b19      	ldr	r3, [pc, #100]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xec>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b06      	cmp	r3, #6
 8008cd8:	d015      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0xbe>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce0:	d011      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	e008      	b.n	8008d06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	40000c00 	.word	0x40000c00
 8008d28:	40010400 	.word	0x40010400
 8008d2c:	40001800 	.word	0x40001800
 8008d30:	40014000 	.word	0x40014000
 8008d34:	00010007 	.word	0x00010007

08008d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d020      	beq.n	8008d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0202 	mvn.w	r2, #2
 8008d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f8e9 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f8db 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8ec 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d020      	beq.n	8008de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01b      	beq.n	8008de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0204 	mvn.w	r2, #4
 8008db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8c3 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008dd4:	e005      	b.n	8008de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f8b5 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8c6 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d020      	beq.n	8008e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01b      	beq.n	8008e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0208 	mvn.w	r2, #8
 8008e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2204      	movs	r2, #4
 8008e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f89d 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f88f 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8a0 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 0310 	and.w	r3, r3, #16
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d020      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0210 	mvn.w	r2, #16
 8008e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2208      	movs	r2, #8
 8008e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f877 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008e6c:	e005      	b.n	8008e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f869 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f87a 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00c      	beq.n	8008ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0201 	mvn.w	r2, #1
 8008e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7f8 fb2c 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00c      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f913 	bl	80090f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00c      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f90b 	bl	800910c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00c      	beq.n	8008f1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d007      	beq.n	8008f1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f834 	bl	8008f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00c      	beq.n	8008f3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f06f 0220 	mvn.w	r2, #32
 8008f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8d3 	bl	80090e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a46      	ldr	r2, [pc, #280]	@ (80090c4 <TIM_Base_SetConfig+0x12c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d013      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb6:	d00f      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a43      	ldr	r2, [pc, #268]	@ (80090c8 <TIM_Base_SetConfig+0x130>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00b      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a42      	ldr	r2, [pc, #264]	@ (80090cc <TIM_Base_SetConfig+0x134>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d007      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a41      	ldr	r2, [pc, #260]	@ (80090d0 <TIM_Base_SetConfig+0x138>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a40      	ldr	r2, [pc, #256]	@ (80090d4 <TIM_Base_SetConfig+0x13c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d108      	bne.n	8008fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a35      	ldr	r2, [pc, #212]	@ (80090c4 <TIM_Base_SetConfig+0x12c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d01f      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff8:	d01b      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a32      	ldr	r2, [pc, #200]	@ (80090c8 <TIM_Base_SetConfig+0x130>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d017      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a31      	ldr	r2, [pc, #196]	@ (80090cc <TIM_Base_SetConfig+0x134>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d013      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a30      	ldr	r2, [pc, #192]	@ (80090d0 <TIM_Base_SetConfig+0x138>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00f      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a2f      	ldr	r2, [pc, #188]	@ (80090d4 <TIM_Base_SetConfig+0x13c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00b      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2e      	ldr	r2, [pc, #184]	@ (80090d8 <TIM_Base_SetConfig+0x140>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d007      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2d      	ldr	r2, [pc, #180]	@ (80090dc <TIM_Base_SetConfig+0x144>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d003      	beq.n	8009032 <TIM_Base_SetConfig+0x9a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2c      	ldr	r2, [pc, #176]	@ (80090e0 <TIM_Base_SetConfig+0x148>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d108      	bne.n	8009044 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a16      	ldr	r2, [pc, #88]	@ (80090c4 <TIM_Base_SetConfig+0x12c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00f      	beq.n	8009090 <TIM_Base_SetConfig+0xf8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a18      	ldr	r2, [pc, #96]	@ (80090d4 <TIM_Base_SetConfig+0x13c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00b      	beq.n	8009090 <TIM_Base_SetConfig+0xf8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a17      	ldr	r2, [pc, #92]	@ (80090d8 <TIM_Base_SetConfig+0x140>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d007      	beq.n	8009090 <TIM_Base_SetConfig+0xf8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a16      	ldr	r2, [pc, #88]	@ (80090dc <TIM_Base_SetConfig+0x144>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_Base_SetConfig+0xf8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a15      	ldr	r2, [pc, #84]	@ (80090e0 <TIM_Base_SetConfig+0x148>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d103      	bne.n	8009098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d105      	bne.n	80090b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	f023 0201 	bic.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]
  }
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800

080090e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e042      	b.n	80091b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7f8 fdbf 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2224      	movs	r2, #36	@ 0x24
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 faea 	bl	800a744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fd7f 	bl	8009c74 <UART_SetConfig>
 8009176:	4603      	mov	r3, r0
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e01b      	b.n	80091b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800918e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800919e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fb69 	bl	800a888 <UART_CheckIdleState>
 80091b6:	4603      	mov	r3, r0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d167      	bne.n	80092a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_UART_Transmit_DMA+0x24>
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e060      	b.n	80092aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	88fa      	ldrh	r2, [r7, #6]
 80091f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2221      	movs	r2, #33	@ 0x21
 800920a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d028      	beq.n	8009268 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800921a:	4a26      	ldr	r2, [pc, #152]	@ (80092b4 <HAL_UART_Transmit_DMA+0xf4>)
 800921c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009222:	4a25      	ldr	r2, [pc, #148]	@ (80092b8 <HAL_UART_Transmit_DMA+0xf8>)
 8009224:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800922a:	4a24      	ldr	r2, [pc, #144]	@ (80092bc <HAL_UART_Transmit_DMA+0xfc>)
 800922c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009232:	2200      	movs	r2, #0
 8009234:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800923e:	4619      	mov	r1, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3328      	adds	r3, #40	@ 0x28
 8009246:	461a      	mov	r2, r3
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	f7f9 fbc9 	bl	80029e0 <HAL_DMA_Start_IT>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d009      	beq.n	8009268 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2210      	movs	r2, #16
 8009258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e020      	b.n	80092aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2240      	movs	r2, #64	@ 0x40
 800926e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3308      	adds	r3, #8
 8009276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	613b      	str	r3, [r7, #16]
   return(result);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009290:	623a      	str	r2, [r7, #32]
 8009292:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	69f9      	ldr	r1, [r7, #28]
 8009296:	6a3a      	ldr	r2, [r7, #32]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	61bb      	str	r3, [r7, #24]
   return(result);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e5      	bne.n	8009270 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e000      	b.n	80092aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80092a8:	2302      	movs	r3, #2
  }
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3728      	adds	r7, #40	@ 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	0800ad55 	.word	0x0800ad55
 80092b8:	0800adeb 	.word	0x0800adeb
 80092bc:	0800af6d 	.word	0x0800af6d

080092c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	@ 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	4613      	mov	r3, r2
 80092cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d137      	bne.n	8009348 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_UART_Receive_DMA+0x24>
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e030      	b.n	800934a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a18      	ldr	r2, [pc, #96]	@ (8009354 <HAL_UART_Receive_DMA+0x94>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d01f      	beq.n	8009338 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d018      	beq.n	8009338 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800931a:	627b      	str	r3, [r7, #36]	@ 0x24
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	69f9      	ldr	r1, [r7, #28]
 800932a:	6a3a      	ldr	r2, [r7, #32]
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	61bb      	str	r3, [r7, #24]
   return(result);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e6      	bne.n	8009306 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	461a      	mov	r2, r3
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f001 fbba 	bl	800aab8 <UART_Start_Receive_DMA>
 8009344:	4603      	mov	r3, r0
 8009346:	e000      	b.n	800934a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3728      	adds	r7, #40	@ 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	58000c00 	.word	0x58000c00

08009358 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b090      	sub	sp, #64	@ 0x40
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800936e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d139      	bne.n	80093f2 <HAL_UART_DMAStop+0x9a>
 800937e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009380:	2b21      	cmp	r3, #33	@ 0x21
 8009382:	d136      	bne.n	80093f2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3308      	adds	r3, #8
 80093a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e5      	bne.n	8009384 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d015      	beq.n	80093ec <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7f9 fd75 	bl	8002eb4 <HAL_DMA_Abort>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00d      	beq.n	80093ec <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fb f9fb 	bl	80047d0 <HAL_DMA_GetError>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d105      	bne.n	80093ec <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2210      	movs	r2, #16
 80093e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e047      	b.n	800947c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fc09 	bl	800ac04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fc:	2b40      	cmp	r3, #64	@ 0x40
 80093fe:	d13c      	bne.n	800947a <HAL_UART_DMAStop+0x122>
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	2b22      	cmp	r3, #34	@ 0x22
 8009404:	d139      	bne.n	800947a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	60bb      	str	r3, [r7, #8]
   return(result);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800941c:	633b      	str	r3, [r7, #48]	@ 0x30
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009426:	61ba      	str	r2, [r7, #24]
 8009428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	613b      	str	r3, [r7, #16]
   return(result);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009440:	2b00      	cmp	r3, #0
 8009442:	d017      	beq.n	8009474 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944a:	4618      	mov	r0, r3
 800944c:	f7f9 fd32 	bl	8002eb4 <HAL_DMA_Abort>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00e      	beq.n	8009474 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800945c:	4618      	mov	r0, r3
 800945e:	f7fb f9b7 	bl	80047d0 <HAL_DMA_GetError>
 8009462:	4603      	mov	r3, r0
 8009464:	2b20      	cmp	r3, #32
 8009466:	d105      	bne.n	8009474 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2210      	movs	r2, #16
 800946c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e003      	b.n	800947c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fc07 	bl	800ac88 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3740      	adds	r7, #64	@ 0x40
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b0ba      	sub	sp, #232	@ 0xe8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80094ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094b2:	4013      	ands	r3, r2
 80094b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d11b      	bne.n	80094f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8377 	beq.w	8009bdc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
      }
      return;
 80094f6:	e371      	b.n	8009bdc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8123 	beq.w	8009748 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009502:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009506:	4b8d      	ldr	r3, [pc, #564]	@ (800973c <HAL_UART_IRQHandler+0x2b8>)
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800950e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009512:	4b8b      	ldr	r3, [pc, #556]	@ (8009740 <HAL_UART_IRQHandler+0x2bc>)
 8009514:	4013      	ands	r3, r2
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8116 	beq.w	8009748 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	d011      	beq.n	800954c <HAL_UART_IRQHandler+0xc8>
 8009528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800952c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2201      	movs	r2, #1
 800953a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009542:	f043 0201 	orr.w	r2, r3, #1
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d011      	beq.n	800957c <HAL_UART_IRQHandler+0xf8>
 8009558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00b      	beq.n	800957c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2202      	movs	r2, #2
 800956a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009572:	f043 0204 	orr.w	r2, r3, #4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d011      	beq.n	80095ac <HAL_UART_IRQHandler+0x128>
 8009588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2204      	movs	r2, #4
 800959a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a2:	f043 0202 	orr.w	r2, r3, #2
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d017      	beq.n	80095e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095c8:	4b5c      	ldr	r3, [pc, #368]	@ (800973c <HAL_UART_IRQHandler+0x2b8>)
 80095ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2208      	movs	r2, #8
 80095d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095de:	f043 0208 	orr.w	r2, r3, #8
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d012      	beq.n	800961a <HAL_UART_IRQHandler+0x196>
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00c      	beq.n	800961a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009610:	f043 0220 	orr.w	r2, r3, #32
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 82dd 	beq.w	8009be0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d013      	beq.n	800965a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800963e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009660:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966e:	2b40      	cmp	r3, #64	@ 0x40
 8009670:	d005      	beq.n	800967e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009676:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800967a:	2b00      	cmp	r3, #0
 800967c:	d054      	beq.n	8009728 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fb02 	bl	800ac88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d146      	bne.n	8009720 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1d9      	bne.n	8009692 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d017      	beq.n	8009718 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ee:	4a15      	ldr	r2, [pc, #84]	@ (8009744 <HAL_UART_IRQHandler+0x2c0>)
 80096f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 fef9 	bl	80034f0 <HAL_DMA_Abort_IT>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d019      	beq.n	8009738 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009712:	4610      	mov	r0, r2
 8009714:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009716:	e00f      	b.n	8009738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fa95 	bl	8009c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971e:	e00b      	b.n	8009738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fa91 	bl	8009c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009726:	e007      	b.n	8009738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fa8d 	bl	8009c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009736:	e253      	b.n	8009be0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009738:	bf00      	nop
    return;
 800973a:	e251      	b.n	8009be0 <HAL_UART_IRQHandler+0x75c>
 800973c:	10000001 	.word	0x10000001
 8009740:	04000120 	.word	0x04000120
 8009744:	0800afed 	.word	0x0800afed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800974c:	2b01      	cmp	r3, #1
 800974e:	f040 81e7 	bne.w	8009b20 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 81e0 	beq.w	8009b20 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 81d9 	beq.w	8009b20 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2210      	movs	r2, #16
 8009774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009780:	2b40      	cmp	r3, #64	@ 0x40
 8009782:	f040 8151 	bne.w	8009a28 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a96      	ldr	r2, [pc, #600]	@ (80099e8 <HAL_UART_IRQHandler+0x564>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d068      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a93      	ldr	r2, [pc, #588]	@ (80099ec <HAL_UART_IRQHandler+0x568>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d061      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a91      	ldr	r2, [pc, #580]	@ (80099f0 <HAL_UART_IRQHandler+0x56c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d05a      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a8e      	ldr	r2, [pc, #568]	@ (80099f4 <HAL_UART_IRQHandler+0x570>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d053      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a8c      	ldr	r2, [pc, #560]	@ (80099f8 <HAL_UART_IRQHandler+0x574>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d04c      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a89      	ldr	r2, [pc, #548]	@ (80099fc <HAL_UART_IRQHandler+0x578>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d045      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a87      	ldr	r2, [pc, #540]	@ (8009a00 <HAL_UART_IRQHandler+0x57c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d03e      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a84      	ldr	r2, [pc, #528]	@ (8009a04 <HAL_UART_IRQHandler+0x580>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d037      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a82      	ldr	r2, [pc, #520]	@ (8009a08 <HAL_UART_IRQHandler+0x584>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d030      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a7f      	ldr	r2, [pc, #508]	@ (8009a0c <HAL_UART_IRQHandler+0x588>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d029      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a7d      	ldr	r2, [pc, #500]	@ (8009a10 <HAL_UART_IRQHandler+0x58c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d022      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a7a      	ldr	r2, [pc, #488]	@ (8009a14 <HAL_UART_IRQHandler+0x590>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d01b      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a78      	ldr	r2, [pc, #480]	@ (8009a18 <HAL_UART_IRQHandler+0x594>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d014      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a75      	ldr	r2, [pc, #468]	@ (8009a1c <HAL_UART_IRQHandler+0x598>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00d      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a73      	ldr	r2, [pc, #460]	@ (8009a20 <HAL_UART_IRQHandler+0x59c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d006      	beq.n	8009866 <HAL_UART_IRQHandler+0x3e2>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a70      	ldr	r2, [pc, #448]	@ (8009a24 <HAL_UART_IRQHandler+0x5a0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d106      	bne.n	8009874 <HAL_UART_IRQHandler+0x3f0>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	b29b      	uxth	r3, r3
 8009872:	e005      	b.n	8009880 <HAL_UART_IRQHandler+0x3fc>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	b29b      	uxth	r3, r3
 8009880:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 81ab 	beq.w	8009be4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009898:	429a      	cmp	r2, r3
 800989a:	f080 81a3 	bcs.w	8009be4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b4:	f000 8087 	beq.w	80099c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1da      	bne.n	80098b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009926:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800992a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800992e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e1      	bne.n	8009902 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800994e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3308      	adds	r3, #8
 800995e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009964:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009968:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e3      	bne.n	800993e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009994:	f023 0310 	bic.w	r3, r3, #16
 8009998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e4      	bne.n	8009984 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f9 fa77 	bl	8002eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2202      	movs	r2, #2
 80099ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	b29b      	uxth	r3, r3
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f93b 	bl	8009c5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099e6:	e0fd      	b.n	8009be4 <HAL_UART_IRQHandler+0x760>
 80099e8:	40020010 	.word	0x40020010
 80099ec:	40020028 	.word	0x40020028
 80099f0:	40020040 	.word	0x40020040
 80099f4:	40020058 	.word	0x40020058
 80099f8:	40020070 	.word	0x40020070
 80099fc:	40020088 	.word	0x40020088
 8009a00:	400200a0 	.word	0x400200a0
 8009a04:	400200b8 	.word	0x400200b8
 8009a08:	40020410 	.word	0x40020410
 8009a0c:	40020428 	.word	0x40020428
 8009a10:	40020440 	.word	0x40020440
 8009a14:	40020458 	.word	0x40020458
 8009a18:	40020470 	.word	0x40020470
 8009a1c:	40020488 	.word	0x40020488
 8009a20:	400204a0 	.word	0x400204a0
 8009a24:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80cf 	beq.w	8009be8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80ca 	beq.w	8009be8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9a:	6a3a      	ldr	r2, [r7, #32]
 8009a9c:	4b55      	ldr	r3, [pc, #340]	@ (8009bf4 <HAL_UART_IRQHandler+0x770>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e3      	bne.n	8009a8a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	69b9      	ldr	r1, [r7, #24]
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	617b      	str	r3, [r7, #20]
   return(result);
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e4      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f89f 	bl	8009c5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b1e:	e063      	b.n	8009be8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00e      	beq.n	8009b4a <HAL_UART_IRQHandler+0x6c6>
 8009b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fa93 	bl	800b06e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b48:	e051      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d014      	beq.n	8009b80 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d03a      	beq.n	8009bec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	4798      	blx	r3
    }
    return;
 8009b7e:	e035      	b.n	8009bec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x71c>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 fa3d 	bl	800b018 <UART_EndTransmit_IT>
    return;
 8009b9e:	e026      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d009      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x73c>
 8009bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 fa6c 	bl	800b096 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bbe:	e016      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d010      	beq.n	8009bee <HAL_UART_IRQHandler+0x76a>
 8009bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da0c      	bge.n	8009bee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fa54 	bl	800b082 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bda:	e008      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
      return;
 8009bdc:	bf00      	nop
 8009bde:	e006      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
    return;
 8009be0:	bf00      	nop
 8009be2:	e004      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
      return;
 8009be4:	bf00      	nop
 8009be6:	e002      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
      return;
 8009be8:	bf00      	nop
 8009bea:	e000      	b.n	8009bee <HAL_UART_IRQHandler+0x76a>
    return;
 8009bec:	bf00      	nop
  }
}
 8009bee:	37e8      	adds	r7, #232	@ 0xe8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	effffffe 	.word	0xeffffffe

08009bf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c78:	b092      	sub	sp, #72	@ 0x48
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4bbe      	ldr	r3, [pc, #760]	@ (8009f9c <UART_SetConfig+0x328>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cac:	430b      	orrs	r3, r1
 8009cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4ab3      	ldr	r2, [pc, #716]	@ (8009fa0 <UART_SetConfig+0x32c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d004      	beq.n	8009ce0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	4baf      	ldr	r3, [pc, #700]	@ (8009fa4 <UART_SetConfig+0x330>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cf0:	430b      	orrs	r3, r1
 8009cf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfa:	f023 010f 	bic.w	r1, r3, #15
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4aa6      	ldr	r2, [pc, #664]	@ (8009fa8 <UART_SetConfig+0x334>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d177      	bne.n	8009e04 <UART_SetConfig+0x190>
 8009d14:	4ba5      	ldr	r3, [pc, #660]	@ (8009fac <UART_SetConfig+0x338>)
 8009d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d1c:	2b28      	cmp	r3, #40	@ 0x28
 8009d1e:	d86d      	bhi.n	8009dfc <UART_SetConfig+0x188>
 8009d20:	a201      	add	r2, pc, #4	@ (adr r2, 8009d28 <UART_SetConfig+0xb4>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009dcd 	.word	0x08009dcd
 8009d2c:	08009dfd 	.word	0x08009dfd
 8009d30:	08009dfd 	.word	0x08009dfd
 8009d34:	08009dfd 	.word	0x08009dfd
 8009d38:	08009dfd 	.word	0x08009dfd
 8009d3c:	08009dfd 	.word	0x08009dfd
 8009d40:	08009dfd 	.word	0x08009dfd
 8009d44:	08009dfd 	.word	0x08009dfd
 8009d48:	08009dd5 	.word	0x08009dd5
 8009d4c:	08009dfd 	.word	0x08009dfd
 8009d50:	08009dfd 	.word	0x08009dfd
 8009d54:	08009dfd 	.word	0x08009dfd
 8009d58:	08009dfd 	.word	0x08009dfd
 8009d5c:	08009dfd 	.word	0x08009dfd
 8009d60:	08009dfd 	.word	0x08009dfd
 8009d64:	08009dfd 	.word	0x08009dfd
 8009d68:	08009ddd 	.word	0x08009ddd
 8009d6c:	08009dfd 	.word	0x08009dfd
 8009d70:	08009dfd 	.word	0x08009dfd
 8009d74:	08009dfd 	.word	0x08009dfd
 8009d78:	08009dfd 	.word	0x08009dfd
 8009d7c:	08009dfd 	.word	0x08009dfd
 8009d80:	08009dfd 	.word	0x08009dfd
 8009d84:	08009dfd 	.word	0x08009dfd
 8009d88:	08009de5 	.word	0x08009de5
 8009d8c:	08009dfd 	.word	0x08009dfd
 8009d90:	08009dfd 	.word	0x08009dfd
 8009d94:	08009dfd 	.word	0x08009dfd
 8009d98:	08009dfd 	.word	0x08009dfd
 8009d9c:	08009dfd 	.word	0x08009dfd
 8009da0:	08009dfd 	.word	0x08009dfd
 8009da4:	08009dfd 	.word	0x08009dfd
 8009da8:	08009ded 	.word	0x08009ded
 8009dac:	08009dfd 	.word	0x08009dfd
 8009db0:	08009dfd 	.word	0x08009dfd
 8009db4:	08009dfd 	.word	0x08009dfd
 8009db8:	08009dfd 	.word	0x08009dfd
 8009dbc:	08009dfd 	.word	0x08009dfd
 8009dc0:	08009dfd 	.word	0x08009dfd
 8009dc4:	08009dfd 	.word	0x08009dfd
 8009dc8:	08009df5 	.word	0x08009df5
 8009dcc:	2301      	movs	r3, #1
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e222      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009dd4:	2304      	movs	r3, #4
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e21e      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009ddc:	2308      	movs	r3, #8
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e21a      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009de4:	2310      	movs	r3, #16
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e216      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009dec:	2320      	movs	r3, #32
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e212      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009df4:	2340      	movs	r3, #64	@ 0x40
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e20e      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009dfc:	2380      	movs	r3, #128	@ 0x80
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e20a      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a69      	ldr	r2, [pc, #420]	@ (8009fb0 <UART_SetConfig+0x33c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d130      	bne.n	8009e70 <UART_SetConfig+0x1fc>
 8009e0e:	4b67      	ldr	r3, [pc, #412]	@ (8009fac <UART_SetConfig+0x338>)
 8009e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b05      	cmp	r3, #5
 8009e18:	d826      	bhi.n	8009e68 <UART_SetConfig+0x1f4>
 8009e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e20 <UART_SetConfig+0x1ac>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e39 	.word	0x08009e39
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e49 	.word	0x08009e49
 8009e2c:	08009e51 	.word	0x08009e51
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e1ec      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e40:	2304      	movs	r3, #4
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e1e8      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e48:	2308      	movs	r3, #8
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e1e4      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e50:	2310      	movs	r3, #16
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e1e0      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e58:	2320      	movs	r3, #32
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e1dc      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e60:	2340      	movs	r3, #64	@ 0x40
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e1d8      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e68:	2380      	movs	r3, #128	@ 0x80
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e1d4      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a4f      	ldr	r2, [pc, #316]	@ (8009fb4 <UART_SetConfig+0x340>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d130      	bne.n	8009edc <UART_SetConfig+0x268>
 8009e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8009fac <UART_SetConfig+0x338>)
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7e:	f003 0307 	and.w	r3, r3, #7
 8009e82:	2b05      	cmp	r3, #5
 8009e84:	d826      	bhi.n	8009ed4 <UART_SetConfig+0x260>
 8009e86:	a201      	add	r2, pc, #4	@ (adr r2, 8009e8c <UART_SetConfig+0x218>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009ea5 	.word	0x08009ea5
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	08009eb5 	.word	0x08009eb5
 8009e98:	08009ebd 	.word	0x08009ebd
 8009e9c:	08009ec5 	.word	0x08009ec5
 8009ea0:	08009ecd 	.word	0x08009ecd
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e1b6      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009eac:	2304      	movs	r3, #4
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e1b2      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e1ae      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e1aa      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e1a6      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009ecc:	2340      	movs	r3, #64	@ 0x40
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e1a2      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009ed4:	2380      	movs	r3, #128	@ 0x80
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e19e      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a35      	ldr	r2, [pc, #212]	@ (8009fb8 <UART_SetConfig+0x344>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d130      	bne.n	8009f48 <UART_SetConfig+0x2d4>
 8009ee6:	4b31      	ldr	r3, [pc, #196]	@ (8009fac <UART_SetConfig+0x338>)
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d826      	bhi.n	8009f40 <UART_SetConfig+0x2cc>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <UART_SetConfig+0x284>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f11 	.word	0x08009f11
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f21 	.word	0x08009f21
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f39 	.word	0x08009f39
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e180      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e17c      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f20:	2308      	movs	r3, #8
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e178      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e174      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f30:	2320      	movs	r3, #32
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e170      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f38:	2340      	movs	r3, #64	@ 0x40
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e16c      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f40:	2380      	movs	r3, #128	@ 0x80
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e168      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fbc <UART_SetConfig+0x348>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d142      	bne.n	8009fd8 <UART_SetConfig+0x364>
 8009f52:	4b16      	ldr	r3, [pc, #88]	@ (8009fac <UART_SetConfig+0x338>)
 8009f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d838      	bhi.n	8009fd0 <UART_SetConfig+0x35c>
 8009f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <UART_SetConfig+0x2f0>)
 8009f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f64:	08009f7d 	.word	0x08009f7d
 8009f68:	08009f85 	.word	0x08009f85
 8009f6c:	08009f8d 	.word	0x08009f8d
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009fc1 	.word	0x08009fc1
 8009f78:	08009fc9 	.word	0x08009fc9
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e14a      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e146      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e142      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e13e      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009f9c:	cfff69f3 	.word	0xcfff69f3
 8009fa0:	58000c00 	.word	0x58000c00
 8009fa4:	11fff4ff 	.word	0x11fff4ff
 8009fa8:	40011000 	.word	0x40011000
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	40004400 	.word	0x40004400
 8009fb4:	40004800 	.word	0x40004800
 8009fb8:	40004c00 	.word	0x40004c00
 8009fbc:	40005000 	.word	0x40005000
 8009fc0:	2320      	movs	r3, #32
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc6:	e128      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009fc8:	2340      	movs	r3, #64	@ 0x40
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e124      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009fd0:	2380      	movs	r3, #128	@ 0x80
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e120      	b.n	800a21a <UART_SetConfig+0x5a6>
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4acb      	ldr	r2, [pc, #812]	@ (800a30c <UART_SetConfig+0x698>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d176      	bne.n	800a0d0 <UART_SetConfig+0x45c>
 8009fe2:	4bcb      	ldr	r3, [pc, #812]	@ (800a310 <UART_SetConfig+0x69c>)
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fea:	2b28      	cmp	r3, #40	@ 0x28
 8009fec:	d86c      	bhi.n	800a0c8 <UART_SetConfig+0x454>
 8009fee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff4 <UART_SetConfig+0x380>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a099 	.word	0x0800a099
 8009ff8:	0800a0c9 	.word	0x0800a0c9
 8009ffc:	0800a0c9 	.word	0x0800a0c9
 800a000:	0800a0c9 	.word	0x0800a0c9
 800a004:	0800a0c9 	.word	0x0800a0c9
 800a008:	0800a0c9 	.word	0x0800a0c9
 800a00c:	0800a0c9 	.word	0x0800a0c9
 800a010:	0800a0c9 	.word	0x0800a0c9
 800a014:	0800a0a1 	.word	0x0800a0a1
 800a018:	0800a0c9 	.word	0x0800a0c9
 800a01c:	0800a0c9 	.word	0x0800a0c9
 800a020:	0800a0c9 	.word	0x0800a0c9
 800a024:	0800a0c9 	.word	0x0800a0c9
 800a028:	0800a0c9 	.word	0x0800a0c9
 800a02c:	0800a0c9 	.word	0x0800a0c9
 800a030:	0800a0c9 	.word	0x0800a0c9
 800a034:	0800a0a9 	.word	0x0800a0a9
 800a038:	0800a0c9 	.word	0x0800a0c9
 800a03c:	0800a0c9 	.word	0x0800a0c9
 800a040:	0800a0c9 	.word	0x0800a0c9
 800a044:	0800a0c9 	.word	0x0800a0c9
 800a048:	0800a0c9 	.word	0x0800a0c9
 800a04c:	0800a0c9 	.word	0x0800a0c9
 800a050:	0800a0c9 	.word	0x0800a0c9
 800a054:	0800a0b1 	.word	0x0800a0b1
 800a058:	0800a0c9 	.word	0x0800a0c9
 800a05c:	0800a0c9 	.word	0x0800a0c9
 800a060:	0800a0c9 	.word	0x0800a0c9
 800a064:	0800a0c9 	.word	0x0800a0c9
 800a068:	0800a0c9 	.word	0x0800a0c9
 800a06c:	0800a0c9 	.word	0x0800a0c9
 800a070:	0800a0c9 	.word	0x0800a0c9
 800a074:	0800a0b9 	.word	0x0800a0b9
 800a078:	0800a0c9 	.word	0x0800a0c9
 800a07c:	0800a0c9 	.word	0x0800a0c9
 800a080:	0800a0c9 	.word	0x0800a0c9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0c9 	.word	0x0800a0c9
 800a08c:	0800a0c9 	.word	0x0800a0c9
 800a090:	0800a0c9 	.word	0x0800a0c9
 800a094:	0800a0c1 	.word	0x0800a0c1
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e0bc      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e0b8      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e0b4      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e0b0      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e0ac      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0c0:	2340      	movs	r3, #64	@ 0x40
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e0a8      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0c8:	2380      	movs	r3, #128	@ 0x80
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ce:	e0a4      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a8f      	ldr	r2, [pc, #572]	@ (800a314 <UART_SetConfig+0x6a0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d130      	bne.n	800a13c <UART_SetConfig+0x4c8>
 800a0da:	4b8d      	ldr	r3, [pc, #564]	@ (800a310 <UART_SetConfig+0x69c>)
 800a0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0de:	f003 0307 	and.w	r3, r3, #7
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	d826      	bhi.n	800a134 <UART_SetConfig+0x4c0>
 800a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <UART_SetConfig+0x478>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a105 	.word	0x0800a105
 800a0f0:	0800a10d 	.word	0x0800a10d
 800a0f4:	0800a115 	.word	0x0800a115
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a125 	.word	0x0800a125
 800a100:	0800a12d 	.word	0x0800a12d
 800a104:	2300      	movs	r3, #0
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e086      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a10c:	2304      	movs	r3, #4
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e082      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a114:	2308      	movs	r3, #8
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e07e      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a11c:	2310      	movs	r3, #16
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e07a      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a124:	2320      	movs	r3, #32
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e076      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a12c:	2340      	movs	r3, #64	@ 0x40
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e072      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a134:	2380      	movs	r3, #128	@ 0x80
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13a:	e06e      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a75      	ldr	r2, [pc, #468]	@ (800a318 <UART_SetConfig+0x6a4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d130      	bne.n	800a1a8 <UART_SetConfig+0x534>
 800a146:	4b72      	ldr	r3, [pc, #456]	@ (800a310 <UART_SetConfig+0x69c>)
 800a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d826      	bhi.n	800a1a0 <UART_SetConfig+0x52c>
 800a152:	a201      	add	r2, pc, #4	@ (adr r2, 800a158 <UART_SetConfig+0x4e4>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a171 	.word	0x0800a171
 800a15c:	0800a179 	.word	0x0800a179
 800a160:	0800a181 	.word	0x0800a181
 800a164:	0800a189 	.word	0x0800a189
 800a168:	0800a191 	.word	0x0800a191
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	2300      	movs	r3, #0
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e050      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a178:	2304      	movs	r3, #4
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e04c      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a180:	2308      	movs	r3, #8
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e048      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a188:	2310      	movs	r3, #16
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e044      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a190:	2320      	movs	r3, #32
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e040      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a198:	2340      	movs	r3, #64	@ 0x40
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19e:	e03c      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1a0:	2380      	movs	r3, #128	@ 0x80
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a6:	e038      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a5b      	ldr	r2, [pc, #364]	@ (800a31c <UART_SetConfig+0x6a8>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d130      	bne.n	800a214 <UART_SetConfig+0x5a0>
 800a1b2:	4b57      	ldr	r3, [pc, #348]	@ (800a310 <UART_SetConfig+0x69c>)
 800a1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b05      	cmp	r3, #5
 800a1bc:	d826      	bhi.n	800a20c <UART_SetConfig+0x598>
 800a1be:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c4 <UART_SetConfig+0x550>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1dd 	.word	0x0800a1dd
 800a1c8:	0800a1e5 	.word	0x0800a1e5
 800a1cc:	0800a1ed 	.word	0x0800a1ed
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a205 	.word	0x0800a205
 800a1dc:	2302      	movs	r3, #2
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e01a      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e016      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e012      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e00e      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e00a      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a204:	2340      	movs	r3, #64	@ 0x40
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e006      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a20c:	2380      	movs	r3, #128	@ 0x80
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e002      	b.n	800a21a <UART_SetConfig+0x5a6>
 800a214:	2380      	movs	r3, #128	@ 0x80
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a3f      	ldr	r2, [pc, #252]	@ (800a31c <UART_SetConfig+0x6a8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	f040 80f8 	bne.w	800a416 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a226:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	dc46      	bgt.n	800a2bc <UART_SetConfig+0x648>
 800a22e:	2b02      	cmp	r3, #2
 800a230:	f2c0 8082 	blt.w	800a338 <UART_SetConfig+0x6c4>
 800a234:	3b02      	subs	r3, #2
 800a236:	2b1e      	cmp	r3, #30
 800a238:	d87e      	bhi.n	800a338 <UART_SetConfig+0x6c4>
 800a23a:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <UART_SetConfig+0x5cc>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a2c3 	.word	0x0800a2c3
 800a244:	0800a339 	.word	0x0800a339
 800a248:	0800a2cb 	.word	0x0800a2cb
 800a24c:	0800a339 	.word	0x0800a339
 800a250:	0800a339 	.word	0x0800a339
 800a254:	0800a339 	.word	0x0800a339
 800a258:	0800a2db 	.word	0x0800a2db
 800a25c:	0800a339 	.word	0x0800a339
 800a260:	0800a339 	.word	0x0800a339
 800a264:	0800a339 	.word	0x0800a339
 800a268:	0800a339 	.word	0x0800a339
 800a26c:	0800a339 	.word	0x0800a339
 800a270:	0800a339 	.word	0x0800a339
 800a274:	0800a339 	.word	0x0800a339
 800a278:	0800a2eb 	.word	0x0800a2eb
 800a27c:	0800a339 	.word	0x0800a339
 800a280:	0800a339 	.word	0x0800a339
 800a284:	0800a339 	.word	0x0800a339
 800a288:	0800a339 	.word	0x0800a339
 800a28c:	0800a339 	.word	0x0800a339
 800a290:	0800a339 	.word	0x0800a339
 800a294:	0800a339 	.word	0x0800a339
 800a298:	0800a339 	.word	0x0800a339
 800a29c:	0800a339 	.word	0x0800a339
 800a2a0:	0800a339 	.word	0x0800a339
 800a2a4:	0800a339 	.word	0x0800a339
 800a2a8:	0800a339 	.word	0x0800a339
 800a2ac:	0800a339 	.word	0x0800a339
 800a2b0:	0800a339 	.word	0x0800a339
 800a2b4:	0800a339 	.word	0x0800a339
 800a2b8:	0800a32b 	.word	0x0800a32b
 800a2bc:	2b40      	cmp	r3, #64	@ 0x40
 800a2be:	d037      	beq.n	800a330 <UART_SetConfig+0x6bc>
 800a2c0:	e03a      	b.n	800a338 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a2c2:	f7fe f83d 	bl	8008340 <HAL_RCCEx_GetD3PCLK1Freq>
 800a2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c8:	e03c      	b.n	800a344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe f84c 	bl	800836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d8:	e034      	b.n	800a344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2da:	f107 0318 	add.w	r3, r7, #24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe f998 	bl	8008614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e8:	e02c      	b.n	800a344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ea:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <UART_SetConfig+0x69c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2f6:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <UART_SetConfig+0x69c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	08db      	lsrs	r3, r3, #3
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	4a07      	ldr	r2, [pc, #28]	@ (800a320 <UART_SetConfig+0x6ac>)
 800a302:	fa22 f303 	lsr.w	r3, r2, r3
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a308:	e01c      	b.n	800a344 <UART_SetConfig+0x6d0>
 800a30a:	bf00      	nop
 800a30c:	40011400 	.word	0x40011400
 800a310:	58024400 	.word	0x58024400
 800a314:	40007800 	.word	0x40007800
 800a318:	40007c00 	.word	0x40007c00
 800a31c:	58000c00 	.word	0x58000c00
 800a320:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a324:	4b9d      	ldr	r3, [pc, #628]	@ (800a59c <UART_SetConfig+0x928>)
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e00c      	b.n	800a344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a32a:	4b9d      	ldr	r3, [pc, #628]	@ (800a5a0 <UART_SetConfig+0x92c>)
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32e:	e009      	b.n	800a344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a336:	e005      	b.n	800a344 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a342:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 81de 	beq.w	800a708 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a350:	4a94      	ldr	r2, [pc, #592]	@ (800a5a4 <UART_SetConfig+0x930>)
 800a352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a356:	461a      	mov	r2, r3
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a35e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	4613      	mov	r3, r2
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	4413      	add	r3, r2
 800a36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d305      	bcc.n	800a37c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a378:	429a      	cmp	r2, r3
 800a37a:	d903      	bls.n	800a384 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a382:	e1c1      	b.n	800a708 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a386:	2200      	movs	r2, #0
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	60fa      	str	r2, [r7, #12]
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a390:	4a84      	ldr	r2, [pc, #528]	@ (800a5a4 <UART_SetConfig+0x930>)
 800a392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a396:	b29b      	uxth	r3, r3
 800a398:	2200      	movs	r2, #0
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3a6:	f7f6 f853 	bl	8000450 <__aeabi_uldivmod>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	f04f 0200 	mov.w	r2, #0
 800a3b6:	f04f 0300 	mov.w	r3, #0
 800a3ba:	020b      	lsls	r3, r1, #8
 800a3bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3c0:	0202      	lsls	r2, r0, #8
 800a3c2:	6979      	ldr	r1, [r7, #20]
 800a3c4:	6849      	ldr	r1, [r1, #4]
 800a3c6:	0849      	lsrs	r1, r1, #1
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	eb12 0804 	adds.w	r8, r2, r4
 800a3d2:	eb43 0905 	adc.w	r9, r3, r5
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	469a      	mov	sl, r3
 800a3de:	4693      	mov	fp, r2
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	f7f6 f832 	bl	8000450 <__aeabi_uldivmod>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3fa:	d308      	bcc.n	800a40e <UART_SetConfig+0x79a>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a402:	d204      	bcs.n	800a40e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a40a:	60da      	str	r2, [r3, #12]
 800a40c:	e17c      	b.n	800a708 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a414:	e178      	b.n	800a708 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a41e:	f040 80c5 	bne.w	800a5ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a422:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a426:	2b20      	cmp	r3, #32
 800a428:	dc48      	bgt.n	800a4bc <UART_SetConfig+0x848>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	db7b      	blt.n	800a526 <UART_SetConfig+0x8b2>
 800a42e:	2b20      	cmp	r3, #32
 800a430:	d879      	bhi.n	800a526 <UART_SetConfig+0x8b2>
 800a432:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <UART_SetConfig+0x7c4>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a4c3 	.word	0x0800a4c3
 800a43c:	0800a4cb 	.word	0x0800a4cb
 800a440:	0800a527 	.word	0x0800a527
 800a444:	0800a527 	.word	0x0800a527
 800a448:	0800a4d3 	.word	0x0800a4d3
 800a44c:	0800a527 	.word	0x0800a527
 800a450:	0800a527 	.word	0x0800a527
 800a454:	0800a527 	.word	0x0800a527
 800a458:	0800a4e3 	.word	0x0800a4e3
 800a45c:	0800a527 	.word	0x0800a527
 800a460:	0800a527 	.word	0x0800a527
 800a464:	0800a527 	.word	0x0800a527
 800a468:	0800a527 	.word	0x0800a527
 800a46c:	0800a527 	.word	0x0800a527
 800a470:	0800a527 	.word	0x0800a527
 800a474:	0800a527 	.word	0x0800a527
 800a478:	0800a4f3 	.word	0x0800a4f3
 800a47c:	0800a527 	.word	0x0800a527
 800a480:	0800a527 	.word	0x0800a527
 800a484:	0800a527 	.word	0x0800a527
 800a488:	0800a527 	.word	0x0800a527
 800a48c:	0800a527 	.word	0x0800a527
 800a490:	0800a527 	.word	0x0800a527
 800a494:	0800a527 	.word	0x0800a527
 800a498:	0800a527 	.word	0x0800a527
 800a49c:	0800a527 	.word	0x0800a527
 800a4a0:	0800a527 	.word	0x0800a527
 800a4a4:	0800a527 	.word	0x0800a527
 800a4a8:	0800a527 	.word	0x0800a527
 800a4ac:	0800a527 	.word	0x0800a527
 800a4b0:	0800a527 	.word	0x0800a527
 800a4b4:	0800a527 	.word	0x0800a527
 800a4b8:	0800a519 	.word	0x0800a519
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d02e      	beq.n	800a51e <UART_SetConfig+0x8aa>
 800a4c0:	e031      	b.n	800a526 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c2:	f7fc fcc5 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 800a4c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4c8:	e033      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4ca:	f7fc fcd7 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 800a4ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4d0:	e02f      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fd ff48 	bl	800836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e0:	e027      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e2:	f107 0318 	add.w	r3, r7, #24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe f894 	bl	8008614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e01f      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f2:	4b2d      	ldr	r3, [pc, #180]	@ (800a5a8 <UART_SetConfig+0x934>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d009      	beq.n	800a512 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a5a8 <UART_SetConfig+0x934>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	08db      	lsrs	r3, r3, #3
 800a504:	f003 0303 	and.w	r3, r3, #3
 800a508:	4a24      	ldr	r2, [pc, #144]	@ (800a59c <UART_SetConfig+0x928>)
 800a50a:	fa22 f303 	lsr.w	r3, r2, r3
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a510:	e00f      	b.n	800a532 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a512:	4b22      	ldr	r3, [pc, #136]	@ (800a59c <UART_SetConfig+0x928>)
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a516:	e00c      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a518:	4b21      	ldr	r3, [pc, #132]	@ (800a5a0 <UART_SetConfig+0x92c>)
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51c:	e009      	b.n	800a532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a524:	e005      	b.n	800a532 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a526:	2300      	movs	r3, #0
 800a528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80e7 	beq.w	800a708 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53e:	4a19      	ldr	r2, [pc, #100]	@ (800a5a4 <UART_SetConfig+0x930>)
 800a540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a544:	461a      	mov	r2, r3
 800a546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a548:	fbb3 f3f2 	udiv	r3, r3, r2
 800a54c:	005a      	lsls	r2, r3, #1
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	441a      	add	r2, r3
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d916      	bls.n	800a594 <UART_SetConfig+0x920>
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a56c:	d212      	bcs.n	800a594 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	b29b      	uxth	r3, r3
 800a572:	f023 030f 	bic.w	r3, r3, #15
 800a576:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	b29a      	uxth	r2, r3
 800a584:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a586:	4313      	orrs	r3, r2
 800a588:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	e0b9      	b.n	800a708 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a59a:	e0b5      	b.n	800a708 <UART_SetConfig+0xa94>
 800a59c:	03d09000 	.word	0x03d09000
 800a5a0:	003d0900 	.word	0x003d0900
 800a5a4:	08018b9c 	.word	0x08018b9c
 800a5a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5b0:	2b20      	cmp	r3, #32
 800a5b2:	dc49      	bgt.n	800a648 <UART_SetConfig+0x9d4>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	db7c      	blt.n	800a6b2 <UART_SetConfig+0xa3e>
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d87a      	bhi.n	800a6b2 <UART_SetConfig+0xa3e>
 800a5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c4 <UART_SetConfig+0x950>)
 800a5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c2:	bf00      	nop
 800a5c4:	0800a64f 	.word	0x0800a64f
 800a5c8:	0800a657 	.word	0x0800a657
 800a5cc:	0800a6b3 	.word	0x0800a6b3
 800a5d0:	0800a6b3 	.word	0x0800a6b3
 800a5d4:	0800a65f 	.word	0x0800a65f
 800a5d8:	0800a6b3 	.word	0x0800a6b3
 800a5dc:	0800a6b3 	.word	0x0800a6b3
 800a5e0:	0800a6b3 	.word	0x0800a6b3
 800a5e4:	0800a66f 	.word	0x0800a66f
 800a5e8:	0800a6b3 	.word	0x0800a6b3
 800a5ec:	0800a6b3 	.word	0x0800a6b3
 800a5f0:	0800a6b3 	.word	0x0800a6b3
 800a5f4:	0800a6b3 	.word	0x0800a6b3
 800a5f8:	0800a6b3 	.word	0x0800a6b3
 800a5fc:	0800a6b3 	.word	0x0800a6b3
 800a600:	0800a6b3 	.word	0x0800a6b3
 800a604:	0800a67f 	.word	0x0800a67f
 800a608:	0800a6b3 	.word	0x0800a6b3
 800a60c:	0800a6b3 	.word	0x0800a6b3
 800a610:	0800a6b3 	.word	0x0800a6b3
 800a614:	0800a6b3 	.word	0x0800a6b3
 800a618:	0800a6b3 	.word	0x0800a6b3
 800a61c:	0800a6b3 	.word	0x0800a6b3
 800a620:	0800a6b3 	.word	0x0800a6b3
 800a624:	0800a6b3 	.word	0x0800a6b3
 800a628:	0800a6b3 	.word	0x0800a6b3
 800a62c:	0800a6b3 	.word	0x0800a6b3
 800a630:	0800a6b3 	.word	0x0800a6b3
 800a634:	0800a6b3 	.word	0x0800a6b3
 800a638:	0800a6b3 	.word	0x0800a6b3
 800a63c:	0800a6b3 	.word	0x0800a6b3
 800a640:	0800a6b3 	.word	0x0800a6b3
 800a644:	0800a6a5 	.word	0x0800a6a5
 800a648:	2b40      	cmp	r3, #64	@ 0x40
 800a64a:	d02e      	beq.n	800a6aa <UART_SetConfig+0xa36>
 800a64c:	e031      	b.n	800a6b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a64e:	f7fc fbff 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 800a652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a654:	e033      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a656:	f7fc fc11 	bl	8006e7c <HAL_RCC_GetPCLK2Freq>
 800a65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a65c:	e02f      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd fe82 	bl	800836c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	e027      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a66e:	f107 0318 	add.w	r3, r7, #24
 800a672:	4618      	mov	r0, r3
 800a674:	f7fd ffce 	bl	8008614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a67c:	e01f      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a67e:	4b2d      	ldr	r3, [pc, #180]	@ (800a734 <UART_SetConfig+0xac0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a68a:	4b2a      	ldr	r3, [pc, #168]	@ (800a734 <UART_SetConfig+0xac0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	08db      	lsrs	r3, r3, #3
 800a690:	f003 0303 	and.w	r3, r3, #3
 800a694:	4a28      	ldr	r2, [pc, #160]	@ (800a738 <UART_SetConfig+0xac4>)
 800a696:	fa22 f303 	lsr.w	r3, r2, r3
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a69c:	e00f      	b.n	800a6be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a69e:	4b26      	ldr	r3, [pc, #152]	@ (800a738 <UART_SetConfig+0xac4>)
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a2:	e00c      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6a4:	4b25      	ldr	r3, [pc, #148]	@ (800a73c <UART_SetConfig+0xac8>)
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a8:	e009      	b.n	800a6be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e005      	b.n	800a6be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a6bc:	bf00      	nop
    }

    if (pclk != 0U)
 800a6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d021      	beq.n	800a708 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a740 <UART_SetConfig+0xacc>)
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	441a      	add	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d909      	bls.n	800a702 <UART_SetConfig+0xa8e>
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f4:	d205      	bcs.n	800a702 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	e002      	b.n	800a708 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2201      	movs	r2, #1
 800a714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2200      	movs	r2, #0
 800a71c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2200      	movs	r2, #0
 800a722:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a724:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3748      	adds	r7, #72	@ 0x48
 800a72c:	46bd      	mov	sp, r7
 800a72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a732:	bf00      	nop
 800a734:	58024400 	.word	0x58024400
 800a738:	03d09000 	.word	0x03d09000
 800a73c:	003d0900 	.word	0x003d0900
 800a740:	08018b9c 	.word	0x08018b9c

0800a744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00a      	beq.n	800a7f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01a      	beq.n	800a85a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a842:	d10a      	bne.n	800a85a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	605a      	str	r2, [r3, #4]
  }
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b098      	sub	sp, #96	@ 0x60
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a898:	f7f7 fc16 	bl	80020c8 <HAL_GetTick>
 800a89c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d12f      	bne.n	800a90c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f88e 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d022      	beq.n	800a90c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8da:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e6      	bne.n	800a8c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e063      	b.n	800a9d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d149      	bne.n	800a9ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a91a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a922:	2200      	movs	r2, #0
 800a924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f857 	bl	800a9dc <UART_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d03c      	beq.n	800a9ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	623b      	str	r3, [r7, #32]
   return(result);
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a952:	633b      	str	r3, [r7, #48]	@ 0x30
 800a954:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e6      	bne.n	800a934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3308      	adds	r3, #8
 800a96c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	60fb      	str	r3, [r7, #12]
   return(result);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a986:	61fa      	str	r2, [r7, #28]
 800a988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	69b9      	ldr	r1, [r7, #24]
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	617b      	str	r3, [r7, #20]
   return(result);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e5      	bne.n	800a966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e012      	b.n	800a9d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3758      	adds	r7, #88	@ 0x58
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ec:	e04f      	b.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9f4:	d04b      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f6:	f7f7 fb67 	bl	80020c8 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d302      	bcc.n	800aa0c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e04e      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d037      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b80      	cmp	r3, #128	@ 0x80
 800aa22:	d034      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d031      	beq.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d110      	bne.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f921 	bl	800ac88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2208      	movs	r2, #8
 800aa4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e029      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa68:	d111      	bne.n	800aa8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 f907 	bl	800ac88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e00f      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69da      	ldr	r2, [r3, #28]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	4013      	ands	r3, r2
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	bf0c      	ite	eq
 800aa9e:	2301      	moveq	r3, #1
 800aaa0:	2300      	movne	r3, #0
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d0a0      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b096      	sub	sp, #88	@ 0x58
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	88fa      	ldrh	r2, [r7, #6]
 800aad0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2222      	movs	r2, #34	@ 0x22
 800aae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02d      	beq.n	800ab4a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaf4:	4a40      	ldr	r2, [pc, #256]	@ (800abf8 <UART_Start_Receive_DMA+0x140>)
 800aaf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aafe:	4a3f      	ldr	r2, [pc, #252]	@ (800abfc <UART_Start_Receive_DMA+0x144>)
 800ab00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab08:	4a3d      	ldr	r2, [pc, #244]	@ (800ac00 <UART_Start_Receive_DMA+0x148>)
 800ab0a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab12:	2200      	movs	r2, #0
 800ab14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3324      	adds	r3, #36	@ 0x24
 800ab22:	4619      	mov	r1, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab28:	461a      	mov	r2, r3
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	f7f7 ff58 	bl	80029e0 <HAL_DMA_Start_IT>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2210      	movs	r2, #16
 800ab3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e051      	b.n	800abee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d018      	beq.n	800ab84 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab5a:	e853 3f00 	ldrex	r3, [r3]
 800ab5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab66:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab72:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab78:	e841 2300 	strex	r3, r2, [r1]
 800ab7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ab7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1e6      	bne.n	800ab52 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3308      	adds	r3, #8
 800ab8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	e853 3f00 	ldrex	r3, [r3]
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab96:	f043 0301 	orr.w	r3, r3, #1
 800ab9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3308      	adds	r3, #8
 800aba2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aba4:	637a      	str	r2, [r7, #52]	@ 0x34
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800abaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e5      	bne.n	800ab84 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3308      	adds	r3, #8
 800abbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	e853 3f00 	ldrex	r3, [r3]
 800abc6:	613b      	str	r3, [r7, #16]
   return(result);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3308      	adds	r3, #8
 800abd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800abd8:	623a      	str	r2, [r7, #32]
 800abda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abdc:	69f9      	ldr	r1, [r7, #28]
 800abde:	6a3a      	ldr	r2, [r7, #32]
 800abe0:	e841 2300 	strex	r3, r2, [r1]
 800abe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e5      	bne.n	800abb8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3758      	adds	r7, #88	@ 0x58
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	0800ae07 	.word	0x0800ae07
 800abfc:	0800af2f 	.word	0x0800af2f
 800ac00:	0800af6d 	.word	0x0800af6d

0800ac04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b08f      	sub	sp, #60	@ 0x3c
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac2c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3308      	adds	r3, #8
 800ac44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac5e:	61ba      	str	r2, [r7, #24]
 800ac60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	6979      	ldr	r1, [r7, #20]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e5      	bne.n	800ac3e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ac7a:	bf00      	nop
 800ac7c:	373c      	adds	r7, #60	@ 0x3c
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b095      	sub	sp, #84	@ 0x54
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acae:	643b      	str	r3, [r7, #64]	@ 0x40
 800acb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e6      	bne.n	800ac90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	4b1e      	ldr	r3, [pc, #120]	@ (800ad50 <UART_EndRxTransfer+0xc8>)
 800acd6:	4013      	ands	r3, r2
 800acd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3308      	adds	r3, #8
 800ace0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ace2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ace4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ace8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d118      	bne.n	800ad30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	e853 3f00 	ldrex	r3, [r3]
 800ad0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f023 0310 	bic.w	r3, r3, #16
 800ad12:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad1c:	61bb      	str	r3, [r7, #24]
 800ad1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	6979      	ldr	r1, [r7, #20]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	613b      	str	r3, [r7, #16]
   return(result);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e6      	bne.n	800acfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad44:	bf00      	nop
 800ad46:	3754      	adds	r7, #84	@ 0x54
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	effffffe 	.word	0xeffffffe

0800ad54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b090      	sub	sp, #64	@ 0x40
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	69db      	ldr	r3, [r3, #28]
 800ad66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad6a:	d037      	beq.n	800addc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	623b      	str	r3, [r7, #32]
   return(result);
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad94:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e5      	bne.n	800ad74 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ada8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc6:	61fb      	str	r3, [r7, #28]
 800adc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	69b9      	ldr	r1, [r7, #24]
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	617b      	str	r3, [r7, #20]
   return(result);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e6      	bne.n	800ada8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adda:	e002      	b.n	800ade2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800addc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800adde:	f7fe ff0b 	bl	8009bf8 <HAL_UART_TxCpltCallback>
}
 800ade2:	bf00      	nop
 800ade4:	3740      	adds	r7, #64	@ 0x40
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7fe ff07 	bl	8009c0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b09c      	sub	sp, #112	@ 0x70
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae1c:	d071      	beq.n	800af02 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ae1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e6      	bne.n	800ae26 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6a:	f023 0301 	bic.w	r3, r3, #1
 800ae6e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae78:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e5      	bne.n	800ae58 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3308      	adds	r3, #8
 800aeaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aeac:	633a      	str	r2, [r7, #48]	@ 0x30
 800aeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aeba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e5      	bne.n	800ae8c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aec2:	2220      	movs	r2, #32
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d118      	bne.n	800af02 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 0310 	bic.w	r3, r3, #16
 800aee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	69b9      	ldr	r1, [r7, #24]
 800aef4:	69fa      	ldr	r2, [r7, #28]
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	617b      	str	r3, [r7, #20]
   return(result);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e6      	bne.n	800aed0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af04:	2200      	movs	r2, #0
 800af06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d107      	bne.n	800af20 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af16:	4619      	mov	r1, r3
 800af18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af1a:	f7fe fe9f 	bl	8009c5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af1e:	e002      	b.n	800af26 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800af20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af22:	f7fe fe7d 	bl	8009c20 <HAL_UART_RxCpltCallback>
}
 800af26:	bf00      	nop
 800af28:	3770      	adds	r7, #112	@ 0x70
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d109      	bne.n	800af5e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af50:	085b      	lsrs	r3, r3, #1
 800af52:	b29b      	uxth	r3, r3
 800af54:	4619      	mov	r1, r3
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7fe fe80 	bl	8009c5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af5c:	e002      	b.n	800af64 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7fe fe68 	bl	8009c34 <HAL_UART_RxHalfCpltCallback>
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af94:	2b80      	cmp	r3, #128	@ 0x80
 800af96:	d109      	bne.n	800afac <UART_DMAError+0x40>
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2b21      	cmp	r3, #33	@ 0x21
 800af9c:	d106      	bne.n	800afac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800afa6:	6978      	ldr	r0, [r7, #20]
 800afa8:	f7ff fe2c 	bl	800ac04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb6:	2b40      	cmp	r3, #64	@ 0x40
 800afb8:	d109      	bne.n	800afce <UART_DMAError+0x62>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b22      	cmp	r3, #34	@ 0x22
 800afbe:	d106      	bne.n	800afce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800afc8:	6978      	ldr	r0, [r7, #20]
 800afca:	f7ff fe5d 	bl	800ac88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd4:	f043 0210 	orr.w	r2, r3, #16
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afde:	6978      	ldr	r0, [r7, #20]
 800afe0:	f7fe fe32 	bl	8009c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe4:	bf00      	nop
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7fe fe1c 	bl	8009c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b010:	bf00      	nop
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	e853 3f00 	ldrex	r3, [r3]
 800b02c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b034:	61fb      	str	r3, [r7, #28]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	61bb      	str	r3, [r7, #24]
 800b040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	613b      	str	r3, [r7, #16]
   return(result);
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e6      	bne.n	800b020 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2220      	movs	r2, #32
 800b056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7fe fdc9 	bl	8009bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b066:	bf00      	nop
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e027      	b.n	800b110 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2224      	movs	r2, #36	@ 0x24
 800b0cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0201 	bic.w	r2, r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d101      	bne.n	800b134 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b130:	2302      	movs	r3, #2
 800b132:	e02d      	b.n	800b190 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2224      	movs	r2, #36	@ 0x24
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0201 	bic.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f84f 	bl	800b214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2220      	movs	r2, #32
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e02d      	b.n	800b20c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2224      	movs	r2, #36	@ 0x24
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0201 	bic.w	r2, r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f811 	bl	800b214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b220:	2b00      	cmp	r3, #0
 800b222:	d108      	bne.n	800b236 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b234:	e031      	b.n	800b29a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b236:	2310      	movs	r3, #16
 800b238:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b23a:	2310      	movs	r3, #16
 800b23c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	0e5b      	lsrs	r3, r3, #25
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0307 	and.w	r3, r3, #7
 800b24c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	0f5b      	lsrs	r3, r3, #29
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f003 0307 	and.w	r3, r3, #7
 800b25c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	7b3a      	ldrb	r2, [r7, #12]
 800b262:	4911      	ldr	r1, [pc, #68]	@ (800b2a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b264:	5c8a      	ldrb	r2, [r1, r2]
 800b266:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b26a:	7b3a      	ldrb	r2, [r7, #12]
 800b26c:	490f      	ldr	r1, [pc, #60]	@ (800b2ac <UARTEx_SetNbDataToProcess+0x98>)
 800b26e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b270:	fb93 f3f2 	sdiv	r3, r3, r2
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	7b7a      	ldrb	r2, [r7, #13]
 800b280:	4909      	ldr	r1, [pc, #36]	@ (800b2a8 <UARTEx_SetNbDataToProcess+0x94>)
 800b282:	5c8a      	ldrb	r2, [r1, r2]
 800b284:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b288:	7b7a      	ldrb	r2, [r7, #13]
 800b28a:	4908      	ldr	r1, [pc, #32]	@ (800b2ac <UARTEx_SetNbDataToProcess+0x98>)
 800b28c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b28e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b29a:	bf00      	nop
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	08018bb4 	.word	0x08018bb4
 800b2ac:	08018bbc 	.word	0x08018bbc

0800b2b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	f107 001c 	add.w	r0, r7, #28
 800b2be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d121      	bne.n	800b30e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	4b2c      	ldr	r3, [pc, #176]	@ (800b38c <USB_CoreInit+0xdc>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b2ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d105      	bne.n	800b302 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 faaa 	bl	800b85c <USB_CoreReset>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]
 800b30c:	e01b      	b.n	800b346 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fa9e 	bl	800b85c <USB_CoreReset>
 800b320:	4603      	mov	r3, r0
 800b322:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b324:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d106      	bne.n	800b33a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b330:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	639a      	str	r2, [r3, #56]	@ 0x38
 800b338:	e005      	b.n	800b346 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b33e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b346:	7fbb      	ldrb	r3, [r7, #30]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d116      	bne.n	800b37a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b35a:	4b0d      	ldr	r3, [pc, #52]	@ (800b390 <USB_CoreInit+0xe0>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f043 0206 	orr.w	r2, r3, #6
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f043 0220 	orr.w	r2, r3, #32
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b386:	b004      	add	sp, #16
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	ffbdffbf 	.word	0xffbdffbf
 800b390:	03ee0000 	.word	0x03ee0000

0800b394 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f023 0201 	bic.w	r2, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3d2:	78fb      	ldrb	r3, [r7, #3]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d115      	bne.n	800b404 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b3e4:	200a      	movs	r0, #10
 800b3e6:	f7f6 fe7b 	bl	80020e0 <HAL_Delay>
      ms += 10U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	330a      	adds	r3, #10
 800b3ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fa25 	bl	800b840 <USB_GetMode>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d01e      	beq.n	800b43a <USB_SetCurrentMode+0x84>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2bc7      	cmp	r3, #199	@ 0xc7
 800b400:	d9f0      	bls.n	800b3e4 <USB_SetCurrentMode+0x2e>
 800b402:	e01a      	b.n	800b43a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d115      	bne.n	800b436 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b416:	200a      	movs	r0, #10
 800b418:	f7f6 fe62 	bl	80020e0 <HAL_Delay>
      ms += 10U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	330a      	adds	r3, #10
 800b420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa0c 	bl	800b840 <USB_GetMode>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <USB_SetCurrentMode+0x84>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2bc7      	cmp	r3, #199	@ 0xc7
 800b432:	d9f0      	bls.n	800b416 <USB_SetCurrentMode+0x60>
 800b434:	e001      	b.n	800b43a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e005      	b.n	800b446 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2bc8      	cmp	r3, #200	@ 0xc8
 800b43e:	d101      	bne.n	800b444 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e000      	b.n	800b446 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b450:	b084      	sub	sp, #16
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b45e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
 800b46e:	e009      	b.n	800b484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	3340      	adds	r3, #64	@ 0x40
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	2200      	movs	r2, #0
 800b47c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b0e      	cmp	r3, #14
 800b488:	d9f2      	bls.n	800b470 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b48a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d11c      	bne.n	800b4cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4a0:	f043 0302 	orr.w	r3, r3, #2
 800b4a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	e005      	b.n	800b4d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4de:	461a      	mov	r2, r3
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d10d      	bne.n	800b508 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d104      	bne.n	800b4fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f968 	bl	800b7cc <USB_SetDevSpeed>
 800b4fc:	e008      	b.n	800b510 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4fe:	2101      	movs	r1, #1
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f963 	bl	800b7cc <USB_SetDevSpeed>
 800b506:	e003      	b.n	800b510 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b508:	2103      	movs	r1, #3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f95e 	bl	800b7cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b510:	2110      	movs	r1, #16
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f8fa 	bl	800b70c <USB_FlushTxFifo>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f924 	bl	800b770 <USB_FlushRxFifo>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b538:	461a      	mov	r2, r3
 800b53a:	2300      	movs	r3, #0
 800b53c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b544:	461a      	mov	r2, r3
 800b546:	2300      	movs	r3, #0
 800b548:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b550:	461a      	mov	r2, r3
 800b552:	2300      	movs	r3, #0
 800b554:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b556:	2300      	movs	r3, #0
 800b558:	613b      	str	r3, [r7, #16]
 800b55a:	e043      	b.n	800b5e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b56e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b572:	d118      	bne.n	800b5a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b586:	461a      	mov	r2, r3
 800b588:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	e013      	b.n	800b5b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	015a      	lsls	r2, r3, #5
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4413      	add	r3, r2
 800b598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b59c:	461a      	mov	r2, r3
 800b59e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	e008      	b.n	800b5b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b5dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d3b5      	bcc.n	800b55c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	e043      	b.n	800b67e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b60c:	d118      	bne.n	800b640 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b620:	461a      	mov	r2, r3
 800b622:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	e013      	b.n	800b652 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4413      	add	r3, r2
 800b632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b636:	461a      	mov	r2, r3
 800b638:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	e008      	b.n	800b652 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b64c:	461a      	mov	r2, r3
 800b64e:	2300      	movs	r3, #0
 800b650:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b65e:	461a      	mov	r2, r3
 800b660:	2300      	movs	r3, #0
 800b662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b670:	461a      	mov	r2, r3
 800b672:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	3301      	adds	r3, #1
 800b67c:	613b      	str	r3, [r7, #16]
 800b67e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b682:	461a      	mov	r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4293      	cmp	r3, r2
 800b688:	d3b5      	bcc.n	800b5f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b69c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b6aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	f043 0210 	orr.w	r2, r3, #16
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	699a      	ldr	r2, [r3, #24]
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <USB_DevInit+0x2b4>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b6cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	f043 0208 	orr.w	r2, r3, #8
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d105      	bne.n	800b6f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	4b06      	ldr	r3, [pc, #24]	@ (800b708 <USB_DevInit+0x2b8>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b700:	b004      	add	sp, #16
 800b702:	4770      	bx	lr
 800b704:	803c3800 	.word	0x803c3800
 800b708:	40000004 	.word	0x40000004

0800b70c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b726:	d901      	bls.n	800b72c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e01b      	b.n	800b764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	daf2      	bge.n	800b71a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	019b      	lsls	r3, r3, #6
 800b73c:	f043 0220 	orr.w	r2, r3, #32
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b750:	d901      	bls.n	800b756 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e006      	b.n	800b764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b20      	cmp	r3, #32
 800b760:	d0f0      	beq.n	800b744 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b788:	d901      	bls.n	800b78e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e018      	b.n	800b7c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	daf2      	bge.n	800b77c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2210      	movs	r2, #16
 800b79e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7ac:	d901      	bls.n	800b7b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e006      	b.n	800b7c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b10      	cmp	r3, #16
 800b7bc:	d0f0      	beq.n	800b7a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b82c:	f043 0302 	orr.w	r3, r3, #2
 800b830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	f003 0301 	and.w	r3, r3, #1
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b874:	d901      	bls.n	800b87a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e01b      	b.n	800b8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	daf2      	bge.n	800b868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	f043 0201 	orr.w	r2, r3, #1
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3301      	adds	r3, #1
 800b896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b89e:	d901      	bls.n	800b8a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e006      	b.n	800b8b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d0f0      	beq.n	800b892 <USB_CoreReset+0x36>

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <__NVIC_SetPriority>:
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	6039      	str	r1, [r7, #0]
 800b8ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b8cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	db0a      	blt.n	800b8ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	490c      	ldr	r1, [pc, #48]	@ (800b90c <__NVIC_SetPriority+0x4c>)
 800b8da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8de:	0112      	lsls	r2, r2, #4
 800b8e0:	b2d2      	uxtb	r2, r2
 800b8e2:	440b      	add	r3, r1
 800b8e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b8e8:	e00a      	b.n	800b900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	4908      	ldr	r1, [pc, #32]	@ (800b910 <__NVIC_SetPriority+0x50>)
 800b8f0:	88fb      	ldrh	r3, [r7, #6]
 800b8f2:	f003 030f 	and.w	r3, r3, #15
 800b8f6:	3b04      	subs	r3, #4
 800b8f8:	0112      	lsls	r2, r2, #4
 800b8fa:	b2d2      	uxtb	r2, r2
 800b8fc:	440b      	add	r3, r1
 800b8fe:	761a      	strb	r2, [r3, #24]
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	e000e100 	.word	0xe000e100
 800b910:	e000ed00 	.word	0xe000ed00

0800b914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b918:	4b05      	ldr	r3, [pc, #20]	@ (800b930 <SysTick_Handler+0x1c>)
 800b91a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b91c:	f001 fd6e 	bl	800d3fc <xTaskGetSchedulerState>
 800b920:	4603      	mov	r3, r0
 800b922:	2b01      	cmp	r3, #1
 800b924:	d001      	beq.n	800b92a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b926:	f002 fb67 	bl	800dff8 <xPortSysTickHandler>
  }
}
 800b92a:	bf00      	nop
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	e000e010 	.word	0xe000e010

0800b934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b938:	2100      	movs	r1, #0
 800b93a:	f06f 0004 	mvn.w	r0, #4
 800b93e:	f7ff ffbf 	bl	800b8c0 <__NVIC_SetPriority>
#endif
}
 800b942:	bf00      	nop
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b94e:	f3ef 8305 	mrs	r3, IPSR
 800b952:	603b      	str	r3, [r7, #0]
  return(result);
 800b954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b95a:	f06f 0305 	mvn.w	r3, #5
 800b95e:	607b      	str	r3, [r7, #4]
 800b960:	e00c      	b.n	800b97c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b962:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <osKernelInitialize+0x44>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b96a:	4b08      	ldr	r3, [pc, #32]	@ (800b98c <osKernelInitialize+0x44>)
 800b96c:	2201      	movs	r2, #1
 800b96e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b970:	2300      	movs	r3, #0
 800b972:	607b      	str	r3, [r7, #4]
 800b974:	e002      	b.n	800b97c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b97a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b97c:	687b      	ldr	r3, [r7, #4]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	24031f10 	.word	0x24031f10

0800b990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b996:	f3ef 8305 	mrs	r3, IPSR
 800b99a:	603b      	str	r3, [r7, #0]
  return(result);
 800b99c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9a2:	f06f 0305 	mvn.w	r3, #5
 800b9a6:	607b      	str	r3, [r7, #4]
 800b9a8:	e010      	b.n	800b9cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d8 <osKernelStart+0x48>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d109      	bne.n	800b9c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9b2:	f7ff ffbf 	bl	800b934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9b6:	4b08      	ldr	r3, [pc, #32]	@ (800b9d8 <osKernelStart+0x48>)
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b9bc:	f001 f892 	bl	800cae4 <vTaskStartScheduler>
      stat = osOK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	607b      	str	r3, [r7, #4]
 800b9c4:	e002      	b.n	800b9cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b9c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9cc:	687b      	ldr	r3, [r7, #4]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	24031f10 	.word	0x24031f10

0800b9dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08e      	sub	sp, #56	@ 0x38
 800b9e0:	af04      	add	r7, sp, #16
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ec:	f3ef 8305 	mrs	r3, IPSR
 800b9f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b9f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d17e      	bne.n	800baf6 <osThreadNew+0x11a>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d07b      	beq.n	800baf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b9fe:	2380      	movs	r3, #128	@ 0x80
 800ba00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba02:	2318      	movs	r3, #24
 800ba04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d045      	beq.n	800baa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <osThreadNew+0x48>
        name = attr->name;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d008      	beq.n	800ba4a <osThreadNew+0x6e>
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2b38      	cmp	r3, #56	@ 0x38
 800ba3c:	d805      	bhi.n	800ba4a <osThreadNew+0x6e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <osThreadNew+0x72>
        return (NULL);
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e054      	b.n	800baf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	089b      	lsrs	r3, r3, #2
 800ba5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00e      	beq.n	800ba84 <osThreadNew+0xa8>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ba6c:	d90a      	bls.n	800ba84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d006      	beq.n	800ba84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <osThreadNew+0xa8>
        mem = 1;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	61bb      	str	r3, [r7, #24]
 800ba82:	e010      	b.n	800baa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10c      	bne.n	800baa6 <osThreadNew+0xca>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d108      	bne.n	800baa6 <osThreadNew+0xca>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d104      	bne.n	800baa6 <osThreadNew+0xca>
          mem = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	61bb      	str	r3, [r7, #24]
 800baa0:	e001      	b.n	800baa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d110      	bne.n	800bace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bab4:	9202      	str	r2, [sp, #8]
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	6a3a      	ldr	r2, [r7, #32]
 800bac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 fe1a 	bl	800c6fc <xTaskCreateStatic>
 800bac8:	4603      	mov	r3, r0
 800baca:	613b      	str	r3, [r7, #16]
 800bacc:	e013      	b.n	800baf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d110      	bne.n	800baf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	f107 0310 	add.w	r3, r7, #16
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 fe68 	bl	800c7bc <xTaskCreate>
 800baec:	4603      	mov	r3, r0
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d001      	beq.n	800baf6 <osThreadNew+0x11a>
            hTask = NULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800baf6:	693b      	ldr	r3, [r7, #16]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3728      	adds	r7, #40	@ 0x28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb08:	f3ef 8305 	mrs	r3, IPSR
 800bb0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <osDelay+0x1c>
    stat = osErrorISR;
 800bb14:	f06f 0305 	mvn.w	r3, #5
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e007      	b.n	800bb2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 ffa6 	bl	800ca78 <vTaskDelay>
    }
  }

  return (stat);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4a07      	ldr	r2, [pc, #28]	@ (800bb64 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4a06      	ldr	r2, [pc, #24]	@ (800bb68 <vApplicationGetIdleTaskMemory+0x30>)
 800bb4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2280      	movs	r2, #128	@ 0x80
 800bb54:	601a      	str	r2, [r3, #0]
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	24031f14 	.word	0x24031f14
 800bb68:	24031fbc 	.word	0x24031fbc

0800bb6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4a07      	ldr	r2, [pc, #28]	@ (800bb98 <vApplicationGetTimerTaskMemory+0x2c>)
 800bb7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	4a06      	ldr	r2, [pc, #24]	@ (800bb9c <vApplicationGetTimerTaskMemory+0x30>)
 800bb82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb8a:	601a      	str	r2, [r3, #0]
}
 800bb8c:	bf00      	nop
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	240321bc 	.word	0x240321bc
 800bb9c:	24032264 	.word	0x24032264

0800bba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f103 0208 	add.w	r2, r3, #8
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f103 0208 	add.w	r2, r3, #8
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f103 0208 	add.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	601a      	str	r2, [r3, #0]
}
 800bc36:	bf00      	nop
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc58:	d103      	bne.n	800bc62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	60fb      	str	r3, [r7, #12]
 800bc60:	e00c      	b.n	800bc7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3308      	adds	r3, #8
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	e002      	b.n	800bc70 <vListInsert+0x2e>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d2f6      	bcs.n	800bc6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	6892      	ldr	r2, [r2, #8]
 800bcca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	6852      	ldr	r2, [r2, #4]
 800bcd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d103      	bne.n	800bce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	1e5a      	subs	r2, r3, #1
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10b      	bne.n	800bd34 <xQueueGenericReset+0x2c>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60bb      	str	r3, [r7, #8]
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	e7fd      	b.n	800bd30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd34:	f002 f8d0 	bl	800ded8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd40:	68f9      	ldr	r1, [r7, #12]
 800bd42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd44:	fb01 f303 	mul.w	r3, r1, r3
 800bd48:	441a      	add	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd64:	3b01      	subs	r3, #1
 800bd66:	68f9      	ldr	r1, [r7, #12]
 800bd68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd6a:	fb01 f303 	mul.w	r3, r1, r3
 800bd6e:	441a      	add	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	22ff      	movs	r2, #255	@ 0xff
 800bd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	22ff      	movs	r2, #255	@ 0xff
 800bd80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d114      	bne.n	800bdb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d01a      	beq.n	800bdc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3310      	adds	r3, #16
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 f942 	bl	800d020 <xTaskRemoveFromEventList>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d012      	beq.n	800bdc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bda2:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd8 <xQueueGenericReset+0xd0>)
 800bda4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	e009      	b.n	800bdc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3310      	adds	r3, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fef1 	bl	800bba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3324      	adds	r3, #36	@ 0x24
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff feec 	bl	800bba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bdc8:	f002 f8b8 	bl	800df3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bdcc:	2301      	movs	r3, #1
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08e      	sub	sp, #56	@ 0x38
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10b      	bne.n	800be08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be02:	bf00      	nop
 800be04:	bf00      	nop
 800be06:	e7fd      	b.n	800be04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	e7fd      	b.n	800be22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <xQueueGenericCreateStatic+0x56>
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <xQueueGenericCreateStatic+0x5a>
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <xQueueGenericCreateStatic+0x5c>
 800be36:	2300      	movs	r3, #0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10b      	bne.n	800be54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	623b      	str	r3, [r7, #32]
}
 800be4e:	bf00      	nop
 800be50:	bf00      	nop
 800be52:	e7fd      	b.n	800be50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d102      	bne.n	800be60 <xQueueGenericCreateStatic+0x84>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <xQueueGenericCreateStatic+0x88>
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <xQueueGenericCreateStatic+0x8a>
 800be64:	2300      	movs	r3, #0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	61fb      	str	r3, [r7, #28]
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	e7fd      	b.n	800be7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be82:	2350      	movs	r3, #80	@ 0x50
 800be84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b50      	cmp	r3, #80	@ 0x50
 800be8a:	d00b      	beq.n	800bea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	61bb      	str	r3, [r7, #24]
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	e7fd      	b.n	800bea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800beaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00d      	beq.n	800becc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800beb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800beb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	4613      	mov	r3, r2
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 f805 	bl	800bed6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800becc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bece:	4618      	mov	r0, r3
 800bed0:	3730      	adds	r7, #48	@ 0x30
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d103      	bne.n	800bef2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	e002      	b.n	800bef8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf04:	2101      	movs	r1, #1
 800bf06:	69b8      	ldr	r0, [r7, #24]
 800bf08:	f7ff fefe 	bl	800bd08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	@ 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10b      	bne.n	800bf50 <xQueueGenericSend+0x34>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf4a:	bf00      	nop
 800bf4c:	bf00      	nop
 800bf4e:	e7fd      	b.n	800bf4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <xQueueGenericSend+0x42>
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <xQueueGenericSend+0x46>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e000      	b.n	800bf64 <xQueueGenericSend+0x48>
 800bf62:	2300      	movs	r3, #0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10b      	bne.n	800bf80 <xQueueGenericSend+0x64>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	e7fd      	b.n	800bf7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d103      	bne.n	800bf8e <xQueueGenericSend+0x72>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <xQueueGenericSend+0x76>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <xQueueGenericSend+0x78>
 800bf92:	2300      	movs	r3, #0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10b      	bne.n	800bfb0 <xQueueGenericSend+0x94>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	623b      	str	r3, [r7, #32]
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	e7fd      	b.n	800bfac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfb0:	f001 fa24 	bl	800d3fc <xTaskGetSchedulerState>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <xQueueGenericSend+0xa4>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <xQueueGenericSend+0xa8>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e000      	b.n	800bfc6 <xQueueGenericSend+0xaa>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10b      	bne.n	800bfe2 <xQueueGenericSend+0xc6>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	61fb      	str	r3, [r7, #28]
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	e7fd      	b.n	800bfde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfe2:	f001 ff79 	bl	800ded8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d302      	bcc.n	800bff8 <xQueueGenericSend+0xdc>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d129      	bne.n	800c04c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bffe:	f000 fa0f 	bl	800c420 <prvCopyDataToQueue>
 800c002:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d010      	beq.n	800c02e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00e:	3324      	adds	r3, #36	@ 0x24
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f805 	bl	800d020 <xTaskRemoveFromEventList>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d013      	beq.n	800c044 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c01c:	4b3f      	ldr	r3, [pc, #252]	@ (800c11c <xQueueGenericSend+0x200>)
 800c01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	e00a      	b.n	800c044 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c034:	4b39      	ldr	r3, [pc, #228]	@ (800c11c <xQueueGenericSend+0x200>)
 800c036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c044:	f001 ff7a 	bl	800df3c <vPortExitCritical>
				return pdPASS;
 800c048:	2301      	movs	r3, #1
 800c04a:	e063      	b.n	800c114 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d103      	bne.n	800c05a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c052:	f001 ff73 	bl	800df3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c056:	2300      	movs	r3, #0
 800c058:	e05c      	b.n	800c114 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c060:	f107 0314 	add.w	r3, r7, #20
 800c064:	4618      	mov	r0, r3
 800c066:	f001 f867 	bl	800d138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c06e:	f001 ff65 	bl	800df3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c072:	f000 fda7 	bl	800cbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c076:	f001 ff2f 	bl	800ded8 <vPortEnterCritical>
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c080:	b25b      	sxtb	r3, r3
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c086:	d103      	bne.n	800c090 <xQueueGenericSend+0x174>
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c096:	b25b      	sxtb	r3, r3
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c09c:	d103      	bne.n	800c0a6 <xQueueGenericSend+0x18a>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0a6:	f001 ff49 	bl	800df3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0aa:	1d3a      	adds	r2, r7, #4
 800c0ac:	f107 0314 	add.w	r3, r7, #20
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 f856 	bl	800d164 <xTaskCheckForTimeOut>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d124      	bne.n	800c108 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0c0:	f000 faa6 	bl	800c610 <prvIsQueueFull>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d018      	beq.n	800c0fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	3310      	adds	r3, #16
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 ff52 	bl	800cf7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0da:	f000 fa31 	bl	800c540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0de:	f000 fd7f 	bl	800cbe0 <xTaskResumeAll>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f af7c 	bne.w	800bfe2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c11c <xQueueGenericSend+0x200>)
 800c0ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	e772      	b.n	800bfe2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0fe:	f000 fa1f 	bl	800c540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c102:	f000 fd6d 	bl	800cbe0 <xTaskResumeAll>
 800c106:	e76c      	b.n	800bfe2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c10a:	f000 fa19 	bl	800c540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c10e:	f000 fd67 	bl	800cbe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c114:	4618      	mov	r0, r3
 800c116:	3738      	adds	r7, #56	@ 0x38
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b090      	sub	sp, #64	@ 0x40
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <xQueueGenericSendFromISR+0x3e>
 800c156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <xQueueGenericSendFromISR+0x42>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <xQueueGenericSendFromISR+0x44>
 800c162:	2300      	movs	r3, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10b      	bne.n	800c180 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	e7fd      	b.n	800c17c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b02      	cmp	r3, #2
 800c184:	d103      	bne.n	800c18e <xQueueGenericSendFromISR+0x6e>
 800c186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d101      	bne.n	800c192 <xQueueGenericSendFromISR+0x72>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <xQueueGenericSendFromISR+0x74>
 800c192:	2300      	movs	r3, #0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10b      	bne.n	800c1b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	623b      	str	r3, [r7, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	bf00      	nop
 800c1ae:	e7fd      	b.n	800c1ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1b0:	f001 ff72 	bl	800e098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1b4:	f3ef 8211 	mrs	r2, BASEPRI
 800c1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	61fa      	str	r2, [r7, #28]
 800c1ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d302      	bcc.n	800c1e2 <xQueueGenericSendFromISR+0xc2>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d12f      	bne.n	800c242 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1f8:	f000 f912 	bl	800c420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c204:	d112      	bne.n	800c22c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d016      	beq.n	800c23c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c210:	3324      	adds	r3, #36	@ 0x24
 800c212:	4618      	mov	r0, r3
 800c214:	f000 ff04 	bl	800d020 <xTaskRemoveFromEventList>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00e      	beq.n	800c23c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	e007      	b.n	800c23c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c22c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c230:	3301      	adds	r3, #1
 800c232:	b2db      	uxtb	r3, r3
 800c234:	b25a      	sxtb	r2, r3
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c23c:	2301      	movs	r3, #1
 800c23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c240:	e001      	b.n	800c246 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c242:	2300      	movs	r3, #0
 800c244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c248:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c250:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c254:	4618      	mov	r0, r3
 800c256:	3740      	adds	r7, #64	@ 0x40
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08c      	sub	sp, #48	@ 0x30
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c268:	2300      	movs	r3, #0
 800c26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <xQueueReceive+0x32>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	623b      	str	r3, [r7, #32]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d103      	bne.n	800c29c <xQueueReceive+0x40>
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <xQueueReceive+0x44>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <xQueueReceive+0x46>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <xQueueReceive+0x62>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	61fb      	str	r3, [r7, #28]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2be:	f001 f89d 	bl	800d3fc <xTaskGetSchedulerState>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d102      	bne.n	800c2ce <xQueueReceive+0x72>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <xQueueReceive+0x76>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <xQueueReceive+0x78>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <xQueueReceive+0x94>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	61bb      	str	r3, [r7, #24]
}
 800c2ea:	bf00      	nop
 800c2ec:	bf00      	nop
 800c2ee:	e7fd      	b.n	800c2ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f0:	f001 fdf2 	bl	800ded8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01f      	beq.n	800c340 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c304:	f000 f8f6 	bl	800c4f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	1e5a      	subs	r2, r3, #1
 800c30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00f      	beq.n	800c338 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31a:	3310      	adds	r3, #16
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fe7f 	bl	800d020 <xTaskRemoveFromEventList>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d007      	beq.n	800c338 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c328:	4b3c      	ldr	r3, [pc, #240]	@ (800c41c <xQueueReceive+0x1c0>)
 800c32a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c338:	f001 fe00 	bl	800df3c <vPortExitCritical>
				return pdPASS;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e069      	b.n	800c414 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d103      	bne.n	800c34e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c346:	f001 fdf9 	bl	800df3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c34a:	2300      	movs	r3, #0
 800c34c:	e062      	b.n	800c414 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	2b00      	cmp	r3, #0
 800c352:	d106      	bne.n	800c362 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c354:	f107 0310 	add.w	r3, r7, #16
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 feed 	bl	800d138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c35e:	2301      	movs	r3, #1
 800c360:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c362:	f001 fdeb 	bl	800df3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c366:	f000 fc2d 	bl	800cbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c36a:	f001 fdb5 	bl	800ded8 <vPortEnterCritical>
 800c36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c374:	b25b      	sxtb	r3, r3
 800c376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c37a:	d103      	bne.n	800c384 <xQueueReceive+0x128>
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c38a:	b25b      	sxtb	r3, r3
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c390:	d103      	bne.n	800c39a <xQueueReceive+0x13e>
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	2200      	movs	r2, #0
 800c396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c39a:	f001 fdcf 	bl	800df3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c39e:	1d3a      	adds	r2, r7, #4
 800c3a0:	f107 0310 	add.w	r3, r7, #16
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fedc 	bl	800d164 <xTaskCheckForTimeOut>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d123      	bne.n	800c3fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3b4:	f000 f916 	bl	800c5e4 <prvIsQueueEmpty>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d017      	beq.n	800c3ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	3324      	adds	r3, #36	@ 0x24
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 fdd8 	bl	800cf7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ce:	f000 f8b7 	bl	800c540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3d2:	f000 fc05 	bl	800cbe0 <xTaskResumeAll>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d189      	bne.n	800c2f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <xQueueReceive+0x1c0>)
 800c3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	e780      	b.n	800c2f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3f0:	f000 f8a6 	bl	800c540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3f4:	f000 fbf4 	bl	800cbe0 <xTaskResumeAll>
 800c3f8:	e77a      	b.n	800c2f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3fc:	f000 f8a0 	bl	800c540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c400:	f000 fbee 	bl	800cbe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c406:	f000 f8ed 	bl	800c5e4 <prvIsQueueEmpty>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f43f af6f 	beq.w	800c2f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c414:	4618      	mov	r0, r3
 800c416:	3730      	adds	r7, #48	@ 0x30
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	e000ed04 	.word	0xe000ed04

0800c420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10d      	bne.n	800c45a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d14d      	bne.n	800c4e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 fff4 	bl	800d438 <xTaskPriorityDisinherit>
 800c450:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	609a      	str	r2, [r3, #8]
 800c458:	e043      	b.n	800c4e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d119      	bne.n	800c494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6858      	ldr	r0, [r3, #4]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c468:	461a      	mov	r2, r3
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	f00b fc53 	bl	8017d16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c478:	441a      	add	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	429a      	cmp	r2, r3
 800c488:	d32b      	bcc.n	800c4e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	605a      	str	r2, [r3, #4]
 800c492:	e026      	b.n	800c4e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	68d8      	ldr	r0, [r3, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49c:	461a      	mov	r2, r3
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	f00b fc39 	bl	8017d16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ac:	425b      	negs	r3, r3
 800c4ae:	441a      	add	r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	68da      	ldr	r2, [r3, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d207      	bcs.n	800c4d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689a      	ldr	r2, [r3, #8]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c8:	425b      	negs	r3, r3
 800c4ca:	441a      	add	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d105      	bne.n	800c4e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c4ea:	697b      	ldr	r3, [r7, #20]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c502:	2b00      	cmp	r3, #0
 800c504:	d018      	beq.n	800c538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50e:	441a      	add	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68da      	ldr	r2, [r3, #12]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d303      	bcc.n	800c528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68d9      	ldr	r1, [r3, #12]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c530:	461a      	mov	r2, r3
 800c532:	6838      	ldr	r0, [r7, #0]
 800c534:	f00b fbef 	bl	8017d16 <memcpy>
	}
}
 800c538:	bf00      	nop
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c548:	f001 fcc6 	bl	800ded8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c554:	e011      	b.n	800c57a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d012      	beq.n	800c584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	3324      	adds	r3, #36	@ 0x24
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fd5c 	bl	800d020 <xTaskRemoveFromEventList>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c56e:	f000 fe5d 	bl	800d22c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	3b01      	subs	r3, #1
 800c576:	b2db      	uxtb	r3, r3
 800c578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dce9      	bgt.n	800c556 <prvUnlockQueue+0x16>
 800c582:	e000      	b.n	800c586 <prvUnlockQueue+0x46>
					break;
 800c584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c58e:	f001 fcd5 	bl	800df3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c592:	f001 fca1 	bl	800ded8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c59c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c59e:	e011      	b.n	800c5c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d012      	beq.n	800c5ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3310      	adds	r3, #16
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fd37 	bl	800d020 <xTaskRemoveFromEventList>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5b8:	f000 fe38 	bl	800d22c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dce9      	bgt.n	800c5a0 <prvUnlockQueue+0x60>
 800c5cc:	e000      	b.n	800c5d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	22ff      	movs	r2, #255	@ 0xff
 800c5d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c5d8:	f001 fcb0 	bl	800df3c <vPortExitCritical>
}
 800c5dc:	bf00      	nop
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5ec:	f001 fc74 	bl	800ded8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d102      	bne.n	800c5fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	e001      	b.n	800c602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c602:	f001 fc9b 	bl	800df3c <vPortExitCritical>

	return xReturn;
 800c606:	68fb      	ldr	r3, [r7, #12]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c618:	f001 fc5e 	bl	800ded8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c624:	429a      	cmp	r2, r3
 800c626:	d102      	bne.n	800c62e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	e001      	b.n	800c632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c62e:	2300      	movs	r3, #0
 800c630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c632:	f001 fc83 	bl	800df3c <vPortExitCritical>

	return xReturn;
 800c636:	68fb      	ldr	r3, [r7, #12]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c64a:	2300      	movs	r3, #0
 800c64c:	60fb      	str	r3, [r7, #12]
 800c64e:	e014      	b.n	800c67a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c650:	4a0f      	ldr	r2, [pc, #60]	@ (800c690 <vQueueAddToRegistry+0x50>)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c65c:	490c      	ldr	r1, [pc, #48]	@ (800c690 <vQueueAddToRegistry+0x50>)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c666:	4a0a      	ldr	r2, [pc, #40]	@ (800c690 <vQueueAddToRegistry+0x50>)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	4413      	add	r3, r2
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c672:	e006      	b.n	800c682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3301      	adds	r3, #1
 800c678:	60fb      	str	r3, [r7, #12]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b07      	cmp	r3, #7
 800c67e:	d9e7      	bls.n	800c650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	24032664 	.word	0x24032664

0800c694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6a4:	f001 fc18 	bl	800ded8 <vPortEnterCritical>
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6ae:	b25b      	sxtb	r3, r3
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6b4:	d103      	bne.n	800c6be <vQueueWaitForMessageRestricted+0x2a>
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6c4:	b25b      	sxtb	r3, r3
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6ca:	d103      	bne.n	800c6d4 <vQueueWaitForMessageRestricted+0x40>
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6d4:	f001 fc32 	bl	800df3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d106      	bne.n	800c6ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	3324      	adds	r3, #36	@ 0x24
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 fc6d 	bl	800cfc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c6ee:	6978      	ldr	r0, [r7, #20]
 800c6f0:	f7ff ff26 	bl	800c540 <prvUnlockQueue>
	}
 800c6f4:	bf00      	nop
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08e      	sub	sp, #56	@ 0x38
 800c700:	af04      	add	r7, sp, #16
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10b      	bne.n	800c728 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	623b      	str	r3, [r7, #32]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10b      	bne.n	800c746 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	61fb      	str	r3, [r7, #28]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c746:	23a8      	movs	r3, #168	@ 0xa8
 800c748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2ba8      	cmp	r3, #168	@ 0xa8
 800c74e:	d00b      	beq.n	800c768 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	61bb      	str	r3, [r7, #24]
}
 800c762:	bf00      	nop
 800c764:	bf00      	nop
 800c766:	e7fd      	b.n	800c764 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01e      	beq.n	800c7ae <xTaskCreateStatic+0xb2>
 800c770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c772:	2b00      	cmp	r3, #0
 800c774:	d01b      	beq.n	800c7ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c77e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	2202      	movs	r2, #2
 800c784:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c788:	2300      	movs	r3, #0
 800c78a:	9303      	str	r3, [sp, #12]
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	9302      	str	r3, [sp, #8]
 800c790:	f107 0314 	add.w	r3, r7, #20
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 f851 	bl	800c848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7a8:	f000 f8f6 	bl	800c998 <prvAddNewTaskToReadyList>
 800c7ac:	e001      	b.n	800c7b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7b2:	697b      	ldr	r3, [r7, #20]
	}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3728      	adds	r7, #40	@ 0x28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08c      	sub	sp, #48	@ 0x30
 800c7c0:	af04      	add	r7, sp, #16
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f001 fca3 	bl	800e11c <pvPortMalloc>
 800c7d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00e      	beq.n	800c7fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c7de:	20a8      	movs	r0, #168	@ 0xa8
 800c7e0:	f001 fc9c 	bl	800e11c <pvPortMalloc>
 800c7e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800c7f2:	e005      	b.n	800c800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c7f4:	6978      	ldr	r0, [r7, #20]
 800c7f6:	f001 fd5f 	bl	800e2b8 <vPortFree>
 800c7fa:	e001      	b.n	800c800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d017      	beq.n	800c836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c80e:	88fa      	ldrh	r2, [r7, #6]
 800c810:	2300      	movs	r3, #0
 800c812:	9303      	str	r3, [sp, #12]
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	9302      	str	r3, [sp, #8]
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	68b9      	ldr	r1, [r7, #8]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 f80f 	bl	800c848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c82a:	69f8      	ldr	r0, [r7, #28]
 800c82c:	f000 f8b4 	bl	800c998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c830:	2301      	movs	r3, #1
 800c832:	61bb      	str	r3, [r7, #24]
 800c834:	e002      	b.n	800c83c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c83a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c83c:	69bb      	ldr	r3, [r7, #24]
	}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	461a      	mov	r2, r3
 800c860:	21a5      	movs	r1, #165	@ 0xa5
 800c862:	f00b f939 	bl	8017ad8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c870:	440b      	add	r3, r1
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	f023 0307 	bic.w	r3, r3, #7
 800c87e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00b      	beq.n	800c8a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	617b      	str	r3, [r7, #20]
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	e7fd      	b.n	800c89e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01f      	beq.n	800c8e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	61fb      	str	r3, [r7, #28]
 800c8ac:	e012      	b.n	800c8d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	7819      	ldrb	r1, [r3, #0]
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	3334      	adds	r3, #52	@ 0x34
 800c8be:	460a      	mov	r2, r1
 800c8c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d006      	beq.n	800c8dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	d9e9      	bls.n	800c8ae <prvInitialiseNewTask+0x66>
 800c8da:	e000      	b.n	800c8de <prvInitialiseNewTask+0x96>
			{
				break;
 800c8dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c8e6:	e003      	b.n	800c8f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f2:	2b37      	cmp	r3, #55	@ 0x37
 800c8f4:	d901      	bls.n	800c8fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c8f6:	2337      	movs	r3, #55	@ 0x37
 800c8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c904:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	2200      	movs	r2, #0
 800c90a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90e:	3304      	adds	r3, #4
 800c910:	4618      	mov	r0, r3
 800c912:	f7ff f965 	bl	800bbe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	3318      	adds	r3, #24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff f960 	bl	800bbe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c928:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c934:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	2200      	movs	r2, #0
 800c93a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	2200      	movs	r2, #0
 800c942:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	3354      	adds	r3, #84	@ 0x54
 800c94a:	224c      	movs	r2, #76	@ 0x4c
 800c94c:	2100      	movs	r1, #0
 800c94e:	4618      	mov	r0, r3
 800c950:	f00b f8c2 	bl	8017ad8 <memset>
 800c954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c956:	4a0d      	ldr	r2, [pc, #52]	@ (800c98c <prvInitialiseNewTask+0x144>)
 800c958:	659a      	str	r2, [r3, #88]	@ 0x58
 800c95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95c:	4a0c      	ldr	r2, [pc, #48]	@ (800c990 <prvInitialiseNewTask+0x148>)
 800c95e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c962:	4a0c      	ldr	r2, [pc, #48]	@ (800c994 <prvInitialiseNewTask+0x14c>)
 800c964:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	68f9      	ldr	r1, [r7, #12]
 800c96a:	69b8      	ldr	r0, [r7, #24]
 800c96c:	f001 f982 	bl	800dc74 <pxPortInitialiseStack>
 800c970:	4602      	mov	r2, r0
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c982:	bf00      	nop
 800c984:	3720      	adds	r7, #32
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	24068548 	.word	0x24068548
 800c990:	240685b0 	.word	0x240685b0
 800c994:	24068618 	.word	0x24068618

0800c998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9a0:	f001 fa9a 	bl	800ded8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9a4:	4b2d      	ldr	r3, [pc, #180]	@ (800ca5c <prvAddNewTaskToReadyList+0xc4>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	4a2c      	ldr	r2, [pc, #176]	@ (800ca5c <prvAddNewTaskToReadyList+0xc4>)
 800c9ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9ae:	4b2c      	ldr	r3, [pc, #176]	@ (800ca60 <prvAddNewTaskToReadyList+0xc8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9b6:	4a2a      	ldr	r2, [pc, #168]	@ (800ca60 <prvAddNewTaskToReadyList+0xc8>)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9bc:	4b27      	ldr	r3, [pc, #156]	@ (800ca5c <prvAddNewTaskToReadyList+0xc4>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d110      	bne.n	800c9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9c4:	f000 fc56 	bl	800d274 <prvInitialiseTaskLists>
 800c9c8:	e00d      	b.n	800c9e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9ca:	4b26      	ldr	r3, [pc, #152]	@ (800ca64 <prvAddNewTaskToReadyList+0xcc>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9d2:	4b23      	ldr	r3, [pc, #140]	@ (800ca60 <prvAddNewTaskToReadyList+0xc8>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d802      	bhi.n	800c9e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c9e0:	4a1f      	ldr	r2, [pc, #124]	@ (800ca60 <prvAddNewTaskToReadyList+0xc8>)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c9e6:	4b20      	ldr	r3, [pc, #128]	@ (800ca68 <prvAddNewTaskToReadyList+0xd0>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	4a1e      	ldr	r2, [pc, #120]	@ (800ca68 <prvAddNewTaskToReadyList+0xd0>)
 800c9ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c9f0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca68 <prvAddNewTaskToReadyList+0xd0>)
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9fc:	4b1b      	ldr	r3, [pc, #108]	@ (800ca6c <prvAddNewTaskToReadyList+0xd4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d903      	bls.n	800ca0c <prvAddNewTaskToReadyList+0x74>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca08:	4a18      	ldr	r2, [pc, #96]	@ (800ca6c <prvAddNewTaskToReadyList+0xd4>)
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca10:	4613      	mov	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4a15      	ldr	r2, [pc, #84]	@ (800ca70 <prvAddNewTaskToReadyList+0xd8>)
 800ca1a:	441a      	add	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7ff f8e9 	bl	800bbfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca28:	f001 fa88 	bl	800df3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca64 <prvAddNewTaskToReadyList+0xcc>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00e      	beq.n	800ca52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca34:	4b0a      	ldr	r3, [pc, #40]	@ (800ca60 <prvAddNewTaskToReadyList+0xc8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d207      	bcs.n	800ca52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca42:	4b0c      	ldr	r3, [pc, #48]	@ (800ca74 <prvAddNewTaskToReadyList+0xdc>)
 800ca44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	24032b78 	.word	0x24032b78
 800ca60:	240326a4 	.word	0x240326a4
 800ca64:	24032b84 	.word	0x24032b84
 800ca68:	24032b94 	.word	0x24032b94
 800ca6c:	24032b80 	.word	0x24032b80
 800ca70:	240326a8 	.word	0x240326a8
 800ca74:	e000ed04 	.word	0xe000ed04

0800ca78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d018      	beq.n	800cabc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca8a:	4b14      	ldr	r3, [pc, #80]	@ (800cadc <vTaskDelay+0x64>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00b      	beq.n	800caaa <vTaskDelay+0x32>
	__asm volatile
 800ca92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	60bb      	str	r3, [r7, #8]
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	e7fd      	b.n	800caa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800caaa:	f000 f88b 	bl	800cbc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800caae:	2100      	movs	r1, #0
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fd31 	bl	800d518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cab6:	f000 f893 	bl	800cbe0 <xTaskResumeAll>
 800caba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d107      	bne.n	800cad2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cac2:	4b07      	ldr	r3, [pc, #28]	@ (800cae0 <vTaskDelay+0x68>)
 800cac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cad2:	bf00      	nop
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	24032ba0 	.word	0x24032ba0
 800cae0:	e000ed04 	.word	0xe000ed04

0800cae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b08a      	sub	sp, #40	@ 0x28
 800cae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800caea:	2300      	movs	r3, #0
 800caec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800caf2:	463a      	mov	r2, r7
 800caf4:	1d39      	adds	r1, r7, #4
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7ff f81c 	bl	800bb38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	9202      	str	r2, [sp, #8]
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	460a      	mov	r2, r1
 800cb12:	4924      	ldr	r1, [pc, #144]	@ (800cba4 <vTaskStartScheduler+0xc0>)
 800cb14:	4824      	ldr	r0, [pc, #144]	@ (800cba8 <vTaskStartScheduler+0xc4>)
 800cb16:	f7ff fdf1 	bl	800c6fc <xTaskCreateStatic>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	4a23      	ldr	r2, [pc, #140]	@ (800cbac <vTaskStartScheduler+0xc8>)
 800cb1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb20:	4b22      	ldr	r3, [pc, #136]	@ (800cbac <vTaskStartScheduler+0xc8>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	617b      	str	r3, [r7, #20]
 800cb2c:	e001      	b.n	800cb32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d102      	bne.n	800cb3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb38:	f000 fd42 	bl	800d5c0 <xTimerCreateTimerTask>
 800cb3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d11b      	bne.n	800cb7c <vTaskStartScheduler+0x98>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	613b      	str	r3, [r7, #16]
}
 800cb56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb58:	4b15      	ldr	r3, [pc, #84]	@ (800cbb0 <vTaskStartScheduler+0xcc>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3354      	adds	r3, #84	@ 0x54
 800cb5e:	4a15      	ldr	r2, [pc, #84]	@ (800cbb4 <vTaskStartScheduler+0xd0>)
 800cb60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb62:	4b15      	ldr	r3, [pc, #84]	@ (800cbb8 <vTaskStartScheduler+0xd4>)
 800cb64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb6a:	4b14      	ldr	r3, [pc, #80]	@ (800cbbc <vTaskStartScheduler+0xd8>)
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb70:	4b13      	ldr	r3, [pc, #76]	@ (800cbc0 <vTaskStartScheduler+0xdc>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb76:	f001 f90b 	bl	800dd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb7a:	e00f      	b.n	800cb9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb82:	d10b      	bne.n	800cb9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	60fb      	str	r3, [r7, #12]
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	e7fd      	b.n	800cb98 <vTaskStartScheduler+0xb4>
}
 800cb9c:	bf00      	nop
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	08018b3c 	.word	0x08018b3c
 800cba8:	0800d245 	.word	0x0800d245
 800cbac:	24032b9c 	.word	0x24032b9c
 800cbb0:	240326a4 	.word	0x240326a4
 800cbb4:	240000c4 	.word	0x240000c4
 800cbb8:	24032b98 	.word	0x24032b98
 800cbbc:	24032b84 	.word	0x24032b84
 800cbc0:	24032b7c 	.word	0x24032b7c

0800cbc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbc8:	4b04      	ldr	r3, [pc, #16]	@ (800cbdc <vTaskSuspendAll+0x18>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	4a03      	ldr	r2, [pc, #12]	@ (800cbdc <vTaskSuspendAll+0x18>)
 800cbd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbd2:	bf00      	nop
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	24032ba0 	.word	0x24032ba0

0800cbe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cbee:	4b42      	ldr	r3, [pc, #264]	@ (800ccf8 <xTaskResumeAll+0x118>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <xTaskResumeAll+0x2e>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	603b      	str	r3, [r7, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	e7fd      	b.n	800cc0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc0e:	f001 f963 	bl	800ded8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc12:	4b39      	ldr	r3, [pc, #228]	@ (800ccf8 <xTaskResumeAll+0x118>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3b01      	subs	r3, #1
 800cc18:	4a37      	ldr	r2, [pc, #220]	@ (800ccf8 <xTaskResumeAll+0x118>)
 800cc1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc1c:	4b36      	ldr	r3, [pc, #216]	@ (800ccf8 <xTaskResumeAll+0x118>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d162      	bne.n	800ccea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc24:	4b35      	ldr	r3, [pc, #212]	@ (800ccfc <xTaskResumeAll+0x11c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d05e      	beq.n	800ccea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc2c:	e02f      	b.n	800cc8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2e:	4b34      	ldr	r3, [pc, #208]	@ (800cd00 <xTaskResumeAll+0x120>)
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3318      	adds	r3, #24
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff f83a 	bl	800bcb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	3304      	adds	r3, #4
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff f835 	bl	800bcb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc4e:	4b2d      	ldr	r3, [pc, #180]	@ (800cd04 <xTaskResumeAll+0x124>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d903      	bls.n	800cc5e <xTaskResumeAll+0x7e>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5a:	4a2a      	ldr	r2, [pc, #168]	@ (800cd04 <xTaskResumeAll+0x124>)
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4a27      	ldr	r2, [pc, #156]	@ (800cd08 <xTaskResumeAll+0x128>)
 800cc6c:	441a      	add	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3304      	adds	r3, #4
 800cc72:	4619      	mov	r1, r3
 800cc74:	4610      	mov	r0, r2
 800cc76:	f7fe ffc0 	bl	800bbfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc7e:	4b23      	ldr	r3, [pc, #140]	@ (800cd0c <xTaskResumeAll+0x12c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d302      	bcc.n	800cc8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cc88:	4b21      	ldr	r3, [pc, #132]	@ (800cd10 <xTaskResumeAll+0x130>)
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc8e:	4b1c      	ldr	r3, [pc, #112]	@ (800cd00 <xTaskResumeAll+0x120>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1cb      	bne.n	800cc2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc9c:	f000 fb8e 	bl	800d3bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cca0:	4b1c      	ldr	r3, [pc, #112]	@ (800cd14 <xTaskResumeAll+0x134>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d010      	beq.n	800ccce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccac:	f000 f846 	bl	800cd3c <xTaskIncrementTick>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ccb6:	4b16      	ldr	r3, [pc, #88]	@ (800cd10 <xTaskResumeAll+0x130>)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1f1      	bne.n	800ccac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ccc8:	4b12      	ldr	r3, [pc, #72]	@ (800cd14 <xTaskResumeAll+0x134>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccce:	4b10      	ldr	r3, [pc, #64]	@ (800cd10 <xTaskResumeAll+0x130>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d009      	beq.n	800ccea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccda:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <xTaskResumeAll+0x138>)
 800ccdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccea:	f001 f927 	bl	800df3c <vPortExitCritical>

	return xAlreadyYielded;
 800ccee:	68bb      	ldr	r3, [r7, #8]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	24032ba0 	.word	0x24032ba0
 800ccfc:	24032b78 	.word	0x24032b78
 800cd00:	24032b38 	.word	0x24032b38
 800cd04:	24032b80 	.word	0x24032b80
 800cd08:	240326a8 	.word	0x240326a8
 800cd0c:	240326a4 	.word	0x240326a4
 800cd10:	24032b8c 	.word	0x24032b8c
 800cd14:	24032b88 	.word	0x24032b88
 800cd18:	e000ed04 	.word	0xe000ed04

0800cd1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd22:	4b05      	ldr	r3, [pc, #20]	@ (800cd38 <xTaskGetTickCount+0x1c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd28:	687b      	ldr	r3, [r7, #4]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	24032b7c 	.word	0x24032b7c

0800cd3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd46:	4b4f      	ldr	r3, [pc, #316]	@ (800ce84 <xTaskIncrementTick+0x148>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 8090 	bne.w	800ce70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd50:	4b4d      	ldr	r3, [pc, #308]	@ (800ce88 <xTaskIncrementTick+0x14c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd58:	4a4b      	ldr	r2, [pc, #300]	@ (800ce88 <xTaskIncrementTick+0x14c>)
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d121      	bne.n	800cda8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd64:	4b49      	ldr	r3, [pc, #292]	@ (800ce8c <xTaskIncrementTick+0x150>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00b      	beq.n	800cd86 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	603b      	str	r3, [r7, #0]
}
 800cd80:	bf00      	nop
 800cd82:	bf00      	nop
 800cd84:	e7fd      	b.n	800cd82 <xTaskIncrementTick+0x46>
 800cd86:	4b41      	ldr	r3, [pc, #260]	@ (800ce8c <xTaskIncrementTick+0x150>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	4b40      	ldr	r3, [pc, #256]	@ (800ce90 <xTaskIncrementTick+0x154>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a3e      	ldr	r2, [pc, #248]	@ (800ce8c <xTaskIncrementTick+0x150>)
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	4a3e      	ldr	r2, [pc, #248]	@ (800ce90 <xTaskIncrementTick+0x154>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	4b3e      	ldr	r3, [pc, #248]	@ (800ce94 <xTaskIncrementTick+0x158>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	4a3c      	ldr	r2, [pc, #240]	@ (800ce94 <xTaskIncrementTick+0x158>)
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	f000 fb0a 	bl	800d3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cda8:	4b3b      	ldr	r3, [pc, #236]	@ (800ce98 <xTaskIncrementTick+0x15c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d349      	bcc.n	800ce46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdb2:	4b36      	ldr	r3, [pc, #216]	@ (800ce8c <xTaskIncrementTick+0x150>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d104      	bne.n	800cdc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdbc:	4b36      	ldr	r3, [pc, #216]	@ (800ce98 <xTaskIncrementTick+0x15c>)
 800cdbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdc2:	601a      	str	r2, [r3, #0]
					break;
 800cdc4:	e03f      	b.n	800ce46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc6:	4b31      	ldr	r3, [pc, #196]	@ (800ce8c <xTaskIncrementTick+0x150>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d203      	bcs.n	800cde6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdde:	4a2e      	ldr	r2, [pc, #184]	@ (800ce98 <xTaskIncrementTick+0x15c>)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cde4:	e02f      	b.n	800ce46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	3304      	adds	r3, #4
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe ff62 	bl	800bcb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	3318      	adds	r3, #24
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fe ff59 	bl	800bcb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce06:	4b25      	ldr	r3, [pc, #148]	@ (800ce9c <xTaskIncrementTick+0x160>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d903      	bls.n	800ce16 <xTaskIncrementTick+0xda>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce12:	4a22      	ldr	r2, [pc, #136]	@ (800ce9c <xTaskIncrementTick+0x160>)
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4a1f      	ldr	r2, [pc, #124]	@ (800cea0 <xTaskIncrementTick+0x164>)
 800ce24:	441a      	add	r2, r3
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	f7fe fee4 	bl	800bbfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce36:	4b1b      	ldr	r3, [pc, #108]	@ (800cea4 <xTaskIncrementTick+0x168>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d3b8      	bcc.n	800cdb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ce40:	2301      	movs	r3, #1
 800ce42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce44:	e7b5      	b.n	800cdb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce46:	4b17      	ldr	r3, [pc, #92]	@ (800cea4 <xTaskIncrementTick+0x168>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4c:	4914      	ldr	r1, [pc, #80]	@ (800cea0 <xTaskIncrementTick+0x164>)
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	440b      	add	r3, r1
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d901      	bls.n	800ce62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce62:	4b11      	ldr	r3, [pc, #68]	@ (800cea8 <xTaskIncrementTick+0x16c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d007      	beq.n	800ce7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	e004      	b.n	800ce7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce70:	4b0e      	ldr	r3, [pc, #56]	@ (800ceac <xTaskIncrementTick+0x170>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3301      	adds	r3, #1
 800ce76:	4a0d      	ldr	r2, [pc, #52]	@ (800ceac <xTaskIncrementTick+0x170>)
 800ce78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce7a:	697b      	ldr	r3, [r7, #20]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	24032ba0 	.word	0x24032ba0
 800ce88:	24032b7c 	.word	0x24032b7c
 800ce8c:	24032b30 	.word	0x24032b30
 800ce90:	24032b34 	.word	0x24032b34
 800ce94:	24032b90 	.word	0x24032b90
 800ce98:	24032b98 	.word	0x24032b98
 800ce9c:	24032b80 	.word	0x24032b80
 800cea0:	240326a8 	.word	0x240326a8
 800cea4:	240326a4 	.word	0x240326a4
 800cea8:	24032b8c 	.word	0x24032b8c
 800ceac:	24032b88 	.word	0x24032b88

0800ceb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ceb6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf64 <vTaskSwitchContext+0xb4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d003      	beq.n	800cec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cebe:	4b2a      	ldr	r3, [pc, #168]	@ (800cf68 <vTaskSwitchContext+0xb8>)
 800cec0:	2201      	movs	r2, #1
 800cec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cec4:	e047      	b.n	800cf56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cec6:	4b28      	ldr	r3, [pc, #160]	@ (800cf68 <vTaskSwitchContext+0xb8>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cecc:	4b27      	ldr	r3, [pc, #156]	@ (800cf6c <vTaskSwitchContext+0xbc>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e011      	b.n	800cef8 <vTaskSwitchContext+0x48>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <vTaskSwitchContext+0x42>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	607b      	str	r3, [r7, #4]
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	e7fd      	b.n	800ceee <vTaskSwitchContext+0x3e>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	491d      	ldr	r1, [pc, #116]	@ (800cf70 <vTaskSwitchContext+0xc0>)
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	440b      	add	r3, r1
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d0e3      	beq.n	800ced4 <vTaskSwitchContext+0x24>
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	4413      	add	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4a16      	ldr	r2, [pc, #88]	@ (800cf70 <vTaskSwitchContext+0xc0>)
 800cf18:	4413      	add	r3, r2
 800cf1a:	60bb      	str	r3, [r7, #8]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d104      	bne.n	800cf3c <vTaskSwitchContext+0x8c>
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	605a      	str	r2, [r3, #4]
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	4a0c      	ldr	r2, [pc, #48]	@ (800cf74 <vTaskSwitchContext+0xc4>)
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	4a09      	ldr	r2, [pc, #36]	@ (800cf6c <vTaskSwitchContext+0xbc>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf4c:	4b09      	ldr	r3, [pc, #36]	@ (800cf74 <vTaskSwitchContext+0xc4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3354      	adds	r3, #84	@ 0x54
 800cf52:	4a09      	ldr	r2, [pc, #36]	@ (800cf78 <vTaskSwitchContext+0xc8>)
 800cf54:	6013      	str	r3, [r2, #0]
}
 800cf56:	bf00      	nop
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	24032ba0 	.word	0x24032ba0
 800cf68:	24032b8c 	.word	0x24032b8c
 800cf6c:	24032b80 	.word	0x24032b80
 800cf70:	240326a8 	.word	0x240326a8
 800cf74:	240326a4 	.word	0x240326a4
 800cf78:	240000c4 	.word	0x240000c4

0800cf7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10b      	bne.n	800cfa4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60fb      	str	r3, [r7, #12]
}
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
 800cfa2:	e7fd      	b.n	800cfa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfa4:	4b07      	ldr	r3, [pc, #28]	@ (800cfc4 <vTaskPlaceOnEventList+0x48>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3318      	adds	r3, #24
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7fe fe48 	bl	800bc42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	6838      	ldr	r0, [r7, #0]
 800cfb6:	f000 faaf 	bl	800d518 <prvAddCurrentTaskToDelayedList>
}
 800cfba:	bf00      	nop
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	240326a4 	.word	0x240326a4

0800cfc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10b      	bne.n	800cff2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	617b      	str	r3, [r7, #20]
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	e7fd      	b.n	800cfee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cff2:	4b0a      	ldr	r3, [pc, #40]	@ (800d01c <vTaskPlaceOnEventListRestricted+0x54>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3318      	adds	r3, #24
 800cff8:	4619      	mov	r1, r3
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7fe fdfd 	bl	800bbfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d00a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	68b8      	ldr	r0, [r7, #8]
 800d010:	f000 fa82 	bl	800d518 <prvAddCurrentTaskToDelayedList>
	}
 800d014:	bf00      	nop
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	240326a4 	.word	0x240326a4

0800d020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	60fb      	str	r3, [r7, #12]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3318      	adds	r3, #24
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe fe2e 	bl	800bcb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d058:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d0 <xTaskRemoveFromEventList+0xb0>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d11d      	bne.n	800d09c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	3304      	adds	r3, #4
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fe25 	bl	800bcb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d06e:	4b19      	ldr	r3, [pc, #100]	@ (800d0d4 <xTaskRemoveFromEventList+0xb4>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	429a      	cmp	r2, r3
 800d074:	d903      	bls.n	800d07e <xTaskRemoveFromEventList+0x5e>
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07a:	4a16      	ldr	r2, [pc, #88]	@ (800d0d4 <xTaskRemoveFromEventList+0xb4>)
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d082:	4613      	mov	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4a13      	ldr	r2, [pc, #76]	@ (800d0d8 <xTaskRemoveFromEventList+0xb8>)
 800d08c:	441a      	add	r2, r3
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	3304      	adds	r3, #4
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f7fe fdb0 	bl	800bbfa <vListInsertEnd>
 800d09a:	e005      	b.n	800d0a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	3318      	adds	r3, #24
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	480e      	ldr	r0, [pc, #56]	@ (800d0dc <xTaskRemoveFromEventList+0xbc>)
 800d0a4:	f7fe fda9 	bl	800bbfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e0 <xTaskRemoveFromEventList+0xc0>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d905      	bls.n	800d0c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e4 <xTaskRemoveFromEventList+0xc4>)
 800d0bc:	2201      	movs	r2, #1
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	e001      	b.n	800d0c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d0c6:	697b      	ldr	r3, [r7, #20]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	24032ba0 	.word	0x24032ba0
 800d0d4:	24032b80 	.word	0x24032b80
 800d0d8:	240326a8 	.word	0x240326a8
 800d0dc:	24032b38 	.word	0x24032b38
 800d0e0:	240326a4 	.word	0x240326a4
 800d0e4:	24032b8c 	.word	0x24032b8c

0800d0e8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10b      	bne.n	800d10e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60fb      	str	r3, [r7, #12]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d10e:	f000 fee3 	bl	800ded8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d112:	4b07      	ldr	r3, [pc, #28]	@ (800d130 <vTaskSetTimeOutState+0x48>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d11a:	4b06      	ldr	r3, [pc, #24]	@ (800d134 <vTaskSetTimeOutState+0x4c>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d122:	f000 ff0b 	bl	800df3c <vPortExitCritical>
}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	24032b90 	.word	0x24032b90
 800d134:	24032b7c 	.word	0x24032b7c

0800d138 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d140:	4b06      	ldr	r3, [pc, #24]	@ (800d15c <vTaskInternalSetTimeOutState+0x24>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d148:	4b05      	ldr	r3, [pc, #20]	@ (800d160 <vTaskInternalSetTimeOutState+0x28>)
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	605a      	str	r2, [r3, #4]
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	24032b90 	.word	0x24032b90
 800d160:	24032b7c 	.word	0x24032b7c

0800d164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10b      	bne.n	800d18c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	613b      	str	r3, [r7, #16]
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	e7fd      	b.n	800d188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10b      	bne.n	800d1aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	60fb      	str	r3, [r7, #12]
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	e7fd      	b.n	800d1a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d1aa:	f000 fe95 	bl	800ded8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d224 <xTaskCheckForTimeOut+0xc0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	69ba      	ldr	r2, [r7, #24]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1c6:	d102      	bne.n	800d1ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	61fb      	str	r3, [r7, #28]
 800d1cc:	e023      	b.n	800d216 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b15      	ldr	r3, [pc, #84]	@ (800d228 <xTaskCheckForTimeOut+0xc4>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d007      	beq.n	800d1ea <xTaskCheckForTimeOut+0x86>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d302      	bcc.n	800d1ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	61fb      	str	r3, [r7, #28]
 800d1e8:	e015      	b.n	800d216 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d20b      	bcs.n	800d20c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	1ad2      	subs	r2, r2, r3
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff ff99 	bl	800d138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d206:	2300      	movs	r3, #0
 800d208:	61fb      	str	r3, [r7, #28]
 800d20a:	e004      	b.n	800d216 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d212:	2301      	movs	r3, #1
 800d214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d216:	f000 fe91 	bl	800df3c <vPortExitCritical>

	return xReturn;
 800d21a:	69fb      	ldr	r3, [r7, #28]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3720      	adds	r7, #32
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	24032b7c 	.word	0x24032b7c
 800d228:	24032b90 	.word	0x24032b90

0800d22c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d230:	4b03      	ldr	r3, [pc, #12]	@ (800d240 <vTaskMissedYield+0x14>)
 800d232:	2201      	movs	r2, #1
 800d234:	601a      	str	r2, [r3, #0]
}
 800d236:	bf00      	nop
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	24032b8c 	.word	0x24032b8c

0800d244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d24c:	f000 f852 	bl	800d2f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d250:	4b06      	ldr	r3, [pc, #24]	@ (800d26c <prvIdleTask+0x28>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d9f9      	bls.n	800d24c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d258:	4b05      	ldr	r3, [pc, #20]	@ (800d270 <prvIdleTask+0x2c>)
 800d25a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d268:	e7f0      	b.n	800d24c <prvIdleTask+0x8>
 800d26a:	bf00      	nop
 800d26c:	240326a8 	.word	0x240326a8
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
 800d27e:	e00c      	b.n	800d29a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4a12      	ldr	r2, [pc, #72]	@ (800d2d4 <prvInitialiseTaskLists+0x60>)
 800d28c:	4413      	add	r3, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fc86 	bl	800bba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3301      	adds	r3, #1
 800d298:	607b      	str	r3, [r7, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b37      	cmp	r3, #55	@ 0x37
 800d29e:	d9ef      	bls.n	800d280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2a0:	480d      	ldr	r0, [pc, #52]	@ (800d2d8 <prvInitialiseTaskLists+0x64>)
 800d2a2:	f7fe fc7d 	bl	800bba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2a6:	480d      	ldr	r0, [pc, #52]	@ (800d2dc <prvInitialiseTaskLists+0x68>)
 800d2a8:	f7fe fc7a 	bl	800bba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2ac:	480c      	ldr	r0, [pc, #48]	@ (800d2e0 <prvInitialiseTaskLists+0x6c>)
 800d2ae:	f7fe fc77 	bl	800bba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2b2:	480c      	ldr	r0, [pc, #48]	@ (800d2e4 <prvInitialiseTaskLists+0x70>)
 800d2b4:	f7fe fc74 	bl	800bba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2b8:	480b      	ldr	r0, [pc, #44]	@ (800d2e8 <prvInitialiseTaskLists+0x74>)
 800d2ba:	f7fe fc71 	bl	800bba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2be:	4b0b      	ldr	r3, [pc, #44]	@ (800d2ec <prvInitialiseTaskLists+0x78>)
 800d2c0:	4a05      	ldr	r2, [pc, #20]	@ (800d2d8 <prvInitialiseTaskLists+0x64>)
 800d2c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f0 <prvInitialiseTaskLists+0x7c>)
 800d2c6:	4a05      	ldr	r2, [pc, #20]	@ (800d2dc <prvInitialiseTaskLists+0x68>)
 800d2c8:	601a      	str	r2, [r3, #0]
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	240326a8 	.word	0x240326a8
 800d2d8:	24032b08 	.word	0x24032b08
 800d2dc:	24032b1c 	.word	0x24032b1c
 800d2e0:	24032b38 	.word	0x24032b38
 800d2e4:	24032b4c 	.word	0x24032b4c
 800d2e8:	24032b64 	.word	0x24032b64
 800d2ec:	24032b30 	.word	0x24032b30
 800d2f0:	24032b34 	.word	0x24032b34

0800d2f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2fa:	e019      	b.n	800d330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d2fc:	f000 fdec 	bl	800ded8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d300:	4b10      	ldr	r3, [pc, #64]	@ (800d344 <prvCheckTasksWaitingTermination+0x50>)
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3304      	adds	r3, #4
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fcd1 	bl	800bcb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d312:	4b0d      	ldr	r3, [pc, #52]	@ (800d348 <prvCheckTasksWaitingTermination+0x54>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3b01      	subs	r3, #1
 800d318:	4a0b      	ldr	r2, [pc, #44]	@ (800d348 <prvCheckTasksWaitingTermination+0x54>)
 800d31a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d31c:	4b0b      	ldr	r3, [pc, #44]	@ (800d34c <prvCheckTasksWaitingTermination+0x58>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3b01      	subs	r3, #1
 800d322:	4a0a      	ldr	r2, [pc, #40]	@ (800d34c <prvCheckTasksWaitingTermination+0x58>)
 800d324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d326:	f000 fe09 	bl	800df3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f810 	bl	800d350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d330:	4b06      	ldr	r3, [pc, #24]	@ (800d34c <prvCheckTasksWaitingTermination+0x58>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1e1      	bne.n	800d2fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d338:	bf00      	nop
 800d33a:	bf00      	nop
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	24032b4c 	.word	0x24032b4c
 800d348:	24032b78 	.word	0x24032b78
 800d34c:	24032b60 	.word	0x24032b60

0800d350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3354      	adds	r3, #84	@ 0x54
 800d35c:	4618      	mov	r0, r3
 800d35e:	f00a fc09 	bl	8017b74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d108      	bne.n	800d37e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d370:	4618      	mov	r0, r3
 800d372:	f000 ffa1 	bl	800e2b8 <vPortFree>
				vPortFree( pxTCB );
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 ff9e 	bl	800e2b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d37c:	e019      	b.n	800d3b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d384:	2b01      	cmp	r3, #1
 800d386:	d103      	bne.n	800d390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 ff95 	bl	800e2b8 <vPortFree>
	}
 800d38e:	e010      	b.n	800d3b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d396:	2b02      	cmp	r3, #2
 800d398:	d00b      	beq.n	800d3b2 <prvDeleteTCB+0x62>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	60fb      	str	r3, [r7, #12]
}
 800d3ac:	bf00      	nop
 800d3ae:	bf00      	nop
 800d3b0:	e7fd      	b.n	800d3ae <prvDeleteTCB+0x5e>
	}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f4 <prvResetNextTaskUnblockTime+0x38>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d104      	bne.n	800d3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800d3ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d3d4:	e008      	b.n	800d3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d6:	4b07      	ldr	r3, [pc, #28]	@ (800d3f4 <prvResetNextTaskUnblockTime+0x38>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	4a04      	ldr	r2, [pc, #16]	@ (800d3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800d3e6:	6013      	str	r3, [r2, #0]
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	24032b30 	.word	0x24032b30
 800d3f8:	24032b98 	.word	0x24032b98

0800d3fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d402:	4b0b      	ldr	r3, [pc, #44]	@ (800d430 <xTaskGetSchedulerState+0x34>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d40a:	2301      	movs	r3, #1
 800d40c:	607b      	str	r3, [r7, #4]
 800d40e:	e008      	b.n	800d422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d410:	4b08      	ldr	r3, [pc, #32]	@ (800d434 <xTaskGetSchedulerState+0x38>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d102      	bne.n	800d41e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d418:	2302      	movs	r3, #2
 800d41a:	607b      	str	r3, [r7, #4]
 800d41c:	e001      	b.n	800d422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d41e:	2300      	movs	r3, #0
 800d420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d422:	687b      	ldr	r3, [r7, #4]
	}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	24032b84 	.word	0x24032b84
 800d434:	24032ba0 	.word	0x24032ba0

0800d438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d444:	2300      	movs	r3, #0
 800d446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d058      	beq.n	800d500 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d44e:	4b2f      	ldr	r3, [pc, #188]	@ (800d50c <xTaskPriorityDisinherit+0xd4>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	429a      	cmp	r2, r3
 800d456:	d00b      	beq.n	800d470 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	60fb      	str	r3, [r7, #12]
}
 800d46a:	bf00      	nop
 800d46c:	bf00      	nop
 800d46e:	e7fd      	b.n	800d46c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10b      	bne.n	800d490 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60bb      	str	r3, [r7, #8]
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d494:	1e5a      	subs	r2, r3, #1
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d02c      	beq.n	800d500 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d128      	bne.n	800d500 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe fbfe 	bl	800bcb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d510 <xTaskPriorityDisinherit+0xd8>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d903      	bls.n	800d4e0 <xTaskPriorityDisinherit+0xa8>
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4dc:	4a0c      	ldr	r2, [pc, #48]	@ (800d510 <xTaskPriorityDisinherit+0xd8>)
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4a09      	ldr	r2, [pc, #36]	@ (800d514 <xTaskPriorityDisinherit+0xdc>)
 800d4ee:	441a      	add	r2, r3
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	3304      	adds	r3, #4
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f7fe fb7f 	bl	800bbfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d500:	697b      	ldr	r3, [r7, #20]
	}
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	240326a4 	.word	0x240326a4
 800d510:	24032b80 	.word	0x24032b80
 800d514:	240326a8 	.word	0x240326a8

0800d518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d522:	4b21      	ldr	r3, [pc, #132]	@ (800d5a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d528:	4b20      	ldr	r3, [pc, #128]	@ (800d5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3304      	adds	r3, #4
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fe fbc0 	bl	800bcb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d53a:	d10a      	bne.n	800d552 <prvAddCurrentTaskToDelayedList+0x3a>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d542:	4b1a      	ldr	r3, [pc, #104]	@ (800d5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3304      	adds	r3, #4
 800d548:	4619      	mov	r1, r3
 800d54a:	4819      	ldr	r0, [pc, #100]	@ (800d5b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d54c:	f7fe fb55 	bl	800bbfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d550:	e026      	b.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4413      	add	r3, r2
 800d558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d55a:	4b14      	ldr	r3, [pc, #80]	@ (800d5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	429a      	cmp	r2, r3
 800d568:	d209      	bcs.n	800d57e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d56a:	4b12      	ldr	r3, [pc, #72]	@ (800d5b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe fb63 	bl	800bc42 <vListInsert>
}
 800d57c:	e010      	b.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d57e:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f7fe fb59 	bl	800bc42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d590:	4b0a      	ldr	r3, [pc, #40]	@ (800d5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	429a      	cmp	r2, r3
 800d598:	d202      	bcs.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d59a:	4a08      	ldr	r2, [pc, #32]	@ (800d5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	6013      	str	r3, [r2, #0]
}
 800d5a0:	bf00      	nop
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	24032b7c 	.word	0x24032b7c
 800d5ac:	240326a4 	.word	0x240326a4
 800d5b0:	24032b64 	.word	0x24032b64
 800d5b4:	24032b34 	.word	0x24032b34
 800d5b8:	24032b30 	.word	0x24032b30
 800d5bc:	24032b98 	.word	0x24032b98

0800d5c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	@ 0x28
 800d5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5ca:	f000 fb13 	bl	800dbf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800d644 <xTimerCreateTimerTask+0x84>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d021      	beq.n	800d61a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d5de:	1d3a      	adds	r2, r7, #4
 800d5e0:	f107 0108 	add.w	r1, r7, #8
 800d5e4:	f107 030c 	add.w	r3, r7, #12
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fe fabf 	bl	800bb6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	9202      	str	r2, [sp, #8]
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	460a      	mov	r2, r1
 800d600:	4911      	ldr	r1, [pc, #68]	@ (800d648 <xTimerCreateTimerTask+0x88>)
 800d602:	4812      	ldr	r0, [pc, #72]	@ (800d64c <xTimerCreateTimerTask+0x8c>)
 800d604:	f7ff f87a 	bl	800c6fc <xTaskCreateStatic>
 800d608:	4603      	mov	r3, r0
 800d60a:	4a11      	ldr	r2, [pc, #68]	@ (800d650 <xTimerCreateTimerTask+0x90>)
 800d60c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d60e:	4b10      	ldr	r3, [pc, #64]	@ (800d650 <xTimerCreateTimerTask+0x90>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d616:	2301      	movs	r3, #1
 800d618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10b      	bne.n	800d638 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	613b      	str	r3, [r7, #16]
}
 800d632:	bf00      	nop
 800d634:	bf00      	nop
 800d636:	e7fd      	b.n	800d634 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d638:	697b      	ldr	r3, [r7, #20]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	24032bd4 	.word	0x24032bd4
 800d648:	08018b44 	.word	0x08018b44
 800d64c:	0800d78d 	.word	0x0800d78d
 800d650:	24032bd8 	.word	0x24032bd8

0800d654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b08a      	sub	sp, #40	@ 0x28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d662:	2300      	movs	r3, #0
 800d664:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xTimerGenericCommand+0x30>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	623b      	str	r3, [r7, #32]
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d684:	4b19      	ldr	r3, [pc, #100]	@ (800d6ec <xTimerGenericCommand+0x98>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d02a      	beq.n	800d6e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	dc18      	bgt.n	800d6d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d69e:	f7ff fead 	bl	800d3fc <xTaskGetSchedulerState>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d109      	bne.n	800d6bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6a8:	4b10      	ldr	r3, [pc, #64]	@ (800d6ec <xTimerGenericCommand+0x98>)
 800d6aa:	6818      	ldr	r0, [r3, #0]
 800d6ac:	f107 0110 	add.w	r1, r7, #16
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b4:	f7fe fc32 	bl	800bf1c <xQueueGenericSend>
 800d6b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6ba:	e012      	b.n	800d6e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d6ec <xTimerGenericCommand+0x98>)
 800d6be:	6818      	ldr	r0, [r3, #0]
 800d6c0:	f107 0110 	add.w	r1, r7, #16
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f7fe fc28 	bl	800bf1c <xQueueGenericSend>
 800d6cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6ce:	e008      	b.n	800d6e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6d0:	4b06      	ldr	r3, [pc, #24]	@ (800d6ec <xTimerGenericCommand+0x98>)
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	f107 0110 	add.w	r1, r7, #16
 800d6d8:	2300      	movs	r3, #0
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	f7fe fd20 	bl	800c120 <xQueueGenericSendFromISR>
 800d6e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3728      	adds	r7, #40	@ 0x28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	24032bd4 	.word	0x24032bd4

0800d6f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af02      	add	r7, sp, #8
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fa:	4b23      	ldr	r3, [pc, #140]	@ (800d788 <prvProcessExpiredTimer+0x98>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	3304      	adds	r3, #4
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fe fad3 	bl	800bcb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d714:	f003 0304 	and.w	r3, r3, #4
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d023      	beq.n	800d764 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	699a      	ldr	r2, [r3, #24]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	18d1      	adds	r1, r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	6978      	ldr	r0, [r7, #20]
 800d72a:	f000 f8d5 	bl	800d8d8 <prvInsertTimerInActiveList>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d020      	beq.n	800d776 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d734:	2300      	movs	r3, #0
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	2300      	movs	r3, #0
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	2100      	movs	r1, #0
 800d73e:	6978      	ldr	r0, [r7, #20]
 800d740:	f7ff ff88 	bl	800d654 <xTimerGenericCommand>
 800d744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d114      	bne.n	800d776 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60fb      	str	r3, [r7, #12]
}
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	e7fd      	b.n	800d760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d76a:	f023 0301 	bic.w	r3, r3, #1
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	6978      	ldr	r0, [r7, #20]
 800d77c:	4798      	blx	r3
}
 800d77e:	bf00      	nop
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	24032bcc 	.word	0x24032bcc

0800d78c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d794:	f107 0308 	add.w	r3, r7, #8
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 f859 	bl	800d850 <prvGetNextExpireTime>
 800d79e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f805 	bl	800d7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7aa:	f000 f8d7 	bl	800d95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7ae:	bf00      	nop
 800d7b0:	e7f0      	b.n	800d794 <prvTimerTask+0x8>
	...

0800d7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7be:	f7ff fa01 	bl	800cbc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 f866 	bl	800d898 <prvSampleTimeNow>
 800d7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d130      	bne.n	800d836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10a      	bne.n	800d7f0 <prvProcessTimerOrBlockTask+0x3c>
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d806      	bhi.n	800d7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7e2:	f7ff f9fd 	bl	800cbe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff ff81 	bl	800d6f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7ee:	e024      	b.n	800d83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d008      	beq.n	800d808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7f6:	4b13      	ldr	r3, [pc, #76]	@ (800d844 <prvProcessTimerOrBlockTask+0x90>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d101      	bne.n	800d804 <prvProcessTimerOrBlockTask+0x50>
 800d800:	2301      	movs	r3, #1
 800d802:	e000      	b.n	800d806 <prvProcessTimerOrBlockTask+0x52>
 800d804:	2300      	movs	r3, #0
 800d806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d808:	4b0f      	ldr	r3, [pc, #60]	@ (800d848 <prvProcessTimerOrBlockTask+0x94>)
 800d80a:	6818      	ldr	r0, [r3, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	4619      	mov	r1, r3
 800d816:	f7fe ff3d 	bl	800c694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d81a:	f7ff f9e1 	bl	800cbe0 <xTaskResumeAll>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d824:	4b09      	ldr	r3, [pc, #36]	@ (800d84c <prvProcessTimerOrBlockTask+0x98>)
 800d826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	f3bf 8f6f 	isb	sy
}
 800d834:	e001      	b.n	800d83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d836:	f7ff f9d3 	bl	800cbe0 <xTaskResumeAll>
}
 800d83a:	bf00      	nop
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	24032bd0 	.word	0x24032bd0
 800d848:	24032bd4 	.word	0x24032bd4
 800d84c:	e000ed04 	.word	0xe000ed04

0800d850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d858:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <prvGetNextExpireTime+0x44>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <prvGetNextExpireTime+0x16>
 800d862:	2201      	movs	r2, #1
 800d864:	e000      	b.n	800d868 <prvGetNextExpireTime+0x18>
 800d866:	2200      	movs	r2, #0
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d105      	bne.n	800d880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d874:	4b07      	ldr	r3, [pc, #28]	@ (800d894 <prvGetNextExpireTime+0x44>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	e001      	b.n	800d884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d880:	2300      	movs	r3, #0
 800d882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d884:	68fb      	ldr	r3, [r7, #12]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	24032bcc 	.word	0x24032bcc

0800d898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8a0:	f7ff fa3c 	bl	800cd1c <xTaskGetTickCount>
 800d8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d8d4 <prvSampleTimeNow+0x3c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d205      	bcs.n	800d8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8b0:	f000 f93a 	bl	800db28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e002      	b.n	800d8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8c2:	4a04      	ldr	r2, [pc, #16]	@ (800d8d4 <prvSampleTimeNow+0x3c>)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	24032bdc 	.word	0x24032bdc

0800d8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d812      	bhi.n	800d924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	1ad2      	subs	r2, r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d302      	bcc.n	800d912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	617b      	str	r3, [r7, #20]
 800d910:	e01b      	b.n	800d94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d912:	4b10      	ldr	r3, [pc, #64]	@ (800d954 <prvInsertTimerInActiveList+0x7c>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3304      	adds	r3, #4
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fe f990 	bl	800bc42 <vListInsert>
 800d922:	e012      	b.n	800d94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d206      	bcs.n	800d93a <prvInsertTimerInActiveList+0x62>
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	429a      	cmp	r2, r3
 800d932:	d302      	bcc.n	800d93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d934:	2301      	movs	r3, #1
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	e007      	b.n	800d94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d93a:	4b07      	ldr	r3, [pc, #28]	@ (800d958 <prvInsertTimerInActiveList+0x80>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3304      	adds	r3, #4
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fe f97c 	bl	800bc42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d94a:	697b      	ldr	r3, [r7, #20]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3718      	adds	r7, #24
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	24032bd0 	.word	0x24032bd0
 800d958:	24032bcc 	.word	0x24032bcc

0800d95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08e      	sub	sp, #56	@ 0x38
 800d960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d962:	e0ce      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	da19      	bge.n	800d99e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d96a:	1d3b      	adds	r3, r7, #4
 800d96c:	3304      	adds	r3, #4
 800d96e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10b      	bne.n	800d98e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	61fb      	str	r3, [r7, #28]
}
 800d988:	bf00      	nop
 800d98a:	bf00      	nop
 800d98c:	e7fd      	b.n	800d98a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d994:	6850      	ldr	r0, [r2, #4]
 800d996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d998:	6892      	ldr	r2, [r2, #8]
 800d99a:	4611      	mov	r1, r2
 800d99c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f2c0 80ae 	blt.w	800db02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe f97c 	bl	800bcb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9bc:	463b      	mov	r3, r7
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff ff6a 	bl	800d898 <prvSampleTimeNow>
 800d9c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b09      	cmp	r3, #9
 800d9ca:	f200 8097 	bhi.w	800dafc <prvProcessReceivedCommands+0x1a0>
 800d9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d4 <prvProcessReceivedCommands+0x78>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800d9fd 	.word	0x0800d9fd
 800d9d8:	0800d9fd 	.word	0x0800d9fd
 800d9dc:	0800d9fd 	.word	0x0800d9fd
 800d9e0:	0800da73 	.word	0x0800da73
 800d9e4:	0800da87 	.word	0x0800da87
 800d9e8:	0800dad3 	.word	0x0800dad3
 800d9ec:	0800d9fd 	.word	0x0800d9fd
 800d9f0:	0800d9fd 	.word	0x0800d9fd
 800d9f4:	0800da73 	.word	0x0800da73
 800d9f8:	0800da87 	.word	0x0800da87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da02:	f043 0301 	orr.w	r3, r3, #1
 800da06:	b2da      	uxtb	r2, r3
 800da08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	18d1      	adds	r1, r2, r3
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da1c:	f7ff ff5c 	bl	800d8d8 <prvInsertTimerInActiveList>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d06c      	beq.n	800db00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da34:	f003 0304 	and.w	r3, r3, #4
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d061      	beq.n	800db00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	441a      	add	r2, r3
 800da44:	2300      	movs	r3, #0
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	2300      	movs	r3, #0
 800da4a:	2100      	movs	r1, #0
 800da4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da4e:	f7ff fe01 	bl	800d654 <xTimerGenericCommand>
 800da52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d152      	bne.n	800db00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	61bb      	str	r3, [r7, #24]
}
 800da6c:	bf00      	nop
 800da6e:	bf00      	nop
 800da70:	e7fd      	b.n	800da6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800da84:	e03d      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da8c:	f043 0301 	orr.w	r3, r3, #1
 800da90:	b2da      	uxtb	r2, r3
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	617b      	str	r3, [r7, #20]
}
 800dab8:	bf00      	nop
 800daba:	bf00      	nop
 800dabc:	e7fd      	b.n	800daba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac0:	699a      	ldr	r2, [r3, #24]
 800dac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac4:	18d1      	adds	r1, r2, r3
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dacc:	f7ff ff04 	bl	800d8d8 <prvInsertTimerInActiveList>
					break;
 800dad0:	e017      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dad8:	f003 0302 	and.w	r3, r3, #2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d103      	bne.n	800dae8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dae2:	f000 fbe9 	bl	800e2b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dae6:	e00c      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daee:	f023 0301 	bic.w	r3, r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dafa:	e002      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dafc:	bf00      	nop
 800dafe:	e000      	b.n	800db02 <prvProcessReceivedCommands+0x1a6>
					break;
 800db00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db02:	4b08      	ldr	r3, [pc, #32]	@ (800db24 <prvProcessReceivedCommands+0x1c8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	1d39      	adds	r1, r7, #4
 800db08:	2200      	movs	r2, #0
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fba6 	bl	800c25c <xQueueReceive>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	f47f af26 	bne.w	800d964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	3730      	adds	r7, #48	@ 0x30
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	24032bd4 	.word	0x24032bd4

0800db28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b088      	sub	sp, #32
 800db2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db2e:	e049      	b.n	800dbc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db30:	4b2e      	ldr	r3, [pc, #184]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db3a:	4b2c      	ldr	r3, [pc, #176]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	3304      	adds	r3, #4
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fe f8b3 	bl	800bcb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db5c:	f003 0304 	and.w	r3, r3, #4
 800db60:	2b00      	cmp	r3, #0
 800db62:	d02f      	beq.n	800dbc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	4413      	add	r3, r2
 800db6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	429a      	cmp	r2, r3
 800db74:	d90e      	bls.n	800db94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db82:	4b1a      	ldr	r3, [pc, #104]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	3304      	adds	r3, #4
 800db8a:	4619      	mov	r1, r3
 800db8c:	4610      	mov	r0, r2
 800db8e:	f7fe f858 	bl	800bc42 <vListInsert>
 800db92:	e017      	b.n	800dbc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db94:	2300      	movs	r3, #0
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	2300      	movs	r3, #0
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	2100      	movs	r1, #0
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff fd58 	bl	800d654 <xTimerGenericCommand>
 800dba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10b      	bne.n	800dbc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	603b      	str	r3, [r7, #0]
}
 800dbbe:	bf00      	nop
 800dbc0:	bf00      	nop
 800dbc2:	e7fd      	b.n	800dbc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbc4:	4b09      	ldr	r3, [pc, #36]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1b0      	bne.n	800db30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbce:	4b07      	ldr	r3, [pc, #28]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbd4:	4b06      	ldr	r3, [pc, #24]	@ (800dbf0 <prvSwitchTimerLists+0xc8>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a04      	ldr	r2, [pc, #16]	@ (800dbec <prvSwitchTimerLists+0xc4>)
 800dbda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dbdc:	4a04      	ldr	r2, [pc, #16]	@ (800dbf0 <prvSwitchTimerLists+0xc8>)
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	6013      	str	r3, [r2, #0]
}
 800dbe2:	bf00      	nop
 800dbe4:	3718      	adds	r7, #24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	24032bcc 	.word	0x24032bcc
 800dbf0:	24032bd0 	.word	0x24032bd0

0800dbf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dbfa:	f000 f96d 	bl	800ded8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dbfe:	4b15      	ldr	r3, [pc, #84]	@ (800dc54 <prvCheckForValidListAndQueue+0x60>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d120      	bne.n	800dc48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc06:	4814      	ldr	r0, [pc, #80]	@ (800dc58 <prvCheckForValidListAndQueue+0x64>)
 800dc08:	f7fd ffca 	bl	800bba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc0c:	4813      	ldr	r0, [pc, #76]	@ (800dc5c <prvCheckForValidListAndQueue+0x68>)
 800dc0e:	f7fd ffc7 	bl	800bba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc12:	4b13      	ldr	r3, [pc, #76]	@ (800dc60 <prvCheckForValidListAndQueue+0x6c>)
 800dc14:	4a10      	ldr	r2, [pc, #64]	@ (800dc58 <prvCheckForValidListAndQueue+0x64>)
 800dc16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc18:	4b12      	ldr	r3, [pc, #72]	@ (800dc64 <prvCheckForValidListAndQueue+0x70>)
 800dc1a:	4a10      	ldr	r2, [pc, #64]	@ (800dc5c <prvCheckForValidListAndQueue+0x68>)
 800dc1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc1e:	2300      	movs	r3, #0
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	4b11      	ldr	r3, [pc, #68]	@ (800dc68 <prvCheckForValidListAndQueue+0x74>)
 800dc24:	4a11      	ldr	r2, [pc, #68]	@ (800dc6c <prvCheckForValidListAndQueue+0x78>)
 800dc26:	2110      	movs	r1, #16
 800dc28:	200a      	movs	r0, #10
 800dc2a:	f7fe f8d7 	bl	800bddc <xQueueGenericCreateStatic>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4a08      	ldr	r2, [pc, #32]	@ (800dc54 <prvCheckForValidListAndQueue+0x60>)
 800dc32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc34:	4b07      	ldr	r3, [pc, #28]	@ (800dc54 <prvCheckForValidListAndQueue+0x60>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <prvCheckForValidListAndQueue+0x60>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	490b      	ldr	r1, [pc, #44]	@ (800dc70 <prvCheckForValidListAndQueue+0x7c>)
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fcfc 	bl	800c640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc48:	f000 f978 	bl	800df3c <vPortExitCritical>
}
 800dc4c:	bf00      	nop
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	24032bd4 	.word	0x24032bd4
 800dc58:	24032ba4 	.word	0x24032ba4
 800dc5c:	24032bb8 	.word	0x24032bb8
 800dc60:	24032bcc 	.word	0x24032bcc
 800dc64:	24032bd0 	.word	0x24032bd0
 800dc68:	24032c80 	.word	0x24032c80
 800dc6c:	24032be0 	.word	0x24032be0
 800dc70:	08018b4c 	.word	0x08018b4c

0800dc74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	3b04      	subs	r3, #4
 800dc84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3b04      	subs	r3, #4
 800dc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f023 0201 	bic.w	r2, r3, #1
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3b04      	subs	r3, #4
 800dca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dca4:	4a0c      	ldr	r2, [pc, #48]	@ (800dcd8 <pxPortInitialiseStack+0x64>)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3b14      	subs	r3, #20
 800dcae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3b04      	subs	r3, #4
 800dcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f06f 0202 	mvn.w	r2, #2
 800dcc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3b20      	subs	r3, #32
 800dcc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcca:	68fb      	ldr	r3, [r7, #12]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	0800dcdd 	.word	0x0800dcdd

0800dcdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dce6:	4b13      	ldr	r3, [pc, #76]	@ (800dd34 <prvTaskExitError+0x58>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcee:	d00b      	beq.n	800dd08 <prvTaskExitError+0x2c>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	60fb      	str	r3, [r7, #12]
}
 800dd02:	bf00      	nop
 800dd04:	bf00      	nop
 800dd06:	e7fd      	b.n	800dd04 <prvTaskExitError+0x28>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	60bb      	str	r3, [r7, #8]
}
 800dd1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd1c:	bf00      	nop
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d0fc      	beq.n	800dd1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	24000014 	.word	0x24000014
	...

0800dd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd40:	4b07      	ldr	r3, [pc, #28]	@ (800dd60 <pxCurrentTCBConst2>)
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	6808      	ldr	r0, [r1, #0]
 800dd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	f380 8809 	msr	PSP, r0
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f04f 0000 	mov.w	r0, #0
 800dd56:	f380 8811 	msr	BASEPRI, r0
 800dd5a:	4770      	bx	lr
 800dd5c:	f3af 8000 	nop.w

0800dd60 <pxCurrentTCBConst2>:
 800dd60:	240326a4 	.word	0x240326a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop

0800dd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd68:	4808      	ldr	r0, [pc, #32]	@ (800dd8c <prvPortStartFirstTask+0x24>)
 800dd6a:	6800      	ldr	r0, [r0, #0]
 800dd6c:	6800      	ldr	r0, [r0, #0]
 800dd6e:	f380 8808 	msr	MSP, r0
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8814 	msr	CONTROL, r0
 800dd7a:	b662      	cpsie	i
 800dd7c:	b661      	cpsie	f
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	df00      	svc	0
 800dd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd8a:	bf00      	nop
 800dd8c:	e000ed08 	.word	0xe000ed08

0800dd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd96:	4b47      	ldr	r3, [pc, #284]	@ (800deb4 <xPortStartScheduler+0x124>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a47      	ldr	r2, [pc, #284]	@ (800deb8 <xPortStartScheduler+0x128>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d10b      	bne.n	800ddb8 <xPortStartScheduler+0x28>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	613b      	str	r3, [r7, #16]
}
 800ddb2:	bf00      	nop
 800ddb4:	bf00      	nop
 800ddb6:	e7fd      	b.n	800ddb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddb8:	4b3e      	ldr	r3, [pc, #248]	@ (800deb4 <xPortStartScheduler+0x124>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a3f      	ldr	r2, [pc, #252]	@ (800debc <xPortStartScheduler+0x12c>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d10b      	bne.n	800ddda <xPortStartScheduler+0x4a>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc6:	f383 8811 	msr	BASEPRI, r3
 800ddca:	f3bf 8f6f 	isb	sy
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	60fb      	str	r3, [r7, #12]
}
 800ddd4:	bf00      	nop
 800ddd6:	bf00      	nop
 800ddd8:	e7fd      	b.n	800ddd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddda:	4b39      	ldr	r3, [pc, #228]	@ (800dec0 <xPortStartScheduler+0x130>)
 800dddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	22ff      	movs	r2, #255	@ 0xff
 800ddea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	4b31      	ldr	r3, [pc, #196]	@ (800dec4 <xPortStartScheduler+0x134>)
 800de00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de02:	4b31      	ldr	r3, [pc, #196]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de04:	2207      	movs	r2, #7
 800de06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de08:	e009      	b.n	800de1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3b01      	subs	r3, #1
 800de10:	4a2d      	ldr	r2, [pc, #180]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de14:	78fb      	ldrb	r3, [r7, #3]
 800de16:	b2db      	uxtb	r3, r3
 800de18:	005b      	lsls	r3, r3, #1
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de1e:	78fb      	ldrb	r3, [r7, #3]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de26:	2b80      	cmp	r3, #128	@ 0x80
 800de28:	d0ef      	beq.n	800de0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de2a:	4b27      	ldr	r3, [pc, #156]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f1c3 0307 	rsb	r3, r3, #7
 800de32:	2b04      	cmp	r3, #4
 800de34:	d00b      	beq.n	800de4e <xPortStartScheduler+0xbe>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	60bb      	str	r3, [r7, #8]
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	e7fd      	b.n	800de4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de4e:	4b1e      	ldr	r3, [pc, #120]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	021b      	lsls	r3, r3, #8
 800de54:	4a1c      	ldr	r2, [pc, #112]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de58:	4b1b      	ldr	r3, [pc, #108]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800de60:	4a19      	ldr	r2, [pc, #100]	@ (800dec8 <xPortStartScheduler+0x138>)
 800de62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	b2da      	uxtb	r2, r3
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de6c:	4b17      	ldr	r3, [pc, #92]	@ (800decc <xPortStartScheduler+0x13c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a16      	ldr	r2, [pc, #88]	@ (800decc <xPortStartScheduler+0x13c>)
 800de72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800de76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de78:	4b14      	ldr	r3, [pc, #80]	@ (800decc <xPortStartScheduler+0x13c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a13      	ldr	r2, [pc, #76]	@ (800decc <xPortStartScheduler+0x13c>)
 800de7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800de82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de84:	f000 f8da 	bl	800e03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de88:	4b11      	ldr	r3, [pc, #68]	@ (800ded0 <xPortStartScheduler+0x140>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de8e:	f000 f8f9 	bl	800e084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de92:	4b10      	ldr	r3, [pc, #64]	@ (800ded4 <xPortStartScheduler+0x144>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a0f      	ldr	r2, [pc, #60]	@ (800ded4 <xPortStartScheduler+0x144>)
 800de98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800de9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de9e:	f7ff ff63 	bl	800dd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dea2:	f7ff f805 	bl	800ceb0 <vTaskSwitchContext>
	prvTaskExitError();
 800dea6:	f7ff ff19 	bl	800dcdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3718      	adds	r7, #24
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	e000ed00 	.word	0xe000ed00
 800deb8:	410fc271 	.word	0x410fc271
 800debc:	410fc270 	.word	0x410fc270
 800dec0:	e000e400 	.word	0xe000e400
 800dec4:	24032cd0 	.word	0x24032cd0
 800dec8:	24032cd4 	.word	0x24032cd4
 800decc:	e000ed20 	.word	0xe000ed20
 800ded0:	24000014 	.word	0x24000014
 800ded4:	e000ef34 	.word	0xe000ef34

0800ded8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	607b      	str	r3, [r7, #4]
}
 800def0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800def2:	4b10      	ldr	r3, [pc, #64]	@ (800df34 <vPortEnterCritical+0x5c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3301      	adds	r3, #1
 800def8:	4a0e      	ldr	r2, [pc, #56]	@ (800df34 <vPortEnterCritical+0x5c>)
 800defa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800defc:	4b0d      	ldr	r3, [pc, #52]	@ (800df34 <vPortEnterCritical+0x5c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d110      	bne.n	800df26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df04:	4b0c      	ldr	r3, [pc, #48]	@ (800df38 <vPortEnterCritical+0x60>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00b      	beq.n	800df26 <vPortEnterCritical+0x4e>
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	603b      	str	r3, [r7, #0]
}
 800df20:	bf00      	nop
 800df22:	bf00      	nop
 800df24:	e7fd      	b.n	800df22 <vPortEnterCritical+0x4a>
	}
}
 800df26:	bf00      	nop
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	24000014 	.word	0x24000014
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df42:	4b12      	ldr	r3, [pc, #72]	@ (800df8c <vPortExitCritical+0x50>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10b      	bne.n	800df62 <vPortExitCritical+0x26>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	607b      	str	r3, [r7, #4]
}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	e7fd      	b.n	800df5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df62:	4b0a      	ldr	r3, [pc, #40]	@ (800df8c <vPortExitCritical+0x50>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3b01      	subs	r3, #1
 800df68:	4a08      	ldr	r2, [pc, #32]	@ (800df8c <vPortExitCritical+0x50>)
 800df6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df6c:	4b07      	ldr	r3, [pc, #28]	@ (800df8c <vPortExitCritical+0x50>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d105      	bne.n	800df80 <vPortExitCritical+0x44>
 800df74:	2300      	movs	r3, #0
 800df76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	f383 8811 	msr	BASEPRI, r3
}
 800df7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	24000014 	.word	0x24000014

0800df90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df90:	f3ef 8009 	mrs	r0, PSP
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	4b15      	ldr	r3, [pc, #84]	@ (800dff0 <pxCurrentTCBConst>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	f01e 0f10 	tst.w	lr, #16
 800dfa0:	bf08      	it	eq
 800dfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfaa:	6010      	str	r0, [r2, #0]
 800dfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dfb4:	f380 8811 	msr	BASEPRI, r0
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f7fe ff76 	bl	800ceb0 <vTaskSwitchContext>
 800dfc4:	f04f 0000 	mov.w	r0, #0
 800dfc8:	f380 8811 	msr	BASEPRI, r0
 800dfcc:	bc09      	pop	{r0, r3}
 800dfce:	6819      	ldr	r1, [r3, #0]
 800dfd0:	6808      	ldr	r0, [r1, #0]
 800dfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd6:	f01e 0f10 	tst.w	lr, #16
 800dfda:	bf08      	it	eq
 800dfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfe0:	f380 8809 	msr	PSP, r0
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w

0800dff0 <pxCurrentTCBConst>:
 800dff0:	240326a4 	.word	0x240326a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop

0800dff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	607b      	str	r3, [r7, #4]
}
 800e010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e012:	f7fe fe93 	bl	800cd3c <xTaskIncrementTick>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d003      	beq.n	800e024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e01c:	4b06      	ldr	r3, [pc, #24]	@ (800e038 <xPortSysTickHandler+0x40>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	2300      	movs	r3, #0
 800e026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f383 8811 	msr	BASEPRI, r3
}
 800e02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e040:	4b0b      	ldr	r3, [pc, #44]	@ (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e046:	4b0b      	ldr	r3, [pc, #44]	@ (800e074 <vPortSetupTimerInterrupt+0x38>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	@ (800e078 <vPortSetupTimerInterrupt+0x3c>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a0a      	ldr	r2, [pc, #40]	@ (800e07c <vPortSetupTimerInterrupt+0x40>)
 800e052:	fba2 2303 	umull	r2, r3, r2, r3
 800e056:	099b      	lsrs	r3, r3, #6
 800e058:	4a09      	ldr	r2, [pc, #36]	@ (800e080 <vPortSetupTimerInterrupt+0x44>)
 800e05a:	3b01      	subs	r3, #1
 800e05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e05e:	4b04      	ldr	r3, [pc, #16]	@ (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e060:	2207      	movs	r2, #7
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	e000e010 	.word	0xe000e010
 800e074:	e000e018 	.word	0xe000e018
 800e078:	24000004 	.word	0x24000004
 800e07c:	10624dd3 	.word	0x10624dd3
 800e080:	e000e014 	.word	0xe000e014

0800e084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e094 <vPortEnableVFP+0x10>
 800e088:	6801      	ldr	r1, [r0, #0]
 800e08a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e08e:	6001      	str	r1, [r0, #0]
 800e090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e092:	bf00      	nop
 800e094:	e000ed88 	.word	0xe000ed88

0800e098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e09e:	f3ef 8305 	mrs	r3, IPSR
 800e0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d915      	bls.n	800e0d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0aa:	4a18      	ldr	r2, [pc, #96]	@ (800e10c <vPortValidateInterruptPriority+0x74>)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0b4:	4b16      	ldr	r3, [pc, #88]	@ (800e110 <vPortValidateInterruptPriority+0x78>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	7afa      	ldrb	r2, [r7, #11]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d20b      	bcs.n	800e0d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	607b      	str	r3, [r7, #4]
}
 800e0d0:	bf00      	nop
 800e0d2:	bf00      	nop
 800e0d4:	e7fd      	b.n	800e0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e114 <vPortValidateInterruptPriority+0x7c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e0de:	4b0e      	ldr	r3, [pc, #56]	@ (800e118 <vPortValidateInterruptPriority+0x80>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d90b      	bls.n	800e0fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	603b      	str	r3, [r7, #0]
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	e7fd      	b.n	800e0fa <vPortValidateInterruptPriority+0x62>
	}
 800e0fe:	bf00      	nop
 800e100:	3714      	adds	r7, #20
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	e000e3f0 	.word	0xe000e3f0
 800e110:	24032cd0 	.word	0x24032cd0
 800e114:	e000ed0c 	.word	0xe000ed0c
 800e118:	24032cd4 	.word	0x24032cd4

0800e11c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b08a      	sub	sp, #40	@ 0x28
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e124:	2300      	movs	r3, #0
 800e126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e128:	f7fe fd4c 	bl	800cbc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e12c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2a0 <pvPortMalloc+0x184>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e134:	f000 f924 	bl	800e380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e138:	4b5a      	ldr	r3, [pc, #360]	@ (800e2a4 <pvPortMalloc+0x188>)
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4013      	ands	r3, r2
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 8095 	bne.w	800e270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01e      	beq.n	800e18a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e14c:	2208      	movs	r2, #8
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4413      	add	r3, r2
 800e152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f003 0307 	and.w	r3, r3, #7
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d015      	beq.n	800e18a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f023 0307 	bic.w	r3, r3, #7
 800e164:	3308      	adds	r3, #8
 800e166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <pvPortMalloc+0x6e>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	617b      	str	r3, [r7, #20]
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	e7fd      	b.n	800e186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d06f      	beq.n	800e270 <pvPortMalloc+0x154>
 800e190:	4b45      	ldr	r3, [pc, #276]	@ (800e2a8 <pvPortMalloc+0x18c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	429a      	cmp	r2, r3
 800e198:	d86a      	bhi.n	800e270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e19a:	4b44      	ldr	r3, [pc, #272]	@ (800e2ac <pvPortMalloc+0x190>)
 800e19c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e19e:	4b43      	ldr	r3, [pc, #268]	@ (800e2ac <pvPortMalloc+0x190>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1a4:	e004      	b.n	800e1b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d903      	bls.n	800e1c2 <pvPortMalloc+0xa6>
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1f1      	bne.n	800e1a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1c2:	4b37      	ldr	r3, [pc, #220]	@ (800e2a0 <pvPortMalloc+0x184>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d051      	beq.n	800e270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2208      	movs	r2, #8
 800e1d2:	4413      	add	r3, r2
 800e1d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e0:	685a      	ldr	r2, [r3, #4]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	1ad2      	subs	r2, r2, r3
 800e1e6:	2308      	movs	r3, #8
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d920      	bls.n	800e230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	f003 0307 	and.w	r3, r3, #7
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00b      	beq.n	800e218 <pvPortMalloc+0xfc>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	613b      	str	r3, [r7, #16]
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e22a:	69b8      	ldr	r0, [r7, #24]
 800e22c:	f000 f90c 	bl	800e448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e230:	4b1d      	ldr	r3, [pc, #116]	@ (800e2a8 <pvPortMalloc+0x18c>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	4a1b      	ldr	r2, [pc, #108]	@ (800e2a8 <pvPortMalloc+0x18c>)
 800e23c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e23e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2a8 <pvPortMalloc+0x18c>)
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b0 <pvPortMalloc+0x194>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d203      	bcs.n	800e252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e24a:	4b17      	ldr	r3, [pc, #92]	@ (800e2a8 <pvPortMalloc+0x18c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a18      	ldr	r2, [pc, #96]	@ (800e2b0 <pvPortMalloc+0x194>)
 800e250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	685a      	ldr	r2, [r3, #4]
 800e256:	4b13      	ldr	r3, [pc, #76]	@ (800e2a4 <pvPortMalloc+0x188>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	431a      	orrs	r2, r3
 800e25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e266:	4b13      	ldr	r3, [pc, #76]	@ (800e2b4 <pvPortMalloc+0x198>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3301      	adds	r3, #1
 800e26c:	4a11      	ldr	r2, [pc, #68]	@ (800e2b4 <pvPortMalloc+0x198>)
 800e26e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e270:	f7fe fcb6 	bl	800cbe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	f003 0307 	and.w	r3, r3, #7
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00b      	beq.n	800e296 <pvPortMalloc+0x17a>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	60fb      	str	r3, [r7, #12]
}
 800e290:	bf00      	nop
 800e292:	bf00      	nop
 800e294:	e7fd      	b.n	800e292 <pvPortMalloc+0x176>
	return pvReturn;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3728      	adds	r7, #40	@ 0x28
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	24063a20 	.word	0x24063a20
 800e2a4:	24063a34 	.word	0x24063a34
 800e2a8:	24063a24 	.word	0x24063a24
 800e2ac:	24063a18 	.word	0x24063a18
 800e2b0:	24063a28 	.word	0x24063a28
 800e2b4:	24063a2c 	.word	0x24063a2c

0800e2b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d04f      	beq.n	800e36a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2ca:	2308      	movs	r3, #8
 800e2cc:	425b      	negs	r3, r3
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	685a      	ldr	r2, [r3, #4]
 800e2dc:	4b25      	ldr	r3, [pc, #148]	@ (800e374 <vPortFree+0xbc>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10b      	bne.n	800e2fe <vPortFree+0x46>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	60fb      	str	r3, [r7, #12]
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	e7fd      	b.n	800e2fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <vPortFree+0x66>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	60bb      	str	r3, [r7, #8]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	4b14      	ldr	r3, [pc, #80]	@ (800e374 <vPortFree+0xbc>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4013      	ands	r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d01e      	beq.n	800e36a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d11a      	bne.n	800e36a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	4b0e      	ldr	r3, [pc, #56]	@ (800e374 <vPortFree+0xbc>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	43db      	mvns	r3, r3
 800e33e:	401a      	ands	r2, r3
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e344:	f7fe fc3e 	bl	800cbc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	4b0a      	ldr	r3, [pc, #40]	@ (800e378 <vPortFree+0xc0>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4413      	add	r3, r2
 800e352:	4a09      	ldr	r2, [pc, #36]	@ (800e378 <vPortFree+0xc0>)
 800e354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e356:	6938      	ldr	r0, [r7, #16]
 800e358:	f000 f876 	bl	800e448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e35c:	4b07      	ldr	r3, [pc, #28]	@ (800e37c <vPortFree+0xc4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3301      	adds	r3, #1
 800e362:	4a06      	ldr	r2, [pc, #24]	@ (800e37c <vPortFree+0xc4>)
 800e364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e366:	f7fe fc3b 	bl	800cbe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e36a:	bf00      	nop
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	24063a34 	.word	0x24063a34
 800e378:	24063a24 	.word	0x24063a24
 800e37c:	24063a30 	.word	0x24063a30

0800e380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e386:	4b29      	ldr	r3, [pc, #164]	@ (800e42c <prvHeapInit+0xac>)
 800e388:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e38a:	4b29      	ldr	r3, [pc, #164]	@ (800e430 <prvHeapInit+0xb0>)
 800e38c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f003 0307 	and.w	r3, r3, #7
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00c      	beq.n	800e3b2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3307      	adds	r3, #7
 800e39c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f023 0307 	bic.w	r3, r3, #7
 800e3a4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	4a20      	ldr	r2, [pc, #128]	@ (800e430 <prvHeapInit+0xb0>)
 800e3ae:	4413      	add	r3, r2
 800e3b0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3b6:	4a1f      	ldr	r2, [pc, #124]	@ (800e434 <prvHeapInit+0xb4>)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3bc:	4b1d      	ldr	r3, [pc, #116]	@ (800e434 <prvHeapInit+0xb4>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3ca:	2208      	movs	r2, #8
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	1a9b      	subs	r3, r3, r2
 800e3d0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f023 0307 	bic.w	r3, r3, #7
 800e3d8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	4a16      	ldr	r2, [pc, #88]	@ (800e438 <prvHeapInit+0xb8>)
 800e3de:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3e0:	4b15      	ldr	r3, [pc, #84]	@ (800e438 <prvHeapInit+0xb8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3e8:	4b13      	ldr	r3, [pc, #76]	@ (800e438 <prvHeapInit+0xb8>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	1ad2      	subs	r2, r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e438 <prvHeapInit+0xb8>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	4a0c      	ldr	r2, [pc, #48]	@ (800e43c <prvHeapInit+0xbc>)
 800e40c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	4a0b      	ldr	r2, [pc, #44]	@ (800e440 <prvHeapInit+0xc0>)
 800e414:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e416:	4b0b      	ldr	r3, [pc, #44]	@ (800e444 <prvHeapInit+0xc4>)
 800e418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e41c:	601a      	str	r2, [r3, #0]
}
 800e41e:	bf00      	nop
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	00030d40 	.word	0x00030d40
 800e430:	24032cd8 	.word	0x24032cd8
 800e434:	24063a18 	.word	0x24063a18
 800e438:	24063a20 	.word	0x24063a20
 800e43c:	24063a28 	.word	0x24063a28
 800e440:	24063a24 	.word	0x24063a24
 800e444:	24063a34 	.word	0x24063a34

0800e448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e450:	4b28      	ldr	r3, [pc, #160]	@ (800e4f4 <prvInsertBlockIntoFreeList+0xac>)
 800e452:	60fb      	str	r3, [r7, #12]
 800e454:	e002      	b.n	800e45c <prvInsertBlockIntoFreeList+0x14>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	429a      	cmp	r2, r3
 800e464:	d8f7      	bhi.n	800e456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	4413      	add	r3, r2
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	429a      	cmp	r2, r3
 800e476:	d108      	bne.n	800e48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	441a      	add	r2, r3
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	441a      	add	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d118      	bne.n	800e4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b15      	ldr	r3, [pc, #84]	@ (800e4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d00d      	beq.n	800e4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	441a      	add	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	601a      	str	r2, [r3, #0]
 800e4c4:	e008      	b.n	800e4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	e003      	b.n	800e4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d002      	beq.n	800e4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	24063a18 	.word	0x24063a18
 800e4f8:	24063a20 	.word	0x24063a20

0800e4fc <rcl_get_zero_initialized_publisher>:
 800e4fc:	4b01      	ldr	r3, [pc, #4]	@ (800e504 <rcl_get_zero_initialized_publisher+0x8>)
 800e4fe:	6818      	ldr	r0, [r3, #0]
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	08018bc4 	.word	0x08018bc4

0800e508 <rcl_publisher_init>:
 800e508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e50c:	b088      	sub	sp, #32
 800e50e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e510:	2e00      	cmp	r6, #0
 800e512:	d06b      	beq.n	800e5ec <rcl_publisher_init+0xe4>
 800e514:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800e518:	4605      	mov	r5, r0
 800e51a:	460f      	mov	r7, r1
 800e51c:	4690      	mov	r8, r2
 800e51e:	4650      	mov	r0, sl
 800e520:	4699      	mov	r9, r3
 800e522:	f000 f9e5 	bl	800e8f0 <rcutils_allocator_is_valid>
 800e526:	f080 0401 	eor.w	r4, r0, #1
 800e52a:	b2e4      	uxtb	r4, r4
 800e52c:	2c00      	cmp	r4, #0
 800e52e:	d15d      	bne.n	800e5ec <rcl_publisher_init+0xe4>
 800e530:	2d00      	cmp	r5, #0
 800e532:	d05b      	beq.n	800e5ec <rcl_publisher_init+0xe4>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b123      	cbz	r3, 800e542 <rcl_publisher_init+0x3a>
 800e538:	2464      	movs	r4, #100	@ 0x64
 800e53a:	4620      	mov	r0, r4
 800e53c:	b008      	add	sp, #32
 800e53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e542:	4638      	mov	r0, r7
 800e544:	f005 f872 	bl	801362c <rcl_node_is_valid>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d054      	beq.n	800e5f6 <rcl_publisher_init+0xee>
 800e54c:	f1b8 0f00 	cmp.w	r8, #0
 800e550:	d04c      	beq.n	800e5ec <rcl_publisher_init+0xe4>
 800e552:	fab9 f389 	clz	r3, r9
 800e556:	095b      	lsrs	r3, r3, #5
 800e558:	f1b9 0f00 	cmp.w	r9, #0
 800e55c:	d046      	beq.n	800e5ec <rcl_publisher_init+0xe4>
 800e55e:	aa07      	add	r2, sp, #28
 800e560:	9307      	str	r3, [sp, #28]
 800e562:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e566:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e56a:	9205      	str	r2, [sp, #20]
 800e56c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e570:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e574:	4649      	mov	r1, r9
 800e576:	4638      	mov	r0, r7
 800e578:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800e57c:	f005 f8ae 	bl	80136dc <rcl_node_resolve_name>
 800e580:	2800      	cmp	r0, #0
 800e582:	d14f      	bne.n	800e624 <rcl_publisher_init+0x11c>
 800e584:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e586:	20c8      	movs	r0, #200	@ 0xc8
 800e588:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e58a:	4798      	blx	r3
 800e58c:	6028      	str	r0, [r5, #0]
 800e58e:	2800      	cmp	r0, #0
 800e590:	d050      	beq.n	800e634 <rcl_publisher_init+0x12c>
 800e592:	4638      	mov	r0, r7
 800e594:	f005 f86c 	bl	8013670 <rcl_node_get_rmw_handle>
 800e598:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e59c:	4641      	mov	r1, r8
 800e59e:	9a07      	ldr	r2, [sp, #28]
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	4633      	mov	r3, r6
 800e5a4:	682c      	ldr	r4, [r5, #0]
 800e5a6:	f000 fa61 	bl	800ea6c <rmw_create_publisher>
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800e5b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e5b4:	b370      	cbz	r0, 800e614 <rcl_publisher_init+0x10c>
 800e5b6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e5ba:	f000 fb3b 	bl	800ec34 <rmw_publisher_get_actual_qos>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	b9d0      	cbnz	r0, 800e5fa <rcl_publisher_init+0xf2>
 800e5c4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800e5c8:	4631      	mov	r1, r6
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e5d0:	2270      	movs	r2, #112	@ 0x70
 800e5d2:	f009 fba0 	bl	8017d16 <memcpy>
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e5dc:	9807      	ldr	r0, [sp, #28]
 800e5de:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e5e0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e5e2:	4798      	blx	r3
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	b008      	add	sp, #32
 800e5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ec:	240b      	movs	r4, #11
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	b008      	add	sp, #32
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	24c8      	movs	r4, #200	@ 0xc8
 800e5f8:	e79f      	b.n	800e53a <rcl_publisher_init+0x32>
 800e5fa:	b1cb      	cbz	r3, 800e630 <rcl_publisher_init+0x128>
 800e5fc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e600:	b142      	cbz	r2, 800e614 <rcl_publisher_init+0x10c>
 800e602:	4638      	mov	r0, r7
 800e604:	f005 f834 	bl	8013670 <rcl_node_get_rmw_handle>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e60e:	f000 fb25 	bl	800ec5c <rmw_destroy_publisher>
 800e612:	682b      	ldr	r3, [r5, #0]
 800e614:	4618      	mov	r0, r3
 800e616:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e618:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e61a:	2401      	movs	r4, #1
 800e61c:	4790      	blx	r2
 800e61e:	2300      	movs	r3, #0
 800e620:	602b      	str	r3, [r5, #0]
 800e622:	e7db      	b.n	800e5dc <rcl_publisher_init+0xd4>
 800e624:	2867      	cmp	r0, #103	@ 0x67
 800e626:	d007      	beq.n	800e638 <rcl_publisher_init+0x130>
 800e628:	2869      	cmp	r0, #105	@ 0x69
 800e62a:	d005      	beq.n	800e638 <rcl_publisher_init+0x130>
 800e62c:	280a      	cmp	r0, #10
 800e62e:	d001      	beq.n	800e634 <rcl_publisher_init+0x12c>
 800e630:	2401      	movs	r4, #1
 800e632:	e7d3      	b.n	800e5dc <rcl_publisher_init+0xd4>
 800e634:	240a      	movs	r4, #10
 800e636:	e7d1      	b.n	800e5dc <rcl_publisher_init+0xd4>
 800e638:	2467      	movs	r4, #103	@ 0x67
 800e63a:	e7cf      	b.n	800e5dc <rcl_publisher_init+0xd4>

0800e63c <rcl_publisher_get_default_options>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4d14      	ldr	r5, [pc, #80]	@ (800e690 <rcl_publisher_get_default_options+0x54>)
 800e640:	b088      	sub	sp, #32
 800e642:	4604      	mov	r4, r0
 800e644:	2250      	movs	r2, #80	@ 0x50
 800e646:	4913      	ldr	r1, [pc, #76]	@ (800e694 <rcl_publisher_get_default_options+0x58>)
 800e648:	4628      	mov	r0, r5
 800e64a:	f009 fb64 	bl	8017d16 <memcpy>
 800e64e:	a802      	add	r0, sp, #8
 800e650:	f000 f940 	bl	800e8d4 <rcutils_get_default_allocator>
 800e654:	f10d 0c08 	add.w	ip, sp, #8
 800e658:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e65c:	466e      	mov	r6, sp
 800e65e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e662:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e666:	f8dc 3000 	ldr.w	r3, [ip]
 800e66a:	4630      	mov	r0, r6
 800e66c:	f8ce 3000 	str.w	r3, [lr]
 800e670:	f000 f97e 	bl	800e970 <rmw_get_default_publisher_options>
 800e674:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e678:	2270      	movs	r2, #112	@ 0x70
 800e67a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e67e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e682:	4629      	mov	r1, r5
 800e684:	4620      	mov	r0, r4
 800e686:	f009 fb46 	bl	8017d16 <memcpy>
 800e68a:	4620      	mov	r0, r4
 800e68c:	b008      	add	sp, #32
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	24063a38 	.word	0x24063a38
 800e694:	08018bc8 	.word	0x08018bc8

0800e698 <rcl_publish>:
 800e698:	b1f8      	cbz	r0, 800e6da <rcl_publish+0x42>
 800e69a:	6803      	ldr	r3, [r0, #0]
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	4604      	mov	r4, r0
 800e6a0:	b1b3      	cbz	r3, 800e6d0 <rcl_publish+0x38>
 800e6a2:	4616      	mov	r6, r2
 800e6a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e6a8:	b192      	cbz	r2, 800e6d0 <rcl_publish+0x38>
 800e6aa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	f004 fbdc 	bl	8012e6c <rcl_context_is_valid>
 800e6b4:	b160      	cbz	r0, 800e6d0 <rcl_publish+0x38>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e6bc:	b140      	cbz	r0, 800e6d0 <rcl_publish+0x38>
 800e6be:	b155      	cbz	r5, 800e6d6 <rcl_publish+0x3e>
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f000 f972 	bl	800e9ac <rmw_publish>
 800e6c8:	3800      	subs	r0, #0
 800e6ca:	bf18      	it	ne
 800e6cc:	2001      	movne	r0, #1
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}
 800e6d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e6d4:	bd70      	pop	{r4, r5, r6, pc}
 800e6d6:	200b      	movs	r0, #11
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
 800e6da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e6de:	4770      	bx	lr

0800e6e0 <rclc_support_init>:
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	b3bb      	cbz	r3, 800e758 <rclc_support_init+0x78>
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	b3a8      	cbz	r0, 800e758 <rclc_support_init+0x78>
 800e6ec:	461c      	mov	r4, r3
 800e6ee:	460f      	mov	r7, r1
 800e6f0:	4690      	mov	r8, r2
 800e6f2:	f004 fd27 	bl	8013144 <rcl_get_zero_initialized_init_options>
 800e6f6:	f104 050c 	add.w	r5, r4, #12
 800e6fa:	9005      	str	r0, [sp, #20]
 800e6fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e700:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e704:	a805      	add	r0, sp, #20
 800e706:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e70a:	f004 fd1d 	bl	8013148 <rcl_init_options_init>
 800e70e:	4605      	mov	r5, r0
 800e710:	b9e0      	cbnz	r0, 800e74c <rclc_support_init+0x6c>
 800e712:	ad02      	add	r5, sp, #8
 800e714:	4628      	mov	r0, r5
 800e716:	f004 fb9f 	bl	8012e58 <rcl_get_zero_initialized_context>
 800e71a:	4633      	mov	r3, r6
 800e71c:	aa05      	add	r2, sp, #20
 800e71e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e722:	e886 0003 	stmia.w	r6, {r0, r1}
 800e726:	4641      	mov	r1, r8
 800e728:	4638      	mov	r0, r7
 800e72a:	f004 fc05 	bl	8012f38 <rcl_init>
 800e72e:	4605      	mov	r5, r0
 800e730:	b9b8      	cbnz	r0, 800e762 <rclc_support_init+0x82>
 800e732:	4622      	mov	r2, r4
 800e734:	f106 010c 	add.w	r1, r6, #12
 800e738:	2003      	movs	r0, #3
 800e73a:	60b4      	str	r4, [r6, #8]
 800e73c:	f005 f9bc 	bl	8013ab8 <rcl_clock_init>
 800e740:	4605      	mov	r5, r0
 800e742:	b970      	cbnz	r0, 800e762 <rclc_support_init+0x82>
 800e744:	a805      	add	r0, sp, #20
 800e746:	f004 fd65 	bl	8013214 <rcl_init_options_fini>
 800e74a:	b108      	cbz	r0, 800e750 <rclc_support_init+0x70>
 800e74c:	f000 f8f4 	bl	800e938 <rcutils_reset_error>
 800e750:	4628      	mov	r0, r5
 800e752:	b006      	add	sp, #24
 800e754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e758:	250b      	movs	r5, #11
 800e75a:	4628      	mov	r0, r5
 800e75c:	b006      	add	sp, #24
 800e75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e762:	f000 f8e9 	bl	800e938 <rcutils_reset_error>
 800e766:	a805      	add	r0, sp, #20
 800e768:	f004 fd54 	bl	8013214 <rcl_init_options_fini>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d0ef      	beq.n	800e750 <rclc_support_init+0x70>
 800e770:	e7ec      	b.n	800e74c <rclc_support_init+0x6c>
 800e772:	bf00      	nop

0800e774 <rclc_node_init_default>:
 800e774:	2b00      	cmp	r3, #0
 800e776:	bf18      	it	ne
 800e778:	2a00      	cmpne	r2, #0
 800e77a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e77e:	4616      	mov	r6, r2
 800e780:	bf0c      	ite	eq
 800e782:	2201      	moveq	r2, #1
 800e784:	2200      	movne	r2, #0
 800e786:	b0a1      	sub	sp, #132	@ 0x84
 800e788:	2900      	cmp	r1, #0
 800e78a:	bf08      	it	eq
 800e78c:	f042 0201 	orreq.w	r2, r2, #1
 800e790:	bb22      	cbnz	r2, 800e7dc <rclc_node_init_default+0x68>
 800e792:	4604      	mov	r4, r0
 800e794:	b310      	cbz	r0, 800e7dc <rclc_node_init_default+0x68>
 800e796:	f10d 0810 	add.w	r8, sp, #16
 800e79a:	461f      	mov	r7, r3
 800e79c:	460d      	mov	r5, r1
 800e79e:	f10d 0918 	add.w	r9, sp, #24
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	f004 fdf0 	bl	8013388 <rcl_get_zero_initialized_node>
 800e7a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e7ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	f004 ff63 	bl	801367c <rcl_node_get_default_options>
 800e7b6:	4640      	mov	r0, r8
 800e7b8:	f004 fde6 	bl	8013388 <rcl_get_zero_initialized_node>
 800e7bc:	f8cd 9000 	str.w	r9, [sp]
 800e7c0:	463b      	mov	r3, r7
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e7c8:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f004 fde4 	bl	801339c <rcl_node_init>
 800e7d4:	b930      	cbnz	r0, 800e7e4 <rclc_node_init_default+0x70>
 800e7d6:	b021      	add	sp, #132	@ 0x84
 800e7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7dc:	200b      	movs	r0, #11
 800e7de:	b021      	add	sp, #132	@ 0x84
 800e7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7e4:	9003      	str	r0, [sp, #12]
 800e7e6:	f000 f8a7 	bl	800e938 <rcutils_reset_error>
 800e7ea:	f000 f8a5 	bl	800e938 <rcutils_reset_error>
 800e7ee:	9803      	ldr	r0, [sp, #12]
 800e7f0:	b021      	add	sp, #132	@ 0x84
 800e7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7f6:	bf00      	nop

0800e7f8 <rclc_publisher_init_default>:
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	bf18      	it	ne
 800e7fc:	2a00      	cmpne	r2, #0
 800e7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e802:	4616      	mov	r6, r2
 800e804:	bf0c      	ite	eq
 800e806:	2201      	moveq	r2, #1
 800e808:	2200      	movne	r2, #0
 800e80a:	b0a0      	sub	sp, #128	@ 0x80
 800e80c:	2900      	cmp	r1, #0
 800e80e:	bf08      	it	eq
 800e810:	f042 0201 	orreq.w	r2, r2, #1
 800e814:	bb1a      	cbnz	r2, 800e85e <rclc_publisher_init_default+0x66>
 800e816:	4604      	mov	r4, r0
 800e818:	b308      	cbz	r0, 800e85e <rclc_publisher_init_default+0x66>
 800e81a:	f10d 0810 	add.w	r8, sp, #16
 800e81e:	461f      	mov	r7, r3
 800e820:	460d      	mov	r5, r1
 800e822:	f7ff fe6b 	bl	800e4fc <rcl_get_zero_initialized_publisher>
 800e826:	6020      	str	r0, [r4, #0]
 800e828:	4640      	mov	r0, r8
 800e82a:	f7ff ff07 	bl	800e63c <rcl_publisher_get_default_options>
 800e82e:	2250      	movs	r2, #80	@ 0x50
 800e830:	490d      	ldr	r1, [pc, #52]	@ (800e868 <rclc_publisher_init_default+0x70>)
 800e832:	4640      	mov	r0, r8
 800e834:	f009 fa6f 	bl	8017d16 <memcpy>
 800e838:	463b      	mov	r3, r7
 800e83a:	4632      	mov	r2, r6
 800e83c:	4629      	mov	r1, r5
 800e83e:	4620      	mov	r0, r4
 800e840:	f8cd 8000 	str.w	r8, [sp]
 800e844:	f7ff fe60 	bl	800e508 <rcl_publisher_init>
 800e848:	b910      	cbnz	r0, 800e850 <rclc_publisher_init_default+0x58>
 800e84a:	b020      	add	sp, #128	@ 0x80
 800e84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e850:	9003      	str	r0, [sp, #12]
 800e852:	f000 f871 	bl	800e938 <rcutils_reset_error>
 800e856:	9803      	ldr	r0, [sp, #12]
 800e858:	b020      	add	sp, #128	@ 0x80
 800e85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85e:	200b      	movs	r0, #11
 800e860:	b020      	add	sp, #128	@ 0x80
 800e862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e866:	bf00      	nop
 800e868:	08018c18 	.word	0x08018c18

0800e86c <__default_zero_allocate>:
 800e86c:	f008 bd86 	b.w	801737c <calloc>

0800e870 <__default_reallocate>:
 800e870:	f008 bf12 	b.w	8017698 <realloc>

0800e874 <__default_deallocate>:
 800e874:	f008 bdee 	b.w	8017454 <free>

0800e878 <__default_allocate>:
 800e878:	f008 bde4 	b.w	8017444 <malloc>

0800e87c <rcutils_get_zero_initialized_allocator>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	4c05      	ldr	r4, [pc, #20]	@ (800e894 <rcutils_get_zero_initialized_allocator+0x18>)
 800e880:	4686      	mov	lr, r0
 800e882:	4684      	mov	ip, r0
 800e884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e886:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	4670      	mov	r0, lr
 800e88e:	f8cc 3000 	str.w	r3, [ip]
 800e892:	bd10      	pop	{r4, pc}
 800e894:	08018c68 	.word	0x08018c68

0800e898 <rcutils_set_default_allocator>:
 800e898:	b1a8      	cbz	r0, 800e8c6 <rcutils_set_default_allocator+0x2e>
 800e89a:	6802      	ldr	r2, [r0, #0]
 800e89c:	b1a2      	cbz	r2, 800e8c8 <rcutils_set_default_allocator+0x30>
 800e89e:	6841      	ldr	r1, [r0, #4]
 800e8a0:	b1a1      	cbz	r1, 800e8cc <rcutils_set_default_allocator+0x34>
 800e8a2:	b410      	push	{r4}
 800e8a4:	68c4      	ldr	r4, [r0, #12]
 800e8a6:	b164      	cbz	r4, 800e8c2 <rcutils_set_default_allocator+0x2a>
 800e8a8:	6880      	ldr	r0, [r0, #8]
 800e8aa:	b138      	cbz	r0, 800e8bc <rcutils_set_default_allocator+0x24>
 800e8ac:	4b08      	ldr	r3, [pc, #32]	@ (800e8d0 <rcutils_set_default_allocator+0x38>)
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	e7fa      	b.n	800e8bc <rcutils_set_default_allocator+0x24>
 800e8c6:	4770      	bx	lr
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4770      	bx	lr
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	4770      	bx	lr
 800e8d0:	24000018 	.word	0x24000018

0800e8d4 <rcutils_get_default_allocator>:
 800e8d4:	b510      	push	{r4, lr}
 800e8d6:	4c05      	ldr	r4, [pc, #20]	@ (800e8ec <rcutils_get_default_allocator+0x18>)
 800e8d8:	4686      	mov	lr, r0
 800e8da:	4684      	mov	ip, r0
 800e8dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	4670      	mov	r0, lr
 800e8e6:	f8cc 3000 	str.w	r3, [ip]
 800e8ea:	bd10      	pop	{r4, pc}
 800e8ec:	24000018 	.word	0x24000018

0800e8f0 <rcutils_allocator_is_valid>:
 800e8f0:	b158      	cbz	r0, 800e90a <rcutils_allocator_is_valid+0x1a>
 800e8f2:	6803      	ldr	r3, [r0, #0]
 800e8f4:	b143      	cbz	r3, 800e908 <rcutils_allocator_is_valid+0x18>
 800e8f6:	6843      	ldr	r3, [r0, #4]
 800e8f8:	b133      	cbz	r3, 800e908 <rcutils_allocator_is_valid+0x18>
 800e8fa:	68c3      	ldr	r3, [r0, #12]
 800e8fc:	b123      	cbz	r3, 800e908 <rcutils_allocator_is_valid+0x18>
 800e8fe:	6880      	ldr	r0, [r0, #8]
 800e900:	3800      	subs	r0, #0
 800e902:	bf18      	it	ne
 800e904:	2001      	movne	r0, #1
 800e906:	4770      	bx	lr
 800e908:	4618      	mov	r0, r3
 800e90a:	4770      	bx	lr

0800e90c <rcutils_get_error_string>:
 800e90c:	4b06      	ldr	r3, [pc, #24]	@ (800e928 <rcutils_get_error_string+0x1c>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	b13b      	cbz	r3, 800e922 <rcutils_get_error_string+0x16>
 800e912:	4b06      	ldr	r3, [pc, #24]	@ (800e92c <rcutils_get_error_string+0x20>)
 800e914:	781a      	ldrb	r2, [r3, #0]
 800e916:	b90a      	cbnz	r2, 800e91c <rcutils_get_error_string+0x10>
 800e918:	2201      	movs	r2, #1
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	4b04      	ldr	r3, [pc, #16]	@ (800e930 <rcutils_get_error_string+0x24>)
 800e91e:	7818      	ldrb	r0, [r3, #0]
 800e920:	4770      	bx	lr
 800e922:	4b04      	ldr	r3, [pc, #16]	@ (800e934 <rcutils_get_error_string+0x28>)
 800e924:	7818      	ldrb	r0, [r3, #0]
 800e926:	4770      	bx	lr
 800e928:	24063aa8 	.word	0x24063aa8
 800e92c:	24063ac1 	.word	0x24063ac1
 800e930:	24063ac0 	.word	0x24063ac0
 800e934:	08018c7c 	.word	0x08018c7c

0800e938 <rcutils_reset_error>:
 800e938:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e958 <rcutils_reset_error+0x20>
 800e93c:	2300      	movs	r3, #0
 800e93e:	4a08      	ldr	r2, [pc, #32]	@ (800e960 <rcutils_reset_error+0x28>)
 800e940:	4808      	ldr	r0, [pc, #32]	@ (800e964 <rcutils_reset_error+0x2c>)
 800e942:	8013      	strh	r3, [r2, #0]
 800e944:	4908      	ldr	r1, [pc, #32]	@ (800e968 <rcutils_reset_error+0x30>)
 800e946:	7003      	strb	r3, [r0, #0]
 800e948:	700b      	strb	r3, [r1, #0]
 800e94a:	ed82 7b02 	vstr	d7, [r2, #8]
 800e94e:	4a07      	ldr	r2, [pc, #28]	@ (800e96c <rcutils_reset_error+0x34>)
 800e950:	7013      	strb	r3, [r2, #0]
 800e952:	4770      	bx	lr
 800e954:	f3af 8000 	nop.w
	...
 800e960:	24063ab0 	.word	0x24063ab0
 800e964:	24063ac1 	.word	0x24063ac1
 800e968:	24063ac0 	.word	0x24063ac0
 800e96c:	24063aa8 	.word	0x24063aa8

0800e970 <rmw_get_default_publisher_options>:
 800e970:	2200      	movs	r2, #0
 800e972:	6002      	str	r2, [r0, #0]
 800e974:	7102      	strb	r2, [r0, #4]
 800e976:	4770      	bx	lr

0800e978 <rmw_uros_set_custom_transport>:
 800e978:	b470      	push	{r4, r5, r6}
 800e97a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e97e:	b162      	cbz	r2, 800e99a <rmw_uros_set_custom_transport+0x22>
 800e980:	b15b      	cbz	r3, 800e99a <rmw_uros_set_custom_transport+0x22>
 800e982:	b155      	cbz	r5, 800e99a <rmw_uros_set_custom_transport+0x22>
 800e984:	b14e      	cbz	r6, 800e99a <rmw_uros_set_custom_transport+0x22>
 800e986:	4c06      	ldr	r4, [pc, #24]	@ (800e9a0 <rmw_uros_set_custom_transport+0x28>)
 800e988:	7020      	strb	r0, [r4, #0]
 800e98a:	2000      	movs	r0, #0
 800e98c:	6166      	str	r6, [r4, #20]
 800e98e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e992:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e996:	bc70      	pop	{r4, r5, r6}
 800e998:	4770      	bx	lr
 800e99a:	200b      	movs	r0, #11
 800e99c:	bc70      	pop	{r4, r5, r6}
 800e99e:	4770      	bx	lr
 800e9a0:	24063ac4 	.word	0x24063ac4

0800e9a4 <flush_session>:
 800e9a4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e9a6:	f002 bb6d 	b.w	8011084 <uxr_run_session_until_confirm_delivery>
 800e9aa:	bf00      	nop

0800e9ac <rmw_publish>:
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d053      	beq.n	800ea58 <rmw_publish+0xac>
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	b08e      	sub	sp, #56	@ 0x38
 800e9b6:	2900      	cmp	r1, #0
 800e9b8:	d04b      	beq.n	800ea52 <rmw_publish+0xa6>
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	6800      	ldr	r0, [r0, #0]
 800e9be:	f000 fc77 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d045      	beq.n	800ea52 <rmw_publish+0xa6>
 800e9c6:	6866      	ldr	r6, [r4, #4]
 800e9c8:	2e00      	cmp	r6, #0
 800e9ca:	d042      	beq.n	800ea52 <rmw_publish+0xa6>
 800e9cc:	69b4      	ldr	r4, [r6, #24]
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	4798      	blx	r3
 800e9d4:	69f3      	ldr	r3, [r6, #28]
 800e9d6:	9005      	str	r0, [sp, #20]
 800e9d8:	b113      	cbz	r3, 800e9e0 <rmw_publish+0x34>
 800e9da:	a805      	add	r0, sp, #20
 800e9dc:	4798      	blx	r3
 800e9de:	9805      	ldr	r0, [sp, #20]
 800e9e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	9000      	str	r0, [sp, #0]
 800e9e8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e9ec:	6972      	ldr	r2, [r6, #20]
 800e9ee:	ab06      	add	r3, sp, #24
 800e9f0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e9f2:	f003 f999 	bl	8011d28 <uxr_prepare_output_stream>
 800e9f6:	b1d8      	cbz	r0, 800ea30 <rmw_publish+0x84>
 800e9f8:	68a3      	ldr	r3, [r4, #8]
 800e9fa:	a906      	add	r1, sp, #24
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	4798      	blx	r3
 800ea00:	6a33      	ldr	r3, [r6, #32]
 800ea02:	4604      	mov	r4, r0
 800ea04:	b10b      	cbz	r3, 800ea0a <rmw_publish+0x5e>
 800ea06:	a806      	add	r0, sp, #24
 800ea08:	4798      	blx	r3
 800ea0a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ea14:	d022      	beq.n	800ea5c <rmw_publish+0xb0>
 800ea16:	6918      	ldr	r0, [r3, #16]
 800ea18:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800ea1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea1e:	f002 fb31 	bl	8011084 <uxr_run_session_until_confirm_delivery>
 800ea22:	4020      	ands	r0, r4
 800ea24:	b2c4      	uxtb	r4, r0
 800ea26:	f084 0001 	eor.w	r0, r4, #1
 800ea2a:	b2c0      	uxtb	r0, r0
 800ea2c:	b00e      	add	sp, #56	@ 0x38
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ea34:	6918      	ldr	r0, [r3, #16]
 800ea36:	9b05      	ldr	r3, [sp, #20]
 800ea38:	9602      	str	r6, [sp, #8]
 800ea3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	4b09      	ldr	r3, [pc, #36]	@ (800ea68 <rmw_publish+0xbc>)
 800ea42:	9301      	str	r3, [sp, #4]
 800ea44:	ab06      	add	r3, sp, #24
 800ea46:	6972      	ldr	r2, [r6, #20]
 800ea48:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ea4a:	f003 f99d 	bl	8011d88 <uxr_prepare_output_stream_fragmented>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d1d2      	bne.n	800e9f8 <rmw_publish+0x4c>
 800ea52:	2001      	movs	r0, #1
 800ea54:	b00e      	add	sp, #56	@ 0x38
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
 800ea58:	2001      	movs	r0, #1
 800ea5a:	4770      	bx	lr
 800ea5c:	6918      	ldr	r0, [r3, #16]
 800ea5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea62:	f001 ff8f 	bl	8010984 <uxr_flash_output_streams>
 800ea66:	e7de      	b.n	800ea26 <rmw_publish+0x7a>
 800ea68:	0800e9a5 	.word	0x0800e9a5

0800ea6c <rmw_create_publisher>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	b087      	sub	sp, #28
 800ea72:	2800      	cmp	r0, #0
 800ea74:	f000 80d2 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800ea78:	460e      	mov	r6, r1
 800ea7a:	2900      	cmp	r1, #0
 800ea7c:	f000 80ce 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800ea80:	4604      	mov	r4, r0
 800ea82:	6800      	ldr	r0, [r0, #0]
 800ea84:	4615      	mov	r5, r2
 800ea86:	461f      	mov	r7, r3
 800ea88:	f000 fc12 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 800ea8c:	f080 0001 	eor.w	r0, r0, #1
 800ea90:	b2c0      	uxtb	r0, r0
 800ea92:	2800      	cmp	r0, #0
 800ea94:	f040 80c2 	bne.w	800ec1c <rmw_create_publisher+0x1b0>
 800ea98:	2d00      	cmp	r5, #0
 800ea9a:	f000 80bf 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800ea9e:	782b      	ldrb	r3, [r5, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 80bb 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800eaa6:	2f00      	cmp	r7, #0
 800eaa8:	f000 80b8 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800eaac:	485e      	ldr	r0, [pc, #376]	@ (800ec28 <rmw_create_publisher+0x1bc>)
 800eaae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eab2:	f005 fdbf 	bl	8014634 <get_memory>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f000 80b0 	beq.w	800ec1c <rmw_create_publisher+0x1b0>
 800eabc:	6884      	ldr	r4, [r0, #8]
 800eabe:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800eac2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800eac6:	f005 fdd9 	bl	801467c <rmw_get_implementation_identifier>
 800eaca:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800eace:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ead2:	4628      	mov	r0, r5
 800ead4:	f7f1 fc0e 	bl	80002f4 <strlen>
 800ead8:	3001      	adds	r0, #1
 800eada:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800eade:	283c      	cmp	r0, #60	@ 0x3c
 800eae0:	f200 808f 	bhi.w	800ec02 <rmw_create_publisher+0x196>
 800eae4:	462b      	mov	r3, r5
 800eae6:	4a51      	ldr	r2, [pc, #324]	@ (800ec2c <rmw_create_publisher+0x1c0>)
 800eae8:	213c      	movs	r1, #60	@ 0x3c
 800eaea:	4650      	mov	r0, sl
 800eaec:	f008 ff44 	bl	8017978 <sniprintf>
 800eaf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	2250      	movs	r2, #80	@ 0x50
 800eaf8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800eafa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eafe:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800eb02:	f009 f908 	bl	8017d16 <memcpy>
 800eb06:	7a3b      	ldrb	r3, [r7, #8]
 800eb08:	4630      	mov	r0, r6
 800eb0a:	4949      	ldr	r1, [pc, #292]	@ (800ec30 <rmw_create_publisher+0x1c4>)
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb12:	bf0c      	ite	eq
 800eb14:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800eb18:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800eb1c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800eb24:	f000 fbd2 	bl	800f2cc <get_message_typesupport_handle>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d06a      	beq.n	800ec02 <rmw_create_publisher+0x196>
 800eb2c:	6842      	ldr	r2, [r0, #4]
 800eb2e:	61a2      	str	r2, [r4, #24]
 800eb30:	2a00      	cmp	r2, #0
 800eb32:	d066      	beq.n	800ec02 <rmw_create_publisher+0x196>
 800eb34:	4629      	mov	r1, r5
 800eb36:	463b      	mov	r3, r7
 800eb38:	4648      	mov	r0, r9
 800eb3a:	f006 f80b 	bl	8014b54 <create_topic>
 800eb3e:	6260      	str	r0, [r4, #36]	@ 0x24
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d062      	beq.n	800ec0a <rmw_create_publisher+0x19e>
 800eb44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb48:	2103      	movs	r1, #3
 800eb4a:	2506      	movs	r5, #6
 800eb4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb50:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800eb54:	1c42      	adds	r2, r0, #1
 800eb56:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800eb5a:	f001 fdc3 	bl	80106e4 <uxr_object_id>
 800eb5e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800eb62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb66:	6120      	str	r0, [r4, #16]
 800eb68:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800eb6c:	6910      	ldr	r0, [r2, #16]
 800eb6e:	9500      	str	r5, [sp, #0]
 800eb70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb74:	6819      	ldr	r1, [r3, #0]
 800eb76:	6922      	ldr	r2, [r4, #16]
 800eb78:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eb7c:	f001 fd0c 	bl	8010598 <uxr_buffer_create_publisher_bin>
 800eb80:	4602      	mov	r2, r0
 800eb82:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eb86:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb8a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb8e:	f000 fb15 	bl	800f1bc <run_xrce_session>
 800eb92:	b3b0      	cbz	r0, 800ec02 <rmw_create_publisher+0x196>
 800eb94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb98:	2105      	movs	r1, #5
 800eb9a:	f10d 0a10 	add.w	sl, sp, #16
 800eb9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eba2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800eba6:	1c42      	adds	r2, r0, #1
 800eba8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ebac:	f001 fd9a 	bl	80106e4 <uxr_object_id>
 800ebb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	6160      	str	r0, [r4, #20]
 800ebb8:	691e      	ldr	r6, [r3, #16]
 800ebba:	4650      	mov	r0, sl
 800ebbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebc0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ebc4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ebc8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800ebcc:	f000 fb12 	bl	800f1f4 <convert_qos_profile>
 800ebd0:	9503      	str	r5, [sp, #12]
 800ebd2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ebd6:	9001      	str	r0, [sp, #4]
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ebde:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ebea:	f001 fd05 	bl	80105f8 <uxr_buffer_create_datawriter_bin>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ebf4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ebf8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ebfc:	f000 fade 	bl	800f1bc <run_xrce_session>
 800ec00:	b970      	cbnz	r0, 800ec20 <rmw_create_publisher+0x1b4>
 800ec02:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ec04:	b108      	cbz	r0, 800ec0a <rmw_create_publisher+0x19e>
 800ec06:	f000 fa73 	bl	800f0f0 <rmw_uxrce_fini_topic_memory>
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	f04f 0800 	mov.w	r8, #0
 800ec10:	f000 fa16 	bl	800f040 <rmw_uxrce_fini_publisher_memory>
 800ec14:	4640      	mov	r0, r8
 800ec16:	b007      	add	sp, #28
 800ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1c:	f04f 0800 	mov.w	r8, #0
 800ec20:	4640      	mov	r0, r8
 800ec22:	b007      	add	sp, #28
 800ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec28:	240683bc 	.word	0x240683bc
 800ec2c:	08018cb4 	.word	0x08018cb4
 800ec30:	08018c80 	.word	0x08018c80

0800ec34 <rmw_publisher_get_actual_qos>:
 800ec34:	b178      	cbz	r0, 800ec56 <rmw_publisher_get_actual_qos+0x22>
 800ec36:	b510      	push	{r4, lr}
 800ec38:	fab1 f481 	clz	r4, r1
 800ec3c:	0964      	lsrs	r4, r4, #5
 800ec3e:	b141      	cbz	r1, 800ec52 <rmw_publisher_get_actual_qos+0x1e>
 800ec40:	6843      	ldr	r3, [r0, #4]
 800ec42:	2250      	movs	r2, #80	@ 0x50
 800ec44:	4608      	mov	r0, r1
 800ec46:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ec4a:	f009 f864 	bl	8017d16 <memcpy>
 800ec4e:	4620      	mov	r0, r4
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	200b      	movs	r0, #11
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	200b      	movs	r0, #11
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop

0800ec5c <rmw_destroy_publisher>:
 800ec5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec60:	b128      	cbz	r0, 800ec6e <rmw_destroy_publisher+0x12>
 800ec62:	4604      	mov	r4, r0
 800ec64:	6800      	ldr	r0, [r0, #0]
 800ec66:	460d      	mov	r5, r1
 800ec68:	f000 fb22 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 800ec6c:	b918      	cbnz	r0, 800ec76 <rmw_destroy_publisher+0x1a>
 800ec6e:	2401      	movs	r4, #1
 800ec70:	4620      	mov	r0, r4
 800ec72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec76:	6863      	ldr	r3, [r4, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0f8      	beq.n	800ec6e <rmw_destroy_publisher+0x12>
 800ec7c:	fab5 f485 	clz	r4, r5
 800ec80:	0964      	lsrs	r4, r4, #5
 800ec82:	2d00      	cmp	r5, #0
 800ec84:	d0f3      	beq.n	800ec6e <rmw_destroy_publisher+0x12>
 800ec86:	6828      	ldr	r0, [r5, #0]
 800ec88:	f000 fb12 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d0ee      	beq.n	800ec6e <rmw_destroy_publisher+0x12>
 800ec90:	686e      	ldr	r6, [r5, #4]
 800ec92:	2e00      	cmp	r6, #0
 800ec94:	d0eb      	beq.n	800ec6e <rmw_destroy_publisher+0x12>
 800ec96:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800ec98:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800ec9c:	f005 ffaa 	bl	8014bf4 <destroy_topic>
 800eca0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800eca4:	6972      	ldr	r2, [r6, #20]
 800eca6:	6918      	ldr	r0, [r3, #16]
 800eca8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecb0:	6819      	ldr	r1, [r3, #0]
 800ecb2:	f001 fbbd 	bl	8010430 <uxr_buffer_delete_entity>
 800ecb6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ecba:	4680      	mov	r8, r0
 800ecbc:	6932      	ldr	r2, [r6, #16]
 800ecbe:	6918      	ldr	r0, [r3, #16]
 800ecc0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecc8:	6819      	ldr	r1, [r3, #0]
 800ecca:	f001 fbb1 	bl	8010430 <uxr_buffer_delete_entity>
 800ecce:	4606      	mov	r6, r0
 800ecd0:	6938      	ldr	r0, [r7, #16]
 800ecd2:	4642      	mov	r2, r8
 800ecd4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ecd8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecdc:	f000 fa6e 	bl	800f1bc <run_xrce_session>
 800ece0:	693f      	ldr	r7, [r7, #16]
 800ece2:	4632      	mov	r2, r6
 800ece4:	4606      	mov	r6, r0
 800ece6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ecea:	4638      	mov	r0, r7
 800ecec:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ecf0:	f000 fa64 	bl	800f1bc <run_xrce_session>
 800ecf4:	b126      	cbz	r6, 800ed00 <rmw_destroy_publisher+0xa4>
 800ecf6:	b118      	cbz	r0, 800ed00 <rmw_destroy_publisher+0xa4>
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 f9a1 	bl	800f040 <rmw_uxrce_fini_publisher_memory>
 800ecfe:	e7b7      	b.n	800ec70 <rmw_destroy_publisher+0x14>
 800ed00:	2402      	movs	r4, #2
 800ed02:	e7f9      	b.n	800ecf8 <rmw_destroy_publisher+0x9c>

0800ed04 <rmw_uros_epoch_nanos>:
 800ed04:	4b05      	ldr	r3, [pc, #20]	@ (800ed1c <rmw_uros_epoch_nanos+0x18>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	b123      	cbz	r3, 800ed14 <rmw_uros_epoch_nanos+0x10>
 800ed0a:	6898      	ldr	r0, [r3, #8]
 800ed0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed10:	f001 be2e 	b.w	8010970 <uxr_epoch_nanos>
 800ed14:	2000      	movs	r0, #0
 800ed16:	2100      	movs	r1, #0
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	240683dc 	.word	0x240683dc

0800ed20 <rmw_uros_sync_session>:
 800ed20:	b508      	push	{r3, lr}
 800ed22:	4b07      	ldr	r3, [pc, #28]	@ (800ed40 <rmw_uros_sync_session+0x20>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	b14b      	cbz	r3, 800ed3c <rmw_uros_sync_session+0x1c>
 800ed28:	4601      	mov	r1, r0
 800ed2a:	6898      	ldr	r0, [r3, #8]
 800ed2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed30:	f002 fa22 	bl	8011178 <uxr_sync_session>
 800ed34:	f080 0001 	eor.w	r0, r0, #1
 800ed38:	b2c0      	uxtb	r0, r0
 800ed3a:	bd08      	pop	{r3, pc}
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	bd08      	pop	{r3, pc}
 800ed40:	240683dc 	.word	0x240683dc

0800ed44 <rmw_uxrce_init_service_memory>:
 800ed44:	b1e2      	cbz	r2, 800ed80 <rmw_uxrce_init_service_memory+0x3c>
 800ed46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4a:	7b05      	ldrb	r5, [r0, #12]
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b9ad      	cbnz	r5, 800ed7c <rmw_uxrce_init_service_memory+0x38>
 800ed50:	23c8      	movs	r3, #200	@ 0xc8
 800ed52:	4617      	mov	r7, r2
 800ed54:	460c      	mov	r4, r1
 800ed56:	46a8      	mov	r8, r5
 800ed58:	6083      	str	r3, [r0, #8]
 800ed5a:	f240 1301 	movw	r3, #257	@ 0x101
 800ed5e:	e9c0 5500 	strd	r5, r5, [r0]
 800ed62:	8183      	strh	r3, [r0, #12]
 800ed64:	3501      	adds	r5, #1
 800ed66:	4621      	mov	r1, r4
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f005 fc73 	bl	8014654 <put_memory>
 800ed6e:	42af      	cmp	r7, r5
 800ed70:	60a4      	str	r4, [r4, #8]
 800ed72:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ed76:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ed7a:	d1f3      	bne.n	800ed64 <rmw_uxrce_init_service_memory+0x20>
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop

0800ed84 <rmw_uxrce_init_client_memory>:
 800ed84:	b1e2      	cbz	r2, 800edc0 <rmw_uxrce_init_client_memory+0x3c>
 800ed86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8a:	7b05      	ldrb	r5, [r0, #12]
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	b9ad      	cbnz	r5, 800edbc <rmw_uxrce_init_client_memory+0x38>
 800ed90:	23c8      	movs	r3, #200	@ 0xc8
 800ed92:	4617      	mov	r7, r2
 800ed94:	460c      	mov	r4, r1
 800ed96:	46a8      	mov	r8, r5
 800ed98:	6083      	str	r3, [r0, #8]
 800ed9a:	f240 1301 	movw	r3, #257	@ 0x101
 800ed9e:	e9c0 5500 	strd	r5, r5, [r0]
 800eda2:	8183      	strh	r3, [r0, #12]
 800eda4:	3501      	adds	r5, #1
 800eda6:	4621      	mov	r1, r4
 800eda8:	4630      	mov	r0, r6
 800edaa:	f005 fc53 	bl	8014654 <put_memory>
 800edae:	42af      	cmp	r7, r5
 800edb0:	60a4      	str	r4, [r4, #8]
 800edb2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800edb6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800edba:	d1f3      	bne.n	800eda4 <rmw_uxrce_init_client_memory+0x20>
 800edbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop

0800edc4 <rmw_uxrce_init_publisher_memory>:
 800edc4:	b1e2      	cbz	r2, 800ee00 <rmw_uxrce_init_publisher_memory+0x3c>
 800edc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edca:	7b05      	ldrb	r5, [r0, #12]
 800edcc:	4606      	mov	r6, r0
 800edce:	b9ad      	cbnz	r5, 800edfc <rmw_uxrce_init_publisher_memory+0x38>
 800edd0:	23d8      	movs	r3, #216	@ 0xd8
 800edd2:	4617      	mov	r7, r2
 800edd4:	460c      	mov	r4, r1
 800edd6:	46a8      	mov	r8, r5
 800edd8:	6083      	str	r3, [r0, #8]
 800edda:	f240 1301 	movw	r3, #257	@ 0x101
 800edde:	e9c0 5500 	strd	r5, r5, [r0]
 800ede2:	8183      	strh	r3, [r0, #12]
 800ede4:	3501      	adds	r5, #1
 800ede6:	4621      	mov	r1, r4
 800ede8:	4630      	mov	r0, r6
 800edea:	f005 fc33 	bl	8014654 <put_memory>
 800edee:	42af      	cmp	r7, r5
 800edf0:	60a4      	str	r4, [r4, #8]
 800edf2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800edf6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800edfa:	d1f3      	bne.n	800ede4 <rmw_uxrce_init_publisher_memory+0x20>
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop

0800ee04 <rmw_uxrce_init_subscription_memory>:
 800ee04:	b1e2      	cbz	r2, 800ee40 <rmw_uxrce_init_subscription_memory+0x3c>
 800ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	7b05      	ldrb	r5, [r0, #12]
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	b9ad      	cbnz	r5, 800ee3c <rmw_uxrce_init_subscription_memory+0x38>
 800ee10:	23d8      	movs	r3, #216	@ 0xd8
 800ee12:	4617      	mov	r7, r2
 800ee14:	460c      	mov	r4, r1
 800ee16:	46a8      	mov	r8, r5
 800ee18:	6083      	str	r3, [r0, #8]
 800ee1a:	f240 1301 	movw	r3, #257	@ 0x101
 800ee1e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee22:	8183      	strh	r3, [r0, #12]
 800ee24:	3501      	adds	r5, #1
 800ee26:	4621      	mov	r1, r4
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f005 fc13 	bl	8014654 <put_memory>
 800ee2e:	42af      	cmp	r7, r5
 800ee30:	60a4      	str	r4, [r4, #8]
 800ee32:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee36:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ee3a:	d1f3      	bne.n	800ee24 <rmw_uxrce_init_subscription_memory+0x20>
 800ee3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <rmw_uxrce_init_node_memory>:
 800ee44:	b1e2      	cbz	r2, 800ee80 <rmw_uxrce_init_node_memory+0x3c>
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	7b05      	ldrb	r5, [r0, #12]
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	b9ad      	cbnz	r5, 800ee7c <rmw_uxrce_init_node_memory+0x38>
 800ee50:	23a4      	movs	r3, #164	@ 0xa4
 800ee52:	4617      	mov	r7, r2
 800ee54:	460c      	mov	r4, r1
 800ee56:	46a8      	mov	r8, r5
 800ee58:	6083      	str	r3, [r0, #8]
 800ee5a:	f240 1301 	movw	r3, #257	@ 0x101
 800ee5e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee62:	8183      	strh	r3, [r0, #12]
 800ee64:	3501      	adds	r5, #1
 800ee66:	4621      	mov	r1, r4
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f005 fbf3 	bl	8014654 <put_memory>
 800ee6e:	42af      	cmp	r7, r5
 800ee70:	60a4      	str	r4, [r4, #8]
 800ee72:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ee76:	f804 8c98 	strb.w	r8, [r4, #-152]
 800ee7a:	d1f3      	bne.n	800ee64 <rmw_uxrce_init_node_memory+0x20>
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop

0800ee84 <rmw_uxrce_init_session_memory>:
 800ee84:	b1ea      	cbz	r2, 800eec2 <rmw_uxrce_init_session_memory+0x3e>
 800ee86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee8a:	7b05      	ldrb	r5, [r0, #12]
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	b9b5      	cbnz	r5, 800eebe <rmw_uxrce_init_session_memory+0x3a>
 800ee90:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ee94:	f240 1301 	movw	r3, #257	@ 0x101
 800ee98:	4617      	mov	r7, r2
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	46a9      	mov	r9, r5
 800ee9e:	f8c0 8008 	str.w	r8, [r0, #8]
 800eea2:	8183      	strh	r3, [r0, #12]
 800eea4:	e9c0 5500 	strd	r5, r5, [r0]
 800eea8:	3501      	adds	r5, #1
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4630      	mov	r0, r6
 800eeae:	f005 fbd1 	bl	8014654 <put_memory>
 800eeb2:	42af      	cmp	r7, r5
 800eeb4:	60a4      	str	r4, [r4, #8]
 800eeb6:	f884 900c 	strb.w	r9, [r4, #12]
 800eeba:	4444      	add	r4, r8
 800eebc:	d1f4      	bne.n	800eea8 <rmw_uxrce_init_session_memory+0x24>
 800eebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eec2:	4770      	bx	lr

0800eec4 <rmw_uxrce_init_topic_memory>:
 800eec4:	b1e2      	cbz	r2, 800ef00 <rmw_uxrce_init_topic_memory+0x3c>
 800eec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	7b05      	ldrb	r5, [r0, #12]
 800eecc:	4606      	mov	r6, r0
 800eece:	b9ad      	cbnz	r5, 800eefc <rmw_uxrce_init_topic_memory+0x38>
 800eed0:	231c      	movs	r3, #28
 800eed2:	4617      	mov	r7, r2
 800eed4:	460c      	mov	r4, r1
 800eed6:	46a8      	mov	r8, r5
 800eed8:	6083      	str	r3, [r0, #8]
 800eeda:	f240 1301 	movw	r3, #257	@ 0x101
 800eede:	e9c0 5500 	strd	r5, r5, [r0]
 800eee2:	8183      	strh	r3, [r0, #12]
 800eee4:	3501      	adds	r5, #1
 800eee6:	4621      	mov	r1, r4
 800eee8:	4630      	mov	r0, r6
 800eeea:	f005 fbb3 	bl	8014654 <put_memory>
 800eeee:	42af      	cmp	r7, r5
 800eef0:	60a4      	str	r4, [r4, #8]
 800eef2:	f104 041c 	add.w	r4, r4, #28
 800eef6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800eefa:	d1f3      	bne.n	800eee4 <rmw_uxrce_init_topic_memory+0x20>
 800eefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop

0800ef04 <rmw_uxrce_init_static_input_buffer_memory>:
 800ef04:	b1ea      	cbz	r2, 800ef42 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0a:	7b05      	ldrb	r5, [r0, #12]
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	b9b5      	cbnz	r5, 800ef3e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef10:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef14:	4617      	mov	r7, r2
 800ef16:	460c      	mov	r4, r1
 800ef18:	46a8      	mov	r8, r5
 800ef1a:	6083      	str	r3, [r0, #8]
 800ef1c:	f240 1301 	movw	r3, #257	@ 0x101
 800ef20:	e9c0 5500 	strd	r5, r5, [r0]
 800ef24:	8183      	strh	r3, [r0, #12]
 800ef26:	3501      	adds	r5, #1
 800ef28:	4621      	mov	r1, r4
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f005 fb92 	bl	8014654 <put_memory>
 800ef30:	42af      	cmp	r7, r5
 800ef32:	60a4      	str	r4, [r4, #8]
 800ef34:	f884 800c 	strb.w	r8, [r4, #12]
 800ef38:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ef3c:	d1f3      	bne.n	800ef26 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ef3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef42:	4770      	bx	lr

0800ef44 <rmw_uxrce_init_init_options_impl_memory>:
 800ef44:	b1e2      	cbz	r2, 800ef80 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ef46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4a:	7b05      	ldrb	r5, [r0, #12]
 800ef4c:	4606      	mov	r6, r0
 800ef4e:	b9ad      	cbnz	r5, 800ef7c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ef50:	232c      	movs	r3, #44	@ 0x2c
 800ef52:	4617      	mov	r7, r2
 800ef54:	460c      	mov	r4, r1
 800ef56:	46a8      	mov	r8, r5
 800ef58:	6083      	str	r3, [r0, #8]
 800ef5a:	f240 1301 	movw	r3, #257	@ 0x101
 800ef5e:	e9c0 5500 	strd	r5, r5, [r0]
 800ef62:	8183      	strh	r3, [r0, #12]
 800ef64:	3501      	adds	r5, #1
 800ef66:	4621      	mov	r1, r4
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f005 fb73 	bl	8014654 <put_memory>
 800ef6e:	42af      	cmp	r7, r5
 800ef70:	60a4      	str	r4, [r4, #8]
 800ef72:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ef76:	f804 8c20 	strb.w	r8, [r4, #-32]
 800ef7a:	d1f3      	bne.n	800ef64 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ef7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop

0800ef84 <rmw_uxrce_init_wait_set_memory>:
 800ef84:	b1e2      	cbz	r2, 800efc0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ef86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8a:	7b05      	ldrb	r5, [r0, #12]
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	b9ad      	cbnz	r5, 800efbc <rmw_uxrce_init_wait_set_memory+0x38>
 800ef90:	231c      	movs	r3, #28
 800ef92:	4617      	mov	r7, r2
 800ef94:	460c      	mov	r4, r1
 800ef96:	46a8      	mov	r8, r5
 800ef98:	6083      	str	r3, [r0, #8]
 800ef9a:	f240 1301 	movw	r3, #257	@ 0x101
 800ef9e:	e9c0 5500 	strd	r5, r5, [r0]
 800efa2:	8183      	strh	r3, [r0, #12]
 800efa4:	3501      	adds	r5, #1
 800efa6:	4621      	mov	r1, r4
 800efa8:	4630      	mov	r0, r6
 800efaa:	f005 fb53 	bl	8014654 <put_memory>
 800efae:	42af      	cmp	r7, r5
 800efb0:	60a4      	str	r4, [r4, #8]
 800efb2:	f104 041c 	add.w	r4, r4, #28
 800efb6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800efba:	d1f3      	bne.n	800efa4 <rmw_uxrce_init_wait_set_memory+0x20>
 800efbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop

0800efc4 <rmw_uxrce_init_guard_condition_memory>:
 800efc4:	b1e2      	cbz	r2, 800f000 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800efc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efca:	7b05      	ldrb	r5, [r0, #12]
 800efcc:	4606      	mov	r6, r0
 800efce:	b9ad      	cbnz	r5, 800effc <rmw_uxrce_init_guard_condition_memory+0x38>
 800efd0:	2320      	movs	r3, #32
 800efd2:	4617      	mov	r7, r2
 800efd4:	460c      	mov	r4, r1
 800efd6:	46a8      	mov	r8, r5
 800efd8:	6083      	str	r3, [r0, #8]
 800efda:	f240 1301 	movw	r3, #257	@ 0x101
 800efde:	e9c0 5500 	strd	r5, r5, [r0]
 800efe2:	8183      	strh	r3, [r0, #12]
 800efe4:	3501      	adds	r5, #1
 800efe6:	4621      	mov	r1, r4
 800efe8:	4630      	mov	r0, r6
 800efea:	f005 fb33 	bl	8014654 <put_memory>
 800efee:	42af      	cmp	r7, r5
 800eff0:	60a4      	str	r4, [r4, #8]
 800eff2:	f104 0420 	add.w	r4, r4, #32
 800eff6:	f804 8c14 	strb.w	r8, [r4, #-20]
 800effa:	d1f3      	bne.n	800efe4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop

0800f004 <rmw_uxrce_fini_session_memory>:
 800f004:	4601      	mov	r1, r0
 800f006:	4801      	ldr	r0, [pc, #4]	@ (800f00c <rmw_uxrce_fini_session_memory+0x8>)
 800f008:	f005 bb24 	b.w	8014654 <put_memory>
 800f00c:	240683dc 	.word	0x240683dc

0800f010 <rmw_uxrce_fini_node_memory>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4604      	mov	r4, r0
 800f014:	6800      	ldr	r0, [r0, #0]
 800f016:	b128      	cbz	r0, 800f024 <rmw_uxrce_fini_node_memory+0x14>
 800f018:	4b07      	ldr	r3, [pc, #28]	@ (800f038 <rmw_uxrce_fini_node_memory+0x28>)
 800f01a:	6819      	ldr	r1, [r3, #0]
 800f01c:	f7f1 f960 	bl	80002e0 <strcmp>
 800f020:	b940      	cbnz	r0, 800f034 <rmw_uxrce_fini_node_memory+0x24>
 800f022:	6020      	str	r0, [r4, #0]
 800f024:	6861      	ldr	r1, [r4, #4]
 800f026:	b129      	cbz	r1, 800f034 <rmw_uxrce_fini_node_memory+0x24>
 800f028:	2500      	movs	r5, #0
 800f02a:	4804      	ldr	r0, [pc, #16]	@ (800f03c <rmw_uxrce_fini_node_memory+0x2c>)
 800f02c:	610d      	str	r5, [r1, #16]
 800f02e:	f005 fb11 	bl	8014654 <put_memory>
 800f032:	6065      	str	r5, [r4, #4]
 800f034:	bd38      	pop	{r3, r4, r5, pc}
 800f036:	bf00      	nop
 800f038:	0801929c 	.word	0x0801929c
 800f03c:	240683ac 	.word	0x240683ac

0800f040 <rmw_uxrce_fini_publisher_memory>:
 800f040:	b510      	push	{r4, lr}
 800f042:	4604      	mov	r4, r0
 800f044:	6800      	ldr	r0, [r0, #0]
 800f046:	b128      	cbz	r0, 800f054 <rmw_uxrce_fini_publisher_memory+0x14>
 800f048:	4b06      	ldr	r3, [pc, #24]	@ (800f064 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f04a:	6819      	ldr	r1, [r3, #0]
 800f04c:	f7f1 f948 	bl	80002e0 <strcmp>
 800f050:	b938      	cbnz	r0, 800f062 <rmw_uxrce_fini_publisher_memory+0x22>
 800f052:	6020      	str	r0, [r4, #0]
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	b121      	cbz	r1, 800f062 <rmw_uxrce_fini_publisher_memory+0x22>
 800f058:	4803      	ldr	r0, [pc, #12]	@ (800f068 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f05a:	f005 fafb 	bl	8014654 <put_memory>
 800f05e:	2300      	movs	r3, #0
 800f060:	6063      	str	r3, [r4, #4]
 800f062:	bd10      	pop	{r4, pc}
 800f064:	0801929c 	.word	0x0801929c
 800f068:	240683bc 	.word	0x240683bc

0800f06c <rmw_uxrce_fini_subscription_memory>:
 800f06c:	b510      	push	{r4, lr}
 800f06e:	4604      	mov	r4, r0
 800f070:	6800      	ldr	r0, [r0, #0]
 800f072:	b128      	cbz	r0, 800f080 <rmw_uxrce_fini_subscription_memory+0x14>
 800f074:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f076:	6819      	ldr	r1, [r3, #0]
 800f078:	f7f1 f932 	bl	80002e0 <strcmp>
 800f07c:	b938      	cbnz	r0, 800f08e <rmw_uxrce_fini_subscription_memory+0x22>
 800f07e:	6020      	str	r0, [r4, #0]
 800f080:	6861      	ldr	r1, [r4, #4]
 800f082:	b121      	cbz	r1, 800f08e <rmw_uxrce_fini_subscription_memory+0x22>
 800f084:	4803      	ldr	r0, [pc, #12]	@ (800f094 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f086:	f005 fae5 	bl	8014654 <put_memory>
 800f08a:	2300      	movs	r3, #0
 800f08c:	6063      	str	r3, [r4, #4]
 800f08e:	bd10      	pop	{r4, pc}
 800f090:	0801929c 	.word	0x0801929c
 800f094:	240683fc 	.word	0x240683fc

0800f098 <rmw_uxrce_fini_service_memory>:
 800f098:	b510      	push	{r4, lr}
 800f09a:	4604      	mov	r4, r0
 800f09c:	6800      	ldr	r0, [r0, #0]
 800f09e:	b128      	cbz	r0, 800f0ac <rmw_uxrce_fini_service_memory+0x14>
 800f0a0:	4b06      	ldr	r3, [pc, #24]	@ (800f0bc <rmw_uxrce_fini_service_memory+0x24>)
 800f0a2:	6819      	ldr	r1, [r3, #0]
 800f0a4:	f7f1 f91c 	bl	80002e0 <strcmp>
 800f0a8:	b938      	cbnz	r0, 800f0ba <rmw_uxrce_fini_service_memory+0x22>
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	6861      	ldr	r1, [r4, #4]
 800f0ae:	b121      	cbz	r1, 800f0ba <rmw_uxrce_fini_service_memory+0x22>
 800f0b0:	4803      	ldr	r0, [pc, #12]	@ (800f0c0 <rmw_uxrce_fini_service_memory+0x28>)
 800f0b2:	f005 facf 	bl	8014654 <put_memory>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	6063      	str	r3, [r4, #4]
 800f0ba:	bd10      	pop	{r4, pc}
 800f0bc:	0801929c 	.word	0x0801929c
 800f0c0:	240683cc 	.word	0x240683cc

0800f0c4 <rmw_uxrce_fini_client_memory>:
 800f0c4:	b510      	push	{r4, lr}
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	6800      	ldr	r0, [r0, #0]
 800f0ca:	b128      	cbz	r0, 800f0d8 <rmw_uxrce_fini_client_memory+0x14>
 800f0cc:	4b06      	ldr	r3, [pc, #24]	@ (800f0e8 <rmw_uxrce_fini_client_memory+0x24>)
 800f0ce:	6819      	ldr	r1, [r3, #0]
 800f0d0:	f7f1 f906 	bl	80002e0 <strcmp>
 800f0d4:	b938      	cbnz	r0, 800f0e6 <rmw_uxrce_fini_client_memory+0x22>
 800f0d6:	6020      	str	r0, [r4, #0]
 800f0d8:	6861      	ldr	r1, [r4, #4]
 800f0da:	b121      	cbz	r1, 800f0e6 <rmw_uxrce_fini_client_memory+0x22>
 800f0dc:	4803      	ldr	r0, [pc, #12]	@ (800f0ec <rmw_uxrce_fini_client_memory+0x28>)
 800f0de:	f005 fab9 	bl	8014654 <put_memory>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6063      	str	r3, [r4, #4]
 800f0e6:	bd10      	pop	{r4, pc}
 800f0e8:	0801929c 	.word	0x0801929c
 800f0ec:	24063ae0 	.word	0x24063ae0

0800f0f0 <rmw_uxrce_fini_topic_memory>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	4803      	ldr	r0, [pc, #12]	@ (800f104 <rmw_uxrce_fini_topic_memory+0x14>)
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	f005 faac 	bl	8014654 <put_memory>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	61a3      	str	r3, [r4, #24]
 800f100:	bd10      	pop	{r4, pc}
 800f102:	bf00      	nop
 800f104:	2406840c 	.word	0x2406840c

0800f108 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f108:	b082      	sub	sp, #8
 800f10a:	492b      	ldr	r1, [pc, #172]	@ (800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f10c:	b530      	push	{r4, r5, lr}
 800f10e:	680d      	ldr	r5, [r1, #0]
 800f110:	ac03      	add	r4, sp, #12
 800f112:	e884 000c 	stmia.w	r4, {r2, r3}
 800f116:	461c      	mov	r4, r3
 800f118:	2d00      	cmp	r5, #0
 800f11a:	d04b      	beq.n	800f1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f11c:	462b      	mov	r3, r5
 800f11e:	2100      	movs	r1, #0
 800f120:	689a      	ldr	r2, [r3, #8]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f128:	4290      	cmp	r0, r2
 800f12a:	bf08      	it	eq
 800f12c:	3101      	addeq	r1, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1f6      	bne.n	800f120 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f132:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f136:	2b02      	cmp	r3, #2
 800f138:	d029      	beq.n	800f18e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f13a:	d820      	bhi.n	800f17e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f13c:	428c      	cmp	r4, r1
 800f13e:	d828      	bhi.n	800f192 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f140:	fab4 f284 	clz	r2, r4
 800f144:	0952      	lsrs	r2, r2, #5
 800f146:	b324      	cbz	r4, 800f192 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f148:	b1dd      	cbz	r5, 800f182 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f14a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f14e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f152:	e001      	b.n	800f158 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f154:	686d      	ldr	r5, [r5, #4]
 800f156:	b1ad      	cbz	r5, 800f184 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f158:	68ab      	ldr	r3, [r5, #8]
 800f15a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f15e:	4288      	cmp	r0, r1
 800f160:	d1f8      	bne.n	800f154 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f162:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f166:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f16a:	4561      	cmp	r1, ip
 800f16c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f170:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f174:	daee      	bge.n	800f154 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f176:	468c      	mov	ip, r1
 800f178:	461c      	mov	r4, r3
 800f17a:	462a      	mov	r2, r5
 800f17c:	e7ea      	b.n	800f154 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d0dc      	beq.n	800f13c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f182:	2200      	movs	r2, #0
 800f184:	4610      	mov	r0, r2
 800f186:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f18a:	b002      	add	sp, #8
 800f18c:	4770      	bx	lr
 800f18e:	428c      	cmp	r4, r1
 800f190:	d905      	bls.n	800f19e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f192:	4809      	ldr	r0, [pc, #36]	@ (800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f198:	b002      	add	sp, #8
 800f19a:	f005 ba4b 	b.w	8014634 <get_memory>
 800f19e:	fab4 f284 	clz	r2, r4
 800f1a2:	0952      	lsrs	r2, r2, #5
 800f1a4:	2c00      	cmp	r4, #0
 800f1a6:	d1ed      	bne.n	800f184 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f1a8:	4803      	ldr	r0, [pc, #12]	@ (800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f1aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ae:	b002      	add	sp, #8
 800f1b0:	f005 ba40 	b.w	8014634 <get_memory>
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	e7bc      	b.n	800f132 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f1b8:	240683ec 	.word	0x240683ec

0800f1bc <run_xrce_session>:
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	788c      	ldrb	r4, [r1, #2]
 800f1c0:	b086      	sub	sp, #24
 800f1c2:	2c01      	cmp	r4, #1
 800f1c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f1c8:	d00c      	beq.n	800f1e4 <run_xrce_session+0x28>
 800f1ca:	2401      	movs	r4, #1
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f10d 020e 	add.w	r2, sp, #14
 800f1d2:	f10d 0317 	add.w	r3, sp, #23
 800f1d6:	9400      	str	r4, [sp, #0]
 800f1d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1dc:	f001 ff76 	bl	80110cc <uxr_run_session_until_all_status>
 800f1e0:	b006      	add	sp, #24
 800f1e2:	bd10      	pop	{r4, pc}
 800f1e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1e8:	f001 fbcc 	bl	8010984 <uxr_flash_output_streams>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	b006      	add	sp, #24
 800f1f0:	bd10      	pop	{r4, pc}
 800f1f2:	bf00      	nop

0800f1f4 <convert_qos_profile>:
 800f1f4:	7a4a      	ldrb	r2, [r1, #9]
 800f1f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f1fa:	2a02      	cmp	r2, #2
 800f1fc:	bf18      	it	ne
 800f1fe:	2200      	movne	r2, #0
 800f200:	7002      	strb	r2, [r0, #0]
 800f202:	f1ac 0202 	sub.w	r2, ip, #2
 800f206:	fab2 f282 	clz	r2, r2
 800f20a:	0952      	lsrs	r2, r2, #5
 800f20c:	7042      	strb	r2, [r0, #1]
 800f20e:	780a      	ldrb	r2, [r1, #0]
 800f210:	8889      	ldrh	r1, [r1, #4]
 800f212:	f1a2 0202 	sub.w	r2, r2, #2
 800f216:	8081      	strh	r1, [r0, #4]
 800f218:	fab2 f282 	clz	r2, r2
 800f21c:	0952      	lsrs	r2, r2, #5
 800f21e:	7082      	strb	r2, [r0, #2]
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop

0800f224 <generate_type_name>:
 800f224:	2300      	movs	r3, #0
 800f226:	b530      	push	{r4, r5, lr}
 800f228:	700b      	strb	r3, [r1, #0]
 800f22a:	b087      	sub	sp, #28
 800f22c:	6803      	ldr	r3, [r0, #0]
 800f22e:	4614      	mov	r4, r2
 800f230:	b1bb      	cbz	r3, 800f262 <generate_type_name+0x3e>
 800f232:	4a0e      	ldr	r2, [pc, #56]	@ (800f26c <generate_type_name+0x48>)
 800f234:	4615      	mov	r5, r2
 800f236:	9500      	str	r5, [sp, #0]
 800f238:	9203      	str	r2, [sp, #12]
 800f23a:	4d0d      	ldr	r5, [pc, #52]	@ (800f270 <generate_type_name+0x4c>)
 800f23c:	6842      	ldr	r2, [r0, #4]
 800f23e:	4608      	mov	r0, r1
 800f240:	490c      	ldr	r1, [pc, #48]	@ (800f274 <generate_type_name+0x50>)
 800f242:	9204      	str	r2, [sp, #16]
 800f244:	9105      	str	r1, [sp, #20]
 800f246:	9102      	str	r1, [sp, #8]
 800f248:	4621      	mov	r1, r4
 800f24a:	4a0b      	ldr	r2, [pc, #44]	@ (800f278 <generate_type_name+0x54>)
 800f24c:	9501      	str	r5, [sp, #4]
 800f24e:	f008 fb93 	bl	8017978 <sniprintf>
 800f252:	2800      	cmp	r0, #0
 800f254:	bfa8      	it	ge
 800f256:	4284      	cmpge	r4, r0
 800f258:	bfcc      	ite	gt
 800f25a:	2001      	movgt	r0, #1
 800f25c:	2000      	movle	r0, #0
 800f25e:	b007      	add	sp, #28
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	4b06      	ldr	r3, [pc, #24]	@ (800f27c <generate_type_name+0x58>)
 800f264:	4a01      	ldr	r2, [pc, #4]	@ (800f26c <generate_type_name+0x48>)
 800f266:	461d      	mov	r5, r3
 800f268:	e7e5      	b.n	800f236 <generate_type_name+0x12>
 800f26a:	bf00      	nop
 800f26c:	08018ca4 	.word	0x08018ca4
 800f270:	08018cbc 	.word	0x08018cbc
 800f274:	08018cb8 	.word	0x08018cb8
 800f278:	08018ca8 	.word	0x08018ca8
 800f27c:	08019074 	.word	0x08019074

0800f280 <generate_topic_name>:
 800f280:	b530      	push	{r4, r5, lr}
 800f282:	4614      	mov	r4, r2
 800f284:	b083      	sub	sp, #12
 800f286:	4605      	mov	r5, r0
 800f288:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <generate_topic_name+0x28>)
 800f28a:	4a08      	ldr	r2, [pc, #32]	@ (800f2ac <generate_topic_name+0x2c>)
 800f28c:	4608      	mov	r0, r1
 800f28e:	9500      	str	r5, [sp, #0]
 800f290:	4621      	mov	r1, r4
 800f292:	f008 fb71 	bl	8017978 <sniprintf>
 800f296:	2800      	cmp	r0, #0
 800f298:	bfa8      	it	ge
 800f29a:	4284      	cmpge	r4, r0
 800f29c:	bfcc      	ite	gt
 800f29e:	2001      	movgt	r0, #1
 800f2a0:	2000      	movle	r0, #0
 800f2a2:	b003      	add	sp, #12
 800f2a4:	bd30      	pop	{r4, r5, pc}
 800f2a6:	bf00      	nop
 800f2a8:	08018cc8 	.word	0x08018cc8
 800f2ac:	08018cc0 	.word	0x08018cc0

0800f2b0 <is_uxrce_rmw_identifier_valid>:
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	b140      	cbz	r0, 800f2c8 <is_uxrce_rmw_identifier_valid+0x18>
 800f2b6:	f005 f9e1 	bl	801467c <rmw_get_implementation_identifier>
 800f2ba:	4601      	mov	r1, r0
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7f1 f80f 	bl	80002e0 <strcmp>
 800f2c2:	fab0 f080 	clz	r0, r0
 800f2c6:	0940      	lsrs	r0, r0, #5
 800f2c8:	bd10      	pop	{r4, pc}
 800f2ca:	bf00      	nop

0800f2cc <get_message_typesupport_handle>:
 800f2cc:	6883      	ldr	r3, [r0, #8]
 800f2ce:	4718      	bx	r3

0800f2d0 <get_message_typesupport_handle_function>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	6800      	ldr	r0, [r0, #0]
 800f2d6:	f7f1 f803 	bl	80002e0 <strcmp>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	bf0c      	ite	eq
 800f2de:	4620      	moveq	r0, r4
 800f2e0:	2000      	movne	r0, #0
 800f2e2:	bd10      	pop	{r4, pc}

0800f2e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f2e4:	4b04      	ldr	r3, [pc, #16]	@ (800f2f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	b10a      	cbz	r2, 800f2ee <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f2ea:	4803      	ldr	r0, [pc, #12]	@ (800f2f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2ec:	4770      	bx	lr
 800f2ee:	4a03      	ldr	r2, [pc, #12]	@ (800f2fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f2f0:	4801      	ldr	r0, [pc, #4]	@ (800f2f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2f2:	6812      	ldr	r2, [r2, #0]
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	4770      	bx	lr
 800f2f8:	24000034 	.word	0x24000034
 800f2fc:	240000b0 	.word	0x240000b0

0800f300 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f300:	4a02      	ldr	r2, [pc, #8]	@ (800f30c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f302:	4b03      	ldr	r3, [pc, #12]	@ (800f310 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f304:	6812      	ldr	r2, [r2, #0]
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	240000b0 	.word	0x240000b0
 800f310:	24000034 	.word	0x24000034

0800f314 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f314:	f005 be92 	b.w	801503c <std_msgs__msg__Int32__init>

0800f318 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f318:	f005 be94 	b.w	8015044 <std_msgs__msg__Int32__fini>

0800f31c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f31c:	4b04      	ldr	r3, [pc, #16]	@ (800f330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	b10a      	cbz	r2, 800f326 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f322:	4803      	ldr	r0, [pc, #12]	@ (800f330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f324:	4770      	bx	lr
 800f326:	4a03      	ldr	r2, [pc, #12]	@ (800f334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f328:	4801      	ldr	r0, [pc, #4]	@ (800f330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f32a:	6812      	ldr	r2, [r2, #0]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	4770      	bx	lr
 800f330:	2400007c 	.word	0x2400007c
 800f334:	240000b4 	.word	0x240000b4

0800f338 <_Int32__max_serialized_size>:
 800f338:	2104      	movs	r1, #4
 800f33a:	2000      	movs	r0, #0
 800f33c:	b508      	push	{r3, lr}
 800f33e:	f001 f807 	bl	8010350 <ucdr_alignment>
 800f342:	3004      	adds	r0, #4
 800f344:	bd08      	pop	{r3, pc}
 800f346:	bf00      	nop

0800f348 <_Int32__cdr_deserialize>:
 800f348:	b109      	cbz	r1, 800f34e <_Int32__cdr_deserialize+0x6>
 800f34a:	f000 bf19 	b.w	8010180 <ucdr_deserialize_int32_t>
 800f34e:	4608      	mov	r0, r1
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop

0800f354 <get_serialized_size_std_msgs__msg__Int32>:
 800f354:	b138      	cbz	r0, 800f366 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f356:	b508      	push	{r3, lr}
 800f358:	460b      	mov	r3, r1
 800f35a:	2104      	movs	r1, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 fff7 	bl	8010350 <ucdr_alignment>
 800f362:	3004      	adds	r0, #4
 800f364:	bd08      	pop	{r3, pc}
 800f366:	4770      	bx	lr

0800f368 <_Int32__cdr_serialize>:
 800f368:	460a      	mov	r2, r1
 800f36a:	b118      	cbz	r0, 800f374 <_Int32__cdr_serialize+0xc>
 800f36c:	6801      	ldr	r1, [r0, #0]
 800f36e:	4610      	mov	r0, r2
 800f370:	f000 be6e 	b.w	8010050 <ucdr_serialize_int32_t>
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop

0800f378 <_Int32__get_serialized_size>:
 800f378:	b130      	cbz	r0, 800f388 <_Int32__get_serialized_size+0x10>
 800f37a:	2104      	movs	r1, #4
 800f37c:	2000      	movs	r0, #0
 800f37e:	b508      	push	{r3, lr}
 800f380:	f000 ffe6 	bl	8010350 <ucdr_alignment>
 800f384:	3004      	adds	r0, #4
 800f386:	bd08      	pop	{r3, pc}
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop

0800f38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f38c:	4800      	ldr	r0, [pc, #0]	@ (800f390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f38e:	4770      	bx	lr
 800f390:	24000088 	.word	0x24000088

0800f394 <ucdr_serialize_bool>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	460d      	mov	r5, r1
 800f398:	2101      	movs	r1, #1
 800f39a:	4604      	mov	r4, r0
 800f39c:	f000 ff8c 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f3a0:	b148      	cbz	r0, 800f3b6 <ucdr_serialize_bool+0x22>
 800f3a2:	68a3      	ldr	r3, [r4, #8]
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	701d      	strb	r5, [r3, #0]
 800f3a8:	68a2      	ldr	r2, [r4, #8]
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	440a      	add	r2, r1
 800f3ae:	7561      	strb	r1, [r4, #21]
 800f3b0:	440b      	add	r3, r1
 800f3b2:	60a2      	str	r2, [r4, #8]
 800f3b4:	6123      	str	r3, [r4, #16]
 800f3b6:	7da0      	ldrb	r0, [r4, #22]
 800f3b8:	f080 0001 	eor.w	r0, r0, #1
 800f3bc:	bd38      	pop	{r3, r4, r5, pc}
 800f3be:	bf00      	nop

0800f3c0 <ucdr_deserialize_bool>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	460d      	mov	r5, r1
 800f3c4:	2101      	movs	r1, #1
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	f000 ff76 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f3cc:	b160      	cbz	r0, 800f3e8 <ucdr_deserialize_bool+0x28>
 800f3ce:	68a2      	ldr	r2, [r4, #8]
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f3d8:	440b      	add	r3, r1
 800f3da:	3800      	subs	r0, #0
 800f3dc:	bf18      	it	ne
 800f3de:	2001      	movne	r0, #1
 800f3e0:	7028      	strb	r0, [r5, #0]
 800f3e2:	60a2      	str	r2, [r4, #8]
 800f3e4:	6123      	str	r3, [r4, #16]
 800f3e6:	7561      	strb	r1, [r4, #21]
 800f3e8:	7da0      	ldrb	r0, [r4, #22]
 800f3ea:	f080 0001 	eor.w	r0, r0, #1
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}

0800f3f0 <ucdr_serialize_uint8_t>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	460d      	mov	r5, r1
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	f000 ff5e 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f3fc:	b148      	cbz	r0, 800f412 <ucdr_serialize_uint8_t+0x22>
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	2101      	movs	r1, #1
 800f402:	701d      	strb	r5, [r3, #0]
 800f404:	68a2      	ldr	r2, [r4, #8]
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	440a      	add	r2, r1
 800f40a:	7561      	strb	r1, [r4, #21]
 800f40c:	440b      	add	r3, r1
 800f40e:	60a2      	str	r2, [r4, #8]
 800f410:	6123      	str	r3, [r4, #16]
 800f412:	7da0      	ldrb	r0, [r4, #22]
 800f414:	f080 0001 	eor.w	r0, r0, #1
 800f418:	bd38      	pop	{r3, r4, r5, pc}
 800f41a:	bf00      	nop

0800f41c <ucdr_deserialize_uint8_t>:
 800f41c:	b538      	push	{r3, r4, r5, lr}
 800f41e:	460d      	mov	r5, r1
 800f420:	2101      	movs	r1, #1
 800f422:	4604      	mov	r4, r0
 800f424:	f000 ff48 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f428:	b150      	cbz	r0, 800f440 <ucdr_deserialize_uint8_t+0x24>
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	2101      	movs	r1, #1
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	702b      	strb	r3, [r5, #0]
 800f432:	68a2      	ldr	r2, [r4, #8]
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	440a      	add	r2, r1
 800f438:	7561      	strb	r1, [r4, #21]
 800f43a:	440b      	add	r3, r1
 800f43c:	60a2      	str	r2, [r4, #8]
 800f43e:	6123      	str	r3, [r4, #16]
 800f440:	7da0      	ldrb	r0, [r4, #22]
 800f442:	f080 0001 	eor.w	r0, r0, #1
 800f446:	bd38      	pop	{r3, r4, r5, pc}

0800f448 <ucdr_serialize_uint16_t>:
 800f448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f44c:	460b      	mov	r3, r1
 800f44e:	b082      	sub	sp, #8
 800f450:	4604      	mov	r4, r0
 800f452:	2102      	movs	r1, #2
 800f454:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f458:	f000 ff82 	bl	8010360 <ucdr_buffer_alignment>
 800f45c:	4601      	mov	r1, r0
 800f45e:	4620      	mov	r0, r4
 800f460:	7d67      	ldrb	r7, [r4, #21]
 800f462:	f000 ffc5 	bl	80103f0 <ucdr_advance_buffer>
 800f466:	2102      	movs	r1, #2
 800f468:	4620      	mov	r0, r4
 800f46a:	f000 ff19 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f46e:	bb78      	cbnz	r0, 800f4d0 <ucdr_serialize_uint16_t+0x88>
 800f470:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f474:	42ab      	cmp	r3, r5
 800f476:	d926      	bls.n	800f4c6 <ucdr_serialize_uint16_t+0x7e>
 800f478:	1b5e      	subs	r6, r3, r5
 800f47a:	60a3      	str	r3, [r4, #8]
 800f47c:	6923      	ldr	r3, [r4, #16]
 800f47e:	4620      	mov	r0, r4
 800f480:	f1c6 0802 	rsb	r8, r6, #2
 800f484:	4433      	add	r3, r6
 800f486:	4641      	mov	r1, r8
 800f488:	6123      	str	r3, [r4, #16]
 800f48a:	f000 ff15 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d03b      	beq.n	800f50a <ucdr_serialize_uint16_t+0xc2>
 800f492:	7d23      	ldrb	r3, [r4, #20]
 800f494:	2b01      	cmp	r3, #1
 800f496:	d04a      	beq.n	800f52e <ucdr_serialize_uint16_t+0xe6>
 800f498:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f49c:	702b      	strb	r3, [r5, #0]
 800f49e:	2e00      	cmp	r6, #0
 800f4a0:	d040      	beq.n	800f524 <ucdr_serialize_uint16_t+0xdc>
 800f4a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4a6:	706b      	strb	r3, [r5, #1]
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	2102      	movs	r1, #2
 800f4ac:	68a2      	ldr	r2, [r4, #8]
 800f4ae:	3302      	adds	r3, #2
 800f4b0:	7da0      	ldrb	r0, [r4, #22]
 800f4b2:	4442      	add	r2, r8
 800f4b4:	7561      	strb	r1, [r4, #21]
 800f4b6:	1b9e      	subs	r6, r3, r6
 800f4b8:	f080 0001 	eor.w	r0, r0, #1
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6126      	str	r6, [r4, #16]
 800f4c0:	b002      	add	sp, #8
 800f4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c6:	2102      	movs	r1, #2
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f000 fef5 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f4ce:	b190      	cbz	r0, 800f4f6 <ucdr_serialize_uint16_t+0xae>
 800f4d0:	7d23      	ldrb	r3, [r4, #20]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	68a3      	ldr	r3, [r4, #8]
 800f4d6:	d014      	beq.n	800f502 <ucdr_serialize_uint16_t+0xba>
 800f4d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f4dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4e0:	7019      	strb	r1, [r3, #0]
 800f4e2:	68a3      	ldr	r3, [r4, #8]
 800f4e4:	705a      	strb	r2, [r3, #1]
 800f4e6:	2102      	movs	r1, #2
 800f4e8:	68a2      	ldr	r2, [r4, #8]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	440a      	add	r2, r1
 800f4ee:	7561      	strb	r1, [r4, #21]
 800f4f0:	440b      	add	r3, r1
 800f4f2:	60a2      	str	r2, [r4, #8]
 800f4f4:	6123      	str	r3, [r4, #16]
 800f4f6:	7da0      	ldrb	r0, [r4, #22]
 800f4f8:	f080 0001 	eor.w	r0, r0, #1
 800f4fc:	b002      	add	sp, #8
 800f4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f502:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f506:	801a      	strh	r2, [r3, #0]
 800f508:	e7ed      	b.n	800f4e6 <ucdr_serialize_uint16_t+0x9e>
 800f50a:	68a2      	ldr	r2, [r4, #8]
 800f50c:	6923      	ldr	r3, [r4, #16]
 800f50e:	7da0      	ldrb	r0, [r4, #22]
 800f510:	1b92      	subs	r2, r2, r6
 800f512:	1b9b      	subs	r3, r3, r6
 800f514:	7567      	strb	r7, [r4, #21]
 800f516:	f080 0001 	eor.w	r0, r0, #1
 800f51a:	60a2      	str	r2, [r4, #8]
 800f51c:	6123      	str	r3, [r4, #16]
 800f51e:	b002      	add	sp, #8
 800f520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f524:	68a3      	ldr	r3, [r4, #8]
 800f526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f52a:	701a      	strb	r2, [r3, #0]
 800f52c:	e7bc      	b.n	800f4a8 <ucdr_serialize_uint16_t+0x60>
 800f52e:	4628      	mov	r0, r5
 800f530:	f10d 0506 	add.w	r5, sp, #6
 800f534:	4632      	mov	r2, r6
 800f536:	4629      	mov	r1, r5
 800f538:	f008 fbed 	bl	8017d16 <memcpy>
 800f53c:	4642      	mov	r2, r8
 800f53e:	19a9      	adds	r1, r5, r6
 800f540:	68a0      	ldr	r0, [r4, #8]
 800f542:	f008 fbe8 	bl	8017d16 <memcpy>
 800f546:	e7af      	b.n	800f4a8 <ucdr_serialize_uint16_t+0x60>

0800f548 <ucdr_serialize_endian_uint16_t>:
 800f548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f54c:	4604      	mov	r4, r0
 800f54e:	b083      	sub	sp, #12
 800f550:	460d      	mov	r5, r1
 800f552:	2102      	movs	r1, #2
 800f554:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f558:	f000 ff02 	bl	8010360 <ucdr_buffer_alignment>
 800f55c:	4601      	mov	r1, r0
 800f55e:	4620      	mov	r0, r4
 800f560:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f564:	f000 ff44 	bl	80103f0 <ucdr_advance_buffer>
 800f568:	2102      	movs	r1, #2
 800f56a:	4620      	mov	r0, r4
 800f56c:	f000 fe98 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f570:	bb70      	cbnz	r0, 800f5d0 <ucdr_serialize_endian_uint16_t+0x88>
 800f572:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f576:	42be      	cmp	r6, r7
 800f578:	d925      	bls.n	800f5c6 <ucdr_serialize_endian_uint16_t+0x7e>
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	4620      	mov	r0, r4
 800f57e:	60a6      	str	r6, [r4, #8]
 800f580:	1bf6      	subs	r6, r6, r7
 800f582:	4433      	add	r3, r6
 800f584:	f1c6 0902 	rsb	r9, r6, #2
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	4649      	mov	r1, r9
 800f58c:	f000 fe94 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f590:	2800      	cmp	r0, #0
 800f592:	d039      	beq.n	800f608 <ucdr_serialize_endian_uint16_t+0xc0>
 800f594:	2d01      	cmp	r5, #1
 800f596:	d04a      	beq.n	800f62e <ucdr_serialize_endian_uint16_t+0xe6>
 800f598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f59c:	703b      	strb	r3, [r7, #0]
 800f59e:	2e00      	cmp	r6, #0
 800f5a0:	d040      	beq.n	800f624 <ucdr_serialize_endian_uint16_t+0xdc>
 800f5a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5a6:	707b      	strb	r3, [r7, #1]
 800f5a8:	6923      	ldr	r3, [r4, #16]
 800f5aa:	2102      	movs	r1, #2
 800f5ac:	68a2      	ldr	r2, [r4, #8]
 800f5ae:	7da0      	ldrb	r0, [r4, #22]
 800f5b0:	3302      	adds	r3, #2
 800f5b2:	444a      	add	r2, r9
 800f5b4:	7561      	strb	r1, [r4, #21]
 800f5b6:	1b9b      	subs	r3, r3, r6
 800f5b8:	f080 0001 	eor.w	r0, r0, #1
 800f5bc:	60a2      	str	r2, [r4, #8]
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	b003      	add	sp, #12
 800f5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5c6:	2102      	movs	r1, #2
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f000 fe75 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f5ce:	b188      	cbz	r0, 800f5f4 <ucdr_serialize_endian_uint16_t+0xac>
 800f5d0:	2d01      	cmp	r5, #1
 800f5d2:	68a3      	ldr	r3, [r4, #8]
 800f5d4:	d014      	beq.n	800f600 <ucdr_serialize_endian_uint16_t+0xb8>
 800f5d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f5da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5de:	7019      	strb	r1, [r3, #0]
 800f5e0:	68a3      	ldr	r3, [r4, #8]
 800f5e2:	705a      	strb	r2, [r3, #1]
 800f5e4:	2102      	movs	r1, #2
 800f5e6:	68a2      	ldr	r2, [r4, #8]
 800f5e8:	6923      	ldr	r3, [r4, #16]
 800f5ea:	440a      	add	r2, r1
 800f5ec:	7561      	strb	r1, [r4, #21]
 800f5ee:	440b      	add	r3, r1
 800f5f0:	60a2      	str	r2, [r4, #8]
 800f5f2:	6123      	str	r3, [r4, #16]
 800f5f4:	7da0      	ldrb	r0, [r4, #22]
 800f5f6:	f080 0001 	eor.w	r0, r0, #1
 800f5fa:	b003      	add	sp, #12
 800f5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f600:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f604:	801a      	strh	r2, [r3, #0]
 800f606:	e7ed      	b.n	800f5e4 <ucdr_serialize_endian_uint16_t+0x9c>
 800f608:	68a2      	ldr	r2, [r4, #8]
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	7da0      	ldrb	r0, [r4, #22]
 800f60e:	1b92      	subs	r2, r2, r6
 800f610:	1b9b      	subs	r3, r3, r6
 800f612:	f884 8015 	strb.w	r8, [r4, #21]
 800f616:	f080 0001 	eor.w	r0, r0, #1
 800f61a:	60a2      	str	r2, [r4, #8]
 800f61c:	6123      	str	r3, [r4, #16]
 800f61e:	b003      	add	sp, #12
 800f620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f624:	68a3      	ldr	r3, [r4, #8]
 800f626:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	e7bc      	b.n	800f5a8 <ucdr_serialize_endian_uint16_t+0x60>
 800f62e:	f10d 0506 	add.w	r5, sp, #6
 800f632:	4632      	mov	r2, r6
 800f634:	4638      	mov	r0, r7
 800f636:	4629      	mov	r1, r5
 800f638:	f008 fb6d 	bl	8017d16 <memcpy>
 800f63c:	464a      	mov	r2, r9
 800f63e:	19a9      	adds	r1, r5, r6
 800f640:	68a0      	ldr	r0, [r4, #8]
 800f642:	f008 fb68 	bl	8017d16 <memcpy>
 800f646:	e7af      	b.n	800f5a8 <ucdr_serialize_endian_uint16_t+0x60>

0800f648 <ucdr_deserialize_uint16_t>:
 800f648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f64c:	4604      	mov	r4, r0
 800f64e:	460d      	mov	r5, r1
 800f650:	2102      	movs	r1, #2
 800f652:	f000 fe85 	bl	8010360 <ucdr_buffer_alignment>
 800f656:	4601      	mov	r1, r0
 800f658:	4620      	mov	r0, r4
 800f65a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f65e:	f000 fec7 	bl	80103f0 <ucdr_advance_buffer>
 800f662:	2102      	movs	r1, #2
 800f664:	4620      	mov	r0, r4
 800f666:	f000 fe1b 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f66a:	bb60      	cbnz	r0, 800f6c6 <ucdr_deserialize_uint16_t+0x7e>
 800f66c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f670:	42be      	cmp	r6, r7
 800f672:	d923      	bls.n	800f6bc <ucdr_deserialize_uint16_t+0x74>
 800f674:	6923      	ldr	r3, [r4, #16]
 800f676:	4620      	mov	r0, r4
 800f678:	60a6      	str	r6, [r4, #8]
 800f67a:	1bf6      	subs	r6, r6, r7
 800f67c:	4433      	add	r3, r6
 800f67e:	f1c6 0902 	rsb	r9, r6, #2
 800f682:	6123      	str	r3, [r4, #16]
 800f684:	4649      	mov	r1, r9
 800f686:	f000 fe17 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d034      	beq.n	800f6f8 <ucdr_deserialize_uint16_t+0xb0>
 800f68e:	7d23      	ldrb	r3, [r4, #20]
 800f690:	2b01      	cmp	r3, #1
 800f692:	d042      	beq.n	800f71a <ucdr_deserialize_uint16_t+0xd2>
 800f694:	787b      	ldrb	r3, [r7, #1]
 800f696:	702b      	strb	r3, [r5, #0]
 800f698:	2e00      	cmp	r6, #0
 800f69a:	d03a      	beq.n	800f712 <ucdr_deserialize_uint16_t+0xca>
 800f69c:	783b      	ldrb	r3, [r7, #0]
 800f69e:	706b      	strb	r3, [r5, #1]
 800f6a0:	6923      	ldr	r3, [r4, #16]
 800f6a2:	2102      	movs	r1, #2
 800f6a4:	68a2      	ldr	r2, [r4, #8]
 800f6a6:	3302      	adds	r3, #2
 800f6a8:	7da0      	ldrb	r0, [r4, #22]
 800f6aa:	444a      	add	r2, r9
 800f6ac:	7561      	strb	r1, [r4, #21]
 800f6ae:	1b9b      	subs	r3, r3, r6
 800f6b0:	f080 0001 	eor.w	r0, r0, #1
 800f6b4:	60a2      	str	r2, [r4, #8]
 800f6b6:	6123      	str	r3, [r4, #16]
 800f6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6bc:	2102      	movs	r1, #2
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 fdfa 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f6c4:	b180      	cbz	r0, 800f6e8 <ucdr_deserialize_uint16_t+0xa0>
 800f6c6:	7d23      	ldrb	r3, [r4, #20]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	d011      	beq.n	800f6f2 <ucdr_deserialize_uint16_t+0xaa>
 800f6ce:	785b      	ldrb	r3, [r3, #1]
 800f6d0:	702b      	strb	r3, [r5, #0]
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	706b      	strb	r3, [r5, #1]
 800f6d8:	2102      	movs	r1, #2
 800f6da:	68a2      	ldr	r2, [r4, #8]
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	440a      	add	r2, r1
 800f6e0:	7561      	strb	r1, [r4, #21]
 800f6e2:	440b      	add	r3, r1
 800f6e4:	60a2      	str	r2, [r4, #8]
 800f6e6:	6123      	str	r3, [r4, #16]
 800f6e8:	7da0      	ldrb	r0, [r4, #22]
 800f6ea:	f080 0001 	eor.w	r0, r0, #1
 800f6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	802b      	strh	r3, [r5, #0]
 800f6f6:	e7ef      	b.n	800f6d8 <ucdr_deserialize_uint16_t+0x90>
 800f6f8:	68a2      	ldr	r2, [r4, #8]
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	1b92      	subs	r2, r2, r6
 800f6fe:	7da0      	ldrb	r0, [r4, #22]
 800f700:	1b9b      	subs	r3, r3, r6
 800f702:	f884 8015 	strb.w	r8, [r4, #21]
 800f706:	f080 0001 	eor.w	r0, r0, #1
 800f70a:	60a2      	str	r2, [r4, #8]
 800f70c:	6123      	str	r3, [r4, #16]
 800f70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f712:	68a3      	ldr	r3, [r4, #8]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	706b      	strb	r3, [r5, #1]
 800f718:	e7c2      	b.n	800f6a0 <ucdr_deserialize_uint16_t+0x58>
 800f71a:	4639      	mov	r1, r7
 800f71c:	4632      	mov	r2, r6
 800f71e:	4628      	mov	r0, r5
 800f720:	f008 faf9 	bl	8017d16 <memcpy>
 800f724:	464a      	mov	r2, r9
 800f726:	19a8      	adds	r0, r5, r6
 800f728:	68a1      	ldr	r1, [r4, #8]
 800f72a:	f008 faf4 	bl	8017d16 <memcpy>
 800f72e:	e7b7      	b.n	800f6a0 <ucdr_deserialize_uint16_t+0x58>

0800f730 <ucdr_deserialize_endian_uint16_t>:
 800f730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f734:	4604      	mov	r4, r0
 800f736:	460e      	mov	r6, r1
 800f738:	2102      	movs	r1, #2
 800f73a:	4615      	mov	r5, r2
 800f73c:	f000 fe10 	bl	8010360 <ucdr_buffer_alignment>
 800f740:	4601      	mov	r1, r0
 800f742:	4620      	mov	r0, r4
 800f744:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f748:	f000 fe52 	bl	80103f0 <ucdr_advance_buffer>
 800f74c:	2102      	movs	r1, #2
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 fda6 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f754:	bb70      	cbnz	r0, 800f7b4 <ucdr_deserialize_endian_uint16_t+0x84>
 800f756:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f75a:	454f      	cmp	r7, r9
 800f75c:	d925      	bls.n	800f7aa <ucdr_deserialize_endian_uint16_t+0x7a>
 800f75e:	6923      	ldr	r3, [r4, #16]
 800f760:	4620      	mov	r0, r4
 800f762:	60a7      	str	r7, [r4, #8]
 800f764:	eba7 0709 	sub.w	r7, r7, r9
 800f768:	443b      	add	r3, r7
 800f76a:	f1c7 0a02 	rsb	sl, r7, #2
 800f76e:	6123      	str	r3, [r4, #16]
 800f770:	4651      	mov	r1, sl
 800f772:	f000 fda1 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f776:	2800      	cmp	r0, #0
 800f778:	d034      	beq.n	800f7e4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f77a:	2e01      	cmp	r6, #1
 800f77c:	d043      	beq.n	800f806 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f77e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f782:	702b      	strb	r3, [r5, #0]
 800f784:	2f00      	cmp	r7, #0
 800f786:	d03a      	beq.n	800f7fe <ucdr_deserialize_endian_uint16_t+0xce>
 800f788:	f899 3000 	ldrb.w	r3, [r9]
 800f78c:	706b      	strb	r3, [r5, #1]
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	2102      	movs	r1, #2
 800f792:	68a2      	ldr	r2, [r4, #8]
 800f794:	3302      	adds	r3, #2
 800f796:	7da0      	ldrb	r0, [r4, #22]
 800f798:	4452      	add	r2, sl
 800f79a:	7561      	strb	r1, [r4, #21]
 800f79c:	1bdb      	subs	r3, r3, r7
 800f79e:	f080 0001 	eor.w	r0, r0, #1
 800f7a2:	60a2      	str	r2, [r4, #8]
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7aa:	2102      	movs	r1, #2
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fd83 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f7b2:	b178      	cbz	r0, 800f7d4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f7b4:	2e01      	cmp	r6, #1
 800f7b6:	68a3      	ldr	r3, [r4, #8]
 800f7b8:	d011      	beq.n	800f7de <ucdr_deserialize_endian_uint16_t+0xae>
 800f7ba:	785b      	ldrb	r3, [r3, #1]
 800f7bc:	702b      	strb	r3, [r5, #0]
 800f7be:	68a3      	ldr	r3, [r4, #8]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	706b      	strb	r3, [r5, #1]
 800f7c4:	2102      	movs	r1, #2
 800f7c6:	68a2      	ldr	r2, [r4, #8]
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	440a      	add	r2, r1
 800f7cc:	7561      	strb	r1, [r4, #21]
 800f7ce:	440b      	add	r3, r1
 800f7d0:	60a2      	str	r2, [r4, #8]
 800f7d2:	6123      	str	r3, [r4, #16]
 800f7d4:	7da0      	ldrb	r0, [r4, #22]
 800f7d6:	f080 0001 	eor.w	r0, r0, #1
 800f7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7de:	881b      	ldrh	r3, [r3, #0]
 800f7e0:	802b      	strh	r3, [r5, #0]
 800f7e2:	e7ef      	b.n	800f7c4 <ucdr_deserialize_endian_uint16_t+0x94>
 800f7e4:	68a2      	ldr	r2, [r4, #8]
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	1bd2      	subs	r2, r2, r7
 800f7ea:	7da0      	ldrb	r0, [r4, #22]
 800f7ec:	1bdb      	subs	r3, r3, r7
 800f7ee:	f884 8015 	strb.w	r8, [r4, #21]
 800f7f2:	f080 0001 	eor.w	r0, r0, #1
 800f7f6:	60a2      	str	r2, [r4, #8]
 800f7f8:	6123      	str	r3, [r4, #16]
 800f7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	706b      	strb	r3, [r5, #1]
 800f804:	e7c3      	b.n	800f78e <ucdr_deserialize_endian_uint16_t+0x5e>
 800f806:	4649      	mov	r1, r9
 800f808:	463a      	mov	r2, r7
 800f80a:	4628      	mov	r0, r5
 800f80c:	f008 fa83 	bl	8017d16 <memcpy>
 800f810:	4652      	mov	r2, sl
 800f812:	19e8      	adds	r0, r5, r7
 800f814:	68a1      	ldr	r1, [r4, #8]
 800f816:	f008 fa7e 	bl	8017d16 <memcpy>
 800f81a:	e7b8      	b.n	800f78e <ucdr_deserialize_endian_uint16_t+0x5e>

0800f81c <ucdr_serialize_uint32_t>:
 800f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f820:	b082      	sub	sp, #8
 800f822:	4604      	mov	r4, r0
 800f824:	9101      	str	r1, [sp, #4]
 800f826:	2104      	movs	r1, #4
 800f828:	f000 fd9a 	bl	8010360 <ucdr_buffer_alignment>
 800f82c:	4601      	mov	r1, r0
 800f82e:	4620      	mov	r0, r4
 800f830:	7d67      	ldrb	r7, [r4, #21]
 800f832:	f000 fddd 	bl	80103f0 <ucdr_advance_buffer>
 800f836:	2104      	movs	r1, #4
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fd31 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d139      	bne.n	800f8b6 <ucdr_serialize_uint32_t+0x9a>
 800f842:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f846:	42ab      	cmp	r3, r5
 800f848:	d930      	bls.n	800f8ac <ucdr_serialize_uint32_t+0x90>
 800f84a:	1b5e      	subs	r6, r3, r5
 800f84c:	60a3      	str	r3, [r4, #8]
 800f84e:	6923      	ldr	r3, [r4, #16]
 800f850:	4620      	mov	r0, r4
 800f852:	f1c6 0804 	rsb	r8, r6, #4
 800f856:	4433      	add	r3, r6
 800f858:	4641      	mov	r1, r8
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	f000 fd2c 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f860:	2800      	cmp	r0, #0
 800f862:	d04c      	beq.n	800f8fe <ucdr_serialize_uint32_t+0xe2>
 800f864:	7d23      	ldrb	r3, [r4, #20]
 800f866:	2b01      	cmp	r3, #1
 800f868:	d063      	beq.n	800f932 <ucdr_serialize_uint32_t+0x116>
 800f86a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f86e:	702b      	strb	r3, [r5, #0]
 800f870:	2e00      	cmp	r6, #0
 800f872:	d051      	beq.n	800f918 <ucdr_serialize_uint32_t+0xfc>
 800f874:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f878:	2e01      	cmp	r6, #1
 800f87a:	706b      	strb	r3, [r5, #1]
 800f87c:	d050      	beq.n	800f920 <ucdr_serialize_uint32_t+0x104>
 800f87e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f882:	2e02      	cmp	r6, #2
 800f884:	70ab      	strb	r3, [r5, #2]
 800f886:	d04f      	beq.n	800f928 <ucdr_serialize_uint32_t+0x10c>
 800f888:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f88c:	70eb      	strb	r3, [r5, #3]
 800f88e:	6923      	ldr	r3, [r4, #16]
 800f890:	2104      	movs	r1, #4
 800f892:	68a2      	ldr	r2, [r4, #8]
 800f894:	3304      	adds	r3, #4
 800f896:	7da0      	ldrb	r0, [r4, #22]
 800f898:	4442      	add	r2, r8
 800f89a:	7561      	strb	r1, [r4, #21]
 800f89c:	1b9e      	subs	r6, r3, r6
 800f89e:	f080 0001 	eor.w	r0, r0, #1
 800f8a2:	60a2      	str	r2, [r4, #8]
 800f8a4:	6126      	str	r6, [r4, #16]
 800f8a6:	b002      	add	sp, #8
 800f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ac:	2104      	movs	r1, #4
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f000 fd02 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f8b4:	b1d0      	cbz	r0, 800f8ec <ucdr_serialize_uint32_t+0xd0>
 800f8b6:	7d23      	ldrb	r3, [r4, #20]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	68a3      	ldr	r3, [r4, #8]
 800f8bc:	d01c      	beq.n	800f8f8 <ucdr_serialize_uint32_t+0xdc>
 800f8be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f8c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f8ca:	7018      	strb	r0, [r3, #0]
 800f8cc:	68a3      	ldr	r3, [r4, #8]
 800f8ce:	705a      	strb	r2, [r3, #1]
 800f8d0:	68a3      	ldr	r3, [r4, #8]
 800f8d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8d6:	7099      	strb	r1, [r3, #2]
 800f8d8:	68a3      	ldr	r3, [r4, #8]
 800f8da:	70da      	strb	r2, [r3, #3]
 800f8dc:	2104      	movs	r1, #4
 800f8de:	68a2      	ldr	r2, [r4, #8]
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	440a      	add	r2, r1
 800f8e4:	7561      	strb	r1, [r4, #21]
 800f8e6:	440b      	add	r3, r1
 800f8e8:	60a2      	str	r2, [r4, #8]
 800f8ea:	6123      	str	r3, [r4, #16]
 800f8ec:	7da0      	ldrb	r0, [r4, #22]
 800f8ee:	f080 0001 	eor.w	r0, r0, #1
 800f8f2:	b002      	add	sp, #8
 800f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f8:	9a01      	ldr	r2, [sp, #4]
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	e7ee      	b.n	800f8dc <ucdr_serialize_uint32_t+0xc0>
 800f8fe:	68a2      	ldr	r2, [r4, #8]
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	7da0      	ldrb	r0, [r4, #22]
 800f904:	1b92      	subs	r2, r2, r6
 800f906:	1b9b      	subs	r3, r3, r6
 800f908:	7567      	strb	r7, [r4, #21]
 800f90a:	f080 0001 	eor.w	r0, r0, #1
 800f90e:	60a2      	str	r2, [r4, #8]
 800f910:	6123      	str	r3, [r4, #16]
 800f912:	b002      	add	sp, #8
 800f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f918:	68a3      	ldr	r3, [r4, #8]
 800f91a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f91e:	701a      	strb	r2, [r3, #0]
 800f920:	68a3      	ldr	r3, [r4, #8]
 800f922:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f926:	701a      	strb	r2, [r3, #0]
 800f928:	68a3      	ldr	r3, [r4, #8]
 800f92a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f92e:	701a      	strb	r2, [r3, #0]
 800f930:	e7ad      	b.n	800f88e <ucdr_serialize_uint32_t+0x72>
 800f932:	4628      	mov	r0, r5
 800f934:	ad01      	add	r5, sp, #4
 800f936:	4632      	mov	r2, r6
 800f938:	4629      	mov	r1, r5
 800f93a:	f008 f9ec 	bl	8017d16 <memcpy>
 800f93e:	4642      	mov	r2, r8
 800f940:	19a9      	adds	r1, r5, r6
 800f942:	68a0      	ldr	r0, [r4, #8]
 800f944:	f008 f9e7 	bl	8017d16 <memcpy>
 800f948:	e7a1      	b.n	800f88e <ucdr_serialize_uint32_t+0x72>
 800f94a:	bf00      	nop

0800f94c <ucdr_serialize_endian_uint32_t>:
 800f94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f950:	4604      	mov	r4, r0
 800f952:	b083      	sub	sp, #12
 800f954:	460d      	mov	r5, r1
 800f956:	2104      	movs	r1, #4
 800f958:	9201      	str	r2, [sp, #4]
 800f95a:	f000 fd01 	bl	8010360 <ucdr_buffer_alignment>
 800f95e:	4601      	mov	r1, r0
 800f960:	4620      	mov	r0, r4
 800f962:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f966:	f000 fd43 	bl	80103f0 <ucdr_advance_buffer>
 800f96a:	2104      	movs	r1, #4
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 fc97 	bl	80102a0 <ucdr_check_buffer_available_for>
 800f972:	2800      	cmp	r0, #0
 800f974:	d138      	bne.n	800f9e8 <ucdr_serialize_endian_uint32_t+0x9c>
 800f976:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f97a:	42b7      	cmp	r7, r6
 800f97c:	d92f      	bls.n	800f9de <ucdr_serialize_endian_uint32_t+0x92>
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	4620      	mov	r0, r4
 800f982:	60a7      	str	r7, [r4, #8]
 800f984:	1bbf      	subs	r7, r7, r6
 800f986:	443b      	add	r3, r7
 800f988:	f1c7 0904 	rsb	r9, r7, #4
 800f98c:	6123      	str	r3, [r4, #16]
 800f98e:	4649      	mov	r1, r9
 800f990:	f000 fc92 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f994:	2800      	cmp	r0, #0
 800f996:	d04a      	beq.n	800fa2e <ucdr_serialize_endian_uint32_t+0xe2>
 800f998:	2d01      	cmp	r5, #1
 800f99a:	d063      	beq.n	800fa64 <ucdr_serialize_endian_uint32_t+0x118>
 800f99c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9a0:	7033      	strb	r3, [r6, #0]
 800f9a2:	2f00      	cmp	r7, #0
 800f9a4:	d051      	beq.n	800fa4a <ucdr_serialize_endian_uint32_t+0xfe>
 800f9a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f9aa:	2f01      	cmp	r7, #1
 800f9ac:	7073      	strb	r3, [r6, #1]
 800f9ae:	d050      	beq.n	800fa52 <ucdr_serialize_endian_uint32_t+0x106>
 800f9b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f9b4:	2f02      	cmp	r7, #2
 800f9b6:	70b3      	strb	r3, [r6, #2]
 800f9b8:	d04f      	beq.n	800fa5a <ucdr_serialize_endian_uint32_t+0x10e>
 800f9ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f9be:	70f3      	strb	r3, [r6, #3]
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	2104      	movs	r1, #4
 800f9c4:	68a2      	ldr	r2, [r4, #8]
 800f9c6:	7da0      	ldrb	r0, [r4, #22]
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	444a      	add	r2, r9
 800f9cc:	7561      	strb	r1, [r4, #21]
 800f9ce:	1bdb      	subs	r3, r3, r7
 800f9d0:	f080 0001 	eor.w	r0, r0, #1
 800f9d4:	60a2      	str	r2, [r4, #8]
 800f9d6:	6123      	str	r3, [r4, #16]
 800f9d8:	b003      	add	sp, #12
 800f9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9de:	2104      	movs	r1, #4
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 fc69 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800f9e6:	b1c8      	cbz	r0, 800fa1c <ucdr_serialize_endian_uint32_t+0xd0>
 800f9e8:	2d01      	cmp	r5, #1
 800f9ea:	68a3      	ldr	r3, [r4, #8]
 800f9ec:	d01c      	beq.n	800fa28 <ucdr_serialize_endian_uint32_t+0xdc>
 800f9ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f9fa:	7018      	strb	r0, [r3, #0]
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	705a      	strb	r2, [r3, #1]
 800fa00:	68a3      	ldr	r3, [r4, #8]
 800fa02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa06:	7099      	strb	r1, [r3, #2]
 800fa08:	68a3      	ldr	r3, [r4, #8]
 800fa0a:	70da      	strb	r2, [r3, #3]
 800fa0c:	2104      	movs	r1, #4
 800fa0e:	68a2      	ldr	r2, [r4, #8]
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	440a      	add	r2, r1
 800fa14:	7561      	strb	r1, [r4, #21]
 800fa16:	440b      	add	r3, r1
 800fa18:	60a2      	str	r2, [r4, #8]
 800fa1a:	6123      	str	r3, [r4, #16]
 800fa1c:	7da0      	ldrb	r0, [r4, #22]
 800fa1e:	f080 0001 	eor.w	r0, r0, #1
 800fa22:	b003      	add	sp, #12
 800fa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa28:	9a01      	ldr	r2, [sp, #4]
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	e7ee      	b.n	800fa0c <ucdr_serialize_endian_uint32_t+0xc0>
 800fa2e:	68a2      	ldr	r2, [r4, #8]
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	7da0      	ldrb	r0, [r4, #22]
 800fa34:	1bd2      	subs	r2, r2, r7
 800fa36:	1bdb      	subs	r3, r3, r7
 800fa38:	f884 8015 	strb.w	r8, [r4, #21]
 800fa3c:	f080 0001 	eor.w	r0, r0, #1
 800fa40:	60a2      	str	r2, [r4, #8]
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	b003      	add	sp, #12
 800fa46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	68a3      	ldr	r3, [r4, #8]
 800fa4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa50:	701a      	strb	r2, [r3, #0]
 800fa52:	68a3      	ldr	r3, [r4, #8]
 800fa54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa58:	701a      	strb	r2, [r3, #0]
 800fa5a:	68a3      	ldr	r3, [r4, #8]
 800fa5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa60:	701a      	strb	r2, [r3, #0]
 800fa62:	e7ad      	b.n	800f9c0 <ucdr_serialize_endian_uint32_t+0x74>
 800fa64:	ad01      	add	r5, sp, #4
 800fa66:	463a      	mov	r2, r7
 800fa68:	4630      	mov	r0, r6
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	f008 f953 	bl	8017d16 <memcpy>
 800fa70:	464a      	mov	r2, r9
 800fa72:	19e9      	adds	r1, r5, r7
 800fa74:	68a0      	ldr	r0, [r4, #8]
 800fa76:	f008 f94e 	bl	8017d16 <memcpy>
 800fa7a:	e7a1      	b.n	800f9c0 <ucdr_serialize_endian_uint32_t+0x74>

0800fa7c <ucdr_deserialize_uint32_t>:
 800fa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa80:	4604      	mov	r4, r0
 800fa82:	460d      	mov	r5, r1
 800fa84:	2104      	movs	r1, #4
 800fa86:	f000 fc6b 	bl	8010360 <ucdr_buffer_alignment>
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa92:	f000 fcad 	bl	80103f0 <ucdr_advance_buffer>
 800fa96:	2104      	movs	r1, #4
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f000 fc01 	bl	80102a0 <ucdr_check_buffer_available_for>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d138      	bne.n	800fb14 <ucdr_deserialize_uint32_t+0x98>
 800faa2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800faa6:	42b7      	cmp	r7, r6
 800faa8:	d92f      	bls.n	800fb0a <ucdr_deserialize_uint32_t+0x8e>
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	4620      	mov	r0, r4
 800faae:	60a7      	str	r7, [r4, #8]
 800fab0:	1bbf      	subs	r7, r7, r6
 800fab2:	443b      	add	r3, r7
 800fab4:	f1c7 0904 	rsb	r9, r7, #4
 800fab8:	6123      	str	r3, [r4, #16]
 800faba:	4649      	mov	r1, r9
 800fabc:	f000 fbfc 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d046      	beq.n	800fb52 <ucdr_deserialize_uint32_t+0xd6>
 800fac4:	7d23      	ldrb	r3, [r4, #20]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d05c      	beq.n	800fb84 <ucdr_deserialize_uint32_t+0x108>
 800faca:	78f3      	ldrb	r3, [r6, #3]
 800facc:	702b      	strb	r3, [r5, #0]
 800face:	2f00      	cmp	r7, #0
 800fad0:	d04c      	beq.n	800fb6c <ucdr_deserialize_uint32_t+0xf0>
 800fad2:	78b3      	ldrb	r3, [r6, #2]
 800fad4:	2f01      	cmp	r7, #1
 800fad6:	706b      	strb	r3, [r5, #1]
 800fad8:	f105 0302 	add.w	r3, r5, #2
 800fadc:	d04a      	beq.n	800fb74 <ucdr_deserialize_uint32_t+0xf8>
 800fade:	7873      	ldrb	r3, [r6, #1]
 800fae0:	2f02      	cmp	r7, #2
 800fae2:	70ab      	strb	r3, [r5, #2]
 800fae4:	f105 0303 	add.w	r3, r5, #3
 800fae8:	d048      	beq.n	800fb7c <ucdr_deserialize_uint32_t+0x100>
 800faea:	7833      	ldrb	r3, [r6, #0]
 800faec:	70eb      	strb	r3, [r5, #3]
 800faee:	6923      	ldr	r3, [r4, #16]
 800faf0:	2104      	movs	r1, #4
 800faf2:	68a2      	ldr	r2, [r4, #8]
 800faf4:	3304      	adds	r3, #4
 800faf6:	7da0      	ldrb	r0, [r4, #22]
 800faf8:	444a      	add	r2, r9
 800fafa:	7561      	strb	r1, [r4, #21]
 800fafc:	1bdb      	subs	r3, r3, r7
 800fafe:	f080 0001 	eor.w	r0, r0, #1
 800fb02:	60a2      	str	r2, [r4, #8]
 800fb04:	6123      	str	r3, [r4, #16]
 800fb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb0a:	2104      	movs	r1, #4
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f000 fbd3 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fb12:	b1b0      	cbz	r0, 800fb42 <ucdr_deserialize_uint32_t+0xc6>
 800fb14:	7d23      	ldrb	r3, [r4, #20]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	68a3      	ldr	r3, [r4, #8]
 800fb1a:	d017      	beq.n	800fb4c <ucdr_deserialize_uint32_t+0xd0>
 800fb1c:	78db      	ldrb	r3, [r3, #3]
 800fb1e:	702b      	strb	r3, [r5, #0]
 800fb20:	68a3      	ldr	r3, [r4, #8]
 800fb22:	789b      	ldrb	r3, [r3, #2]
 800fb24:	706b      	strb	r3, [r5, #1]
 800fb26:	68a3      	ldr	r3, [r4, #8]
 800fb28:	785b      	ldrb	r3, [r3, #1]
 800fb2a:	70ab      	strb	r3, [r5, #2]
 800fb2c:	68a3      	ldr	r3, [r4, #8]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	70eb      	strb	r3, [r5, #3]
 800fb32:	2104      	movs	r1, #4
 800fb34:	68a2      	ldr	r2, [r4, #8]
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	440a      	add	r2, r1
 800fb3a:	7561      	strb	r1, [r4, #21]
 800fb3c:	440b      	add	r3, r1
 800fb3e:	60a2      	str	r2, [r4, #8]
 800fb40:	6123      	str	r3, [r4, #16]
 800fb42:	7da0      	ldrb	r0, [r4, #22]
 800fb44:	f080 0001 	eor.w	r0, r0, #1
 800fb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	e7ef      	b.n	800fb32 <ucdr_deserialize_uint32_t+0xb6>
 800fb52:	68a2      	ldr	r2, [r4, #8]
 800fb54:	6923      	ldr	r3, [r4, #16]
 800fb56:	1bd2      	subs	r2, r2, r7
 800fb58:	7da0      	ldrb	r0, [r4, #22]
 800fb5a:	1bdb      	subs	r3, r3, r7
 800fb5c:	f884 8015 	strb.w	r8, [r4, #21]
 800fb60:	f080 0001 	eor.w	r0, r0, #1
 800fb64:	60a2      	str	r2, [r4, #8]
 800fb66:	6123      	str	r3, [r4, #16]
 800fb68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb6c:	68a3      	ldr	r3, [r4, #8]
 800fb6e:	789b      	ldrb	r3, [r3, #2]
 800fb70:	706b      	strb	r3, [r5, #1]
 800fb72:	1cab      	adds	r3, r5, #2
 800fb74:	68a2      	ldr	r2, [r4, #8]
 800fb76:	7852      	ldrb	r2, [r2, #1]
 800fb78:	f803 2b01 	strb.w	r2, [r3], #1
 800fb7c:	68a2      	ldr	r2, [r4, #8]
 800fb7e:	7812      	ldrb	r2, [r2, #0]
 800fb80:	701a      	strb	r2, [r3, #0]
 800fb82:	e7b4      	b.n	800faee <ucdr_deserialize_uint32_t+0x72>
 800fb84:	4631      	mov	r1, r6
 800fb86:	463a      	mov	r2, r7
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f008 f8c4 	bl	8017d16 <memcpy>
 800fb8e:	464a      	mov	r2, r9
 800fb90:	19e8      	adds	r0, r5, r7
 800fb92:	68a1      	ldr	r1, [r4, #8]
 800fb94:	f008 f8bf 	bl	8017d16 <memcpy>
 800fb98:	e7a9      	b.n	800faee <ucdr_deserialize_uint32_t+0x72>
 800fb9a:	bf00      	nop

0800fb9c <ucdr_deserialize_endian_uint32_t>:
 800fb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba0:	4604      	mov	r4, r0
 800fba2:	460e      	mov	r6, r1
 800fba4:	2104      	movs	r1, #4
 800fba6:	4615      	mov	r5, r2
 800fba8:	f000 fbda 	bl	8010360 <ucdr_buffer_alignment>
 800fbac:	4601      	mov	r1, r0
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fbb4:	f000 fc1c 	bl	80103f0 <ucdr_advance_buffer>
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 fb70 	bl	80102a0 <ucdr_check_buffer_available_for>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d13c      	bne.n	800fc3e <ucdr_deserialize_endian_uint32_t+0xa2>
 800fbc4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fbc8:	42bb      	cmp	r3, r7
 800fbca:	d933      	bls.n	800fc34 <ucdr_deserialize_endian_uint32_t+0x98>
 800fbcc:	eba3 0907 	sub.w	r9, r3, r7
 800fbd0:	60a3      	str	r3, [r4, #8]
 800fbd2:	6923      	ldr	r3, [r4, #16]
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f1c9 0a04 	rsb	sl, r9, #4
 800fbda:	444b      	add	r3, r9
 800fbdc:	4651      	mov	r1, sl
 800fbde:	6123      	str	r3, [r4, #16]
 800fbe0:	f000 fb6a 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d048      	beq.n	800fc7a <ucdr_deserialize_endian_uint32_t+0xde>
 800fbe8:	2e01      	cmp	r6, #1
 800fbea:	d061      	beq.n	800fcb0 <ucdr_deserialize_endian_uint32_t+0x114>
 800fbec:	78fb      	ldrb	r3, [r7, #3]
 800fbee:	702b      	strb	r3, [r5, #0]
 800fbf0:	f1b9 0f00 	cmp.w	r9, #0
 800fbf4:	d050      	beq.n	800fc98 <ucdr_deserialize_endian_uint32_t+0xfc>
 800fbf6:	78bb      	ldrb	r3, [r7, #2]
 800fbf8:	f1b9 0f01 	cmp.w	r9, #1
 800fbfc:	706b      	strb	r3, [r5, #1]
 800fbfe:	f105 0302 	add.w	r3, r5, #2
 800fc02:	d04d      	beq.n	800fca0 <ucdr_deserialize_endian_uint32_t+0x104>
 800fc04:	787b      	ldrb	r3, [r7, #1]
 800fc06:	f1b9 0f02 	cmp.w	r9, #2
 800fc0a:	70ab      	strb	r3, [r5, #2]
 800fc0c:	f105 0303 	add.w	r3, r5, #3
 800fc10:	d04a      	beq.n	800fca8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800fc12:	783b      	ldrb	r3, [r7, #0]
 800fc14:	70eb      	strb	r3, [r5, #3]
 800fc16:	6923      	ldr	r3, [r4, #16]
 800fc18:	2104      	movs	r1, #4
 800fc1a:	68a2      	ldr	r2, [r4, #8]
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	7da0      	ldrb	r0, [r4, #22]
 800fc20:	4452      	add	r2, sl
 800fc22:	7561      	strb	r1, [r4, #21]
 800fc24:	eba3 0309 	sub.w	r3, r3, r9
 800fc28:	f080 0001 	eor.w	r0, r0, #1
 800fc2c:	60a2      	str	r2, [r4, #8]
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc34:	2104      	movs	r1, #4
 800fc36:	4620      	mov	r0, r4
 800fc38:	f000 fb3e 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fc3c:	b1a8      	cbz	r0, 800fc6a <ucdr_deserialize_endian_uint32_t+0xce>
 800fc3e:	2e01      	cmp	r6, #1
 800fc40:	68a3      	ldr	r3, [r4, #8]
 800fc42:	d017      	beq.n	800fc74 <ucdr_deserialize_endian_uint32_t+0xd8>
 800fc44:	78db      	ldrb	r3, [r3, #3]
 800fc46:	702b      	strb	r3, [r5, #0]
 800fc48:	68a3      	ldr	r3, [r4, #8]
 800fc4a:	789b      	ldrb	r3, [r3, #2]
 800fc4c:	706b      	strb	r3, [r5, #1]
 800fc4e:	68a3      	ldr	r3, [r4, #8]
 800fc50:	785b      	ldrb	r3, [r3, #1]
 800fc52:	70ab      	strb	r3, [r5, #2]
 800fc54:	68a3      	ldr	r3, [r4, #8]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	70eb      	strb	r3, [r5, #3]
 800fc5a:	2104      	movs	r1, #4
 800fc5c:	68a2      	ldr	r2, [r4, #8]
 800fc5e:	6923      	ldr	r3, [r4, #16]
 800fc60:	440a      	add	r2, r1
 800fc62:	7561      	strb	r1, [r4, #21]
 800fc64:	440b      	add	r3, r1
 800fc66:	60a2      	str	r2, [r4, #8]
 800fc68:	6123      	str	r3, [r4, #16]
 800fc6a:	7da0      	ldrb	r0, [r4, #22]
 800fc6c:	f080 0001 	eor.w	r0, r0, #1
 800fc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	602b      	str	r3, [r5, #0]
 800fc78:	e7ef      	b.n	800fc5a <ucdr_deserialize_endian_uint32_t+0xbe>
 800fc7a:	68a2      	ldr	r2, [r4, #8]
 800fc7c:	6923      	ldr	r3, [r4, #16]
 800fc7e:	eba2 0209 	sub.w	r2, r2, r9
 800fc82:	7da0      	ldrb	r0, [r4, #22]
 800fc84:	eba3 0309 	sub.w	r3, r3, r9
 800fc88:	f884 8015 	strb.w	r8, [r4, #21]
 800fc8c:	f080 0001 	eor.w	r0, r0, #1
 800fc90:	60a2      	str	r2, [r4, #8]
 800fc92:	6123      	str	r3, [r4, #16]
 800fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	789b      	ldrb	r3, [r3, #2]
 800fc9c:	706b      	strb	r3, [r5, #1]
 800fc9e:	1cab      	adds	r3, r5, #2
 800fca0:	68a2      	ldr	r2, [r4, #8]
 800fca2:	7852      	ldrb	r2, [r2, #1]
 800fca4:	f803 2b01 	strb.w	r2, [r3], #1
 800fca8:	68a2      	ldr	r2, [r4, #8]
 800fcaa:	7812      	ldrb	r2, [r2, #0]
 800fcac:	701a      	strb	r2, [r3, #0]
 800fcae:	e7b2      	b.n	800fc16 <ucdr_deserialize_endian_uint32_t+0x7a>
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	464a      	mov	r2, r9
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f008 f82e 	bl	8017d16 <memcpy>
 800fcba:	4652      	mov	r2, sl
 800fcbc:	eb05 0009 	add.w	r0, r5, r9
 800fcc0:	68a1      	ldr	r1, [r4, #8]
 800fcc2:	f008 f828 	bl	8017d16 <memcpy>
 800fcc6:	e7a6      	b.n	800fc16 <ucdr_deserialize_endian_uint32_t+0x7a>

0800fcc8 <ucdr_serialize_uint64_t>:
 800fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fccc:	4604      	mov	r4, r0
 800fcce:	b082      	sub	sp, #8
 800fcd0:	2108      	movs	r1, #8
 800fcd2:	e9cd 2300 	strd	r2, r3, [sp]
 800fcd6:	f000 fb43 	bl	8010360 <ucdr_buffer_alignment>
 800fcda:	4601      	mov	r1, r0
 800fcdc:	4620      	mov	r0, r4
 800fcde:	7d67      	ldrb	r7, [r4, #21]
 800fce0:	f000 fb86 	bl	80103f0 <ucdr_advance_buffer>
 800fce4:	2108      	movs	r1, #8
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 fada 	bl	80102a0 <ucdr_check_buffer_available_for>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	d14e      	bne.n	800fd8e <ucdr_serialize_uint64_t+0xc6>
 800fcf0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fcf4:	42ab      	cmp	r3, r5
 800fcf6:	d945      	bls.n	800fd84 <ucdr_serialize_uint64_t+0xbc>
 800fcf8:	1b5e      	subs	r6, r3, r5
 800fcfa:	60a3      	str	r3, [r4, #8]
 800fcfc:	6923      	ldr	r3, [r4, #16]
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f1c6 0808 	rsb	r8, r6, #8
 800fd04:	4433      	add	r3, r6
 800fd06:	4641      	mov	r1, r8
 800fd08:	6123      	str	r3, [r4, #16]
 800fd0a:	f000 fad5 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d074      	beq.n	800fdfc <ucdr_serialize_uint64_t+0x134>
 800fd12:	7d23      	ldrb	r3, [r4, #20]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	f000 809b 	beq.w	800fe50 <ucdr_serialize_uint64_t+0x188>
 800fd1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd1e:	702b      	strb	r3, [r5, #0]
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	d078      	beq.n	800fe16 <ucdr_serialize_uint64_t+0x14e>
 800fd24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd28:	2e01      	cmp	r6, #1
 800fd2a:	706b      	strb	r3, [r5, #1]
 800fd2c:	d077      	beq.n	800fe1e <ucdr_serialize_uint64_t+0x156>
 800fd2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd32:	2e02      	cmp	r6, #2
 800fd34:	70ab      	strb	r3, [r5, #2]
 800fd36:	d076      	beq.n	800fe26 <ucdr_serialize_uint64_t+0x15e>
 800fd38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd3c:	2e03      	cmp	r6, #3
 800fd3e:	70eb      	strb	r3, [r5, #3]
 800fd40:	d075      	beq.n	800fe2e <ucdr_serialize_uint64_t+0x166>
 800fd42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd46:	2e04      	cmp	r6, #4
 800fd48:	712b      	strb	r3, [r5, #4]
 800fd4a:	d074      	beq.n	800fe36 <ucdr_serialize_uint64_t+0x16e>
 800fd4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fd50:	2e05      	cmp	r6, #5
 800fd52:	716b      	strb	r3, [r5, #5]
 800fd54:	d073      	beq.n	800fe3e <ucdr_serialize_uint64_t+0x176>
 800fd56:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fd5a:	2e06      	cmp	r6, #6
 800fd5c:	71ab      	strb	r3, [r5, #6]
 800fd5e:	d072      	beq.n	800fe46 <ucdr_serialize_uint64_t+0x17e>
 800fd60:	f89d 3000 	ldrb.w	r3, [sp]
 800fd64:	71eb      	strb	r3, [r5, #7]
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	2108      	movs	r1, #8
 800fd6a:	68a2      	ldr	r2, [r4, #8]
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	7da0      	ldrb	r0, [r4, #22]
 800fd70:	4442      	add	r2, r8
 800fd72:	7561      	strb	r1, [r4, #21]
 800fd74:	1b9e      	subs	r6, r3, r6
 800fd76:	f080 0001 	eor.w	r0, r0, #1
 800fd7a:	60a2      	str	r2, [r4, #8]
 800fd7c:	6126      	str	r6, [r4, #16]
 800fd7e:	b002      	add	sp, #8
 800fd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd84:	2108      	movs	r1, #8
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 fa96 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800fd8c:	b350      	cbz	r0, 800fde4 <ucdr_serialize_uint64_t+0x11c>
 800fd8e:	7d23      	ldrb	r3, [r4, #20]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d02d      	beq.n	800fdf0 <ucdr_serialize_uint64_t+0x128>
 800fd94:	68a3      	ldr	r3, [r4, #8]
 800fd96:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fd9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd9e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fda2:	7018      	strb	r0, [r3, #0]
 800fda4:	68a3      	ldr	r3, [r4, #8]
 800fda6:	705a      	strb	r2, [r3, #1]
 800fda8:	68a3      	ldr	r3, [r4, #8]
 800fdaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdae:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fdb2:	7099      	strb	r1, [r3, #2]
 800fdb4:	68a3      	ldr	r3, [r4, #8]
 800fdb6:	70da      	strb	r2, [r3, #3]
 800fdb8:	68a3      	ldr	r3, [r4, #8]
 800fdba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fdbe:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fdc2:	7118      	strb	r0, [r3, #4]
 800fdc4:	68a3      	ldr	r3, [r4, #8]
 800fdc6:	715a      	strb	r2, [r3, #5]
 800fdc8:	68a3      	ldr	r3, [r4, #8]
 800fdca:	f89d 2000 	ldrb.w	r2, [sp]
 800fdce:	7199      	strb	r1, [r3, #6]
 800fdd0:	68a3      	ldr	r3, [r4, #8]
 800fdd2:	71da      	strb	r2, [r3, #7]
 800fdd4:	2108      	movs	r1, #8
 800fdd6:	68a2      	ldr	r2, [r4, #8]
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	440a      	add	r2, r1
 800fddc:	7561      	strb	r1, [r4, #21]
 800fdde:	440b      	add	r3, r1
 800fde0:	60a2      	str	r2, [r4, #8]
 800fde2:	6123      	str	r3, [r4, #16]
 800fde4:	7da0      	ldrb	r0, [r4, #22]
 800fde6:	f080 0001 	eor.w	r0, r0, #1
 800fdea:	b002      	add	sp, #8
 800fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf0:	466b      	mov	r3, sp
 800fdf2:	68a2      	ldr	r2, [r4, #8]
 800fdf4:	cb03      	ldmia	r3!, {r0, r1}
 800fdf6:	6010      	str	r0, [r2, #0]
 800fdf8:	6051      	str	r1, [r2, #4]
 800fdfa:	e7eb      	b.n	800fdd4 <ucdr_serialize_uint64_t+0x10c>
 800fdfc:	68a2      	ldr	r2, [r4, #8]
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	7da0      	ldrb	r0, [r4, #22]
 800fe02:	1b92      	subs	r2, r2, r6
 800fe04:	1b9b      	subs	r3, r3, r6
 800fe06:	7567      	strb	r7, [r4, #21]
 800fe08:	f080 0001 	eor.w	r0, r0, #1
 800fe0c:	60a2      	str	r2, [r4, #8]
 800fe0e:	6123      	str	r3, [r4, #16]
 800fe10:	b002      	add	sp, #8
 800fe12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe16:	68a3      	ldr	r3, [r4, #8]
 800fe18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe1c:	701a      	strb	r2, [r3, #0]
 800fe1e:	68a3      	ldr	r3, [r4, #8]
 800fe20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe24:	701a      	strb	r2, [r3, #0]
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe2c:	701a      	strb	r2, [r3, #0]
 800fe2e:	68a3      	ldr	r3, [r4, #8]
 800fe30:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	68a3      	ldr	r3, [r4, #8]
 800fe38:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fe3c:	701a      	strb	r2, [r3, #0]
 800fe3e:	68a3      	ldr	r3, [r4, #8]
 800fe40:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fe44:	701a      	strb	r2, [r3, #0]
 800fe46:	68a3      	ldr	r3, [r4, #8]
 800fe48:	f89d 2000 	ldrb.w	r2, [sp]
 800fe4c:	701a      	strb	r2, [r3, #0]
 800fe4e:	e78a      	b.n	800fd66 <ucdr_serialize_uint64_t+0x9e>
 800fe50:	4628      	mov	r0, r5
 800fe52:	466d      	mov	r5, sp
 800fe54:	4632      	mov	r2, r6
 800fe56:	4629      	mov	r1, r5
 800fe58:	f007 ff5d 	bl	8017d16 <memcpy>
 800fe5c:	4642      	mov	r2, r8
 800fe5e:	19a9      	adds	r1, r5, r6
 800fe60:	68a0      	ldr	r0, [r4, #8]
 800fe62:	f007 ff58 	bl	8017d16 <memcpy>
 800fe66:	e77e      	b.n	800fd66 <ucdr_serialize_uint64_t+0x9e>

0800fe68 <ucdr_serialize_int16_t>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	b082      	sub	sp, #8
 800fe70:	4604      	mov	r4, r0
 800fe72:	2102      	movs	r1, #2
 800fe74:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fe78:	f000 fa72 	bl	8010360 <ucdr_buffer_alignment>
 800fe7c:	4601      	mov	r1, r0
 800fe7e:	4620      	mov	r0, r4
 800fe80:	7d67      	ldrb	r7, [r4, #21]
 800fe82:	f000 fab5 	bl	80103f0 <ucdr_advance_buffer>
 800fe86:	2102      	movs	r1, #2
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f000 fa09 	bl	80102a0 <ucdr_check_buffer_available_for>
 800fe8e:	bb78      	cbnz	r0, 800fef0 <ucdr_serialize_int16_t+0x88>
 800fe90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fe94:	42ab      	cmp	r3, r5
 800fe96:	d926      	bls.n	800fee6 <ucdr_serialize_int16_t+0x7e>
 800fe98:	1b5e      	subs	r6, r3, r5
 800fe9a:	60a3      	str	r3, [r4, #8]
 800fe9c:	6923      	ldr	r3, [r4, #16]
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f1c6 0802 	rsb	r8, r6, #2
 800fea4:	4433      	add	r3, r6
 800fea6:	4641      	mov	r1, r8
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	f000 fa05 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800feae:	2800      	cmp	r0, #0
 800feb0:	d03b      	beq.n	800ff2a <ucdr_serialize_int16_t+0xc2>
 800feb2:	7d23      	ldrb	r3, [r4, #20]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d04a      	beq.n	800ff4e <ucdr_serialize_int16_t+0xe6>
 800feb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800febc:	702b      	strb	r3, [r5, #0]
 800febe:	2e00      	cmp	r6, #0
 800fec0:	d040      	beq.n	800ff44 <ucdr_serialize_int16_t+0xdc>
 800fec2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fec6:	706b      	strb	r3, [r5, #1]
 800fec8:	6923      	ldr	r3, [r4, #16]
 800feca:	2102      	movs	r1, #2
 800fecc:	68a2      	ldr	r2, [r4, #8]
 800fece:	3302      	adds	r3, #2
 800fed0:	7da0      	ldrb	r0, [r4, #22]
 800fed2:	4442      	add	r2, r8
 800fed4:	7561      	strb	r1, [r4, #21]
 800fed6:	1b9e      	subs	r6, r3, r6
 800fed8:	f080 0001 	eor.w	r0, r0, #1
 800fedc:	60a2      	str	r2, [r4, #8]
 800fede:	6126      	str	r6, [r4, #16]
 800fee0:	b002      	add	sp, #8
 800fee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee6:	2102      	movs	r1, #2
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 f9e5 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800feee:	b190      	cbz	r0, 800ff16 <ucdr_serialize_int16_t+0xae>
 800fef0:	7d23      	ldrb	r3, [r4, #20]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	d014      	beq.n	800ff22 <ucdr_serialize_int16_t+0xba>
 800fef8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fefc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff00:	7019      	strb	r1, [r3, #0]
 800ff02:	68a3      	ldr	r3, [r4, #8]
 800ff04:	705a      	strb	r2, [r3, #1]
 800ff06:	2102      	movs	r1, #2
 800ff08:	68a2      	ldr	r2, [r4, #8]
 800ff0a:	6923      	ldr	r3, [r4, #16]
 800ff0c:	440a      	add	r2, r1
 800ff0e:	7561      	strb	r1, [r4, #21]
 800ff10:	440b      	add	r3, r1
 800ff12:	60a2      	str	r2, [r4, #8]
 800ff14:	6123      	str	r3, [r4, #16]
 800ff16:	7da0      	ldrb	r0, [r4, #22]
 800ff18:	f080 0001 	eor.w	r0, r0, #1
 800ff1c:	b002      	add	sp, #8
 800ff1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff26:	801a      	strh	r2, [r3, #0]
 800ff28:	e7ed      	b.n	800ff06 <ucdr_serialize_int16_t+0x9e>
 800ff2a:	68a2      	ldr	r2, [r4, #8]
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	7da0      	ldrb	r0, [r4, #22]
 800ff30:	1b92      	subs	r2, r2, r6
 800ff32:	1b9b      	subs	r3, r3, r6
 800ff34:	7567      	strb	r7, [r4, #21]
 800ff36:	f080 0001 	eor.w	r0, r0, #1
 800ff3a:	60a2      	str	r2, [r4, #8]
 800ff3c:	6123      	str	r3, [r4, #16]
 800ff3e:	b002      	add	sp, #8
 800ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff44:	68a3      	ldr	r3, [r4, #8]
 800ff46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff4a:	701a      	strb	r2, [r3, #0]
 800ff4c:	e7bc      	b.n	800fec8 <ucdr_serialize_int16_t+0x60>
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f10d 0506 	add.w	r5, sp, #6
 800ff54:	4632      	mov	r2, r6
 800ff56:	4629      	mov	r1, r5
 800ff58:	f007 fedd 	bl	8017d16 <memcpy>
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	19a9      	adds	r1, r5, r6
 800ff60:	68a0      	ldr	r0, [r4, #8]
 800ff62:	f007 fed8 	bl	8017d16 <memcpy>
 800ff66:	e7af      	b.n	800fec8 <ucdr_serialize_int16_t+0x60>

0800ff68 <ucdr_deserialize_int16_t>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	460d      	mov	r5, r1
 800ff70:	2102      	movs	r1, #2
 800ff72:	f000 f9f5 	bl	8010360 <ucdr_buffer_alignment>
 800ff76:	4601      	mov	r1, r0
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ff7e:	f000 fa37 	bl	80103f0 <ucdr_advance_buffer>
 800ff82:	2102      	movs	r1, #2
 800ff84:	4620      	mov	r0, r4
 800ff86:	f000 f98b 	bl	80102a0 <ucdr_check_buffer_available_for>
 800ff8a:	bb60      	cbnz	r0, 800ffe6 <ucdr_deserialize_int16_t+0x7e>
 800ff8c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ff90:	42be      	cmp	r6, r7
 800ff92:	d923      	bls.n	800ffdc <ucdr_deserialize_int16_t+0x74>
 800ff94:	6923      	ldr	r3, [r4, #16]
 800ff96:	4620      	mov	r0, r4
 800ff98:	60a6      	str	r6, [r4, #8]
 800ff9a:	1bf6      	subs	r6, r6, r7
 800ff9c:	4433      	add	r3, r6
 800ff9e:	f1c6 0902 	rsb	r9, r6, #2
 800ffa2:	6123      	str	r3, [r4, #16]
 800ffa4:	4649      	mov	r1, r9
 800ffa6:	f000 f987 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d034      	beq.n	8010018 <ucdr_deserialize_int16_t+0xb0>
 800ffae:	7d23      	ldrb	r3, [r4, #20]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d042      	beq.n	801003a <ucdr_deserialize_int16_t+0xd2>
 800ffb4:	787b      	ldrb	r3, [r7, #1]
 800ffb6:	702b      	strb	r3, [r5, #0]
 800ffb8:	2e00      	cmp	r6, #0
 800ffba:	d03a      	beq.n	8010032 <ucdr_deserialize_int16_t+0xca>
 800ffbc:	783b      	ldrb	r3, [r7, #0]
 800ffbe:	706b      	strb	r3, [r5, #1]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	2102      	movs	r1, #2
 800ffc4:	68a2      	ldr	r2, [r4, #8]
 800ffc6:	3302      	adds	r3, #2
 800ffc8:	7da0      	ldrb	r0, [r4, #22]
 800ffca:	444a      	add	r2, r9
 800ffcc:	7561      	strb	r1, [r4, #21]
 800ffce:	1b9b      	subs	r3, r3, r6
 800ffd0:	f080 0001 	eor.w	r0, r0, #1
 800ffd4:	60a2      	str	r2, [r4, #8]
 800ffd6:	6123      	str	r3, [r4, #16]
 800ffd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffdc:	2102      	movs	r1, #2
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f000 f96a 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 800ffe4:	b180      	cbz	r0, 8010008 <ucdr_deserialize_int16_t+0xa0>
 800ffe6:	7d23      	ldrb	r3, [r4, #20]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	68a3      	ldr	r3, [r4, #8]
 800ffec:	d011      	beq.n	8010012 <ucdr_deserialize_int16_t+0xaa>
 800ffee:	785b      	ldrb	r3, [r3, #1]
 800fff0:	702b      	strb	r3, [r5, #0]
 800fff2:	68a3      	ldr	r3, [r4, #8]
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	706b      	strb	r3, [r5, #1]
 800fff8:	2102      	movs	r1, #2
 800fffa:	68a2      	ldr	r2, [r4, #8]
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	440a      	add	r2, r1
 8010000:	7561      	strb	r1, [r4, #21]
 8010002:	440b      	add	r3, r1
 8010004:	60a2      	str	r2, [r4, #8]
 8010006:	6123      	str	r3, [r4, #16]
 8010008:	7da0      	ldrb	r0, [r4, #22]
 801000a:	f080 0001 	eor.w	r0, r0, #1
 801000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	802b      	strh	r3, [r5, #0]
 8010016:	e7ef      	b.n	800fff8 <ucdr_deserialize_int16_t+0x90>
 8010018:	68a2      	ldr	r2, [r4, #8]
 801001a:	6923      	ldr	r3, [r4, #16]
 801001c:	1b92      	subs	r2, r2, r6
 801001e:	7da0      	ldrb	r0, [r4, #22]
 8010020:	1b9b      	subs	r3, r3, r6
 8010022:	f884 8015 	strb.w	r8, [r4, #21]
 8010026:	f080 0001 	eor.w	r0, r0, #1
 801002a:	60a2      	str	r2, [r4, #8]
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010032:	68a3      	ldr	r3, [r4, #8]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	706b      	strb	r3, [r5, #1]
 8010038:	e7c2      	b.n	800ffc0 <ucdr_deserialize_int16_t+0x58>
 801003a:	4639      	mov	r1, r7
 801003c:	4632      	mov	r2, r6
 801003e:	4628      	mov	r0, r5
 8010040:	f007 fe69 	bl	8017d16 <memcpy>
 8010044:	464a      	mov	r2, r9
 8010046:	19a8      	adds	r0, r5, r6
 8010048:	68a1      	ldr	r1, [r4, #8]
 801004a:	f007 fe64 	bl	8017d16 <memcpy>
 801004e:	e7b7      	b.n	800ffc0 <ucdr_deserialize_int16_t+0x58>

08010050 <ucdr_serialize_int32_t>:
 8010050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010054:	b082      	sub	sp, #8
 8010056:	4604      	mov	r4, r0
 8010058:	9101      	str	r1, [sp, #4]
 801005a:	2104      	movs	r1, #4
 801005c:	f000 f980 	bl	8010360 <ucdr_buffer_alignment>
 8010060:	4601      	mov	r1, r0
 8010062:	4620      	mov	r0, r4
 8010064:	7d67      	ldrb	r7, [r4, #21]
 8010066:	f000 f9c3 	bl	80103f0 <ucdr_advance_buffer>
 801006a:	2104      	movs	r1, #4
 801006c:	4620      	mov	r0, r4
 801006e:	f000 f917 	bl	80102a0 <ucdr_check_buffer_available_for>
 8010072:	2800      	cmp	r0, #0
 8010074:	d139      	bne.n	80100ea <ucdr_serialize_int32_t+0x9a>
 8010076:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801007a:	42ab      	cmp	r3, r5
 801007c:	d930      	bls.n	80100e0 <ucdr_serialize_int32_t+0x90>
 801007e:	1b5e      	subs	r6, r3, r5
 8010080:	60a3      	str	r3, [r4, #8]
 8010082:	6923      	ldr	r3, [r4, #16]
 8010084:	4620      	mov	r0, r4
 8010086:	f1c6 0804 	rsb	r8, r6, #4
 801008a:	4433      	add	r3, r6
 801008c:	4641      	mov	r1, r8
 801008e:	6123      	str	r3, [r4, #16]
 8010090:	f000 f912 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 8010094:	2800      	cmp	r0, #0
 8010096:	d04c      	beq.n	8010132 <ucdr_serialize_int32_t+0xe2>
 8010098:	7d23      	ldrb	r3, [r4, #20]
 801009a:	2b01      	cmp	r3, #1
 801009c:	d063      	beq.n	8010166 <ucdr_serialize_int32_t+0x116>
 801009e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80100a2:	702b      	strb	r3, [r5, #0]
 80100a4:	2e00      	cmp	r6, #0
 80100a6:	d051      	beq.n	801014c <ucdr_serialize_int32_t+0xfc>
 80100a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80100ac:	2e01      	cmp	r6, #1
 80100ae:	706b      	strb	r3, [r5, #1]
 80100b0:	d050      	beq.n	8010154 <ucdr_serialize_int32_t+0x104>
 80100b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80100b6:	2e02      	cmp	r6, #2
 80100b8:	70ab      	strb	r3, [r5, #2]
 80100ba:	d04f      	beq.n	801015c <ucdr_serialize_int32_t+0x10c>
 80100bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80100c0:	70eb      	strb	r3, [r5, #3]
 80100c2:	6923      	ldr	r3, [r4, #16]
 80100c4:	2104      	movs	r1, #4
 80100c6:	68a2      	ldr	r2, [r4, #8]
 80100c8:	3304      	adds	r3, #4
 80100ca:	7da0      	ldrb	r0, [r4, #22]
 80100cc:	4442      	add	r2, r8
 80100ce:	7561      	strb	r1, [r4, #21]
 80100d0:	1b9e      	subs	r6, r3, r6
 80100d2:	f080 0001 	eor.w	r0, r0, #1
 80100d6:	60a2      	str	r2, [r4, #8]
 80100d8:	6126      	str	r6, [r4, #16]
 80100da:	b002      	add	sp, #8
 80100dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e0:	2104      	movs	r1, #4
 80100e2:	4620      	mov	r0, r4
 80100e4:	f000 f8e8 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 80100e8:	b1d0      	cbz	r0, 8010120 <ucdr_serialize_int32_t+0xd0>
 80100ea:	7d23      	ldrb	r3, [r4, #20]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	68a3      	ldr	r3, [r4, #8]
 80100f0:	d01c      	beq.n	801012c <ucdr_serialize_int32_t+0xdc>
 80100f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80100f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80100fe:	7018      	strb	r0, [r3, #0]
 8010100:	68a3      	ldr	r3, [r4, #8]
 8010102:	705a      	strb	r2, [r3, #1]
 8010104:	68a3      	ldr	r3, [r4, #8]
 8010106:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801010a:	7099      	strb	r1, [r3, #2]
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	70da      	strb	r2, [r3, #3]
 8010110:	2104      	movs	r1, #4
 8010112:	68a2      	ldr	r2, [r4, #8]
 8010114:	6923      	ldr	r3, [r4, #16]
 8010116:	440a      	add	r2, r1
 8010118:	7561      	strb	r1, [r4, #21]
 801011a:	440b      	add	r3, r1
 801011c:	60a2      	str	r2, [r4, #8]
 801011e:	6123      	str	r3, [r4, #16]
 8010120:	7da0      	ldrb	r0, [r4, #22]
 8010122:	f080 0001 	eor.w	r0, r0, #1
 8010126:	b002      	add	sp, #8
 8010128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012c:	9a01      	ldr	r2, [sp, #4]
 801012e:	601a      	str	r2, [r3, #0]
 8010130:	e7ee      	b.n	8010110 <ucdr_serialize_int32_t+0xc0>
 8010132:	68a2      	ldr	r2, [r4, #8]
 8010134:	6923      	ldr	r3, [r4, #16]
 8010136:	7da0      	ldrb	r0, [r4, #22]
 8010138:	1b92      	subs	r2, r2, r6
 801013a:	1b9b      	subs	r3, r3, r6
 801013c:	7567      	strb	r7, [r4, #21]
 801013e:	f080 0001 	eor.w	r0, r0, #1
 8010142:	60a2      	str	r2, [r4, #8]
 8010144:	6123      	str	r3, [r4, #16]
 8010146:	b002      	add	sp, #8
 8010148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014c:	68a3      	ldr	r3, [r4, #8]
 801014e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010152:	701a      	strb	r2, [r3, #0]
 8010154:	68a3      	ldr	r3, [r4, #8]
 8010156:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801015a:	701a      	strb	r2, [r3, #0]
 801015c:	68a3      	ldr	r3, [r4, #8]
 801015e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010162:	701a      	strb	r2, [r3, #0]
 8010164:	e7ad      	b.n	80100c2 <ucdr_serialize_int32_t+0x72>
 8010166:	4628      	mov	r0, r5
 8010168:	ad01      	add	r5, sp, #4
 801016a:	4632      	mov	r2, r6
 801016c:	4629      	mov	r1, r5
 801016e:	f007 fdd2 	bl	8017d16 <memcpy>
 8010172:	4642      	mov	r2, r8
 8010174:	19a9      	adds	r1, r5, r6
 8010176:	68a0      	ldr	r0, [r4, #8]
 8010178:	f007 fdcd 	bl	8017d16 <memcpy>
 801017c:	e7a1      	b.n	80100c2 <ucdr_serialize_int32_t+0x72>
 801017e:	bf00      	nop

08010180 <ucdr_deserialize_int32_t>:
 8010180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010184:	4604      	mov	r4, r0
 8010186:	460d      	mov	r5, r1
 8010188:	2104      	movs	r1, #4
 801018a:	f000 f8e9 	bl	8010360 <ucdr_buffer_alignment>
 801018e:	4601      	mov	r1, r0
 8010190:	4620      	mov	r0, r4
 8010192:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010196:	f000 f92b 	bl	80103f0 <ucdr_advance_buffer>
 801019a:	2104      	movs	r1, #4
 801019c:	4620      	mov	r0, r4
 801019e:	f000 f87f 	bl	80102a0 <ucdr_check_buffer_available_for>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d138      	bne.n	8010218 <ucdr_deserialize_int32_t+0x98>
 80101a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80101aa:	42b7      	cmp	r7, r6
 80101ac:	d92f      	bls.n	801020e <ucdr_deserialize_int32_t+0x8e>
 80101ae:	6923      	ldr	r3, [r4, #16]
 80101b0:	4620      	mov	r0, r4
 80101b2:	60a7      	str	r7, [r4, #8]
 80101b4:	1bbf      	subs	r7, r7, r6
 80101b6:	443b      	add	r3, r7
 80101b8:	f1c7 0904 	rsb	r9, r7, #4
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	4649      	mov	r1, r9
 80101c0:	f000 f87a 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d046      	beq.n	8010256 <ucdr_deserialize_int32_t+0xd6>
 80101c8:	7d23      	ldrb	r3, [r4, #20]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d05c      	beq.n	8010288 <ucdr_deserialize_int32_t+0x108>
 80101ce:	78f3      	ldrb	r3, [r6, #3]
 80101d0:	702b      	strb	r3, [r5, #0]
 80101d2:	2f00      	cmp	r7, #0
 80101d4:	d04c      	beq.n	8010270 <ucdr_deserialize_int32_t+0xf0>
 80101d6:	78b3      	ldrb	r3, [r6, #2]
 80101d8:	2f01      	cmp	r7, #1
 80101da:	706b      	strb	r3, [r5, #1]
 80101dc:	f105 0302 	add.w	r3, r5, #2
 80101e0:	d04a      	beq.n	8010278 <ucdr_deserialize_int32_t+0xf8>
 80101e2:	7873      	ldrb	r3, [r6, #1]
 80101e4:	2f02      	cmp	r7, #2
 80101e6:	70ab      	strb	r3, [r5, #2]
 80101e8:	f105 0303 	add.w	r3, r5, #3
 80101ec:	d048      	beq.n	8010280 <ucdr_deserialize_int32_t+0x100>
 80101ee:	7833      	ldrb	r3, [r6, #0]
 80101f0:	70eb      	strb	r3, [r5, #3]
 80101f2:	6923      	ldr	r3, [r4, #16]
 80101f4:	2104      	movs	r1, #4
 80101f6:	68a2      	ldr	r2, [r4, #8]
 80101f8:	3304      	adds	r3, #4
 80101fa:	7da0      	ldrb	r0, [r4, #22]
 80101fc:	444a      	add	r2, r9
 80101fe:	7561      	strb	r1, [r4, #21]
 8010200:	1bdb      	subs	r3, r3, r7
 8010202:	f080 0001 	eor.w	r0, r0, #1
 8010206:	60a2      	str	r2, [r4, #8]
 8010208:	6123      	str	r3, [r4, #16]
 801020a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801020e:	2104      	movs	r1, #4
 8010210:	4620      	mov	r0, r4
 8010212:	f000 f851 	bl	80102b8 <ucdr_check_final_buffer_behavior>
 8010216:	b1b0      	cbz	r0, 8010246 <ucdr_deserialize_int32_t+0xc6>
 8010218:	7d23      	ldrb	r3, [r4, #20]
 801021a:	2b01      	cmp	r3, #1
 801021c:	68a3      	ldr	r3, [r4, #8]
 801021e:	d017      	beq.n	8010250 <ucdr_deserialize_int32_t+0xd0>
 8010220:	78db      	ldrb	r3, [r3, #3]
 8010222:	702b      	strb	r3, [r5, #0]
 8010224:	68a3      	ldr	r3, [r4, #8]
 8010226:	789b      	ldrb	r3, [r3, #2]
 8010228:	706b      	strb	r3, [r5, #1]
 801022a:	68a3      	ldr	r3, [r4, #8]
 801022c:	785b      	ldrb	r3, [r3, #1]
 801022e:	70ab      	strb	r3, [r5, #2]
 8010230:	68a3      	ldr	r3, [r4, #8]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	70eb      	strb	r3, [r5, #3]
 8010236:	2104      	movs	r1, #4
 8010238:	68a2      	ldr	r2, [r4, #8]
 801023a:	6923      	ldr	r3, [r4, #16]
 801023c:	440a      	add	r2, r1
 801023e:	7561      	strb	r1, [r4, #21]
 8010240:	440b      	add	r3, r1
 8010242:	60a2      	str	r2, [r4, #8]
 8010244:	6123      	str	r3, [r4, #16]
 8010246:	7da0      	ldrb	r0, [r4, #22]
 8010248:	f080 0001 	eor.w	r0, r0, #1
 801024c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	602b      	str	r3, [r5, #0]
 8010254:	e7ef      	b.n	8010236 <ucdr_deserialize_int32_t+0xb6>
 8010256:	68a2      	ldr	r2, [r4, #8]
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	1bd2      	subs	r2, r2, r7
 801025c:	7da0      	ldrb	r0, [r4, #22]
 801025e:	1bdb      	subs	r3, r3, r7
 8010260:	f884 8015 	strb.w	r8, [r4, #21]
 8010264:	f080 0001 	eor.w	r0, r0, #1
 8010268:	60a2      	str	r2, [r4, #8]
 801026a:	6123      	str	r3, [r4, #16]
 801026c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010270:	68a3      	ldr	r3, [r4, #8]
 8010272:	789b      	ldrb	r3, [r3, #2]
 8010274:	706b      	strb	r3, [r5, #1]
 8010276:	1cab      	adds	r3, r5, #2
 8010278:	68a2      	ldr	r2, [r4, #8]
 801027a:	7852      	ldrb	r2, [r2, #1]
 801027c:	f803 2b01 	strb.w	r2, [r3], #1
 8010280:	68a2      	ldr	r2, [r4, #8]
 8010282:	7812      	ldrb	r2, [r2, #0]
 8010284:	701a      	strb	r2, [r3, #0]
 8010286:	e7b4      	b.n	80101f2 <ucdr_deserialize_int32_t+0x72>
 8010288:	4631      	mov	r1, r6
 801028a:	463a      	mov	r2, r7
 801028c:	4628      	mov	r0, r5
 801028e:	f007 fd42 	bl	8017d16 <memcpy>
 8010292:	464a      	mov	r2, r9
 8010294:	19e8      	adds	r0, r5, r7
 8010296:	68a1      	ldr	r1, [r4, #8]
 8010298:	f007 fd3d 	bl	8017d16 <memcpy>
 801029c:	e7a9      	b.n	80101f2 <ucdr_deserialize_int32_t+0x72>
 801029e:	bf00      	nop

080102a0 <ucdr_check_buffer_available_for>:
 80102a0:	7d83      	ldrb	r3, [r0, #22]
 80102a2:	b93b      	cbnz	r3, 80102b4 <ucdr_check_buffer_available_for+0x14>
 80102a4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80102a8:	4419      	add	r1, r3
 80102aa:	4288      	cmp	r0, r1
 80102ac:	bf34      	ite	cc
 80102ae:	2000      	movcc	r0, #0
 80102b0:	2001      	movcs	r0, #1
 80102b2:	4770      	bx	lr
 80102b4:	2000      	movs	r0, #0
 80102b6:	4770      	bx	lr

080102b8 <ucdr_check_final_buffer_behavior>:
 80102b8:	7d83      	ldrb	r3, [r0, #22]
 80102ba:	b943      	cbnz	r3, 80102ce <ucdr_check_final_buffer_behavior+0x16>
 80102bc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80102c0:	b510      	push	{r4, lr}
 80102c2:	4291      	cmp	r1, r2
 80102c4:	4604      	mov	r4, r0
 80102c6:	d205      	bcs.n	80102d4 <ucdr_check_final_buffer_behavior+0x1c>
 80102c8:	2301      	movs	r3, #1
 80102ca:	4618      	mov	r0, r3
 80102cc:	bd10      	pop	{r4, pc}
 80102ce:	2300      	movs	r3, #0
 80102d0:	4618      	mov	r0, r3
 80102d2:	4770      	bx	lr
 80102d4:	6982      	ldr	r2, [r0, #24]
 80102d6:	b13a      	cbz	r2, 80102e8 <ucdr_check_final_buffer_behavior+0x30>
 80102d8:	69c1      	ldr	r1, [r0, #28]
 80102da:	4790      	blx	r2
 80102dc:	f080 0301 	eor.w	r3, r0, #1
 80102e0:	75a0      	strb	r0, [r4, #22]
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	4618      	mov	r0, r3
 80102e6:	bd10      	pop	{r4, pc}
 80102e8:	2001      	movs	r0, #1
 80102ea:	75a0      	strb	r0, [r4, #22]
 80102ec:	e7fa      	b.n	80102e4 <ucdr_check_final_buffer_behavior+0x2c>
 80102ee:	bf00      	nop

080102f0 <ucdr_set_on_full_buffer_callback>:
 80102f0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop

080102f8 <ucdr_init_buffer_origin_offset_endian>:
 80102f8:	b410      	push	{r4}
 80102fa:	9c01      	ldr	r4, [sp, #4]
 80102fc:	440a      	add	r2, r1
 80102fe:	6001      	str	r1, [r0, #0]
 8010300:	6042      	str	r2, [r0, #4]
 8010302:	190a      	adds	r2, r1, r4
 8010304:	441c      	add	r4, r3
 8010306:	6082      	str	r2, [r0, #8]
 8010308:	2200      	movs	r2, #0
 801030a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801030e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010312:	7542      	strb	r2, [r0, #21]
 8010314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010318:	7582      	strb	r2, [r0, #22]
 801031a:	7503      	strb	r3, [r0, #20]
 801031c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop

08010324 <ucdr_init_buffer_origin_offset>:
 8010324:	b510      	push	{r4, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	9c04      	ldr	r4, [sp, #16]
 801032a:	9400      	str	r4, [sp, #0]
 801032c:	2401      	movs	r4, #1
 801032e:	9401      	str	r4, [sp, #4]
 8010330:	f7ff ffe2 	bl	80102f8 <ucdr_init_buffer_origin_offset_endian>
 8010334:	b002      	add	sp, #8
 8010336:	bd10      	pop	{r4, pc}

08010338 <ucdr_init_buffer_origin>:
 8010338:	b510      	push	{r4, lr}
 801033a:	2400      	movs	r4, #0
 801033c:	b082      	sub	sp, #8
 801033e:	9400      	str	r4, [sp, #0]
 8010340:	f7ff fff0 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8010344:	b002      	add	sp, #8
 8010346:	bd10      	pop	{r4, pc}

08010348 <ucdr_init_buffer>:
 8010348:	2300      	movs	r3, #0
 801034a:	f7ff bff5 	b.w	8010338 <ucdr_init_buffer_origin>
 801034e:	bf00      	nop

08010350 <ucdr_alignment>:
 8010350:	fbb0 f2f1 	udiv	r2, r0, r1
 8010354:	fb02 0011 	mls	r0, r2, r1, r0
 8010358:	1e4b      	subs	r3, r1, #1
 801035a:	1a08      	subs	r0, r1, r0
 801035c:	4018      	ands	r0, r3
 801035e:	4770      	bx	lr

08010360 <ucdr_buffer_alignment>:
 8010360:	7d43      	ldrb	r3, [r0, #21]
 8010362:	428b      	cmp	r3, r1
 8010364:	d209      	bcs.n	801037a <ucdr_buffer_alignment+0x1a>
 8010366:	6903      	ldr	r3, [r0, #16]
 8010368:	1e4a      	subs	r2, r1, #1
 801036a:	fbb3 f0f1 	udiv	r0, r3, r1
 801036e:	fb01 3010 	mls	r0, r1, r0, r3
 8010372:	1a09      	subs	r1, r1, r0
 8010374:	ea01 0002 	and.w	r0, r1, r2
 8010378:	4770      	bx	lr
 801037a:	2000      	movs	r0, #0
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop

08010380 <ucdr_align_to>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4604      	mov	r4, r0
 8010384:	460d      	mov	r5, r1
 8010386:	f7ff ffeb 	bl	8010360 <ucdr_buffer_alignment>
 801038a:	68a3      	ldr	r3, [r4, #8]
 801038c:	7565      	strb	r5, [r4, #21]
 801038e:	181a      	adds	r2, r3, r0
 8010390:	6923      	ldr	r3, [r4, #16]
 8010392:	4418      	add	r0, r3
 8010394:	6863      	ldr	r3, [r4, #4]
 8010396:	4293      	cmp	r3, r2
 8010398:	6120      	str	r0, [r4, #16]
 801039a:	bf28      	it	cs
 801039c:	4613      	movcs	r3, r2
 801039e:	60a3      	str	r3, [r4, #8]
 80103a0:	bd38      	pop	{r3, r4, r5, pc}
 80103a2:	bf00      	nop

080103a4 <ucdr_buffer_length>:
 80103a4:	6882      	ldr	r2, [r0, #8]
 80103a6:	6800      	ldr	r0, [r0, #0]
 80103a8:	1a10      	subs	r0, r2, r0
 80103aa:	4770      	bx	lr

080103ac <ucdr_buffer_remaining>:
 80103ac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80103b0:	1a10      	subs	r0, r2, r0
 80103b2:	4770      	bx	lr

080103b4 <ucdr_check_final_buffer_behavior_array>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	7d83      	ldrb	r3, [r0, #22]
 80103b8:	b9a3      	cbnz	r3, 80103e4 <ucdr_check_final_buffer_behavior_array+0x30>
 80103ba:	4604      	mov	r4, r0
 80103bc:	460d      	mov	r5, r1
 80103be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d300      	bcc.n	80103c8 <ucdr_check_final_buffer_behavior_array+0x14>
 80103c6:	b931      	cbnz	r1, 80103d6 <ucdr_check_final_buffer_behavior_array+0x22>
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff ffef 	bl	80103ac <ucdr_buffer_remaining>
 80103ce:	42a8      	cmp	r0, r5
 80103d0:	bf28      	it	cs
 80103d2:	4628      	movcs	r0, r5
 80103d4:	bd38      	pop	{r3, r4, r5, pc}
 80103d6:	6983      	ldr	r3, [r0, #24]
 80103d8:	b133      	cbz	r3, 80103e8 <ucdr_check_final_buffer_behavior_array+0x34>
 80103da:	69c1      	ldr	r1, [r0, #28]
 80103dc:	4798      	blx	r3
 80103de:	75a0      	strb	r0, [r4, #22]
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0f1      	beq.n	80103c8 <ucdr_check_final_buffer_behavior_array+0x14>
 80103e4:	2000      	movs	r0, #0
 80103e6:	bd38      	pop	{r3, r4, r5, pc}
 80103e8:	2301      	movs	r3, #1
 80103ea:	7583      	strb	r3, [r0, #22]
 80103ec:	e7fa      	b.n	80103e4 <ucdr_check_final_buffer_behavior_array+0x30>
 80103ee:	bf00      	nop

080103f0 <ucdr_advance_buffer>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4604      	mov	r4, r0
 80103f4:	460d      	mov	r5, r1
 80103f6:	f7ff ff53 	bl	80102a0 <ucdr_check_buffer_available_for>
 80103fa:	b178      	cbz	r0, 801041c <ucdr_advance_buffer+0x2c>
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	68a2      	ldr	r2, [r4, #8]
 8010400:	442b      	add	r3, r5
 8010402:	442a      	add	r2, r5
 8010404:	6123      	str	r3, [r4, #16]
 8010406:	2301      	movs	r3, #1
 8010408:	60a2      	str	r2, [r4, #8]
 801040a:	7563      	strb	r3, [r4, #21]
 801040c:	bd38      	pop	{r3, r4, r5, pc}
 801040e:	68a2      	ldr	r2, [r4, #8]
 8010410:	1a2d      	subs	r5, r5, r0
 8010412:	6923      	ldr	r3, [r4, #16]
 8010414:	4402      	add	r2, r0
 8010416:	4418      	add	r0, r3
 8010418:	60a2      	str	r2, [r4, #8]
 801041a:	6120      	str	r0, [r4, #16]
 801041c:	4629      	mov	r1, r5
 801041e:	2201      	movs	r2, #1
 8010420:	4620      	mov	r0, r4
 8010422:	f7ff ffc7 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 8010426:	2800      	cmp	r0, #0
 8010428:	d1f1      	bne.n	801040e <ucdr_advance_buffer+0x1e>
 801042a:	2301      	movs	r3, #1
 801042c:	7563      	strb	r3, [r4, #21]
 801042e:	bd38      	pop	{r3, r4, r5, pc}

08010430 <uxr_buffer_delete_entity>:
 8010430:	b510      	push	{r4, lr}
 8010432:	2300      	movs	r3, #0
 8010434:	b08e      	sub	sp, #56	@ 0x38
 8010436:	4604      	mov	r4, r0
 8010438:	9103      	str	r1, [sp, #12]
 801043a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801043e:	2303      	movs	r3, #3
 8010440:	2204      	movs	r2, #4
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	ab06      	add	r3, sp, #24
 8010446:	f001 f8c1 	bl	80115cc <uxr_prepare_stream_to_write_submessage>
 801044a:	b918      	cbnz	r0, 8010454 <uxr_buffer_delete_entity+0x24>
 801044c:	4604      	mov	r4, r0
 801044e:	4620      	mov	r0, r4
 8010450:	b00e      	add	sp, #56	@ 0x38
 8010452:	bd10      	pop	{r4, pc}
 8010454:	9902      	ldr	r1, [sp, #8]
 8010456:	aa05      	add	r2, sp, #20
 8010458:	4620      	mov	r0, r4
 801045a:	f001 f9f3 	bl	8011844 <uxr_init_base_object_request>
 801045e:	4604      	mov	r4, r0
 8010460:	a905      	add	r1, sp, #20
 8010462:	a806      	add	r0, sp, #24
 8010464:	f002 fb5c 	bl	8012b20 <uxr_serialize_DELETE_Payload>
 8010468:	4620      	mov	r0, r4
 801046a:	b00e      	add	sp, #56	@ 0x38
 801046c:	bd10      	pop	{r4, pc}
 801046e:	bf00      	nop

08010470 <uxr_common_create_entity>:
 8010470:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010474:	b510      	push	{r4, lr}
 8010476:	f1bc 0f01 	cmp.w	ip, #1
 801047a:	b08c      	sub	sp, #48	@ 0x30
 801047c:	4604      	mov	r4, r0
 801047e:	9202      	str	r2, [sp, #8]
 8010480:	bf0c      	ite	eq
 8010482:	f003 0201 	andeq.w	r2, r3, #1
 8010486:	2200      	movne	r2, #0
 8010488:	330e      	adds	r3, #14
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010490:	441a      	add	r2, r3
 8010492:	ab04      	add	r3, sp, #16
 8010494:	9101      	str	r1, [sp, #4]
 8010496:	2101      	movs	r1, #1
 8010498:	b292      	uxth	r2, r2
 801049a:	9100      	str	r1, [sp, #0]
 801049c:	9903      	ldr	r1, [sp, #12]
 801049e:	f001 f895 	bl	80115cc <uxr_prepare_stream_to_write_submessage>
 80104a2:	b918      	cbnz	r0, 80104ac <uxr_common_create_entity+0x3c>
 80104a4:	4604      	mov	r4, r0
 80104a6:	4620      	mov	r0, r4
 80104a8:	b00c      	add	sp, #48	@ 0x30
 80104aa:	bd10      	pop	{r4, pc}
 80104ac:	9902      	ldr	r1, [sp, #8]
 80104ae:	4620      	mov	r0, r4
 80104b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104b2:	f001 f9c7 	bl	8011844 <uxr_init_base_object_request>
 80104b6:	4604      	mov	r4, r0
 80104b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80104ba:	a804      	add	r0, sp, #16
 80104bc:	f002 fa8a 	bl	80129d4 <uxr_serialize_CREATE_Payload>
 80104c0:	4620      	mov	r0, r4
 80104c2:	b00c      	add	sp, #48	@ 0x30
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop

080104c8 <uxr_buffer_create_participant_bin>:
 80104c8:	b570      	push	{r4, r5, r6, lr}
 80104ca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80104ce:	4605      	mov	r5, r0
 80104d0:	ac11      	add	r4, sp, #68	@ 0x44
 80104d2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80104d6:	2303      	movs	r3, #3
 80104d8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80104dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80104e0:	7223      	strb	r3, [r4, #8]
 80104e2:	2300      	movs	r3, #0
 80104e4:	2201      	movs	r2, #1
 80104e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80104ea:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80104ec:	7122      	strb	r2, [r4, #4]
 80104ee:	b1cb      	cbz	r3, 8010524 <uxr_buffer_create_participant_bin+0x5c>
 80104f0:	f88d 201c 	strb.w	r2, [sp, #28]
 80104f4:	9308      	str	r3, [sp, #32]
 80104f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104fa:	a915      	add	r1, sp, #84	@ 0x54
 80104fc:	a809      	add	r0, sp, #36	@ 0x24
 80104fe:	f7ff ff23 	bl	8010348 <ucdr_init_buffer>
 8010502:	a905      	add	r1, sp, #20
 8010504:	a809      	add	r0, sp, #36	@ 0x24
 8010506:	f001 ff3b 	bl	8012380 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801050a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801050c:	9600      	str	r6, [sp, #0]
 801050e:	4628      	mov	r0, r5
 8010510:	9401      	str	r4, [sp, #4]
 8010512:	60e3      	str	r3, [r4, #12]
 8010514:	b29b      	uxth	r3, r3
 8010516:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801051a:	f7ff ffa9 	bl	8010470 <uxr_common_create_entity>
 801051e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010522:	bd70      	pop	{r4, r5, r6, pc}
 8010524:	f88d 301c 	strb.w	r3, [sp, #28]
 8010528:	e7e5      	b.n	80104f6 <uxr_buffer_create_participant_bin+0x2e>
 801052a:	bf00      	nop

0801052c <uxr_buffer_create_topic_bin>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010532:	4605      	mov	r5, r0
 8010534:	4618      	mov	r0, r3
 8010536:	9105      	str	r1, [sp, #20]
 8010538:	a997      	add	r1, sp, #604	@ 0x25c
 801053a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801053e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010540:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010544:	2302      	movs	r3, #2
 8010546:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801054a:	f000 f8ed 	bl	8010728 <uxr_object_id_to_raw>
 801054e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010554:	a917      	add	r1, sp, #92	@ 0x5c
 8010556:	a80b      	add	r0, sp, #44	@ 0x2c
 8010558:	9306      	str	r3, [sp, #24]
 801055a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801055c:	930a      	str	r3, [sp, #40]	@ 0x28
 801055e:	2303      	movs	r3, #3
 8010560:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010564:	2301      	movs	r3, #1
 8010566:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801056a:	2300      	movs	r3, #0
 801056c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010570:	f7ff feea 	bl	8010348 <ucdr_init_buffer>
 8010574:	a906      	add	r1, sp, #24
 8010576:	a80b      	add	r0, sp, #44	@ 0x2c
 8010578:	f001 ff24 	bl	80123c4 <uxr_serialize_OBJK_Topic_Binary>
 801057c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801057e:	4628      	mov	r0, r5
 8010580:	9600      	str	r6, [sp, #0]
 8010582:	9316      	str	r3, [sp, #88]	@ 0x58
 8010584:	b29b      	uxth	r3, r3
 8010586:	9401      	str	r4, [sp, #4]
 8010588:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801058c:	f7ff ff70 	bl	8010470 <uxr_common_create_entity>
 8010590:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	bf00      	nop

08010598 <uxr_buffer_create_publisher_bin>:
 8010598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801059a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801059e:	2603      	movs	r6, #3
 80105a0:	4605      	mov	r5, r0
 80105a2:	4618      	mov	r0, r3
 80105a4:	9105      	str	r1, [sp, #20]
 80105a6:	a992      	add	r1, sp, #584	@ 0x248
 80105a8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80105ac:	ac0e      	add	r4, sp, #56	@ 0x38
 80105ae:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80105b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105b6:	f000 f8b7 	bl	8010728 <uxr_object_id_to_raw>
 80105ba:	2300      	movs	r3, #0
 80105bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105c0:	a912      	add	r1, sp, #72	@ 0x48
 80105c2:	a806      	add	r0, sp, #24
 80105c4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80105c8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80105cc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80105d0:	f7ff feba 	bl	8010348 <ucdr_init_buffer>
 80105d4:	a993      	add	r1, sp, #588	@ 0x24c
 80105d6:	a806      	add	r0, sp, #24
 80105d8:	f001 ffa8 	bl	801252c <uxr_serialize_OBJK_Publisher_Binary>
 80105dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105de:	4628      	mov	r0, r5
 80105e0:	9700      	str	r7, [sp, #0]
 80105e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	9401      	str	r4, [sp, #4]
 80105e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80105ec:	f7ff ff40 	bl	8010470 <uxr_common_create_entity>
 80105f0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80105f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105f6:	bf00      	nop

080105f8 <uxr_buffer_create_datawriter_bin>:
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010600:	4606      	mov	r6, r0
 8010602:	4618      	mov	r0, r3
 8010604:	2703      	movs	r7, #3
 8010606:	ac1d      	add	r4, sp, #116	@ 0x74
 8010608:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801060c:	9105      	str	r1, [sp, #20]
 801060e:	a9a1      	add	r1, sp, #644	@ 0x284
 8010610:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010614:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010618:	2305      	movs	r3, #5
 801061a:	7123      	strb	r3, [r4, #4]
 801061c:	f000 f884 	bl	8010728 <uxr_object_id_to_raw>
 8010620:	a90e      	add	r1, sp, #56	@ 0x38
 8010622:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010624:	7227      	strb	r7, [r4, #8]
 8010626:	f000 f87f 	bl	8010728 <uxr_object_id_to_raw>
 801062a:	2300      	movs	r3, #0
 801062c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010630:	3d00      	subs	r5, #0
 8010632:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010636:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801063a:	bf18      	it	ne
 801063c:	2501      	movne	r5, #1
 801063e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010642:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010646:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801064a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801064e:	2301      	movs	r3, #1
 8010650:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010654:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010658:	bb8a      	cbnz	r2, 80106be <uxr_buffer_create_datawriter_bin+0xc6>
 801065a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801065e:	f04f 0c13 	mov.w	ip, #19
 8010662:	250b      	movs	r5, #11
 8010664:	2221      	movs	r2, #33	@ 0x21
 8010666:	2111      	movs	r1, #17
 8010668:	2009      	movs	r0, #9
 801066a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801066e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010672:	b923      	cbnz	r3, 801067e <uxr_buffer_create_datawriter_bin+0x86>
 8010674:	4672      	mov	r2, lr
 8010676:	4661      	mov	r1, ip
 8010678:	4628      	mov	r0, r5
 801067a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801067e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010682:	2b01      	cmp	r3, #1
 8010684:	d025      	beq.n	80106d2 <uxr_buffer_create_datawriter_bin+0xda>
 8010686:	2b03      	cmp	r3, #3
 8010688:	d029      	beq.n	80106de <uxr_buffer_create_datawriter_bin+0xe6>
 801068a:	b32b      	cbz	r3, 80106d8 <uxr_buffer_create_datawriter_bin+0xe0>
 801068c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010690:	a921      	add	r1, sp, #132	@ 0x84
 8010692:	a806      	add	r0, sp, #24
 8010694:	f7ff fe58 	bl	8010348 <ucdr_init_buffer>
 8010698:	a90e      	add	r1, sp, #56	@ 0x38
 801069a:	a806      	add	r0, sp, #24
 801069c:	f001 ffbc 	bl	8012618 <uxr_serialize_OBJK_DataWriter_Binary>
 80106a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106a2:	f8cd 8000 	str.w	r8, [sp]
 80106a6:	4630      	mov	r0, r6
 80106a8:	9401      	str	r4, [sp, #4]
 80106aa:	60e3      	str	r3, [r4, #12]
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106b2:	f7ff fedd 	bl	8010470 <uxr_common_create_entity>
 80106b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80106ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80106c2:	f04f 0c12 	mov.w	ip, #18
 80106c6:	250a      	movs	r5, #10
 80106c8:	2220      	movs	r2, #32
 80106ca:	2110      	movs	r1, #16
 80106cc:	2008      	movs	r0, #8
 80106ce:	2702      	movs	r7, #2
 80106d0:	e7cd      	b.n	801066e <uxr_buffer_create_datawriter_bin+0x76>
 80106d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80106d6:	e7d9      	b.n	801068c <uxr_buffer_create_datawriter_bin+0x94>
 80106d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80106dc:	e7d6      	b.n	801068c <uxr_buffer_create_datawriter_bin+0x94>
 80106de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80106e2:	e7d3      	b.n	801068c <uxr_buffer_create_datawriter_bin+0x94>

080106e4 <uxr_object_id>:
 80106e4:	b082      	sub	sp, #8
 80106e6:	2300      	movs	r3, #0
 80106e8:	f88d 1006 	strb.w	r1, [sp, #6]
 80106ec:	f360 030f 	bfi	r3, r0, #0, #16
 80106f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80106f4:	f362 431f 	bfi	r3, r2, #16, #16
 80106f8:	4618      	mov	r0, r3
 80106fa:	b002      	add	sp, #8
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop

08010700 <uxr_object_id_from_raw>:
 8010700:	7843      	ldrb	r3, [r0, #1]
 8010702:	b082      	sub	sp, #8
 8010704:	7801      	ldrb	r1, [r0, #0]
 8010706:	2000      	movs	r0, #0
 8010708:	091a      	lsrs	r2, r3, #4
 801070a:	f003 030f 	and.w	r3, r3, #15
 801070e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010712:	f88d 3006 	strb.w	r3, [sp, #6]
 8010716:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801071a:	f362 000f 	bfi	r0, r2, #0, #16
 801071e:	f363 401f 	bfi	r0, r3, #16, #16
 8010722:	b002      	add	sp, #8
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop

08010728 <uxr_object_id_to_raw>:
 8010728:	4602      	mov	r2, r0
 801072a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801072e:	b082      	sub	sp, #8
 8010730:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010734:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010738:	f881 c000 	strb.w	ip, [r1]
 801073c:	7048      	strb	r0, [r1, #1]
 801073e:	b002      	add	sp, #8
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop

08010744 <on_get_fragmentation_info>:
 8010744:	b500      	push	{lr}
 8010746:	b08b      	sub	sp, #44	@ 0x2c
 8010748:	4601      	mov	r1, r0
 801074a:	2204      	movs	r2, #4
 801074c:	a802      	add	r0, sp, #8
 801074e:	f7ff fdfb 	bl	8010348 <ucdr_init_buffer>
 8010752:	f10d 0305 	add.w	r3, sp, #5
 8010756:	f10d 0206 	add.w	r2, sp, #6
 801075a:	a901      	add	r1, sp, #4
 801075c:	a802      	add	r0, sp, #8
 801075e:	f001 f9fb 	bl	8011b58 <uxr_read_submessage_header>
 8010762:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010766:	2b0d      	cmp	r3, #13
 8010768:	d003      	beq.n	8010772 <on_get_fragmentation_info+0x2e>
 801076a:	2000      	movs	r0, #0
 801076c:	b00b      	add	sp, #44	@ 0x2c
 801076e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010772:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010776:	f013 0f02 	tst.w	r3, #2
 801077a:	bf14      	ite	ne
 801077c:	2002      	movne	r0, #2
 801077e:	2001      	moveq	r0, #1
 8010780:	b00b      	add	sp, #44	@ 0x2c
 8010782:	f85d fb04 	ldr.w	pc, [sp], #4
 8010786:	bf00      	nop

08010788 <read_submessage_get_info>:
 8010788:	b570      	push	{r4, r5, r6, lr}
 801078a:	2500      	movs	r5, #0
 801078c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010790:	460e      	mov	r6, r1
 8010792:	4604      	mov	r4, r0
 8010794:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010798:	4629      	mov	r1, r5
 801079a:	a810      	add	r0, sp, #64	@ 0x40
 801079c:	9503      	str	r5, [sp, #12]
 801079e:	9504      	str	r5, [sp, #16]
 80107a0:	f007 f99a 	bl	8017ad8 <memset>
 80107a4:	a903      	add	r1, sp, #12
 80107a6:	4630      	mov	r0, r6
 80107a8:	f002 f9a4 	bl	8012af4 <uxr_deserialize_GET_INFO_Payload>
 80107ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80107b6:	f001 f83d 	bl	8011834 <uxr_session_header_offset>
 80107ba:	462b      	mov	r3, r5
 80107bc:	220c      	movs	r2, #12
 80107be:	a905      	add	r1, sp, #20
 80107c0:	9000      	str	r0, [sp, #0]
 80107c2:	a808      	add	r0, sp, #32
 80107c4:	f7ff fdae 	bl	8010324 <ucdr_init_buffer_origin_offset>
 80107c8:	a910      	add	r1, sp, #64	@ 0x40
 80107ca:	a808      	add	r0, sp, #32
 80107cc:	f002 fa06 	bl	8012bdc <uxr_serialize_INFO_Payload>
 80107d0:	9b08      	ldr	r3, [sp, #32]
 80107d2:	462a      	mov	r2, r5
 80107d4:	4629      	mov	r1, r5
 80107d6:	4620      	mov	r0, r4
 80107d8:	f000 ffd8 	bl	801178c <uxr_stamp_session_header>
 80107dc:	a808      	add	r0, sp, #32
 80107de:	f7ff fde1 	bl	80103a4 <ucdr_buffer_length>
 80107e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80107e4:	4602      	mov	r2, r0
 80107e6:	a905      	add	r1, sp, #20
 80107e8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80107ec:	47a0      	blx	r4
 80107ee:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80107f2:	bd70      	pop	{r4, r5, r6, pc}

080107f4 <write_submessage_acknack.isra.0>:
 80107f4:	b570      	push	{r4, r5, r6, lr}
 80107f6:	b092      	sub	sp, #72	@ 0x48
 80107f8:	4605      	mov	r5, r0
 80107fa:	460e      	mov	r6, r1
 80107fc:	4614      	mov	r4, r2
 80107fe:	f001 f819 	bl	8011834 <uxr_session_header_offset>
 8010802:	a905      	add	r1, sp, #20
 8010804:	9000      	str	r0, [sp, #0]
 8010806:	2300      	movs	r3, #0
 8010808:	a80a      	add	r0, sp, #40	@ 0x28
 801080a:	2211      	movs	r2, #17
 801080c:	f7ff fd8a 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8010810:	2218      	movs	r2, #24
 8010812:	2300      	movs	r3, #0
 8010814:	210a      	movs	r1, #10
 8010816:	fb02 5404 	mla	r4, r2, r4, r5
 801081a:	a80a      	add	r0, sp, #40	@ 0x28
 801081c:	2205      	movs	r2, #5
 801081e:	3450      	adds	r4, #80	@ 0x50
 8010820:	f001 f980 	bl	8011b24 <uxr_buffer_submessage_header>
 8010824:	a903      	add	r1, sp, #12
 8010826:	4620      	mov	r0, r4
 8010828:	f005 f808 	bl	801583c <uxr_compute_acknack>
 801082c:	ba40      	rev16	r0, r0
 801082e:	a903      	add	r1, sp, #12
 8010830:	f88d 6010 	strb.w	r6, [sp, #16]
 8010834:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010838:	a80a      	add	r0, sp, #40	@ 0x28
 801083a:	f002 fa41 	bl	8012cc0 <uxr_serialize_ACKNACK_Payload>
 801083e:	2200      	movs	r2, #0
 8010840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010842:	4628      	mov	r0, r5
 8010844:	4611      	mov	r1, r2
 8010846:	f000 ffa1 	bl	801178c <uxr_stamp_session_header>
 801084a:	a80a      	add	r0, sp, #40	@ 0x28
 801084c:	f7ff fdaa 	bl	80103a4 <ucdr_buffer_length>
 8010850:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010852:	4602      	mov	r2, r0
 8010854:	a905      	add	r1, sp, #20
 8010856:	e9d3 0400 	ldrd	r0, r4, [r3]
 801085a:	47a0      	blx	r4
 801085c:	b012      	add	sp, #72	@ 0x48
 801085e:	bd70      	pop	{r4, r5, r6, pc}

08010860 <uxr_init_session>:
 8010860:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010898 <uxr_init_session+0x38>
 8010864:	2300      	movs	r3, #0
 8010866:	b510      	push	{r4, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801086e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010872:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010876:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801087a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801087e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010882:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010886:	2181      	movs	r1, #129	@ 0x81
 8010888:	f000 fee4 	bl	8011654 <uxr_init_session_info>
 801088c:	f104 0008 	add.w	r0, r4, #8
 8010890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010894:	f001 b862 	b.w	801195c <uxr_init_stream_storage>
	...

080108a0 <uxr_set_status_callback>:
 80108a0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop

080108a8 <uxr_set_topic_callback>:
 80108a8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop

080108b0 <uxr_set_request_callback>:
 80108b0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop

080108b8 <uxr_set_reply_callback>:
 80108b8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop

080108c0 <uxr_create_output_best_effort_stream>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	4604      	mov	r4, r0
 80108c4:	b084      	sub	sp, #16
 80108c6:	e9cd 2100 	strd	r2, r1, [sp]
 80108ca:	f000 ffb3 	bl	8011834 <uxr_session_header_offset>
 80108ce:	4603      	mov	r3, r0
 80108d0:	f104 0008 	add.w	r0, r4, #8
 80108d4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80108d8:	b004      	add	sp, #16
 80108da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108de:	f001 b883 	b.w	80119e8 <uxr_add_output_best_effort_buffer>
 80108e2:	bf00      	nop

080108e4 <uxr_create_output_reliable_stream>:
 80108e4:	b530      	push	{r4, r5, lr}
 80108e6:	b089      	sub	sp, #36	@ 0x24
 80108e8:	4604      	mov	r4, r0
 80108ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80108ee:	9303      	str	r3, [sp, #12]
 80108f0:	f000 ffa0 	bl	8011834 <uxr_session_header_offset>
 80108f4:	4605      	mov	r5, r0
 80108f6:	9905      	ldr	r1, [sp, #20]
 80108f8:	f104 0008 	add.w	r0, r4, #8
 80108fc:	9500      	str	r5, [sp, #0]
 80108fe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010902:	f001 f885 	bl	8011a10 <uxr_add_output_reliable_buffer>
 8010906:	2200      	movs	r2, #0
 8010908:	fa5f fc80 	uxtb.w	ip, r0
 801090c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010910:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010914:	0e03      	lsrs	r3, r0, #24
 8010916:	f36c 0207 	bfi	r2, ip, #0, #8
 801091a:	f364 220f 	bfi	r2, r4, #8, #8
 801091e:	f361 4217 	bfi	r2, r1, #16, #8
 8010922:	f363 621f 	bfi	r2, r3, #24, #8
 8010926:	4610      	mov	r0, r2
 8010928:	b009      	add	sp, #36	@ 0x24
 801092a:	bd30      	pop	{r4, r5, pc}

0801092c <uxr_create_input_best_effort_stream>:
 801092c:	b082      	sub	sp, #8
 801092e:	3008      	adds	r0, #8
 8010930:	b002      	add	sp, #8
 8010932:	f001 b887 	b.w	8011a44 <uxr_add_input_best_effort_buffer>
 8010936:	bf00      	nop

08010938 <uxr_create_input_reliable_stream>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4c0c      	ldr	r4, [pc, #48]	@ (801096c <uxr_create_input_reliable_stream+0x34>)
 801093c:	b084      	sub	sp, #16
 801093e:	3008      	adds	r0, #8
 8010940:	9400      	str	r4, [sp, #0]
 8010942:	f001 f895 	bl	8011a70 <uxr_add_input_reliable_buffer>
 8010946:	2200      	movs	r2, #0
 8010948:	fa5f fe80 	uxtb.w	lr, r0
 801094c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010950:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010954:	0e03      	lsrs	r3, r0, #24
 8010956:	f36e 0207 	bfi	r2, lr, #0, #8
 801095a:	f36c 220f 	bfi	r2, ip, #8, #8
 801095e:	f361 4217 	bfi	r2, r1, #16, #8
 8010962:	f363 621f 	bfi	r2, r3, #24, #8
 8010966:	4610      	mov	r0, r2
 8010968:	b004      	add	sp, #16
 801096a:	bd10      	pop	{r4, pc}
 801096c:	08010745 	.word	0x08010745

08010970 <uxr_epoch_nanos>:
 8010970:	b510      	push	{r4, lr}
 8010972:	4604      	mov	r4, r0
 8010974:	f001 f938 	bl	8011be8 <uxr_nanos>
 8010978:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801097c:	1ac0      	subs	r0, r0, r3
 801097e:	eb61 0102 	sbc.w	r1, r1, r2
 8010982:	bd10      	pop	{r4, pc}

08010984 <uxr_flash_output_streams>:
 8010984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010988:	7e03      	ldrb	r3, [r0, #24]
 801098a:	b084      	sub	sp, #16
 801098c:	4604      	mov	r4, r0
 801098e:	b1fb      	cbz	r3, 80109d0 <uxr_flash_output_streams+0x4c>
 8010990:	f04f 0900 	mov.w	r9, #0
 8010994:	f10d 0802 	add.w	r8, sp, #2
 8010998:	af03      	add	r7, sp, #12
 801099a:	ae02      	add	r6, sp, #8
 801099c:	4648      	mov	r0, r9
 801099e:	2201      	movs	r2, #1
 80109a0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80109a4:	4611      	mov	r1, r2
 80109a6:	3508      	adds	r5, #8
 80109a8:	f000 ff7e 	bl	80118a8 <uxr_stream_id>
 80109ac:	4684      	mov	ip, r0
 80109ae:	4643      	mov	r3, r8
 80109b0:	463a      	mov	r2, r7
 80109b2:	4631      	mov	r1, r6
 80109b4:	4628      	mov	r0, r5
 80109b6:	f8cd c004 	str.w	ip, [sp, #4]
 80109ba:	f004 ffc9 	bl	8015950 <uxr_prepare_best_effort_buffer_to_send>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d13d      	bne.n	8010a3e <uxr_flash_output_streams+0xba>
 80109c2:	f109 0901 	add.w	r9, r9, #1
 80109c6:	7e23      	ldrb	r3, [r4, #24]
 80109c8:	fa5f f089 	uxtb.w	r0, r9
 80109cc:	4283      	cmp	r3, r0
 80109ce:	d8e6      	bhi.n	801099e <uxr_flash_output_streams+0x1a>
 80109d0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80109d4:	b383      	cbz	r3, 8010a38 <uxr_flash_output_streams+0xb4>
 80109d6:	f04f 0900 	mov.w	r9, #0
 80109da:	f10d 0802 	add.w	r8, sp, #2
 80109de:	af03      	add	r7, sp, #12
 80109e0:	ae02      	add	r6, sp, #8
 80109e2:	4648      	mov	r0, r9
 80109e4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80109e8:	2201      	movs	r2, #1
 80109ea:	2102      	movs	r1, #2
 80109ec:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80109f0:	f000 ff5a 	bl	80118a8 <uxr_stream_id>
 80109f4:	9001      	str	r0, [sp, #4]
 80109f6:	3520      	adds	r5, #32
 80109f8:	e00c      	b.n	8010a14 <uxr_flash_output_streams+0x90>
 80109fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80109fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010a02:	9b02      	ldr	r3, [sp, #8]
 8010a04:	f000 fec2 	bl	801178c <uxr_stamp_session_header>
 8010a08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a0a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010a0e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010a12:	47d0      	blx	sl
 8010a14:	4643      	mov	r3, r8
 8010a16:	463a      	mov	r2, r7
 8010a18:	4631      	mov	r1, r6
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f005 f9bc 	bl	8015d98 <uxr_prepare_next_reliable_buffer_to_send>
 8010a20:	4603      	mov	r3, r0
 8010a22:	4620      	mov	r0, r4
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1e8      	bne.n	80109fa <uxr_flash_output_streams+0x76>
 8010a28:	f109 0901 	add.w	r9, r9, #1
 8010a2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010a30:	fa5f f089 	uxtb.w	r0, r9
 8010a34:	4283      	cmp	r3, r0
 8010a36:	d8d5      	bhi.n	80109e4 <uxr_flash_output_streams+0x60>
 8010a38:	b004      	add	sp, #16
 8010a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a3e:	9b02      	ldr	r3, [sp, #8]
 8010a40:	4620      	mov	r0, r4
 8010a42:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010a46:	f109 0901 	add.w	r9, r9, #1
 8010a4a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010a4e:	f000 fe9d 	bl	801178c <uxr_stamp_session_header>
 8010a52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a54:	9a03      	ldr	r2, [sp, #12]
 8010a56:	685d      	ldr	r5, [r3, #4]
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	9902      	ldr	r1, [sp, #8]
 8010a5c:	47a8      	blx	r5
 8010a5e:	7e23      	ldrb	r3, [r4, #24]
 8010a60:	fa5f f089 	uxtb.w	r0, r9
 8010a64:	4283      	cmp	r3, r0
 8010a66:	d89a      	bhi.n	801099e <uxr_flash_output_streams+0x1a>
 8010a68:	e7b2      	b.n	80109d0 <uxr_flash_output_streams+0x4c>
 8010a6a:	bf00      	nop

08010a6c <read_submessage_info>:
 8010a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a70:	460d      	mov	r5, r1
 8010a72:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010a76:	4606      	mov	r6, r0
 8010a78:	4669      	mov	r1, sp
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f001 ff4c 	bl	8012918 <uxr_deserialize_BaseObjectReply>
 8010a80:	4604      	mov	r4, r0
 8010a82:	a902      	add	r1, sp, #8
 8010a84:	4628      	mov	r0, r5
 8010a86:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8010a8a:	f7fe fc99 	bl	800f3c0 <ucdr_deserialize_bool>
 8010a8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010a92:	4004      	ands	r4, r0
 8010a94:	b2e4      	uxtb	r4, r4
 8010a96:	b95b      	cbnz	r3, 8010ab0 <read_submessage_info+0x44>
 8010a98:	a987      	add	r1, sp, #540	@ 0x21c
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f7fe fc90 	bl	800f3c0 <ucdr_deserialize_bool>
 8010aa0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	b94b      	cbnz	r3, 8010abc <read_submessage_info+0x50>
 8010aa8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab0:	a903      	add	r1, sp, #12
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f001 fddc 	bl	8012670 <uxr_deserialize_ObjectVariant>
 8010ab8:	4004      	ands	r4, r0
 8010aba:	e7ed      	b.n	8010a98 <read_submessage_info+0x2c>
 8010abc:	a988      	add	r1, sp, #544	@ 0x220
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f7fe fcac 	bl	800f41c <ucdr_deserialize_uint8_t>
 8010ac4:	ea14 0f08 	tst.w	r4, r8
 8010ac8:	d0ee      	beq.n	8010aa8 <read_submessage_info+0x3c>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d0ec      	beq.n	8010aa8 <read_submessage_info+0x3c>
 8010ace:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010ad2:	2b0d      	cmp	r3, #13
 8010ad4:	d1e8      	bne.n	8010aa8 <read_submessage_info+0x3c>
 8010ad6:	a98a      	add	r1, sp, #552	@ 0x228
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f7ff fa45 	bl	800ff68 <ucdr_deserialize_int16_t>
 8010ade:	b138      	cbz	r0, 8010af0 <read_submessage_info+0x84>
 8010ae0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	dd06      	ble.n	8010af6 <read_submessage_info+0x8a>
 8010ae8:	2f00      	cmp	r7, #0
 8010aea:	bf14      	ite	ne
 8010aec:	2001      	movne	r0, #1
 8010aee:	2002      	moveq	r0, #2
 8010af0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010af4:	e7d8      	b.n	8010aa8 <read_submessage_info+0x3c>
 8010af6:	2000      	movs	r0, #0
 8010af8:	e7fa      	b.n	8010af0 <read_submessage_info+0x84>
 8010afa:	bf00      	nop

08010afc <read_submessage_list>:
 8010afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b00:	4604      	mov	r4, r0
 8010b02:	b097      	sub	sp, #92	@ 0x5c
 8010b04:	460d      	mov	r5, r1
 8010b06:	4ec1      	ldr	r6, [pc, #772]	@ (8010e0c <read_submessage_list+0x310>)
 8010b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b0a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010b0e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010b10:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010b14:	4628      	mov	r0, r5
 8010b16:	f001 f81f 	bl	8011b58 <uxr_read_submessage_header>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	f000 8142 	beq.w	8010da4 <read_submessage_list+0x2a8>
 8010b20:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010b24:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010b28:	3b02      	subs	r3, #2
 8010b2a:	2b0d      	cmp	r3, #13
 8010b2c:	d8ed      	bhi.n	8010b0a <read_submessage_list+0xe>
 8010b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8010b34 <read_submessage_list+0x38>)
 8010b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b34:	08010d9b 	.word	0x08010d9b
 8010b38:	08010b0b 	.word	0x08010b0b
 8010b3c:	08010d8b 	.word	0x08010d8b
 8010b40:	08010d29 	.word	0x08010d29
 8010b44:	08010d1f 	.word	0x08010d1f
 8010b48:	08010b0b 	.word	0x08010b0b
 8010b4c:	08010b0b 	.word	0x08010b0b
 8010b50:	08010c75 	.word	0x08010c75
 8010b54:	08010c07 	.word	0x08010c07
 8010b58:	08010bc7 	.word	0x08010bc7
 8010b5c:	08010b0b 	.word	0x08010b0b
 8010b60:	08010b0b 	.word	0x08010b0b
 8010b64:	08010b0b 	.word	0x08010b0b
 8010b68:	08010b6d 	.word	0x08010b6d
 8010b6c:	a910      	add	r1, sp, #64	@ 0x40
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f002 f908 	bl	8012d84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010b74:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8010b78:	f1b8 0f00 	cmp.w	r8, #0
 8010b7c:	f000 811a 	beq.w	8010db4 <read_submessage_list+0x2b8>
 8010b80:	f001 f832 	bl	8011be8 <uxr_nanos>
 8010b84:	4602      	mov	r2, r0
 8010b86:	460b      	mov	r3, r1
 8010b88:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010b90:	9006      	str	r0, [sp, #24]
 8010b92:	468c      	mov	ip, r1
 8010b94:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010b96:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010b9a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010b9c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010ba0:	468c      	mov	ip, r1
 8010ba2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010ba4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010ba8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8010bac:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8010bb0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8010bb4:	e9cd 0100 	strd	r0, r1, [sp]
 8010bb8:	4620      	mov	r0, r4
 8010bba:	47c0      	blx	r8
 8010bbc:	f04f 0301 	mov.w	r3, #1
 8010bc0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010bc4:	e7a1      	b.n	8010b0a <read_submessage_list+0xe>
 8010bc6:	a910      	add	r1, sp, #64	@ 0x40
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f002 f8b9 	bl	8012d40 <uxr_deserialize_HEARTBEAT_Payload>
 8010bce:	2100      	movs	r1, #0
 8010bd0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010bd4:	f000 fe96 	bl	8011904 <uxr_stream_id_from_raw>
 8010bd8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8010bdc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010bde:	f104 0008 	add.w	r0, r4, #8
 8010be2:	4641      	mov	r1, r8
 8010be4:	f000 ff7c 	bl	8011ae0 <uxr_get_input_reliable_stream>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d08e      	beq.n	8010b0a <read_submessage_list+0xe>
 8010bec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010bf0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010bf4:	f004 fe16 	bl	8015824 <uxr_process_heartbeat>
 8010bf8:	4642      	mov	r2, r8
 8010bfa:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f7ff fdf8 	bl	80107f4 <write_submessage_acknack.isra.0>
 8010c04:	e781      	b.n	8010b0a <read_submessage_list+0xe>
 8010c06:	a910      	add	r1, sp, #64	@ 0x40
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f002 f871 	bl	8012cf0 <uxr_deserialize_ACKNACK_Payload>
 8010c0e:	2100      	movs	r1, #0
 8010c10:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010c14:	f000 fe76 	bl	8011904 <uxr_stream_id_from_raw>
 8010c18:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010c1c:	900d      	str	r0, [sp, #52]	@ 0x34
 8010c1e:	f104 0008 	add.w	r0, r4, #8
 8010c22:	f000 ff47 	bl	8011ab4 <uxr_get_output_reliable_stream>
 8010c26:	4680      	mov	r8, r0
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	f43f af6e 	beq.w	8010b0a <read_submessage_list+0xe>
 8010c2e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010c32:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010c36:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010c3a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010c3e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010c42:	b289      	uxth	r1, r1
 8010c44:	f005 f950 	bl	8015ee8 <uxr_process_acknack>
 8010c48:	4640      	mov	r0, r8
 8010c4a:	f005 f911 	bl	8015e70 <uxr_begin_output_nack_buffer_it>
 8010c4e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010c52:	e005      	b.n	8010c60 <read_submessage_list+0x164>
 8010c54:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010c56:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8010c5a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8010c5e:	47c8      	blx	r9
 8010c60:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010c64:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010c66:	4651      	mov	r1, sl
 8010c68:	4640      	mov	r0, r8
 8010c6a:	f005 f903 	bl	8015e74 <uxr_next_reliable_nack_buffer_to_send>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d1f0      	bne.n	8010c54 <read_submessage_list+0x158>
 8010c72:	e74a      	b.n	8010b0a <read_submessage_list+0xe>
 8010c74:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010c78:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010c7c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8010c80:	4628      	mov	r0, r5
 8010c82:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010c86:	4651      	mov	r1, sl
 8010c88:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010c8c:	f1a8 0804 	sub.w	r8, r8, #4
 8010c90:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010c94:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010c98:	fa1f f888 	uxth.w	r8, r8
 8010c9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010ca0:	f009 090e 	and.w	r9, r9, #14
 8010ca4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010ca8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010cac:	f001 fd82 	bl	80127b4 <uxr_deserialize_BaseObjectRequest>
 8010cb0:	4650      	mov	r0, sl
 8010cb2:	a90f      	add	r1, sp, #60	@ 0x3c
 8010cb4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010cb8:	f000 fde4 	bl	8011884 <uxr_parse_base_object_request>
 8010cbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010cbe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010cc2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010cc6:	9110      	str	r1, [sp, #64]	@ 0x40
 8010cc8:	f1bb 0f00 	cmp.w	fp, #0
 8010ccc:	d006      	beq.n	8010cdc <read_submessage_list+0x1e0>
 8010cce:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010cd2:	4652      	mov	r2, sl
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	2300      	movs	r3, #0
 8010cda:	47d8      	blx	fp
 8010cdc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010cde:	b182      	cbz	r2, 8010d02 <read_submessage_list+0x206>
 8010ce0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010ce2:	f04f 0c00 	mov.w	ip, #0
 8010ce6:	3902      	subs	r1, #2
 8010ce8:	e003      	b.n	8010cf2 <read_submessage_list+0x1f6>
 8010cea:	f10c 0c01 	add.w	ip, ip, #1
 8010cee:	4594      	cmp	ip, r2
 8010cf0:	d007      	beq.n	8010d02 <read_submessage_list+0x206>
 8010cf2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8010cf6:	4553      	cmp	r3, sl
 8010cf8:	d1f7      	bne.n	8010cea <read_submessage_list+0x1ee>
 8010cfa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f803 200c 	strb.w	r2, [r3, ip]
 8010d02:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010d06:	464b      	mov	r3, r9
 8010d08:	4642      	mov	r2, r8
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	9102      	str	r1, [sp, #8]
 8010d0e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d10:	9101      	str	r1, [sp, #4]
 8010d12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010d14:	9100      	str	r1, [sp, #0]
 8010d16:	4629      	mov	r1, r5
 8010d18:	f005 f96e 	bl	8015ff8 <read_submessage_format>
 8010d1c:	e6f5      	b.n	8010b0a <read_submessage_list+0xe>
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7ff fea3 	bl	8010a6c <read_submessage_info>
 8010d26:	e6f0      	b.n	8010b0a <read_submessage_list+0xe>
 8010d28:	2a00      	cmp	r2, #0
 8010d2a:	d03e      	beq.n	8010daa <read_submessage_list+0x2ae>
 8010d2c:	a910      	add	r1, sp, #64	@ 0x40
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f001 ff36 	bl	8012ba0 <uxr_deserialize_STATUS_Payload>
 8010d34:	a90e      	add	r1, sp, #56	@ 0x38
 8010d36:	aa0d      	add	r2, sp, #52	@ 0x34
 8010d38:	a810      	add	r0, sp, #64	@ 0x40
 8010d3a:	f000 fda3 	bl	8011884 <uxr_parse_base_object_request>
 8010d3e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010d40:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010d44:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010d48:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8010d4c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010d4e:	f1ba 0f00 	cmp.w	sl, #0
 8010d52:	d006      	beq.n	8010d62 <read_submessage_list+0x266>
 8010d54:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010d58:	4642      	mov	r2, r8
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	464b      	mov	r3, r9
 8010d60:	47d0      	blx	sl
 8010d62:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010d64:	2a00      	cmp	r2, #0
 8010d66:	f43f aed0 	beq.w	8010b0a <read_submessage_list+0xe>
 8010d6a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	3802      	subs	r0, #2
 8010d70:	e003      	b.n	8010d7a <read_submessage_list+0x27e>
 8010d72:	3101      	adds	r1, #1
 8010d74:	4291      	cmp	r1, r2
 8010d76:	f43f aec8 	beq.w	8010b0a <read_submessage_list+0xe>
 8010d7a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010d7e:	4543      	cmp	r3, r8
 8010d80:	d1f7      	bne.n	8010d72 <read_submessage_list+0x276>
 8010d82:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010d84:	f803 9001 	strb.w	r9, [r3, r1]
 8010d88:	e6bf      	b.n	8010b0a <read_submessage_list+0xe>
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	f47f aebd 	bne.w	8010b0a <read_submessage_list+0xe>
 8010d90:	4629      	mov	r1, r5
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 fcba 	bl	801170c <uxr_read_create_session_status>
 8010d98:	e6b7      	b.n	8010b0a <read_submessage_list+0xe>
 8010d9a:	4629      	mov	r1, r5
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f7ff fcf3 	bl	8010788 <read_submessage_get_info>
 8010da2:	e6b2      	b.n	8010b0a <read_submessage_list+0xe>
 8010da4:	b017      	add	sp, #92	@ 0x5c
 8010da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010daa:	4629      	mov	r1, r5
 8010dac:	4620      	mov	r0, r4
 8010dae:	f000 fcbb 	bl	8011728 <uxr_read_delete_session_status>
 8010db2:	e6aa      	b.n	8010b0a <read_submessage_list+0xe>
 8010db4:	f000 ff18 	bl	8011be8 <uxr_nanos>
 8010db8:	4642      	mov	r2, r8
 8010dba:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010dbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010dbe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010dc2:	1818      	adds	r0, r3, r0
 8010dc4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010dc6:	eb42 0101 	adc.w	r1, r2, r1
 8010dca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010dcc:	4642      	mov	r2, r8
 8010dce:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010dd2:	469c      	mov	ip, r3
 8010dd4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8010dd8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8010ddc:	4643      	mov	r3, r8
 8010dde:	eb1c 0c07 	adds.w	ip, ip, r7
 8010de2:	eb42 0203 	adc.w	r2, r2, r3
 8010de6:	ebb0 030c 	subs.w	r3, r0, ip
 8010dea:	eb61 0202 	sbc.w	r2, r1, r2
 8010dee:	2a00      	cmp	r2, #0
 8010df0:	db08      	blt.n	8010e04 <read_submessage_list+0x308>
 8010df2:	085b      	lsrs	r3, r3, #1
 8010df4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010df8:	1052      	asrs	r2, r2, #1
 8010dfa:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8010dfe:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8010e02:	e6db      	b.n	8010bbc <read_submessage_list+0xc0>
 8010e04:	3301      	adds	r3, #1
 8010e06:	f142 0200 	adc.w	r2, r2, #0
 8010e0a:	e7f2      	b.n	8010df2 <read_submessage_list+0x2f6>
 8010e0c:	3b9aca00 	.word	0x3b9aca00

08010e10 <listen_message_reliably>:
 8010e10:	1e0b      	subs	r3, r1, #0
 8010e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e16:	bfb8      	it	lt
 8010e18:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010e1c:	b09d      	sub	sp, #116	@ 0x74
 8010e1e:	4680      	mov	r8, r0
 8010e20:	9305      	str	r3, [sp, #20]
 8010e22:	f000 fec5 	bl	8011bb0 <uxr_millis>
 8010e26:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010e2a:	4681      	mov	r9, r0
 8010e2c:	2a00      	cmp	r2, #0
 8010e2e:	f000 809a 	beq.w	8010f66 <listen_message_reliably+0x156>
 8010e32:	2600      	movs	r6, #0
 8010e34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010e38:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010e3c:	460f      	mov	r7, r1
 8010e3e:	4630      	mov	r0, r6
 8010e40:	9303      	str	r3, [sp, #12]
 8010e42:	e00e      	b.n	8010e62 <listen_message_reliably+0x52>
 8010e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e46:	3601      	adds	r6, #1
 8010e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e4a:	455a      	cmp	r2, fp
 8010e4c:	9903      	ldr	r1, [sp, #12]
 8010e4e:	b2f0      	uxtb	r0, r6
 8010e50:	eb73 0101 	sbcs.w	r1, r3, r1
 8010e54:	da01      	bge.n	8010e5a <listen_message_reliably+0x4a>
 8010e56:	4693      	mov	fp, r2
 8010e58:	9303      	str	r3, [sp, #12]
 8010e5a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010e5e:	4283      	cmp	r3, r0
 8010e60:	d95f      	bls.n	8010f22 <listen_message_reliably+0x112>
 8010e62:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010e66:	2102      	movs	r1, #2
 8010e68:	2201      	movs	r2, #1
 8010e6a:	00e4      	lsls	r4, r4, #3
 8010e6c:	f000 fd1c 	bl	80118a8 <uxr_stream_id>
 8010e70:	4601      	mov	r1, r0
 8010e72:	f104 0520 	add.w	r5, r4, #32
 8010e76:	463b      	mov	r3, r7
 8010e78:	464a      	mov	r2, r9
 8010e7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e7c:	4445      	add	r5, r8
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f004 ffca 	bl	8015e18 <uxr_update_output_stream_heartbeat_timestamp>
 8010e84:	eb08 0304 	add.w	r3, r8, r4
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d0db      	beq.n	8010e44 <listen_message_reliably+0x34>
 8010e8c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010e90:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010e94:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010e98:	4640      	mov	r0, r8
 8010e9a:	3501      	adds	r5, #1
 8010e9c:	4444      	add	r4, r8
 8010e9e:	9304      	str	r3, [sp, #16]
 8010ea0:	f000 fcc8 	bl	8011834 <uxr_session_header_offset>
 8010ea4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	2211      	movs	r2, #17
 8010eac:	a90c      	add	r1, sp, #48	@ 0x30
 8010eae:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010eb2:	9000      	str	r0, [sp, #0]
 8010eb4:	4650      	mov	r0, sl
 8010eb6:	3601      	adds	r6, #1
 8010eb8:	f7ff fa34 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	2205      	movs	r2, #5
 8010ec0:	210b      	movs	r1, #11
 8010ec2:	4650      	mov	r0, sl
 8010ec4:	f000 fe2e 	bl	8011b24 <uxr_buffer_submessage_header>
 8010ec8:	2101      	movs	r1, #1
 8010eca:	8968      	ldrh	r0, [r5, #10]
 8010ecc:	f005 f95e 	bl	801618c <uxr_seq_num_add>
 8010ed0:	892b      	ldrh	r3, [r5, #8]
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	a90a      	add	r1, sp, #40	@ 0x28
 8010ed6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010eda:	4650      	mov	r0, sl
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010ee2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010ee6:	f001 ff17 	bl	8012d18 <uxr_serialize_HEARTBEAT_Payload>
 8010eea:	2200      	movs	r2, #0
 8010eec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010eee:	4640      	mov	r0, r8
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	f000 fc4b 	bl	801178c <uxr_stamp_session_header>
 8010ef6:	4650      	mov	r0, sl
 8010ef8:	f7ff fa54 	bl	80103a4 <ucdr_buffer_length>
 8010efc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010f00:	4602      	mov	r2, r0
 8010f02:	a90c      	add	r1, sp, #48	@ 0x30
 8010f04:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f08:	47a8      	blx	r5
 8010f0a:	9903      	ldr	r1, [sp, #12]
 8010f0c:	b2f0      	uxtb	r0, r6
 8010f0e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010f12:	455a      	cmp	r2, fp
 8010f14:	eb73 0101 	sbcs.w	r1, r3, r1
 8010f18:	db9d      	blt.n	8010e56 <listen_message_reliably+0x46>
 8010f1a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010f1e:	4283      	cmp	r3, r0
 8010f20:	d89f      	bhi.n	8010e62 <listen_message_reliably+0x52>
 8010f22:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f26:	9a03      	ldr	r2, [sp, #12]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	bf08      	it	eq
 8010f2c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010f30:	d019      	beq.n	8010f66 <listen_message_reliably+0x156>
 8010f32:	ebab 0309 	sub.w	r3, fp, r9
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	9d05      	ldr	r5, [sp, #20]
 8010f3a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8010f3e:	aa08      	add	r2, sp, #32
 8010f40:	bf08      	it	eq
 8010f42:	2301      	moveq	r3, #1
 8010f44:	a907      	add	r1, sp, #28
 8010f46:	6884      	ldr	r4, [r0, #8]
 8010f48:	429d      	cmp	r5, r3
 8010f4a:	6800      	ldr	r0, [r0, #0]
 8010f4c:	bfa8      	it	ge
 8010f4e:	461d      	movge	r5, r3
 8010f50:	462b      	mov	r3, r5
 8010f52:	47a0      	blx	r4
 8010f54:	b948      	cbnz	r0, 8010f6a <listen_message_reliably+0x15a>
 8010f56:	9b05      	ldr	r3, [sp, #20]
 8010f58:	1b5b      	subs	r3, r3, r5
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	9305      	str	r3, [sp, #20]
 8010f5e:	f73f af60 	bgt.w	8010e22 <listen_message_reliably+0x12>
 8010f62:	4604      	mov	r4, r0
 8010f64:	e012      	b.n	8010f8c <listen_message_reliably+0x17c>
 8010f66:	9b05      	ldr	r3, [sp, #20]
 8010f68:	e7e5      	b.n	8010f36 <listen_message_reliably+0x126>
 8010f6a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010f6e:	4604      	mov	r4, r0
 8010f70:	2500      	movs	r5, #0
 8010f72:	a80c      	add	r0, sp, #48	@ 0x30
 8010f74:	f7ff f9e8 	bl	8010348 <ucdr_init_buffer>
 8010f78:	f10d 031a 	add.w	r3, sp, #26
 8010f7c:	aa06      	add	r2, sp, #24
 8010f7e:	a90c      	add	r1, sp, #48	@ 0x30
 8010f80:	4640      	mov	r0, r8
 8010f82:	f88d 5018 	strb.w	r5, [sp, #24]
 8010f86:	f000 fc15 	bl	80117b4 <uxr_read_session_header>
 8010f8a:	b918      	cbnz	r0, 8010f94 <listen_message_reliably+0x184>
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	b01d      	add	sp, #116	@ 0x74
 8010f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f94:	4629      	mov	r1, r5
 8010f96:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010f9a:	f000 fcb3 	bl	8011904 <uxr_stream_id_from_raw>
 8010f9e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010fa2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010fa6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010faa:	2e01      	cmp	r6, #1
 8010fac:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010fb0:	d04b      	beq.n	801104a <listen_message_reliably+0x23a>
 8010fb2:	2e02      	cmp	r6, #2
 8010fb4:	d00f      	beq.n	8010fd6 <listen_message_reliably+0x1c6>
 8010fb6:	2e00      	cmp	r6, #0
 8010fb8:	d1e8      	bne.n	8010f8c <listen_message_reliably+0x17c>
 8010fba:	4631      	mov	r1, r6
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f000 fca1 	bl	8011904 <uxr_stream_id_from_raw>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	a90c      	add	r1, sp, #48	@ 0x30
 8010fc6:	4640      	mov	r0, r8
 8010fc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8010fca:	f7ff fd97 	bl	8010afc <read_submessage_list>
 8010fce:	4620      	mov	r0, r4
 8010fd0:	b01d      	add	sp, #116	@ 0x74
 8010fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	f108 0008 	add.w	r0, r8, #8
 8010fdc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010fe0:	f000 fd7e 	bl	8011ae0 <uxr_get_input_reliable_stream>
 8010fe4:	4607      	mov	r7, r0
 8010fe6:	b338      	cbz	r0, 8011038 <listen_message_reliably+0x228>
 8010fe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010fea:	a80c      	add	r0, sp, #48	@ 0x30
 8010fec:	9203      	str	r2, [sp, #12]
 8010fee:	f7ff f9dd 	bl	80103ac <ucdr_buffer_remaining>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	f10d 0019 	add.w	r0, sp, #25
 8010ff8:	9a03      	ldr	r2, [sp, #12]
 8010ffa:	4651      	mov	r1, sl
 8010ffc:	9000      	str	r0, [sp, #0]
 8010ffe:	4638      	mov	r0, r7
 8011000:	f004 fb14 	bl	801562c <uxr_receive_reliable_message>
 8011004:	b1c0      	cbz	r0, 8011038 <listen_message_reliably+0x228>
 8011006:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801100a:	b393      	cbz	r3, 8011072 <listen_message_reliably+0x262>
 801100c:	ae14      	add	r6, sp, #80	@ 0x50
 801100e:	f04f 0a02 	mov.w	sl, #2
 8011012:	e00a      	b.n	801102a <listen_message_reliably+0x21a>
 8011014:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011018:	4631      	mov	r1, r6
 801101a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801101e:	4640      	mov	r0, r8
 8011020:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011026:	f7ff fd69 	bl	8010afc <read_submessage_list>
 801102a:	2204      	movs	r2, #4
 801102c:	4631      	mov	r1, r6
 801102e:	4638      	mov	r0, r7
 8011030:	f004 fb7e 	bl	8015730 <uxr_next_input_reliable_buffer_available>
 8011034:	2800      	cmp	r0, #0
 8011036:	d1ed      	bne.n	8011014 <listen_message_reliably+0x204>
 8011038:	4640      	mov	r0, r8
 801103a:	462a      	mov	r2, r5
 801103c:	4649      	mov	r1, r9
 801103e:	f7ff fbd9 	bl	80107f4 <write_submessage_acknack.isra.0>
 8011042:	4620      	mov	r0, r4
 8011044:	b01d      	add	sp, #116	@ 0x74
 8011046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104a:	4629      	mov	r1, r5
 801104c:	f108 0008 	add.w	r0, r8, #8
 8011050:	f000 fd3c 	bl	8011acc <uxr_get_input_best_effort_stream>
 8011054:	2800      	cmp	r0, #0
 8011056:	d099      	beq.n	8010f8c <listen_message_reliably+0x17c>
 8011058:	4651      	mov	r1, sl
 801105a:	f004 fa5d 	bl	8015518 <uxr_receive_best_effort_message>
 801105e:	2800      	cmp	r0, #0
 8011060:	d094      	beq.n	8010f8c <listen_message_reliably+0x17c>
 8011062:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011066:	a90c      	add	r1, sp, #48	@ 0x30
 8011068:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801106a:	4640      	mov	r0, r8
 801106c:	f7ff fd46 	bl	8010afc <read_submessage_list>
 8011070:	e78c      	b.n	8010f8c <listen_message_reliably+0x17c>
 8011072:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011076:	a90c      	add	r1, sp, #48	@ 0x30
 8011078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801107a:	4640      	mov	r0, r8
 801107c:	f7ff fd3e 	bl	8010afc <read_submessage_list>
 8011080:	e7c4      	b.n	801100c <listen_message_reliably+0x1fc>
 8011082:	bf00      	nop

08011084 <uxr_run_session_until_confirm_delivery>:
 8011084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011088:	4606      	mov	r6, r0
 801108a:	460d      	mov	r5, r1
 801108c:	f000 fd90 	bl	8011bb0 <uxr_millis>
 8011090:	4607      	mov	r7, r0
 8011092:	4630      	mov	r0, r6
 8011094:	f106 0808 	add.w	r8, r6, #8
 8011098:	f7ff fc74 	bl	8010984 <uxr_flash_output_streams>
 801109c:	2d00      	cmp	r5, #0
 801109e:	db10      	blt.n	80110c2 <uxr_run_session_until_confirm_delivery+0x3e>
 80110a0:	462c      	mov	r4, r5
 80110a2:	e006      	b.n	80110b2 <uxr_run_session_until_confirm_delivery+0x2e>
 80110a4:	f7ff feb4 	bl	8010e10 <listen_message_reliably>
 80110a8:	f000 fd82 	bl	8011bb0 <uxr_millis>
 80110ac:	1bc3      	subs	r3, r0, r7
 80110ae:	1aec      	subs	r4, r5, r3
 80110b0:	d407      	bmi.n	80110c2 <uxr_run_session_until_confirm_delivery+0x3e>
 80110b2:	4640      	mov	r0, r8
 80110b4:	f000 fd20 	bl	8011af8 <uxr_output_streams_confirmed>
 80110b8:	4603      	mov	r3, r0
 80110ba:	4621      	mov	r1, r4
 80110bc:	4630      	mov	r0, r6
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d0f0      	beq.n	80110a4 <uxr_run_session_until_confirm_delivery+0x20>
 80110c2:	4640      	mov	r0, r8
 80110c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	f000 bd16 	b.w	8011af8 <uxr_output_streams_confirmed>

080110cc <uxr_run_session_until_all_status>:
 80110cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80110d4:	4606      	mov	r6, r0
 80110d6:	4688      	mov	r8, r1
 80110d8:	4692      	mov	sl, r2
 80110da:	461f      	mov	r7, r3
 80110dc:	f7ff fc52 	bl	8010984 <uxr_flash_output_streams>
 80110e0:	f1bb 0f00 	cmp.w	fp, #0
 80110e4:	d004      	beq.n	80110f0 <uxr_run_session_until_all_status+0x24>
 80110e6:	465a      	mov	r2, fp
 80110e8:	21ff      	movs	r1, #255	@ 0xff
 80110ea:	4638      	mov	r0, r7
 80110ec:	f006 fcf4 	bl	8017ad8 <memset>
 80110f0:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80110f4:	1e7d      	subs	r5, r7, #1
 80110f6:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80110fa:	f000 fd59 	bl	8011bb0 <uxr_millis>
 80110fe:	4641      	mov	r1, r8
 8011100:	4681      	mov	r9, r0
 8011102:	4630      	mov	r0, r6
 8011104:	f7ff fe84 	bl	8010e10 <listen_message_reliably>
 8011108:	f000 fd52 	bl	8011bb0 <uxr_millis>
 801110c:	eba0 0009 	sub.w	r0, r0, r9
 8011110:	eba8 0100 	sub.w	r1, r8, r0
 8011114:	f1bb 0f00 	cmp.w	fp, #0
 8011118:	d029      	beq.n	801116e <uxr_run_session_until_all_status+0xa2>
 801111a:	46ae      	mov	lr, r5
 801111c:	f04f 0c00 	mov.w	ip, #0
 8011120:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011124:	2cff      	cmp	r4, #255	@ 0xff
 8011126:	d015      	beq.n	8011154 <uxr_run_session_until_all_status+0x88>
 8011128:	f10c 0c01 	add.w	ip, ip, #1
 801112c:	45e3      	cmp	fp, ip
 801112e:	d8f7      	bhi.n	8011120 <uxr_run_session_until_all_status+0x54>
 8011130:	2300      	movs	r3, #0
 8011132:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011134:	e000      	b.n	8011138 <uxr_run_session_until_all_status+0x6c>
 8011136:	b158      	cbz	r0, 8011150 <uxr_run_session_until_all_status+0x84>
 8011138:	462b      	mov	r3, r5
 801113a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801113e:	3302      	adds	r3, #2
 8011140:	2801      	cmp	r0, #1
 8011142:	eba3 0307 	sub.w	r3, r3, r7
 8011146:	bf8c      	ite	hi
 8011148:	2000      	movhi	r0, #0
 801114a:	2001      	movls	r0, #1
 801114c:	459b      	cmp	fp, r3
 801114e:	d8f2      	bhi.n	8011136 <uxr_run_session_until_all_status+0x6a>
 8011150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011154:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011158:	f10c 0c01 	add.w	ip, ip, #1
 801115c:	45dc      	cmp	ip, fp
 801115e:	d201      	bcs.n	8011164 <uxr_run_session_until_all_status+0x98>
 8011160:	2b00      	cmp	r3, #0
 8011162:	d0dd      	beq.n	8011120 <uxr_run_session_until_all_status+0x54>
 8011164:	2900      	cmp	r1, #0
 8011166:	dde3      	ble.n	8011130 <uxr_run_session_until_all_status+0x64>
 8011168:	2b00      	cmp	r3, #0
 801116a:	d1ca      	bne.n	8011102 <uxr_run_session_until_all_status+0x36>
 801116c:	e7e0      	b.n	8011130 <uxr_run_session_until_all_status+0x64>
 801116e:	2001      	movs	r0, #1
 8011170:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8011174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011178 <uxr_sync_session>:
 8011178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801117a:	b093      	sub	sp, #76	@ 0x4c
 801117c:	4604      	mov	r4, r0
 801117e:	460d      	mov	r5, r1
 8011180:	f000 fb58 	bl	8011834 <uxr_session_header_offset>
 8011184:	2214      	movs	r2, #20
 8011186:	2300      	movs	r3, #0
 8011188:	9000      	str	r0, [sp, #0]
 801118a:	a80a      	add	r0, sp, #40	@ 0x28
 801118c:	eb0d 0102 	add.w	r1, sp, r2
 8011190:	f7ff f8c8 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8011194:	2300      	movs	r3, #0
 8011196:	2208      	movs	r2, #8
 8011198:	210e      	movs	r1, #14
 801119a:	a80a      	add	r0, sp, #40	@ 0x28
 801119c:	f000 fcc2 	bl	8011b24 <uxr_buffer_submessage_header>
 80111a0:	f000 fd22 	bl	8011be8 <uxr_nanos>
 80111a4:	460e      	mov	r6, r1
 80111a6:	4607      	mov	r7, r0
 80111a8:	a31b      	add	r3, pc, #108	@ (adr r3, 8011218 <uxr_sync_session+0xa0>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	f7ef f8ff 	bl	80003b0 <__aeabi_ldivmod>
 80111b2:	4631      	mov	r1, r6
 80111b4:	9003      	str	r0, [sp, #12]
 80111b6:	4638      	mov	r0, r7
 80111b8:	a317      	add	r3, pc, #92	@ (adr r3, 8011218 <uxr_sync_session+0xa0>)
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f7ef f8f7 	bl	80003b0 <__aeabi_ldivmod>
 80111c2:	a903      	add	r1, sp, #12
 80111c4:	a80a      	add	r0, sp, #40	@ 0x28
 80111c6:	9204      	str	r2, [sp, #16]
 80111c8:	f001 fdce 	bl	8012d68 <uxr_serialize_TIMESTAMP_Payload>
 80111cc:	2200      	movs	r2, #0
 80111ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111d0:	4620      	mov	r0, r4
 80111d2:	4611      	mov	r1, r2
 80111d4:	f000 fada 	bl	801178c <uxr_stamp_session_header>
 80111d8:	a80a      	add	r0, sp, #40	@ 0x28
 80111da:	f7ff f8e3 	bl	80103a4 <ucdr_buffer_length>
 80111de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80111e0:	4602      	mov	r2, r0
 80111e2:	a905      	add	r1, sp, #20
 80111e4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80111e8:	47b0      	blx	r6
 80111ea:	f000 fce1 	bl	8011bb0 <uxr_millis>
 80111ee:	2300      	movs	r3, #0
 80111f0:	4606      	mov	r6, r0
 80111f2:	4629      	mov	r1, r5
 80111f4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80111f8:	e000      	b.n	80111fc <uxr_sync_session+0x84>
 80111fa:	b950      	cbnz	r0, 8011212 <uxr_sync_session+0x9a>
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7ff fe07 	bl	8010e10 <listen_message_reliably>
 8011202:	f000 fcd5 	bl	8011bb0 <uxr_millis>
 8011206:	1b83      	subs	r3, r0, r6
 8011208:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801120c:	1ae9      	subs	r1, r5, r3
 801120e:	2900      	cmp	r1, #0
 8011210:	dcf3      	bgt.n	80111fa <uxr_sync_session+0x82>
 8011212:	b013      	add	sp, #76	@ 0x4c
 8011214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011216:	bf00      	nop
 8011218:	3b9aca00 	.word	0x3b9aca00
 801121c:	00000000 	.word	0x00000000

08011220 <wait_session_status>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	4604      	mov	r4, r0
 8011226:	b09d      	sub	sp, #116	@ 0x74
 8011228:	20ff      	movs	r0, #255	@ 0xff
 801122a:	9303      	str	r3, [sp, #12]
 801122c:	7160      	strb	r0, [r4, #5]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f000 80b6 	beq.w	80113a0 <wait_session_status+0x180>
 8011234:	4689      	mov	r9, r1
 8011236:	4692      	mov	sl, r2
 8011238:	f04f 0b00 	mov.w	fp, #0
 801123c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801123e:	4652      	mov	r2, sl
 8011240:	4649      	mov	r1, r9
 8011242:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011246:	47a8      	blx	r5
 8011248:	f000 fcb2 	bl	8011bb0 <uxr_millis>
 801124c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011250:	4605      	mov	r5, r0
 8011252:	e009      	b.n	8011268 <wait_session_status+0x48>
 8011254:	f000 fcac 	bl	8011bb0 <uxr_millis>
 8011258:	1b40      	subs	r0, r0, r5
 801125a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801125e:	2b00      	cmp	r3, #0
 8011260:	dd40      	ble.n	80112e4 <wait_session_status+0xc4>
 8011262:	7960      	ldrb	r0, [r4, #5]
 8011264:	28ff      	cmp	r0, #255	@ 0xff
 8011266:	d145      	bne.n	80112f4 <wait_session_status+0xd4>
 8011268:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801126a:	a908      	add	r1, sp, #32
 801126c:	6896      	ldr	r6, [r2, #8]
 801126e:	6810      	ldr	r0, [r2, #0]
 8011270:	aa09      	add	r2, sp, #36	@ 0x24
 8011272:	47b0      	blx	r6
 8011274:	2800      	cmp	r0, #0
 8011276:	d0ed      	beq.n	8011254 <wait_session_status+0x34>
 8011278:	a80c      	add	r0, sp, #48	@ 0x30
 801127a:	2600      	movs	r6, #0
 801127c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011280:	f7ff f862 	bl	8010348 <ucdr_init_buffer>
 8011284:	f10d 031e 	add.w	r3, sp, #30
 8011288:	aa07      	add	r2, sp, #28
 801128a:	a90c      	add	r1, sp, #48	@ 0x30
 801128c:	4620      	mov	r0, r4
 801128e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011292:	f000 fa8f 	bl	80117b4 <uxr_read_session_header>
 8011296:	2800      	cmp	r0, #0
 8011298:	d0dc      	beq.n	8011254 <wait_session_status+0x34>
 801129a:	4631      	mov	r1, r6
 801129c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80112a0:	f000 fb30 	bl	8011904 <uxr_stream_id_from_raw>
 80112a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80112a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80112ac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80112b0:	2f01      	cmp	r7, #1
 80112b2:	9302      	str	r3, [sp, #8]
 80112b4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80112b8:	d05c      	beq.n	8011374 <wait_session_status+0x154>
 80112ba:	2f02      	cmp	r7, #2
 80112bc:	d020      	beq.n	8011300 <wait_session_status+0xe0>
 80112be:	2f00      	cmp	r7, #0
 80112c0:	d1c8      	bne.n	8011254 <wait_session_status+0x34>
 80112c2:	4639      	mov	r1, r7
 80112c4:	4638      	mov	r0, r7
 80112c6:	f000 fb1d 	bl	8011904 <uxr_stream_id_from_raw>
 80112ca:	a90c      	add	r1, sp, #48	@ 0x30
 80112cc:	4602      	mov	r2, r0
 80112ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 80112d0:	4620      	mov	r0, r4
 80112d2:	f7ff fc13 	bl	8010afc <read_submessage_list>
 80112d6:	f000 fc6b 	bl	8011bb0 <uxr_millis>
 80112da:	1b40      	subs	r0, r0, r5
 80112dc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dcbe      	bgt.n	8011262 <wait_session_status+0x42>
 80112e4:	f10b 0b01 	add.w	fp, fp, #1
 80112e8:	9b03      	ldr	r3, [sp, #12]
 80112ea:	7960      	ldrb	r0, [r4, #5]
 80112ec:	455b      	cmp	r3, fp
 80112ee:	d001      	beq.n	80112f4 <wait_session_status+0xd4>
 80112f0:	28ff      	cmp	r0, #255	@ 0xff
 80112f2:	d0a3      	beq.n	801123c <wait_session_status+0x1c>
 80112f4:	38ff      	subs	r0, #255	@ 0xff
 80112f6:	bf18      	it	ne
 80112f8:	2001      	movne	r0, #1
 80112fa:	b01d      	add	sp, #116	@ 0x74
 80112fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011300:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011304:	4631      	mov	r1, r6
 8011306:	f104 0008 	add.w	r0, r4, #8
 801130a:	9304      	str	r3, [sp, #16]
 801130c:	f000 fbe8 	bl	8011ae0 <uxr_get_input_reliable_stream>
 8011310:	4680      	mov	r8, r0
 8011312:	b348      	cbz	r0, 8011368 <wait_session_status+0x148>
 8011314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011316:	a80c      	add	r0, sp, #48	@ 0x30
 8011318:	9205      	str	r2, [sp, #20]
 801131a:	f7ff f847 	bl	80103ac <ucdr_buffer_remaining>
 801131e:	4603      	mov	r3, r0
 8011320:	f10d 001d 	add.w	r0, sp, #29
 8011324:	9a05      	ldr	r2, [sp, #20]
 8011326:	9000      	str	r0, [sp, #0]
 8011328:	4640      	mov	r0, r8
 801132a:	9902      	ldr	r1, [sp, #8]
 801132c:	f004 f97e 	bl	801562c <uxr_receive_reliable_message>
 8011330:	b1d0      	cbz	r0, 8011368 <wait_session_status+0x148>
 8011332:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d03a      	beq.n	80113b0 <wait_session_status+0x190>
 801133a:	9f04      	ldr	r7, [sp, #16]
 801133c:	e00a      	b.n	8011354 <wait_session_status+0x134>
 801133e:	f04f 0302 	mov.w	r3, #2
 8011342:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011346:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801134a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801134e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011350:	f7ff fbd4 	bl	8010afc <read_submessage_list>
 8011354:	a914      	add	r1, sp, #80	@ 0x50
 8011356:	2204      	movs	r2, #4
 8011358:	4640      	mov	r0, r8
 801135a:	f004 f9e9 	bl	8015730 <uxr_next_input_reliable_buffer_available>
 801135e:	4603      	mov	r3, r0
 8011360:	a914      	add	r1, sp, #80	@ 0x50
 8011362:	4620      	mov	r0, r4
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1ea      	bne.n	801133e <wait_session_status+0x11e>
 8011368:	4632      	mov	r2, r6
 801136a:	9904      	ldr	r1, [sp, #16]
 801136c:	4620      	mov	r0, r4
 801136e:	f7ff fa41 	bl	80107f4 <write_submessage_acknack.isra.0>
 8011372:	e76f      	b.n	8011254 <wait_session_status+0x34>
 8011374:	4631      	mov	r1, r6
 8011376:	f104 0008 	add.w	r0, r4, #8
 801137a:	f000 fba7 	bl	8011acc <uxr_get_input_best_effort_stream>
 801137e:	2800      	cmp	r0, #0
 8011380:	f43f af68 	beq.w	8011254 <wait_session_status+0x34>
 8011384:	9902      	ldr	r1, [sp, #8]
 8011386:	f004 f8c7 	bl	8015518 <uxr_receive_best_effort_message>
 801138a:	2800      	cmp	r0, #0
 801138c:	f43f af62 	beq.w	8011254 <wait_session_status+0x34>
 8011390:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011394:	a90c      	add	r1, sp, #48	@ 0x30
 8011396:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011398:	4620      	mov	r0, r4
 801139a:	f7ff fbaf 	bl	8010afc <read_submessage_list>
 801139e:	e759      	b.n	8011254 <wait_session_status+0x34>
 80113a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80113a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80113a6:	47a0      	blx	r4
 80113a8:	2001      	movs	r0, #1
 80113aa:	b01d      	add	sp, #116	@ 0x74
 80113ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80113b4:	a90c      	add	r1, sp, #48	@ 0x30
 80113b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80113b8:	4620      	mov	r0, r4
 80113ba:	f7ff fb9f 	bl	8010afc <read_submessage_list>
 80113be:	e7bc      	b.n	801133a <wait_session_status+0x11a>

080113c0 <uxr_delete_session_retries>:
 80113c0:	b530      	push	{r4, r5, lr}
 80113c2:	b08f      	sub	sp, #60	@ 0x3c
 80113c4:	4604      	mov	r4, r0
 80113c6:	460d      	mov	r5, r1
 80113c8:	f000 fa34 	bl	8011834 <uxr_session_header_offset>
 80113cc:	2300      	movs	r3, #0
 80113ce:	2210      	movs	r2, #16
 80113d0:	a902      	add	r1, sp, #8
 80113d2:	9000      	str	r0, [sp, #0]
 80113d4:	a806      	add	r0, sp, #24
 80113d6:	f7fe ffa5 	bl	8010324 <ucdr_init_buffer_origin_offset>
 80113da:	a906      	add	r1, sp, #24
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 f979 	bl	80116d4 <uxr_buffer_delete_session>
 80113e2:	2200      	movs	r2, #0
 80113e4:	9b06      	ldr	r3, [sp, #24]
 80113e6:	4620      	mov	r0, r4
 80113e8:	4611      	mov	r1, r2
 80113ea:	f000 f9cf 	bl	801178c <uxr_stamp_session_header>
 80113ee:	a806      	add	r0, sp, #24
 80113f0:	f7fe ffd8 	bl	80103a4 <ucdr_buffer_length>
 80113f4:	462b      	mov	r3, r5
 80113f6:	4602      	mov	r2, r0
 80113f8:	a902      	add	r1, sp, #8
 80113fa:	4620      	mov	r0, r4
 80113fc:	f7ff ff10 	bl	8011220 <wait_session_status>
 8011400:	b118      	cbz	r0, 801140a <uxr_delete_session_retries+0x4a>
 8011402:	7960      	ldrb	r0, [r4, #5]
 8011404:	fab0 f080 	clz	r0, r0
 8011408:	0940      	lsrs	r0, r0, #5
 801140a:	b00f      	add	sp, #60	@ 0x3c
 801140c:	bd30      	pop	{r4, r5, pc}
 801140e:	bf00      	nop

08011410 <uxr_create_session>:
 8011410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	f100 0b08 	add.w	fp, r0, #8
 8011418:	4604      	mov	r4, r0
 801141a:	b0ab      	sub	sp, #172	@ 0xac
 801141c:	4658      	mov	r0, fp
 801141e:	465e      	mov	r6, fp
 8011420:	f000 faa6 	bl	8011970 <uxr_reset_stream_storage>
 8011424:	4620      	mov	r0, r4
 8011426:	f000 fa05 	bl	8011834 <uxr_session_header_offset>
 801142a:	2300      	movs	r3, #0
 801142c:	221c      	movs	r2, #28
 801142e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011430:	9000      	str	r0, [sp, #0]
 8011432:	a812      	add	r0, sp, #72	@ 0x48
 8011434:	f7fe ff76 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8011438:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801143a:	a912      	add	r1, sp, #72	@ 0x48
 801143c:	4620      	mov	r0, r4
 801143e:	8a1a      	ldrh	r2, [r3, #16]
 8011440:	3a04      	subs	r2, #4
 8011442:	b292      	uxth	r2, r2
 8011444:	f000 f91c 	bl	8011680 <uxr_buffer_create_session>
 8011448:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801144a:	4620      	mov	r0, r4
 801144c:	f000 f98a 	bl	8011764 <uxr_stamp_create_session_header>
 8011450:	a812      	add	r0, sp, #72	@ 0x48
 8011452:	f7fe ffa7 	bl	80103a4 <ucdr_buffer_length>
 8011456:	23ff      	movs	r3, #255	@ 0xff
 8011458:	4681      	mov	r9, r0
 801145a:	7163      	strb	r3, [r4, #5]
 801145c:	230a      	movs	r3, #10
 801145e:	9303      	str	r3, [sp, #12]
 8011460:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011462:	464a      	mov	r2, r9
 8011464:	a90b      	add	r1, sp, #44	@ 0x2c
 8011466:	e9d3 0500 	ldrd	r0, r5, [r3]
 801146a:	47a8      	blx	r5
 801146c:	f000 fba0 	bl	8011bb0 <uxr_millis>
 8011470:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011474:	4605      	mov	r5, r0
 8011476:	e009      	b.n	801148c <uxr_create_session+0x7c>
 8011478:	f000 fb9a 	bl	8011bb0 <uxr_millis>
 801147c:	1b40      	subs	r0, r0, r5
 801147e:	7962      	ldrb	r2, [r4, #5]
 8011480:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011484:	2b00      	cmp	r3, #0
 8011486:	dd38      	ble.n	80114fa <uxr_create_session+0xea>
 8011488:	2aff      	cmp	r2, #255	@ 0xff
 801148a:	d13c      	bne.n	8011506 <uxr_create_session+0xf6>
 801148c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801148e:	a907      	add	r1, sp, #28
 8011490:	6897      	ldr	r7, [r2, #8]
 8011492:	6810      	ldr	r0, [r2, #0]
 8011494:	aa08      	add	r2, sp, #32
 8011496:	47b8      	blx	r7
 8011498:	2800      	cmp	r0, #0
 801149a:	d0ed      	beq.n	8011478 <uxr_create_session+0x68>
 801149c:	a81a      	add	r0, sp, #104	@ 0x68
 801149e:	2700      	movs	r7, #0
 80114a0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80114a4:	f7fe ff50 	bl	8010348 <ucdr_init_buffer>
 80114a8:	f10d 031a 	add.w	r3, sp, #26
 80114ac:	aa06      	add	r2, sp, #24
 80114ae:	a91a      	add	r1, sp, #104	@ 0x68
 80114b0:	4620      	mov	r0, r4
 80114b2:	f88d 7018 	strb.w	r7, [sp, #24]
 80114b6:	f000 f97d 	bl	80117b4 <uxr_read_session_header>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d0dc      	beq.n	8011478 <uxr_create_session+0x68>
 80114be:	4639      	mov	r1, r7
 80114c0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80114c4:	f000 fa1e 	bl	8011904 <uxr_stream_id_from_raw>
 80114c8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80114cc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80114d0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80114d4:	2f01      	cmp	r7, #1
 80114d6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80114da:	d053      	beq.n	8011584 <uxr_create_session+0x174>
 80114dc:	2f02      	cmp	r7, #2
 80114de:	d018      	beq.n	8011512 <uxr_create_session+0x102>
 80114e0:	2f00      	cmp	r7, #0
 80114e2:	d1c9      	bne.n	8011478 <uxr_create_session+0x68>
 80114e4:	4639      	mov	r1, r7
 80114e6:	4638      	mov	r0, r7
 80114e8:	f000 fa0c 	bl	8011904 <uxr_stream_id_from_raw>
 80114ec:	a91a      	add	r1, sp, #104	@ 0x68
 80114ee:	4602      	mov	r2, r0
 80114f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80114f2:	4620      	mov	r0, r4
 80114f4:	f7ff fb02 	bl	8010afc <read_submessage_list>
 80114f8:	e7be      	b.n	8011478 <uxr_create_session+0x68>
 80114fa:	9b03      	ldr	r3, [sp, #12]
 80114fc:	3b01      	subs	r3, #1
 80114fe:	9303      	str	r3, [sp, #12]
 8011500:	d001      	beq.n	8011506 <uxr_create_session+0xf6>
 8011502:	2aff      	cmp	r2, #255	@ 0xff
 8011504:	d0ac      	beq.n	8011460 <uxr_create_session+0x50>
 8011506:	2a00      	cmp	r2, #0
 8011508:	d051      	beq.n	80115ae <uxr_create_session+0x19e>
 801150a:	2000      	movs	r0, #0
 801150c:	b02b      	add	sp, #172	@ 0xac
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011516:	4641      	mov	r1, r8
 8011518:	4630      	mov	r0, r6
 801151a:	9304      	str	r3, [sp, #16]
 801151c:	f000 fae0 	bl	8011ae0 <uxr_get_input_reliable_stream>
 8011520:	4682      	mov	sl, r0
 8011522:	b348      	cbz	r0, 8011578 <uxr_create_session+0x168>
 8011524:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011526:	a81a      	add	r0, sp, #104	@ 0x68
 8011528:	9205      	str	r2, [sp, #20]
 801152a:	f7fe ff3f 	bl	80103ac <ucdr_buffer_remaining>
 801152e:	4603      	mov	r3, r0
 8011530:	f10d 0019 	add.w	r0, sp, #25
 8011534:	9a05      	ldr	r2, [sp, #20]
 8011536:	4659      	mov	r1, fp
 8011538:	9000      	str	r0, [sp, #0]
 801153a:	4650      	mov	r0, sl
 801153c:	f004 f876 	bl	801562c <uxr_receive_reliable_message>
 8011540:	b1d0      	cbz	r0, 8011578 <uxr_create_session+0x168>
 8011542:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d038      	beq.n	80115bc <uxr_create_session+0x1ac>
 801154a:	9f04      	ldr	r7, [sp, #16]
 801154c:	e00a      	b.n	8011564 <uxr_create_session+0x154>
 801154e:	f04f 0302 	mov.w	r3, #2
 8011552:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8011556:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801155a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801155e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011560:	f7ff facc 	bl	8010afc <read_submessage_list>
 8011564:	a922      	add	r1, sp, #136	@ 0x88
 8011566:	2204      	movs	r2, #4
 8011568:	4650      	mov	r0, sl
 801156a:	f004 f8e1 	bl	8015730 <uxr_next_input_reliable_buffer_available>
 801156e:	4603      	mov	r3, r0
 8011570:	a922      	add	r1, sp, #136	@ 0x88
 8011572:	4620      	mov	r0, r4
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1ea      	bne.n	801154e <uxr_create_session+0x13e>
 8011578:	4642      	mov	r2, r8
 801157a:	9904      	ldr	r1, [sp, #16]
 801157c:	4620      	mov	r0, r4
 801157e:	f7ff f939 	bl	80107f4 <write_submessage_acknack.isra.0>
 8011582:	e779      	b.n	8011478 <uxr_create_session+0x68>
 8011584:	4641      	mov	r1, r8
 8011586:	4630      	mov	r0, r6
 8011588:	f000 faa0 	bl	8011acc <uxr_get_input_best_effort_stream>
 801158c:	2800      	cmp	r0, #0
 801158e:	f43f af73 	beq.w	8011478 <uxr_create_session+0x68>
 8011592:	4659      	mov	r1, fp
 8011594:	f003 ffc0 	bl	8015518 <uxr_receive_best_effort_message>
 8011598:	2800      	cmp	r0, #0
 801159a:	f43f af6d 	beq.w	8011478 <uxr_create_session+0x68>
 801159e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80115a2:	a91a      	add	r1, sp, #104	@ 0x68
 80115a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7ff faa8 	bl	8010afc <read_submessage_list>
 80115ac:	e764      	b.n	8011478 <uxr_create_session+0x68>
 80115ae:	4630      	mov	r0, r6
 80115b0:	f000 f9de 	bl	8011970 <uxr_reset_stream_storage>
 80115b4:	2001      	movs	r0, #1
 80115b6:	b02b      	add	sp, #172	@ 0xac
 80115b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115bc:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80115c0:	a91a      	add	r1, sp, #104	@ 0x68
 80115c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115c4:	4620      	mov	r0, r4
 80115c6:	f7ff fa99 	bl	8010afc <read_submessage_list>
 80115ca:	e7be      	b.n	801154a <uxr_create_session+0x13a>

080115cc <uxr_prepare_stream_to_write_submessage>:
 80115cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d0:	b082      	sub	sp, #8
 80115d2:	4604      	mov	r4, r0
 80115d4:	4610      	mov	r0, r2
 80115d6:	4615      	mov	r5, r2
 80115d8:	461e      	mov	r6, r3
 80115da:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80115de:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80115e2:	f105 0904 	add.w	r9, r5, #4
 80115e6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80115ea:	9101      	str	r1, [sp, #4]
 80115ec:	f000 fada 	bl	8011ba4 <uxr_submessage_padding>
 80115f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115f4:	4481      	add	r9, r0
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d01d      	beq.n	8011636 <uxr_prepare_stream_to_write_submessage+0x6a>
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	d116      	bne.n	801162c <uxr_prepare_stream_to_write_submessage+0x60>
 80115fe:	f104 0008 	add.w	r0, r4, #8
 8011602:	4651      	mov	r1, sl
 8011604:	f000 fa56 	bl	8011ab4 <uxr_get_output_reliable_stream>
 8011608:	4604      	mov	r4, r0
 801160a:	b158      	cbz	r0, 8011624 <uxr_prepare_stream_to_write_submessage+0x58>
 801160c:	4649      	mov	r1, r9
 801160e:	4632      	mov	r2, r6
 8011610:	f004 fa54 	bl	8015abc <uxr_prepare_reliable_buffer_to_write>
 8011614:	4604      	mov	r4, r0
 8011616:	b12c      	cbz	r4, 8011624 <uxr_prepare_stream_to_write_submessage+0x58>
 8011618:	4643      	mov	r3, r8
 801161a:	b2aa      	uxth	r2, r5
 801161c:	4639      	mov	r1, r7
 801161e:	4630      	mov	r0, r6
 8011620:	f000 fa80 	bl	8011b24 <uxr_buffer_submessage_header>
 8011624:	4620      	mov	r0, r4
 8011626:	b002      	add	sp, #8
 8011628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801162c:	2400      	movs	r4, #0
 801162e:	4620      	mov	r0, r4
 8011630:	b002      	add	sp, #8
 8011632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011636:	f104 0008 	add.w	r0, r4, #8
 801163a:	4651      	mov	r1, sl
 801163c:	f000 fa32 	bl	8011aa4 <uxr_get_output_best_effort_stream>
 8011640:	4604      	mov	r4, r0
 8011642:	2800      	cmp	r0, #0
 8011644:	d0ee      	beq.n	8011624 <uxr_prepare_stream_to_write_submessage+0x58>
 8011646:	4649      	mov	r1, r9
 8011648:	4632      	mov	r2, r6
 801164a:	f004 f961 	bl	8015910 <uxr_prepare_best_effort_buffer_to_write>
 801164e:	4604      	mov	r4, r0
 8011650:	e7e1      	b.n	8011616 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011652:	bf00      	nop

08011654 <uxr_init_session_info>:
 8011654:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011658:	23ff      	movs	r3, #255	@ 0xff
 801165a:	7102      	strb	r2, [r0, #4]
 801165c:	f880 c001 	strb.w	ip, [r0, #1]
 8011660:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011664:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011668:	7001      	strb	r1, [r0, #0]
 801166a:	f880 c002 	strb.w	ip, [r0, #2]
 801166e:	7143      	strb	r3, [r0, #5]
 8011670:	70c2      	strb	r2, [r0, #3]
 8011672:	b500      	push	{lr}
 8011674:	f04f 0e09 	mov.w	lr, #9
 8011678:	f8a0 e006 	strh.w	lr, [r0, #6]
 801167c:	f85d fb04 	ldr.w	pc, [sp], #4

08011680 <uxr_buffer_create_session>:
 8011680:	b530      	push	{r4, r5, lr}
 8011682:	2300      	movs	r3, #0
 8011684:	b089      	sub	sp, #36	@ 0x24
 8011686:	4d12      	ldr	r5, [pc, #72]	@ (80116d0 <uxr_buffer_create_session+0x50>)
 8011688:	460c      	mov	r4, r1
 801168a:	9307      	str	r3, [sp, #28]
 801168c:	4619      	mov	r1, r3
 801168e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011692:	2201      	movs	r2, #1
 8011694:	9301      	str	r3, [sp, #4]
 8011696:	80c2      	strh	r2, [r0, #6]
 8011698:	f88d 2004 	strb.w	r2, [sp, #4]
 801169c:	682a      	ldr	r2, [r5, #0]
 801169e:	9303      	str	r3, [sp, #12]
 80116a0:	9200      	str	r2, [sp, #0]
 80116a2:	88aa      	ldrh	r2, [r5, #4]
 80116a4:	9306      	str	r3, [sp, #24]
 80116a6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80116aa:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80116ae:	9202      	str	r2, [sp, #8]
 80116b0:	7802      	ldrb	r2, [r0, #0]
 80116b2:	4620      	mov	r0, r4
 80116b4:	f88d 200c 	strb.w	r2, [sp, #12]
 80116b8:	2210      	movs	r2, #16
 80116ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80116be:	f000 fa31 	bl	8011b24 <uxr_buffer_submessage_header>
 80116c2:	4669      	mov	r1, sp
 80116c4:	4620      	mov	r0, r4
 80116c6:	f001 f983 	bl	80129d0 <uxr_serialize_CREATE_CLIENT_Payload>
 80116ca:	b009      	add	sp, #36	@ 0x24
 80116cc:	bd30      	pop	{r4, r5, pc}
 80116ce:	bf00      	nop
 80116d0:	08018b54 	.word	0x08018b54

080116d4 <uxr_buffer_delete_session>:
 80116d4:	4a0c      	ldr	r2, [pc, #48]	@ (8011708 <uxr_buffer_delete_session+0x34>)
 80116d6:	2302      	movs	r3, #2
 80116d8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80116dc:	b510      	push	{r4, lr}
 80116de:	460c      	mov	r4, r1
 80116e0:	b082      	sub	sp, #8
 80116e2:	8911      	ldrh	r1, [r2, #8]
 80116e4:	2204      	movs	r2, #4
 80116e6:	80c3      	strh	r3, [r0, #6]
 80116e8:	2300      	movs	r3, #0
 80116ea:	f8ad 1006 	strh.w	r1, [sp, #6]
 80116ee:	4620      	mov	r0, r4
 80116f0:	2103      	movs	r1, #3
 80116f2:	f8ad c004 	strh.w	ip, [sp, #4]
 80116f6:	f000 fa15 	bl	8011b24 <uxr_buffer_submessage_header>
 80116fa:	a901      	add	r1, sp, #4
 80116fc:	4620      	mov	r0, r4
 80116fe:	f001 fa0f 	bl	8012b20 <uxr_serialize_DELETE_Payload>
 8011702:	b002      	add	sp, #8
 8011704:	bd10      	pop	{r4, pc}
 8011706:	bf00      	nop
 8011708:	08018b54 	.word	0x08018b54

0801170c <uxr_read_create_session_status>:
 801170c:	b510      	push	{r4, lr}
 801170e:	460b      	mov	r3, r1
 8011710:	b088      	sub	sp, #32
 8011712:	4604      	mov	r4, r0
 8011714:	a901      	add	r1, sp, #4
 8011716:	4618      	mov	r0, r3
 8011718:	f001 fa12 	bl	8012b40 <uxr_deserialize_STATUS_AGENT_Payload>
 801171c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011720:	7163      	strb	r3, [r4, #5]
 8011722:	b008      	add	sp, #32
 8011724:	bd10      	pop	{r4, pc}
 8011726:	bf00      	nop

08011728 <uxr_read_delete_session_status>:
 8011728:	b510      	push	{r4, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	4604      	mov	r4, r0
 801172e:	4608      	mov	r0, r1
 8011730:	a902      	add	r1, sp, #8
 8011732:	f001 fa35 	bl	8012ba0 <uxr_deserialize_STATUS_Payload>
 8011736:	88e3      	ldrh	r3, [r4, #6]
 8011738:	2b02      	cmp	r3, #2
 801173a:	d001      	beq.n	8011740 <uxr_read_delete_session_status+0x18>
 801173c:	b004      	add	sp, #16
 801173e:	bd10      	pop	{r4, pc}
 8011740:	f10d 000a 	add.w	r0, sp, #10
 8011744:	f7fe ffdc 	bl	8010700 <uxr_object_id_from_raw>
 8011748:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801174c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011750:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011754:	b29b      	uxth	r3, r3
 8011756:	2b02      	cmp	r3, #2
 8011758:	d1f0      	bne.n	801173c <uxr_read_delete_session_status+0x14>
 801175a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801175e:	7163      	strb	r3, [r4, #5]
 8011760:	e7ec      	b.n	801173c <uxr_read_delete_session_status+0x14>
 8011762:	bf00      	nop

08011764 <uxr_stamp_create_session_header>:
 8011764:	b510      	push	{r4, lr}
 8011766:	2208      	movs	r2, #8
 8011768:	b08a      	sub	sp, #40	@ 0x28
 801176a:	4604      	mov	r4, r0
 801176c:	eb0d 0002 	add.w	r0, sp, r2
 8011770:	f7fe fdea 	bl	8010348 <ucdr_init_buffer>
 8011774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011778:	2300      	movs	r3, #0
 801177a:	a802      	add	r0, sp, #8
 801177c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011780:	9400      	str	r4, [sp, #0]
 8011782:	461a      	mov	r2, r3
 8011784:	f000 fbca 	bl	8011f1c <uxr_serialize_message_header>
 8011788:	b00a      	add	sp, #40	@ 0x28
 801178a:	bd10      	pop	{r4, pc}

0801178c <uxr_stamp_session_header>:
 801178c:	b530      	push	{r4, r5, lr}
 801178e:	b08d      	sub	sp, #52	@ 0x34
 8011790:	4604      	mov	r4, r0
 8011792:	460d      	mov	r5, r1
 8011794:	4619      	mov	r1, r3
 8011796:	a804      	add	r0, sp, #16
 8011798:	9203      	str	r2, [sp, #12]
 801179a:	2208      	movs	r2, #8
 801179c:	f7fe fdd4 	bl	8010348 <ucdr_init_buffer>
 80117a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	462a      	mov	r2, r5
 80117a8:	a804      	add	r0, sp, #16
 80117aa:	9400      	str	r4, [sp, #0]
 80117ac:	f000 fbb6 	bl	8011f1c <uxr_serialize_message_header>
 80117b0:	b00d      	add	sp, #52	@ 0x34
 80117b2:	bd30      	pop	{r4, r5, pc}

080117b4 <uxr_read_session_header>:
 80117b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b8:	4607      	mov	r7, r0
 80117ba:	b084      	sub	sp, #16
 80117bc:	4608      	mov	r0, r1
 80117be:	460c      	mov	r4, r1
 80117c0:	4615      	mov	r5, r2
 80117c2:	461e      	mov	r6, r3
 80117c4:	f7fe fdf2 	bl	80103ac <ucdr_buffer_remaining>
 80117c8:	2808      	cmp	r0, #8
 80117ca:	d803      	bhi.n	80117d4 <uxr_read_session_header+0x20>
 80117cc:	2000      	movs	r0, #0
 80117ce:	b004      	add	sp, #16
 80117d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d4:	f10d 080c 	add.w	r8, sp, #12
 80117d8:	4633      	mov	r3, r6
 80117da:	462a      	mov	r2, r5
 80117dc:	4620      	mov	r0, r4
 80117de:	f10d 010b 	add.w	r1, sp, #11
 80117e2:	f8cd 8000 	str.w	r8, [sp]
 80117e6:	f000 fbb7 	bl	8011f58 <uxr_deserialize_message_header>
 80117ea:	783a      	ldrb	r2, [r7, #0]
 80117ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d1eb      	bne.n	80117cc <uxr_read_session_header+0x18>
 80117f4:	061b      	lsls	r3, r3, #24
 80117f6:	d41b      	bmi.n	8011830 <uxr_read_session_header+0x7c>
 80117f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80117fc:	787b      	ldrb	r3, [r7, #1]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d003      	beq.n	801180a <uxr_read_session_header+0x56>
 8011802:	2001      	movs	r0, #1
 8011804:	f080 0001 	eor.w	r0, r0, #1
 8011808:	e7e1      	b.n	80117ce <uxr_read_session_header+0x1a>
 801180a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801180e:	1cb8      	adds	r0, r7, #2
 8011810:	78bb      	ldrb	r3, [r7, #2]
 8011812:	429a      	cmp	r2, r3
 8011814:	d1f5      	bne.n	8011802 <uxr_read_session_header+0x4e>
 8011816:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801181a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801181e:	429a      	cmp	r2, r3
 8011820:	d1ef      	bne.n	8011802 <uxr_read_session_header+0x4e>
 8011822:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011826:	7843      	ldrb	r3, [r0, #1]
 8011828:	429a      	cmp	r2, r3
 801182a:	d1ea      	bne.n	8011802 <uxr_read_session_header+0x4e>
 801182c:	2000      	movs	r0, #0
 801182e:	e7e9      	b.n	8011804 <uxr_read_session_header+0x50>
 8011830:	2001      	movs	r0, #1
 8011832:	e7cc      	b.n	80117ce <uxr_read_session_header+0x1a>

08011834 <uxr_session_header_offset>:
 8011834:	f990 3000 	ldrsb.w	r3, [r0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	bfac      	ite	ge
 801183c:	2008      	movge	r0, #8
 801183e:	2004      	movlt	r0, #4
 8011840:	4770      	bx	lr
 8011842:	bf00      	nop

08011844 <uxr_init_base_object_request>:
 8011844:	b510      	push	{r4, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801184c:	9101      	str	r1, [sp, #4]
 801184e:	88c3      	ldrh	r3, [r0, #6]
 8011850:	f1a3 010a 	sub.w	r1, r3, #10
 8011854:	b289      	uxth	r1, r1
 8011856:	42a1      	cmp	r1, r4
 8011858:	d80f      	bhi.n	801187a <uxr_init_base_object_request+0x36>
 801185a:	3301      	adds	r3, #1
 801185c:	b29c      	uxth	r4, r3
 801185e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011862:	b2db      	uxtb	r3, r3
 8011864:	80c4      	strh	r4, [r0, #6]
 8011866:	1c91      	adds	r1, r2, #2
 8011868:	9801      	ldr	r0, [sp, #4]
 801186a:	f882 c000 	strb.w	ip, [r2]
 801186e:	7053      	strb	r3, [r2, #1]
 8011870:	f7fe ff5a 	bl	8010728 <uxr_object_id_to_raw>
 8011874:	4620      	mov	r0, r4
 8011876:	b002      	add	sp, #8
 8011878:	bd10      	pop	{r4, pc}
 801187a:	230a      	movs	r3, #10
 801187c:	f04f 0c00 	mov.w	ip, #0
 8011880:	461c      	mov	r4, r3
 8011882:	e7ef      	b.n	8011864 <uxr_init_base_object_request+0x20>

08011884 <uxr_parse_base_object_request>:
 8011884:	b570      	push	{r4, r5, r6, lr}
 8011886:	4604      	mov	r4, r0
 8011888:	3002      	adds	r0, #2
 801188a:	460d      	mov	r5, r1
 801188c:	4616      	mov	r6, r2
 801188e:	f7fe ff37 	bl	8010700 <uxr_object_id_from_raw>
 8011892:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011896:	8028      	strh	r0, [r5, #0]
 8011898:	806b      	strh	r3, [r5, #2]
 801189a:	7822      	ldrb	r2, [r4, #0]
 801189c:	7863      	ldrb	r3, [r4, #1]
 801189e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80118a2:	8033      	strh	r3, [r6, #0]
 80118a4:	bd70      	pop	{r4, r5, r6, pc}
 80118a6:	bf00      	nop

080118a8 <uxr_stream_id>:
 80118a8:	2901      	cmp	r1, #1
 80118aa:	4684      	mov	ip, r0
 80118ac:	b500      	push	{lr}
 80118ae:	b083      	sub	sp, #12
 80118b0:	d01f      	beq.n	80118f2 <uxr_stream_id+0x4a>
 80118b2:	2902      	cmp	r1, #2
 80118b4:	f04f 0e00 	mov.w	lr, #0
 80118b8:	d020      	beq.n	80118fc <uxr_stream_id+0x54>
 80118ba:	2300      	movs	r3, #0
 80118bc:	2000      	movs	r0, #0
 80118be:	f36e 0307 	bfi	r3, lr, #0, #8
 80118c2:	f36c 230f 	bfi	r3, ip, #8, #8
 80118c6:	f361 4317 	bfi	r3, r1, #16, #8
 80118ca:	f362 631f 	bfi	r3, r2, #24, #8
 80118ce:	fa5f fc83 	uxtb.w	ip, r3
 80118d2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80118d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80118da:	0e1b      	lsrs	r3, r3, #24
 80118dc:	f36c 0007 	bfi	r0, ip, #0, #8
 80118e0:	f361 200f 	bfi	r0, r1, #8, #8
 80118e4:	f362 4017 	bfi	r0, r2, #16, #8
 80118e8:	f363 601f 	bfi	r0, r3, #24, #8
 80118ec:	b003      	add	sp, #12
 80118ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80118f2:	f100 0e01 	add.w	lr, r0, #1
 80118f6:	fa5f fe8e 	uxtb.w	lr, lr
 80118fa:	e7de      	b.n	80118ba <uxr_stream_id+0x12>
 80118fc:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8011900:	e7db      	b.n	80118ba <uxr_stream_id+0x12>
 8011902:	bf00      	nop

08011904 <uxr_stream_id_from_raw>:
 8011904:	b082      	sub	sp, #8
 8011906:	b130      	cbz	r0, 8011916 <uxr_stream_id_from_raw+0x12>
 8011908:	0603      	lsls	r3, r0, #24
 801190a:	d421      	bmi.n	8011950 <uxr_stream_id_from_raw+0x4c>
 801190c:	1e42      	subs	r2, r0, #1
 801190e:	f04f 0c01 	mov.w	ip, #1
 8011912:	b2d2      	uxtb	r2, r2
 8011914:	e001      	b.n	801191a <uxr_stream_id_from_raw+0x16>
 8011916:	4684      	mov	ip, r0
 8011918:	4602      	mov	r2, r0
 801191a:	2300      	movs	r3, #0
 801191c:	f360 0307 	bfi	r3, r0, #0, #8
 8011920:	2000      	movs	r0, #0
 8011922:	f362 230f 	bfi	r3, r2, #8, #8
 8011926:	f36c 4317 	bfi	r3, ip, #16, #8
 801192a:	f361 631f 	bfi	r3, r1, #24, #8
 801192e:	fa5f fc83 	uxtb.w	ip, r3
 8011932:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011936:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801193a:	0e1b      	lsrs	r3, r3, #24
 801193c:	f36c 0007 	bfi	r0, ip, #0, #8
 8011940:	f361 200f 	bfi	r0, r1, #8, #8
 8011944:	f362 4017 	bfi	r0, r2, #16, #8
 8011948:	f363 601f 	bfi	r0, r3, #24, #8
 801194c:	b002      	add	sp, #8
 801194e:	4770      	bx	lr
 8011950:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011954:	f04f 0c02 	mov.w	ip, #2
 8011958:	e7df      	b.n	801191a <uxr_stream_id_from_raw+0x16>
 801195a:	bf00      	nop

0801195c <uxr_init_stream_storage>:
 801195c:	2300      	movs	r3, #0
 801195e:	7403      	strb	r3, [r0, #16]
 8011960:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011964:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011968:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop

08011970 <uxr_reset_stream_storage>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	7c03      	ldrb	r3, [r0, #16]
 8011974:	4604      	mov	r4, r0
 8011976:	b14b      	cbz	r3, 801198c <uxr_reset_stream_storage+0x1c>
 8011978:	4606      	mov	r6, r0
 801197a:	2500      	movs	r5, #0
 801197c:	4630      	mov	r0, r6
 801197e:	3501      	adds	r5, #1
 8011980:	f003 ffc0 	bl	8015904 <uxr_reset_output_best_effort_stream>
 8011984:	7c23      	ldrb	r3, [r4, #16]
 8011986:	3610      	adds	r6, #16
 8011988:	42ab      	cmp	r3, r5
 801198a:	d8f7      	bhi.n	801197c <uxr_reset_stream_storage+0xc>
 801198c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011990:	b15b      	cbz	r3, 80119aa <uxr_reset_stream_storage+0x3a>
 8011992:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011996:	2500      	movs	r5, #0
 8011998:	4630      	mov	r0, r6
 801199a:	3501      	adds	r5, #1
 801199c:	f003 fdb8 	bl	8015510 <uxr_reset_input_best_effort_stream>
 80119a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80119a4:	3602      	adds	r6, #2
 80119a6:	42ab      	cmp	r3, r5
 80119a8:	d8f6      	bhi.n	8011998 <uxr_reset_stream_storage+0x28>
 80119aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80119ae:	b15b      	cbz	r3, 80119c8 <uxr_reset_stream_storage+0x58>
 80119b0:	f104 0618 	add.w	r6, r4, #24
 80119b4:	2500      	movs	r5, #0
 80119b6:	4630      	mov	r0, r6
 80119b8:	3501      	adds	r5, #1
 80119ba:	f004 f851 	bl	8015a60 <uxr_reset_output_reliable_stream>
 80119be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80119c2:	3628      	adds	r6, #40	@ 0x28
 80119c4:	42ab      	cmp	r3, r5
 80119c6:	d8f6      	bhi.n	80119b6 <uxr_reset_stream_storage+0x46>
 80119c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80119cc:	b15b      	cbz	r3, 80119e6 <uxr_reset_stream_storage+0x76>
 80119ce:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80119d2:	2500      	movs	r5, #0
 80119d4:	4630      	mov	r0, r6
 80119d6:	3501      	adds	r5, #1
 80119d8:	f003 fe06 	bl	80155e8 <uxr_reset_input_reliable_stream>
 80119dc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80119e0:	3618      	adds	r6, #24
 80119e2:	42ab      	cmp	r3, r5
 80119e4:	d8f6      	bhi.n	80119d4 <uxr_reset_stream_storage+0x64>
 80119e6:	bd70      	pop	{r4, r5, r6, pc}

080119e8 <uxr_add_output_best_effort_buffer>:
 80119e8:	b510      	push	{r4, lr}
 80119ea:	7c04      	ldrb	r4, [r0, #16]
 80119ec:	b082      	sub	sp, #8
 80119ee:	f104 0c01 	add.w	ip, r4, #1
 80119f2:	f880 c010 	strb.w	ip, [r0, #16]
 80119f6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80119fa:	f003 ff79 	bl	80158f0 <uxr_init_output_best_effort_stream>
 80119fe:	2201      	movs	r2, #1
 8011a00:	4620      	mov	r0, r4
 8011a02:	4611      	mov	r1, r2
 8011a04:	b002      	add	sp, #8
 8011a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a0a:	f7ff bf4d 	b.w	80118a8 <uxr_stream_id>
 8011a0e:	bf00      	nop

08011a10 <uxr_add_output_reliable_buffer>:
 8011a10:	b510      	push	{r4, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	4684      	mov	ip, r0
 8011a16:	2028      	movs	r0, #40	@ 0x28
 8011a18:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011a1c:	9400      	str	r4, [sp, #0]
 8011a1e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011a22:	fb00 c004 	mla	r0, r0, r4, ip
 8011a26:	f104 0e01 	add.w	lr, r4, #1
 8011a2a:	3018      	adds	r0, #24
 8011a2c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011a30:	f003 ffde 	bl	80159f0 <uxr_init_output_reliable_stream>
 8011a34:	2201      	movs	r2, #1
 8011a36:	2102      	movs	r1, #2
 8011a38:	4620      	mov	r0, r4
 8011a3a:	b004      	add	sp, #16
 8011a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a40:	f7ff bf32 	b.w	80118a8 <uxr_stream_id>

08011a44 <uxr_add_input_best_effort_buffer>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	1c62      	adds	r2, r4, #1
 8011a4e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011a52:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011a56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011a5a:	f003 fd55 	bl	8015508 <uxr_init_input_best_effort_stream>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	2101      	movs	r1, #1
 8011a62:	4620      	mov	r0, r4
 8011a64:	b002      	add	sp, #8
 8011a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a6a:	f7ff bf1d 	b.w	80118a8 <uxr_stream_id>
 8011a6e:	bf00      	nop

08011a70 <uxr_add_input_reliable_buffer>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	4684      	mov	ip, r0
 8011a76:	2018      	movs	r0, #24
 8011a78:	9c06      	ldr	r4, [sp, #24]
 8011a7a:	9400      	str	r4, [sp, #0]
 8011a7c:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011a80:	fb00 c004 	mla	r0, r0, r4, ip
 8011a84:	f104 0e01 	add.w	lr, r4, #1
 8011a88:	3048      	adds	r0, #72	@ 0x48
 8011a8a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011a8e:	f003 fd85 	bl	801559c <uxr_init_input_reliable_stream>
 8011a92:	2200      	movs	r2, #0
 8011a94:	2102      	movs	r1, #2
 8011a96:	4620      	mov	r0, r4
 8011a98:	b004      	add	sp, #16
 8011a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9e:	f7ff bf03 	b.w	80118a8 <uxr_stream_id>
 8011aa2:	bf00      	nop

08011aa4 <uxr_get_output_best_effort_stream>:
 8011aa4:	7c03      	ldrb	r3, [r0, #16]
 8011aa6:	428b      	cmp	r3, r1
 8011aa8:	bf8c      	ite	hi
 8011aaa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011aae:	2000      	movls	r0, #0
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop

08011ab4 <uxr_get_output_reliable_stream>:
 8011ab4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011ab8:	428b      	cmp	r3, r1
 8011aba:	d904      	bls.n	8011ac6 <uxr_get_output_reliable_stream+0x12>
 8011abc:	2328      	movs	r3, #40	@ 0x28
 8011abe:	fb03 0001 	mla	r0, r3, r1, r0
 8011ac2:	3018      	adds	r0, #24
 8011ac4:	4770      	bx	lr
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop

08011acc <uxr_get_input_best_effort_stream>:
 8011acc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011ad0:	428b      	cmp	r3, r1
 8011ad2:	d903      	bls.n	8011adc <uxr_get_input_best_effort_stream+0x10>
 8011ad4:	3121      	adds	r1, #33	@ 0x21
 8011ad6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011ada:	4770      	bx	lr
 8011adc:	2000      	movs	r0, #0
 8011ade:	4770      	bx	lr

08011ae0 <uxr_get_input_reliable_stream>:
 8011ae0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011ae4:	428b      	cmp	r3, r1
 8011ae6:	d904      	bls.n	8011af2 <uxr_get_input_reliable_stream+0x12>
 8011ae8:	2318      	movs	r3, #24
 8011aea:	fb03 0001 	mla	r0, r3, r1, r0
 8011aee:	3048      	adds	r0, #72	@ 0x48
 8011af0:	4770      	bx	lr
 8011af2:	2000      	movs	r0, #0
 8011af4:	4770      	bx	lr
 8011af6:	bf00      	nop

08011af8 <uxr_output_streams_confirmed>:
 8011af8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011afc:	b183      	cbz	r3, 8011b20 <uxr_output_streams_confirmed+0x28>
 8011afe:	b570      	push	{r4, r5, r6, lr}
 8011b00:	4606      	mov	r6, r0
 8011b02:	f100 0518 	add.w	r5, r0, #24
 8011b06:	2400      	movs	r4, #0
 8011b08:	e000      	b.n	8011b0c <uxr_output_streams_confirmed+0x14>
 8011b0a:	b140      	cbz	r0, 8011b1e <uxr_output_streams_confirmed+0x26>
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	3401      	adds	r4, #1
 8011b10:	f004 fa1a 	bl	8015f48 <uxr_is_output_up_to_date>
 8011b14:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011b18:	3528      	adds	r5, #40	@ 0x28
 8011b1a:	42a3      	cmp	r3, r4
 8011b1c:	d8f5      	bhi.n	8011b0a <uxr_output_streams_confirmed+0x12>
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}
 8011b20:	2001      	movs	r0, #1
 8011b22:	4770      	bx	lr

08011b24 <uxr_buffer_submessage_header>:
 8011b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b26:	460e      	mov	r6, r1
 8011b28:	2104      	movs	r1, #4
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	4615      	mov	r5, r2
 8011b2e:	461f      	mov	r7, r3
 8011b30:	f7fe fc26 	bl	8010380 <ucdr_align_to>
 8011b34:	2301      	movs	r3, #1
 8011b36:	4631      	mov	r1, r6
 8011b38:	4620      	mov	r0, r4
 8011b3a:	ea47 0203 	orr.w	r2, r7, r3
 8011b3e:	7523      	strb	r3, [r4, #20]
 8011b40:	462b      	mov	r3, r5
 8011b42:	f000 fa29 	bl	8011f98 <uxr_serialize_submessage_header>
 8011b46:	4620      	mov	r0, r4
 8011b48:	f7fe fc30 	bl	80103ac <ucdr_buffer_remaining>
 8011b4c:	42a8      	cmp	r0, r5
 8011b4e:	bf34      	ite	cc
 8011b50:	2000      	movcc	r0, #0
 8011b52:	2001      	movcs	r0, #1
 8011b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b56:	bf00      	nop

08011b58 <uxr_read_submessage_header>:
 8011b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	460d      	mov	r5, r1
 8011b60:	2104      	movs	r1, #4
 8011b62:	4616      	mov	r6, r2
 8011b64:	4698      	mov	r8, r3
 8011b66:	f7fe fc0b 	bl	8010380 <ucdr_align_to>
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f7fe fc1e 	bl	80103ac <ucdr_buffer_remaining>
 8011b70:	2803      	cmp	r0, #3
 8011b72:	bf8c      	ite	hi
 8011b74:	2701      	movhi	r7, #1
 8011b76:	2700      	movls	r7, #0
 8011b78:	d802      	bhi.n	8011b80 <uxr_read_submessage_header+0x28>
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b80:	4633      	mov	r3, r6
 8011b82:	4642      	mov	r2, r8
 8011b84:	4620      	mov	r0, r4
 8011b86:	4629      	mov	r1, r5
 8011b88:	f000 fa1a 	bl	8011fc0 <uxr_deserialize_submessage_header>
 8011b8c:	f898 3000 	ldrb.w	r3, [r8]
 8011b90:	4638      	mov	r0, r7
 8011b92:	f003 0201 	and.w	r2, r3, #1
 8011b96:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011b9a:	f888 3000 	strb.w	r3, [r8]
 8011b9e:	7522      	strb	r2, [r4, #20]
 8011ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ba4 <uxr_submessage_padding>:
 8011ba4:	f010 0003 	ands.w	r0, r0, #3
 8011ba8:	bf18      	it	ne
 8011baa:	f1c0 0004 	rsbne	r0, r0, #4
 8011bae:	4770      	bx	lr

08011bb0 <uxr_millis>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	2001      	movs	r0, #1
 8011bb6:	4669      	mov	r1, sp
 8011bb8:	f7ef fda6 	bl	8001708 <clock_gettime>
 8011bbc:	4908      	ldr	r1, [pc, #32]	@ (8011be0 <uxr_millis+0x30>)
 8011bbe:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011bc2:	fba0 0301 	umull	r0, r3, r0, r1
 8011bc6:	1900      	adds	r0, r0, r4
 8011bc8:	fb01 3102 	mla	r1, r1, r2, r3
 8011bcc:	4a05      	ldr	r2, [pc, #20]	@ (8011be4 <uxr_millis+0x34>)
 8011bce:	f04f 0300 	mov.w	r3, #0
 8011bd2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011bd6:	f7ee fbeb 	bl	80003b0 <__aeabi_ldivmod>
 8011bda:	b004      	add	sp, #16
 8011bdc:	bd10      	pop	{r4, pc}
 8011bde:	bf00      	nop
 8011be0:	3b9aca00 	.word	0x3b9aca00
 8011be4:	000f4240 	.word	0x000f4240

08011be8 <uxr_nanos>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	2001      	movs	r0, #1
 8011bee:	4669      	mov	r1, sp
 8011bf0:	f7ef fd8a 	bl	8001708 <clock_gettime>
 8011bf4:	4a06      	ldr	r2, [pc, #24]	@ (8011c10 <uxr_nanos+0x28>)
 8011bf6:	9800      	ldr	r0, [sp, #0]
 8011bf8:	9902      	ldr	r1, [sp, #8]
 8011bfa:	fba0 0302 	umull	r0, r3, r0, r2
 8011bfe:	9c01      	ldr	r4, [sp, #4]
 8011c00:	1840      	adds	r0, r0, r1
 8011c02:	fb02 3304 	mla	r3, r2, r4, r3
 8011c06:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011c0a:	b004      	add	sp, #16
 8011c0c:	bd10      	pop	{r4, pc}
 8011c0e:	bf00      	nop
 8011c10:	3b9aca00 	.word	0x3b9aca00

08011c14 <on_full_output_buffer_fragmented>:
 8011c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c18:	460c      	mov	r4, r1
 8011c1a:	b08a      	sub	sp, #40	@ 0x28
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011c22:	f104 0008 	add.w	r0, r4, #8
 8011c26:	f7ff ff45 	bl	8011ab4 <uxr_get_output_reliable_stream>
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	f004 f996 	bl	8015f5c <get_available_free_slots>
 8011c30:	b968      	cbnz	r0, 8011c4e <on_full_output_buffer_fragmented+0x3a>
 8011c32:	4620      	mov	r0, r4
 8011c34:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011c38:	4798      	blx	r3
 8011c3a:	b918      	cbnz	r0, 8011c44 <on_full_output_buffer_fragmented+0x30>
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	b00a      	add	sp, #40	@ 0x28
 8011c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c44:	4628      	mov	r0, r5
 8011c46:	f004 f989 	bl	8015f5c <get_available_free_slots>
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d0f6      	beq.n	8011c3c <on_full_output_buffer_fragmented+0x28>
 8011c4e:	8929      	ldrh	r1, [r5, #8]
 8011c50:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8011c54:	89eb      	ldrh	r3, [r5, #14]
 8011c56:	7b28      	ldrb	r0, [r5, #12]
 8011c58:	686f      	ldr	r7, [r5, #4]
 8011c5a:	1a12      	subs	r2, r2, r0
 8011c5c:	fbb3 f0f1 	udiv	r0, r3, r1
 8011c60:	fbb7 f7f1 	udiv	r7, r7, r1
 8011c64:	fb01 3110 	mls	r1, r1, r0, r3
 8011c68:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011c6c:	b289      	uxth	r1, r1
 8011c6e:	fb07 f101 	mul.w	r1, r7, r1
 8011c72:	3f04      	subs	r7, #4
 8011c74:	443a      	add	r2, r7
 8011c76:	3104      	adds	r1, #4
 8011c78:	fa1f f882 	uxth.w	r8, r2
 8011c7c:	463a      	mov	r2, r7
 8011c7e:	eba3 0308 	sub.w	r3, r3, r8
 8011c82:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011c86:	682b      	ldr	r3, [r5, #0]
 8011c88:	4419      	add	r1, r3
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011c90:	9000      	str	r0, [sp, #0]
 8011c92:	a802      	add	r0, sp, #8
 8011c94:	f7fe fb46 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8011c98:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011c9c:	f102 0308 	add.w	r3, r2, #8
 8011ca0:	42bb      	cmp	r3, r7
 8011ca2:	d927      	bls.n	8011cf4 <on_full_output_buffer_fragmented+0xe0>
 8011ca4:	4642      	mov	r2, r8
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	210d      	movs	r1, #13
 8011caa:	a802      	add	r0, sp, #8
 8011cac:	f7ff ff3a 	bl	8011b24 <uxr_buffer_submessage_header>
 8011cb0:	8929      	ldrh	r1, [r5, #8]
 8011cb2:	89eb      	ldrh	r3, [r5, #14]
 8011cb4:	686a      	ldr	r2, [r5, #4]
 8011cb6:	fbb3 f0f1 	udiv	r0, r3, r1
 8011cba:	fbb2 f2f1 	udiv	r2, r2, r1
 8011cbe:	fb01 3310 	mls	r3, r1, r0, r3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	fb02 f303 	mul.w	r3, r2, r3
 8011cc8:	682a      	ldr	r2, [r5, #0]
 8011cca:	50d7      	str	r7, [r2, r3]
 8011ccc:	2101      	movs	r1, #1
 8011cce:	89e8      	ldrh	r0, [r5, #14]
 8011cd0:	f004 fa5c 	bl	801618c <uxr_seq_num_add>
 8011cd4:	9904      	ldr	r1, [sp, #16]
 8011cd6:	9a03      	ldr	r2, [sp, #12]
 8011cd8:	81e8      	strh	r0, [r5, #14]
 8011cda:	4630      	mov	r0, r6
 8011cdc:	1a52      	subs	r2, r2, r1
 8011cde:	f7fe fb33 	bl	8010348 <ucdr_init_buffer>
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	4622      	mov	r2, r4
 8011ce6:	490f      	ldr	r1, [pc, #60]	@ (8011d24 <on_full_output_buffer_fragmented+0x110>)
 8011ce8:	f7fe fb02 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8011cec:	2000      	movs	r0, #0
 8011cee:	b00a      	add	sp, #40	@ 0x28
 8011cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf4:	b292      	uxth	r2, r2
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	210d      	movs	r1, #13
 8011cfa:	a802      	add	r0, sp, #8
 8011cfc:	f7ff ff12 	bl	8011b24 <uxr_buffer_submessage_header>
 8011d00:	8928      	ldrh	r0, [r5, #8]
 8011d02:	89eb      	ldrh	r3, [r5, #14]
 8011d04:	6869      	ldr	r1, [r5, #4]
 8011d06:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011d0a:	fbb3 f7f0 	udiv	r7, r3, r0
 8011d0e:	fbb1 f1f0 	udiv	r1, r1, r0
 8011d12:	fb00 3317 	mls	r3, r0, r7, r3
 8011d16:	3208      	adds	r2, #8
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	fb01 f303 	mul.w	r3, r1, r3
 8011d1e:	6829      	ldr	r1, [r5, #0]
 8011d20:	50ca      	str	r2, [r1, r3]
 8011d22:	e7d3      	b.n	8011ccc <on_full_output_buffer_fragmented+0xb8>
 8011d24:	08011c15 	.word	0x08011c15

08011d28 <uxr_prepare_output_stream>:
 8011d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d2a:	b087      	sub	sp, #28
 8011d2c:	2707      	movs	r7, #7
 8011d2e:	2500      	movs	r5, #0
 8011d30:	461c      	mov	r4, r3
 8011d32:	4606      	mov	r6, r0
 8011d34:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011d38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011d3a:	e9cd 7500 	strd	r7, r5, [sp]
 8011d3e:	3204      	adds	r2, #4
 8011d40:	f7ff fc44 	bl	80115cc <uxr_prepare_stream_to_write_submessage>
 8011d44:	f080 0201 	eor.w	r2, r0, #1
 8011d48:	b2d2      	uxtb	r2, r2
 8011d4a:	75a2      	strb	r2, [r4, #22]
 8011d4c:	b112      	cbz	r2, 8011d54 <uxr_prepare_output_stream+0x2c>
 8011d4e:	4628      	mov	r0, r5
 8011d50:	b007      	add	sp, #28
 8011d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d54:	aa05      	add	r2, sp, #20
 8011d56:	9902      	ldr	r1, [sp, #8]
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f7ff fd73 	bl	8011844 <uxr_init_base_object_request>
 8011d5e:	a905      	add	r1, sp, #20
 8011d60:	4605      	mov	r5, r0
 8011d62:	4620      	mov	r0, r4
 8011d64:	f000 ff9c 	bl	8012ca0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011d68:	69a6      	ldr	r6, [r4, #24]
 8011d6a:	69e7      	ldr	r7, [r4, #28]
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011d72:	1a52      	subs	r2, r2, r1
 8011d74:	f7fe fae8 	bl	8010348 <ucdr_init_buffer>
 8011d78:	4620      	mov	r0, r4
 8011d7a:	463a      	mov	r2, r7
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	f7fe fab7 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8011d82:	4628      	mov	r0, r5
 8011d84:	b007      	add	sp, #28
 8011d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d88 <uxr_prepare_output_stream_fragmented>:
 8011d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d8c:	b091      	sub	sp, #68	@ 0x44
 8011d8e:	4605      	mov	r5, r0
 8011d90:	3008      	adds	r0, #8
 8011d92:	461e      	mov	r6, r3
 8011d94:	9105      	str	r1, [sp, #20]
 8011d96:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011d9a:	9204      	str	r2, [sp, #16]
 8011d9c:	f7ff fe8a 	bl	8011ab4 <uxr_get_output_reliable_stream>
 8011da0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	f000 8093 	beq.w	8011ed0 <uxr_prepare_output_stream_fragmented+0x148>
 8011daa:	4604      	mov	r4, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	f000 808f 	beq.w	8011ed0 <uxr_prepare_output_stream_fragmented+0x148>
 8011db2:	f004 f8d3 	bl	8015f5c <get_available_free_slots>
 8011db6:	2800      	cmp	r0, #0
 8011db8:	f000 8085 	beq.w	8011ec6 <uxr_prepare_output_stream_fragmented+0x13e>
 8011dbc:	8923      	ldrh	r3, [r4, #8]
 8011dbe:	89e7      	ldrh	r7, [r4, #14]
 8011dc0:	6862      	ldr	r2, [r4, #4]
 8011dc2:	fbb7 f9f3 	udiv	r9, r7, r3
 8011dc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8011dca:	fb03 7919 	mls	r9, r3, r9, r7
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	f1a2 0b04 	sub.w	fp, r2, #4
 8011dd4:	9203      	str	r2, [sp, #12]
 8011dd6:	fa1f f989 	uxth.w	r9, r9
 8011dda:	fb02 f909 	mul.w	r9, r2, r9
 8011dde:	f109 0904 	add.w	r9, r9, #4
 8011de2:	4499      	add	r9, r3
 8011de4:	7b23      	ldrb	r3, [r4, #12]
 8011de6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011dea:	4543      	cmp	r3, r8
 8011dec:	d37c      	bcc.n	8011ee8 <uxr_prepare_output_stream_fragmented+0x160>
 8011dee:	f1ab 0a04 	sub.w	sl, fp, #4
 8011df2:	465a      	mov	r2, fp
 8011df4:	4649      	mov	r1, r9
 8011df6:	a808      	add	r0, sp, #32
 8011df8:	ebaa 0a03 	sub.w	sl, sl, r3
 8011dfc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011dfe:	f8cd 8000 	str.w	r8, [sp]
 8011e02:	3308      	adds	r3, #8
 8011e04:	fa1f fa8a 	uxth.w	sl, sl
 8011e08:	9302      	str	r3, [sp, #8]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f7fe fa8a 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8011e10:	9b02      	ldr	r3, [sp, #8]
 8011e12:	4652      	mov	r2, sl
 8011e14:	210d      	movs	r1, #13
 8011e16:	455b      	cmp	r3, fp
 8011e18:	bf34      	ite	cc
 8011e1a:	2302      	movcc	r3, #2
 8011e1c:	2300      	movcs	r3, #0
 8011e1e:	a808      	add	r0, sp, #32
 8011e20:	f7ff fe80 	bl	8011b24 <uxr_buffer_submessage_header>
 8011e24:	8921      	ldrh	r1, [r4, #8]
 8011e26:	6863      	ldr	r3, [r4, #4]
 8011e28:	4638      	mov	r0, r7
 8011e2a:	fbb7 f2f1 	udiv	r2, r7, r1
 8011e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e32:	fb01 7212 	mls	r2, r1, r2, r7
 8011e36:	2101      	movs	r1, #1
 8011e38:	b292      	uxth	r2, r2
 8011e3a:	fb02 f303 	mul.w	r3, r2, r3
 8011e3e:	6822      	ldr	r2, [r4, #0]
 8011e40:	f842 b003 	str.w	fp, [r2, r3]
 8011e44:	f004 f9a2 	bl	801618c <uxr_seq_num_add>
 8011e48:	9b03      	ldr	r3, [sp, #12]
 8011e4a:	f108 0104 	add.w	r1, r8, #4
 8011e4e:	4607      	mov	r7, r0
 8011e50:	f1a3 0208 	sub.w	r2, r3, #8
 8011e54:	4630      	mov	r0, r6
 8011e56:	4449      	add	r1, r9
 8011e58:	eba2 0208 	sub.w	r2, r2, r8
 8011e5c:	f7fe fa74 	bl	8010348 <ucdr_init_buffer>
 8011e60:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011e62:	2107      	movs	r1, #7
 8011e64:	81e7      	strh	r7, [r4, #14]
 8011e66:	1d1a      	adds	r2, r3, #4
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011e70:	bf28      	it	cs
 8011e72:	461a      	movcs	r2, r3
 8011e74:	b292      	uxth	r2, r2
 8011e76:	f7ff fe55 	bl	8011b24 <uxr_buffer_submessage_header>
 8011e7a:	aa07      	add	r2, sp, #28
 8011e7c:	9904      	ldr	r1, [sp, #16]
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f7ff fce0 	bl	8011844 <uxr_init_base_object_request>
 8011e84:	4604      	mov	r4, r0
 8011e86:	b320      	cbz	r0, 8011ed2 <uxr_prepare_output_stream_fragmented+0x14a>
 8011e88:	a907      	add	r1, sp, #28
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f000 ff08 	bl	8012ca0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011e90:	4630      	mov	r0, r6
 8011e92:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011e96:	1a52      	subs	r2, r2, r1
 8011e98:	f7fe fa56 	bl	8010348 <ucdr_init_buffer>
 8011e9c:	9b05      	ldr	r3, [sp, #20]
 8011e9e:	9a02      	ldr	r2, [sp, #8]
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011ea6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011ea8:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8011eac:	462a      	mov	r2, r5
 8011eae:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011eb2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011eb4:	4918      	ldr	r1, [pc, #96]	@ (8011f18 <uxr_prepare_output_stream_fragmented+0x190>)
 8011eb6:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011eba:	f7fe fa19 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	b011      	add	sp, #68	@ 0x44
 8011ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011ec8:	4628      	mov	r0, r5
 8011eca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011ecc:	4798      	blx	r3
 8011ece:	b920      	cbnz	r0, 8011eda <uxr_prepare_output_stream_fragmented+0x152>
 8011ed0:	2400      	movs	r4, #0
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	b011      	add	sp, #68	@ 0x44
 8011ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eda:	4620      	mov	r0, r4
 8011edc:	f004 f83e 	bl	8015f5c <get_available_free_slots>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	f47f af6b 	bne.w	8011dbc <uxr_prepare_output_stream_fragmented+0x34>
 8011ee6:	e7f3      	b.n	8011ed0 <uxr_prepare_output_stream_fragmented+0x148>
 8011ee8:	4638      	mov	r0, r7
 8011eea:	2101      	movs	r1, #1
 8011eec:	f004 f94e 	bl	801618c <uxr_seq_num_add>
 8011ef0:	8922      	ldrh	r2, [r4, #8]
 8011ef2:	6863      	ldr	r3, [r4, #4]
 8011ef4:	4607      	mov	r7, r0
 8011ef6:	fbb3 f9f2 	udiv	r9, r3, r2
 8011efa:	fbb0 f3f2 	udiv	r3, r0, r2
 8011efe:	fb02 0313 	mls	r3, r2, r3, r0
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	fb03 f909 	mul.w	r9, r3, r9
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	f109 0904 	add.w	r9, r9, #4
 8011f0e:	4499      	add	r9, r3
 8011f10:	7b23      	ldrb	r3, [r4, #12]
 8011f12:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011f16:	e76a      	b.n	8011dee <uxr_prepare_output_stream_fragmented+0x66>
 8011f18:	08011c15 	.word	0x08011c15

08011f1c <uxr_serialize_message_header>:
 8011f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f1e:	4616      	mov	r6, r2
 8011f20:	b083      	sub	sp, #12
 8011f22:	4604      	mov	r4, r0
 8011f24:	460d      	mov	r5, r1
 8011f26:	9301      	str	r3, [sp, #4]
 8011f28:	9f08      	ldr	r7, [sp, #32]
 8011f2a:	f7fd fa61 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8011f2e:	4631      	mov	r1, r6
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7fd fa5d 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8011f36:	9a01      	ldr	r2, [sp, #4]
 8011f38:	2101      	movs	r1, #1
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7fd fb04 	bl	800f548 <ucdr_serialize_endian_uint16_t>
 8011f40:	062b      	lsls	r3, r5, #24
 8011f42:	d501      	bpl.n	8011f48 <uxr_serialize_message_header+0x2c>
 8011f44:	b003      	add	sp, #12
 8011f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f48:	2204      	movs	r2, #4
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	b003      	add	sp, #12
 8011f50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f54:	f003 b8de 	b.w	8015114 <ucdr_serialize_array_uint8_t>

08011f58 <uxr_deserialize_message_header>:
 8011f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f5a:	4616      	mov	r6, r2
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	4604      	mov	r4, r0
 8011f60:	460d      	mov	r5, r1
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	9f08      	ldr	r7, [sp, #32]
 8011f66:	f7fd fa59 	bl	800f41c <ucdr_deserialize_uint8_t>
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f7fd fa55 	bl	800f41c <ucdr_deserialize_uint8_t>
 8011f72:	9a01      	ldr	r2, [sp, #4]
 8011f74:	2101      	movs	r1, #1
 8011f76:	4620      	mov	r0, r4
 8011f78:	f7fd fbda 	bl	800f730 <ucdr_deserialize_endian_uint16_t>
 8011f7c:	f995 3000 	ldrsb.w	r3, [r5]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	da01      	bge.n	8011f88 <uxr_deserialize_message_header+0x30>
 8011f84:	b003      	add	sp, #12
 8011f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f88:	2204      	movs	r2, #4
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	b003      	add	sp, #12
 8011f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f94:	f003 b922 	b.w	80151dc <ucdr_deserialize_array_uint8_t>

08011f98 <uxr_serialize_submessage_header>:
 8011f98:	b530      	push	{r4, r5, lr}
 8011f9a:	4615      	mov	r5, r2
 8011f9c:	b083      	sub	sp, #12
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	9301      	str	r3, [sp, #4]
 8011fa2:	f7fd fa25 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7fd fa21 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8011fae:	9a01      	ldr	r2, [sp, #4]
 8011fb0:	2101      	movs	r1, #1
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	b003      	add	sp, #12
 8011fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fba:	f7fd bac5 	b.w	800f548 <ucdr_serialize_endian_uint16_t>
 8011fbe:	bf00      	nop

08011fc0 <uxr_deserialize_submessage_header>:
 8011fc0:	b530      	push	{r4, r5, lr}
 8011fc2:	4615      	mov	r5, r2
 8011fc4:	b083      	sub	sp, #12
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	9301      	str	r3, [sp, #4]
 8011fca:	f7fd fa27 	bl	800f41c <ucdr_deserialize_uint8_t>
 8011fce:	4629      	mov	r1, r5
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f7fd fa23 	bl	800f41c <ucdr_deserialize_uint8_t>
 8011fd6:	9a01      	ldr	r2, [sp, #4]
 8011fd8:	2101      	movs	r1, #1
 8011fda:	4620      	mov	r0, r4
 8011fdc:	b003      	add	sp, #12
 8011fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fe2:	f7fd bba5 	b.w	800f730 <ucdr_deserialize_endian_uint16_t>
 8011fe6:	bf00      	nop

08011fe8 <uxr_serialize_CLIENT_Representation>:
 8011fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fec:	2204      	movs	r2, #4
 8011fee:	460e      	mov	r6, r1
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	f003 f88f 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8011ff6:	4607      	mov	r7, r0
 8011ff8:	2202      	movs	r2, #2
 8011ffa:	1d31      	adds	r1, r6, #4
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f003 f889 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012002:	4038      	ands	r0, r7
 8012004:	2202      	movs	r2, #2
 8012006:	1db1      	adds	r1, r6, #6
 8012008:	b2c7      	uxtb	r7, r0
 801200a:	4628      	mov	r0, r5
 801200c:	f003 f882 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012010:	2204      	movs	r2, #4
 8012012:	4007      	ands	r7, r0
 8012014:	f106 0108 	add.w	r1, r6, #8
 8012018:	4628      	mov	r0, r5
 801201a:	f003 f87b 	bl	8015114 <ucdr_serialize_array_uint8_t>
 801201e:	4007      	ands	r7, r0
 8012020:	7b31      	ldrb	r1, [r6, #12]
 8012022:	4628      	mov	r0, r5
 8012024:	f7fd f9e4 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012028:	7b71      	ldrb	r1, [r6, #13]
 801202a:	4007      	ands	r7, r0
 801202c:	4628      	mov	r0, r5
 801202e:	f7fd f9b1 	bl	800f394 <ucdr_serialize_bool>
 8012032:	7b73      	ldrb	r3, [r6, #13]
 8012034:	ea07 0800 	and.w	r8, r7, r0
 8012038:	b93b      	cbnz	r3, 801204a <uxr_serialize_CLIENT_Representation+0x62>
 801203a:	8bb1      	ldrh	r1, [r6, #28]
 801203c:	4628      	mov	r0, r5
 801203e:	f7fd fa03 	bl	800f448 <ucdr_serialize_uint16_t>
 8012042:	ea08 0000 	and.w	r0, r8, r0
 8012046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801204a:	6931      	ldr	r1, [r6, #16]
 801204c:	4628      	mov	r0, r5
 801204e:	f7fd fbe5 	bl	800f81c <ucdr_serialize_uint32_t>
 8012052:	6933      	ldr	r3, [r6, #16]
 8012054:	b1e3      	cbz	r3, 8012090 <uxr_serialize_CLIENT_Representation+0xa8>
 8012056:	b1c0      	cbz	r0, 801208a <uxr_serialize_CLIENT_Representation+0xa2>
 8012058:	4637      	mov	r7, r6
 801205a:	f04f 0900 	mov.w	r9, #0
 801205e:	e000      	b.n	8012062 <uxr_serialize_CLIENT_Representation+0x7a>
 8012060:	b19c      	cbz	r4, 801208a <uxr_serialize_CLIENT_Representation+0xa2>
 8012062:	6979      	ldr	r1, [r7, #20]
 8012064:	4628      	mov	r0, r5
 8012066:	f003 f979 	bl	801535c <ucdr_serialize_string>
 801206a:	69b9      	ldr	r1, [r7, #24]
 801206c:	4604      	mov	r4, r0
 801206e:	4628      	mov	r0, r5
 8012070:	f003 f974 	bl	801535c <ucdr_serialize_string>
 8012074:	f109 0901 	add.w	r9, r9, #1
 8012078:	6933      	ldr	r3, [r6, #16]
 801207a:	4004      	ands	r4, r0
 801207c:	3708      	adds	r7, #8
 801207e:	4599      	cmp	r9, r3
 8012080:	b2e4      	uxtb	r4, r4
 8012082:	d3ed      	bcc.n	8012060 <uxr_serialize_CLIENT_Representation+0x78>
 8012084:	ea08 0804 	and.w	r8, r8, r4
 8012088:	e7d7      	b.n	801203a <uxr_serialize_CLIENT_Representation+0x52>
 801208a:	f04f 0800 	mov.w	r8, #0
 801208e:	e7d4      	b.n	801203a <uxr_serialize_CLIENT_Representation+0x52>
 8012090:	ea08 0800 	and.w	r8, r8, r0
 8012094:	e7d1      	b.n	801203a <uxr_serialize_CLIENT_Representation+0x52>
 8012096:	bf00      	nop

08012098 <uxr_deserialize_CLIENT_Representation>:
 8012098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801209c:	2204      	movs	r2, #4
 801209e:	460c      	mov	r4, r1
 80120a0:	4605      	mov	r5, r0
 80120a2:	f003 f89b 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80120a6:	4607      	mov	r7, r0
 80120a8:	2202      	movs	r2, #2
 80120aa:	1d21      	adds	r1, r4, #4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f003 f895 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80120b2:	4038      	ands	r0, r7
 80120b4:	2202      	movs	r2, #2
 80120b6:	1da1      	adds	r1, r4, #6
 80120b8:	b2c6      	uxtb	r6, r0
 80120ba:	4628      	mov	r0, r5
 80120bc:	f003 f88e 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80120c0:	2204      	movs	r2, #4
 80120c2:	4006      	ands	r6, r0
 80120c4:	f104 0108 	add.w	r1, r4, #8
 80120c8:	4628      	mov	r0, r5
 80120ca:	f003 f887 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80120ce:	4006      	ands	r6, r0
 80120d0:	f104 010c 	add.w	r1, r4, #12
 80120d4:	4628      	mov	r0, r5
 80120d6:	f7fd f9a1 	bl	800f41c <ucdr_deserialize_uint8_t>
 80120da:	f104 010d 	add.w	r1, r4, #13
 80120de:	ea06 0700 	and.w	r7, r6, r0
 80120e2:	4628      	mov	r0, r5
 80120e4:	f7fd f96c 	bl	800f3c0 <ucdr_deserialize_bool>
 80120e8:	7b63      	ldrb	r3, [r4, #13]
 80120ea:	4007      	ands	r7, r0
 80120ec:	b93b      	cbnz	r3, 80120fe <uxr_deserialize_CLIENT_Representation+0x66>
 80120ee:	f104 011c 	add.w	r1, r4, #28
 80120f2:	4628      	mov	r0, r5
 80120f4:	f7fd faa8 	bl	800f648 <ucdr_deserialize_uint16_t>
 80120f8:	4038      	ands	r0, r7
 80120fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120fe:	f104 0110 	add.w	r1, r4, #16
 8012102:	4628      	mov	r0, r5
 8012104:	f7fd fcba 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012108:	6923      	ldr	r3, [r4, #16]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d903      	bls.n	8012116 <uxr_deserialize_CLIENT_Representation+0x7e>
 801210e:	2301      	movs	r3, #1
 8012110:	2700      	movs	r7, #0
 8012112:	75ab      	strb	r3, [r5, #22]
 8012114:	e7eb      	b.n	80120ee <uxr_deserialize_CLIENT_Representation+0x56>
 8012116:	b30b      	cbz	r3, 801215c <uxr_deserialize_CLIENT_Representation+0xc4>
 8012118:	b1f0      	cbz	r0, 8012158 <uxr_deserialize_CLIENT_Representation+0xc0>
 801211a:	46a0      	mov	r8, r4
 801211c:	f04f 0900 	mov.w	r9, #0
 8012120:	e000      	b.n	8012124 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012122:	b1ce      	cbz	r6, 8012158 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012124:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012128:	f108 0808 	add.w	r8, r8, #8
 801212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012130:	4628      	mov	r0, r5
 8012132:	f003 f923 	bl	801537c <ucdr_deserialize_string>
 8012136:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801213a:	4606      	mov	r6, r0
 801213c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012140:	4628      	mov	r0, r5
 8012142:	f109 0901 	add.w	r9, r9, #1
 8012146:	f003 f919 	bl	801537c <ucdr_deserialize_string>
 801214a:	6923      	ldr	r3, [r4, #16]
 801214c:	4006      	ands	r6, r0
 801214e:	4599      	cmp	r9, r3
 8012150:	b2f6      	uxtb	r6, r6
 8012152:	d3e6      	bcc.n	8012122 <uxr_deserialize_CLIENT_Representation+0x8a>
 8012154:	4037      	ands	r7, r6
 8012156:	e7ca      	b.n	80120ee <uxr_deserialize_CLIENT_Representation+0x56>
 8012158:	2700      	movs	r7, #0
 801215a:	e7c8      	b.n	80120ee <uxr_deserialize_CLIENT_Representation+0x56>
 801215c:	4007      	ands	r7, r0
 801215e:	e7c6      	b.n	80120ee <uxr_deserialize_CLIENT_Representation+0x56>

08012160 <uxr_serialize_AGENT_Representation>:
 8012160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012164:	2204      	movs	r2, #4
 8012166:	460f      	mov	r7, r1
 8012168:	4605      	mov	r5, r0
 801216a:	f002 ffd3 	bl	8015114 <ucdr_serialize_array_uint8_t>
 801216e:	4604      	mov	r4, r0
 8012170:	2202      	movs	r2, #2
 8012172:	1d39      	adds	r1, r7, #4
 8012174:	4628      	mov	r0, r5
 8012176:	f002 ffcd 	bl	8015114 <ucdr_serialize_array_uint8_t>
 801217a:	4020      	ands	r0, r4
 801217c:	2202      	movs	r2, #2
 801217e:	1db9      	adds	r1, r7, #6
 8012180:	b2c4      	uxtb	r4, r0
 8012182:	4628      	mov	r0, r5
 8012184:	f002 ffc6 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012188:	7a39      	ldrb	r1, [r7, #8]
 801218a:	4004      	ands	r4, r0
 801218c:	4628      	mov	r0, r5
 801218e:	f7fd f901 	bl	800f394 <ucdr_serialize_bool>
 8012192:	7a3b      	ldrb	r3, [r7, #8]
 8012194:	ea00 0804 	and.w	r8, r0, r4
 8012198:	b913      	cbnz	r3, 80121a0 <uxr_serialize_AGENT_Representation+0x40>
 801219a:	4640      	mov	r0, r8
 801219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121a0:	68f9      	ldr	r1, [r7, #12]
 80121a2:	4628      	mov	r0, r5
 80121a4:	f7fd fb3a 	bl	800f81c <ucdr_serialize_uint32_t>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	b303      	cbz	r3, 80121ee <uxr_serialize_AGENT_Representation+0x8e>
 80121ac:	b1d0      	cbz	r0, 80121e4 <uxr_serialize_AGENT_Representation+0x84>
 80121ae:	463e      	mov	r6, r7
 80121b0:	f04f 0900 	mov.w	r9, #0
 80121b4:	e000      	b.n	80121b8 <uxr_serialize_AGENT_Representation+0x58>
 80121b6:	b1ac      	cbz	r4, 80121e4 <uxr_serialize_AGENT_Representation+0x84>
 80121b8:	6931      	ldr	r1, [r6, #16]
 80121ba:	4628      	mov	r0, r5
 80121bc:	f003 f8ce 	bl	801535c <ucdr_serialize_string>
 80121c0:	6971      	ldr	r1, [r6, #20]
 80121c2:	4604      	mov	r4, r0
 80121c4:	4628      	mov	r0, r5
 80121c6:	f003 f8c9 	bl	801535c <ucdr_serialize_string>
 80121ca:	f109 0901 	add.w	r9, r9, #1
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	4004      	ands	r4, r0
 80121d2:	3608      	adds	r6, #8
 80121d4:	4599      	cmp	r9, r3
 80121d6:	b2e4      	uxtb	r4, r4
 80121d8:	d3ed      	bcc.n	80121b6 <uxr_serialize_AGENT_Representation+0x56>
 80121da:	ea08 0804 	and.w	r8, r8, r4
 80121de:	4640      	mov	r0, r8
 80121e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121e4:	f04f 0800 	mov.w	r8, #0
 80121e8:	4640      	mov	r0, r8
 80121ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ee:	ea08 0800 	and.w	r8, r8, r0
 80121f2:	e7d2      	b.n	801219a <uxr_serialize_AGENT_Representation+0x3a>

080121f4 <uxr_serialize_DATAWRITER_Representation>:
 80121f4:	b570      	push	{r4, r5, r6, lr}
 80121f6:	460d      	mov	r5, r1
 80121f8:	7809      	ldrb	r1, [r1, #0]
 80121fa:	4606      	mov	r6, r0
 80121fc:	f7fd f8f8 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012200:	4604      	mov	r4, r0
 8012202:	b130      	cbz	r0, 8012212 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012204:	782b      	ldrb	r3, [r5, #0]
 8012206:	2b02      	cmp	r3, #2
 8012208:	d00c      	beq.n	8012224 <uxr_serialize_DATAWRITER_Representation+0x30>
 801220a:	2b03      	cmp	r3, #3
 801220c:	d010      	beq.n	8012230 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801220e:	2b01      	cmp	r3, #1
 8012210:	d008      	beq.n	8012224 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012212:	2202      	movs	r2, #2
 8012214:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012218:	4630      	mov	r0, r6
 801221a:	f002 ff7b 	bl	8015114 <ucdr_serialize_array_uint8_t>
 801221e:	4020      	ands	r0, r4
 8012220:	b2c0      	uxtb	r0, r0
 8012222:	bd70      	pop	{r4, r5, r6, pc}
 8012224:	6869      	ldr	r1, [r5, #4]
 8012226:	4630      	mov	r0, r6
 8012228:	f003 f898 	bl	801535c <ucdr_serialize_string>
 801222c:	4604      	mov	r4, r0
 801222e:	e7f0      	b.n	8012212 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012230:	4629      	mov	r1, r5
 8012232:	4630      	mov	r0, r6
 8012234:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012238:	3104      	adds	r1, #4
 801223a:	f003 f863 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 801223e:	4604      	mov	r4, r0
 8012240:	e7e7      	b.n	8012212 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012242:	bf00      	nop

08012244 <uxr_serialize_ObjectVariant.part.0>:
 8012244:	b570      	push	{r4, r5, r6, lr}
 8012246:	780b      	ldrb	r3, [r1, #0]
 8012248:	460c      	mov	r4, r1
 801224a:	4605      	mov	r5, r0
 801224c:	3b01      	subs	r3, #1
 801224e:	2b0d      	cmp	r3, #13
 8012250:	d854      	bhi.n	80122fc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012252:	e8df f003 	tbb	[pc, r3]
 8012256:	0730      	.short	0x0730
 8012258:	07071b1b 	.word	0x07071b1b
 801225c:	0c530707 	.word	0x0c530707
 8012260:	494e0c0c 	.word	0x494e0c0c
 8012264:	3104      	adds	r1, #4
 8012266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801226a:	f7ff bfc3 	b.w	80121f4 <uxr_serialize_DATAWRITER_Representation>
 801226e:	7909      	ldrb	r1, [r1, #4]
 8012270:	f7fd f8be 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012274:	b1e8      	cbz	r0, 80122b2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012276:	7923      	ldrb	r3, [r4, #4]
 8012278:	2b01      	cmp	r3, #1
 801227a:	d001      	beq.n	8012280 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801227c:	2b02      	cmp	r3, #2
 801227e:	d13d      	bne.n	80122fc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012280:	68a1      	ldr	r1, [r4, #8]
 8012282:	4628      	mov	r0, r5
 8012284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012288:	f003 b868 	b.w	801535c <ucdr_serialize_string>
 801228c:	7909      	ldrb	r1, [r1, #4]
 801228e:	f7fd f8af 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012292:	4606      	mov	r6, r0
 8012294:	b120      	cbz	r0, 80122a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012296:	7923      	ldrb	r3, [r4, #4]
 8012298:	2b02      	cmp	r3, #2
 801229a:	d039      	beq.n	8012310 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801229c:	2b03      	cmp	r3, #3
 801229e:	d02f      	beq.n	8012300 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80122a0:	2202      	movs	r2, #2
 80122a2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80122a6:	4628      	mov	r0, r5
 80122a8:	f002 ff34 	bl	8015114 <ucdr_serialize_array_uint8_t>
 80122ac:	4030      	ands	r0, r6
 80122ae:	b2c0      	uxtb	r0, r0
 80122b0:	bd70      	pop	{r4, r5, r6, pc}
 80122b2:	2000      	movs	r0, #0
 80122b4:	bd70      	pop	{r4, r5, r6, pc}
 80122b6:	7909      	ldrb	r1, [r1, #4]
 80122b8:	f7fd f89a 	bl	800f3f0 <ucdr_serialize_uint8_t>
 80122bc:	4606      	mov	r6, r0
 80122be:	b158      	cbz	r0, 80122d8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80122c0:	7923      	ldrb	r3, [r4, #4]
 80122c2:	2b02      	cmp	r3, #2
 80122c4:	d003      	beq.n	80122ce <uxr_serialize_ObjectVariant.part.0+0x8a>
 80122c6:	2b03      	cmp	r3, #3
 80122c8:	d028      	beq.n	801231c <uxr_serialize_ObjectVariant.part.0+0xd8>
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d104      	bne.n	80122d8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80122ce:	68a1      	ldr	r1, [r4, #8]
 80122d0:	4628      	mov	r0, r5
 80122d2:	f003 f843 	bl	801535c <ucdr_serialize_string>
 80122d6:	4606      	mov	r6, r0
 80122d8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80122dc:	4628      	mov	r0, r5
 80122de:	f7fd fdc3 	bl	800fe68 <ucdr_serialize_int16_t>
 80122e2:	4030      	ands	r0, r6
 80122e4:	b2c0      	uxtb	r0, r0
 80122e6:	bd70      	pop	{r4, r5, r6, pc}
 80122e8:	3104      	adds	r1, #4
 80122ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ee:	f7ff be7b 	b.w	8011fe8 <uxr_serialize_CLIENT_Representation>
 80122f2:	3104      	adds	r1, #4
 80122f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122f8:	f7ff bf32 	b.w	8012160 <uxr_serialize_AGENT_Representation>
 80122fc:	2001      	movs	r0, #1
 80122fe:	bd70      	pop	{r4, r5, r6, pc}
 8012300:	68a2      	ldr	r2, [r4, #8]
 8012302:	f104 010c 	add.w	r1, r4, #12
 8012306:	4628      	mov	r0, r5
 8012308:	f002 fffc 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 801230c:	4606      	mov	r6, r0
 801230e:	e7c7      	b.n	80122a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012310:	68a1      	ldr	r1, [r4, #8]
 8012312:	4628      	mov	r0, r5
 8012314:	f003 f822 	bl	801535c <ucdr_serialize_string>
 8012318:	4606      	mov	r6, r0
 801231a:	e7c1      	b.n	80122a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801231c:	68a2      	ldr	r2, [r4, #8]
 801231e:	f104 010c 	add.w	r1, r4, #12
 8012322:	4628      	mov	r0, r5
 8012324:	f002 ffee 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 8012328:	4606      	mov	r6, r0
 801232a:	e7d5      	b.n	80122d8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801232c <uxr_deserialize_DATAWRITER_Representation>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	4606      	mov	r6, r0
 8012330:	460d      	mov	r5, r1
 8012332:	f7fd f873 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012336:	4604      	mov	r4, r0
 8012338:	b130      	cbz	r0, 8012348 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801233a:	782b      	ldrb	r3, [r5, #0]
 801233c:	2b02      	cmp	r3, #2
 801233e:	d00c      	beq.n	801235a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012340:	2b03      	cmp	r3, #3
 8012342:	d012      	beq.n	801236a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012344:	2b01      	cmp	r3, #1
 8012346:	d008      	beq.n	801235a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012348:	2202      	movs	r2, #2
 801234a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801234e:	4630      	mov	r0, r6
 8012350:	f002 ff44 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012354:	4020      	ands	r0, r4
 8012356:	b2c0      	uxtb	r0, r0
 8012358:	bd70      	pop	{r4, r5, r6, pc}
 801235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801235e:	6869      	ldr	r1, [r5, #4]
 8012360:	4630      	mov	r0, r6
 8012362:	f003 f80b 	bl	801537c <ucdr_deserialize_string>
 8012366:	4604      	mov	r4, r0
 8012368:	e7ee      	b.n	8012348 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801236a:	1d2b      	adds	r3, r5, #4
 801236c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012370:	f105 0108 	add.w	r1, r5, #8
 8012374:	4630      	mov	r0, r6
 8012376:	f002 ffd7 	bl	8015328 <ucdr_deserialize_sequence_uint8_t>
 801237a:	4604      	mov	r4, r0
 801237c:	e7e4      	b.n	8012348 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801237e:	bf00      	nop

08012380 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012380:	b570      	push	{r4, r5, r6, lr}
 8012382:	460d      	mov	r5, r1
 8012384:	7809      	ldrb	r1, [r1, #0]
 8012386:	4606      	mov	r6, r0
 8012388:	f7fd f804 	bl	800f394 <ucdr_serialize_bool>
 801238c:	782b      	ldrb	r3, [r5, #0]
 801238e:	4604      	mov	r4, r0
 8012390:	b94b      	cbnz	r3, 80123a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012392:	7a29      	ldrb	r1, [r5, #8]
 8012394:	4630      	mov	r0, r6
 8012396:	f7fc fffd 	bl	800f394 <ucdr_serialize_bool>
 801239a:	7a2b      	ldrb	r3, [r5, #8]
 801239c:	4004      	ands	r4, r0
 801239e:	b2e4      	uxtb	r4, r4
 80123a0:	b943      	cbnz	r3, 80123b4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80123a2:	4620      	mov	r0, r4
 80123a4:	bd70      	pop	{r4, r5, r6, pc}
 80123a6:	6869      	ldr	r1, [r5, #4]
 80123a8:	4630      	mov	r0, r6
 80123aa:	f002 ffd7 	bl	801535c <ucdr_serialize_string>
 80123ae:	4004      	ands	r4, r0
 80123b0:	b2e4      	uxtb	r4, r4
 80123b2:	e7ee      	b.n	8012392 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80123b4:	68e9      	ldr	r1, [r5, #12]
 80123b6:	4630      	mov	r0, r6
 80123b8:	f002 ffd0 	bl	801535c <ucdr_serialize_string>
 80123bc:	4004      	ands	r4, r0
 80123be:	4620      	mov	r0, r4
 80123c0:	bd70      	pop	{r4, r5, r6, pc}
 80123c2:	bf00      	nop

080123c4 <uxr_serialize_OBJK_Topic_Binary>:
 80123c4:	b570      	push	{r4, r5, r6, lr}
 80123c6:	460d      	mov	r5, r1
 80123c8:	4606      	mov	r6, r0
 80123ca:	6809      	ldr	r1, [r1, #0]
 80123cc:	f002 ffc6 	bl	801535c <ucdr_serialize_string>
 80123d0:	4604      	mov	r4, r0
 80123d2:	7929      	ldrb	r1, [r5, #4]
 80123d4:	4630      	mov	r0, r6
 80123d6:	f7fc ffdd 	bl	800f394 <ucdr_serialize_bool>
 80123da:	792b      	ldrb	r3, [r5, #4]
 80123dc:	4004      	ands	r4, r0
 80123de:	b2e4      	uxtb	r4, r4
 80123e0:	b943      	cbnz	r3, 80123f4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80123e2:	7b29      	ldrb	r1, [r5, #12]
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7fc ffd5 	bl	800f394 <ucdr_serialize_bool>
 80123ea:	7b2b      	ldrb	r3, [r5, #12]
 80123ec:	4004      	ands	r4, r0
 80123ee:	b93b      	cbnz	r3, 8012400 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80123f0:	4620      	mov	r0, r4
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	68a9      	ldr	r1, [r5, #8]
 80123f6:	4630      	mov	r0, r6
 80123f8:	f002 ffb0 	bl	801535c <ucdr_serialize_string>
 80123fc:	4004      	ands	r4, r0
 80123fe:	e7f0      	b.n	80123e2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012400:	6929      	ldr	r1, [r5, #16]
 8012402:	4630      	mov	r0, r6
 8012404:	f002 ffaa 	bl	801535c <ucdr_serialize_string>
 8012408:	4004      	ands	r4, r0
 801240a:	b2e4      	uxtb	r4, r4
 801240c:	4620      	mov	r0, r4
 801240e:	bd70      	pop	{r4, r5, r6, pc}

08012410 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012414:	460c      	mov	r4, r1
 8012416:	7809      	ldrb	r1, [r1, #0]
 8012418:	4606      	mov	r6, r0
 801241a:	f7fc ffbb 	bl	800f394 <ucdr_serialize_bool>
 801241e:	7823      	ldrb	r3, [r4, #0]
 8012420:	4605      	mov	r5, r0
 8012422:	b96b      	cbnz	r3, 8012440 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012424:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012428:	4630      	mov	r0, r6
 801242a:	f7fc ffb3 	bl	800f394 <ucdr_serialize_bool>
 801242e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012432:	4005      	ands	r5, r0
 8012434:	b2ed      	uxtb	r5, r5
 8012436:	2b00      	cmp	r3, #0
 8012438:	d169      	bne.n	801250e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801243a:	4628      	mov	r0, r5
 801243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012440:	6861      	ldr	r1, [r4, #4]
 8012442:	4630      	mov	r0, r6
 8012444:	f7fd f9ea 	bl	800f81c <ucdr_serialize_uint32_t>
 8012448:	6863      	ldr	r3, [r4, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d06b      	beq.n	8012526 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801244e:	2800      	cmp	r0, #0
 8012450:	d067      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012452:	68a1      	ldr	r1, [r4, #8]
 8012454:	4630      	mov	r0, r6
 8012456:	f002 ff81 	bl	801535c <ucdr_serialize_string>
 801245a:	6863      	ldr	r3, [r4, #4]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d953      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012460:	2800      	cmp	r0, #0
 8012462:	d05e      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012464:	68e1      	ldr	r1, [r4, #12]
 8012466:	4630      	mov	r0, r6
 8012468:	f002 ff78 	bl	801535c <ucdr_serialize_string>
 801246c:	6863      	ldr	r3, [r4, #4]
 801246e:	2b02      	cmp	r3, #2
 8012470:	d94a      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012472:	2800      	cmp	r0, #0
 8012474:	d055      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012476:	6921      	ldr	r1, [r4, #16]
 8012478:	4630      	mov	r0, r6
 801247a:	f002 ff6f 	bl	801535c <ucdr_serialize_string>
 801247e:	6863      	ldr	r3, [r4, #4]
 8012480:	2b03      	cmp	r3, #3
 8012482:	d941      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012484:	2800      	cmp	r0, #0
 8012486:	d04c      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012488:	6961      	ldr	r1, [r4, #20]
 801248a:	4630      	mov	r0, r6
 801248c:	f002 ff66 	bl	801535c <ucdr_serialize_string>
 8012490:	6863      	ldr	r3, [r4, #4]
 8012492:	2b04      	cmp	r3, #4
 8012494:	d938      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012496:	2800      	cmp	r0, #0
 8012498:	d043      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801249a:	69a1      	ldr	r1, [r4, #24]
 801249c:	4630      	mov	r0, r6
 801249e:	f002 ff5d 	bl	801535c <ucdr_serialize_string>
 80124a2:	6863      	ldr	r3, [r4, #4]
 80124a4:	2b05      	cmp	r3, #5
 80124a6:	d92f      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d03a      	beq.n	8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124ac:	69e1      	ldr	r1, [r4, #28]
 80124ae:	4630      	mov	r0, r6
 80124b0:	f002 ff54 	bl	801535c <ucdr_serialize_string>
 80124b4:	6863      	ldr	r3, [r4, #4]
 80124b6:	2b06      	cmp	r3, #6
 80124b8:	d926      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124ba:	b390      	cbz	r0, 8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124bc:	6a21      	ldr	r1, [r4, #32]
 80124be:	4630      	mov	r0, r6
 80124c0:	f002 ff4c 	bl	801535c <ucdr_serialize_string>
 80124c4:	6863      	ldr	r3, [r4, #4]
 80124c6:	2b07      	cmp	r3, #7
 80124c8:	d91e      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124ca:	b350      	cbz	r0, 8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80124ce:	4630      	mov	r0, r6
 80124d0:	f002 ff44 	bl	801535c <ucdr_serialize_string>
 80124d4:	6863      	ldr	r3, [r4, #4]
 80124d6:	2b08      	cmp	r3, #8
 80124d8:	d916      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124da:	b310      	cbz	r0, 8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80124de:	4630      	mov	r0, r6
 80124e0:	f002 ff3c 	bl	801535c <ucdr_serialize_string>
 80124e4:	6863      	ldr	r3, [r4, #4]
 80124e6:	2b09      	cmp	r3, #9
 80124e8:	d90e      	bls.n	8012508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124ea:	b1d0      	cbz	r0, 8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80124f0:	2709      	movs	r7, #9
 80124f2:	e000      	b.n	80124f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80124f4:	b1a8      	cbz	r0, 8012522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80124fa:	4630      	mov	r0, r6
 80124fc:	f002 ff2e 	bl	801535c <ucdr_serialize_string>
 8012500:	3701      	adds	r7, #1
 8012502:	6862      	ldr	r2, [r4, #4]
 8012504:	4297      	cmp	r7, r2
 8012506:	d3f5      	bcc.n	80124f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012508:	4005      	ands	r5, r0
 801250a:	b2ed      	uxtb	r5, r5
 801250c:	e78a      	b.n	8012424 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801250e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012510:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012514:	4630      	mov	r0, r6
 8012516:	f002 fef5 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 801251a:	4005      	ands	r5, r0
 801251c:	4628      	mov	r0, r5
 801251e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012522:	2500      	movs	r5, #0
 8012524:	e77e      	b.n	8012424 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012526:	4028      	ands	r0, r5
 8012528:	b2c5      	uxtb	r5, r0
 801252a:	e77b      	b.n	8012424 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801252c <uxr_serialize_OBJK_Publisher_Binary>:
 801252c:	b570      	push	{r4, r5, r6, lr}
 801252e:	460d      	mov	r5, r1
 8012530:	7809      	ldrb	r1, [r1, #0]
 8012532:	4606      	mov	r6, r0
 8012534:	f7fc ff2e 	bl	800f394 <ucdr_serialize_bool>
 8012538:	782b      	ldrb	r3, [r5, #0]
 801253a:	4604      	mov	r4, r0
 801253c:	b94b      	cbnz	r3, 8012552 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801253e:	7a29      	ldrb	r1, [r5, #8]
 8012540:	4630      	mov	r0, r6
 8012542:	f7fc ff27 	bl	800f394 <ucdr_serialize_bool>
 8012546:	7a2b      	ldrb	r3, [r5, #8]
 8012548:	4004      	ands	r4, r0
 801254a:	b2e4      	uxtb	r4, r4
 801254c:	b943      	cbnz	r3, 8012560 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801254e:	4620      	mov	r0, r4
 8012550:	bd70      	pop	{r4, r5, r6, pc}
 8012552:	6869      	ldr	r1, [r5, #4]
 8012554:	4630      	mov	r0, r6
 8012556:	f002 ff01 	bl	801535c <ucdr_serialize_string>
 801255a:	4004      	ands	r4, r0
 801255c:	b2e4      	uxtb	r4, r4
 801255e:	e7ee      	b.n	801253e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012560:	f105 010c 	add.w	r1, r5, #12
 8012564:	4630      	mov	r0, r6
 8012566:	f7ff ff53 	bl	8012410 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801256a:	4004      	ands	r4, r0
 801256c:	4620      	mov	r0, r4
 801256e:	bd70      	pop	{r4, r5, r6, pc}

08012570 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012570:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012574:	4688      	mov	r8, r1
 8012576:	4681      	mov	r9, r0
 8012578:	8809      	ldrh	r1, [r1, #0]
 801257a:	f7fc ff65 	bl	800f448 <ucdr_serialize_uint16_t>
 801257e:	4606      	mov	r6, r0
 8012580:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012584:	4648      	mov	r0, r9
 8012586:	f7fc ff05 	bl	800f394 <ucdr_serialize_bool>
 801258a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801258e:	4006      	ands	r6, r0
 8012590:	b2f5      	uxtb	r5, r6
 8012592:	b9eb      	cbnz	r3, 80125d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012594:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012598:	4648      	mov	r0, r9
 801259a:	f7fc fefb 	bl	800f394 <ucdr_serialize_bool>
 801259e:	f898 3006 	ldrb.w	r3, [r8, #6]
 80125a2:	4005      	ands	r5, r0
 80125a4:	bb7b      	cbnz	r3, 8012606 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80125a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80125aa:	4648      	mov	r0, r9
 80125ac:	f7fc fef2 	bl	800f394 <ucdr_serialize_bool>
 80125b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80125b4:	4005      	ands	r5, r0
 80125b6:	b9f3      	cbnz	r3, 80125f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80125b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80125bc:	4648      	mov	r0, r9
 80125be:	f7fc fee9 	bl	800f394 <ucdr_serialize_bool>
 80125c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80125c6:	4005      	ands	r5, r0
 80125c8:	b94b      	cbnz	r3, 80125de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80125ca:	4628      	mov	r0, r5
 80125cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80125d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80125d4:	4648      	mov	r0, r9
 80125d6:	f7fc ff37 	bl	800f448 <ucdr_serialize_uint16_t>
 80125da:	4005      	ands	r5, r0
 80125dc:	e7da      	b.n	8012594 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80125de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80125e2:	f108 011c 	add.w	r1, r8, #28
 80125e6:	4648      	mov	r0, r9
 80125e8:	f002 fe8c 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 80125ec:	4028      	ands	r0, r5
 80125ee:	b2c5      	uxtb	r5, r0
 80125f0:	4628      	mov	r0, r5
 80125f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80125f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125fa:	4648      	mov	r0, r9
 80125fc:	f7fd f90e 	bl	800f81c <ucdr_serialize_uint32_t>
 8012600:	4028      	ands	r0, r5
 8012602:	b2c5      	uxtb	r5, r0
 8012604:	e7d8      	b.n	80125b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012606:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801260a:	4648      	mov	r0, r9
 801260c:	f7fd f906 	bl	800f81c <ucdr_serialize_uint32_t>
 8012610:	4028      	ands	r0, r5
 8012612:	b2c5      	uxtb	r5, r0
 8012614:	e7c7      	b.n	80125a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012616:	bf00      	nop

08012618 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261a:	2202      	movs	r2, #2
 801261c:	460d      	mov	r5, r1
 801261e:	4606      	mov	r6, r0
 8012620:	f002 fd78 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012624:	4604      	mov	r4, r0
 8012626:	78a9      	ldrb	r1, [r5, #2]
 8012628:	4630      	mov	r0, r6
 801262a:	f7fc feb3 	bl	800f394 <ucdr_serialize_bool>
 801262e:	78ab      	ldrb	r3, [r5, #2]
 8012630:	4004      	ands	r4, r0
 8012632:	b2e4      	uxtb	r4, r4
 8012634:	b90b      	cbnz	r3, 801263a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012636:	4620      	mov	r0, r4
 8012638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801263a:	f105 0108 	add.w	r1, r5, #8
 801263e:	4630      	mov	r0, r6
 8012640:	f7ff ff96 	bl	8012570 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012644:	4607      	mov	r7, r0
 8012646:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801264a:	4630      	mov	r0, r6
 801264c:	f7fc fea2 	bl	800f394 <ucdr_serialize_bool>
 8012650:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012654:	4038      	ands	r0, r7
 8012656:	b2c7      	uxtb	r7, r0
 8012658:	b913      	cbnz	r3, 8012660 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801265a:	403c      	ands	r4, r7
 801265c:	4620      	mov	r0, r4
 801265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012660:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012664:	4630      	mov	r0, r6
 8012666:	f7fd fb2f 	bl	800fcc8 <ucdr_serialize_uint64_t>
 801266a:	4007      	ands	r7, r0
 801266c:	e7f5      	b.n	801265a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801266e:	bf00      	nop

08012670 <uxr_deserialize_ObjectVariant>:
 8012670:	b570      	push	{r4, r5, r6, lr}
 8012672:	4605      	mov	r5, r0
 8012674:	460e      	mov	r6, r1
 8012676:	f7fc fed1 	bl	800f41c <ucdr_deserialize_uint8_t>
 801267a:	b168      	cbz	r0, 8012698 <uxr_deserialize_ObjectVariant+0x28>
 801267c:	7833      	ldrb	r3, [r6, #0]
 801267e:	4604      	mov	r4, r0
 8012680:	3b01      	subs	r3, #1
 8012682:	2b0d      	cmp	r3, #13
 8012684:	d809      	bhi.n	801269a <uxr_deserialize_ObjectVariant+0x2a>
 8012686:	e8df f003 	tbb	[pc, r3]
 801268a:	0a41      	.short	0x0a41
 801268c:	0a0a2323 	.word	0x0a0a2323
 8012690:	10080a0a 	.word	0x10080a0a
 8012694:	565c1010 	.word	0x565c1010
 8012698:	2400      	movs	r4, #0
 801269a:	4620      	mov	r0, r4
 801269c:	bd70      	pop	{r4, r5, r6, pc}
 801269e:	1d31      	adds	r1, r6, #4
 80126a0:	4628      	mov	r0, r5
 80126a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126a6:	f7ff be41 	b.w	801232c <uxr_deserialize_DATAWRITER_Representation>
 80126aa:	1d31      	adds	r1, r6, #4
 80126ac:	4628      	mov	r0, r5
 80126ae:	f7fc feb5 	bl	800f41c <ucdr_deserialize_uint8_t>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d0f0      	beq.n	8012698 <uxr_deserialize_ObjectVariant+0x28>
 80126b6:	7933      	ldrb	r3, [r6, #4]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d001      	beq.n	80126c0 <uxr_deserialize_ObjectVariant+0x50>
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d1ec      	bne.n	801269a <uxr_deserialize_ObjectVariant+0x2a>
 80126c0:	68b1      	ldr	r1, [r6, #8]
 80126c2:	4628      	mov	r0, r5
 80126c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126cc:	f002 be56 	b.w	801537c <ucdr_deserialize_string>
 80126d0:	1d31      	adds	r1, r6, #4
 80126d2:	4628      	mov	r0, r5
 80126d4:	f7fc fea2 	bl	800f41c <ucdr_deserialize_uint8_t>
 80126d8:	4604      	mov	r4, r0
 80126da:	b170      	cbz	r0, 80126fa <uxr_deserialize_ObjectVariant+0x8a>
 80126dc:	7933      	ldrb	r3, [r6, #4]
 80126de:	2b02      	cmp	r3, #2
 80126e0:	d04c      	beq.n	801277c <uxr_deserialize_ObjectVariant+0x10c>
 80126e2:	2b03      	cmp	r3, #3
 80126e4:	d109      	bne.n	80126fa <uxr_deserialize_ObjectVariant+0x8a>
 80126e6:	f106 0308 	add.w	r3, r6, #8
 80126ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126ee:	f106 010c 	add.w	r1, r6, #12
 80126f2:	4628      	mov	r0, r5
 80126f4:	f002 fe18 	bl	8015328 <ucdr_deserialize_sequence_uint8_t>
 80126f8:	4604      	mov	r4, r0
 80126fa:	2202      	movs	r2, #2
 80126fc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012700:	4628      	mov	r0, r5
 8012702:	f002 fd6b 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012706:	4020      	ands	r0, r4
 8012708:	b2c4      	uxtb	r4, r0
 801270a:	e7c6      	b.n	801269a <uxr_deserialize_ObjectVariant+0x2a>
 801270c:	1d31      	adds	r1, r6, #4
 801270e:	4628      	mov	r0, r5
 8012710:	f7fc fe84 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012714:	4604      	mov	r4, r0
 8012716:	b130      	cbz	r0, 8012726 <uxr_deserialize_ObjectVariant+0xb6>
 8012718:	7933      	ldrb	r3, [r6, #4]
 801271a:	2b02      	cmp	r3, #2
 801271c:	d036      	beq.n	801278c <uxr_deserialize_ObjectVariant+0x11c>
 801271e:	2b03      	cmp	r3, #3
 8012720:	d03c      	beq.n	801279c <uxr_deserialize_ObjectVariant+0x12c>
 8012722:	2b01      	cmp	r3, #1
 8012724:	d032      	beq.n	801278c <uxr_deserialize_ObjectVariant+0x11c>
 8012726:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801272a:	4628      	mov	r0, r5
 801272c:	f7fd fc1c 	bl	800ff68 <ucdr_deserialize_int16_t>
 8012730:	4020      	ands	r0, r4
 8012732:	b2c4      	uxtb	r4, r0
 8012734:	e7b1      	b.n	801269a <uxr_deserialize_ObjectVariant+0x2a>
 8012736:	1d31      	adds	r1, r6, #4
 8012738:	4628      	mov	r0, r5
 801273a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801273e:	f7ff bcab 	b.w	8012098 <uxr_deserialize_CLIENT_Representation>
 8012742:	2204      	movs	r2, #4
 8012744:	4628      	mov	r0, r5
 8012746:	18b1      	adds	r1, r6, r2
 8012748:	f002 fd48 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 801274c:	4604      	mov	r4, r0
 801274e:	2202      	movs	r2, #2
 8012750:	f106 0108 	add.w	r1, r6, #8
 8012754:	4628      	mov	r0, r5
 8012756:	f002 fd41 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 801275a:	4004      	ands	r4, r0
 801275c:	2202      	movs	r2, #2
 801275e:	f106 010a 	add.w	r1, r6, #10
 8012762:	4628      	mov	r0, r5
 8012764:	b2e4      	uxtb	r4, r4
 8012766:	f002 fd39 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 801276a:	4603      	mov	r3, r0
 801276c:	f106 010c 	add.w	r1, r6, #12
 8012770:	4628      	mov	r0, r5
 8012772:	401c      	ands	r4, r3
 8012774:	f7fc fe24 	bl	800f3c0 <ucdr_deserialize_bool>
 8012778:	4004      	ands	r4, r0
 801277a:	e78e      	b.n	801269a <uxr_deserialize_ObjectVariant+0x2a>
 801277c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012780:	68b1      	ldr	r1, [r6, #8]
 8012782:	4628      	mov	r0, r5
 8012784:	f002 fdfa 	bl	801537c <ucdr_deserialize_string>
 8012788:	4604      	mov	r4, r0
 801278a:	e7b6      	b.n	80126fa <uxr_deserialize_ObjectVariant+0x8a>
 801278c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012790:	68b1      	ldr	r1, [r6, #8]
 8012792:	4628      	mov	r0, r5
 8012794:	f002 fdf2 	bl	801537c <ucdr_deserialize_string>
 8012798:	4604      	mov	r4, r0
 801279a:	e7c4      	b.n	8012726 <uxr_deserialize_ObjectVariant+0xb6>
 801279c:	f106 0308 	add.w	r3, r6, #8
 80127a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127a4:	f106 010c 	add.w	r1, r6, #12
 80127a8:	4628      	mov	r0, r5
 80127aa:	f002 fdbd 	bl	8015328 <ucdr_deserialize_sequence_uint8_t>
 80127ae:	4604      	mov	r4, r0
 80127b0:	e7b9      	b.n	8012726 <uxr_deserialize_ObjectVariant+0xb6>
 80127b2:	bf00      	nop

080127b4 <uxr_deserialize_BaseObjectRequest>:
 80127b4:	b570      	push	{r4, r5, r6, lr}
 80127b6:	2202      	movs	r2, #2
 80127b8:	4605      	mov	r5, r0
 80127ba:	460e      	mov	r6, r1
 80127bc:	f002 fd0e 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80127c0:	2202      	movs	r2, #2
 80127c2:	4604      	mov	r4, r0
 80127c4:	4628      	mov	r0, r5
 80127c6:	18b1      	adds	r1, r6, r2
 80127c8:	f002 fd08 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80127cc:	4020      	ands	r0, r4
 80127ce:	b2c0      	uxtb	r0, r0
 80127d0:	bd70      	pop	{r4, r5, r6, pc}
 80127d2:	bf00      	nop

080127d4 <uxr_serialize_ActivityInfoVariant>:
 80127d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127d8:	460e      	mov	r6, r1
 80127da:	7809      	ldrb	r1, [r1, #0]
 80127dc:	4680      	mov	r8, r0
 80127de:	f7fc fe07 	bl	800f3f0 <ucdr_serialize_uint8_t>
 80127e2:	4607      	mov	r7, r0
 80127e4:	b138      	cbz	r0, 80127f6 <uxr_serialize_ActivityInfoVariant+0x22>
 80127e6:	7833      	ldrb	r3, [r6, #0]
 80127e8:	2b06      	cmp	r3, #6
 80127ea:	f000 8081 	beq.w	80128f0 <uxr_serialize_ActivityInfoVariant+0x11c>
 80127ee:	2b0d      	cmp	r3, #13
 80127f0:	d014      	beq.n	801281c <uxr_serialize_ActivityInfoVariant+0x48>
 80127f2:	2b05      	cmp	r3, #5
 80127f4:	d002      	beq.n	80127fc <uxr_serialize_ActivityInfoVariant+0x28>
 80127f6:	4638      	mov	r0, r7
 80127f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127fc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012800:	4640      	mov	r0, r8
 8012802:	f7fd fb31 	bl	800fe68 <ucdr_serialize_int16_t>
 8012806:	4607      	mov	r7, r0
 8012808:	4640      	mov	r0, r8
 801280a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801280e:	f7fd fa5b 	bl	800fcc8 <ucdr_serialize_uint64_t>
 8012812:	4038      	ands	r0, r7
 8012814:	b2c7      	uxtb	r7, r0
 8012816:	4638      	mov	r0, r7
 8012818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801281c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012820:	4640      	mov	r0, r8
 8012822:	f7fd fb21 	bl	800fe68 <ucdr_serialize_int16_t>
 8012826:	68f1      	ldr	r1, [r6, #12]
 8012828:	4607      	mov	r7, r0
 801282a:	4640      	mov	r0, r8
 801282c:	f7fc fff6 	bl	800f81c <ucdr_serialize_uint32_t>
 8012830:	68f3      	ldr	r3, [r6, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0ed      	beq.n	8012812 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012836:	b318      	cbz	r0, 8012880 <uxr_serialize_ActivityInfoVariant+0xac>
 8012838:	f106 090c 	add.w	r9, r6, #12
 801283c:	2400      	movs	r4, #0
 801283e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012842:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8012846:	7c29      	ldrb	r1, [r5, #16]
 8012848:	4640      	mov	r0, r8
 801284a:	f7fc fdd1 	bl	800f3f0 <ucdr_serialize_uint8_t>
 801284e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8012852:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012856:	2800      	cmp	r0, #0
 8012858:	d051      	beq.n	80128fe <uxr_serialize_ActivityInfoVariant+0x12a>
 801285a:	7c2b      	ldrb	r3, [r5, #16]
 801285c:	00c9      	lsls	r1, r1, #3
 801285e:	2b03      	cmp	r3, #3
 8012860:	d854      	bhi.n	801290c <uxr_serialize_ActivityInfoVariant+0x138>
 8012862:	e8df f003 	tbb	[pc, r3]
 8012866:	2133      	.short	0x2133
 8012868:	020f      	.short	0x020f
 801286a:	4449      	add	r1, r9
 801286c:	4640      	mov	r0, r8
 801286e:	6889      	ldr	r1, [r1, #8]
 8012870:	f002 fd74 	bl	801535c <ucdr_serialize_string>
 8012874:	3401      	adds	r4, #1
 8012876:	68f2      	ldr	r2, [r6, #12]
 8012878:	4294      	cmp	r4, r2
 801287a:	d244      	bcs.n	8012906 <uxr_serialize_ActivityInfoVariant+0x132>
 801287c:	2800      	cmp	r0, #0
 801287e:	d1de      	bne.n	801283e <uxr_serialize_ActivityInfoVariant+0x6a>
 8012880:	2700      	movs	r7, #0
 8012882:	e7b8      	b.n	80127f6 <uxr_serialize_ActivityInfoVariant+0x22>
 8012884:	3108      	adds	r1, #8
 8012886:	44a2      	add	sl, r4
 8012888:	2210      	movs	r2, #16
 801288a:	4640      	mov	r0, r8
 801288c:	4449      	add	r1, r9
 801288e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012892:	f002 fc3f 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012896:	4605      	mov	r5, r0
 8012898:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801289c:	4640      	mov	r0, r8
 801289e:	f7fc ffbd 	bl	800f81c <ucdr_serialize_uint32_t>
 80128a2:	4028      	ands	r0, r5
 80128a4:	b2c0      	uxtb	r0, r0
 80128a6:	e7e5      	b.n	8012874 <uxr_serialize_ActivityInfoVariant+0xa0>
 80128a8:	3108      	adds	r1, #8
 80128aa:	44a2      	add	sl, r4
 80128ac:	2204      	movs	r2, #4
 80128ae:	4640      	mov	r0, r8
 80128b0:	4449      	add	r1, r9
 80128b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80128b6:	f002 fc2d 	bl	8015114 <ucdr_serialize_array_uint8_t>
 80128ba:	4605      	mov	r5, r0
 80128bc:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80128c0:	4640      	mov	r0, r8
 80128c2:	f7fc fdc1 	bl	800f448 <ucdr_serialize_uint16_t>
 80128c6:	4028      	ands	r0, r5
 80128c8:	b2c0      	uxtb	r0, r0
 80128ca:	e7d3      	b.n	8012874 <uxr_serialize_ActivityInfoVariant+0xa0>
 80128cc:	3108      	adds	r1, #8
 80128ce:	44a2      	add	sl, r4
 80128d0:	2202      	movs	r2, #2
 80128d2:	4640      	mov	r0, r8
 80128d4:	4449      	add	r1, r9
 80128d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80128da:	f002 fc1b 	bl	8015114 <ucdr_serialize_array_uint8_t>
 80128de:	4605      	mov	r5, r0
 80128e0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80128e4:	4640      	mov	r0, r8
 80128e6:	f7fc fd83 	bl	800f3f0 <ucdr_serialize_uint8_t>
 80128ea:	4028      	ands	r0, r5
 80128ec:	b2c0      	uxtb	r0, r0
 80128ee:	e7c1      	b.n	8012874 <uxr_serialize_ActivityInfoVariant+0xa0>
 80128f0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80128f4:	4640      	mov	r0, r8
 80128f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128fa:	f7fd bab5 	b.w	800fe68 <ucdr_serialize_int16_t>
 80128fe:	3401      	adds	r4, #1
 8012900:	68f2      	ldr	r2, [r6, #12]
 8012902:	42a2      	cmp	r2, r4
 8012904:	d8bc      	bhi.n	8012880 <uxr_serialize_ActivityInfoVariant+0xac>
 8012906:	4007      	ands	r7, r0
 8012908:	b2ff      	uxtb	r7, r7
 801290a:	e774      	b.n	80127f6 <uxr_serialize_ActivityInfoVariant+0x22>
 801290c:	3401      	adds	r4, #1
 801290e:	68f3      	ldr	r3, [r6, #12]
 8012910:	3518      	adds	r5, #24
 8012912:	429c      	cmp	r4, r3
 8012914:	d397      	bcc.n	8012846 <uxr_serialize_ActivityInfoVariant+0x72>
 8012916:	e76e      	b.n	80127f6 <uxr_serialize_ActivityInfoVariant+0x22>

08012918 <uxr_deserialize_BaseObjectReply>:
 8012918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801291c:	2202      	movs	r2, #2
 801291e:	4606      	mov	r6, r0
 8012920:	460f      	mov	r7, r1
 8012922:	f002 fc5b 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012926:	2202      	movs	r2, #2
 8012928:	4605      	mov	r5, r0
 801292a:	4630      	mov	r0, r6
 801292c:	18b9      	adds	r1, r7, r2
 801292e:	f002 fc55 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012932:	4680      	mov	r8, r0
 8012934:	1d39      	adds	r1, r7, #4
 8012936:	4630      	mov	r0, r6
 8012938:	f7fc fd70 	bl	800f41c <ucdr_deserialize_uint8_t>
 801293c:	ea05 0508 	and.w	r5, r5, r8
 8012940:	4604      	mov	r4, r0
 8012942:	1d79      	adds	r1, r7, #5
 8012944:	4630      	mov	r0, r6
 8012946:	402c      	ands	r4, r5
 8012948:	f7fc fd68 	bl	800f41c <ucdr_deserialize_uint8_t>
 801294c:	4020      	ands	r0, r4
 801294e:	b2c0      	uxtb	r0, r0
 8012950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012954 <uxr_serialize_ReadSpecification>:
 8012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012956:	460e      	mov	r6, r1
 8012958:	4607      	mov	r7, r0
 801295a:	7809      	ldrb	r1, [r1, #0]
 801295c:	f7fc fd48 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012960:	4604      	mov	r4, r0
 8012962:	7871      	ldrb	r1, [r6, #1]
 8012964:	4638      	mov	r0, r7
 8012966:	f7fc fd43 	bl	800f3f0 <ucdr_serialize_uint8_t>
 801296a:	4004      	ands	r4, r0
 801296c:	78b1      	ldrb	r1, [r6, #2]
 801296e:	4638      	mov	r0, r7
 8012970:	f7fc fd10 	bl	800f394 <ucdr_serialize_bool>
 8012974:	78b3      	ldrb	r3, [r6, #2]
 8012976:	b2e4      	uxtb	r4, r4
 8012978:	4004      	ands	r4, r0
 801297a:	b943      	cbnz	r3, 801298e <uxr_serialize_ReadSpecification+0x3a>
 801297c:	7a31      	ldrb	r1, [r6, #8]
 801297e:	4638      	mov	r0, r7
 8012980:	f7fc fd08 	bl	800f394 <ucdr_serialize_bool>
 8012984:	7a33      	ldrb	r3, [r6, #8]
 8012986:	4004      	ands	r4, r0
 8012988:	b93b      	cbnz	r3, 801299a <uxr_serialize_ReadSpecification+0x46>
 801298a:	4620      	mov	r0, r4
 801298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298e:	6871      	ldr	r1, [r6, #4]
 8012990:	4638      	mov	r0, r7
 8012992:	f002 fce3 	bl	801535c <ucdr_serialize_string>
 8012996:	4004      	ands	r4, r0
 8012998:	e7f0      	b.n	801297c <uxr_serialize_ReadSpecification+0x28>
 801299a:	8971      	ldrh	r1, [r6, #10]
 801299c:	4638      	mov	r0, r7
 801299e:	f7fc fd53 	bl	800f448 <ucdr_serialize_uint16_t>
 80129a2:	4605      	mov	r5, r0
 80129a4:	89b1      	ldrh	r1, [r6, #12]
 80129a6:	4638      	mov	r0, r7
 80129a8:	f7fc fd4e 	bl	800f448 <ucdr_serialize_uint16_t>
 80129ac:	4005      	ands	r5, r0
 80129ae:	89f1      	ldrh	r1, [r6, #14]
 80129b0:	4638      	mov	r0, r7
 80129b2:	b2ed      	uxtb	r5, r5
 80129b4:	f7fc fd48 	bl	800f448 <ucdr_serialize_uint16_t>
 80129b8:	8a31      	ldrh	r1, [r6, #16]
 80129ba:	4025      	ands	r5, r4
 80129bc:	4604      	mov	r4, r0
 80129be:	4638      	mov	r0, r7
 80129c0:	4025      	ands	r5, r4
 80129c2:	f7fc fd41 	bl	800f448 <ucdr_serialize_uint16_t>
 80129c6:	ea00 0405 	and.w	r4, r0, r5
 80129ca:	4620      	mov	r0, r4
 80129cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129ce:	bf00      	nop

080129d0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80129d0:	f7ff bb0a 	b.w	8011fe8 <uxr_serialize_CLIENT_Representation>

080129d4 <uxr_serialize_CREATE_Payload>:
 80129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d6:	2202      	movs	r2, #2
 80129d8:	4607      	mov	r7, r0
 80129da:	460e      	mov	r6, r1
 80129dc:	f002 fb9a 	bl	8015114 <ucdr_serialize_array_uint8_t>
 80129e0:	2202      	movs	r2, #2
 80129e2:	4605      	mov	r5, r0
 80129e4:	4638      	mov	r0, r7
 80129e6:	18b1      	adds	r1, r6, r2
 80129e8:	f002 fb94 	bl	8015114 <ucdr_serialize_array_uint8_t>
 80129ec:	7931      	ldrb	r1, [r6, #4]
 80129ee:	4604      	mov	r4, r0
 80129f0:	4638      	mov	r0, r7
 80129f2:	f7fc fcfd 	bl	800f3f0 <ucdr_serialize_uint8_t>
 80129f6:	b170      	cbz	r0, 8012a16 <uxr_serialize_CREATE_Payload+0x42>
 80129f8:	7933      	ldrb	r3, [r6, #4]
 80129fa:	402c      	ands	r4, r5
 80129fc:	3b01      	subs	r3, #1
 80129fe:	b2e4      	uxtb	r4, r4
 8012a00:	2b0d      	cmp	r3, #13
 8012a02:	d809      	bhi.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012a04:	e8df f003 	tbb	[pc, r3]
 8012a08:	23230a4c 	.word	0x23230a4c
 8012a0c:	0a0a0a0a 	.word	0x0a0a0a0a
 8012a10:	12121208 	.word	0x12121208
 8012a14:	3e45      	.short	0x3e45
 8012a16:	2400      	movs	r4, #0
 8012a18:	4620      	mov	r0, r4
 8012a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a1c:	f106 0108 	add.w	r1, r6, #8
 8012a20:	4638      	mov	r0, r7
 8012a22:	f7ff fbe7 	bl	80121f4 <uxr_serialize_DATAWRITER_Representation>
 8012a26:	4004      	ands	r4, r0
 8012a28:	4620      	mov	r0, r4
 8012a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2c:	7a31      	ldrb	r1, [r6, #8]
 8012a2e:	4638      	mov	r0, r7
 8012a30:	f7fc fcde 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d0ee      	beq.n	8012a16 <uxr_serialize_CREATE_Payload+0x42>
 8012a38:	7a33      	ldrb	r3, [r6, #8]
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d001      	beq.n	8012a42 <uxr_serialize_CREATE_Payload+0x6e>
 8012a3e:	2b02      	cmp	r3, #2
 8012a40:	d1ea      	bne.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012a42:	68f1      	ldr	r1, [r6, #12]
 8012a44:	4638      	mov	r0, r7
 8012a46:	f002 fc89 	bl	801535c <ucdr_serialize_string>
 8012a4a:	4004      	ands	r4, r0
 8012a4c:	e7e4      	b.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012a4e:	7a31      	ldrb	r1, [r6, #8]
 8012a50:	4638      	mov	r0, r7
 8012a52:	f7fc fccd 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012a56:	4605      	mov	r5, r0
 8012a58:	b158      	cbz	r0, 8012a72 <uxr_serialize_CREATE_Payload+0x9e>
 8012a5a:	7a33      	ldrb	r3, [r6, #8]
 8012a5c:	2b02      	cmp	r3, #2
 8012a5e:	d034      	beq.n	8012aca <uxr_serialize_CREATE_Payload+0xf6>
 8012a60:	2b03      	cmp	r3, #3
 8012a62:	d106      	bne.n	8012a72 <uxr_serialize_CREATE_Payload+0x9e>
 8012a64:	68f2      	ldr	r2, [r6, #12]
 8012a66:	f106 0110 	add.w	r1, r6, #16
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	f002 fc4a 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 8012a70:	4605      	mov	r5, r0
 8012a72:	2202      	movs	r2, #2
 8012a74:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012a78:	4638      	mov	r0, r7
 8012a7a:	f002 fb4b 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012a7e:	4028      	ands	r0, r5
 8012a80:	4004      	ands	r4, r0
 8012a82:	e7c9      	b.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012a84:	f106 0108 	add.w	r1, r6, #8
 8012a88:	4638      	mov	r0, r7
 8012a8a:	f7ff faad 	bl	8011fe8 <uxr_serialize_CLIENT_Representation>
 8012a8e:	4004      	ands	r4, r0
 8012a90:	e7c2      	b.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012a92:	f106 0108 	add.w	r1, r6, #8
 8012a96:	4638      	mov	r0, r7
 8012a98:	f7ff fb62 	bl	8012160 <uxr_serialize_AGENT_Representation>
 8012a9c:	4004      	ands	r4, r0
 8012a9e:	e7bb      	b.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012aa0:	7a31      	ldrb	r1, [r6, #8]
 8012aa2:	4638      	mov	r0, r7
 8012aa4:	f7fc fca4 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	b130      	cbz	r0, 8012aba <uxr_serialize_CREATE_Payload+0xe6>
 8012aac:	7a33      	ldrb	r3, [r6, #8]
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d011      	beq.n	8012ad6 <uxr_serialize_CREATE_Payload+0x102>
 8012ab2:	2b03      	cmp	r3, #3
 8012ab4:	d015      	beq.n	8012ae2 <uxr_serialize_CREATE_Payload+0x10e>
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d00d      	beq.n	8012ad6 <uxr_serialize_CREATE_Payload+0x102>
 8012aba:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012abe:	4638      	mov	r0, r7
 8012ac0:	f7fd f9d2 	bl	800fe68 <ucdr_serialize_int16_t>
 8012ac4:	4028      	ands	r0, r5
 8012ac6:	4004      	ands	r4, r0
 8012ac8:	e7a6      	b.n	8012a18 <uxr_serialize_CREATE_Payload+0x44>
 8012aca:	68f1      	ldr	r1, [r6, #12]
 8012acc:	4638      	mov	r0, r7
 8012ace:	f002 fc45 	bl	801535c <ucdr_serialize_string>
 8012ad2:	4605      	mov	r5, r0
 8012ad4:	e7cd      	b.n	8012a72 <uxr_serialize_CREATE_Payload+0x9e>
 8012ad6:	68f1      	ldr	r1, [r6, #12]
 8012ad8:	4638      	mov	r0, r7
 8012ada:	f002 fc3f 	bl	801535c <ucdr_serialize_string>
 8012ade:	4605      	mov	r5, r0
 8012ae0:	e7eb      	b.n	8012aba <uxr_serialize_CREATE_Payload+0xe6>
 8012ae2:	68f2      	ldr	r2, [r6, #12]
 8012ae4:	f106 0110 	add.w	r1, r6, #16
 8012ae8:	4638      	mov	r0, r7
 8012aea:	f002 fc0b 	bl	8015304 <ucdr_serialize_sequence_uint8_t>
 8012aee:	4605      	mov	r5, r0
 8012af0:	e7e3      	b.n	8012aba <uxr_serialize_CREATE_Payload+0xe6>
 8012af2:	bf00      	nop

08012af4 <uxr_deserialize_GET_INFO_Payload>:
 8012af4:	b570      	push	{r4, r5, r6, lr}
 8012af6:	2202      	movs	r2, #2
 8012af8:	4605      	mov	r5, r0
 8012afa:	460e      	mov	r6, r1
 8012afc:	f002 fb6e 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012b00:	2202      	movs	r2, #2
 8012b02:	4604      	mov	r4, r0
 8012b04:	4628      	mov	r0, r5
 8012b06:	18b1      	adds	r1, r6, r2
 8012b08:	f002 fb68 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	1d31      	adds	r1, r6, #4
 8012b10:	4628      	mov	r0, r5
 8012b12:	401c      	ands	r4, r3
 8012b14:	f7fc ffb2 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012b18:	b2e4      	uxtb	r4, r4
 8012b1a:	4020      	ands	r0, r4
 8012b1c:	bd70      	pop	{r4, r5, r6, pc}
 8012b1e:	bf00      	nop

08012b20 <uxr_serialize_DELETE_Payload>:
 8012b20:	b570      	push	{r4, r5, r6, lr}
 8012b22:	2202      	movs	r2, #2
 8012b24:	4605      	mov	r5, r0
 8012b26:	460e      	mov	r6, r1
 8012b28:	f002 faf4 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012b2c:	2202      	movs	r2, #2
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4628      	mov	r0, r5
 8012b32:	18b1      	adds	r1, r6, r2
 8012b34:	f002 faee 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012b38:	4020      	ands	r0, r4
 8012b3a:	b2c0      	uxtb	r0, r0
 8012b3c:	bd70      	pop	{r4, r5, r6, pc}
 8012b3e:	bf00      	nop

08012b40 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b44:	460e      	mov	r6, r1
 8012b46:	4605      	mov	r5, r0
 8012b48:	f7fc fc68 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	1c71      	adds	r1, r6, #1
 8012b50:	4628      	mov	r0, r5
 8012b52:	f7fc fc63 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012b56:	2204      	movs	r2, #4
 8012b58:	4681      	mov	r9, r0
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	18b1      	adds	r1, r6, r2
 8012b5e:	f002 fb3d 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012b62:	f106 0108 	add.w	r1, r6, #8
 8012b66:	4680      	mov	r8, r0
 8012b68:	2202      	movs	r2, #2
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f002 fb36 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012b70:	ea04 0309 	and.w	r3, r4, r9
 8012b74:	4607      	mov	r7, r0
 8012b76:	2202      	movs	r2, #2
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	f106 010a 	add.w	r1, r6, #10
 8012b7e:	4628      	mov	r0, r5
 8012b80:	ea03 0408 	and.w	r4, r3, r8
 8012b84:	f002 fb2a 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	403c      	ands	r4, r7
 8012b8e:	f106 010c 	add.w	r1, r6, #12
 8012b92:	461d      	mov	r5, r3
 8012b94:	f7fc fc14 	bl	800f3c0 <ucdr_deserialize_bool>
 8012b98:	4025      	ands	r5, r4
 8012b9a:	4028      	ands	r0, r5
 8012b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012ba0 <uxr_deserialize_STATUS_Payload>:
 8012ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	460f      	mov	r7, r1
 8012baa:	f002 fb17 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012bae:	2202      	movs	r2, #2
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	18b9      	adds	r1, r7, r2
 8012bb6:	f002 fb11 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012bba:	4680      	mov	r8, r0
 8012bbc:	1d39      	adds	r1, r7, #4
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f7fc fc2c 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012bc4:	ea05 0508 	and.w	r5, r5, r8
 8012bc8:	4604      	mov	r4, r0
 8012bca:	1d79      	adds	r1, r7, #5
 8012bcc:	4630      	mov	r0, r6
 8012bce:	402c      	ands	r4, r5
 8012bd0:	f7fc fc24 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012bd4:	4020      	ands	r0, r4
 8012bd6:	b2c0      	uxtb	r0, r0
 8012bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012bdc <uxr_serialize_INFO_Payload>:
 8012bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be0:	2202      	movs	r2, #2
 8012be2:	460c      	mov	r4, r1
 8012be4:	4605      	mov	r5, r0
 8012be6:	f002 fa95 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012bea:	2202      	movs	r2, #2
 8012bec:	4680      	mov	r8, r0
 8012bee:	4628      	mov	r0, r5
 8012bf0:	18a1      	adds	r1, r4, r2
 8012bf2:	f002 fa8f 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	7921      	ldrb	r1, [r4, #4]
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f7fc fbf8 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012c00:	ea08 0807 	and.w	r8, r8, r7
 8012c04:	4606      	mov	r6, r0
 8012c06:	7961      	ldrb	r1, [r4, #5]
 8012c08:	4628      	mov	r0, r5
 8012c0a:	ea06 0608 	and.w	r6, r6, r8
 8012c0e:	f7fc fbef 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012c12:	7a21      	ldrb	r1, [r4, #8]
 8012c14:	4030      	ands	r0, r6
 8012c16:	b2c7      	uxtb	r7, r0
 8012c18:	4628      	mov	r0, r5
 8012c1a:	f7fc fbbb 	bl	800f394 <ucdr_serialize_bool>
 8012c1e:	7a23      	ldrb	r3, [r4, #8]
 8012c20:	4606      	mov	r6, r0
 8012c22:	b96b      	cbnz	r3, 8012c40 <uxr_serialize_INFO_Payload+0x64>
 8012c24:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f7fc fbb3 	bl	800f394 <ucdr_serialize_bool>
 8012c2e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012c32:	4030      	ands	r0, r6
 8012c34:	b2c6      	uxtb	r6, r0
 8012c36:	b983      	cbnz	r3, 8012c5a <uxr_serialize_INFO_Payload+0x7e>
 8012c38:	ea06 0007 	and.w	r0, r6, r7
 8012c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c40:	7b21      	ldrb	r1, [r4, #12]
 8012c42:	4628      	mov	r0, r5
 8012c44:	f7fc fbd4 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012c48:	b188      	cbz	r0, 8012c6e <uxr_serialize_INFO_Payload+0x92>
 8012c4a:	f104 010c 	add.w	r1, r4, #12
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f7ff faf8 	bl	8012244 <uxr_serialize_ObjectVariant.part.0>
 8012c54:	4030      	ands	r0, r6
 8012c56:	b2c6      	uxtb	r6, r0
 8012c58:	e7e4      	b.n	8012c24 <uxr_serialize_INFO_Payload+0x48>
 8012c5a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f7ff fdb8 	bl	80127d4 <uxr_serialize_ActivityInfoVariant>
 8012c64:	4006      	ands	r6, r0
 8012c66:	ea06 0007 	and.w	r0, r6, r7
 8012c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6e:	4606      	mov	r6, r0
 8012c70:	e7d8      	b.n	8012c24 <uxr_serialize_INFO_Payload+0x48>
 8012c72:	bf00      	nop

08012c74 <uxr_serialize_READ_DATA_Payload>:
 8012c74:	b570      	push	{r4, r5, r6, lr}
 8012c76:	2202      	movs	r2, #2
 8012c78:	4605      	mov	r5, r0
 8012c7a:	460e      	mov	r6, r1
 8012c7c:	f002 fa4a 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012c80:	2202      	movs	r2, #2
 8012c82:	4604      	mov	r4, r0
 8012c84:	4628      	mov	r0, r5
 8012c86:	18b1      	adds	r1, r6, r2
 8012c88:	f002 fa44 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	1d31      	adds	r1, r6, #4
 8012c90:	4628      	mov	r0, r5
 8012c92:	401c      	ands	r4, r3
 8012c94:	f7ff fe5e 	bl	8012954 <uxr_serialize_ReadSpecification>
 8012c98:	b2e4      	uxtb	r4, r4
 8012c9a:	4020      	ands	r0, r4
 8012c9c:	bd70      	pop	{r4, r5, r6, pc}
 8012c9e:	bf00      	nop

08012ca0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012ca0:	b570      	push	{r4, r5, r6, lr}
 8012ca2:	2202      	movs	r2, #2
 8012ca4:	4605      	mov	r5, r0
 8012ca6:	460e      	mov	r6, r1
 8012ca8:	f002 fa34 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012cac:	2202      	movs	r2, #2
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	18b1      	adds	r1, r6, r2
 8012cb4:	f002 fa2e 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012cb8:	4020      	ands	r0, r4
 8012cba:	b2c0      	uxtb	r0, r0
 8012cbc:	bd70      	pop	{r4, r5, r6, pc}
 8012cbe:	bf00      	nop

08012cc0 <uxr_serialize_ACKNACK_Payload>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	460c      	mov	r4, r1
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	460e      	mov	r6, r1
 8012cc8:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012ccc:	f7fc fbbc 	bl	800f448 <ucdr_serialize_uint16_t>
 8012cd0:	2202      	movs	r2, #2
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f002 fa1c 	bl	8015114 <ucdr_serialize_array_uint8_t>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	7931      	ldrb	r1, [r6, #4]
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	401c      	ands	r4, r3
 8012ce4:	f7fc fb84 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012ce8:	b2e4      	uxtb	r4, r4
 8012cea:	4020      	ands	r0, r4
 8012cec:	bd70      	pop	{r4, r5, r6, pc}
 8012cee:	bf00      	nop

08012cf0 <uxr_deserialize_ACKNACK_Payload>:
 8012cf0:	b570      	push	{r4, r5, r6, lr}
 8012cf2:	460e      	mov	r6, r1
 8012cf4:	4605      	mov	r5, r0
 8012cf6:	f7fc fca7 	bl	800f648 <ucdr_deserialize_uint16_t>
 8012cfa:	2202      	movs	r2, #2
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	4628      	mov	r0, r5
 8012d00:	18b1      	adds	r1, r6, r2
 8012d02:	f002 fa6b 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012d06:	4603      	mov	r3, r0
 8012d08:	1d31      	adds	r1, r6, #4
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	401c      	ands	r4, r3
 8012d0e:	f7fc fb85 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012d12:	b2e4      	uxtb	r4, r4
 8012d14:	4020      	ands	r0, r4
 8012d16:	bd70      	pop	{r4, r5, r6, pc}

08012d18 <uxr_serialize_HEARTBEAT_Payload>:
 8012d18:	b570      	push	{r4, r5, r6, lr}
 8012d1a:	460d      	mov	r5, r1
 8012d1c:	4606      	mov	r6, r0
 8012d1e:	8809      	ldrh	r1, [r1, #0]
 8012d20:	f7fc fb92 	bl	800f448 <ucdr_serialize_uint16_t>
 8012d24:	8869      	ldrh	r1, [r5, #2]
 8012d26:	4604      	mov	r4, r0
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f7fc fb8d 	bl	800f448 <ucdr_serialize_uint16_t>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	7929      	ldrb	r1, [r5, #4]
 8012d32:	4630      	mov	r0, r6
 8012d34:	401c      	ands	r4, r3
 8012d36:	f7fc fb5b 	bl	800f3f0 <ucdr_serialize_uint8_t>
 8012d3a:	b2e4      	uxtb	r4, r4
 8012d3c:	4020      	ands	r0, r4
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}

08012d40 <uxr_deserialize_HEARTBEAT_Payload>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	460e      	mov	r6, r1
 8012d44:	4605      	mov	r5, r0
 8012d46:	f7fc fc7f 	bl	800f648 <ucdr_deserialize_uint16_t>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	1cb1      	adds	r1, r6, #2
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f7fc fc7a 	bl	800f648 <ucdr_deserialize_uint16_t>
 8012d54:	4603      	mov	r3, r0
 8012d56:	1d31      	adds	r1, r6, #4
 8012d58:	4628      	mov	r0, r5
 8012d5a:	401c      	ands	r4, r3
 8012d5c:	f7fc fb5e 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012d60:	b2e4      	uxtb	r4, r4
 8012d62:	4020      	ands	r0, r4
 8012d64:	bd70      	pop	{r4, r5, r6, pc}
 8012d66:	bf00      	nop

08012d68 <uxr_serialize_TIMESTAMP_Payload>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	460d      	mov	r5, r1
 8012d6c:	4606      	mov	r6, r0
 8012d6e:	6809      	ldr	r1, [r1, #0]
 8012d70:	f7fd f96e 	bl	8010050 <ucdr_serialize_int32_t>
 8012d74:	4604      	mov	r4, r0
 8012d76:	6869      	ldr	r1, [r5, #4]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7fc fd4f 	bl	800f81c <ucdr_serialize_uint32_t>
 8012d7e:	4020      	ands	r0, r4
 8012d80:	b2c0      	uxtb	r0, r0
 8012d82:	bd70      	pop	{r4, r5, r6, pc}

08012d84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d88:	460e      	mov	r6, r1
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	f7fd f9f8 	bl	8010180 <ucdr_deserialize_int32_t>
 8012d90:	4607      	mov	r7, r0
 8012d92:	1d31      	adds	r1, r6, #4
 8012d94:	4628      	mov	r0, r5
 8012d96:	f7fc fe71 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012d9a:	4680      	mov	r8, r0
 8012d9c:	f106 0108 	add.w	r1, r6, #8
 8012da0:	4628      	mov	r0, r5
 8012da2:	f7fd f9ed 	bl	8010180 <ucdr_deserialize_int32_t>
 8012da6:	ea07 0708 	and.w	r7, r7, r8
 8012daa:	4604      	mov	r4, r0
 8012dac:	f106 010c 	add.w	r1, r6, #12
 8012db0:	4628      	mov	r0, r5
 8012db2:	403c      	ands	r4, r7
 8012db4:	f7fc fe62 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012db8:	f106 0110 	add.w	r1, r6, #16
 8012dbc:	4004      	ands	r4, r0
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f7fd f9de 	bl	8010180 <ucdr_deserialize_int32_t>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	b2e4      	uxtb	r4, r4
 8012dc8:	4628      	mov	r0, r5
 8012dca:	461d      	mov	r5, r3
 8012dcc:	f106 0114 	add.w	r1, r6, #20
 8012dd0:	f7fc fe54 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012dd4:	402c      	ands	r4, r5
 8012dd6:	4020      	ands	r0, r4
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ddc <uxr_deserialize_SampleIdentity>:
 8012ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de0:	4604      	mov	r4, r0
 8012de2:	460d      	mov	r5, r1
 8012de4:	220c      	movs	r2, #12
 8012de6:	f002 f9f9 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012dea:	2203      	movs	r2, #3
 8012dec:	f105 010c 	add.w	r1, r5, #12
 8012df0:	4607      	mov	r7, r0
 8012df2:	4620      	mov	r0, r4
 8012df4:	f002 f9f2 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8012df8:	f105 010f 	add.w	r1, r5, #15
 8012dfc:	4680      	mov	r8, r0
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f7fc fb0c 	bl	800f41c <ucdr_deserialize_uint8_t>
 8012e04:	f105 0110 	add.w	r1, r5, #16
 8012e08:	4606      	mov	r6, r0
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7fd f9b8 	bl	8010180 <ucdr_deserialize_int32_t>
 8012e10:	ea07 0708 	and.w	r7, r7, r8
 8012e14:	4603      	mov	r3, r0
 8012e16:	4620      	mov	r0, r4
 8012e18:	403e      	ands	r6, r7
 8012e1a:	f105 0114 	add.w	r1, r5, #20
 8012e1e:	461c      	mov	r4, r3
 8012e20:	f7fc fe2c 	bl	800fa7c <ucdr_deserialize_uint32_t>
 8012e24:	4034      	ands	r4, r6
 8012e26:	4020      	ands	r0, r4
 8012e28:	b2c0      	uxtb	r0, r0
 8012e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e2e:	bf00      	nop

08012e30 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012e30:	280b      	cmp	r0, #11
 8012e32:	dc0d      	bgt.n	8012e50 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	db09      	blt.n	8012e4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012e38:	280b      	cmp	r0, #11
 8012e3a:	d807      	bhi.n	8012e4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012e3c:	e8df f000 	tbb	[pc, r0]
 8012e40:	07060607 	.word	0x07060607
 8012e44:	06060606 	.word	0x06060606
 8012e48:	07070606 	.word	0x07070606
 8012e4c:	2001      	movs	r0, #1
 8012e4e:	4770      	bx	lr
 8012e50:	28cb      	cmp	r0, #203	@ 0xcb
 8012e52:	bf18      	it	ne
 8012e54:	2001      	movne	r0, #1
 8012e56:	4770      	bx	lr

08012e58 <rcl_get_zero_initialized_context>:
 8012e58:	4a03      	ldr	r2, [pc, #12]	@ (8012e68 <rcl_get_zero_initialized_context+0x10>)
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e60:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e64:	4618      	mov	r0, r3
 8012e66:	4770      	bx	lr
 8012e68:	08018e1c 	.word	0x08018e1c

08012e6c <rcl_context_is_valid>:
 8012e6c:	b118      	cbz	r0, 8012e76 <rcl_context_is_valid+0xa>
 8012e6e:	6840      	ldr	r0, [r0, #4]
 8012e70:	3800      	subs	r0, #0
 8012e72:	bf18      	it	ne
 8012e74:	2001      	movne	r0, #1
 8012e76:	4770      	bx	lr

08012e78 <__cleanup_context>:
 8012e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	2300      	movs	r3, #0
 8012e80:	6800      	ldr	r0, [r0, #0]
 8012e82:	6073      	str	r3, [r6, #4]
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d049      	beq.n	8012f1c <__cleanup_context+0xa4>
 8012e88:	6947      	ldr	r7, [r0, #20]
 8012e8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012e8e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012e92:	b137      	cbz	r7, 8012ea2 <__cleanup_context+0x2a>
 8012e94:	3014      	adds	r0, #20
 8012e96:	f000 f9bd 	bl	8013214 <rcl_init_options_fini>
 8012e9a:	4607      	mov	r7, r0
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d144      	bne.n	8012f2a <__cleanup_context+0xb2>
 8012ea0:	6830      	ldr	r0, [r6, #0]
 8012ea2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ea4:	b143      	cbz	r3, 8012eb8 <__cleanup_context+0x40>
 8012ea6:	3028      	adds	r0, #40	@ 0x28
 8012ea8:	f001 fe22 	bl	8014af0 <rmw_context_fini>
 8012eac:	b118      	cbz	r0, 8012eb6 <__cleanup_context+0x3e>
 8012eae:	2f00      	cmp	r7, #0
 8012eb0:	d03e      	beq.n	8012f30 <__cleanup_context+0xb8>
 8012eb2:	f7fb fd41 	bl	800e938 <rcutils_reset_error>
 8012eb6:	6830      	ldr	r0, [r6, #0]
 8012eb8:	6a03      	ldr	r3, [r0, #32]
 8012eba:	b1db      	cbz	r3, 8012ef4 <__cleanup_context+0x7c>
 8012ebc:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012ec0:	2a01      	cmp	r2, #1
 8012ec2:	f17c 0100 	sbcs.w	r1, ip, #0
 8012ec6:	db11      	blt.n	8012eec <__cleanup_context+0x74>
 8012ec8:	2400      	movs	r4, #0
 8012eca:	4625      	mov	r5, r4
 8012ecc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012ed0:	4649      	mov	r1, r9
 8012ed2:	b1b8      	cbz	r0, 8012f04 <__cleanup_context+0x8c>
 8012ed4:	47c0      	blx	r8
 8012ed6:	6833      	ldr	r3, [r6, #0]
 8012ed8:	3401      	adds	r4, #1
 8012eda:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012ede:	f145 0500 	adc.w	r5, r5, #0
 8012ee2:	6a1b      	ldr	r3, [r3, #32]
 8012ee4:	4294      	cmp	r4, r2
 8012ee6:	eb75 010c 	sbcs.w	r1, r5, ip
 8012eea:	dbef      	blt.n	8012ecc <__cleanup_context+0x54>
 8012eec:	4618      	mov	r0, r3
 8012eee:	4649      	mov	r1, r9
 8012ef0:	47c0      	blx	r8
 8012ef2:	6830      	ldr	r0, [r6, #0]
 8012ef4:	4649      	mov	r1, r9
 8012ef6:	47c0      	blx	r8
 8012ef8:	2300      	movs	r3, #0
 8012efa:	4638      	mov	r0, r7
 8012efc:	e9c6 3300 	strd	r3, r3, [r6]
 8012f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f04:	3401      	adds	r4, #1
 8012f06:	f145 0500 	adc.w	r5, r5, #0
 8012f0a:	4294      	cmp	r4, r2
 8012f0c:	eb75 010c 	sbcs.w	r1, r5, ip
 8012f10:	dbdc      	blt.n	8012ecc <__cleanup_context+0x54>
 8012f12:	4618      	mov	r0, r3
 8012f14:	4649      	mov	r1, r9
 8012f16:	47c0      	blx	r8
 8012f18:	6830      	ldr	r0, [r6, #0]
 8012f1a:	e7eb      	b.n	8012ef4 <__cleanup_context+0x7c>
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	2300      	movs	r3, #0
 8012f20:	4638      	mov	r0, r7
 8012f22:	e9c6 3300 	strd	r3, r3, [r6]
 8012f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2a:	f7fb fd05 	bl	800e938 <rcutils_reset_error>
 8012f2e:	e7b7      	b.n	8012ea0 <__cleanup_context+0x28>
 8012f30:	f7ff ff7e 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8012f34:	4607      	mov	r7, r0
 8012f36:	e7bc      	b.n	8012eb2 <__cleanup_context+0x3a>

08012f38 <rcl_init>:
 8012f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f3c:	1e05      	subs	r5, r0, #0
 8012f3e:	b09e      	sub	sp, #120	@ 0x78
 8012f40:	460e      	mov	r6, r1
 8012f42:	4690      	mov	r8, r2
 8012f44:	461f      	mov	r7, r3
 8012f46:	f340 809f 	ble.w	8013088 <rcl_init+0x150>
 8012f4a:	2900      	cmp	r1, #0
 8012f4c:	f000 809f 	beq.w	801308e <rcl_init+0x156>
 8012f50:	f1a1 0e04 	sub.w	lr, r1, #4
 8012f54:	f04f 0c00 	mov.w	ip, #0
 8012f58:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012f5c:	f10c 0c01 	add.w	ip, ip, #1
 8012f60:	2c00      	cmp	r4, #0
 8012f62:	f000 8094 	beq.w	801308e <rcl_init+0x156>
 8012f66:	4565      	cmp	r5, ip
 8012f68:	d1f6      	bne.n	8012f58 <rcl_init+0x20>
 8012f6a:	f1b8 0f00 	cmp.w	r8, #0
 8012f6e:	f000 808e 	beq.w	801308e <rcl_init+0x156>
 8012f72:	f8d8 4000 	ldr.w	r4, [r8]
 8012f76:	2c00      	cmp	r4, #0
 8012f78:	f000 8089 	beq.w	801308e <rcl_init+0x156>
 8012f7c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f86:	6823      	ldr	r3, [r4, #0]
 8012f88:	a819      	add	r0, sp, #100	@ 0x64
 8012f8a:	f8cc 3000 	str.w	r3, [ip]
 8012f8e:	f7fb fcaf 	bl	800e8f0 <rcutils_allocator_is_valid>
 8012f92:	f080 0001 	eor.w	r0, r0, #1
 8012f96:	b2c0      	uxtb	r0, r0
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	d178      	bne.n	801308e <rcl_init+0x156>
 8012f9c:	2f00      	cmp	r7, #0
 8012f9e:	d076      	beq.n	801308e <rcl_init+0x156>
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d178      	bne.n	8013098 <rcl_init+0x160>
 8012fa6:	2178      	movs	r1, #120	@ 0x78
 8012fa8:	2001      	movs	r0, #1
 8012faa:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012fae:	4798      	blx	r3
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	6038      	str	r0, [r7, #0]
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	f000 80b6 	beq.w	8013126 <rcl_init+0x1ee>
 8012fba:	a802      	add	r0, sp, #8
 8012fbc:	f001 f9c4 	bl	8014348 <rmw_get_zero_initialized_context>
 8012fc0:	a902      	add	r1, sp, #8
 8012fc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012fc6:	2250      	movs	r2, #80	@ 0x50
 8012fc8:	f004 fea5 	bl	8017d16 <memcpy>
 8012fcc:	ac19      	add	r4, sp, #100	@ 0x64
 8012fce:	f8d7 e000 	ldr.w	lr, [r7]
 8012fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fd4:	46f4      	mov	ip, lr
 8012fd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	f10e 0114 	add.w	r1, lr, #20
 8012fe0:	4640      	mov	r0, r8
 8012fe2:	f8cc 3000 	str.w	r3, [ip]
 8012fe6:	f000 f93f 	bl	8013268 <rcl_init_options_copy>
 8012fea:	4604      	mov	r4, r0
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d144      	bne.n	801307a <rcl_init+0x142>
 8012ff0:	f8d7 9000 	ldr.w	r9, [r7]
 8012ff4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012ff8:	f8c9 0020 	str.w	r0, [r9, #32]
 8012ffc:	f8c9 5018 	str.w	r5, [r9, #24]
 8013000:	f8c9 801c 	str.w	r8, [r9, #28]
 8013004:	2d00      	cmp	r5, #0
 8013006:	d04e      	beq.n	80130a6 <rcl_init+0x16e>
 8013008:	2e00      	cmp	r6, #0
 801300a:	d04c      	beq.n	80130a6 <rcl_init+0x16e>
 801300c:	2104      	movs	r1, #4
 801300e:	4628      	mov	r0, r5
 8013010:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013014:	4798      	blx	r3
 8013016:	f8c9 0020 	str.w	r0, [r9, #32]
 801301a:	f8d7 9000 	ldr.w	r9, [r7]
 801301e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013022:	46ca      	mov	sl, r9
 8013024:	b343      	cbz	r3, 8013078 <rcl_init+0x140>
 8013026:	2d01      	cmp	r5, #1
 8013028:	f178 0300 	sbcs.w	r3, r8, #0
 801302c:	db3b      	blt.n	80130a6 <rcl_init+0x16e>
 801302e:	2400      	movs	r4, #0
 8013030:	3e04      	subs	r6, #4
 8013032:	46a1      	mov	r9, r4
 8013034:	e00b      	b.n	801304e <rcl_init+0x116>
 8013036:	6831      	ldr	r1, [r6, #0]
 8013038:	f004 fe6d 	bl	8017d16 <memcpy>
 801303c:	3401      	adds	r4, #1
 801303e:	f149 0900 	adc.w	r9, r9, #0
 8013042:	45c8      	cmp	r8, r9
 8013044:	bf08      	it	eq
 8013046:	42a5      	cmpeq	r5, r4
 8013048:	d02b      	beq.n	80130a2 <rcl_init+0x16a>
 801304a:	f8d7 a000 	ldr.w	sl, [r7]
 801304e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013052:	f7ed f94f 	bl	80002f4 <strlen>
 8013056:	1c42      	adds	r2, r0, #1
 8013058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801305a:	4610      	mov	r0, r2
 801305c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801305e:	f8da a020 	ldr.w	sl, [sl, #32]
 8013062:	9201      	str	r2, [sp, #4]
 8013064:	4798      	blx	r3
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801306c:	6a1b      	ldr	r3, [r3, #32]
 801306e:	9a01      	ldr	r2, [sp, #4]
 8013070:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013074:	2800      	cmp	r0, #0
 8013076:	d1de      	bne.n	8013036 <rcl_init+0xfe>
 8013078:	240a      	movs	r4, #10
 801307a:	4638      	mov	r0, r7
 801307c:	f7ff fefc 	bl	8012e78 <__cleanup_context>
 8013080:	4620      	mov	r0, r4
 8013082:	b01e      	add	sp, #120	@ 0x78
 8013084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013088:	2900      	cmp	r1, #0
 801308a:	f43f af6e 	beq.w	8012f6a <rcl_init+0x32>
 801308e:	240b      	movs	r4, #11
 8013090:	4620      	mov	r0, r4
 8013092:	b01e      	add	sp, #120	@ 0x78
 8013094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013098:	2464      	movs	r4, #100	@ 0x64
 801309a:	4620      	mov	r0, r4
 801309c:	b01e      	add	sp, #120	@ 0x78
 801309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a2:	f8d7 9000 	ldr.w	r9, [r7]
 80130a6:	4926      	ldr	r1, [pc, #152]	@ (8013140 <rcl_init+0x208>)
 80130a8:	680b      	ldr	r3, [r1, #0]
 80130aa:	3301      	adds	r3, #1
 80130ac:	d036      	beq.n	801311c <rcl_init+0x1e4>
 80130ae:	461a      	mov	r2, r3
 80130b0:	2400      	movs	r4, #0
 80130b2:	600b      	str	r3, [r1, #0]
 80130b4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80130b8:	607b      	str	r3, [r7, #4]
 80130ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80130bc:	3301      	adds	r3, #1
 80130be:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80130c2:	d034      	beq.n	801312e <rcl_init+0x1f6>
 80130c4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80130c8:	b93b      	cbnz	r3, 80130da <rcl_init+0x1a2>
 80130ca:	3030      	adds	r0, #48	@ 0x30
 80130cc:	f000 f93a 	bl	8013344 <rcl_get_localhost_only>
 80130d0:	4604      	mov	r4, r0
 80130d2:	2800      	cmp	r0, #0
 80130d4:	d1d1      	bne.n	801307a <rcl_init+0x142>
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	6958      	ldr	r0, [r3, #20]
 80130da:	aa18      	add	r2, sp, #96	@ 0x60
 80130dc:	a917      	add	r1, sp, #92	@ 0x5c
 80130de:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80130e0:	f000 fdce 	bl	8013c80 <rcl_validate_enclave_name>
 80130e4:	4604      	mov	r4, r0
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d1c7      	bne.n	801307a <rcl_init+0x142>
 80130ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80130ec:	b9eb      	cbnz	r3, 801312a <rcl_init+0x1f2>
 80130ee:	6839      	ldr	r1, [r7, #0]
 80130f0:	694b      	ldr	r3, [r1, #20]
 80130f2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80130f6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80130f8:	f000 fc72 	bl	80139e0 <rcl_get_security_options_from_environment>
 80130fc:	4604      	mov	r4, r0
 80130fe:	2800      	cmp	r0, #0
 8013100:	d1bb      	bne.n	801307a <rcl_init+0x142>
 8013102:	6839      	ldr	r1, [r7, #0]
 8013104:	6948      	ldr	r0, [r1, #20]
 8013106:	3128      	adds	r1, #40	@ 0x28
 8013108:	3018      	adds	r0, #24
 801310a:	f001 fbbb 	bl	8014884 <rmw_init>
 801310e:	4604      	mov	r4, r0
 8013110:	2800      	cmp	r0, #0
 8013112:	d0bd      	beq.n	8013090 <rcl_init+0x158>
 8013114:	f7ff fe8c 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8013118:	4604      	mov	r4, r0
 801311a:	e7ae      	b.n	801307a <rcl_init+0x142>
 801311c:	2201      	movs	r2, #1
 801311e:	461c      	mov	r4, r3
 8013120:	600a      	str	r2, [r1, #0]
 8013122:	4613      	mov	r3, r2
 8013124:	e7c6      	b.n	80130b4 <rcl_init+0x17c>
 8013126:	240a      	movs	r4, #10
 8013128:	e7b2      	b.n	8013090 <rcl_init+0x158>
 801312a:	2401      	movs	r4, #1
 801312c:	e7a5      	b.n	801307a <rcl_init+0x142>
 801312e:	3024      	adds	r0, #36	@ 0x24
 8013130:	f003 fcc8 	bl	8016ac4 <rcl_get_default_domain_id>
 8013134:	4604      	mov	r4, r0
 8013136:	2800      	cmp	r0, #0
 8013138:	d19f      	bne.n	801307a <rcl_init+0x142>
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	6958      	ldr	r0, [r3, #20]
 801313e:	e7c1      	b.n	80130c4 <rcl_init+0x18c>
 8013140:	2406842c 	.word	0x2406842c

08013144 <rcl_get_zero_initialized_init_options>:
 8013144:	2000      	movs	r0, #0
 8013146:	4770      	bx	lr

08013148 <rcl_init_options_init>:
 8013148:	b084      	sub	sp, #16
 801314a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801314c:	b097      	sub	sp, #92	@ 0x5c
 801314e:	ae1d      	add	r6, sp, #116	@ 0x74
 8013150:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013154:	2800      	cmp	r0, #0
 8013156:	d058      	beq.n	801320a <rcl_init_options_init+0xc2>
 8013158:	6803      	ldr	r3, [r0, #0]
 801315a:	4605      	mov	r5, r0
 801315c:	b133      	cbz	r3, 801316c <rcl_init_options_init+0x24>
 801315e:	2464      	movs	r4, #100	@ 0x64
 8013160:	4620      	mov	r0, r4
 8013162:	b017      	add	sp, #92	@ 0x5c
 8013164:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013168:	b004      	add	sp, #16
 801316a:	4770      	bx	lr
 801316c:	4630      	mov	r0, r6
 801316e:	f7fb fbbf 	bl	800e8f0 <rcutils_allocator_is_valid>
 8013172:	2800      	cmp	r0, #0
 8013174:	d049      	beq.n	801320a <rcl_init_options_init+0xc2>
 8013176:	46b4      	mov	ip, r6
 8013178:	ac11      	add	r4, sp, #68	@ 0x44
 801317a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801317e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013180:	f8dc 3000 	ldr.w	r3, [ip]
 8013184:	2050      	movs	r0, #80	@ 0x50
 8013186:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013188:	6023      	str	r3, [r4, #0]
 801318a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801318c:	4798      	blx	r3
 801318e:	4604      	mov	r4, r0
 8013190:	6028      	str	r0, [r5, #0]
 8013192:	2800      	cmp	r0, #0
 8013194:	d03b      	beq.n	801320e <rcl_init_options_init+0xc6>
 8013196:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801319a:	4686      	mov	lr, r0
 801319c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80131a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80131a4:	f8dc 3000 	ldr.w	r3, [ip]
 80131a8:	a802      	add	r0, sp, #8
 80131aa:	f8ce 3000 	str.w	r3, [lr]
 80131ae:	f001 f8df 	bl	8014370 <rmw_get_zero_initialized_init_options>
 80131b2:	f10d 0e08 	add.w	lr, sp, #8
 80131b6:	f104 0c18 	add.w	ip, r4, #24
 80131ba:	682f      	ldr	r7, [r5, #0]
 80131bc:	ac20      	add	r4, sp, #128	@ 0x80
 80131be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131d6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80131da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80131de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80131e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80131e6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80131ea:	f107 0018 	add.w	r0, r7, #24
 80131ee:	f001 fa4b 	bl	8014688 <rmw_init_options_init>
 80131f2:	4604      	mov	r4, r0
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d0b3      	beq.n	8013160 <rcl_init_options_init+0x18>
 80131f8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80131fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80131fc:	6828      	ldr	r0, [r5, #0]
 80131fe:	4798      	blx	r3
 8013200:	4620      	mov	r0, r4
 8013202:	f7ff fe15 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8013206:	4604      	mov	r4, r0
 8013208:	e7aa      	b.n	8013160 <rcl_init_options_init+0x18>
 801320a:	240b      	movs	r4, #11
 801320c:	e7a8      	b.n	8013160 <rcl_init_options_init+0x18>
 801320e:	240a      	movs	r4, #10
 8013210:	e7a6      	b.n	8013160 <rcl_init_options_init+0x18>
 8013212:	bf00      	nop

08013214 <rcl_init_options_fini>:
 8013214:	b530      	push	{r4, r5, lr}
 8013216:	b087      	sub	sp, #28
 8013218:	b1f0      	cbz	r0, 8013258 <rcl_init_options_fini+0x44>
 801321a:	6803      	ldr	r3, [r0, #0]
 801321c:	4604      	mov	r4, r0
 801321e:	b1db      	cbz	r3, 8013258 <rcl_init_options_fini+0x44>
 8013220:	469c      	mov	ip, r3
 8013222:	f10d 0e04 	add.w	lr, sp, #4
 8013226:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801322a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801322e:	f8dc 3000 	ldr.w	r3, [ip]
 8013232:	a801      	add	r0, sp, #4
 8013234:	f8ce 3000 	str.w	r3, [lr]
 8013238:	f7fb fb5a 	bl	800e8f0 <rcutils_allocator_is_valid>
 801323c:	b160      	cbz	r0, 8013258 <rcl_init_options_fini+0x44>
 801323e:	6820      	ldr	r0, [r4, #0]
 8013240:	3018      	adds	r0, #24
 8013242:	f001 fadb 	bl	80147fc <rmw_init_options_fini>
 8013246:	4605      	mov	r5, r0
 8013248:	b950      	cbnz	r0, 8013260 <rcl_init_options_fini+0x4c>
 801324a:	6820      	ldr	r0, [r4, #0]
 801324c:	9b02      	ldr	r3, [sp, #8]
 801324e:	9905      	ldr	r1, [sp, #20]
 8013250:	4798      	blx	r3
 8013252:	4628      	mov	r0, r5
 8013254:	b007      	add	sp, #28
 8013256:	bd30      	pop	{r4, r5, pc}
 8013258:	250b      	movs	r5, #11
 801325a:	4628      	mov	r0, r5
 801325c:	b007      	add	sp, #28
 801325e:	bd30      	pop	{r4, r5, pc}
 8013260:	f7ff fde6 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8013264:	4605      	mov	r5, r0
 8013266:	e7f8      	b.n	801325a <rcl_init_options_fini+0x46>

08013268 <rcl_init_options_copy>:
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	b094      	sub	sp, #80	@ 0x50
 801326e:	2800      	cmp	r0, #0
 8013270:	d05b      	beq.n	801332a <rcl_init_options_copy+0xc2>
 8013272:	4604      	mov	r4, r0
 8013274:	6800      	ldr	r0, [r0, #0]
 8013276:	2800      	cmp	r0, #0
 8013278:	d057      	beq.n	801332a <rcl_init_options_copy+0xc2>
 801327a:	460e      	mov	r6, r1
 801327c:	f7fb fb38 	bl	800e8f0 <rcutils_allocator_is_valid>
 8013280:	2e00      	cmp	r6, #0
 8013282:	d052      	beq.n	801332a <rcl_init_options_copy+0xc2>
 8013284:	f080 0001 	eor.w	r0, r0, #1
 8013288:	b2c0      	uxtb	r0, r0
 801328a:	2800      	cmp	r0, #0
 801328c:	d14d      	bne.n	801332a <rcl_init_options_copy+0xc2>
 801328e:	6833      	ldr	r3, [r6, #0]
 8013290:	b123      	cbz	r3, 801329c <rcl_init_options_copy+0x34>
 8013292:	2464      	movs	r4, #100	@ 0x64
 8013294:	4620      	mov	r0, r4
 8013296:	b014      	add	sp, #80	@ 0x50
 8013298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801329c:	6827      	ldr	r7, [r4, #0]
 801329e:	ad0f      	add	r5, sp, #60	@ 0x3c
 80132a0:	46bc      	mov	ip, r7
 80132a2:	f8d7 8000 	ldr.w	r8, [r7]
 80132a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132ac:	f8dc 3000 	ldr.w	r3, [ip]
 80132b0:	2050      	movs	r0, #80	@ 0x50
 80132b2:	4619      	mov	r1, r3
 80132b4:	602b      	str	r3, [r5, #0]
 80132b6:	47c0      	blx	r8
 80132b8:	4605      	mov	r5, r0
 80132ba:	6030      	str	r0, [r6, #0]
 80132bc:	b3d0      	cbz	r0, 8013334 <rcl_init_options_copy+0xcc>
 80132be:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80132c2:	4686      	mov	lr, r0
 80132c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80132cc:	f8dc 3000 	ldr.w	r3, [ip]
 80132d0:	4668      	mov	r0, sp
 80132d2:	f8ce 3000 	str.w	r3, [lr]
 80132d6:	f001 f84b 	bl	8014370 <rmw_get_zero_initialized_init_options>
 80132da:	46ee      	mov	lr, sp
 80132dc:	f105 0c18 	add.w	ip, r5, #24
 80132e0:	6824      	ldr	r4, [r4, #0]
 80132e2:	6835      	ldr	r5, [r6, #0]
 80132e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013300:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013304:	f104 0018 	add.w	r0, r4, #24
 8013308:	f105 0118 	add.w	r1, r5, #24
 801330c:	f001 fa24 	bl	8014758 <rmw_init_options_copy>
 8013310:	4604      	mov	r4, r0
 8013312:	2800      	cmp	r0, #0
 8013314:	d0be      	beq.n	8013294 <rcl_init_options_copy+0x2c>
 8013316:	f7fb faf9 	bl	800e90c <rcutils_get_error_string>
 801331a:	f7fb fb0d 	bl	800e938 <rcutils_reset_error>
 801331e:	4630      	mov	r0, r6
 8013320:	f7ff ff78 	bl	8013214 <rcl_init_options_fini>
 8013324:	b140      	cbz	r0, 8013338 <rcl_init_options_copy+0xd0>
 8013326:	4604      	mov	r4, r0
 8013328:	e7b4      	b.n	8013294 <rcl_init_options_copy+0x2c>
 801332a:	240b      	movs	r4, #11
 801332c:	4620      	mov	r0, r4
 801332e:	b014      	add	sp, #80	@ 0x50
 8013330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013334:	240a      	movs	r4, #10
 8013336:	e7ad      	b.n	8013294 <rcl_init_options_copy+0x2c>
 8013338:	4620      	mov	r0, r4
 801333a:	b014      	add	sp, #80	@ 0x50
 801333c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013340:	f7ff bd76 	b.w	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>

08013344 <rcl_get_localhost_only>:
 8013344:	b510      	push	{r4, lr}
 8013346:	2300      	movs	r3, #0
 8013348:	b082      	sub	sp, #8
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	b1b8      	cbz	r0, 801337e <rcl_get_localhost_only+0x3a>
 801334e:	4604      	mov	r4, r0
 8013350:	a901      	add	r1, sp, #4
 8013352:	480c      	ldr	r0, [pc, #48]	@ (8013384 <rcl_get_localhost_only+0x40>)
 8013354:	f000 fcdc 	bl	8013d10 <rcutils_get_env>
 8013358:	b110      	cbz	r0, 8013360 <rcl_get_localhost_only+0x1c>
 801335a:	2001      	movs	r0, #1
 801335c:	b002      	add	sp, #8
 801335e:	bd10      	pop	{r4, pc}
 8013360:	9b01      	ldr	r3, [sp, #4]
 8013362:	b113      	cbz	r3, 801336a <rcl_get_localhost_only+0x26>
 8013364:	781a      	ldrb	r2, [r3, #0]
 8013366:	2a31      	cmp	r2, #49	@ 0x31
 8013368:	d004      	beq.n	8013374 <rcl_get_localhost_only+0x30>
 801336a:	2302      	movs	r3, #2
 801336c:	2000      	movs	r0, #0
 801336e:	7023      	strb	r3, [r4, #0]
 8013370:	b002      	add	sp, #8
 8013372:	bd10      	pop	{r4, pc}
 8013374:	785b      	ldrb	r3, [r3, #1]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d1f7      	bne.n	801336a <rcl_get_localhost_only+0x26>
 801337a:	2301      	movs	r3, #1
 801337c:	e7f6      	b.n	801336c <rcl_get_localhost_only+0x28>
 801337e:	200b      	movs	r0, #11
 8013380:	b002      	add	sp, #8
 8013382:	bd10      	pop	{r4, pc}
 8013384:	08018e24 	.word	0x08018e24

08013388 <rcl_get_zero_initialized_node>:
 8013388:	4a03      	ldr	r2, [pc, #12]	@ (8013398 <rcl_get_zero_initialized_node+0x10>)
 801338a:	4603      	mov	r3, r0
 801338c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013390:	e883 0003 	stmia.w	r3, {r0, r1}
 8013394:	4618      	mov	r0, r3
 8013396:	4770      	bx	lr
 8013398:	08018e4c 	.word	0x08018e4c

0801339c <rcl_node_init>:
 801339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a0:	b0a9      	sub	sp, #164	@ 0xa4
 80133a2:	4604      	mov	r4, r0
 80133a4:	460e      	mov	r6, r1
 80133a6:	4615      	mov	r5, r2
 80133a8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80133ac:	a823      	add	r0, sp, #140	@ 0x8c
 80133ae:	461f      	mov	r7, r3
 80133b0:	f003 fdae 	bl	8016f10 <rcl_guard_condition_get_default_options>
 80133b4:	f1b8 0f00 	cmp.w	r8, #0
 80133b8:	f000 80f3 	beq.w	80135a2 <rcl_node_init+0x206>
 80133bc:	4640      	mov	r0, r8
 80133be:	f7fb fa97 	bl	800e8f0 <rcutils_allocator_is_valid>
 80133c2:	2d00      	cmp	r5, #0
 80133c4:	bf18      	it	ne
 80133c6:	2c00      	cmpne	r4, #0
 80133c8:	f080 0001 	eor.w	r0, r0, #1
 80133cc:	bf0c      	ite	eq
 80133ce:	f04f 0c01 	moveq.w	ip, #1
 80133d2:	f04f 0c00 	movne.w	ip, #0
 80133d6:	2e00      	cmp	r6, #0
 80133d8:	bf08      	it	eq
 80133da:	f04c 0c01 	orreq.w	ip, ip, #1
 80133de:	ea4c 0c00 	orr.w	ip, ip, r0
 80133e2:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80133e6:	f040 80dc 	bne.w	80135a2 <rcl_node_init+0x206>
 80133ea:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80133ee:	f1ba 0f00 	cmp.w	sl, #0
 80133f2:	f040 80fc 	bne.w	80135ee <rcl_node_init+0x252>
 80133f6:	2f00      	cmp	r7, #0
 80133f8:	f000 80d3 	beq.w	80135a2 <rcl_node_init+0x206>
 80133fc:	4638      	mov	r0, r7
 80133fe:	f7ff fd35 	bl	8012e6c <rcl_context_is_valid>
 8013402:	4683      	mov	fp, r0
 8013404:	2800      	cmp	r0, #0
 8013406:	f000 80d2 	beq.w	80135ae <rcl_node_init+0x212>
 801340a:	4652      	mov	r2, sl
 801340c:	4630      	mov	r0, r6
 801340e:	a922      	add	r1, sp, #136	@ 0x88
 8013410:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8013414:	f001 f8ae 	bl	8014574 <rmw_validate_node_name>
 8013418:	4682      	mov	sl, r0
 801341a:	2800      	cmp	r0, #0
 801341c:	f040 80c3 	bne.w	80135a6 <rcl_node_init+0x20a>
 8013420:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013422:	2800      	cmp	r0, #0
 8013424:	f040 80f1 	bne.w	801360a <rcl_node_init+0x26e>
 8013428:	4628      	mov	r0, r5
 801342a:	f7ec ff63 	bl	80002f4 <strlen>
 801342e:	2800      	cmp	r0, #0
 8013430:	f040 80c0 	bne.w	80135b4 <rcl_node_init+0x218>
 8013434:	4d79      	ldr	r5, [pc, #484]	@ (801361c <rcl_node_init+0x280>)
 8013436:	a922      	add	r1, sp, #136	@ 0x88
 8013438:	2200      	movs	r2, #0
 801343a:	4628      	mov	r0, r5
 801343c:	f001 f87c 	bl	8014538 <rmw_validate_namespace>
 8013440:	4682      	mov	sl, r0
 8013442:	2800      	cmp	r0, #0
 8013444:	f040 80af 	bne.w	80135a6 <rcl_node_init+0x20a>
 8013448:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801344a:	2800      	cmp	r0, #0
 801344c:	f040 80d5 	bne.w	80135fa <rcl_node_init+0x25e>
 8013450:	f8d8 3000 	ldr.w	r3, [r8]
 8013454:	2078      	movs	r0, #120	@ 0x78
 8013456:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801345a:	4798      	blx	r3
 801345c:	4682      	mov	sl, r0
 801345e:	6060      	str	r0, [r4, #4]
 8013460:	2800      	cmp	r0, #0
 8013462:	f000 80cf 	beq.w	8013604 <rcl_node_init+0x268>
 8013466:	2200      	movs	r2, #0
 8013468:	2300      	movs	r3, #0
 801346a:	a808      	add	r0, sp, #32
 801346c:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8013470:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8013474:	f000 f902 	bl	801367c <rcl_node_get_default_options>
 8013478:	a908      	add	r1, sp, #32
 801347a:	4650      	mov	r0, sl
 801347c:	2268      	movs	r2, #104	@ 0x68
 801347e:	f004 fc4a 	bl	8017d16 <memcpy>
 8013482:	6861      	ldr	r1, [r4, #4]
 8013484:	4640      	mov	r0, r8
 8013486:	6027      	str	r7, [r4, #0]
 8013488:	f000 f906 	bl	8013698 <rcl_node_options_copy>
 801348c:	2800      	cmp	r0, #0
 801348e:	d158      	bne.n	8013542 <rcl_node_init+0x1a6>
 8013490:	4628      	mov	r0, r5
 8013492:	f7ec ff2f 	bl	80002f4 <strlen>
 8013496:	4428      	add	r0, r5
 8013498:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801349c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80134a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80134a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	bf0c      	ite	eq
 80134aa:	4b5d      	ldreq	r3, [pc, #372]	@ (8013620 <rcl_node_init+0x284>)
 80134ac:	4b5d      	ldrne	r3, [pc, #372]	@ (8013624 <rcl_node_init+0x288>)
 80134ae:	9302      	str	r3, [sp, #8]
 80134b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80134b4:	9301      	str	r3, [sp, #4]
 80134b6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80134ba:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80134be:	f000 fc4f 	bl	8013d60 <rcutils_format_string_limit>
 80134c2:	6823      	ldr	r3, [r4, #0]
 80134c4:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80134c8:	4631      	mov	r1, r6
 80134ca:	6818      	ldr	r0, [r3, #0]
 80134cc:	462a      	mov	r2, r5
 80134ce:	6866      	ldr	r6, [r4, #4]
 80134d0:	3028      	adds	r0, #40	@ 0x28
 80134d2:	f001 fc31 	bl	8014d38 <rmw_create_node>
 80134d6:	6863      	ldr	r3, [r4, #4]
 80134d8:	66b0      	str	r0, [r6, #104]	@ 0x68
 80134da:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80134dc:	2800      	cmp	r0, #0
 80134de:	d032      	beq.n	8013546 <rcl_node_init+0x1aa>
 80134e0:	f001 fcba 	bl	8014e58 <rmw_node_get_graph_guard_condition>
 80134e4:	4682      	mov	sl, r0
 80134e6:	b360      	cbz	r0, 8013542 <rcl_node_init+0x1a6>
 80134e8:	f8d8 3000 	ldr.w	r3, [r8]
 80134ec:	2008      	movs	r0, #8
 80134ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80134f2:	6866      	ldr	r6, [r4, #4]
 80134f4:	4798      	blx	r3
 80134f6:	6863      	ldr	r3, [r4, #4]
 80134f8:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80134fa:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80134fe:	f1bb 0f00 	cmp.w	fp, #0
 8013502:	d020      	beq.n	8013546 <rcl_node_init+0x1aa>
 8013504:	a806      	add	r0, sp, #24
 8013506:	ae23      	add	r6, sp, #140	@ 0x8c
 8013508:	f003 fc76 	bl	8016df8 <rcl_get_zero_initialized_guard_condition>
 801350c:	a806      	add	r0, sp, #24
 801350e:	6863      	ldr	r3, [r4, #4]
 8013510:	46c4      	mov	ip, r8
 8013512:	c803      	ldmia	r0, {r0, r1}
 8013514:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013518:	e88b 0003 	stmia.w	fp, {r0, r1}
 801351c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013520:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013522:	f8dc 3000 	ldr.w	r3, [ip]
 8013526:	6033      	str	r3, [r6, #0]
 8013528:	ab28      	add	r3, sp, #160	@ 0xa0
 801352a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801352e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013532:	4651      	mov	r1, sl
 8013534:	463a      	mov	r2, r7
 8013536:	4670      	mov	r0, lr
 8013538:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801353a:	f003 fc67 	bl	8016e0c <rcl_guard_condition_init_from_rmw>
 801353e:	4682      	mov	sl, r0
 8013540:	b328      	cbz	r0, 801358e <rcl_node_init+0x1f2>
 8013542:	6863      	ldr	r3, [r4, #4]
 8013544:	b1f3      	cbz	r3, 8013584 <rcl_node_init+0x1e8>
 8013546:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013548:	b128      	cbz	r0, 8013556 <rcl_node_init+0x1ba>
 801354a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801354e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013552:	4798      	blx	r3
 8013554:	6863      	ldr	r3, [r4, #4]
 8013556:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013558:	b110      	cbz	r0, 8013560 <rcl_node_init+0x1c4>
 801355a:	f001 fbff 	bl	8014d5c <rmw_destroy_node>
 801355e:	6863      	ldr	r3, [r4, #4]
 8013560:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013562:	b148      	cbz	r0, 8013578 <rcl_node_init+0x1dc>
 8013564:	f003 fcae 	bl	8016ec4 <rcl_guard_condition_fini>
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801356e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013574:	4798      	blx	r3
 8013576:	6863      	ldr	r3, [r4, #4]
 8013578:	4618      	mov	r0, r3
 801357a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801357e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013582:	4798      	blx	r3
 8013584:	2300      	movs	r3, #0
 8013586:	f04f 0a01 	mov.w	sl, #1
 801358a:	e9c4 3300 	strd	r3, r3, [r4]
 801358e:	f1b9 0f00 	cmp.w	r9, #0
 8013592:	d008      	beq.n	80135a6 <rcl_node_init+0x20a>
 8013594:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013598:	4628      	mov	r0, r5
 801359a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801359e:	4798      	blx	r3
 80135a0:	e001      	b.n	80135a6 <rcl_node_init+0x20a>
 80135a2:	f04f 0a0b 	mov.w	sl, #11
 80135a6:	4650      	mov	r0, sl
 80135a8:	b029      	add	sp, #164	@ 0xa4
 80135aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ae:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 80135b2:	e7f8      	b.n	80135a6 <rcl_node_init+0x20a>
 80135b4:	782b      	ldrb	r3, [r5, #0]
 80135b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80135b8:	f43f af3d 	beq.w	8013436 <rcl_node_init+0x9a>
 80135bc:	9503      	str	r5, [sp, #12]
 80135be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	4b18      	ldr	r3, [pc, #96]	@ (8013628 <rcl_node_init+0x28c>)
 80135c6:	9302      	str	r3, [sp, #8]
 80135c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80135cc:	9301      	str	r3, [sp, #4]
 80135ce:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80135d2:	f000 fbc5 	bl	8013d60 <rcutils_format_string_limit>
 80135d6:	4605      	mov	r5, r0
 80135d8:	b1e0      	cbz	r0, 8013614 <rcl_node_init+0x278>
 80135da:	2200      	movs	r2, #0
 80135dc:	a922      	add	r1, sp, #136	@ 0x88
 80135de:	9222      	str	r2, [sp, #136]	@ 0x88
 80135e0:	f000 ffaa 	bl	8014538 <rmw_validate_namespace>
 80135e4:	4682      	mov	sl, r0
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d1d4      	bne.n	8013594 <rcl_node_init+0x1f8>
 80135ea:	46d9      	mov	r9, fp
 80135ec:	e72c      	b.n	8013448 <rcl_node_init+0xac>
 80135ee:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80135f2:	4650      	mov	r0, sl
 80135f4:	b029      	add	sp, #164	@ 0xa4
 80135f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fa:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80135fe:	f000 ffad 	bl	801455c <rmw_namespace_validation_result_string>
 8013602:	e7c4      	b.n	801358e <rcl_node_init+0x1f2>
 8013604:	f04f 0a0a 	mov.w	sl, #10
 8013608:	e7c1      	b.n	801358e <rcl_node_init+0x1f2>
 801360a:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801360e:	f001 f805 	bl	801461c <rmw_node_name_validation_result_string>
 8013612:	e7c8      	b.n	80135a6 <rcl_node_init+0x20a>
 8013614:	f04f 0a0a 	mov.w	sl, #10
 8013618:	e7c5      	b.n	80135a6 <rcl_node_init+0x20a>
 801361a:	bf00      	nop
 801361c:	08018e3c 	.word	0x08018e3c
 8013620:	08018cc0 	.word	0x08018cc0
 8013624:	08018e44 	.word	0x08018e44
 8013628:	08018e40 	.word	0x08018e40

0801362c <rcl_node_is_valid>:
 801362c:	b130      	cbz	r0, 801363c <rcl_node_is_valid+0x10>
 801362e:	6843      	ldr	r3, [r0, #4]
 8013630:	b123      	cbz	r3, 801363c <rcl_node_is_valid+0x10>
 8013632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013634:	b113      	cbz	r3, 801363c <rcl_node_is_valid+0x10>
 8013636:	6800      	ldr	r0, [r0, #0]
 8013638:	f7ff bc18 	b.w	8012e6c <rcl_context_is_valid>
 801363c:	2000      	movs	r0, #0
 801363e:	4770      	bx	lr

08013640 <rcl_node_get_name>:
 8013640:	b120      	cbz	r0, 801364c <rcl_node_get_name+0xc>
 8013642:	6840      	ldr	r0, [r0, #4]
 8013644:	b110      	cbz	r0, 801364c <rcl_node_get_name+0xc>
 8013646:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013648:	b100      	cbz	r0, 801364c <rcl_node_get_name+0xc>
 801364a:	6880      	ldr	r0, [r0, #8]
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop

08013650 <rcl_node_get_namespace>:
 8013650:	b120      	cbz	r0, 801365c <rcl_node_get_namespace+0xc>
 8013652:	6840      	ldr	r0, [r0, #4]
 8013654:	b110      	cbz	r0, 801365c <rcl_node_get_namespace+0xc>
 8013656:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013658:	b100      	cbz	r0, 801365c <rcl_node_get_namespace+0xc>
 801365a:	68c0      	ldr	r0, [r0, #12]
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop

08013660 <rcl_node_get_options>:
 8013660:	b128      	cbz	r0, 801366e <rcl_node_get_options+0xe>
 8013662:	6840      	ldr	r0, [r0, #4]
 8013664:	b118      	cbz	r0, 801366e <rcl_node_get_options+0xe>
 8013666:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013668:	2b00      	cmp	r3, #0
 801366a:	bf08      	it	eq
 801366c:	2000      	moveq	r0, #0
 801366e:	4770      	bx	lr

08013670 <rcl_node_get_rmw_handle>:
 8013670:	b110      	cbz	r0, 8013678 <rcl_node_get_rmw_handle+0x8>
 8013672:	6840      	ldr	r0, [r0, #4]
 8013674:	b100      	cbz	r0, 8013678 <rcl_node_get_rmw_handle+0x8>
 8013676:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop

0801367c <rcl_node_get_default_options>:
 801367c:	b510      	push	{r4, lr}
 801367e:	4604      	mov	r4, r0
 8013680:	2268      	movs	r2, #104	@ 0x68
 8013682:	2100      	movs	r1, #0
 8013684:	f004 fa28 	bl	8017ad8 <memset>
 8013688:	4620      	mov	r0, r4
 801368a:	f7fb f923 	bl	800e8d4 <rcutils_get_default_allocator>
 801368e:	2301      	movs	r3, #1
 8013690:	4620      	mov	r0, r4
 8013692:	7523      	strb	r3, [r4, #20]
 8013694:	bd10      	pop	{r4, pc}
 8013696:	bf00      	nop

08013698 <rcl_node_options_copy>:
 8013698:	2800      	cmp	r0, #0
 801369a:	bf18      	it	ne
 801369c:	4288      	cmpne	r0, r1
 801369e:	d01b      	beq.n	80136d8 <rcl_node_options_copy+0x40>
 80136a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a2:	fab1 f681 	clz	r6, r1
 80136a6:	460c      	mov	r4, r1
 80136a8:	0976      	lsrs	r6, r6, #5
 80136aa:	b199      	cbz	r1, 80136d4 <rcl_node_options_copy+0x3c>
 80136ac:	4605      	mov	r5, r0
 80136ae:	8a87      	ldrh	r7, [r0, #20]
 80136b0:	4684      	mov	ip, r0
 80136b2:	468e      	mov	lr, r1
 80136b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80136ba:	682b      	ldr	r3, [r5, #0]
 80136bc:	2250      	movs	r2, #80	@ 0x50
 80136be:	f10c 0118 	add.w	r1, ip, #24
 80136c2:	f104 0018 	add.w	r0, r4, #24
 80136c6:	f8ce 3000 	str.w	r3, [lr]
 80136ca:	82a7      	strh	r7, [r4, #20]
 80136cc:	f004 fb23 	bl	8017d16 <memcpy>
 80136d0:	4630      	mov	r0, r6
 80136d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136d4:	200b      	movs	r0, #11
 80136d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136d8:	200b      	movs	r0, #11
 80136da:	4770      	bx	lr

080136dc <rcl_node_resolve_name>:
 80136dc:	b082      	sub	sp, #8
 80136de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e2:	b091      	sub	sp, #68	@ 0x44
 80136e4:	ac1a      	add	r4, sp, #104	@ 0x68
 80136e6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80136ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80136ee:	2800      	cmp	r0, #0
 80136f0:	d03d      	beq.n	801376e <rcl_node_resolve_name+0x92>
 80136f2:	460c      	mov	r4, r1
 80136f4:	4605      	mov	r5, r0
 80136f6:	f7ff ffb3 	bl	8013660 <rcl_node_get_options>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d03a      	beq.n	8013774 <rcl_node_resolve_name+0x98>
 80136fe:	4628      	mov	r0, r5
 8013700:	f7ff ff9e 	bl	8013640 <rcl_node_get_name>
 8013704:	4606      	mov	r6, r0
 8013706:	4628      	mov	r0, r5
 8013708:	ad0b      	add	r5, sp, #44	@ 0x2c
 801370a:	f7ff ffa1 	bl	8013650 <rcl_node_get_namespace>
 801370e:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013712:	4607      	mov	r7, r0
 8013714:	46ac      	mov	ip, r5
 8013716:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801371a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801371e:	f8de 3000 	ldr.w	r3, [lr]
 8013722:	f8cc 3000 	str.w	r3, [ip]
 8013726:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013728:	b30b      	cbz	r3, 801376e <rcl_node_resolve_name+0x92>
 801372a:	4689      	mov	r9, r1
 801372c:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8013730:	f000 fc8e 	bl	8014050 <rcutils_get_zero_initialized_string_map>
 8013734:	ab10      	add	r3, sp, #64	@ 0x40
 8013736:	9008      	str	r0, [sp, #32]
 8013738:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801373c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013740:	2100      	movs	r1, #0
 8013742:	a808      	add	r0, sp, #32
 8013744:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013748:	f000 fcf8 	bl	801413c <rcutils_string_map_init>
 801374c:	4683      	mov	fp, r0
 801374e:	b1a0      	cbz	r0, 801377a <rcl_node_resolve_name+0x9e>
 8013750:	f7fb f8dc 	bl	800e90c <rcutils_get_error_string>
 8013754:	f7fb f8f0 	bl	800e938 <rcutils_reset_error>
 8013758:	f1bb 0f0a 	cmp.w	fp, #10
 801375c:	bf18      	it	ne
 801375e:	f04f 0b01 	movne.w	fp, #1
 8013762:	4658      	mov	r0, fp
 8013764:	b011      	add	sp, #68	@ 0x44
 8013766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801376a:	b002      	add	sp, #8
 801376c:	4770      	bx	lr
 801376e:	f04f 0b0b 	mov.w	fp, #11
 8013772:	e7f6      	b.n	8013762 <rcl_node_resolve_name+0x86>
 8013774:	f04f 0b01 	mov.w	fp, #1
 8013778:	e7f3      	b.n	8013762 <rcl_node_resolve_name+0x86>
 801377a:	9009      	str	r0, [sp, #36]	@ 0x24
 801377c:	9007      	str	r0, [sp, #28]
 801377e:	a808      	add	r0, sp, #32
 8013780:	f003 fb34 	bl	8016dec <rcl_get_default_topic_name_substitutions>
 8013784:	4683      	mov	fp, r0
 8013786:	b180      	cbz	r0, 80137aa <rcl_node_resolve_name+0xce>
 8013788:	280a      	cmp	r0, #10
 801378a:	a808      	add	r0, sp, #32
 801378c:	bf18      	it	ne
 801378e:	f04f 0b01 	movne.w	fp, #1
 8013792:	f000 fd13 	bl	80141bc <rcutils_string_map_fini>
 8013796:	4604      	mov	r4, r0
 8013798:	2800      	cmp	r0, #0
 801379a:	d15b      	bne.n	8013854 <rcl_node_resolve_name+0x178>
 801379c:	4651      	mov	r1, sl
 801379e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137a0:	47c8      	blx	r9
 80137a2:	4651      	mov	r1, sl
 80137a4:	4620      	mov	r0, r4
 80137a6:	47c8      	blx	r9
 80137a8:	e7db      	b.n	8013762 <rcl_node_resolve_name+0x86>
 80137aa:	ab09      	add	r3, sp, #36	@ 0x24
 80137ac:	46ec      	mov	ip, sp
 80137ae:	9305      	str	r3, [sp, #20]
 80137b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137b6:	682b      	ldr	r3, [r5, #0]
 80137b8:	463a      	mov	r2, r7
 80137ba:	4631      	mov	r1, r6
 80137bc:	4620      	mov	r0, r4
 80137be:	f8cc 3000 	str.w	r3, [ip]
 80137c2:	ab08      	add	r3, sp, #32
 80137c4:	f003 f9b2 	bl	8016b2c <rcl_expand_topic_name>
 80137c8:	4683      	mov	fp, r0
 80137ca:	b9d8      	cbnz	r0, 8013804 <rcl_node_resolve_name+0x128>
 80137cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80137ce:	4602      	mov	r2, r0
 80137d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80137d2:	a90a      	add	r1, sp, #40	@ 0x28
 80137d4:	4620      	mov	r0, r4
 80137d6:	f000 fddf 	bl	8014398 <rmw_validate_full_topic_name>
 80137da:	bb50      	cbnz	r0, 8013832 <rcl_node_resolve_name+0x156>
 80137dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80137de:	2d00      	cmp	r5, #0
 80137e0:	d140      	bne.n	8013864 <rcl_node_resolve_name+0x188>
 80137e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80137e4:	a808      	add	r0, sp, #32
 80137e6:	601c      	str	r4, [r3, #0]
 80137e8:	f000 fce8 	bl	80141bc <rcutils_string_map_fini>
 80137ec:	4683      	mov	fp, r0
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d043      	beq.n	801387a <rcl_node_resolve_name+0x19e>
 80137f2:	f7fb f88b 	bl	800e90c <rcutils_get_error_string>
 80137f6:	46a8      	mov	r8, r5
 80137f8:	f04f 0b01 	mov.w	fp, #1
 80137fc:	462c      	mov	r4, r5
 80137fe:	f7fb f89b 	bl	800e938 <rcutils_reset_error>
 8013802:	e00a      	b.n	801381a <rcl_node_resolve_name+0x13e>
 8013804:	2867      	cmp	r0, #103	@ 0x67
 8013806:	bf14      	ite	ne
 8013808:	f04f 0800 	movne.w	r8, #0
 801380c:	f008 0801 	andeq.w	r8, r8, #1
 8013810:	9c07      	ldr	r4, [sp, #28]
 8013812:	a808      	add	r0, sp, #32
 8013814:	f000 fcd2 	bl	80141bc <rcutils_string_map_fini>
 8013818:	bb50      	cbnz	r0, 8013870 <rcl_node_resolve_name+0x194>
 801381a:	4651      	mov	r1, sl
 801381c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801381e:	47c8      	blx	r9
 8013820:	4651      	mov	r1, sl
 8013822:	4620      	mov	r0, r4
 8013824:	47c8      	blx	r9
 8013826:	f1b8 0f00 	cmp.w	r8, #0
 801382a:	bf18      	it	ne
 801382c:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8013830:	e797      	b.n	8013762 <rcl_node_resolve_name+0x86>
 8013832:	f7fb f86b 	bl	800e90c <rcutils_get_error_string>
 8013836:	f7fb f87f 	bl	800e938 <rcutils_reset_error>
 801383a:	a808      	add	r0, sp, #32
 801383c:	f000 fcbe 	bl	80141bc <rcutils_string_map_fini>
 8013840:	b998      	cbnz	r0, 801386a <rcl_node_resolve_name+0x18e>
 8013842:	4651      	mov	r1, sl
 8013844:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013846:	47c8      	blx	r9
 8013848:	4651      	mov	r1, sl
 801384a:	4620      	mov	r0, r4
 801384c:	f04f 0b01 	mov.w	fp, #1
 8013850:	47c8      	blx	r9
 8013852:	e786      	b.n	8013762 <rcl_node_resolve_name+0x86>
 8013854:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013858:	f7fb f858 	bl	800e90c <rcutils_get_error_string>
 801385c:	f7fb f86c 	bl	800e938 <rcutils_reset_error>
 8013860:	4644      	mov	r4, r8
 8013862:	e7da      	b.n	801381a <rcl_node_resolve_name+0x13e>
 8013864:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8013868:	e7d3      	b.n	8013812 <rcl_node_resolve_name+0x136>
 801386a:	46d8      	mov	r8, fp
 801386c:	f04f 0b01 	mov.w	fp, #1
 8013870:	f7fb f84c 	bl	800e90c <rcutils_get_error_string>
 8013874:	f7fb f860 	bl	800e938 <rcutils_reset_error>
 8013878:	e7cf      	b.n	801381a <rcl_node_resolve_name+0x13e>
 801387a:	4651      	mov	r1, sl
 801387c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801387e:	47c8      	blx	r9
 8013880:	4651      	mov	r1, sl
 8013882:	4658      	mov	r0, fp
 8013884:	47c8      	blx	r9
 8013886:	e76c      	b.n	8013762 <rcl_node_resolve_name+0x86>

08013888 <exact_match_lookup>:
 8013888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388a:	f102 0708 	add.w	r7, r2, #8
 801388e:	460b      	mov	r3, r1
 8013890:	b085      	sub	sp, #20
 8013892:	4614      	mov	r4, r2
 8013894:	4606      	mov	r6, r0
 8013896:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801389a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801389e:	4618      	mov	r0, r3
 80138a0:	4919      	ldr	r1, [pc, #100]	@ (8013908 <exact_match_lookup+0x80>)
 80138a2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80138a6:	f000 fa4d 	bl	8013d44 <rcutils_join_path>
 80138aa:	7833      	ldrb	r3, [r6, #0]
 80138ac:	4605      	mov	r5, r0
 80138ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80138b0:	d023      	beq.n	80138fa <exact_match_lookup+0x72>
 80138b2:	f104 030c 	add.w	r3, r4, #12
 80138b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80138ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80138be:	1c70      	adds	r0, r6, #1
 80138c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80138c4:	f000 fa44 	bl	8013d50 <rcutils_to_native_path>
 80138c8:	4606      	mov	r6, r0
 80138ca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80138ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80138d2:	4631      	mov	r1, r6
 80138d4:	4628      	mov	r0, r5
 80138d6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80138da:	f000 fa33 	bl	8013d44 <rcutils_join_path>
 80138de:	4603      	mov	r3, r0
 80138e0:	4630      	mov	r0, r6
 80138e2:	6862      	ldr	r2, [r4, #4]
 80138e4:	461e      	mov	r6, r3
 80138e6:	6921      	ldr	r1, [r4, #16]
 80138e8:	4790      	blx	r2
 80138ea:	4628      	mov	r0, r5
 80138ec:	4635      	mov	r5, r6
 80138ee:	6863      	ldr	r3, [r4, #4]
 80138f0:	6921      	ldr	r1, [r4, #16]
 80138f2:	4798      	blx	r3
 80138f4:	4628      	mov	r0, r5
 80138f6:	b005      	add	sp, #20
 80138f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138fa:	7873      	ldrb	r3, [r6, #1]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1d8      	bne.n	80138b2 <exact_match_lookup+0x2a>
 8013900:	4628      	mov	r0, r5
 8013902:	b005      	add	sp, #20
 8013904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013906:	bf00      	nop
 8013908:	08018e90 	.word	0x08018e90

0801390c <rcl_get_secure_root>:
 801390c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013910:	b085      	sub	sp, #20
 8013912:	b168      	cbz	r0, 8013930 <rcl_get_secure_root+0x24>
 8013914:	4607      	mov	r7, r0
 8013916:	4608      	mov	r0, r1
 8013918:	460c      	mov	r4, r1
 801391a:	f7fa ffe9 	bl	800e8f0 <rcutils_allocator_is_valid>
 801391e:	b138      	cbz	r0, 8013930 <rcl_get_secure_root+0x24>
 8013920:	2300      	movs	r3, #0
 8013922:	482d      	ldr	r0, [pc, #180]	@ (80139d8 <rcl_get_secure_root+0xcc>)
 8013924:	a903      	add	r1, sp, #12
 8013926:	9303      	str	r3, [sp, #12]
 8013928:	f000 f9f2 	bl	8013d10 <rcutils_get_env>
 801392c:	4605      	mov	r5, r0
 801392e:	b120      	cbz	r0, 801393a <rcl_get_secure_root+0x2e>
 8013930:	2500      	movs	r5, #0
 8013932:	4628      	mov	r0, r5
 8013934:	b005      	add	sp, #20
 8013936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801393a:	9b03      	ldr	r3, [sp, #12]
 801393c:	781a      	ldrb	r2, [r3, #0]
 801393e:	2a00      	cmp	r2, #0
 8013940:	d0f6      	beq.n	8013930 <rcl_get_secure_root+0x24>
 8013942:	f104 090c 	add.w	r9, r4, #12
 8013946:	e899 0003 	ldmia.w	r9, {r0, r1}
 801394a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801394e:	4618      	mov	r0, r3
 8013950:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013954:	f000 fb3e 	bl	8013fd4 <rcutils_strdup>
 8013958:	4680      	mov	r8, r0
 801395a:	2800      	cmp	r0, #0
 801395c:	d0e8      	beq.n	8013930 <rcl_get_secure_root+0x24>
 801395e:	a903      	add	r1, sp, #12
 8013960:	481e      	ldr	r0, [pc, #120]	@ (80139dc <rcl_get_secure_root+0xd0>)
 8013962:	9503      	str	r5, [sp, #12]
 8013964:	f000 f9d4 	bl	8013d10 <rcutils_get_env>
 8013968:	b160      	cbz	r0, 8013984 <rcl_get_secure_root+0x78>
 801396a:	2600      	movs	r6, #0
 801396c:	4630      	mov	r0, r6
 801396e:	6863      	ldr	r3, [r4, #4]
 8013970:	6921      	ldr	r1, [r4, #16]
 8013972:	4798      	blx	r3
 8013974:	4640      	mov	r0, r8
 8013976:	6863      	ldr	r3, [r4, #4]
 8013978:	6921      	ldr	r1, [r4, #16]
 801397a:	4798      	blx	r3
 801397c:	4628      	mov	r0, r5
 801397e:	b005      	add	sp, #20
 8013980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013984:	9b03      	ldr	r3, [sp, #12]
 8013986:	781e      	ldrb	r6, [r3, #0]
 8013988:	b1f6      	cbz	r6, 80139c8 <rcl_get_secure_root+0xbc>
 801398a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801398e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013992:	4618      	mov	r0, r3
 8013994:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013998:	f000 fb1c 	bl	8013fd4 <rcutils_strdup>
 801399c:	4606      	mov	r6, r0
 801399e:	2800      	cmp	r0, #0
 80139a0:	d0e3      	beq.n	801396a <rcl_get_secure_root+0x5e>
 80139a2:	4622      	mov	r2, r4
 80139a4:	4641      	mov	r1, r8
 80139a6:	f7ff ff6f 	bl	8013888 <exact_match_lookup>
 80139aa:	4605      	mov	r5, r0
 80139ac:	2d00      	cmp	r5, #0
 80139ae:	d0dd      	beq.n	801396c <rcl_get_secure_root+0x60>
 80139b0:	4628      	mov	r0, r5
 80139b2:	f000 f9c5 	bl	8013d40 <rcutils_is_directory>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d1d7      	bne.n	801396c <rcl_get_secure_root+0x60>
 80139bc:	4628      	mov	r0, r5
 80139be:	6921      	ldr	r1, [r4, #16]
 80139c0:	461d      	mov	r5, r3
 80139c2:	6863      	ldr	r3, [r4, #4]
 80139c4:	4798      	blx	r3
 80139c6:	e7d1      	b.n	801396c <rcl_get_secure_root+0x60>
 80139c8:	4622      	mov	r2, r4
 80139ca:	4638      	mov	r0, r7
 80139cc:	4641      	mov	r1, r8
 80139ce:	f7ff ff5b 	bl	8013888 <exact_match_lookup>
 80139d2:	4605      	mov	r5, r0
 80139d4:	e7ea      	b.n	80139ac <rcl_get_secure_root+0xa0>
 80139d6:	bf00      	nop
 80139d8:	08018e9c 	.word	0x08018e9c
 80139dc:	08018eb4 	.word	0x08018eb4

080139e0 <rcl_get_security_options_from_environment>:
 80139e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	b082      	sub	sp, #8
 80139e6:	2300      	movs	r3, #0
 80139e8:	4606      	mov	r6, r0
 80139ea:	460f      	mov	r7, r1
 80139ec:	4821      	ldr	r0, [pc, #132]	@ (8013a74 <rcl_get_security_options_from_environment+0x94>)
 80139ee:	a901      	add	r1, sp, #4
 80139f0:	4690      	mov	r8, r2
 80139f2:	9301      	str	r3, [sp, #4]
 80139f4:	f000 f98c 	bl	8013d10 <rcutils_get_env>
 80139f8:	b120      	cbz	r0, 8013a04 <rcl_get_security_options_from_environment+0x24>
 80139fa:	2501      	movs	r5, #1
 80139fc:	4628      	mov	r0, r5
 80139fe:	b002      	add	sp, #8
 8013a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a04:	4604      	mov	r4, r0
 8013a06:	491c      	ldr	r1, [pc, #112]	@ (8013a78 <rcl_get_security_options_from_environment+0x98>)
 8013a08:	9801      	ldr	r0, [sp, #4]
 8013a0a:	f7ec fc69 	bl	80002e0 <strcmp>
 8013a0e:	4605      	mov	r5, r0
 8013a10:	b9f0      	cbnz	r0, 8013a50 <rcl_get_security_options_from_environment+0x70>
 8013a12:	9001      	str	r0, [sp, #4]
 8013a14:	f1b8 0f00 	cmp.w	r8, #0
 8013a18:	d021      	beq.n	8013a5e <rcl_get_security_options_from_environment+0x7e>
 8013a1a:	a901      	add	r1, sp, #4
 8013a1c:	4817      	ldr	r0, [pc, #92]	@ (8013a7c <rcl_get_security_options_from_environment+0x9c>)
 8013a1e:	f000 f977 	bl	8013d10 <rcutils_get_env>
 8013a22:	2800      	cmp	r0, #0
 8013a24:	d1e9      	bne.n	80139fa <rcl_get_security_options_from_environment+0x1a>
 8013a26:	4916      	ldr	r1, [pc, #88]	@ (8013a80 <rcl_get_security_options_from_environment+0xa0>)
 8013a28:	9801      	ldr	r0, [sp, #4]
 8013a2a:	f7ec fc59 	bl	80002e0 <strcmp>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	4639      	mov	r1, r7
 8013a32:	4630      	mov	r0, r6
 8013a34:	fab3 f383 	clz	r3, r3
 8013a38:	095b      	lsrs	r3, r3, #5
 8013a3a:	f888 3000 	strb.w	r3, [r8]
 8013a3e:	f7ff ff65 	bl	801390c <rcl_get_secure_root>
 8013a42:	b170      	cbz	r0, 8013a62 <rcl_get_security_options_from_environment+0x82>
 8013a44:	f8c8 0004 	str.w	r0, [r8, #4]
 8013a48:	4628      	mov	r0, r5
 8013a4a:	b002      	add	sp, #8
 8013a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a50:	4625      	mov	r5, r4
 8013a52:	f888 4000 	strb.w	r4, [r8]
 8013a56:	4628      	mov	r0, r5
 8013a58:	b002      	add	sp, #8
 8013a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a5e:	250b      	movs	r5, #11
 8013a60:	e7cc      	b.n	80139fc <rcl_get_security_options_from_environment+0x1c>
 8013a62:	f898 5000 	ldrb.w	r5, [r8]
 8013a66:	f1a5 0501 	sub.w	r5, r5, #1
 8013a6a:	fab5 f585 	clz	r5, r5
 8013a6e:	096d      	lsrs	r5, r5, #5
 8013a70:	e7c4      	b.n	80139fc <rcl_get_security_options_from_environment+0x1c>
 8013a72:	bf00      	nop
 8013a74:	08018e54 	.word	0x08018e54
 8013a78:	08018e68 	.word	0x08018e68
 8013a7c:	08018e70 	.word	0x08018e70
 8013a80:	08018e88 	.word	0x08018e88

08013a84 <rcl_get_system_time>:
 8013a84:	4608      	mov	r0, r1
 8013a86:	f000 bc11 	b.w	80142ac <rcutils_system_time_now>
 8013a8a:	bf00      	nop

08013a8c <rcl_get_steady_time>:
 8013a8c:	4608      	mov	r0, r1
 8013a8e:	f000 bc33 	b.w	80142f8 <rcutils_steady_time_now>
 8013a92:	bf00      	nop

08013a94 <rcl_get_ros_time>:
 8013a94:	7a03      	ldrb	r3, [r0, #8]
 8013a96:	b510      	push	{r4, lr}
 8013a98:	460c      	mov	r4, r1
 8013a9a:	b143      	cbz	r3, 8013aae <rcl_get_ros_time+0x1a>
 8013a9c:	2105      	movs	r1, #5
 8013a9e:	f000 f901 	bl	8013ca4 <__atomic_load_8>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	e9c4 2300 	strd	r2, r3, [r4]
 8013aac:	bd10      	pop	{r4, pc}
 8013aae:	4608      	mov	r0, r1
 8013ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ab4:	f000 bbfa 	b.w	80142ac <rcutils_system_time_now>

08013ab8 <rcl_clock_init>:
 8013ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aba:	4605      	mov	r5, r0
 8013abc:	4610      	mov	r0, r2
 8013abe:	4614      	mov	r4, r2
 8013ac0:	460e      	mov	r6, r1
 8013ac2:	f7fa ff15 	bl	800e8f0 <rcutils_allocator_is_valid>
 8013ac6:	b128      	cbz	r0, 8013ad4 <rcl_clock_init+0x1c>
 8013ac8:	2d03      	cmp	r5, #3
 8013aca:	d803      	bhi.n	8013ad4 <rcl_clock_init+0x1c>
 8013acc:	e8df f005 	tbb	[pc, r5]
 8013ad0:	0659301f 	.word	0x0659301f
 8013ad4:	f04f 0c0b 	mov.w	ip, #11
 8013ad8:	4660      	mov	r0, ip
 8013ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013adc:	2c00      	cmp	r4, #0
 8013ade:	d0f9      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013ae0:	fab6 f386 	clz	r3, r6
 8013ae4:	095b      	lsrs	r3, r3, #5
 8013ae6:	2e00      	cmp	r6, #0
 8013ae8:	d0f4      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013aea:	6133      	str	r3, [r6, #16]
 8013aec:	469c      	mov	ip, r3
 8013aee:	f106 0514 	add.w	r5, r6, #20
 8013af2:	4f32      	ldr	r7, [pc, #200]	@ (8013bbc <rcl_clock_init+0x104>)
 8013af4:	f04f 0e03 	mov.w	lr, #3
 8013af8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b00:	6823      	ldr	r3, [r4, #0]
 8013b02:	4660      	mov	r0, ip
 8013b04:	602b      	str	r3, [r5, #0]
 8013b06:	60f7      	str	r7, [r6, #12]
 8013b08:	f886 e000 	strb.w	lr, [r6]
 8013b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b0e:	2e00      	cmp	r6, #0
 8013b10:	d0e0      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013b12:	2300      	movs	r3, #0
 8013b14:	f106 0514 	add.w	r5, r6, #20
 8013b18:	7033      	strb	r3, [r6, #0]
 8013b1a:	469c      	mov	ip, r3
 8013b1c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013b20:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b28:	6823      	ldr	r3, [r4, #0]
 8013b2a:	4660      	mov	r0, ip
 8013b2c:	602b      	str	r3, [r5, #0]
 8013b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b30:	2c00      	cmp	r4, #0
 8013b32:	d0cf      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013b34:	fab6 f586 	clz	r5, r6
 8013b38:	096d      	lsrs	r5, r5, #5
 8013b3a:	2e00      	cmp	r6, #0
 8013b3c:	d0ca      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013b3e:	46a6      	mov	lr, r4
 8013b40:	7035      	strb	r5, [r6, #0]
 8013b42:	f106 0c14 	add.w	ip, r6, #20
 8013b46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b4a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013b4e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8013b52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b56:	f8de 3000 	ldr.w	r3, [lr]
 8013b5a:	2010      	movs	r0, #16
 8013b5c:	f8cc 3000 	str.w	r3, [ip]
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	6921      	ldr	r1, [r4, #16]
 8013b64:	4798      	blx	r3
 8013b66:	6130      	str	r0, [r6, #16]
 8013b68:	b320      	cbz	r0, 8013bb4 <rcl_clock_init+0xfc>
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	46ac      	mov	ip, r5
 8013b70:	7205      	strb	r5, [r0, #8]
 8013b72:	e9c0 2300 	strd	r2, r3, [r0]
 8013b76:	4a12      	ldr	r2, [pc, #72]	@ (8013bc0 <rcl_clock_init+0x108>)
 8013b78:	2301      	movs	r3, #1
 8013b7a:	4660      	mov	r0, ip
 8013b7c:	60f2      	str	r2, [r6, #12]
 8013b7e:	7033      	strb	r3, [r6, #0]
 8013b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b82:	2c00      	cmp	r4, #0
 8013b84:	d0a6      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013b86:	fab6 f386 	clz	r3, r6
 8013b8a:	095b      	lsrs	r3, r3, #5
 8013b8c:	2e00      	cmp	r6, #0
 8013b8e:	d0a1      	beq.n	8013ad4 <rcl_clock_init+0x1c>
 8013b90:	6133      	str	r3, [r6, #16]
 8013b92:	469c      	mov	ip, r3
 8013b94:	f106 0514 	add.w	r5, r6, #20
 8013b98:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8013bc4 <rcl_clock_init+0x10c>
 8013b9c:	2702      	movs	r7, #2
 8013b9e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	4660      	mov	r0, ip
 8013baa:	602b      	str	r3, [r5, #0]
 8013bac:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013bb0:	7037      	strb	r7, [r6, #0]
 8013bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bb4:	f04f 0c0a 	mov.w	ip, #10
 8013bb8:	e78e      	b.n	8013ad8 <rcl_clock_init+0x20>
 8013bba:	bf00      	nop
 8013bbc:	08013a8d 	.word	0x08013a8d
 8013bc0:	08013a95 	.word	0x08013a95
 8013bc4:	08013a85 	.word	0x08013a85

08013bc8 <rcl_validate_enclave_name_with_size>:
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d049      	beq.n	8013c60 <rcl_validate_enclave_name_with_size+0x98>
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	4615      	mov	r5, r2
 8013bd0:	b0c2      	sub	sp, #264	@ 0x108
 8013bd2:	b19a      	cbz	r2, 8013bfc <rcl_validate_enclave_name_with_size+0x34>
 8013bd4:	461e      	mov	r6, r3
 8013bd6:	466a      	mov	r2, sp
 8013bd8:	ab01      	add	r3, sp, #4
 8013bda:	460c      	mov	r4, r1
 8013bdc:	f000 fc58 	bl	8014490 <rmw_validate_namespace_with_size>
 8013be0:	4684      	mov	ip, r0
 8013be2:	b9b8      	cbnz	r0, 8013c14 <rcl_validate_enclave_name_with_size+0x4c>
 8013be4:	9900      	ldr	r1, [sp, #0]
 8013be6:	b171      	cbz	r1, 8013c06 <rcl_validate_enclave_name_with_size+0x3e>
 8013be8:	2907      	cmp	r1, #7
 8013bea:	d019      	beq.n	8013c20 <rcl_validate_enclave_name_with_size+0x58>
 8013bec:	1e4b      	subs	r3, r1, #1
 8013bee:	2b05      	cmp	r3, #5
 8013bf0:	d83a      	bhi.n	8013c68 <rcl_validate_enclave_name_with_size+0xa0>
 8013bf2:	e8df f003 	tbb	[pc, r3]
 8013bf6:	2926      	.short	0x2926
 8013bf8:	1d322f2c 	.word	0x1d322f2c
 8013bfc:	f04f 0c0b 	mov.w	ip, #11
 8013c00:	4660      	mov	r0, ip
 8013c02:	b042      	add	sp, #264	@ 0x108
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	2907      	cmp	r1, #7
 8013c08:	d00a      	beq.n	8013c20 <rcl_validate_enclave_name_with_size+0x58>
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	4660      	mov	r0, ip
 8013c0e:	602b      	str	r3, [r5, #0]
 8013c10:	b042      	add	sp, #264	@ 0x108
 8013c12:	bd70      	pop	{r4, r5, r6, pc}
 8013c14:	f7ff f90c 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8013c18:	4684      	mov	ip, r0
 8013c1a:	4660      	mov	r0, ip
 8013c1c:	b042      	add	sp, #264	@ 0x108
 8013c1e:	bd70      	pop	{r4, r5, r6, pc}
 8013c20:	2cff      	cmp	r4, #255	@ 0xff
 8013c22:	d9f2      	bls.n	8013c0a <rcl_validate_enclave_name_with_size+0x42>
 8013c24:	6029      	str	r1, [r5, #0]
 8013c26:	2e00      	cmp	r6, #0
 8013c28:	d0ea      	beq.n	8013c00 <rcl_validate_enclave_name_with_size+0x38>
 8013c2a:	23fe      	movs	r3, #254	@ 0xfe
 8013c2c:	6033      	str	r3, [r6, #0]
 8013c2e:	e7e7      	b.n	8013c00 <rcl_validate_enclave_name_with_size+0x38>
 8013c30:	2306      	movs	r3, #6
 8013c32:	602b      	str	r3, [r5, #0]
 8013c34:	2e00      	cmp	r6, #0
 8013c36:	d0e3      	beq.n	8013c00 <rcl_validate_enclave_name_with_size+0x38>
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	4660      	mov	r0, ip
 8013c3c:	6033      	str	r3, [r6, #0]
 8013c3e:	b042      	add	sp, #264	@ 0x108
 8013c40:	bd70      	pop	{r4, r5, r6, pc}
 8013c42:	2301      	movs	r3, #1
 8013c44:	602b      	str	r3, [r5, #0]
 8013c46:	e7f5      	b.n	8013c34 <rcl_validate_enclave_name_with_size+0x6c>
 8013c48:	2302      	movs	r3, #2
 8013c4a:	602b      	str	r3, [r5, #0]
 8013c4c:	e7f2      	b.n	8013c34 <rcl_validate_enclave_name_with_size+0x6c>
 8013c4e:	2303      	movs	r3, #3
 8013c50:	602b      	str	r3, [r5, #0]
 8013c52:	e7ef      	b.n	8013c34 <rcl_validate_enclave_name_with_size+0x6c>
 8013c54:	2304      	movs	r3, #4
 8013c56:	602b      	str	r3, [r5, #0]
 8013c58:	e7ec      	b.n	8013c34 <rcl_validate_enclave_name_with_size+0x6c>
 8013c5a:	2305      	movs	r3, #5
 8013c5c:	602b      	str	r3, [r5, #0]
 8013c5e:	e7e9      	b.n	8013c34 <rcl_validate_enclave_name_with_size+0x6c>
 8013c60:	f04f 0c0b 	mov.w	ip, #11
 8013c64:	4660      	mov	r0, ip
 8013c66:	4770      	bx	lr
 8013c68:	460b      	mov	r3, r1
 8013c6a:	4a04      	ldr	r2, [pc, #16]	@ (8013c7c <rcl_validate_enclave_name_with_size+0xb4>)
 8013c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013c70:	a802      	add	r0, sp, #8
 8013c72:	f000 f961 	bl	8013f38 <rcutils_snprintf>
 8013c76:	f04f 0c01 	mov.w	ip, #1
 8013c7a:	e7c1      	b.n	8013c00 <rcl_validate_enclave_name_with_size+0x38>
 8013c7c:	08018ed4 	.word	0x08018ed4

08013c80 <rcl_validate_enclave_name>:
 8013c80:	b168      	cbz	r0, 8013c9e <rcl_validate_enclave_name+0x1e>
 8013c82:	b570      	push	{r4, r5, r6, lr}
 8013c84:	460d      	mov	r5, r1
 8013c86:	4616      	mov	r6, r2
 8013c88:	4604      	mov	r4, r0
 8013c8a:	f7ec fb33 	bl	80002f4 <strlen>
 8013c8e:	4633      	mov	r3, r6
 8013c90:	4601      	mov	r1, r0
 8013c92:	462a      	mov	r2, r5
 8013c94:	4620      	mov	r0, r4
 8013c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c9a:	f7ff bf95 	b.w	8013bc8 <rcl_validate_enclave_name_with_size>
 8013c9e:	200b      	movs	r0, #11
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop

08013ca4 <__atomic_load_8>:
 8013ca4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013ca8:	4a16      	ldr	r2, [pc, #88]	@ (8013d04 <__atomic_load_8+0x60>)
 8013caa:	4b17      	ldr	r3, [pc, #92]	@ (8013d08 <__atomic_load_8+0x64>)
 8013cac:	f04f 0c01 	mov.w	ip, #1
 8013cb0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013cb4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013cb8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013cbc:	fb02 f101 	mul.w	r1, r2, r1
 8013cc0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013cc4:	fba3 2301 	umull	r2, r3, r3, r1
 8013cc8:	091b      	lsrs	r3, r3, #4
 8013cca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013cce:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013cd2:	b4d0      	push	{r4, r6, r7}
 8013cd4:	1ac9      	subs	r1, r1, r3
 8013cd6:	4c0d      	ldr	r4, [pc, #52]	@ (8013d0c <__atomic_load_8+0x68>)
 8013cd8:	1862      	adds	r2, r4, r1
 8013cda:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013cde:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013ce2:	2e00      	cmp	r6, #0
 8013ce4:	d1f9      	bne.n	8013cda <__atomic_load_8+0x36>
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	f3bf 8f5b 	dmb	ish
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d1f4      	bne.n	8013cda <__atomic_load_8+0x36>
 8013cf0:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013cf4:	f3bf 8f5b 	dmb	ish
 8013cf8:	5463      	strb	r3, [r4, r1]
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	4639      	mov	r1, r7
 8013cfe:	bcd0      	pop	{r4, r6, r7}
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	27d4eb2d 	.word	0x27d4eb2d
 8013d08:	b21642c9 	.word	0xb21642c9
 8013d0c:	24068430 	.word	0x24068430

08013d10 <rcutils_get_env>:
 8013d10:	b168      	cbz	r0, 8013d2e <rcutils_get_env+0x1e>
 8013d12:	b510      	push	{r4, lr}
 8013d14:	460c      	mov	r4, r1
 8013d16:	b129      	cbz	r1, 8013d24 <rcutils_get_env+0x14>
 8013d18:	f003 fb4c 	bl	80173b4 <getenv>
 8013d1c:	b120      	cbz	r0, 8013d28 <rcutils_get_env+0x18>
 8013d1e:	6020      	str	r0, [r4, #0]
 8013d20:	2000      	movs	r0, #0
 8013d22:	bd10      	pop	{r4, pc}
 8013d24:	4803      	ldr	r0, [pc, #12]	@ (8013d34 <rcutils_get_env+0x24>)
 8013d26:	bd10      	pop	{r4, pc}
 8013d28:	4b03      	ldr	r3, [pc, #12]	@ (8013d38 <rcutils_get_env+0x28>)
 8013d2a:	6023      	str	r3, [r4, #0]
 8013d2c:	bd10      	pop	{r4, pc}
 8013d2e:	4803      	ldr	r0, [pc, #12]	@ (8013d3c <rcutils_get_env+0x2c>)
 8013d30:	4770      	bx	lr
 8013d32:	bf00      	nop
 8013d34:	08018f50 	.word	0x08018f50
 8013d38:	08019074 	.word	0x08019074
 8013d3c:	08018f34 	.word	0x08018f34

08013d40 <rcutils_is_directory>:
 8013d40:	2000      	movs	r0, #0
 8013d42:	4770      	bx	lr

08013d44 <rcutils_join_path>:
 8013d44:	b082      	sub	sp, #8
 8013d46:	2000      	movs	r0, #0
 8013d48:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013d4c:	b002      	add	sp, #8
 8013d4e:	4770      	bx	lr

08013d50 <rcutils_to_native_path>:
 8013d50:	b084      	sub	sp, #16
 8013d52:	2000      	movs	r0, #0
 8013d54:	f10d 0c04 	add.w	ip, sp, #4
 8013d58:	b004      	add	sp, #16
 8013d5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8013d5e:	4770      	bx	lr

08013d60 <rcutils_format_string_limit>:
 8013d60:	b40f      	push	{r0, r1, r2, r3}
 8013d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d64:	b083      	sub	sp, #12
 8013d66:	ac08      	add	r4, sp, #32
 8013d68:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d6e:	b326      	cbz	r6, 8013dba <rcutils_format_string_limit+0x5a>
 8013d70:	a808      	add	r0, sp, #32
 8013d72:	f7fa fdbd 	bl	800e8f0 <rcutils_allocator_is_valid>
 8013d76:	b300      	cbz	r0, 8013dba <rcutils_format_string_limit+0x5a>
 8013d78:	2100      	movs	r1, #0
 8013d7a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013d7c:	4632      	mov	r2, r6
 8013d7e:	4608      	mov	r0, r1
 8013d80:	e9cd 3300 	strd	r3, r3, [sp]
 8013d84:	f000 f906 	bl	8013f94 <rcutils_vsnprintf>
 8013d88:	1c43      	adds	r3, r0, #1
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	d015      	beq.n	8013dba <rcutils_format_string_limit+0x5a>
 8013d8e:	1c47      	adds	r7, r0, #1
 8013d90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d92:	429f      	cmp	r7, r3
 8013d94:	d901      	bls.n	8013d9a <rcutils_format_string_limit+0x3a>
 8013d96:	1e5d      	subs	r5, r3, #1
 8013d98:	461f      	mov	r7, r3
 8013d9a:	9b08      	ldr	r3, [sp, #32]
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013da0:	4798      	blx	r3
 8013da2:	4604      	mov	r4, r0
 8013da4:	b148      	cbz	r0, 8013dba <rcutils_format_string_limit+0x5a>
 8013da6:	4632      	mov	r2, r6
 8013da8:	4639      	mov	r1, r7
 8013daa:	9b01      	ldr	r3, [sp, #4]
 8013dac:	f000 f8f2 	bl	8013f94 <rcutils_vsnprintf>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	db09      	blt.n	8013dc8 <rcutils_format_string_limit+0x68>
 8013db4:	2300      	movs	r3, #0
 8013db6:	5563      	strb	r3, [r4, r5]
 8013db8:	e000      	b.n	8013dbc <rcutils_format_string_limit+0x5c>
 8013dba:	2400      	movs	r4, #0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	b003      	add	sp, #12
 8013dc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013dc4:	b004      	add	sp, #16
 8013dc6:	4770      	bx	lr
 8013dc8:	4620      	mov	r0, r4
 8013dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013dce:	2400      	movs	r4, #0
 8013dd0:	4798      	blx	r3
 8013dd2:	e7f3      	b.n	8013dbc <rcutils_format_string_limit+0x5c>

08013dd4 <rcutils_repl_str>:
 8013dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd8:	ed2d 8b02 	vpush	{d8}
 8013ddc:	b087      	sub	sp, #28
 8013dde:	2600      	movs	r6, #0
 8013de0:	4680      	mov	r8, r0
 8013de2:	468a      	mov	sl, r1
 8013de4:	9000      	str	r0, [sp, #0]
 8013de6:	4608      	mov	r0, r1
 8013de8:	ee08 2a10 	vmov	s16, r2
 8013dec:	4699      	mov	r9, r3
 8013dee:	2510      	movs	r5, #16
 8013df0:	f7ec fa80 	bl	80002f4 <strlen>
 8013df4:	4637      	mov	r7, r6
 8013df6:	46b3      	mov	fp, r6
 8013df8:	9001      	str	r0, [sp, #4]
 8013dfa:	e01e      	b.n	8013e3a <rcutils_repl_str+0x66>
 8013dfc:	f10b 0b01 	add.w	fp, fp, #1
 8013e00:	9b01      	ldr	r3, [sp, #4]
 8013e02:	455e      	cmp	r6, fp
 8013e04:	eb04 0803 	add.w	r8, r4, r3
 8013e08:	d211      	bcs.n	8013e2e <rcutils_repl_str+0x5a>
 8013e0a:	442e      	add	r6, r5
 8013e0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013e10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e18:	00b1      	lsls	r1, r6, #2
 8013e1a:	4798      	blx	r3
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	f000 8088 	beq.w	8013f32 <rcutils_repl_str+0x15e>
 8013e22:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013e26:	4607      	mov	r7, r0
 8013e28:	bf28      	it	cs
 8013e2a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013e2e:	9a00      	ldr	r2, [sp, #0]
 8013e30:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8013e34:	1aa4      	subs	r4, r4, r2
 8013e36:	f843 4c04 	str.w	r4, [r3, #-4]
 8013e3a:	4651      	mov	r1, sl
 8013e3c:	4640      	mov	r0, r8
 8013e3e:	f003 fe72 	bl	8017b26 <strstr>
 8013e42:	4604      	mov	r4, r0
 8013e44:	4638      	mov	r0, r7
 8013e46:	2c00      	cmp	r4, #0
 8013e48:	d1d8      	bne.n	8013dfc <rcutils_repl_str+0x28>
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	f7ec fa52 	bl	80002f4 <strlen>
 8013e50:	9b00      	ldr	r3, [sp, #0]
 8013e52:	eba8 0803 	sub.w	r8, r8, r3
 8013e56:	eb08 0400 	add.w	r4, r8, r0
 8013e5a:	9402      	str	r4, [sp, #8]
 8013e5c:	f1bb 0f00 	cmp.w	fp, #0
 8013e60:	d045      	beq.n	8013eee <rcutils_repl_str+0x11a>
 8013e62:	ee18 0a10 	vmov	r0, s16
 8013e66:	f7ec fa45 	bl	80002f4 <strlen>
 8013e6a:	9a01      	ldr	r2, [sp, #4]
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8013e72:	1a82      	subs	r2, r0, r2
 8013e74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e78:	fb0b 4202 	mla	r2, fp, r2, r4
 8013e7c:	1c50      	adds	r0, r2, #1
 8013e7e:	9205      	str	r2, [sp, #20]
 8013e80:	4798      	blx	r3
 8013e82:	4682      	mov	sl, r0
 8013e84:	2800      	cmp	r0, #0
 8013e86:	d054      	beq.n	8013f32 <rcutils_repl_str+0x15e>
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	463d      	mov	r5, r7
 8013e8c:	9900      	ldr	r1, [sp, #0]
 8013e8e:	2401      	movs	r4, #1
 8013e90:	f003 ff41 	bl	8017d16 <memcpy>
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8013e9a:	eb0a 0803 	add.w	r8, sl, r3
 8013e9e:	ee18 7a10 	vmov	r7, s16
 8013ea2:	f8dd a000 	ldr.w	sl, [sp]
 8013ea6:	f8cd 9000 	str.w	r9, [sp]
 8013eaa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013eae:	4632      	mov	r2, r6
 8013eb0:	4639      	mov	r1, r7
 8013eb2:	4640      	mov	r0, r8
 8013eb4:	44b0      	add	r8, r6
 8013eb6:	f003 ff2e 	bl	8017d16 <memcpy>
 8013eba:	f855 2b04 	ldr.w	r2, [r5], #4
 8013ebe:	45a3      	cmp	fp, r4
 8013ec0:	444a      	add	r2, r9
 8013ec2:	eb0a 0102 	add.w	r1, sl, r2
 8013ec6:	d02a      	beq.n	8013f1e <rcutils_repl_str+0x14a>
 8013ec8:	6828      	ldr	r0, [r5, #0]
 8013eca:	1a82      	subs	r2, r0, r2
 8013ecc:	4640      	mov	r0, r8
 8013ece:	4490      	add	r8, r2
 8013ed0:	f003 ff21 	bl	8017d16 <memcpy>
 8013ed4:	1c62      	adds	r2, r4, #1
 8013ed6:	45a3      	cmp	fp, r4
 8013ed8:	4614      	mov	r4, r2
 8013eda:	d8e8      	bhi.n	8013eae <rcutils_repl_str+0xda>
 8013edc:	f8dd 9000 	ldr.w	r9, [sp]
 8013ee0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	9a05      	ldr	r2, [sp, #20]
 8013ee8:	f80a 3002 	strb.w	r3, [sl, r2]
 8013eec:	e00b      	b.n	8013f06 <rcutils_repl_str+0x132>
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f8d9 3000 	ldr.w	r3, [r9]
 8013ef4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013ef8:	3001      	adds	r0, #1
 8013efa:	4798      	blx	r3
 8013efc:	4682      	mov	sl, r0
 8013efe:	b110      	cbz	r0, 8013f06 <rcutils_repl_str+0x132>
 8013f00:	9900      	ldr	r1, [sp, #0]
 8013f02:	f003 ff00 	bl	8017d06 <strcpy>
 8013f06:	4638      	mov	r0, r7
 8013f08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013f10:	4798      	blx	r3
 8013f12:	4650      	mov	r0, sl
 8013f14:	b007      	add	sp, #28
 8013f16:	ecbd 8b02 	vpop	{d8}
 8013f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f1e:	9b02      	ldr	r3, [sp, #8]
 8013f20:	4640      	mov	r0, r8
 8013f22:	f8dd 9000 	ldr.w	r9, [sp]
 8013f26:	1a9a      	subs	r2, r3, r2
 8013f28:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013f2c:	f003 fef3 	bl	8017d16 <memcpy>
 8013f30:	e7d8      	b.n	8013ee4 <rcutils_repl_str+0x110>
 8013f32:	f04f 0a00 	mov.w	sl, #0
 8013f36:	e7e6      	b.n	8013f06 <rcutils_repl_str+0x132>

08013f38 <rcutils_snprintf>:
 8013f38:	b40c      	push	{r2, r3}
 8013f3a:	b530      	push	{r4, r5, lr}
 8013f3c:	b083      	sub	sp, #12
 8013f3e:	ab06      	add	r3, sp, #24
 8013f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	b1e2      	cbz	r2, 8013f82 <rcutils_snprintf+0x4a>
 8013f48:	fab0 f480 	clz	r4, r0
 8013f4c:	fab1 f581 	clz	r5, r1
 8013f50:	ea50 0c01 	orrs.w	ip, r0, r1
 8013f54:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8013f58:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8013f5c:	d008      	beq.n	8013f70 <rcutils_snprintf+0x38>
 8013f5e:	b984      	cbnz	r4, 8013f82 <rcutils_snprintf+0x4a>
 8013f60:	b97d      	cbnz	r5, 8013f82 <rcutils_snprintf+0x4a>
 8013f62:	f003 fdab 	bl	8017abc <vsniprintf>
 8013f66:	b003      	add	sp, #12
 8013f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f6c:	b002      	add	sp, #8
 8013f6e:	4770      	bx	lr
 8013f70:	4661      	mov	r1, ip
 8013f72:	4660      	mov	r0, ip
 8013f74:	f003 fda2 	bl	8017abc <vsniprintf>
 8013f78:	b003      	add	sp, #12
 8013f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f7e:	b002      	add	sp, #8
 8013f80:	4770      	bx	lr
 8013f82:	f003 fe93 	bl	8017cac <__errno>
 8013f86:	2216      	movs	r2, #22
 8013f88:	4603      	mov	r3, r0
 8013f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f8e:	601a      	str	r2, [r3, #0]
 8013f90:	e7e9      	b.n	8013f66 <rcutils_snprintf+0x2e>
 8013f92:	bf00      	nop

08013f94 <rcutils_vsnprintf>:
 8013f94:	b570      	push	{r4, r5, r6, lr}
 8013f96:	b1b2      	cbz	r2, 8013fc6 <rcutils_vsnprintf+0x32>
 8013f98:	fab0 f480 	clz	r4, r0
 8013f9c:	fab1 f581 	clz	r5, r1
 8013fa0:	ea50 0c01 	orrs.w	ip, r0, r1
 8013fa4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8013fa8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8013fac:	d005      	beq.n	8013fba <rcutils_vsnprintf+0x26>
 8013fae:	b954      	cbnz	r4, 8013fc6 <rcutils_vsnprintf+0x32>
 8013fb0:	b94d      	cbnz	r5, 8013fc6 <rcutils_vsnprintf+0x32>
 8013fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fb6:	f003 bd81 	b.w	8017abc <vsniprintf>
 8013fba:	4661      	mov	r1, ip
 8013fbc:	4660      	mov	r0, ip
 8013fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fc2:	f003 bd7b 	b.w	8017abc <vsniprintf>
 8013fc6:	f003 fe71 	bl	8017cac <__errno>
 8013fca:	2316      	movs	r3, #22
 8013fcc:	6003      	str	r3, [r0, #0]
 8013fce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fd2:	bd70      	pop	{r4, r5, r6, pc}

08013fd4 <rcutils_strdup>:
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	b570      	push	{r4, r5, r6, lr}
 8013fd8:	b082      	sub	sp, #8
 8013fda:	4605      	mov	r5, r0
 8013fdc:	ac07      	add	r4, sp, #28
 8013fde:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013fe2:	b1b0      	cbz	r0, 8014012 <rcutils_strdup+0x3e>
 8013fe4:	f7ec f986 	bl	80002f4 <strlen>
 8013fe8:	1c42      	adds	r2, r0, #1
 8013fea:	9b07      	ldr	r3, [sp, #28]
 8013fec:	4606      	mov	r6, r0
 8013fee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013ff0:	4610      	mov	r0, r2
 8013ff2:	9201      	str	r2, [sp, #4]
 8013ff4:	4798      	blx	r3
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	b128      	cbz	r0, 8014006 <rcutils_strdup+0x32>
 8013ffa:	9a01      	ldr	r2, [sp, #4]
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	f003 fe8a 	bl	8017d16 <memcpy>
 8014002:	2300      	movs	r3, #0
 8014004:	55a3      	strb	r3, [r4, r6]
 8014006:	4620      	mov	r0, r4
 8014008:	b002      	add	sp, #8
 801400a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801400e:	b004      	add	sp, #16
 8014010:	4770      	bx	lr
 8014012:	4604      	mov	r4, r0
 8014014:	e7f7      	b.n	8014006 <rcutils_strdup+0x32>
 8014016:	bf00      	nop

08014018 <rcutils_strndup>:
 8014018:	b082      	sub	sp, #8
 801401a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401c:	ac06      	add	r4, sp, #24
 801401e:	4605      	mov	r5, r0
 8014020:	e884 000c 	stmia.w	r4, {r2, r3}
 8014024:	b188      	cbz	r0, 801404a <rcutils_strndup+0x32>
 8014026:	1c4f      	adds	r7, r1, #1
 8014028:	460e      	mov	r6, r1
 801402a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801402c:	4638      	mov	r0, r7
 801402e:	4790      	blx	r2
 8014030:	4604      	mov	r4, r0
 8014032:	b128      	cbz	r0, 8014040 <rcutils_strndup+0x28>
 8014034:	463a      	mov	r2, r7
 8014036:	4629      	mov	r1, r5
 8014038:	f003 fe6d 	bl	8017d16 <memcpy>
 801403c:	2300      	movs	r3, #0
 801403e:	55a3      	strb	r3, [r4, r6]
 8014040:	4620      	mov	r0, r4
 8014042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014046:	b002      	add	sp, #8
 8014048:	4770      	bx	lr
 801404a:	4604      	mov	r4, r0
 801404c:	e7f8      	b.n	8014040 <rcutils_strndup+0x28>
 801404e:	bf00      	nop

08014050 <rcutils_get_zero_initialized_string_map>:
 8014050:	2000      	movs	r0, #0
 8014052:	4b01      	ldr	r3, [pc, #4]	@ (8014058 <rcutils_get_zero_initialized_string_map+0x8>)
 8014054:	6018      	str	r0, [r3, #0]
 8014056:	4770      	bx	lr
 8014058:	24068448 	.word	0x24068448

0801405c <rcutils_string_map_reserve>:
 801405c:	2800      	cmp	r0, #0
 801405e:	d05e      	beq.n	801411e <rcutils_string_map_reserve+0xc2>
 8014060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014064:	460c      	mov	r4, r1
 8014066:	6801      	ldr	r1, [r0, #0]
 8014068:	b082      	sub	sp, #8
 801406a:	4605      	mov	r5, r0
 801406c:	b129      	cbz	r1, 801407a <rcutils_string_map_reserve+0x1e>
 801406e:	68cb      	ldr	r3, [r1, #12]
 8014070:	42a3      	cmp	r3, r4
 8014072:	d906      	bls.n	8014082 <rcutils_string_map_reserve+0x26>
 8014074:	461c      	mov	r4, r3
 8014076:	2900      	cmp	r1, #0
 8014078:	d1f9      	bne.n	801406e <rcutils_string_map_reserve+0x12>
 801407a:	201f      	movs	r0, #31
 801407c:	b002      	add	sp, #8
 801407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014082:	688b      	ldr	r3, [r1, #8]
 8014084:	42a3      	cmp	r3, r4
 8014086:	d046      	beq.n	8014116 <rcutils_string_map_reserve+0xba>
 8014088:	6a0e      	ldr	r6, [r1, #32]
 801408a:	2c00      	cmp	r4, #0
 801408c:	d033      	beq.n	80140f6 <rcutils_string_map_reserve+0x9a>
 801408e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014092:	d242      	bcs.n	801411a <rcutils_string_map_reserve+0xbe>
 8014094:	00a7      	lsls	r7, r4, #2
 8014096:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801409a:	6808      	ldr	r0, [r1, #0]
 801409c:	4632      	mov	r2, r6
 801409e:	4639      	mov	r1, r7
 80140a0:	47c0      	blx	r8
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d039      	beq.n	801411a <rcutils_string_map_reserve+0xbe>
 80140a6:	682b      	ldr	r3, [r5, #0]
 80140a8:	4632      	mov	r2, r6
 80140aa:	4639      	mov	r1, r7
 80140ac:	6018      	str	r0, [r3, #0]
 80140ae:	6858      	ldr	r0, [r3, #4]
 80140b0:	47c0      	blx	r8
 80140b2:	2800      	cmp	r0, #0
 80140b4:	d031      	beq.n	801411a <rcutils_string_map_reserve+0xbe>
 80140b6:	682d      	ldr	r5, [r5, #0]
 80140b8:	68ab      	ldr	r3, [r5, #8]
 80140ba:	6068      	str	r0, [r5, #4]
 80140bc:	42a3      	cmp	r3, r4
 80140be:	d225      	bcs.n	801410c <rcutils_string_map_reserve+0xb0>
 80140c0:	682a      	ldr	r2, [r5, #0]
 80140c2:	eb00 0c07 	add.w	ip, r0, r7
 80140c6:	0099      	lsls	r1, r3, #2
 80140c8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80140cc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80140d0:	45e6      	cmp	lr, ip
 80140d2:	d203      	bcs.n	80140dc <rcutils_string_map_reserve+0x80>
 80140d4:	eb02 0c07 	add.w	ip, r2, r7
 80140d8:	4566      	cmp	r6, ip
 80140da:	d322      	bcc.n	8014122 <rcutils_string_map_reserve+0xc6>
 80140dc:	1ae3      	subs	r3, r4, r3
 80140de:	4670      	mov	r0, lr
 80140e0:	2100      	movs	r1, #0
 80140e2:	009a      	lsls	r2, r3, #2
 80140e4:	9201      	str	r2, [sp, #4]
 80140e6:	f003 fcf7 	bl	8017ad8 <memset>
 80140ea:	9a01      	ldr	r2, [sp, #4]
 80140ec:	2100      	movs	r1, #0
 80140ee:	4630      	mov	r0, r6
 80140f0:	f003 fcf2 	bl	8017ad8 <memset>
 80140f4:	e00a      	b.n	801410c <rcutils_string_map_reserve+0xb0>
 80140f6:	694f      	ldr	r7, [r1, #20]
 80140f8:	6808      	ldr	r0, [r1, #0]
 80140fa:	4631      	mov	r1, r6
 80140fc:	47b8      	blx	r7
 80140fe:	682b      	ldr	r3, [r5, #0]
 8014100:	4631      	mov	r1, r6
 8014102:	6858      	ldr	r0, [r3, #4]
 8014104:	601c      	str	r4, [r3, #0]
 8014106:	47b8      	blx	r7
 8014108:	682d      	ldr	r5, [r5, #0]
 801410a:	606c      	str	r4, [r5, #4]
 801410c:	2000      	movs	r0, #0
 801410e:	60ac      	str	r4, [r5, #8]
 8014110:	b002      	add	sp, #8
 8014112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014116:	2000      	movs	r0, #0
 8014118:	e7b0      	b.n	801407c <rcutils_string_map_reserve+0x20>
 801411a:	200a      	movs	r0, #10
 801411c:	e7ae      	b.n	801407c <rcutils_string_map_reserve+0x20>
 801411e:	200b      	movs	r0, #11
 8014120:	4770      	bx	lr
 8014122:	1f0b      	subs	r3, r1, #4
 8014124:	4418      	add	r0, r3
 8014126:	4413      	add	r3, r2
 8014128:	3a04      	subs	r2, #4
 801412a:	4417      	add	r7, r2
 801412c:	2200      	movs	r2, #0
 801412e:	f843 2f04 	str.w	r2, [r3, #4]!
 8014132:	42bb      	cmp	r3, r7
 8014134:	f840 2f04 	str.w	r2, [r0, #4]!
 8014138:	d1f9      	bne.n	801412e <rcutils_string_map_reserve+0xd2>
 801413a:	e7e7      	b.n	801410c <rcutils_string_map_reserve+0xb0>

0801413c <rcutils_string_map_init>:
 801413c:	b082      	sub	sp, #8
 801413e:	b570      	push	{r4, r5, r6, lr}
 8014140:	ac04      	add	r4, sp, #16
 8014142:	e884 000c 	stmia.w	r4, {r2, r3}
 8014146:	b380      	cbz	r0, 80141aa <rcutils_string_map_init+0x6e>
 8014148:	6806      	ldr	r6, [r0, #0]
 801414a:	4604      	mov	r4, r0
 801414c:	b12e      	cbz	r6, 801415a <rcutils_string_map_init+0x1e>
 801414e:	251e      	movs	r5, #30
 8014150:	4628      	mov	r0, r5
 8014152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014156:	b002      	add	sp, #8
 8014158:	4770      	bx	lr
 801415a:	a804      	add	r0, sp, #16
 801415c:	460d      	mov	r5, r1
 801415e:	f7fa fbc7 	bl	800e8f0 <rcutils_allocator_is_valid>
 8014162:	b310      	cbz	r0, 80141aa <rcutils_string_map_init+0x6e>
 8014164:	9b04      	ldr	r3, [sp, #16]
 8014166:	2024      	movs	r0, #36	@ 0x24
 8014168:	9908      	ldr	r1, [sp, #32]
 801416a:	4798      	blx	r3
 801416c:	6020      	str	r0, [r4, #0]
 801416e:	b310      	cbz	r0, 80141b6 <rcutils_string_map_init+0x7a>
 8014170:	f10d 0e10 	add.w	lr, sp, #16
 8014174:	f100 0c10 	add.w	ip, r0, #16
 8014178:	e9c0 6600 	strd	r6, r6, [r0]
 801417c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014188:	f8de 3000 	ldr.w	r3, [lr]
 801418c:	4629      	mov	r1, r5
 801418e:	4620      	mov	r0, r4
 8014190:	f8cc 3000 	str.w	r3, [ip]
 8014194:	f7ff ff62 	bl	801405c <rcutils_string_map_reserve>
 8014198:	4605      	mov	r5, r0
 801419a:	2800      	cmp	r0, #0
 801419c:	d0d8      	beq.n	8014150 <rcutils_string_map_init+0x14>
 801419e:	9b05      	ldr	r3, [sp, #20]
 80141a0:	9908      	ldr	r1, [sp, #32]
 80141a2:	6820      	ldr	r0, [r4, #0]
 80141a4:	4798      	blx	r3
 80141a6:	6026      	str	r6, [r4, #0]
 80141a8:	e7d2      	b.n	8014150 <rcutils_string_map_init+0x14>
 80141aa:	250b      	movs	r5, #11
 80141ac:	4628      	mov	r0, r5
 80141ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141b2:	b002      	add	sp, #8
 80141b4:	4770      	bx	lr
 80141b6:	250a      	movs	r5, #10
 80141b8:	e7ca      	b.n	8014150 <rcutils_string_map_init+0x14>
 80141ba:	bf00      	nop

080141bc <rcutils_string_map_fini>:
 80141bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d03a      	beq.n	801423c <rcutils_string_map_fini+0x80>
 80141c6:	6804      	ldr	r4, [r0, #0]
 80141c8:	4606      	mov	r6, r0
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	d032      	beq.n	8014234 <rcutils_string_map_fini+0x78>
 80141ce:	68a3      	ldr	r3, [r4, #8]
 80141d0:	b32b      	cbz	r3, 801421e <rcutils_string_map_fini+0x62>
 80141d2:	2500      	movs	r5, #0
 80141d4:	6822      	ldr	r2, [r4, #0]
 80141d6:	462f      	mov	r7, r5
 80141d8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80141dc:	b1e0      	cbz	r0, 8014218 <rcutils_string_map_fini+0x5c>
 80141de:	6a21      	ldr	r1, [r4, #32]
 80141e0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80141e4:	9101      	str	r1, [sp, #4]
 80141e6:	47c0      	blx	r8
 80141e8:	9901      	ldr	r1, [sp, #4]
 80141ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80141ee:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80141f2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80141f6:	47c0      	blx	r8
 80141f8:	68e3      	ldr	r3, [r4, #12]
 80141fa:	6862      	ldr	r2, [r4, #4]
 80141fc:	3b01      	subs	r3, #1
 80141fe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014202:	3501      	adds	r5, #1
 8014204:	60e3      	str	r3, [r4, #12]
 8014206:	6834      	ldr	r4, [r6, #0]
 8014208:	68a3      	ldr	r3, [r4, #8]
 801420a:	429d      	cmp	r5, r3
 801420c:	d207      	bcs.n	801421e <rcutils_string_map_fini+0x62>
 801420e:	6822      	ldr	r2, [r4, #0]
 8014210:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014214:	2800      	cmp	r0, #0
 8014216:	d1e2      	bne.n	80141de <rcutils_string_map_fini+0x22>
 8014218:	3501      	adds	r5, #1
 801421a:	429d      	cmp	r5, r3
 801421c:	d3dc      	bcc.n	80141d8 <rcutils_string_map_fini+0x1c>
 801421e:	2100      	movs	r1, #0
 8014220:	4630      	mov	r0, r6
 8014222:	f7ff ff1b 	bl	801405c <rcutils_string_map_reserve>
 8014226:	4604      	mov	r4, r0
 8014228:	b920      	cbnz	r0, 8014234 <rcutils_string_map_fini+0x78>
 801422a:	6830      	ldr	r0, [r6, #0]
 801422c:	6943      	ldr	r3, [r0, #20]
 801422e:	6a01      	ldr	r1, [r0, #32]
 8014230:	4798      	blx	r3
 8014232:	6034      	str	r4, [r6, #0]
 8014234:	4620      	mov	r0, r4
 8014236:	b002      	add	sp, #8
 8014238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801423c:	240b      	movs	r4, #11
 801423e:	4620      	mov	r0, r4
 8014240:	b002      	add	sp, #8
 8014242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014246:	bf00      	nop

08014248 <rcutils_string_map_getn>:
 8014248:	b378      	cbz	r0, 80142aa <rcutils_string_map_getn+0x62>
 801424a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424e:	f8d0 b000 	ldr.w	fp, [r0]
 8014252:	f1bb 0f00 	cmp.w	fp, #0
 8014256:	d01f      	beq.n	8014298 <rcutils_string_map_getn+0x50>
 8014258:	fab1 f481 	clz	r4, r1
 801425c:	4688      	mov	r8, r1
 801425e:	0964      	lsrs	r4, r4, #5
 8014260:	b1d1      	cbz	r1, 8014298 <rcutils_string_map_getn+0x50>
 8014262:	f8db 7008 	ldr.w	r7, [fp, #8]
 8014266:	f8db 6000 	ldr.w	r6, [fp]
 801426a:	b1af      	cbz	r7, 8014298 <rcutils_string_map_getn+0x50>
 801426c:	4691      	mov	r9, r2
 801426e:	3e04      	subs	r6, #4
 8014270:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014274:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8014278:	3401      	adds	r4, #1
 801427a:	4628      	mov	r0, r5
 801427c:	b155      	cbz	r5, 8014294 <rcutils_string_map_getn+0x4c>
 801427e:	f7ec f839 	bl	80002f4 <strlen>
 8014282:	4602      	mov	r2, r0
 8014284:	4629      	mov	r1, r5
 8014286:	4640      	mov	r0, r8
 8014288:	454a      	cmp	r2, r9
 801428a:	bf38      	it	cc
 801428c:	464a      	movcc	r2, r9
 801428e:	f003 fc38 	bl	8017b02 <strncmp>
 8014292:	b120      	cbz	r0, 801429e <rcutils_string_map_getn+0x56>
 8014294:	42a7      	cmp	r7, r4
 8014296:	d1eb      	bne.n	8014270 <rcutils_string_map_getn+0x28>
 8014298:	2000      	movs	r0, #0
 801429a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801429e:	f8db 3004 	ldr.w	r3, [fp, #4]
 80142a2:	f853 000a 	ldr.w	r0, [r3, sl]
 80142a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142aa:	4770      	bx	lr

080142ac <rcutils_system_time_now>:
 80142ac:	b300      	cbz	r0, 80142f0 <rcutils_system_time_now+0x44>
 80142ae:	b570      	push	{r4, r5, r6, lr}
 80142b0:	b084      	sub	sp, #16
 80142b2:	4604      	mov	r4, r0
 80142b4:	2001      	movs	r0, #1
 80142b6:	4669      	mov	r1, sp
 80142b8:	f7ed fa26 	bl	8001708 <clock_gettime>
 80142bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80142c0:	2900      	cmp	r1, #0
 80142c2:	db12      	blt.n	80142ea <rcutils_system_time_now+0x3e>
 80142c4:	ea53 0201 	orrs.w	r2, r3, r1
 80142c8:	9d02      	ldr	r5, [sp, #8]
 80142ca:	d101      	bne.n	80142d0 <rcutils_system_time_now+0x24>
 80142cc:	2d00      	cmp	r5, #0
 80142ce:	db0c      	blt.n	80142ea <rcutils_system_time_now+0x3e>
 80142d0:	4e08      	ldr	r6, [pc, #32]	@ (80142f4 <rcutils_system_time_now+0x48>)
 80142d2:	2000      	movs	r0, #0
 80142d4:	fba3 3206 	umull	r3, r2, r3, r6
 80142d8:	195b      	adds	r3, r3, r5
 80142da:	fb06 2201 	mla	r2, r6, r1, r2
 80142de:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80142e2:	e9c4 3200 	strd	r3, r2, [r4]
 80142e6:	b004      	add	sp, #16
 80142e8:	bd70      	pop	{r4, r5, r6, pc}
 80142ea:	2002      	movs	r0, #2
 80142ec:	b004      	add	sp, #16
 80142ee:	bd70      	pop	{r4, r5, r6, pc}
 80142f0:	200b      	movs	r0, #11
 80142f2:	4770      	bx	lr
 80142f4:	3b9aca00 	.word	0x3b9aca00

080142f8 <rcutils_steady_time_now>:
 80142f8:	b300      	cbz	r0, 801433c <rcutils_steady_time_now+0x44>
 80142fa:	b570      	push	{r4, r5, r6, lr}
 80142fc:	b084      	sub	sp, #16
 80142fe:	4604      	mov	r4, r0
 8014300:	2000      	movs	r0, #0
 8014302:	4669      	mov	r1, sp
 8014304:	f7ed fa00 	bl	8001708 <clock_gettime>
 8014308:	e9dd 3100 	ldrd	r3, r1, [sp]
 801430c:	2900      	cmp	r1, #0
 801430e:	db12      	blt.n	8014336 <rcutils_steady_time_now+0x3e>
 8014310:	ea53 0201 	orrs.w	r2, r3, r1
 8014314:	9d02      	ldr	r5, [sp, #8]
 8014316:	d101      	bne.n	801431c <rcutils_steady_time_now+0x24>
 8014318:	2d00      	cmp	r5, #0
 801431a:	db0c      	blt.n	8014336 <rcutils_steady_time_now+0x3e>
 801431c:	4e08      	ldr	r6, [pc, #32]	@ (8014340 <rcutils_steady_time_now+0x48>)
 801431e:	2000      	movs	r0, #0
 8014320:	fba3 3206 	umull	r3, r2, r3, r6
 8014324:	195b      	adds	r3, r3, r5
 8014326:	fb06 2201 	mla	r2, r6, r1, r2
 801432a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801432e:	e9c4 3200 	strd	r3, r2, [r4]
 8014332:	b004      	add	sp, #16
 8014334:	bd70      	pop	{r4, r5, r6, pc}
 8014336:	2002      	movs	r0, #2
 8014338:	b004      	add	sp, #16
 801433a:	bd70      	pop	{r4, r5, r6, pc}
 801433c:	200b      	movs	r0, #11
 801433e:	4770      	bx	lr
 8014340:	3b9aca00 	.word	0x3b9aca00
 8014344:	00000000 	.word	0x00000000

08014348 <rmw_get_zero_initialized_context>:
 8014348:	b510      	push	{r4, lr}
 801434a:	4604      	mov	r4, r0
 801434c:	3010      	adds	r0, #16
 801434e:	f000 f80f 	bl	8014370 <rmw_get_zero_initialized_init_options>
 8014352:	2300      	movs	r3, #0
 8014354:	4620      	mov	r0, r4
 8014356:	60a3      	str	r3, [r4, #8]
 8014358:	64a3      	str	r3, [r4, #72]	@ 0x48
 801435a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801435c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8014368 <rmw_get_zero_initialized_context+0x20>
 8014360:	ed84 7b00 	vstr	d7, [r4]
 8014364:	bd10      	pop	{r4, pc}
 8014366:	bf00      	nop
	...

08014370 <rmw_get_zero_initialized_init_options>:
 8014370:	b510      	push	{r4, lr}
 8014372:	4604      	mov	r4, r0
 8014374:	2238      	movs	r2, #56	@ 0x38
 8014376:	2100      	movs	r1, #0
 8014378:	f003 fbae 	bl	8017ad8 <memset>
 801437c:	f104 0010 	add.w	r0, r4, #16
 8014380:	f000 f806 	bl	8014390 <rmw_get_default_security_options>
 8014384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014388:	4620      	mov	r0, r4
 801438a:	60e3      	str	r3, [r4, #12]
 801438c:	bd10      	pop	{r4, pc}
 801438e:	bf00      	nop

08014390 <rmw_get_default_security_options>:
 8014390:	2200      	movs	r2, #0
 8014392:	7002      	strb	r2, [r0, #0]
 8014394:	6042      	str	r2, [r0, #4]
 8014396:	4770      	bx	lr

08014398 <rmw_validate_full_topic_name>:
 8014398:	2800      	cmp	r0, #0
 801439a:	d05d      	beq.n	8014458 <rmw_validate_full_topic_name+0xc0>
 801439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a0:	460d      	mov	r5, r1
 80143a2:	2900      	cmp	r1, #0
 80143a4:	d05a      	beq.n	801445c <rmw_validate_full_topic_name+0xc4>
 80143a6:	4604      	mov	r4, r0
 80143a8:	4616      	mov	r6, r2
 80143aa:	f7eb ffa3 	bl	80002f4 <strlen>
 80143ae:	b150      	cbz	r0, 80143c6 <rmw_validate_full_topic_name+0x2e>
 80143b0:	7823      	ldrb	r3, [r4, #0]
 80143b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80143b4:	d00e      	beq.n	80143d4 <rmw_validate_full_topic_name+0x3c>
 80143b6:	2302      	movs	r3, #2
 80143b8:	602b      	str	r3, [r5, #0]
 80143ba:	b146      	cbz	r6, 80143ce <rmw_validate_full_topic_name+0x36>
 80143bc:	2300      	movs	r3, #0
 80143be:	4618      	mov	r0, r3
 80143c0:	6033      	str	r3, [r6, #0]
 80143c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143c6:	2301      	movs	r3, #1
 80143c8:	602b      	str	r3, [r5, #0]
 80143ca:	2e00      	cmp	r6, #0
 80143cc:	d1f6      	bne.n	80143bc <rmw_validate_full_topic_name+0x24>
 80143ce:	2000      	movs	r0, #0
 80143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d4:	1e43      	subs	r3, r0, #1
 80143d6:	5ce2      	ldrb	r2, [r4, r3]
 80143d8:	2a2f      	cmp	r2, #47	@ 0x2f
 80143da:	d041      	beq.n	8014460 <rmw_validate_full_topic_name+0xc8>
 80143dc:	1e62      	subs	r2, r4, #1
 80143de:	f1c4 0e01 	rsb	lr, r4, #1
 80143e2:	eb02 0800 	add.w	r8, r2, r0
 80143e6:	eb0e 0702 	add.w	r7, lr, r2
 80143ea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80143ee:	f023 0120 	bic.w	r1, r3, #32
 80143f2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80143f6:	3941      	subs	r1, #65	@ 0x41
 80143f8:	2919      	cmp	r1, #25
 80143fa:	d90f      	bls.n	801441c <rmw_validate_full_topic_name+0x84>
 80143fc:	f1bc 0f0a 	cmp.w	ip, #10
 8014400:	d90c      	bls.n	801441c <rmw_validate_full_topic_name+0x84>
 8014402:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8014406:	fab3 f383 	clz	r3, r3
 801440a:	095b      	lsrs	r3, r3, #5
 801440c:	b933      	cbnz	r3, 801441c <rmw_validate_full_topic_name+0x84>
 801440e:	2204      	movs	r2, #4
 8014410:	602a      	str	r2, [r5, #0]
 8014412:	2e00      	cmp	r6, #0
 8014414:	d0db      	beq.n	80143ce <rmw_validate_full_topic_name+0x36>
 8014416:	4618      	mov	r0, r3
 8014418:	6037      	str	r7, [r6, #0]
 801441a:	e7d2      	b.n	80143c2 <rmw_validate_full_topic_name+0x2a>
 801441c:	4542      	cmp	r2, r8
 801441e:	d1e2      	bne.n	80143e6 <rmw_validate_full_topic_name+0x4e>
 8014420:	2301      	movs	r3, #1
 8014422:	4f1a      	ldr	r7, [pc, #104]	@ (801448c <rmw_validate_full_topic_name+0xf4>)
 8014424:	e004      	b.n	8014430 <rmw_validate_full_topic_name+0x98>
 8014426:	4298      	cmp	r0, r3
 8014428:	f104 0401 	add.w	r4, r4, #1
 801442c:	4613      	mov	r3, r2
 801442e:	d91c      	bls.n	801446a <rmw_validate_full_topic_name+0xd2>
 8014430:	4298      	cmp	r0, r3
 8014432:	f103 0201 	add.w	r2, r3, #1
 8014436:	d0f6      	beq.n	8014426 <rmw_validate_full_topic_name+0x8e>
 8014438:	7821      	ldrb	r1, [r4, #0]
 801443a:	292f      	cmp	r1, #47	@ 0x2f
 801443c:	d1f3      	bne.n	8014426 <rmw_validate_full_topic_name+0x8e>
 801443e:	7861      	ldrb	r1, [r4, #1]
 8014440:	292f      	cmp	r1, #47	@ 0x2f
 8014442:	d01e      	beq.n	8014482 <rmw_validate_full_topic_name+0xea>
 8014444:	5dc9      	ldrb	r1, [r1, r7]
 8014446:	0749      	lsls	r1, r1, #29
 8014448:	d5ed      	bpl.n	8014426 <rmw_validate_full_topic_name+0x8e>
 801444a:	2206      	movs	r2, #6
 801444c:	602a      	str	r2, [r5, #0]
 801444e:	2e00      	cmp	r6, #0
 8014450:	d0bd      	beq.n	80143ce <rmw_validate_full_topic_name+0x36>
 8014452:	2000      	movs	r0, #0
 8014454:	6033      	str	r3, [r6, #0]
 8014456:	e7b4      	b.n	80143c2 <rmw_validate_full_topic_name+0x2a>
 8014458:	200b      	movs	r0, #11
 801445a:	4770      	bx	lr
 801445c:	200b      	movs	r0, #11
 801445e:	e7b0      	b.n	80143c2 <rmw_validate_full_topic_name+0x2a>
 8014460:	2203      	movs	r2, #3
 8014462:	602a      	str	r2, [r5, #0]
 8014464:	2e00      	cmp	r6, #0
 8014466:	d1f4      	bne.n	8014452 <rmw_validate_full_topic_name+0xba>
 8014468:	e7b1      	b.n	80143ce <rmw_validate_full_topic_name+0x36>
 801446a:	28f7      	cmp	r0, #247	@ 0xf7
 801446c:	d803      	bhi.n	8014476 <rmw_validate_full_topic_name+0xde>
 801446e:	2300      	movs	r3, #0
 8014470:	4618      	mov	r0, r3
 8014472:	602b      	str	r3, [r5, #0]
 8014474:	e7a5      	b.n	80143c2 <rmw_validate_full_topic_name+0x2a>
 8014476:	2307      	movs	r3, #7
 8014478:	602b      	str	r3, [r5, #0]
 801447a:	2e00      	cmp	r6, #0
 801447c:	d0a7      	beq.n	80143ce <rmw_validate_full_topic_name+0x36>
 801447e:	23f6      	movs	r3, #246	@ 0xf6
 8014480:	e7e7      	b.n	8014452 <rmw_validate_full_topic_name+0xba>
 8014482:	2205      	movs	r2, #5
 8014484:	602a      	str	r2, [r5, #0]
 8014486:	2e00      	cmp	r6, #0
 8014488:	d1e3      	bne.n	8014452 <rmw_validate_full_topic_name+0xba>
 801448a:	e7a0      	b.n	80143ce <rmw_validate_full_topic_name+0x36>
 801448c:	08019564 	.word	0x08019564

08014490 <rmw_validate_namespace_with_size>:
 8014490:	2800      	cmp	r0, #0
 8014492:	d043      	beq.n	801451c <rmw_validate_namespace_with_size+0x8c>
 8014494:	b570      	push	{r4, r5, r6, lr}
 8014496:	4614      	mov	r4, r2
 8014498:	b0c2      	sub	sp, #264	@ 0x108
 801449a:	b32a      	cbz	r2, 80144e8 <rmw_validate_namespace_with_size+0x58>
 801449c:	2901      	cmp	r1, #1
 801449e:	460d      	mov	r5, r1
 80144a0:	461e      	mov	r6, r3
 80144a2:	d102      	bne.n	80144aa <rmw_validate_namespace_with_size+0x1a>
 80144a4:	7803      	ldrb	r3, [r0, #0]
 80144a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80144a8:	d012      	beq.n	80144d0 <rmw_validate_namespace_with_size+0x40>
 80144aa:	aa01      	add	r2, sp, #4
 80144ac:	4669      	mov	r1, sp
 80144ae:	f7ff ff73 	bl	8014398 <rmw_validate_full_topic_name>
 80144b2:	b980      	cbnz	r0, 80144d6 <rmw_validate_namespace_with_size+0x46>
 80144b4:	9a00      	ldr	r2, [sp, #0]
 80144b6:	b14a      	cbz	r2, 80144cc <rmw_validate_namespace_with_size+0x3c>
 80144b8:	2a07      	cmp	r2, #7
 80144ba:	d007      	beq.n	80144cc <rmw_validate_namespace_with_size+0x3c>
 80144bc:	1e53      	subs	r3, r2, #1
 80144be:	2b05      	cmp	r3, #5
 80144c0:	d82e      	bhi.n	8014520 <rmw_validate_namespace_with_size+0x90>
 80144c2:	e8df f003 	tbb	[pc, r3]
 80144c6:	1f1c      	.short	0x1f1c
 80144c8:	14282522 	.word	0x14282522
 80144cc:	2df5      	cmp	r5, #245	@ 0xf5
 80144ce:	d804      	bhi.n	80144da <rmw_validate_namespace_with_size+0x4a>
 80144d0:	2300      	movs	r3, #0
 80144d2:	4618      	mov	r0, r3
 80144d4:	6023      	str	r3, [r4, #0]
 80144d6:	b042      	add	sp, #264	@ 0x108
 80144d8:	bd70      	pop	{r4, r5, r6, pc}
 80144da:	2307      	movs	r3, #7
 80144dc:	6023      	str	r3, [r4, #0]
 80144de:	2e00      	cmp	r6, #0
 80144e0:	d0f9      	beq.n	80144d6 <rmw_validate_namespace_with_size+0x46>
 80144e2:	23f4      	movs	r3, #244	@ 0xf4
 80144e4:	6033      	str	r3, [r6, #0]
 80144e6:	e7f6      	b.n	80144d6 <rmw_validate_namespace_with_size+0x46>
 80144e8:	200b      	movs	r0, #11
 80144ea:	b042      	add	sp, #264	@ 0x108
 80144ec:	bd70      	pop	{r4, r5, r6, pc}
 80144ee:	2306      	movs	r3, #6
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	2e00      	cmp	r6, #0
 80144f4:	d0ef      	beq.n	80144d6 <rmw_validate_namespace_with_size+0x46>
 80144f6:	9b01      	ldr	r3, [sp, #4]
 80144f8:	6033      	str	r3, [r6, #0]
 80144fa:	b042      	add	sp, #264	@ 0x108
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
 80144fe:	2301      	movs	r3, #1
 8014500:	6023      	str	r3, [r4, #0]
 8014502:	e7f6      	b.n	80144f2 <rmw_validate_namespace_with_size+0x62>
 8014504:	2302      	movs	r3, #2
 8014506:	6023      	str	r3, [r4, #0]
 8014508:	e7f3      	b.n	80144f2 <rmw_validate_namespace_with_size+0x62>
 801450a:	2303      	movs	r3, #3
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	e7f0      	b.n	80144f2 <rmw_validate_namespace_with_size+0x62>
 8014510:	2304      	movs	r3, #4
 8014512:	6023      	str	r3, [r4, #0]
 8014514:	e7ed      	b.n	80144f2 <rmw_validate_namespace_with_size+0x62>
 8014516:	2305      	movs	r3, #5
 8014518:	6023      	str	r3, [r4, #0]
 801451a:	e7ea      	b.n	80144f2 <rmw_validate_namespace_with_size+0x62>
 801451c:	200b      	movs	r0, #11
 801451e:	4770      	bx	lr
 8014520:	4613      	mov	r3, r2
 8014522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014526:	4a03      	ldr	r2, [pc, #12]	@ (8014534 <rmw_validate_namespace_with_size+0xa4>)
 8014528:	a802      	add	r0, sp, #8
 801452a:	f7ff fd05 	bl	8013f38 <rcutils_snprintf>
 801452e:	2001      	movs	r0, #1
 8014530:	e7d1      	b.n	80144d6 <rmw_validate_namespace_with_size+0x46>
 8014532:	bf00      	nop
 8014534:	08018f6c 	.word	0x08018f6c

08014538 <rmw_validate_namespace>:
 8014538:	b168      	cbz	r0, 8014556 <rmw_validate_namespace+0x1e>
 801453a:	b570      	push	{r4, r5, r6, lr}
 801453c:	460d      	mov	r5, r1
 801453e:	4616      	mov	r6, r2
 8014540:	4604      	mov	r4, r0
 8014542:	f7eb fed7 	bl	80002f4 <strlen>
 8014546:	4633      	mov	r3, r6
 8014548:	4601      	mov	r1, r0
 801454a:	462a      	mov	r2, r5
 801454c:	4620      	mov	r0, r4
 801454e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014552:	f7ff bf9d 	b.w	8014490 <rmw_validate_namespace_with_size>
 8014556:	200b      	movs	r0, #11
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop

0801455c <rmw_namespace_validation_result_string>:
 801455c:	2807      	cmp	r0, #7
 801455e:	d803      	bhi.n	8014568 <rmw_namespace_validation_result_string+0xc>
 8014560:	4b02      	ldr	r3, [pc, #8]	@ (801456c <rmw_namespace_validation_result_string+0x10>)
 8014562:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014566:	4770      	bx	lr
 8014568:	4801      	ldr	r0, [pc, #4]	@ (8014570 <rmw_namespace_validation_result_string+0x14>)
 801456a:	4770      	bx	lr
 801456c:	08019164 	.word	0x08019164
 8014570:	08018fbc 	.word	0x08018fbc

08014574 <rmw_validate_node_name>:
 8014574:	2800      	cmp	r0, #0
 8014576:	d042      	beq.n	80145fe <rmw_validate_node_name+0x8a>
 8014578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457c:	460d      	mov	r5, r1
 801457e:	2900      	cmp	r1, #0
 8014580:	d03f      	beq.n	8014602 <rmw_validate_node_name+0x8e>
 8014582:	4604      	mov	r4, r0
 8014584:	4616      	mov	r6, r2
 8014586:	f7eb feb5 	bl	80002f4 <strlen>
 801458a:	b310      	cbz	r0, 80145d2 <rmw_validate_node_name+0x5e>
 801458c:	1e63      	subs	r3, r4, #1
 801458e:	f1c4 0101 	rsb	r1, r4, #1
 8014592:	eb03 0800 	add.w	r8, r3, r0
 8014596:	18cf      	adds	r7, r1, r3
 8014598:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801459c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80145a0:	f02e 0c20 	bic.w	ip, lr, #32
 80145a4:	2a09      	cmp	r2, #9
 80145a6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80145aa:	d905      	bls.n	80145b8 <rmw_validate_node_name+0x44>
 80145ac:	f1bc 0f19 	cmp.w	ip, #25
 80145b0:	d902      	bls.n	80145b8 <rmw_validate_node_name+0x44>
 80145b2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80145b6:	d114      	bne.n	80145e2 <rmw_validate_node_name+0x6e>
 80145b8:	4598      	cmp	r8, r3
 80145ba:	d1ec      	bne.n	8014596 <rmw_validate_node_name+0x22>
 80145bc:	7822      	ldrb	r2, [r4, #0]
 80145be:	4b16      	ldr	r3, [pc, #88]	@ (8014618 <rmw_validate_node_name+0xa4>)
 80145c0:	5cd3      	ldrb	r3, [r2, r3]
 80145c2:	f013 0304 	ands.w	r3, r3, #4
 80145c6:	d113      	bne.n	80145f0 <rmw_validate_node_name+0x7c>
 80145c8:	28ff      	cmp	r0, #255	@ 0xff
 80145ca:	d81c      	bhi.n	8014606 <rmw_validate_node_name+0x92>
 80145cc:	4618      	mov	r0, r3
 80145ce:	602b      	str	r3, [r5, #0]
 80145d0:	e00c      	b.n	80145ec <rmw_validate_node_name+0x78>
 80145d2:	2301      	movs	r3, #1
 80145d4:	602b      	str	r3, [r5, #0]
 80145d6:	b17e      	cbz	r6, 80145f8 <rmw_validate_node_name+0x84>
 80145d8:	2300      	movs	r3, #0
 80145da:	4618      	mov	r0, r3
 80145dc:	6033      	str	r3, [r6, #0]
 80145de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e2:	2302      	movs	r3, #2
 80145e4:	602b      	str	r3, [r5, #0]
 80145e6:	b13e      	cbz	r6, 80145f8 <rmw_validate_node_name+0x84>
 80145e8:	2000      	movs	r0, #0
 80145ea:	6037      	str	r7, [r6, #0]
 80145ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145f0:	2303      	movs	r3, #3
 80145f2:	602b      	str	r3, [r5, #0]
 80145f4:	2e00      	cmp	r6, #0
 80145f6:	d1ef      	bne.n	80145d8 <rmw_validate_node_name+0x64>
 80145f8:	2000      	movs	r0, #0
 80145fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145fe:	200b      	movs	r0, #11
 8014600:	4770      	bx	lr
 8014602:	200b      	movs	r0, #11
 8014604:	e7f2      	b.n	80145ec <rmw_validate_node_name+0x78>
 8014606:	2204      	movs	r2, #4
 8014608:	602a      	str	r2, [r5, #0]
 801460a:	2e00      	cmp	r6, #0
 801460c:	d0f4      	beq.n	80145f8 <rmw_validate_node_name+0x84>
 801460e:	22fe      	movs	r2, #254	@ 0xfe
 8014610:	4618      	mov	r0, r3
 8014612:	6032      	str	r2, [r6, #0]
 8014614:	e7ea      	b.n	80145ec <rmw_validate_node_name+0x78>
 8014616:	bf00      	nop
 8014618:	08019564 	.word	0x08019564

0801461c <rmw_node_name_validation_result_string>:
 801461c:	2804      	cmp	r0, #4
 801461e:	d803      	bhi.n	8014628 <rmw_node_name_validation_result_string+0xc>
 8014620:	4b02      	ldr	r3, [pc, #8]	@ (801462c <rmw_node_name_validation_result_string+0x10>)
 8014622:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014626:	4770      	bx	lr
 8014628:	4801      	ldr	r0, [pc, #4]	@ (8014630 <rmw_node_name_validation_result_string+0x14>)
 801462a:	4770      	bx	lr
 801462c:	08019270 	.word	0x08019270
 8014630:	08019184 	.word	0x08019184

08014634 <get_memory>:
 8014634:	4603      	mov	r3, r0
 8014636:	6840      	ldr	r0, [r0, #4]
 8014638:	b158      	cbz	r0, 8014652 <get_memory+0x1e>
 801463a:	6842      	ldr	r2, [r0, #4]
 801463c:	605a      	str	r2, [r3, #4]
 801463e:	b10a      	cbz	r2, 8014644 <get_memory+0x10>
 8014640:	2100      	movs	r1, #0
 8014642:	6011      	str	r1, [r2, #0]
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	6042      	str	r2, [r0, #4]
 8014648:	b102      	cbz	r2, 801464c <get_memory+0x18>
 801464a:	6010      	str	r0, [r2, #0]
 801464c:	2200      	movs	r2, #0
 801464e:	6002      	str	r2, [r0, #0]
 8014650:	6018      	str	r0, [r3, #0]
 8014652:	4770      	bx	lr

08014654 <put_memory>:
 8014654:	680b      	ldr	r3, [r1, #0]
 8014656:	b10b      	cbz	r3, 801465c <put_memory+0x8>
 8014658:	684a      	ldr	r2, [r1, #4]
 801465a:	605a      	str	r2, [r3, #4]
 801465c:	684a      	ldr	r2, [r1, #4]
 801465e:	b102      	cbz	r2, 8014662 <put_memory+0xe>
 8014660:	6013      	str	r3, [r2, #0]
 8014662:	6803      	ldr	r3, [r0, #0]
 8014664:	428b      	cmp	r3, r1
 8014666:	6843      	ldr	r3, [r0, #4]
 8014668:	bf08      	it	eq
 801466a:	6002      	streq	r2, [r0, #0]
 801466c:	604b      	str	r3, [r1, #4]
 801466e:	b103      	cbz	r3, 8014672 <put_memory+0x1e>
 8014670:	6019      	str	r1, [r3, #0]
 8014672:	2300      	movs	r3, #0
 8014674:	600b      	str	r3, [r1, #0]
 8014676:	6041      	str	r1, [r0, #4]
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop

0801467c <rmw_get_implementation_identifier>:
 801467c:	4b01      	ldr	r3, [pc, #4]	@ (8014684 <rmw_get_implementation_identifier+0x8>)
 801467e:	6818      	ldr	r0, [r3, #0]
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	0801929c 	.word	0x0801929c

08014688 <rmw_init_options_init>:
 8014688:	b084      	sub	sp, #16
 801468a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468c:	b083      	sub	sp, #12
 801468e:	ad09      	add	r5, sp, #36	@ 0x24
 8014690:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014694:	b130      	cbz	r0, 80146a4 <rmw_init_options_init+0x1c>
 8014696:	4604      	mov	r4, r0
 8014698:	4628      	mov	r0, r5
 801469a:	f7fa f929 	bl	800e8f0 <rcutils_allocator_is_valid>
 801469e:	b108      	cbz	r0, 80146a4 <rmw_init_options_init+0x1c>
 80146a0:	68a6      	ldr	r6, [r4, #8]
 80146a2:	b12e      	cbz	r6, 80146b0 <rmw_init_options_init+0x28>
 80146a4:	200b      	movs	r0, #11
 80146a6:	b003      	add	sp, #12
 80146a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80146ac:	b004      	add	sp, #16
 80146ae:	4770      	bx	lr
 80146b0:	2200      	movs	r2, #0
 80146b2:	2300      	movs	r3, #0
 80146b4:	f104 0c20 	add.w	ip, r4, #32
 80146b8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8014754 <rmw_init_options_init+0xcc>
 80146bc:	466f      	mov	r7, sp
 80146be:	e9c4 2300 	strd	r2, r3, [r4]
 80146c2:	4b20      	ldr	r3, [pc, #128]	@ (8014744 <rmw_init_options_init+0xbc>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	60a3      	str	r3, [r4, #8]
 80146c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146ce:	682b      	ldr	r3, [r5, #0]
 80146d0:	4638      	mov	r0, r7
 80146d2:	f8cc 3000 	str.w	r3, [ip]
 80146d6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80146da:	60e6      	str	r6, [r4, #12]
 80146dc:	f7ff fe58 	bl	8014390 <rmw_get_default_security_options>
 80146e0:	f104 0310 	add.w	r3, r4, #16
 80146e4:	2203      	movs	r2, #3
 80146e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80146ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80146ee:	4816      	ldr	r0, [pc, #88]	@ (8014748 <rmw_init_options_init+0xc0>)
 80146f0:	4916      	ldr	r1, [pc, #88]	@ (801474c <rmw_init_options_init+0xc4>)
 80146f2:	7626      	strb	r6, [r4, #24]
 80146f4:	f7fa fc26 	bl	800ef44 <rmw_uxrce_init_init_options_impl_memory>
 80146f8:	4813      	ldr	r0, [pc, #76]	@ (8014748 <rmw_init_options_init+0xc0>)
 80146fa:	f7ff ff9b 	bl	8014634 <get_memory>
 80146fe:	b1f0      	cbz	r0, 801473e <rmw_init_options_init+0xb6>
 8014700:	4a13      	ldr	r2, [pc, #76]	@ (8014750 <rmw_init_options_init+0xc8>)
 8014702:	6883      	ldr	r3, [r0, #8]
 8014704:	6851      	ldr	r1, [r2, #4]
 8014706:	6363      	str	r3, [r4, #52]	@ 0x34
 8014708:	7810      	ldrb	r0, [r2, #0]
 801470a:	6159      	str	r1, [r3, #20]
 801470c:	68d1      	ldr	r1, [r2, #12]
 801470e:	7418      	strb	r0, [r3, #16]
 8014710:	61d9      	str	r1, [r3, #28]
 8014712:	6911      	ldr	r1, [r2, #16]
 8014714:	6219      	str	r1, [r3, #32]
 8014716:	6951      	ldr	r1, [r2, #20]
 8014718:	6892      	ldr	r2, [r2, #8]
 801471a:	6259      	str	r1, [r3, #36]	@ 0x24
 801471c:	619a      	str	r2, [r3, #24]
 801471e:	f7fd fa63 	bl	8011be8 <uxr_nanos>
 8014722:	f002 ff4d 	bl	80175c0 <srand>
 8014726:	f002 ff79 	bl	801761c <rand>
 801472a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801472c:	6298      	str	r0, [r3, #40]	@ 0x28
 801472e:	2800      	cmp	r0, #0
 8014730:	d0f9      	beq.n	8014726 <rmw_init_options_init+0x9e>
 8014732:	2000      	movs	r0, #0
 8014734:	b003      	add	sp, #12
 8014736:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801473a:	b004      	add	sp, #16
 801473c:	4770      	bx	lr
 801473e:	2001      	movs	r0, #1
 8014740:	e7b1      	b.n	80146a6 <rmw_init_options_init+0x1e>
 8014742:	bf00      	nop
 8014744:	0801929c 	.word	0x0801929c
 8014748:	2406839c 	.word	0x2406839c
 801474c:	24063c38 	.word	0x24063c38
 8014750:	24063ac4 	.word	0x24063ac4
 8014754:	08018e3c 	.word	0x08018e3c

08014758 <rmw_init_options_copy>:
 8014758:	2800      	cmp	r0, #0
 801475a:	d047      	beq.n	80147ec <rmw_init_options_copy+0x94>
 801475c:	b570      	push	{r4, r5, r6, lr}
 801475e:	460d      	mov	r5, r1
 8014760:	b149      	cbz	r1, 8014776 <rmw_init_options_copy+0x1e>
 8014762:	4604      	mov	r4, r0
 8014764:	6880      	ldr	r0, [r0, #8]
 8014766:	b120      	cbz	r0, 8014772 <rmw_init_options_copy+0x1a>
 8014768:	4b22      	ldr	r3, [pc, #136]	@ (80147f4 <rmw_init_options_copy+0x9c>)
 801476a:	6819      	ldr	r1, [r3, #0]
 801476c:	f7eb fdb8 	bl	80002e0 <strcmp>
 8014770:	bba8      	cbnz	r0, 80147de <rmw_init_options_copy+0x86>
 8014772:	68ab      	ldr	r3, [r5, #8]
 8014774:	b11b      	cbz	r3, 801477e <rmw_init_options_copy+0x26>
 8014776:	f04f 0c0b 	mov.w	ip, #11
 801477a:	4660      	mov	r0, ip
 801477c:	bd70      	pop	{r4, r5, r6, pc}
 801477e:	4623      	mov	r3, r4
 8014780:	462a      	mov	r2, r5
 8014782:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8014786:	f8d3 e000 	ldr.w	lr, [r3]
 801478a:	3310      	adds	r3, #16
 801478c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8014790:	3210      	adds	r2, #16
 8014792:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8014796:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801479a:	42b3      	cmp	r3, r6
 801479c:	f842 ec10 	str.w	lr, [r2, #-16]
 80147a0:	f842 cc0c 	str.w	ip, [r2, #-12]
 80147a4:	f842 0c08 	str.w	r0, [r2, #-8]
 80147a8:	f842 1c04 	str.w	r1, [r2, #-4]
 80147ac:	d1eb      	bne.n	8014786 <rmw_init_options_copy+0x2e>
 80147ae:	6819      	ldr	r1, [r3, #0]
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	4811      	ldr	r0, [pc, #68]	@ (80147f8 <rmw_init_options_copy+0xa0>)
 80147b4:	6011      	str	r1, [r2, #0]
 80147b6:	6053      	str	r3, [r2, #4]
 80147b8:	f7ff ff3c 	bl	8014634 <get_memory>
 80147bc:	b198      	cbz	r0, 80147e6 <rmw_init_options_copy+0x8e>
 80147be:	6883      	ldr	r3, [r0, #8]
 80147c0:	f04f 0c00 	mov.w	ip, #0
 80147c4:	636b      	str	r3, [r5, #52]	@ 0x34
 80147c6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80147c8:	f103 0410 	add.w	r4, r3, #16
 80147cc:	3510      	adds	r5, #16
 80147ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80147d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80147da:	4660      	mov	r0, ip
 80147dc:	bd70      	pop	{r4, r5, r6, pc}
 80147de:	f04f 0c0c 	mov.w	ip, #12
 80147e2:	4660      	mov	r0, ip
 80147e4:	bd70      	pop	{r4, r5, r6, pc}
 80147e6:	f04f 0c01 	mov.w	ip, #1
 80147ea:	e7c6      	b.n	801477a <rmw_init_options_copy+0x22>
 80147ec:	f04f 0c0b 	mov.w	ip, #11
 80147f0:	4660      	mov	r0, ip
 80147f2:	4770      	bx	lr
 80147f4:	0801929c 	.word	0x0801929c
 80147f8:	2406839c 	.word	0x2406839c

080147fc <rmw_init_options_fini>:
 80147fc:	b510      	push	{r4, lr}
 80147fe:	b08e      	sub	sp, #56	@ 0x38
 8014800:	b388      	cbz	r0, 8014866 <rmw_init_options_fini+0x6a>
 8014802:	4604      	mov	r4, r0
 8014804:	3020      	adds	r0, #32
 8014806:	f7fa f873 	bl	800e8f0 <rcutils_allocator_is_valid>
 801480a:	b360      	cbz	r0, 8014866 <rmw_init_options_fini+0x6a>
 801480c:	68a0      	ldr	r0, [r4, #8]
 801480e:	b120      	cbz	r0, 801481a <rmw_init_options_fini+0x1e>
 8014810:	4b1a      	ldr	r3, [pc, #104]	@ (801487c <rmw_init_options_fini+0x80>)
 8014812:	6819      	ldr	r1, [r3, #0]
 8014814:	f7eb fd64 	bl	80002e0 <strcmp>
 8014818:	bb68      	cbnz	r0, 8014876 <rmw_init_options_fini+0x7a>
 801481a:	4b19      	ldr	r3, [pc, #100]	@ (8014880 <rmw_init_options_fini+0x84>)
 801481c:	6819      	ldr	r1, [r3, #0]
 801481e:	b331      	cbz	r1, 801486e <rmw_init_options_fini+0x72>
 8014820:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8014822:	e001      	b.n	8014828 <rmw_init_options_fini+0x2c>
 8014824:	6849      	ldr	r1, [r1, #4]
 8014826:	b311      	cbz	r1, 801486e <rmw_init_options_fini+0x72>
 8014828:	688b      	ldr	r3, [r1, #8]
 801482a:	429a      	cmp	r2, r3
 801482c:	d1fa      	bne.n	8014824 <rmw_init_options_fini+0x28>
 801482e:	4814      	ldr	r0, [pc, #80]	@ (8014880 <rmw_init_options_fini+0x84>)
 8014830:	f7ff ff10 	bl	8014654 <put_memory>
 8014834:	4668      	mov	r0, sp
 8014836:	f7ff fd9b 	bl	8014370 <rmw_get_zero_initialized_init_options>
 801483a:	46ee      	mov	lr, sp
 801483c:	46a4      	mov	ip, r4
 801483e:	2400      	movs	r4, #0
 8014840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014848:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801484c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014850:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014858:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801485c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014860:	4620      	mov	r0, r4
 8014862:	b00e      	add	sp, #56	@ 0x38
 8014864:	bd10      	pop	{r4, pc}
 8014866:	240b      	movs	r4, #11
 8014868:	4620      	mov	r0, r4
 801486a:	b00e      	add	sp, #56	@ 0x38
 801486c:	bd10      	pop	{r4, pc}
 801486e:	2401      	movs	r4, #1
 8014870:	4620      	mov	r0, r4
 8014872:	b00e      	add	sp, #56	@ 0x38
 8014874:	bd10      	pop	{r4, pc}
 8014876:	240c      	movs	r4, #12
 8014878:	e7f2      	b.n	8014860 <rmw_init_options_fini+0x64>
 801487a:	bf00      	nop
 801487c:	0801929c 	.word	0x0801929c
 8014880:	2406839c 	.word	0x2406839c

08014884 <rmw_init>:
 8014884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014888:	b083      	sub	sp, #12
 801488a:	2800      	cmp	r0, #0
 801488c:	f000 80d3 	beq.w	8014a36 <rmw_init+0x1b2>
 8014890:	460e      	mov	r6, r1
 8014892:	2900      	cmp	r1, #0
 8014894:	f000 80cf 	beq.w	8014a36 <rmw_init+0x1b2>
 8014898:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801489a:	4605      	mov	r5, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	f000 80ca 	beq.w	8014a36 <rmw_init+0x1b2>
 80148a2:	4b78      	ldr	r3, [pc, #480]	@ (8014a84 <rmw_init+0x200>)
 80148a4:	6880      	ldr	r0, [r0, #8]
 80148a6:	681f      	ldr	r7, [r3, #0]
 80148a8:	b128      	cbz	r0, 80148b6 <rmw_init+0x32>
 80148aa:	4639      	mov	r1, r7
 80148ac:	f7eb fd18 	bl	80002e0 <strcmp>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	f040 80ca 	bne.w	8014a4a <rmw_init+0x1c6>
 80148b6:	4c74      	ldr	r4, [pc, #464]	@ (8014a88 <rmw_init+0x204>)
 80148b8:	f04f 0800 	mov.w	r8, #0
 80148bc:	4973      	ldr	r1, [pc, #460]	@ (8014a8c <rmw_init+0x208>)
 80148be:	4874      	ldr	r0, [pc, #464]	@ (8014a90 <rmw_init+0x20c>)
 80148c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80148c4:	60b7      	str	r7, [r6, #8]
 80148c6:	e9c6 2300 	strd	r2, r3, [r6]
 80148ca:	68eb      	ldr	r3, [r5, #12]
 80148cc:	2201      	movs	r2, #1
 80148ce:	64b3      	str	r3, [r6, #72]	@ 0x48
 80148d0:	f7fa fad8 	bl	800ee84 <rmw_uxrce_init_session_memory>
 80148d4:	4620      	mov	r0, r4
 80148d6:	2204      	movs	r2, #4
 80148d8:	496e      	ldr	r1, [pc, #440]	@ (8014a94 <rmw_init+0x210>)
 80148da:	f7fa fb13 	bl	800ef04 <rmw_uxrce_init_static_input_buffer_memory>
 80148de:	486c      	ldr	r0, [pc, #432]	@ (8014a90 <rmw_init+0x20c>)
 80148e0:	f884 800d 	strb.w	r8, [r4, #13]
 80148e4:	f7ff fea6 	bl	8014634 <get_memory>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	f000 80a9 	beq.w	8014a40 <rmw_init+0x1bc>
 80148ee:	6884      	ldr	r4, [r0, #8]
 80148f0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80148f2:	f104 0910 	add.w	r9, r4, #16
 80148f6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80148f8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80148fc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014900:	9101      	str	r1, [sp, #4]
 8014902:	4661      	mov	r1, ip
 8014904:	6a00      	ldr	r0, [r0, #32]
 8014906:	9000      	str	r0, [sp, #0]
 8014908:	4648      	mov	r0, r9
 801490a:	f000 fdbb 	bl	8015484 <uxr_set_custom_transport_callbacks>
 801490e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014912:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8014916:	4960      	ldr	r1, [pc, #384]	@ (8014a98 <rmw_init+0x214>)
 8014918:	4860      	ldr	r0, [pc, #384]	@ (8014a9c <rmw_init+0x218>)
 801491a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801491e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8014922:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014926:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801492a:	2201      	movs	r2, #1
 801492c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8014930:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014934:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014938:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801493c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801493e:	f7fa fa81 	bl	800ee44 <rmw_uxrce_init_node_memory>
 8014942:	2205      	movs	r2, #5
 8014944:	4956      	ldr	r1, [pc, #344]	@ (8014aa0 <rmw_init+0x21c>)
 8014946:	4857      	ldr	r0, [pc, #348]	@ (8014aa4 <rmw_init+0x220>)
 8014948:	f7fa fa5c 	bl	800ee04 <rmw_uxrce_init_subscription_memory>
 801494c:	220a      	movs	r2, #10
 801494e:	4956      	ldr	r1, [pc, #344]	@ (8014aa8 <rmw_init+0x224>)
 8014950:	4856      	ldr	r0, [pc, #344]	@ (8014aac <rmw_init+0x228>)
 8014952:	f7fa fa37 	bl	800edc4 <rmw_uxrce_init_publisher_memory>
 8014956:	2201      	movs	r2, #1
 8014958:	4955      	ldr	r1, [pc, #340]	@ (8014ab0 <rmw_init+0x22c>)
 801495a:	4856      	ldr	r0, [pc, #344]	@ (8014ab4 <rmw_init+0x230>)
 801495c:	f7fa f9f2 	bl	800ed44 <rmw_uxrce_init_service_memory>
 8014960:	2201      	movs	r2, #1
 8014962:	4955      	ldr	r1, [pc, #340]	@ (8014ab8 <rmw_init+0x234>)
 8014964:	4855      	ldr	r0, [pc, #340]	@ (8014abc <rmw_init+0x238>)
 8014966:	f7fa fa0d 	bl	800ed84 <rmw_uxrce_init_client_memory>
 801496a:	220f      	movs	r2, #15
 801496c:	4954      	ldr	r1, [pc, #336]	@ (8014ac0 <rmw_init+0x23c>)
 801496e:	4855      	ldr	r0, [pc, #340]	@ (8014ac4 <rmw_init+0x240>)
 8014970:	f7fa faa8 	bl	800eec4 <rmw_uxrce_init_topic_memory>
 8014974:	2203      	movs	r2, #3
 8014976:	4954      	ldr	r1, [pc, #336]	@ (8014ac8 <rmw_init+0x244>)
 8014978:	4854      	ldr	r0, [pc, #336]	@ (8014acc <rmw_init+0x248>)
 801497a:	f7fa fae3 	bl	800ef44 <rmw_uxrce_init_init_options_impl_memory>
 801497e:	2204      	movs	r2, #4
 8014980:	4953      	ldr	r1, [pc, #332]	@ (8014ad0 <rmw_init+0x24c>)
 8014982:	4854      	ldr	r0, [pc, #336]	@ (8014ad4 <rmw_init+0x250>)
 8014984:	f7fa fafe 	bl	800ef84 <rmw_uxrce_init_wait_set_memory>
 8014988:	4953      	ldr	r1, [pc, #332]	@ (8014ad8 <rmw_init+0x254>)
 801498a:	4854      	ldr	r0, [pc, #336]	@ (8014adc <rmw_init+0x258>)
 801498c:	2204      	movs	r2, #4
 801498e:	f7fa fb19 	bl	800efc4 <rmw_uxrce_init_guard_condition_memory>
 8014992:	4642      	mov	r2, r8
 8014994:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8014996:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8014998:	f000 fb0a 	bl	8014fb0 <rmw_uxrce_transport_init>
 801499c:	4607      	mov	r7, r0
 801499e:	2800      	cmp	r0, #0
 80149a0:	d158      	bne.n	8014a54 <rmw_init+0x1d0>
 80149a2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80149a4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80149a8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80149ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80149ae:	4628      	mov	r0, r5
 80149b0:	f7fb ff56 	bl	8010860 <uxr_init_session>
 80149b4:	4622      	mov	r2, r4
 80149b6:	494a      	ldr	r1, [pc, #296]	@ (8014ae0 <rmw_init+0x25c>)
 80149b8:	4628      	mov	r0, r5
 80149ba:	f7fb ff75 	bl	80108a8 <uxr_set_topic_callback>
 80149be:	463a      	mov	r2, r7
 80149c0:	4948      	ldr	r1, [pc, #288]	@ (8014ae4 <rmw_init+0x260>)
 80149c2:	4628      	mov	r0, r5
 80149c4:	f7fb ff6c 	bl	80108a0 <uxr_set_status_callback>
 80149c8:	463a      	mov	r2, r7
 80149ca:	4947      	ldr	r1, [pc, #284]	@ (8014ae8 <rmw_init+0x264>)
 80149cc:	4628      	mov	r0, r5
 80149ce:	f7fb ff6f 	bl	80108b0 <uxr_set_request_callback>
 80149d2:	463a      	mov	r2, r7
 80149d4:	4945      	ldr	r1, [pc, #276]	@ (8014aec <rmw_init+0x268>)
 80149d6:	4628      	mov	r0, r5
 80149d8:	f7fb ff6e 	bl	80108b8 <uxr_set_reply_callback>
 80149dc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80149e0:	2304      	movs	r3, #4
 80149e2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80149e6:	0092      	lsls	r2, r2, #2
 80149e8:	4628      	mov	r0, r5
 80149ea:	f7fb ffa5 	bl	8010938 <uxr_create_input_reliable_stream>
 80149ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80149f2:	2304      	movs	r3, #4
 80149f4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80149f8:	0092      	lsls	r2, r2, #2
 80149fa:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80149fe:	4628      	mov	r0, r5
 8014a00:	f7fb ff70 	bl	80108e4 <uxr_create_output_reliable_stream>
 8014a04:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7fb ff8f 	bl	801092c <uxr_create_input_best_effort_stream>
 8014a0e:	f241 3194 	movw	r1, #5012	@ 0x1394
 8014a12:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8014a16:	4628      	mov	r0, r5
 8014a18:	4421      	add	r1, r4
 8014a1a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014a1e:	f7fb ff4f 	bl	80108c0 <uxr_create_output_best_effort_stream>
 8014a22:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014a26:	4628      	mov	r0, r5
 8014a28:	f7fc fcf2 	bl	8011410 <uxr_create_session>
 8014a2c:	b1f8      	cbz	r0, 8014a6e <rmw_init+0x1ea>
 8014a2e:	4638      	mov	r0, r7
 8014a30:	b003      	add	sp, #12
 8014a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a36:	270b      	movs	r7, #11
 8014a38:	4638      	mov	r0, r7
 8014a3a:	b003      	add	sp, #12
 8014a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a40:	2701      	movs	r7, #1
 8014a42:	4638      	mov	r0, r7
 8014a44:	b003      	add	sp, #12
 8014a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a4a:	270c      	movs	r7, #12
 8014a4c:	4638      	mov	r0, r7
 8014a4e:	b003      	add	sp, #12
 8014a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a54:	4648      	mov	r0, r9
 8014a56:	f000 fd53 	bl	8015500 <uxr_close_custom_transport>
 8014a5a:	4621      	mov	r1, r4
 8014a5c:	480c      	ldr	r0, [pc, #48]	@ (8014a90 <rmw_init+0x20c>)
 8014a5e:	f7ff fdf9 	bl	8014654 <put_memory>
 8014a62:	4638      	mov	r0, r7
 8014a64:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8014a68:	b003      	add	sp, #12
 8014a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a6e:	4648      	mov	r0, r9
 8014a70:	f000 fd46 	bl	8015500 <uxr_close_custom_transport>
 8014a74:	4621      	mov	r1, r4
 8014a76:	4806      	ldr	r0, [pc, #24]	@ (8014a90 <rmw_init+0x20c>)
 8014a78:	f7ff fdec 	bl	8014654 <put_memory>
 8014a7c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8014a7e:	2701      	movs	r7, #1
 8014a80:	e7d5      	b.n	8014a2e <rmw_init+0x1aa>
 8014a82:	bf00      	nop
 8014a84:	0801929c 	.word	0x0801929c
 8014a88:	240683ec 	.word	0x240683ec
 8014a8c:	24064698 	.word	0x24064698
 8014a90:	240683dc 	.word	0x240683dc
 8014a94:	24065c40 	.word	0x24065c40
 8014a98:	24063cbc 	.word	0x24063cbc
 8014a9c:	240683ac 	.word	0x240683ac
 8014aa0:	24067d40 	.word	0x24067d40
 8014aa4:	240683fc 	.word	0x240683fc
 8014aa8:	24063d60 	.word	0x24063d60
 8014aac:	240683bc 	.word	0x240683bc
 8014ab0:	240645d0 	.word	0x240645d0
 8014ab4:	240683cc 	.word	0x240683cc
 8014ab8:	24063af0 	.word	0x24063af0
 8014abc:	24063ae0 	.word	0x24063ae0
 8014ac0:	24068178 	.word	0x24068178
 8014ac4:	2406840c 	.word	0x2406840c
 8014ac8:	24063c38 	.word	0x24063c38
 8014acc:	2406839c 	.word	0x2406839c
 8014ad0:	2406831c 	.word	0x2406831c
 8014ad4:	2406841c 	.word	0x2406841c
 8014ad8:	24063bb8 	.word	0x24063bb8
 8014adc:	2406838c 	.word	0x2406838c
 8014ae0:	080170d9 	.word	0x080170d9
 8014ae4:	080170d1 	.word	0x080170d1
 8014ae8:	08017171 	.word	0x08017171
 8014aec:	0801720d 	.word	0x0801720d

08014af0 <rmw_context_fini>:
 8014af0:	4b17      	ldr	r3, [pc, #92]	@ (8014b50 <rmw_context_fini+0x60>)
 8014af2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	681c      	ldr	r4, [r3, #0]
 8014af8:	4605      	mov	r5, r0
 8014afa:	b334      	cbz	r4, 8014b4a <rmw_context_fini+0x5a>
 8014afc:	2600      	movs	r6, #0
 8014afe:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014b02:	6902      	ldr	r2, [r0, #16]
 8014b04:	428a      	cmp	r2, r1
 8014b06:	d018      	beq.n	8014b3a <rmw_context_fini+0x4a>
 8014b08:	2c00      	cmp	r4, #0
 8014b0a:	d1f8      	bne.n	8014afe <rmw_context_fini+0xe>
 8014b0c:	b189      	cbz	r1, 8014b32 <rmw_context_fini+0x42>
 8014b0e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8014b12:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8014b16:	789b      	ldrb	r3, [r3, #2]
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	bf14      	ite	ne
 8014b1c:	210a      	movne	r1, #10
 8014b1e:	2100      	moveq	r1, #0
 8014b20:	f7fc fc4e 	bl	80113c0 <uxr_delete_session_retries>
 8014b24:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014b26:	f7fa fa6d 	bl	800f004 <rmw_uxrce_fini_session_memory>
 8014b2a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8014b2c:	3010      	adds	r0, #16
 8014b2e:	f000 fce7 	bl	8015500 <uxr_close_custom_transport>
 8014b32:	2300      	movs	r3, #0
 8014b34:	4630      	mov	r0, r6
 8014b36:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8014b38:	bd70      	pop	{r4, r5, r6, pc}
 8014b3a:	3018      	adds	r0, #24
 8014b3c:	f000 f90e 	bl	8014d5c <rmw_destroy_node>
 8014b40:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8014b42:	4606      	mov	r6, r0
 8014b44:	2c00      	cmp	r4, #0
 8014b46:	d1da      	bne.n	8014afe <rmw_context_fini+0xe>
 8014b48:	e7e0      	b.n	8014b0c <rmw_context_fini+0x1c>
 8014b4a:	4626      	mov	r6, r4
 8014b4c:	e7de      	b.n	8014b0c <rmw_context_fini+0x1c>
 8014b4e:	bf00      	nop
 8014b50:	240683ac 	.word	0x240683ac

08014b54 <create_topic>:
 8014b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b58:	4605      	mov	r5, r0
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	4822      	ldr	r0, [pc, #136]	@ (8014be8 <create_topic+0x94>)
 8014b5e:	460f      	mov	r7, r1
 8014b60:	4616      	mov	r6, r2
 8014b62:	f7ff fd67 	bl	8014634 <get_memory>
 8014b66:	4604      	mov	r4, r0
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d039      	beq.n	8014be0 <create_topic+0x8c>
 8014b6c:	692b      	ldr	r3, [r5, #16]
 8014b6e:	2102      	movs	r1, #2
 8014b70:	6884      	ldr	r4, [r0, #8]
 8014b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b76:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8014bf0 <create_topic+0x9c>
 8014b7a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014b7e:	1c42      	adds	r2, r0, #1
 8014b80:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014b84:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014b88:	f7fb fdac 	bl	80106e4 <uxr_object_id>
 8014b8c:	223c      	movs	r2, #60	@ 0x3c
 8014b8e:	6120      	str	r0, [r4, #16]
 8014b90:	4641      	mov	r1, r8
 8014b92:	4638      	mov	r0, r7
 8014b94:	f7fa fb74 	bl	800f280 <generate_topic_name>
 8014b98:	b1f0      	cbz	r0, 8014bd8 <create_topic+0x84>
 8014b9a:	4f14      	ldr	r7, [pc, #80]	@ (8014bec <create_topic+0x98>)
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	2264      	movs	r2, #100	@ 0x64
 8014ba0:	4639      	mov	r1, r7
 8014ba2:	f7fa fb3f 	bl	800f224 <generate_type_name>
 8014ba6:	b1b8      	cbz	r0, 8014bd8 <create_topic+0x84>
 8014ba8:	6928      	ldr	r0, [r5, #16]
 8014baa:	2106      	movs	r1, #6
 8014bac:	696b      	ldr	r3, [r5, #20]
 8014bae:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014bb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014bb6:	f8cd 8000 	str.w	r8, [sp]
 8014bba:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8014bbe:	6811      	ldr	r1, [r2, #0]
 8014bc0:	6922      	ldr	r2, [r4, #16]
 8014bc2:	f7fb fcb3 	bl	801052c <uxr_buffer_create_topic_bin>
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	6928      	ldr	r0, [r5, #16]
 8014bca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014bce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014bd2:	f7fa faf3 	bl	800f1bc <run_xrce_session>
 8014bd6:	b918      	cbnz	r0, 8014be0 <create_topic+0x8c>
 8014bd8:	4620      	mov	r0, r4
 8014bda:	2400      	movs	r4, #0
 8014bdc:	f7fa fa88 	bl	800f0f0 <rmw_uxrce_fini_topic_memory>
 8014be0:	4620      	mov	r0, r4
 8014be2:	b004      	add	sp, #16
 8014be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014be8:	2406840c 	.word	0x2406840c
 8014bec:	24068488 	.word	0x24068488
 8014bf0:	2406844c 	.word	0x2406844c

08014bf4 <destroy_topic>:
 8014bf4:	b538      	push	{r3, r4, r5, lr}
 8014bf6:	6985      	ldr	r5, [r0, #24]
 8014bf8:	b1dd      	cbz	r5, 8014c32 <destroy_topic+0x3e>
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	6928      	ldr	r0, [r5, #16]
 8014bfe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014c02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c06:	6922      	ldr	r2, [r4, #16]
 8014c08:	6819      	ldr	r1, [r3, #0]
 8014c0a:	f7fb fc11 	bl	8010430 <uxr_buffer_delete_entity>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	6928      	ldr	r0, [r5, #16]
 8014c12:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014c16:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014c1a:	f7fa facf 	bl	800f1bc <run_xrce_session>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	4620      	mov	r0, r4
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bf14      	ite	ne
 8014c26:	2400      	movne	r4, #0
 8014c28:	2402      	moveq	r4, #2
 8014c2a:	f7fa fa61 	bl	800f0f0 <rmw_uxrce_fini_topic_memory>
 8014c2e:	4620      	mov	r0, r4
 8014c30:	bd38      	pop	{r3, r4, r5, pc}
 8014c32:	2401      	movs	r4, #1
 8014c34:	4620      	mov	r0, r4
 8014c36:	bd38      	pop	{r3, r4, r5, pc}

08014c38 <create_node>:
 8014c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c3c:	b083      	sub	sp, #12
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d064      	beq.n	8014d0c <create_node+0xd4>
 8014c42:	4606      	mov	r6, r0
 8014c44:	4838      	ldr	r0, [pc, #224]	@ (8014d28 <create_node+0xf0>)
 8014c46:	460f      	mov	r7, r1
 8014c48:	4690      	mov	r8, r2
 8014c4a:	461d      	mov	r5, r3
 8014c4c:	f7ff fcf2 	bl	8014634 <get_memory>
 8014c50:	2800      	cmp	r0, #0
 8014c52:	d05b      	beq.n	8014d0c <create_node+0xd4>
 8014c54:	6884      	ldr	r4, [r0, #8]
 8014c56:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014c58:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014c5c:	f104 0518 	add.w	r5, r4, #24
 8014c60:	6123      	str	r3, [r4, #16]
 8014c62:	f7ff fd0b 	bl	801467c <rmw_get_implementation_identifier>
 8014c66:	f8c4 9020 	str.w	r9, [r4, #32]
 8014c6a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014c6e:	4630      	mov	r0, r6
 8014c70:	f7eb fb40 	bl	80002f4 <strlen>
 8014c74:	1c42      	adds	r2, r0, #1
 8014c76:	2a3c      	cmp	r2, #60	@ 0x3c
 8014c78:	d840      	bhi.n	8014cfc <create_node+0xc4>
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014c80:	4631      	mov	r1, r6
 8014c82:	f003 f848 	bl	8017d16 <memcpy>
 8014c86:	4638      	mov	r0, r7
 8014c88:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014c8c:	f7eb fb32 	bl	80002f4 <strlen>
 8014c90:	1c42      	adds	r2, r0, #1
 8014c92:	2a3c      	cmp	r2, #60	@ 0x3c
 8014c94:	d832      	bhi.n	8014cfc <create_node+0xc4>
 8014c96:	4639      	mov	r1, r7
 8014c98:	4648      	mov	r0, r9
 8014c9a:	f003 f83c 	bl	8017d16 <memcpy>
 8014c9e:	6923      	ldr	r3, [r4, #16]
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014ca6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8014caa:	1842      	adds	r2, r0, r1
 8014cac:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014cb0:	f7fb fd18 	bl	80106e4 <uxr_object_id>
 8014cb4:	6160      	str	r0, [r4, #20]
 8014cb6:	783b      	ldrb	r3, [r7, #0]
 8014cb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8014cba:	d12c      	bne.n	8014d16 <create_node+0xde>
 8014cbc:	787b      	ldrb	r3, [r7, #1]
 8014cbe:	bb53      	cbnz	r3, 8014d16 <create_node+0xde>
 8014cc0:	4633      	mov	r3, r6
 8014cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8014d2c <create_node+0xf4>)
 8014cc4:	213c      	movs	r1, #60	@ 0x3c
 8014cc6:	481a      	ldr	r0, [pc, #104]	@ (8014d30 <create_node+0xf8>)
 8014cc8:	f002 fe56 	bl	8017978 <sniprintf>
 8014ccc:	6920      	ldr	r0, [r4, #16]
 8014cce:	2106      	movs	r1, #6
 8014cd0:	fa1f f388 	uxth.w	r3, r8
 8014cd4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014cd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014cdc:	9101      	str	r1, [sp, #4]
 8014cde:	4914      	ldr	r1, [pc, #80]	@ (8014d30 <create_node+0xf8>)
 8014ce0:	9100      	str	r1, [sp, #0]
 8014ce2:	6811      	ldr	r1, [r2, #0]
 8014ce4:	6962      	ldr	r2, [r4, #20]
 8014ce6:	f7fb fbef 	bl	80104c8 <uxr_buffer_create_participant_bin>
 8014cea:	4602      	mov	r2, r0
 8014cec:	6920      	ldr	r0, [r4, #16]
 8014cee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014cf2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014cf6:	f7fa fa61 	bl	800f1bc <run_xrce_session>
 8014cfa:	b918      	cbnz	r0, 8014d04 <create_node+0xcc>
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	2500      	movs	r5, #0
 8014d00:	f7fa f986 	bl	800f010 <rmw_uxrce_fini_node_memory>
 8014d04:	4628      	mov	r0, r5
 8014d06:	b003      	add	sp, #12
 8014d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d0c:	2500      	movs	r5, #0
 8014d0e:	4628      	mov	r0, r5
 8014d10:	b003      	add	sp, #12
 8014d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d16:	463b      	mov	r3, r7
 8014d18:	4a06      	ldr	r2, [pc, #24]	@ (8014d34 <create_node+0xfc>)
 8014d1a:	213c      	movs	r1, #60	@ 0x3c
 8014d1c:	9600      	str	r6, [sp, #0]
 8014d1e:	4804      	ldr	r0, [pc, #16]	@ (8014d30 <create_node+0xf8>)
 8014d20:	f002 fe2a 	bl	8017978 <sniprintf>
 8014d24:	e7d2      	b.n	8014ccc <create_node+0x94>
 8014d26:	bf00      	nop
 8014d28:	240683ac 	.word	0x240683ac
 8014d2c:	08018cb4 	.word	0x08018cb4
 8014d30:	240684ec 	.word	0x240684ec
 8014d34:	08018e44 	.word	0x08018e44

08014d38 <rmw_create_node>:
 8014d38:	468c      	mov	ip, r1
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	f1bc 0f00 	cmp.w	ip, #0
 8014d40:	d00a      	beq.n	8014d58 <rmw_create_node+0x20>
 8014d42:	f89c 3000 	ldrb.w	r3, [ip]
 8014d46:	b13b      	cbz	r3, 8014d58 <rmw_create_node+0x20>
 8014d48:	b132      	cbz	r2, 8014d58 <rmw_create_node+0x20>
 8014d4a:	7813      	ldrb	r3, [r2, #0]
 8014d4c:	b123      	cbz	r3, 8014d58 <rmw_create_node+0x20>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8014d52:	4660      	mov	r0, ip
 8014d54:	f7ff bf70 	b.w	8014c38 <create_node>
 8014d58:	2000      	movs	r0, #0
 8014d5a:	4770      	bx	lr

08014d5c <rmw_destroy_node>:
 8014d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5e:	b328      	cbz	r0, 8014dac <rmw_destroy_node+0x50>
 8014d60:	4607      	mov	r7, r0
 8014d62:	6800      	ldr	r0, [r0, #0]
 8014d64:	b120      	cbz	r0, 8014d70 <rmw_destroy_node+0x14>
 8014d66:	4b37      	ldr	r3, [pc, #220]	@ (8014e44 <rmw_destroy_node+0xe8>)
 8014d68:	6819      	ldr	r1, [r3, #0]
 8014d6a:	f7eb fab9 	bl	80002e0 <strcmp>
 8014d6e:	b9e8      	cbnz	r0, 8014dac <rmw_destroy_node+0x50>
 8014d70:	687d      	ldr	r5, [r7, #4]
 8014d72:	b1dd      	cbz	r5, 8014dac <rmw_destroy_node+0x50>
 8014d74:	4b34      	ldr	r3, [pc, #208]	@ (8014e48 <rmw_destroy_node+0xec>)
 8014d76:	681c      	ldr	r4, [r3, #0]
 8014d78:	2c00      	cmp	r4, #0
 8014d7a:	d060      	beq.n	8014e3e <rmw_destroy_node+0xe2>
 8014d7c:	2600      	movs	r6, #0
 8014d7e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014d82:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8014d86:	429d      	cmp	r5, r3
 8014d88:	d013      	beq.n	8014db2 <rmw_destroy_node+0x56>
 8014d8a:	2c00      	cmp	r4, #0
 8014d8c:	d1f7      	bne.n	8014d7e <rmw_destroy_node+0x22>
 8014d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8014e4c <rmw_destroy_node+0xf0>)
 8014d90:	681c      	ldr	r4, [r3, #0]
 8014d92:	b1c4      	cbz	r4, 8014dc6 <rmw_destroy_node+0x6a>
 8014d94:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014d98:	6a0b      	ldr	r3, [r1, #32]
 8014d9a:	429d      	cmp	r5, r3
 8014d9c:	d1f9      	bne.n	8014d92 <rmw_destroy_node+0x36>
 8014d9e:	317c      	adds	r1, #124	@ 0x7c
 8014da0:	4638      	mov	r0, r7
 8014da2:	f000 f8a3 	bl	8014eec <rmw_destroy_subscription>
 8014da6:	2801      	cmp	r0, #1
 8014da8:	4606      	mov	r6, r0
 8014daa:	d1f2      	bne.n	8014d92 <rmw_destroy_node+0x36>
 8014dac:	2601      	movs	r6, #1
 8014dae:	4630      	mov	r0, r6
 8014db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db2:	3184      	adds	r1, #132	@ 0x84
 8014db4:	4638      	mov	r0, r7
 8014db6:	f7f9 ff51 	bl	800ec5c <rmw_destroy_publisher>
 8014dba:	2801      	cmp	r0, #1
 8014dbc:	4606      	mov	r6, r0
 8014dbe:	d0f5      	beq.n	8014dac <rmw_destroy_node+0x50>
 8014dc0:	2c00      	cmp	r4, #0
 8014dc2:	d1dc      	bne.n	8014d7e <rmw_destroy_node+0x22>
 8014dc4:	e7e3      	b.n	8014d8e <rmw_destroy_node+0x32>
 8014dc6:	4b22      	ldr	r3, [pc, #136]	@ (8014e50 <rmw_destroy_node+0xf4>)
 8014dc8:	681c      	ldr	r4, [r3, #0]
 8014dca:	b16c      	cbz	r4, 8014de8 <rmw_destroy_node+0x8c>
 8014dcc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014dd0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014dd2:	429d      	cmp	r5, r3
 8014dd4:	d1f9      	bne.n	8014dca <rmw_destroy_node+0x6e>
 8014dd6:	317c      	adds	r1, #124	@ 0x7c
 8014dd8:	4638      	mov	r0, r7
 8014dda:	f000 f843 	bl	8014e64 <rmw_destroy_service>
 8014dde:	2801      	cmp	r0, #1
 8014de0:	4606      	mov	r6, r0
 8014de2:	d0e3      	beq.n	8014dac <rmw_destroy_node+0x50>
 8014de4:	2c00      	cmp	r4, #0
 8014de6:	d1f1      	bne.n	8014dcc <rmw_destroy_node+0x70>
 8014de8:	4b1a      	ldr	r3, [pc, #104]	@ (8014e54 <rmw_destroy_node+0xf8>)
 8014dea:	681c      	ldr	r4, [r3, #0]
 8014dec:	b16c      	cbz	r4, 8014e0a <rmw_destroy_node+0xae>
 8014dee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014df2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014df4:	429d      	cmp	r5, r3
 8014df6:	d1f9      	bne.n	8014dec <rmw_destroy_node+0x90>
 8014df8:	317c      	adds	r1, #124	@ 0x7c
 8014dfa:	4638      	mov	r0, r7
 8014dfc:	f002 fa50 	bl	80172a0 <rmw_destroy_client>
 8014e00:	2801      	cmp	r0, #1
 8014e02:	4606      	mov	r6, r0
 8014e04:	d0d2      	beq.n	8014dac <rmw_destroy_node+0x50>
 8014e06:	2c00      	cmp	r4, #0
 8014e08:	d1f1      	bne.n	8014dee <rmw_destroy_node+0x92>
 8014e0a:	6928      	ldr	r0, [r5, #16]
 8014e0c:	696a      	ldr	r2, [r5, #20]
 8014e0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014e12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014e16:	6819      	ldr	r1, [r3, #0]
 8014e18:	f7fb fb0a 	bl	8010430 <uxr_buffer_delete_entity>
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	6928      	ldr	r0, [r5, #16]
 8014e20:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e28:	f7fa f9c8 	bl	800f1bc <run_xrce_session>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	4638      	mov	r0, r7
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	bf08      	it	eq
 8014e34:	2602      	moveq	r6, #2
 8014e36:	f7fa f8eb 	bl	800f010 <rmw_uxrce_fini_node_memory>
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e3e:	4626      	mov	r6, r4
 8014e40:	e7a5      	b.n	8014d8e <rmw_destroy_node+0x32>
 8014e42:	bf00      	nop
 8014e44:	0801929c 	.word	0x0801929c
 8014e48:	240683bc 	.word	0x240683bc
 8014e4c:	240683fc 	.word	0x240683fc
 8014e50:	240683cc 	.word	0x240683cc
 8014e54:	24063ae0 	.word	0x24063ae0

08014e58 <rmw_node_get_graph_guard_condition>:
 8014e58:	6843      	ldr	r3, [r0, #4]
 8014e5a:	6918      	ldr	r0, [r3, #16]
 8014e5c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop

08014e64 <rmw_destroy_service>:
 8014e64:	b570      	push	{r4, r5, r6, lr}
 8014e66:	b128      	cbz	r0, 8014e74 <rmw_destroy_service+0x10>
 8014e68:	4604      	mov	r4, r0
 8014e6a:	6800      	ldr	r0, [r0, #0]
 8014e6c:	460d      	mov	r5, r1
 8014e6e:	f7fa fa1f 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 8014e72:	b910      	cbnz	r0, 8014e7a <rmw_destroy_service+0x16>
 8014e74:	2401      	movs	r4, #1
 8014e76:	4620      	mov	r0, r4
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	6863      	ldr	r3, [r4, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d0f9      	beq.n	8014e74 <rmw_destroy_service+0x10>
 8014e80:	2d00      	cmp	r5, #0
 8014e82:	d0f7      	beq.n	8014e74 <rmw_destroy_service+0x10>
 8014e84:	6828      	ldr	r0, [r5, #0]
 8014e86:	f7fa fa13 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d0f2      	beq.n	8014e74 <rmw_destroy_service+0x10>
 8014e8e:	686e      	ldr	r6, [r5, #4]
 8014e90:	2e00      	cmp	r6, #0
 8014e92:	d0ef      	beq.n	8014e74 <rmw_destroy_service+0x10>
 8014e94:	6864      	ldr	r4, [r4, #4]
 8014e96:	6932      	ldr	r2, [r6, #16]
 8014e98:	6920      	ldr	r0, [r4, #16]
 8014e9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014e9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ea2:	6819      	ldr	r1, [r3, #0]
 8014ea4:	f001 f87c 	bl	8015fa0 <uxr_buffer_cancel_data>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	6920      	ldr	r0, [r4, #16]
 8014eac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014eb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014eb4:	f7fa f982 	bl	800f1bc <run_xrce_session>
 8014eb8:	6920      	ldr	r0, [r4, #16]
 8014eba:	6932      	ldr	r2, [r6, #16]
 8014ebc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014ec0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ec4:	6819      	ldr	r1, [r3, #0]
 8014ec6:	f7fb fab3 	bl	8010430 <uxr_buffer_delete_entity>
 8014eca:	4602      	mov	r2, r0
 8014ecc:	6920      	ldr	r0, [r4, #16]
 8014ece:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014ed2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014ed6:	f7fa f971 	bl	800f1bc <run_xrce_session>
 8014eda:	4603      	mov	r3, r0
 8014edc:	4628      	mov	r0, r5
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	bf14      	ite	ne
 8014ee2:	2400      	movne	r4, #0
 8014ee4:	2402      	moveq	r4, #2
 8014ee6:	f7fa f8d7 	bl	800f098 <rmw_uxrce_fini_service_memory>
 8014eea:	e7c4      	b.n	8014e76 <rmw_destroy_service+0x12>

08014eec <rmw_destroy_subscription>:
 8014eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef0:	b128      	cbz	r0, 8014efe <rmw_destroy_subscription+0x12>
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	6800      	ldr	r0, [r0, #0]
 8014ef6:	460d      	mov	r5, r1
 8014ef8:	f7fa f9da 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 8014efc:	b918      	cbnz	r0, 8014f06 <rmw_destroy_subscription+0x1a>
 8014efe:	2401      	movs	r4, #1
 8014f00:	4620      	mov	r0, r4
 8014f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f06:	6863      	ldr	r3, [r4, #4]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d0f8      	beq.n	8014efe <rmw_destroy_subscription+0x12>
 8014f0c:	fab5 f485 	clz	r4, r5
 8014f10:	0964      	lsrs	r4, r4, #5
 8014f12:	2d00      	cmp	r5, #0
 8014f14:	d0f3      	beq.n	8014efe <rmw_destroy_subscription+0x12>
 8014f16:	6828      	ldr	r0, [r5, #0]
 8014f18:	f7fa f9ca 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0ee      	beq.n	8014efe <rmw_destroy_subscription+0x12>
 8014f20:	686e      	ldr	r6, [r5, #4]
 8014f22:	2e00      	cmp	r6, #0
 8014f24:	d0eb      	beq.n	8014efe <rmw_destroy_subscription+0x12>
 8014f26:	6a37      	ldr	r7, [r6, #32]
 8014f28:	6972      	ldr	r2, [r6, #20]
 8014f2a:	6938      	ldr	r0, [r7, #16]
 8014f2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014f30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f34:	6819      	ldr	r1, [r3, #0]
 8014f36:	f001 f833 	bl	8015fa0 <uxr_buffer_cancel_data>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	6938      	ldr	r0, [r7, #16]
 8014f3e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014f42:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014f46:	f7fa f939 	bl	800f1bc <run_xrce_session>
 8014f4a:	69f0      	ldr	r0, [r6, #28]
 8014f4c:	f7ff fe52 	bl	8014bf4 <destroy_topic>
 8014f50:	6a33      	ldr	r3, [r6, #32]
 8014f52:	6972      	ldr	r2, [r6, #20]
 8014f54:	6918      	ldr	r0, [r3, #16]
 8014f56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014f5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f5e:	6819      	ldr	r1, [r3, #0]
 8014f60:	f7fb fa66 	bl	8010430 <uxr_buffer_delete_entity>
 8014f64:	6a33      	ldr	r3, [r6, #32]
 8014f66:	4680      	mov	r8, r0
 8014f68:	6932      	ldr	r2, [r6, #16]
 8014f6a:	6918      	ldr	r0, [r3, #16]
 8014f6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014f70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f74:	6819      	ldr	r1, [r3, #0]
 8014f76:	f7fb fa5b 	bl	8010430 <uxr_buffer_delete_entity>
 8014f7a:	4606      	mov	r6, r0
 8014f7c:	6938      	ldr	r0, [r7, #16]
 8014f7e:	4642      	mov	r2, r8
 8014f80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014f84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014f88:	f7fa f918 	bl	800f1bc <run_xrce_session>
 8014f8c:	693f      	ldr	r7, [r7, #16]
 8014f8e:	4632      	mov	r2, r6
 8014f90:	4606      	mov	r6, r0
 8014f92:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8014f96:	4638      	mov	r0, r7
 8014f98:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8014f9c:	f7fa f90e 	bl	800f1bc <run_xrce_session>
 8014fa0:	b126      	cbz	r6, 8014fac <rmw_destroy_subscription+0xc0>
 8014fa2:	b118      	cbz	r0, 8014fac <rmw_destroy_subscription+0xc0>
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f7fa f861 	bl	800f06c <rmw_uxrce_fini_subscription_memory>
 8014faa:	e7a9      	b.n	8014f00 <rmw_destroy_subscription+0x14>
 8014fac:	2402      	movs	r4, #2
 8014fae:	e7f9      	b.n	8014fa4 <rmw_destroy_subscription+0xb8>

08014fb0 <rmw_uxrce_transport_init>:
 8014fb0:	b508      	push	{r3, lr}
 8014fb2:	b108      	cbz	r0, 8014fb8 <rmw_uxrce_transport_init+0x8>
 8014fb4:	f100 0210 	add.w	r2, r0, #16
 8014fb8:	b139      	cbz	r1, 8014fca <rmw_uxrce_transport_init+0x1a>
 8014fba:	6949      	ldr	r1, [r1, #20]
 8014fbc:	4610      	mov	r0, r2
 8014fbe:	f000 fa6b 	bl	8015498 <uxr_init_custom_transport>
 8014fc2:	f080 0001 	eor.w	r0, r0, #1
 8014fc6:	b2c0      	uxtb	r0, r0
 8014fc8:	bd08      	pop	{r3, pc}
 8014fca:	4b04      	ldr	r3, [pc, #16]	@ (8014fdc <rmw_uxrce_transport_init+0x2c>)
 8014fcc:	4610      	mov	r0, r2
 8014fce:	6859      	ldr	r1, [r3, #4]
 8014fd0:	f000 fa62 	bl	8015498 <uxr_init_custom_transport>
 8014fd4:	f080 0001 	eor.w	r0, r0, #1
 8014fd8:	b2c0      	uxtb	r0, r0
 8014fda:	bd08      	pop	{r3, pc}
 8014fdc:	24063ac4 	.word	0x24063ac4

08014fe0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe4:	6805      	ldr	r5, [r0, #0]
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	460e      	mov	r6, r1
 8014fea:	4628      	mov	r0, r5
 8014fec:	f7eb f978 	bl	80002e0 <strcmp>
 8014ff0:	b1c8      	cbz	r0, 8015026 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014ff2:	4b11      	ldr	r3, [pc, #68]	@ (8015038 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	429d      	cmp	r5, r3
 8014ff8:	d112      	bne.n	8015020 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014ffa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014ffe:	f8d8 4000 	ldr.w	r4, [r8]
 8015002:	b16c      	cbz	r4, 8015020 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015004:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015008:	2700      	movs	r7, #0
 801500a:	3d04      	subs	r5, #4
 801500c:	4631      	mov	r1, r6
 801500e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015012:	f7eb f965 	bl	80002e0 <strcmp>
 8015016:	00bb      	lsls	r3, r7, #2
 8015018:	b140      	cbz	r0, 801502c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801501a:	3701      	adds	r7, #1
 801501c:	42bc      	cmp	r4, r7
 801501e:	d1f5      	bne.n	801500c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015020:	2000      	movs	r0, #0
 8015022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015026:	4620      	mov	r0, r4
 8015028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015034:	58d3      	ldr	r3, [r2, r3]
 8015036:	4718      	bx	r3
 8015038:	240000b0 	.word	0x240000b0

0801503c <std_msgs__msg__Int32__init>:
 801503c:	3800      	subs	r0, #0
 801503e:	bf18      	it	ne
 8015040:	2001      	movne	r0, #1
 8015042:	4770      	bx	lr

08015044 <std_msgs__msg__Int32__fini>:
 8015044:	4770      	bx	lr
 8015046:	bf00      	nop

08015048 <ucdr_serialize_endian_array_char>:
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	4619      	mov	r1, r3
 801504e:	461f      	mov	r7, r3
 8015050:	4605      	mov	r5, r0
 8015052:	4690      	mov	r8, r2
 8015054:	f7fb f924 	bl	80102a0 <ucdr_check_buffer_available_for>
 8015058:	b9e0      	cbnz	r0, 8015094 <ucdr_serialize_endian_array_char+0x4c>
 801505a:	463e      	mov	r6, r7
 801505c:	e00b      	b.n	8015076 <ucdr_serialize_endian_array_char+0x2e>
 801505e:	4441      	add	r1, r8
 8015060:	68a8      	ldr	r0, [r5, #8]
 8015062:	4622      	mov	r2, r4
 8015064:	1b36      	subs	r6, r6, r4
 8015066:	f002 fe56 	bl	8017d16 <memcpy>
 801506a:	68ab      	ldr	r3, [r5, #8]
 801506c:	6928      	ldr	r0, [r5, #16]
 801506e:	4423      	add	r3, r4
 8015070:	4420      	add	r0, r4
 8015072:	60ab      	str	r3, [r5, #8]
 8015074:	6128      	str	r0, [r5, #16]
 8015076:	4631      	mov	r1, r6
 8015078:	2201      	movs	r2, #1
 801507a:	4628      	mov	r0, r5
 801507c:	f7fb f99a 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 8015080:	1bb9      	subs	r1, r7, r6
 8015082:	4604      	mov	r4, r0
 8015084:	2800      	cmp	r0, #0
 8015086:	d1ea      	bne.n	801505e <ucdr_serialize_endian_array_char+0x16>
 8015088:	2301      	movs	r3, #1
 801508a:	7da8      	ldrb	r0, [r5, #22]
 801508c:	756b      	strb	r3, [r5, #21]
 801508e:	4058      	eors	r0, r3
 8015090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015094:	463a      	mov	r2, r7
 8015096:	4641      	mov	r1, r8
 8015098:	68a8      	ldr	r0, [r5, #8]
 801509a:	f002 fe3c 	bl	8017d16 <memcpy>
 801509e:	68aa      	ldr	r2, [r5, #8]
 80150a0:	692b      	ldr	r3, [r5, #16]
 80150a2:	443a      	add	r2, r7
 80150a4:	443b      	add	r3, r7
 80150a6:	60aa      	str	r2, [r5, #8]
 80150a8:	612b      	str	r3, [r5, #16]
 80150aa:	e7ed      	b.n	8015088 <ucdr_serialize_endian_array_char+0x40>

080150ac <ucdr_deserialize_endian_array_char>:
 80150ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b0:	4619      	mov	r1, r3
 80150b2:	461f      	mov	r7, r3
 80150b4:	4605      	mov	r5, r0
 80150b6:	4690      	mov	r8, r2
 80150b8:	f7fb f8f2 	bl	80102a0 <ucdr_check_buffer_available_for>
 80150bc:	b9e8      	cbnz	r0, 80150fa <ucdr_deserialize_endian_array_char+0x4e>
 80150be:	463e      	mov	r6, r7
 80150c0:	e00c      	b.n	80150dc <ucdr_deserialize_endian_array_char+0x30>
 80150c2:	eb08 0003 	add.w	r0, r8, r3
 80150c6:	68a9      	ldr	r1, [r5, #8]
 80150c8:	4622      	mov	r2, r4
 80150ca:	1b36      	subs	r6, r6, r4
 80150cc:	f002 fe23 	bl	8017d16 <memcpy>
 80150d0:	68ab      	ldr	r3, [r5, #8]
 80150d2:	6928      	ldr	r0, [r5, #16]
 80150d4:	4423      	add	r3, r4
 80150d6:	4420      	add	r0, r4
 80150d8:	60ab      	str	r3, [r5, #8]
 80150da:	6128      	str	r0, [r5, #16]
 80150dc:	4631      	mov	r1, r6
 80150de:	2201      	movs	r2, #1
 80150e0:	4628      	mov	r0, r5
 80150e2:	f7fb f967 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 80150e6:	1bbb      	subs	r3, r7, r6
 80150e8:	4604      	mov	r4, r0
 80150ea:	2800      	cmp	r0, #0
 80150ec:	d1e9      	bne.n	80150c2 <ucdr_deserialize_endian_array_char+0x16>
 80150ee:	2301      	movs	r3, #1
 80150f0:	7da8      	ldrb	r0, [r5, #22]
 80150f2:	756b      	strb	r3, [r5, #21]
 80150f4:	4058      	eors	r0, r3
 80150f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150fa:	463a      	mov	r2, r7
 80150fc:	68a9      	ldr	r1, [r5, #8]
 80150fe:	4640      	mov	r0, r8
 8015100:	f002 fe09 	bl	8017d16 <memcpy>
 8015104:	68aa      	ldr	r2, [r5, #8]
 8015106:	692b      	ldr	r3, [r5, #16]
 8015108:	443a      	add	r2, r7
 801510a:	443b      	add	r3, r7
 801510c:	60aa      	str	r2, [r5, #8]
 801510e:	612b      	str	r3, [r5, #16]
 8015110:	e7ed      	b.n	80150ee <ucdr_deserialize_endian_array_char+0x42>
 8015112:	bf00      	nop

08015114 <ucdr_serialize_array_uint8_t>:
 8015114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	4688      	mov	r8, r1
 801511a:	4611      	mov	r1, r2
 801511c:	4617      	mov	r7, r2
 801511e:	4605      	mov	r5, r0
 8015120:	f7fb f8be 	bl	80102a0 <ucdr_check_buffer_available_for>
 8015124:	b9e0      	cbnz	r0, 8015160 <ucdr_serialize_array_uint8_t+0x4c>
 8015126:	463e      	mov	r6, r7
 8015128:	e00b      	b.n	8015142 <ucdr_serialize_array_uint8_t+0x2e>
 801512a:	4441      	add	r1, r8
 801512c:	68a8      	ldr	r0, [r5, #8]
 801512e:	4622      	mov	r2, r4
 8015130:	1b36      	subs	r6, r6, r4
 8015132:	f002 fdf0 	bl	8017d16 <memcpy>
 8015136:	68ab      	ldr	r3, [r5, #8]
 8015138:	6928      	ldr	r0, [r5, #16]
 801513a:	4423      	add	r3, r4
 801513c:	4420      	add	r0, r4
 801513e:	60ab      	str	r3, [r5, #8]
 8015140:	6128      	str	r0, [r5, #16]
 8015142:	4631      	mov	r1, r6
 8015144:	2201      	movs	r2, #1
 8015146:	4628      	mov	r0, r5
 8015148:	f7fb f934 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 801514c:	1bb9      	subs	r1, r7, r6
 801514e:	4604      	mov	r4, r0
 8015150:	2800      	cmp	r0, #0
 8015152:	d1ea      	bne.n	801512a <ucdr_serialize_array_uint8_t+0x16>
 8015154:	2301      	movs	r3, #1
 8015156:	7da8      	ldrb	r0, [r5, #22]
 8015158:	756b      	strb	r3, [r5, #21]
 801515a:	4058      	eors	r0, r3
 801515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015160:	463a      	mov	r2, r7
 8015162:	4641      	mov	r1, r8
 8015164:	68a8      	ldr	r0, [r5, #8]
 8015166:	f002 fdd6 	bl	8017d16 <memcpy>
 801516a:	68aa      	ldr	r2, [r5, #8]
 801516c:	692b      	ldr	r3, [r5, #16]
 801516e:	443a      	add	r2, r7
 8015170:	443b      	add	r3, r7
 8015172:	60aa      	str	r2, [r5, #8]
 8015174:	612b      	str	r3, [r5, #16]
 8015176:	e7ed      	b.n	8015154 <ucdr_serialize_array_uint8_t+0x40>

08015178 <ucdr_serialize_endian_array_uint8_t>:
 8015178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801517c:	4619      	mov	r1, r3
 801517e:	461f      	mov	r7, r3
 8015180:	4605      	mov	r5, r0
 8015182:	4690      	mov	r8, r2
 8015184:	f7fb f88c 	bl	80102a0 <ucdr_check_buffer_available_for>
 8015188:	b9e0      	cbnz	r0, 80151c4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801518a:	463e      	mov	r6, r7
 801518c:	e00b      	b.n	80151a6 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801518e:	4441      	add	r1, r8
 8015190:	68a8      	ldr	r0, [r5, #8]
 8015192:	4622      	mov	r2, r4
 8015194:	1b36      	subs	r6, r6, r4
 8015196:	f002 fdbe 	bl	8017d16 <memcpy>
 801519a:	68ab      	ldr	r3, [r5, #8]
 801519c:	6928      	ldr	r0, [r5, #16]
 801519e:	4423      	add	r3, r4
 80151a0:	4420      	add	r0, r4
 80151a2:	60ab      	str	r3, [r5, #8]
 80151a4:	6128      	str	r0, [r5, #16]
 80151a6:	4631      	mov	r1, r6
 80151a8:	2201      	movs	r2, #1
 80151aa:	4628      	mov	r0, r5
 80151ac:	f7fb f902 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 80151b0:	1bb9      	subs	r1, r7, r6
 80151b2:	4604      	mov	r4, r0
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d1ea      	bne.n	801518e <ucdr_serialize_endian_array_uint8_t+0x16>
 80151b8:	2301      	movs	r3, #1
 80151ba:	7da8      	ldrb	r0, [r5, #22]
 80151bc:	756b      	strb	r3, [r5, #21]
 80151be:	4058      	eors	r0, r3
 80151c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c4:	463a      	mov	r2, r7
 80151c6:	4641      	mov	r1, r8
 80151c8:	68a8      	ldr	r0, [r5, #8]
 80151ca:	f002 fda4 	bl	8017d16 <memcpy>
 80151ce:	68aa      	ldr	r2, [r5, #8]
 80151d0:	692b      	ldr	r3, [r5, #16]
 80151d2:	443a      	add	r2, r7
 80151d4:	443b      	add	r3, r7
 80151d6:	60aa      	str	r2, [r5, #8]
 80151d8:	612b      	str	r3, [r5, #16]
 80151da:	e7ed      	b.n	80151b8 <ucdr_serialize_endian_array_uint8_t+0x40>

080151dc <ucdr_deserialize_array_uint8_t>:
 80151dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e0:	4688      	mov	r8, r1
 80151e2:	4611      	mov	r1, r2
 80151e4:	4617      	mov	r7, r2
 80151e6:	4605      	mov	r5, r0
 80151e8:	f7fb f85a 	bl	80102a0 <ucdr_check_buffer_available_for>
 80151ec:	b9e8      	cbnz	r0, 801522a <ucdr_deserialize_array_uint8_t+0x4e>
 80151ee:	463e      	mov	r6, r7
 80151f0:	e00c      	b.n	801520c <ucdr_deserialize_array_uint8_t+0x30>
 80151f2:	eb08 0003 	add.w	r0, r8, r3
 80151f6:	68a9      	ldr	r1, [r5, #8]
 80151f8:	4622      	mov	r2, r4
 80151fa:	1b36      	subs	r6, r6, r4
 80151fc:	f002 fd8b 	bl	8017d16 <memcpy>
 8015200:	68ab      	ldr	r3, [r5, #8]
 8015202:	6928      	ldr	r0, [r5, #16]
 8015204:	4423      	add	r3, r4
 8015206:	4420      	add	r0, r4
 8015208:	60ab      	str	r3, [r5, #8]
 801520a:	6128      	str	r0, [r5, #16]
 801520c:	4631      	mov	r1, r6
 801520e:	2201      	movs	r2, #1
 8015210:	4628      	mov	r0, r5
 8015212:	f7fb f8cf 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 8015216:	1bbb      	subs	r3, r7, r6
 8015218:	4604      	mov	r4, r0
 801521a:	2800      	cmp	r0, #0
 801521c:	d1e9      	bne.n	80151f2 <ucdr_deserialize_array_uint8_t+0x16>
 801521e:	2301      	movs	r3, #1
 8015220:	7da8      	ldrb	r0, [r5, #22]
 8015222:	756b      	strb	r3, [r5, #21]
 8015224:	4058      	eors	r0, r3
 8015226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801522a:	463a      	mov	r2, r7
 801522c:	68a9      	ldr	r1, [r5, #8]
 801522e:	4640      	mov	r0, r8
 8015230:	f002 fd71 	bl	8017d16 <memcpy>
 8015234:	68aa      	ldr	r2, [r5, #8]
 8015236:	692b      	ldr	r3, [r5, #16]
 8015238:	443a      	add	r2, r7
 801523a:	443b      	add	r3, r7
 801523c:	60aa      	str	r2, [r5, #8]
 801523e:	612b      	str	r3, [r5, #16]
 8015240:	e7ed      	b.n	801521e <ucdr_deserialize_array_uint8_t+0x42>
 8015242:	bf00      	nop

08015244 <ucdr_deserialize_endian_array_uint8_t>:
 8015244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015248:	4619      	mov	r1, r3
 801524a:	461f      	mov	r7, r3
 801524c:	4605      	mov	r5, r0
 801524e:	4690      	mov	r8, r2
 8015250:	f7fb f826 	bl	80102a0 <ucdr_check_buffer_available_for>
 8015254:	b9e8      	cbnz	r0, 8015292 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8015256:	463e      	mov	r6, r7
 8015258:	e00c      	b.n	8015274 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801525a:	eb08 0003 	add.w	r0, r8, r3
 801525e:	68a9      	ldr	r1, [r5, #8]
 8015260:	4622      	mov	r2, r4
 8015262:	1b36      	subs	r6, r6, r4
 8015264:	f002 fd57 	bl	8017d16 <memcpy>
 8015268:	68ab      	ldr	r3, [r5, #8]
 801526a:	6928      	ldr	r0, [r5, #16]
 801526c:	4423      	add	r3, r4
 801526e:	4420      	add	r0, r4
 8015270:	60ab      	str	r3, [r5, #8]
 8015272:	6128      	str	r0, [r5, #16]
 8015274:	4631      	mov	r1, r6
 8015276:	2201      	movs	r2, #1
 8015278:	4628      	mov	r0, r5
 801527a:	f7fb f89b 	bl	80103b4 <ucdr_check_final_buffer_behavior_array>
 801527e:	1bbb      	subs	r3, r7, r6
 8015280:	4604      	mov	r4, r0
 8015282:	2800      	cmp	r0, #0
 8015284:	d1e9      	bne.n	801525a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015286:	2301      	movs	r3, #1
 8015288:	7da8      	ldrb	r0, [r5, #22]
 801528a:	756b      	strb	r3, [r5, #21]
 801528c:	4058      	eors	r0, r3
 801528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015292:	463a      	mov	r2, r7
 8015294:	68a9      	ldr	r1, [r5, #8]
 8015296:	4640      	mov	r0, r8
 8015298:	f002 fd3d 	bl	8017d16 <memcpy>
 801529c:	68aa      	ldr	r2, [r5, #8]
 801529e:	692b      	ldr	r3, [r5, #16]
 80152a0:	443a      	add	r2, r7
 80152a2:	443b      	add	r3, r7
 80152a4:	60aa      	str	r2, [r5, #8]
 80152a6:	612b      	str	r3, [r5, #16]
 80152a8:	e7ed      	b.n	8015286 <ucdr_deserialize_endian_array_uint8_t+0x42>
 80152aa:	bf00      	nop

080152ac <ucdr_serialize_sequence_char>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	4615      	mov	r5, r2
 80152b0:	460e      	mov	r6, r1
 80152b2:	7d01      	ldrb	r1, [r0, #20]
 80152b4:	4604      	mov	r4, r0
 80152b6:	f7fa fb49 	bl	800f94c <ucdr_serialize_endian_uint32_t>
 80152ba:	b90d      	cbnz	r5, 80152c0 <ucdr_serialize_sequence_char+0x14>
 80152bc:	2001      	movs	r0, #1
 80152be:	bd70      	pop	{r4, r5, r6, pc}
 80152c0:	462b      	mov	r3, r5
 80152c2:	4632      	mov	r2, r6
 80152c4:	7d21      	ldrb	r1, [r4, #20]
 80152c6:	4620      	mov	r0, r4
 80152c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152cc:	f7ff bebc 	b.w	8015048 <ucdr_serialize_endian_array_char>

080152d0 <ucdr_deserialize_sequence_char>:
 80152d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152d4:	461d      	mov	r5, r3
 80152d6:	4616      	mov	r6, r2
 80152d8:	460f      	mov	r7, r1
 80152da:	461a      	mov	r2, r3
 80152dc:	7d01      	ldrb	r1, [r0, #20]
 80152de:	4604      	mov	r4, r0
 80152e0:	f7fa fc5c 	bl	800fb9c <ucdr_deserialize_endian_uint32_t>
 80152e4:	682b      	ldr	r3, [r5, #0]
 80152e6:	429e      	cmp	r6, r3
 80152e8:	d201      	bcs.n	80152ee <ucdr_deserialize_sequence_char+0x1e>
 80152ea:	2201      	movs	r2, #1
 80152ec:	75a2      	strb	r2, [r4, #22]
 80152ee:	b913      	cbnz	r3, 80152f6 <ucdr_deserialize_sequence_char+0x26>
 80152f0:	2001      	movs	r0, #1
 80152f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f6:	463a      	mov	r2, r7
 80152f8:	7d21      	ldrb	r1, [r4, #20]
 80152fa:	4620      	mov	r0, r4
 80152fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015300:	f7ff bed4 	b.w	80150ac <ucdr_deserialize_endian_array_char>

08015304 <ucdr_serialize_sequence_uint8_t>:
 8015304:	b570      	push	{r4, r5, r6, lr}
 8015306:	4615      	mov	r5, r2
 8015308:	460e      	mov	r6, r1
 801530a:	7d01      	ldrb	r1, [r0, #20]
 801530c:	4604      	mov	r4, r0
 801530e:	f7fa fb1d 	bl	800f94c <ucdr_serialize_endian_uint32_t>
 8015312:	b90d      	cbnz	r5, 8015318 <ucdr_serialize_sequence_uint8_t+0x14>
 8015314:	2001      	movs	r0, #1
 8015316:	bd70      	pop	{r4, r5, r6, pc}
 8015318:	462b      	mov	r3, r5
 801531a:	4632      	mov	r2, r6
 801531c:	7d21      	ldrb	r1, [r4, #20]
 801531e:	4620      	mov	r0, r4
 8015320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015324:	f7ff bf28 	b.w	8015178 <ucdr_serialize_endian_array_uint8_t>

08015328 <ucdr_deserialize_sequence_uint8_t>:
 8015328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801532c:	461d      	mov	r5, r3
 801532e:	4616      	mov	r6, r2
 8015330:	460f      	mov	r7, r1
 8015332:	461a      	mov	r2, r3
 8015334:	7d01      	ldrb	r1, [r0, #20]
 8015336:	4604      	mov	r4, r0
 8015338:	f7fa fc30 	bl	800fb9c <ucdr_deserialize_endian_uint32_t>
 801533c:	682b      	ldr	r3, [r5, #0]
 801533e:	429e      	cmp	r6, r3
 8015340:	d201      	bcs.n	8015346 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8015342:	2201      	movs	r2, #1
 8015344:	75a2      	strb	r2, [r4, #22]
 8015346:	b913      	cbnz	r3, 801534e <ucdr_deserialize_sequence_uint8_t+0x26>
 8015348:	2001      	movs	r0, #1
 801534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801534e:	463a      	mov	r2, r7
 8015350:	7d21      	ldrb	r1, [r4, #20]
 8015352:	4620      	mov	r0, r4
 8015354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015358:	f7ff bf74 	b.w	8015244 <ucdr_deserialize_endian_array_uint8_t>

0801535c <ucdr_serialize_string>:
 801535c:	b510      	push	{r4, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	4604      	mov	r4, r0
 8015362:	4608      	mov	r0, r1
 8015364:	9101      	str	r1, [sp, #4]
 8015366:	f7ea ffc5 	bl	80002f4 <strlen>
 801536a:	4602      	mov	r2, r0
 801536c:	9901      	ldr	r1, [sp, #4]
 801536e:	4620      	mov	r0, r4
 8015370:	3201      	adds	r2, #1
 8015372:	b002      	add	sp, #8
 8015374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015378:	f7ff bf98 	b.w	80152ac <ucdr_serialize_sequence_char>

0801537c <ucdr_deserialize_string>:
 801537c:	b500      	push	{lr}
 801537e:	b083      	sub	sp, #12
 8015380:	ab01      	add	r3, sp, #4
 8015382:	f7ff ffa5 	bl	80152d0 <ucdr_deserialize_sequence_char>
 8015386:	b003      	add	sp, #12
 8015388:	f85d fb04 	ldr.w	pc, [sp], #4

0801538c <get_custom_error>:
 801538c:	4b01      	ldr	r3, [pc, #4]	@ (8015394 <get_custom_error+0x8>)
 801538e:	7818      	ldrb	r0, [r3, #0]
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop
 8015394:	24068528 	.word	0x24068528

08015398 <recv_custom_msg>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	4693      	mov	fp, r2
 801539e:	b089      	sub	sp, #36	@ 0x24
 80153a0:	2200      	movs	r2, #0
 80153a2:	4604      	mov	r4, r0
 80153a4:	468a      	mov	sl, r1
 80153a6:	9305      	str	r3, [sp, #20]
 80153a8:	f88d 201e 	strb.w	r2, [sp, #30]
 80153ac:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80153b0:	b322      	cbz	r2, 80153fc <recv_custom_msg+0x64>
 80153b2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80153b6:	f10d 081f 	add.w	r8, sp, #31
 80153ba:	af05      	add	r7, sp, #20
 80153bc:	f10d 061e 	add.w	r6, sp, #30
 80153c0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80153c4:	e002      	b.n	80153cc <recv_custom_msg+0x34>
 80153c6:	9b05      	ldr	r3, [sp, #20]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	dd0f      	ble.n	80153ec <recv_custom_msg+0x54>
 80153cc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80153d0:	4623      	mov	r3, r4
 80153d2:	4622      	mov	r2, r4
 80153d4:	4648      	mov	r0, r9
 80153d6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80153da:	e9cd 5600 	strd	r5, r6, [sp]
 80153de:	f001 f8d9 	bl	8016594 <uxr_read_framed_msg>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d0ef      	beq.n	80153c6 <recv_custom_msg+0x2e>
 80153e6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80153ea:	b1b3      	cbz	r3, 801541a <recv_custom_msg+0x82>
 80153ec:	4b0f      	ldr	r3, [pc, #60]	@ (801542c <recv_custom_msg+0x94>)
 80153ee:	2000      	movs	r0, #0
 80153f0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80153f4:	701a      	strb	r2, [r3, #0]
 80153f6:	b009      	add	sp, #36	@ 0x24
 80153f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153fc:	f10d 021f 	add.w	r2, sp, #31
 8015400:	4601      	mov	r1, r0
 8015402:	9200      	str	r2, [sp, #0]
 8015404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015408:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801540c:	47a8      	blx	r5
 801540e:	2800      	cmp	r0, #0
 8015410:	d0ec      	beq.n	80153ec <recv_custom_msg+0x54>
 8015412:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1e8      	bne.n	80153ec <recv_custom_msg+0x54>
 801541a:	f8cb 0000 	str.w	r0, [fp]
 801541e:	2001      	movs	r0, #1
 8015420:	f8ca 4000 	str.w	r4, [sl]
 8015424:	b009      	add	sp, #36	@ 0x24
 8015426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542a:	bf00      	nop
 801542c:	24068528 	.word	0x24068528

08015430 <send_custom_msg>:
 8015430:	b530      	push	{r4, r5, lr}
 8015432:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8015436:	b087      	sub	sp, #28
 8015438:	4614      	mov	r4, r2
 801543a:	b995      	cbnz	r5, 8015462 <send_custom_msg+0x32>
 801543c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8015440:	f10d 0317 	add.w	r3, sp, #23
 8015444:	47a8      	blx	r5
 8015446:	1e03      	subs	r3, r0, #0
 8015448:	bf18      	it	ne
 801544a:	2301      	movne	r3, #1
 801544c:	42a0      	cmp	r0, r4
 801544e:	bf18      	it	ne
 8015450:	2300      	movne	r3, #0
 8015452:	b91b      	cbnz	r3, 801545c <send_custom_msg+0x2c>
 8015454:	4a0a      	ldr	r2, [pc, #40]	@ (8015480 <send_custom_msg+0x50>)
 8015456:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801545a:	7011      	strb	r1, [r2, #0]
 801545c:	4618      	mov	r0, r3
 801545e:	b007      	add	sp, #28
 8015460:	bd30      	pop	{r4, r5, pc}
 8015462:	460b      	mov	r3, r1
 8015464:	2200      	movs	r2, #0
 8015466:	f10d 0117 	add.w	r1, sp, #23
 801546a:	9400      	str	r4, [sp, #0]
 801546c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015470:	4602      	mov	r2, r0
 8015472:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015476:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801547a:	f000 fead 	bl	80161d8 <uxr_write_framed_msg>
 801547e:	e7e2      	b.n	8015446 <send_custom_msg+0x16>
 8015480:	24068528 	.word	0x24068528

08015484 <uxr_set_custom_transport_callbacks>:
 8015484:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015488:	9901      	ldr	r1, [sp, #4]
 801548a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801548e:	9b00      	ldr	r3, [sp, #0]
 8015490:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8015494:	4770      	bx	lr
 8015496:	bf00      	nop

08015498 <uxr_init_custom_transport>:
 8015498:	b538      	push	{r3, r4, r5, lr}
 801549a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801549e:	b303      	cbz	r3, 80154e2 <uxr_init_custom_transport+0x4a>
 80154a0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80154a4:	4604      	mov	r4, r0
 80154a6:	b1e2      	cbz	r2, 80154e2 <uxr_init_custom_transport+0x4a>
 80154a8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80154ac:	b1ca      	cbz	r2, 80154e2 <uxr_init_custom_transport+0x4a>
 80154ae:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80154b2:	b1b2      	cbz	r2, 80154e2 <uxr_init_custom_transport+0x4a>
 80154b4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80154b8:	4798      	blx	r3
 80154ba:	4605      	mov	r5, r0
 80154bc:	b188      	cbz	r0, 80154e2 <uxr_init_custom_transport+0x4a>
 80154be:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80154c2:	b98b      	cbnz	r3, 80154e8 <uxr_init_custom_transport+0x50>
 80154c4:	4b0b      	ldr	r3, [pc, #44]	@ (80154f4 <uxr_init_custom_transport+0x5c>)
 80154c6:	4628      	mov	r0, r5
 80154c8:	490b      	ldr	r1, [pc, #44]	@ (80154f8 <uxr_init_custom_transport+0x60>)
 80154ca:	4a0c      	ldr	r2, [pc, #48]	@ (80154fc <uxr_init_custom_transport+0x64>)
 80154cc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80154d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80154d4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80154d8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80154dc:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80154e0:	bd38      	pop	{r3, r4, r5, pc}
 80154e2:	2500      	movs	r5, #0
 80154e4:	4628      	mov	r0, r5
 80154e6:	bd38      	pop	{r3, r4, r5, pc}
 80154e8:	2100      	movs	r1, #0
 80154ea:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80154ee:	f000 fe6d 	bl	80161cc <uxr_init_framing_io>
 80154f2:	e7e7      	b.n	80154c4 <uxr_init_custom_transport+0x2c>
 80154f4:	08015399 	.word	0x08015399
 80154f8:	08015431 	.word	0x08015431
 80154fc:	0801538d 	.word	0x0801538d

08015500 <uxr_close_custom_transport>:
 8015500:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8015504:	4718      	bx	r3
 8015506:	bf00      	nop

08015508 <uxr_init_input_best_effort_stream>:
 8015508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801550c:	8003      	strh	r3, [r0, #0]
 801550e:	4770      	bx	lr

08015510 <uxr_reset_input_best_effort_stream>:
 8015510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015514:	8003      	strh	r3, [r0, #0]
 8015516:	4770      	bx	lr

08015518 <uxr_receive_best_effort_message>:
 8015518:	b538      	push	{r3, r4, r5, lr}
 801551a:	4604      	mov	r4, r0
 801551c:	8800      	ldrh	r0, [r0, #0]
 801551e:	460d      	mov	r5, r1
 8015520:	f000 fe3c 	bl	801619c <uxr_seq_num_cmp>
 8015524:	4603      	mov	r3, r0
 8015526:	0fc0      	lsrs	r0, r0, #31
 8015528:	2b00      	cmp	r3, #0
 801552a:	bfb8      	it	lt
 801552c:	8025      	strhlt	r5, [r4, #0]
 801552e:	bd38      	pop	{r3, r4, r5, pc}

08015530 <on_full_input_buffer>:
 8015530:	b570      	push	{r4, r5, r6, lr}
 8015532:	460c      	mov	r4, r1
 8015534:	4605      	mov	r5, r0
 8015536:	8908      	ldrh	r0, [r1, #8]
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	7d26      	ldrb	r6, [r4, #20]
 801553c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015540:	fbb2 f2f0 	udiv	r2, r2, r0
 8015544:	eba3 0c01 	sub.w	ip, r3, r1
 8015548:	fbbc fcf2 	udiv	ip, ip, r2
 801554c:	f10c 0c01 	add.w	ip, ip, #1
 8015550:	fa1f f38c 	uxth.w	r3, ip
 8015554:	fbb3 fcf0 	udiv	ip, r3, r0
 8015558:	fb00 331c 	mls	r3, r0, ip, r3
 801555c:	b29b      	uxth	r3, r3
 801555e:	fb02 f303 	mul.w	r3, r2, r3
 8015562:	1d18      	adds	r0, r3, #4
 8015564:	4408      	add	r0, r1
 8015566:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801556a:	b116      	cbz	r6, 8015572 <on_full_input_buffer+0x42>
 801556c:	2600      	movs	r6, #0
 801556e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015572:	2a03      	cmp	r2, #3
 8015574:	d801      	bhi.n	801557a <on_full_input_buffer+0x4a>
 8015576:	2001      	movs	r0, #1
 8015578:	bd70      	pop	{r4, r5, r6, pc}
 801557a:	3308      	adds	r3, #8
 801557c:	4628      	mov	r0, r5
 801557e:	3a04      	subs	r2, #4
 8015580:	4419      	add	r1, r3
 8015582:	692b      	ldr	r3, [r5, #16]
 8015584:	f7fa fed8 	bl	8010338 <ucdr_init_buffer_origin>
 8015588:	4628      	mov	r0, r5
 801558a:	4622      	mov	r2, r4
 801558c:	4902      	ldr	r1, [pc, #8]	@ (8015598 <on_full_input_buffer+0x68>)
 801558e:	f7fa feaf 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8015592:	2000      	movs	r0, #0
 8015594:	bd70      	pop	{r4, r5, r6, pc}
 8015596:	bf00      	nop
 8015598:	08015531 	.word	0x08015531

0801559c <uxr_init_input_reliable_stream>:
 801559c:	b510      	push	{r4, lr}
 801559e:	e9c0 1200 	strd	r1, r2, [r0]
 80155a2:	2400      	movs	r4, #0
 80155a4:	9a02      	ldr	r2, [sp, #8]
 80155a6:	8103      	strh	r3, [r0, #8]
 80155a8:	6102      	str	r2, [r0, #16]
 80155aa:	7504      	strb	r4, [r0, #20]
 80155ac:	b1c3      	cbz	r3, 80155e0 <uxr_init_input_reliable_stream+0x44>
 80155ae:	600c      	str	r4, [r1, #0]
 80155b0:	8901      	ldrh	r1, [r0, #8]
 80155b2:	2901      	cmp	r1, #1
 80155b4:	d914      	bls.n	80155e0 <uxr_init_input_reliable_stream+0x44>
 80155b6:	f04f 0c01 	mov.w	ip, #1
 80155ba:	6843      	ldr	r3, [r0, #4]
 80155bc:	f10c 0e01 	add.w	lr, ip, #1
 80155c0:	fbbc f2f1 	udiv	r2, ip, r1
 80155c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80155c8:	fb01 c212 	mls	r2, r1, r2, ip
 80155cc:	fa1f fc8e 	uxth.w	ip, lr
 80155d0:	b292      	uxth	r2, r2
 80155d2:	fb02 f303 	mul.w	r3, r2, r3
 80155d6:	6802      	ldr	r2, [r0, #0]
 80155d8:	50d4      	str	r4, [r2, r3]
 80155da:	8901      	ldrh	r1, [r0, #8]
 80155dc:	4561      	cmp	r1, ip
 80155de:	d8ec      	bhi.n	80155ba <uxr_init_input_reliable_stream+0x1e>
 80155e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80155e4:	60c3      	str	r3, [r0, #12]
 80155e6:	bd10      	pop	{r4, pc}

080155e8 <uxr_reset_input_reliable_stream>:
 80155e8:	8901      	ldrh	r1, [r0, #8]
 80155ea:	b1d9      	cbz	r1, 8015624 <uxr_reset_input_reliable_stream+0x3c>
 80155ec:	b510      	push	{r4, lr}
 80155ee:	f04f 0e00 	mov.w	lr, #0
 80155f2:	46f4      	mov	ip, lr
 80155f4:	4674      	mov	r4, lr
 80155f6:	6843      	ldr	r3, [r0, #4]
 80155f8:	f10e 0e01 	add.w	lr, lr, #1
 80155fc:	fbbc f2f1 	udiv	r2, ip, r1
 8015600:	fbb3 f3f1 	udiv	r3, r3, r1
 8015604:	fb01 c212 	mls	r2, r1, r2, ip
 8015608:	fa1f fc8e 	uxth.w	ip, lr
 801560c:	b292      	uxth	r2, r2
 801560e:	fb02 f303 	mul.w	r3, r2, r3
 8015612:	6802      	ldr	r2, [r0, #0]
 8015614:	50d4      	str	r4, [r2, r3]
 8015616:	8901      	ldrh	r1, [r0, #8]
 8015618:	4561      	cmp	r1, ip
 801561a:	d8ec      	bhi.n	80155f6 <uxr_reset_input_reliable_stream+0xe>
 801561c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015620:	60c3      	str	r3, [r0, #12]
 8015622:	bd10      	pop	{r4, pc}
 8015624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015628:	60c3      	str	r3, [r0, #12]
 801562a:	4770      	bx	lr

0801562c <uxr_receive_reliable_message>:
 801562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015630:	4604      	mov	r4, r0
 8015632:	460d      	mov	r5, r1
 8015634:	8901      	ldrh	r1, [r0, #8]
 8015636:	4617      	mov	r7, r2
 8015638:	8980      	ldrh	r0, [r0, #12]
 801563a:	4698      	mov	r8, r3
 801563c:	f000 fda6 	bl	801618c <uxr_seq_num_add>
 8015640:	4629      	mov	r1, r5
 8015642:	4606      	mov	r6, r0
 8015644:	89a0      	ldrh	r0, [r4, #12]
 8015646:	f000 fda9 	bl	801619c <uxr_seq_num_cmp>
 801564a:	2800      	cmp	r0, #0
 801564c:	db0a      	blt.n	8015664 <uxr_receive_reliable_message+0x38>
 801564e:	2600      	movs	r6, #0
 8015650:	4629      	mov	r1, r5
 8015652:	89e0      	ldrh	r0, [r4, #14]
 8015654:	f000 fda2 	bl	801619c <uxr_seq_num_cmp>
 8015658:	2800      	cmp	r0, #0
 801565a:	da00      	bge.n	801565e <uxr_receive_reliable_message+0x32>
 801565c:	81e5      	strh	r5, [r4, #14]
 801565e:	4630      	mov	r0, r6
 8015660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015664:	4630      	mov	r0, r6
 8015666:	4629      	mov	r1, r5
 8015668:	f000 fd98 	bl	801619c <uxr_seq_num_cmp>
 801566c:	2800      	cmp	r0, #0
 801566e:	dbee      	blt.n	801564e <uxr_receive_reliable_message+0x22>
 8015670:	6923      	ldr	r3, [r4, #16]
 8015672:	4638      	mov	r0, r7
 8015674:	4798      	blx	r3
 8015676:	4681      	mov	r9, r0
 8015678:	2101      	movs	r1, #1
 801567a:	89a0      	ldrh	r0, [r4, #12]
 801567c:	f000 fd86 	bl	801618c <uxr_seq_num_add>
 8015680:	f1b9 0f00 	cmp.w	r9, #0
 8015684:	bf08      	it	eq
 8015686:	4285      	cmpeq	r5, r0
 8015688:	bf0c      	ite	eq
 801568a:	2601      	moveq	r6, #1
 801568c:	2600      	movne	r6, #0
 801568e:	d104      	bne.n	801569a <uxr_receive_reliable_message+0x6e>
 8015690:	2300      	movs	r3, #0
 8015692:	9a08      	ldr	r2, [sp, #32]
 8015694:	81a0      	strh	r0, [r4, #12]
 8015696:	7013      	strb	r3, [r2, #0]
 8015698:	e7da      	b.n	8015650 <uxr_receive_reliable_message+0x24>
 801569a:	8922      	ldrh	r2, [r4, #8]
 801569c:	6863      	ldr	r3, [r4, #4]
 801569e:	fbb5 f0f2 	udiv	r0, r5, r2
 80156a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80156a6:	fb02 5010 	mls	r0, r2, r0, r5
 80156aa:	b280      	uxth	r0, r0
 80156ac:	fb03 f000 	mul.w	r0, r3, r0
 80156b0:	6823      	ldr	r3, [r4, #0]
 80156b2:	3004      	adds	r0, #4
 80156b4:	4418      	add	r0, r3
 80156b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d1c7      	bne.n	801564e <uxr_receive_reliable_message+0x22>
 80156be:	4639      	mov	r1, r7
 80156c0:	4642      	mov	r2, r8
 80156c2:	f002 fb28 	bl	8017d16 <memcpy>
 80156c6:	8921      	ldrh	r1, [r4, #8]
 80156c8:	6863      	ldr	r3, [r4, #4]
 80156ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80156ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80156d2:	fb01 5212 	mls	r2, r1, r2, r5
 80156d6:	b292      	uxth	r2, r2
 80156d8:	fb02 f303 	mul.w	r3, r2, r3
 80156dc:	6822      	ldr	r2, [r4, #0]
 80156de:	f842 8003 	str.w	r8, [r2, r3]
 80156e2:	2301      	movs	r3, #1
 80156e4:	9a08      	ldr	r2, [sp, #32]
 80156e6:	7013      	strb	r3, [r2, #0]
 80156e8:	f1b9 0f00 	cmp.w	r9, #0
 80156ec:	d0af      	beq.n	801564e <uxr_receive_reliable_message+0x22>
 80156ee:	89a6      	ldrh	r6, [r4, #12]
 80156f0:	2101      	movs	r1, #1
 80156f2:	4630      	mov	r0, r6
 80156f4:	f000 fd4a 	bl	801618c <uxr_seq_num_add>
 80156f8:	8921      	ldrh	r1, [r4, #8]
 80156fa:	6863      	ldr	r3, [r4, #4]
 80156fc:	4606      	mov	r6, r0
 80156fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8015702:	fbb3 f3f1 	udiv	r3, r3, r1
 8015706:	fb01 0212 	mls	r2, r1, r2, r0
 801570a:	6820      	ldr	r0, [r4, #0]
 801570c:	b292      	uxth	r2, r2
 801570e:	fb02 f303 	mul.w	r3, r2, r3
 8015712:	3304      	adds	r3, #4
 8015714:	4418      	add	r0, r3
 8015716:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d097      	beq.n	801564e <uxr_receive_reliable_message+0x22>
 801571e:	6923      	ldr	r3, [r4, #16]
 8015720:	4798      	blx	r3
 8015722:	2802      	cmp	r0, #2
 8015724:	d002      	beq.n	801572c <uxr_receive_reliable_message+0x100>
 8015726:	2801      	cmp	r0, #1
 8015728:	d0e2      	beq.n	80156f0 <uxr_receive_reliable_message+0xc4>
 801572a:	e790      	b.n	801564e <uxr_receive_reliable_message+0x22>
 801572c:	2601      	movs	r6, #1
 801572e:	e78f      	b.n	8015650 <uxr_receive_reliable_message+0x24>

08015730 <uxr_next_input_reliable_buffer_available>:
 8015730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015734:	4604      	mov	r4, r0
 8015736:	460f      	mov	r7, r1
 8015738:	8980      	ldrh	r0, [r0, #12]
 801573a:	2101      	movs	r1, #1
 801573c:	4690      	mov	r8, r2
 801573e:	f000 fd25 	bl	801618c <uxr_seq_num_add>
 8015742:	8922      	ldrh	r2, [r4, #8]
 8015744:	6866      	ldr	r6, [r4, #4]
 8015746:	fbb0 f3f2 	udiv	r3, r0, r2
 801574a:	fbb6 f6f2 	udiv	r6, r6, r2
 801574e:	fb02 0313 	mls	r3, r2, r3, r0
 8015752:	b29b      	uxth	r3, r3
 8015754:	fb03 f606 	mul.w	r6, r3, r6
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	3604      	adds	r6, #4
 801575c:	441e      	add	r6, r3
 801575e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015762:	f1b9 0f00 	cmp.w	r9, #0
 8015766:	d023      	beq.n	80157b0 <uxr_next_input_reliable_buffer_available+0x80>
 8015768:	4605      	mov	r5, r0
 801576a:	6923      	ldr	r3, [r4, #16]
 801576c:	4630      	mov	r0, r6
 801576e:	4798      	blx	r3
 8015770:	4682      	mov	sl, r0
 8015772:	b300      	cbz	r0, 80157b6 <uxr_next_input_reliable_buffer_available+0x86>
 8015774:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015778:	2101      	movs	r1, #1
 801577a:	4650      	mov	r0, sl
 801577c:	f000 fd06 	bl	801618c <uxr_seq_num_add>
 8015780:	8921      	ldrh	r1, [r4, #8]
 8015782:	4682      	mov	sl, r0
 8015784:	6863      	ldr	r3, [r4, #4]
 8015786:	6820      	ldr	r0, [r4, #0]
 8015788:	fbba f2f1 	udiv	r2, sl, r1
 801578c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015790:	fb01 a212 	mls	r2, r1, r2, sl
 8015794:	b292      	uxth	r2, r2
 8015796:	fb02 f303 	mul.w	r3, r2, r3
 801579a:	3304      	adds	r3, #4
 801579c:	4418      	add	r0, r3
 801579e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80157a2:	b12b      	cbz	r3, 80157b0 <uxr_next_input_reliable_buffer_available+0x80>
 80157a4:	6923      	ldr	r3, [r4, #16]
 80157a6:	4798      	blx	r3
 80157a8:	2802      	cmp	r0, #2
 80157aa:	d01b      	beq.n	80157e4 <uxr_next_input_reliable_buffer_available+0xb4>
 80157ac:	2801      	cmp	r0, #1
 80157ae:	d0e3      	beq.n	8015778 <uxr_next_input_reliable_buffer_available+0x48>
 80157b0:	2000      	movs	r0, #0
 80157b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157b6:	464a      	mov	r2, r9
 80157b8:	4631      	mov	r1, r6
 80157ba:	4638      	mov	r0, r7
 80157bc:	f7fa fdc4 	bl	8010348 <ucdr_init_buffer>
 80157c0:	8921      	ldrh	r1, [r4, #8]
 80157c2:	6863      	ldr	r3, [r4, #4]
 80157c4:	2001      	movs	r0, #1
 80157c6:	fbb5 f2f1 	udiv	r2, r5, r1
 80157ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80157ce:	fb01 5212 	mls	r2, r1, r2, r5
 80157d2:	b292      	uxth	r2, r2
 80157d4:	fb02 f303 	mul.w	r3, r2, r3
 80157d8:	6822      	ldr	r2, [r4, #0]
 80157da:	f842 a003 	str.w	sl, [r2, r3]
 80157de:	81a5      	strh	r5, [r4, #12]
 80157e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157e4:	8920      	ldrh	r0, [r4, #8]
 80157e6:	eb06 0108 	add.w	r1, r6, r8
 80157ea:	6863      	ldr	r3, [r4, #4]
 80157ec:	eba9 0208 	sub.w	r2, r9, r8
 80157f0:	fbb5 f6f0 	udiv	r6, r5, r0
 80157f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80157f8:	fb00 5516 	mls	r5, r0, r6, r5
 80157fc:	2000      	movs	r0, #0
 80157fe:	b2ad      	uxth	r5, r5
 8015800:	fb03 f505 	mul.w	r5, r3, r5
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	5158      	str	r0, [r3, r5]
 8015808:	4638      	mov	r0, r7
 801580a:	f7fa fd9d 	bl	8010348 <ucdr_init_buffer>
 801580e:	4638      	mov	r0, r7
 8015810:	4622      	mov	r2, r4
 8015812:	4903      	ldr	r1, [pc, #12]	@ (8015820 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015814:	f7fa fd6c 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8015818:	2001      	movs	r0, #1
 801581a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801581e:	e7c8      	b.n	80157b2 <uxr_next_input_reliable_buffer_available+0x82>
 8015820:	08015531 	.word	0x08015531

08015824 <uxr_process_heartbeat>:
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	4611      	mov	r1, r2
 8015828:	4604      	mov	r4, r0
 801582a:	89c0      	ldrh	r0, [r0, #14]
 801582c:	4615      	mov	r5, r2
 801582e:	f000 fcb5 	bl	801619c <uxr_seq_num_cmp>
 8015832:	2800      	cmp	r0, #0
 8015834:	bfb8      	it	lt
 8015836:	81e5      	strhlt	r5, [r4, #14]
 8015838:	bd38      	pop	{r3, r4, r5, pc}
 801583a:	bf00      	nop

0801583c <uxr_compute_acknack>:
 801583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015840:	8903      	ldrh	r3, [r0, #8]
 8015842:	4604      	mov	r4, r0
 8015844:	460f      	mov	r7, r1
 8015846:	8985      	ldrh	r5, [r0, #12]
 8015848:	b1db      	cbz	r3, 8015882 <uxr_compute_acknack+0x46>
 801584a:	4628      	mov	r0, r5
 801584c:	2601      	movs	r6, #1
 801584e:	e004      	b.n	801585a <uxr_compute_acknack+0x1e>
 8015850:	4566      	cmp	r6, ip
 8015852:	f106 0601 	add.w	r6, r6, #1
 8015856:	d214      	bcs.n	8015882 <uxr_compute_acknack+0x46>
 8015858:	89a0      	ldrh	r0, [r4, #12]
 801585a:	b2b1      	uxth	r1, r6
 801585c:	f000 fc96 	bl	801618c <uxr_seq_num_add>
 8015860:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015864:	fbb0 f2fc 	udiv	r2, r0, ip
 8015868:	e9d4 1300 	ldrd	r1, r3, [r4]
 801586c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015870:	fbb3 f3fc 	udiv	r3, r3, ip
 8015874:	b292      	uxth	r2, r2
 8015876:	fb02 f303 	mul.w	r3, r2, r3
 801587a:	58cb      	ldr	r3, [r1, r3]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d1e7      	bne.n	8015850 <uxr_compute_acknack+0x14>
 8015880:	4605      	mov	r5, r0
 8015882:	803d      	strh	r5, [r7, #0]
 8015884:	2101      	movs	r1, #1
 8015886:	89e6      	ldrh	r6, [r4, #14]
 8015888:	4628      	mov	r0, r5
 801588a:	f000 fc83 	bl	8016194 <uxr_seq_num_sub>
 801588e:	4601      	mov	r1, r0
 8015890:	4630      	mov	r0, r6
 8015892:	f000 fc7f 	bl	8016194 <uxr_seq_num_sub>
 8015896:	4606      	mov	r6, r0
 8015898:	b328      	cbz	r0, 80158e6 <uxr_compute_acknack+0xaa>
 801589a:	f04f 0900 	mov.w	r9, #0
 801589e:	f04f 0801 	mov.w	r8, #1
 80158a2:	464d      	mov	r5, r9
 80158a4:	fa1f f189 	uxth.w	r1, r9
 80158a8:	8838      	ldrh	r0, [r7, #0]
 80158aa:	f000 fc6f 	bl	801618c <uxr_seq_num_add>
 80158ae:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80158b2:	6861      	ldr	r1, [r4, #4]
 80158b4:	fa08 fe09 	lsl.w	lr, r8, r9
 80158b8:	6822      	ldr	r2, [r4, #0]
 80158ba:	f109 0901 	add.w	r9, r9, #1
 80158be:	ea4e 0e05 	orr.w	lr, lr, r5
 80158c2:	fbb0 f3fc 	udiv	r3, r0, ip
 80158c6:	fbb1 f1fc 	udiv	r1, r1, ip
 80158ca:	fb03 001c 	mls	r0, r3, ip, r0
 80158ce:	b283      	uxth	r3, r0
 80158d0:	fb01 f303 	mul.w	r3, r1, r3
 80158d4:	58d3      	ldr	r3, [r2, r3]
 80158d6:	b90b      	cbnz	r3, 80158dc <uxr_compute_acknack+0xa0>
 80158d8:	fa1f f58e 	uxth.w	r5, lr
 80158dc:	454e      	cmp	r6, r9
 80158de:	d1e1      	bne.n	80158a4 <uxr_compute_acknack+0x68>
 80158e0:	4628      	mov	r0, r5
 80158e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158e6:	4605      	mov	r5, r0
 80158e8:	4628      	mov	r0, r5
 80158ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158ee:	bf00      	nop

080158f0 <uxr_init_output_best_effort_stream>:
 80158f0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80158f4:	6001      	str	r1, [r0, #0]
 80158f6:	7303      	strb	r3, [r0, #12]
 80158f8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80158fc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015900:	4770      	bx	lr
 8015902:	bf00      	nop

08015904 <uxr_reset_output_best_effort_stream>:
 8015904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015908:	7b03      	ldrb	r3, [r0, #12]
 801590a:	81c2      	strh	r2, [r0, #14]
 801590c:	6043      	str	r3, [r0, #4]
 801590e:	4770      	bx	lr

08015910 <uxr_prepare_best_effort_buffer_to_write>:
 8015910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015912:	4604      	mov	r4, r0
 8015914:	b083      	sub	sp, #12
 8015916:	6840      	ldr	r0, [r0, #4]
 8015918:	460d      	mov	r5, r1
 801591a:	4616      	mov	r6, r2
 801591c:	f7fc f942 	bl	8011ba4 <uxr_submessage_padding>
 8015920:	6863      	ldr	r3, [r4, #4]
 8015922:	4418      	add	r0, r3
 8015924:	68a3      	ldr	r3, [r4, #8]
 8015926:	1942      	adds	r2, r0, r5
 8015928:	4293      	cmp	r3, r2
 801592a:	bf2c      	ite	cs
 801592c:	2701      	movcs	r7, #1
 801592e:	2700      	movcc	r7, #0
 8015930:	d202      	bcs.n	8015938 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015932:	4638      	mov	r0, r7
 8015934:	b003      	add	sp, #12
 8015936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015938:	9000      	str	r0, [sp, #0]
 801593a:	2300      	movs	r3, #0
 801593c:	4630      	mov	r0, r6
 801593e:	6821      	ldr	r1, [r4, #0]
 8015940:	f7fa fcf0 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8015944:	6861      	ldr	r1, [r4, #4]
 8015946:	4638      	mov	r0, r7
 8015948:	4429      	add	r1, r5
 801594a:	6061      	str	r1, [r4, #4]
 801594c:	b003      	add	sp, #12
 801594e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015950 <uxr_prepare_best_effort_buffer_to_send>:
 8015950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015954:	4604      	mov	r4, r0
 8015956:	461d      	mov	r5, r3
 8015958:	6840      	ldr	r0, [r0, #4]
 801595a:	7b23      	ldrb	r3, [r4, #12]
 801595c:	4298      	cmp	r0, r3
 801595e:	bf8c      	ite	hi
 8015960:	2601      	movhi	r6, #1
 8015962:	2600      	movls	r6, #0
 8015964:	d802      	bhi.n	801596c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015966:	4630      	mov	r0, r6
 8015968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801596c:	4688      	mov	r8, r1
 801596e:	89e0      	ldrh	r0, [r4, #14]
 8015970:	2101      	movs	r1, #1
 8015972:	4617      	mov	r7, r2
 8015974:	f000 fc0a 	bl	801618c <uxr_seq_num_add>
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	81e0      	strh	r0, [r4, #14]
 801597c:	8028      	strh	r0, [r5, #0]
 801597e:	4630      	mov	r0, r6
 8015980:	f8c8 3000 	str.w	r3, [r8]
 8015984:	6863      	ldr	r3, [r4, #4]
 8015986:	603b      	str	r3, [r7, #0]
 8015988:	7b23      	ldrb	r3, [r4, #12]
 801598a:	6063      	str	r3, [r4, #4]
 801598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015990 <on_full_output_buffer>:
 8015990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015992:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8015996:	460c      	mov	r4, r1
 8015998:	6803      	ldr	r3, [r0, #0]
 801599a:	4605      	mov	r5, r0
 801599c:	7b26      	ldrb	r6, [r4, #12]
 801599e:	e9d1 1200 	ldrd	r1, r2, [r1]
 80159a2:	fbb2 f2fc 	udiv	r2, r2, ip
 80159a6:	eba3 0e01 	sub.w	lr, r3, r1
 80159aa:	6903      	ldr	r3, [r0, #16]
 80159ac:	fbbe fef2 	udiv	lr, lr, r2
 80159b0:	f10e 0e01 	add.w	lr, lr, #1
 80159b4:	fa1f fe8e 	uxth.w	lr, lr
 80159b8:	fbbe f7fc 	udiv	r7, lr, ip
 80159bc:	fb0c ec17 	mls	ip, ip, r7, lr
 80159c0:	fa1f fc8c 	uxth.w	ip, ip
 80159c4:	fb02 fc0c 	mul.w	ip, r2, ip
 80159c8:	f851 200c 	ldr.w	r2, [r1, ip]
 80159cc:	44b4      	add	ip, r6
 80159ce:	1b92      	subs	r2, r2, r6
 80159d0:	f10c 0c08 	add.w	ip, ip, #8
 80159d4:	3a04      	subs	r2, #4
 80159d6:	4461      	add	r1, ip
 80159d8:	f7fa fcae 	bl	8010338 <ucdr_init_buffer_origin>
 80159dc:	4628      	mov	r0, r5
 80159de:	4622      	mov	r2, r4
 80159e0:	4902      	ldr	r1, [pc, #8]	@ (80159ec <on_full_output_buffer+0x5c>)
 80159e2:	f7fa fc85 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 80159e6:	2000      	movs	r0, #0
 80159e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159ea:	bf00      	nop
 80159ec:	08015991 	.word	0x08015991

080159f0 <uxr_init_output_reliable_stream>:
 80159f0:	b530      	push	{r4, r5, lr}
 80159f2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80159f6:	8103      	strh	r3, [r0, #8]
 80159f8:	7304      	strb	r4, [r0, #12]
 80159fa:	e9c0 1200 	strd	r1, r2, [r0]
 80159fe:	b1e3      	cbz	r3, 8015a3a <uxr_init_output_reliable_stream+0x4a>
 8015a00:	600c      	str	r4, [r1, #0]
 8015a02:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015a06:	f1bc 0f01 	cmp.w	ip, #1
 8015a0a:	d916      	bls.n	8015a3a <uxr_init_output_reliable_stream+0x4a>
 8015a0c:	f04f 0e01 	mov.w	lr, #1
 8015a10:	6843      	ldr	r3, [r0, #4]
 8015a12:	f10e 0501 	add.w	r5, lr, #1
 8015a16:	7b04      	ldrb	r4, [r0, #12]
 8015a18:	6801      	ldr	r1, [r0, #0]
 8015a1a:	fbbe f2fc 	udiv	r2, lr, ip
 8015a1e:	fbb3 f3fc 	udiv	r3, r3, ip
 8015a22:	fb0c e212 	mls	r2, ip, r2, lr
 8015a26:	fa1f fe85 	uxth.w	lr, r5
 8015a2a:	b292      	uxth	r2, r2
 8015a2c:	fb02 f303 	mul.w	r3, r2, r3
 8015a30:	50cc      	str	r4, [r1, r3]
 8015a32:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015a36:	45f4      	cmp	ip, lr
 8015a38:	d8ea      	bhi.n	8015a10 <uxr_init_output_reliable_stream+0x20>
 8015a3a:	4b07      	ldr	r3, [pc, #28]	@ (8015a58 <uxr_init_output_reliable_stream+0x68>)
 8015a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a40:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015a44:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015a48:	f8c0 300e 	str.w	r3, [r0, #14]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	8242      	strh	r2, [r0, #18]
 8015a50:	8403      	strh	r3, [r0, #32]
 8015a52:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8015a56:	bd30      	pop	{r4, r5, pc}
 8015a58:	ffff0000 	.word	0xffff0000
 8015a5c:	00000000 	.word	0x00000000

08015a60 <uxr_reset_output_reliable_stream>:
 8015a60:	8901      	ldrh	r1, [r0, #8]
 8015a62:	b510      	push	{r4, lr}
 8015a64:	b1b1      	cbz	r1, 8015a94 <uxr_reset_output_reliable_stream+0x34>
 8015a66:	f04f 0e00 	mov.w	lr, #0
 8015a6a:	46f4      	mov	ip, lr
 8015a6c:	6843      	ldr	r3, [r0, #4]
 8015a6e:	f10e 0e01 	add.w	lr, lr, #1
 8015a72:	7b04      	ldrb	r4, [r0, #12]
 8015a74:	fbbc f2f1 	udiv	r2, ip, r1
 8015a78:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a7c:	fb01 c212 	mls	r2, r1, r2, ip
 8015a80:	fa1f fc8e 	uxth.w	ip, lr
 8015a84:	b292      	uxth	r2, r2
 8015a86:	fb02 f303 	mul.w	r3, r2, r3
 8015a8a:	6802      	ldr	r2, [r0, #0]
 8015a8c:	50d4      	str	r4, [r2, r3]
 8015a8e:	8901      	ldrh	r1, [r0, #8]
 8015a90:	4561      	cmp	r1, ip
 8015a92:	d8eb      	bhi.n	8015a6c <uxr_reset_output_reliable_stream+0xc>
 8015a94:	4b08      	ldr	r3, [pc, #32]	@ (8015ab8 <uxr_reset_output_reliable_stream+0x58>)
 8015a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a9a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8015ab0 <uxr_reset_output_reliable_stream+0x50>
 8015a9e:	f8c0 300e 	str.w	r3, [r0, #14]
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	8242      	strh	r2, [r0, #18]
 8015aa6:	8403      	strh	r3, [r0, #32]
 8015aa8:	ed80 7b06 	vstr	d7, [r0, #24]
 8015aac:	bd10      	pop	{r4, pc}
 8015aae:	bf00      	nop
 8015ab0:	ffffffff 	.word	0xffffffff
 8015ab4:	7fffffff 	.word	0x7fffffff
 8015ab8:	ffff0000 	.word	0xffff0000

08015abc <uxr_prepare_reliable_buffer_to_write>:
 8015abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	b091      	sub	sp, #68	@ 0x44
 8015ac4:	8900      	ldrh	r0, [r0, #8]
 8015ac6:	468b      	mov	fp, r1
 8015ac8:	89e6      	ldrh	r6, [r4, #14]
 8015aca:	9204      	str	r2, [sp, #16]
 8015acc:	6865      	ldr	r5, [r4, #4]
 8015ace:	6823      	ldr	r3, [r4, #0]
 8015ad0:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015ad4:	fbb6 f2f0 	udiv	r2, r6, r0
 8015ad8:	fbb5 f5f0 	udiv	r5, r5, r0
 8015adc:	fb00 6212 	mls	r2, r0, r2, r6
 8015ae0:	1f2f      	subs	r7, r5, #4
 8015ae2:	b292      	uxth	r2, r2
 8015ae4:	fb05 3202 	mla	r2, r5, r2, r3
 8015ae8:	1d11      	adds	r1, r2, #4
 8015aea:	f8d2 8000 	ldr.w	r8, [r2]
 8015aee:	9103      	str	r1, [sp, #12]
 8015af0:	2800      	cmp	r0, #0
 8015af2:	f000 814a 	beq.w	8015d8a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8015af6:	f04f 0c00 	mov.w	ip, #0
 8015afa:	46e2      	mov	sl, ip
 8015afc:	4661      	mov	r1, ip
 8015afe:	f10c 0c01 	add.w	ip, ip, #1
 8015b02:	fbb1 f2f0 	udiv	r2, r1, r0
 8015b06:	fb00 1212 	mls	r2, r0, r2, r1
 8015b0a:	fa1f f18c 	uxth.w	r1, ip
 8015b0e:	b292      	uxth	r2, r2
 8015b10:	fb05 f202 	mul.w	r2, r5, r2
 8015b14:	589a      	ldr	r2, [r3, r2]
 8015b16:	454a      	cmp	r2, r9
 8015b18:	d103      	bne.n	8015b22 <uxr_prepare_reliable_buffer_to_write+0x66>
 8015b1a:	f10a 0a01 	add.w	sl, sl, #1
 8015b1e:	fa1f fa8a 	uxth.w	sl, sl
 8015b22:	4281      	cmp	r1, r0
 8015b24:	d3eb      	bcc.n	8015afe <uxr_prepare_reliable_buffer_to_write+0x42>
 8015b26:	4640      	mov	r0, r8
 8015b28:	2104      	movs	r1, #4
 8015b2a:	f8cd a014 	str.w	sl, [sp, #20]
 8015b2e:	f7fa fc0f 	bl	8010350 <ucdr_alignment>
 8015b32:	4480      	add	r8, r0
 8015b34:	eb08 020b 	add.w	r2, r8, fp
 8015b38:	42ba      	cmp	r2, r7
 8015b3a:	f240 80ca 	bls.w	8015cd2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015b3e:	7b22      	ldrb	r2, [r4, #12]
 8015b40:	445a      	add	r2, fp
 8015b42:	42ba      	cmp	r2, r7
 8015b44:	f240 80b2 	bls.w	8015cac <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8015b48:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015b4c:	b2bb      	uxth	r3, r7
 8015b4e:	eba2 0209 	sub.w	r2, r2, r9
 8015b52:	441a      	add	r2, r3
 8015b54:	b292      	uxth	r2, r2
 8015b56:	fb0a f902 	mul.w	r9, sl, r2
 8015b5a:	9205      	str	r2, [sp, #20]
 8015b5c:	45d9      	cmp	r9, fp
 8015b5e:	9206      	str	r2, [sp, #24]
 8015b60:	f0c0 80b3 	bcc.w	8015cca <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015b64:	f108 0204 	add.w	r2, r8, #4
 8015b68:	42ba      	cmp	r2, r7
 8015b6a:	f080 80da 	bcs.w	8015d22 <uxr_prepare_reliable_buffer_to_write+0x266>
 8015b6e:	f1a3 0904 	sub.w	r9, r3, #4
 8015b72:	9b05      	ldr	r3, [sp, #20]
 8015b74:	eba9 0908 	sub.w	r9, r9, r8
 8015b78:	fa1f f989 	uxth.w	r9, r9
 8015b7c:	ebab 0b09 	sub.w	fp, fp, r9
 8015b80:	fbbb f2f3 	udiv	r2, fp, r3
 8015b84:	fb03 b312 	mls	r3, r3, r2, fp
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f040 80c4 	bne.w	8015d16 <uxr_prepare_reliable_buffer_to_write+0x25a>
 8015b8e:	b293      	uxth	r3, r2
 8015b90:	4553      	cmp	r3, sl
 8015b92:	f200 809a 	bhi.w	8015cca <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f000 80f9 	beq.w	8015d8e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015b9c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015ba0:	f04f 0a00 	mov.w	sl, #0
 8015ba4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015ba8:	f10d 0b20 	add.w	fp, sp, #32
 8015bac:	9505      	str	r5, [sp, #20]
 8015bae:	461d      	mov	r5, r3
 8015bb0:	e000      	b.n	8015bb4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8015bb2:	46c1      	mov	r9, r8
 8015bb4:	8922      	ldrh	r2, [r4, #8]
 8015bb6:	4658      	mov	r0, fp
 8015bb8:	6863      	ldr	r3, [r4, #4]
 8015bba:	f10a 0a01 	add.w	sl, sl, #1
 8015bbe:	fbb6 f1f2 	udiv	r1, r6, r2
 8015bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015bc6:	fb02 6111 	mls	r1, r2, r1, r6
 8015bca:	463a      	mov	r2, r7
 8015bcc:	b289      	uxth	r1, r1
 8015bce:	fb03 f101 	mul.w	r1, r3, r1
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	3104      	adds	r1, #4
 8015bd6:	4419      	add	r1, r3
 8015bd8:	2300      	movs	r3, #0
 8015bda:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8015bde:	f8cd c000 	str.w	ip, [sp]
 8015be2:	f7fa fb9f 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8015be6:	464a      	mov	r2, r9
 8015be8:	2300      	movs	r3, #0
 8015bea:	210d      	movs	r1, #13
 8015bec:	4658      	mov	r0, fp
 8015bee:	f7fb ff99 	bl	8011b24 <uxr_buffer_submessage_header>
 8015bf2:	8921      	ldrh	r1, [r4, #8]
 8015bf4:	6863      	ldr	r3, [r4, #4]
 8015bf6:	4630      	mov	r0, r6
 8015bf8:	fbb6 f2f1 	udiv	r2, r6, r1
 8015bfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c00:	fb01 6212 	mls	r2, r1, r2, r6
 8015c04:	2101      	movs	r1, #1
 8015c06:	b292      	uxth	r2, r2
 8015c08:	fb02 f303 	mul.w	r3, r2, r3
 8015c0c:	6822      	ldr	r2, [r4, #0]
 8015c0e:	50d7      	str	r7, [r2, r3]
 8015c10:	f000 fabc 	bl	801618c <uxr_seq_num_add>
 8015c14:	4606      	mov	r6, r0
 8015c16:	fa1f f38a 	uxth.w	r3, sl
 8015c1a:	429d      	cmp	r5, r3
 8015c1c:	d8c9      	bhi.n	8015bb2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 8015c1e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015c22:	9d05      	ldr	r5, [sp, #20]
 8015c24:	8920      	ldrh	r0, [r4, #8]
 8015c26:	463a      	mov	r2, r7
 8015c28:	6863      	ldr	r3, [r4, #4]
 8015c2a:	fbb6 f1f0 	udiv	r1, r6, r0
 8015c2e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015c32:	fb00 6111 	mls	r1, r0, r1, r6
 8015c36:	4658      	mov	r0, fp
 8015c38:	b289      	uxth	r1, r1
 8015c3a:	fb01 f303 	mul.w	r3, r1, r3
 8015c3e:	6821      	ldr	r1, [r4, #0]
 8015c40:	3304      	adds	r3, #4
 8015c42:	4419      	add	r1, r3
 8015c44:	2300      	movs	r3, #0
 8015c46:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8015c4a:	9700      	str	r7, [sp, #0]
 8015c4c:	f7fa fb6a 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8015c50:	9f06      	ldr	r7, [sp, #24]
 8015c52:	4658      	mov	r0, fp
 8015c54:	2302      	movs	r3, #2
 8015c56:	b2ba      	uxth	r2, r7
 8015c58:	210d      	movs	r1, #13
 8015c5a:	f7fb ff63 	bl	8011b24 <uxr_buffer_submessage_header>
 8015c5e:	f108 0104 	add.w	r1, r8, #4
 8015c62:	9b03      	ldr	r3, [sp, #12]
 8015c64:	f1a5 0208 	sub.w	r2, r5, #8
 8015c68:	8925      	ldrh	r5, [r4, #8]
 8015c6a:	440b      	add	r3, r1
 8015c6c:	eba2 0208 	sub.w	r2, r2, r8
 8015c70:	fbb6 f0f5 	udiv	r0, r6, r5
 8015c74:	4619      	mov	r1, r3
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	fb05 6010 	mls	r0, r5, r0, r6
 8015c7c:	fbb3 f3f5 	udiv	r3, r3, r5
 8015c80:	b280      	uxth	r0, r0
 8015c82:	6825      	ldr	r5, [r4, #0]
 8015c84:	fb00 f303 	mul.w	r3, r0, r3
 8015c88:	7b20      	ldrb	r0, [r4, #12]
 8015c8a:	3004      	adds	r0, #4
 8015c8c:	4438      	add	r0, r7
 8015c8e:	50e8      	str	r0, [r5, r3]
 8015c90:	9d04      	ldr	r5, [sp, #16]
 8015c92:	4628      	mov	r0, r5
 8015c94:	f7fa fb58 	bl	8010348 <ucdr_init_buffer>
 8015c98:	4628      	mov	r0, r5
 8015c9a:	4622      	mov	r2, r4
 8015c9c:	493d      	ldr	r1, [pc, #244]	@ (8015d94 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015c9e:	f7fa fb27 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8015ca2:	2001      	movs	r0, #1
 8015ca4:	81e6      	strh	r6, [r4, #14]
 8015ca6:	b011      	add	sp, #68	@ 0x44
 8015ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cac:	2101      	movs	r1, #1
 8015cae:	89e0      	ldrh	r0, [r4, #14]
 8015cb0:	f000 fa6c 	bl	801618c <uxr_seq_num_add>
 8015cb4:	4605      	mov	r5, r0
 8015cb6:	8921      	ldrh	r1, [r4, #8]
 8015cb8:	8a60      	ldrh	r0, [r4, #18]
 8015cba:	f000 fa67 	bl	801618c <uxr_seq_num_add>
 8015cbe:	4601      	mov	r1, r0
 8015cc0:	4628      	mov	r0, r5
 8015cc2:	f000 fa6b 	bl	801619c <uxr_seq_num_cmp>
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	dd44      	ble.n	8015d54 <uxr_prepare_reliable_buffer_to_write+0x298>
 8015cca:	2000      	movs	r0, #0
 8015ccc:	b011      	add	sp, #68	@ 0x44
 8015cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd2:	8921      	ldrh	r1, [r4, #8]
 8015cd4:	8a60      	ldrh	r0, [r4, #18]
 8015cd6:	9205      	str	r2, [sp, #20]
 8015cd8:	f000 fa58 	bl	801618c <uxr_seq_num_add>
 8015cdc:	4601      	mov	r1, r0
 8015cde:	4630      	mov	r0, r6
 8015ce0:	f000 fa5c 	bl	801619c <uxr_seq_num_cmp>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	9a05      	ldr	r2, [sp, #20]
 8015ce8:	dcef      	bgt.n	8015cca <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015cea:	8925      	ldrh	r5, [r4, #8]
 8015cec:	e9d4 7300 	ldrd	r7, r3, [r4]
 8015cf0:	fbb6 f4f5 	udiv	r4, r6, r5
 8015cf4:	fbb3 f3f5 	udiv	r3, r3, r5
 8015cf8:	fb05 6414 	mls	r4, r5, r4, r6
 8015cfc:	b2a4      	uxth	r4, r4
 8015cfe:	fb04 f303 	mul.w	r3, r4, r3
 8015d02:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015d06:	50fa      	str	r2, [r7, r3]
 8015d08:	2300      	movs	r3, #0
 8015d0a:	f8cd 8000 	str.w	r8, [sp]
 8015d0e:	f7fa fb09 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8015d12:	2001      	movs	r0, #1
 8015d14:	e7da      	b.n	8015ccc <uxr_prepare_reliable_buffer_to_write+0x210>
 8015d16:	3201      	adds	r2, #1
 8015d18:	9306      	str	r3, [sp, #24]
 8015d1a:	b293      	uxth	r3, r2
 8015d1c:	4553      	cmp	r3, sl
 8015d1e:	d8d4      	bhi.n	8015cca <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015d20:	e739      	b.n	8015b96 <uxr_prepare_reliable_buffer_to_write+0xda>
 8015d22:	4630      	mov	r0, r6
 8015d24:	2101      	movs	r1, #1
 8015d26:	9307      	str	r3, [sp, #28]
 8015d28:	f000 fa30 	bl	801618c <uxr_seq_num_add>
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	8920      	ldrh	r0, [r4, #8]
 8015d30:	6862      	ldr	r2, [r4, #4]
 8015d32:	fbb6 f1f0 	udiv	r1, r6, r0
 8015d36:	fbb2 f2f0 	udiv	r2, r2, r0
 8015d3a:	fb00 6111 	mls	r1, r0, r1, r6
 8015d3e:	b289      	uxth	r1, r1
 8015d40:	fb01 f202 	mul.w	r2, r1, r2
 8015d44:	6821      	ldr	r1, [r4, #0]
 8015d46:	3204      	adds	r2, #4
 8015d48:	188b      	adds	r3, r1, r2
 8015d4a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015d4e:	9303      	str	r3, [sp, #12]
 8015d50:	9b07      	ldr	r3, [sp, #28]
 8015d52:	e70c      	b.n	8015b6e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015d54:	8921      	ldrh	r1, [r4, #8]
 8015d56:	6863      	ldr	r3, [r4, #4]
 8015d58:	9804      	ldr	r0, [sp, #16]
 8015d5a:	fbb5 f2f1 	udiv	r2, r5, r1
 8015d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d62:	fb01 5212 	mls	r2, r1, r2, r5
 8015d66:	6821      	ldr	r1, [r4, #0]
 8015d68:	b292      	uxth	r2, r2
 8015d6a:	fb02 f303 	mul.w	r3, r2, r3
 8015d6e:	7b22      	ldrb	r2, [r4, #12]
 8015d70:	3304      	adds	r3, #4
 8015d72:	445a      	add	r2, fp
 8015d74:	4419      	add	r1, r3
 8015d76:	f841 2c04 	str.w	r2, [r1, #-4]
 8015d7a:	7b23      	ldrb	r3, [r4, #12]
 8015d7c:	9300      	str	r3, [sp, #0]
 8015d7e:	2300      	movs	r3, #0
 8015d80:	f7fa fad0 	bl	8010324 <ucdr_init_buffer_origin_offset>
 8015d84:	2001      	movs	r0, #1
 8015d86:	81e5      	strh	r5, [r4, #14]
 8015d88:	e7a0      	b.n	8015ccc <uxr_prepare_reliable_buffer_to_write+0x210>
 8015d8a:	4682      	mov	sl, r0
 8015d8c:	e6cb      	b.n	8015b26 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8015d8e:	f10d 0b20 	add.w	fp, sp, #32
 8015d92:	e747      	b.n	8015c24 <uxr_prepare_reliable_buffer_to_write+0x168>
 8015d94:	08015991 	.word	0x08015991

08015d98 <uxr_prepare_next_reliable_buffer_to_send>:
 8015d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	461d      	mov	r5, r3
 8015d9e:	460f      	mov	r7, r1
 8015da0:	8a00      	ldrh	r0, [r0, #16]
 8015da2:	2101      	movs	r1, #1
 8015da4:	4616      	mov	r6, r2
 8015da6:	f000 f9f1 	bl	801618c <uxr_seq_num_add>
 8015daa:	8028      	strh	r0, [r5, #0]
 8015dac:	8922      	ldrh	r2, [r4, #8]
 8015dae:	6863      	ldr	r3, [r4, #4]
 8015db0:	fbb0 f1f2 	udiv	r1, r0, r2
 8015db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015db8:	fb02 0c11 	mls	ip, r2, r1, r0
 8015dbc:	89e1      	ldrh	r1, [r4, #14]
 8015dbe:	fa1f fc8c 	uxth.w	ip, ip
 8015dc2:	fb0c fc03 	mul.w	ip, ip, r3
 8015dc6:	6823      	ldr	r3, [r4, #0]
 8015dc8:	f10c 0c04 	add.w	ip, ip, #4
 8015dcc:	4463      	add	r3, ip
 8015dce:	603b      	str	r3, [r7, #0]
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	449c      	add	ip, r3
 8015dd4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015dd8:	6033      	str	r3, [r6, #0]
 8015dda:	f000 f9df 	bl	801619c <uxr_seq_num_cmp>
 8015dde:	2800      	cmp	r0, #0
 8015de0:	dd01      	ble.n	8015de6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015de2:	2000      	movs	r0, #0
 8015de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015de6:	7b23      	ldrb	r3, [r4, #12]
 8015de8:	6832      	ldr	r2, [r6, #0]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d9f9      	bls.n	8015de2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015dee:	8a61      	ldrh	r1, [r4, #18]
 8015df0:	8a20      	ldrh	r0, [r4, #16]
 8015df2:	f000 f9cf 	bl	8016194 <uxr_seq_num_sub>
 8015df6:	8923      	ldrh	r3, [r4, #8]
 8015df8:	4283      	cmp	r3, r0
 8015dfa:	d0f2      	beq.n	8015de2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015dfc:	8828      	ldrh	r0, [r5, #0]
 8015dfe:	89e3      	ldrh	r3, [r4, #14]
 8015e00:	8220      	strh	r0, [r4, #16]
 8015e02:	4298      	cmp	r0, r3
 8015e04:	d001      	beq.n	8015e0a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015e06:	2001      	movs	r0, #1
 8015e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e0a:	2101      	movs	r1, #1
 8015e0c:	f000 f9be 	bl	801618c <uxr_seq_num_add>
 8015e10:	4603      	mov	r3, r0
 8015e12:	2001      	movs	r0, #1
 8015e14:	81e3      	strh	r3, [r4, #14]
 8015e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e18 <uxr_update_output_stream_heartbeat_timestamp>:
 8015e18:	b570      	push	{r4, r5, r6, lr}
 8015e1a:	8a01      	ldrh	r1, [r0, #16]
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	8a40      	ldrh	r0, [r0, #18]
 8015e20:	4615      	mov	r5, r2
 8015e22:	461e      	mov	r6, r3
 8015e24:	f000 f9ba 	bl	801619c <uxr_seq_num_cmp>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	db07      	blt.n	8015e3c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e30:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015e34:	2000      	movs	r0, #0
 8015e36:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015e3a:	bd70      	pop	{r4, r5, r6, pc}
 8015e3c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015e40:	b940      	cbnz	r0, 8015e54 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015e42:	2301      	movs	r3, #1
 8015e44:	f884 3020 	strb.w	r3, [r4, #32]
 8015e48:	3564      	adds	r5, #100	@ 0x64
 8015e4a:	f146 0600 	adc.w	r6, r6, #0
 8015e4e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015e52:	bd70      	pop	{r4, r5, r6, pc}
 8015e54:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015e58:	4295      	cmp	r5, r2
 8015e5a:	eb76 0303 	sbcs.w	r3, r6, r3
 8015e5e:	db04      	blt.n	8015e6a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8015e60:	1c43      	adds	r3, r0, #1
 8015e62:	2001      	movs	r0, #1
 8015e64:	f884 3020 	strb.w	r3, [r4, #32]
 8015e68:	e7ee      	b.n	8015e48 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015e6a:	2000      	movs	r0, #0
 8015e6c:	e7ec      	b.n	8015e48 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015e6e:	bf00      	nop

08015e70 <uxr_begin_output_nack_buffer_it>:
 8015e70:	8a40      	ldrh	r0, [r0, #18]
 8015e72:	4770      	bx	lr

08015e74 <uxr_next_reliable_nack_buffer_to_send>:
 8015e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e78:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8015e7c:	b197      	cbz	r7, 8015ea4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8015e7e:	4680      	mov	r8, r0
 8015e80:	460d      	mov	r5, r1
 8015e82:	4616      	mov	r6, r2
 8015e84:	461c      	mov	r4, r3
 8015e86:	8818      	ldrh	r0, [r3, #0]
 8015e88:	2101      	movs	r1, #1
 8015e8a:	f000 f97f 	bl	801618c <uxr_seq_num_add>
 8015e8e:	8020      	strh	r0, [r4, #0]
 8015e90:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8015e94:	f000 f982 	bl	801619c <uxr_seq_num_cmp>
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	dd06      	ble.n	8015eaa <uxr_next_reliable_nack_buffer_to_send+0x36>
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	461f      	mov	r7, r3
 8015ea0:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8015ea4:	4638      	mov	r0, r7
 8015ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eaa:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8015eae:	8820      	ldrh	r0, [r4, #0]
 8015eb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015eb4:	fbb0 f3f2 	udiv	r3, r0, r2
 8015eb8:	fbb1 fcf2 	udiv	ip, r1, r2
 8015ebc:	fb02 0313 	mls	r3, r2, r3, r0
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8015ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8015eca:	f10c 0c04 	add.w	ip, ip, #4
 8015ece:	4463      	add	r3, ip
 8015ed0:	602b      	str	r3, [r5, #0]
 8015ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8015ed6:	4463      	add	r3, ip
 8015ed8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015edc:	6033      	str	r3, [r6, #0]
 8015ede:	f898 200c 	ldrb.w	r2, [r8, #12]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d0d0      	beq.n	8015e88 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8015ee6:	e7dd      	b.n	8015ea4 <uxr_next_reliable_nack_buffer_to_send+0x30>

08015ee8 <uxr_process_acknack>:
 8015ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eea:	4604      	mov	r4, r0
 8015eec:	460e      	mov	r6, r1
 8015eee:	4610      	mov	r0, r2
 8015ef0:	2101      	movs	r1, #1
 8015ef2:	f000 f94f 	bl	8016194 <uxr_seq_num_sub>
 8015ef6:	8a61      	ldrh	r1, [r4, #18]
 8015ef8:	f000 f94c 	bl	8016194 <uxr_seq_num_sub>
 8015efc:	b1c8      	cbz	r0, 8015f32 <uxr_process_acknack+0x4a>
 8015efe:	4605      	mov	r5, r0
 8015f00:	2700      	movs	r7, #0
 8015f02:	2101      	movs	r1, #1
 8015f04:	8a60      	ldrh	r0, [r4, #18]
 8015f06:	f000 f941 	bl	801618c <uxr_seq_num_add>
 8015f0a:	8923      	ldrh	r3, [r4, #8]
 8015f0c:	6862      	ldr	r2, [r4, #4]
 8015f0e:	3701      	adds	r7, #1
 8015f10:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015f14:	6821      	ldr	r1, [r4, #0]
 8015f16:	42bd      	cmp	r5, r7
 8015f18:	8260      	strh	r0, [r4, #18]
 8015f1a:	fbb0 fef3 	udiv	lr, r0, r3
 8015f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015f22:	fb03 031e 	mls	r3, r3, lr, r0
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	fb02 f303 	mul.w	r3, r2, r3
 8015f2c:	f841 c003 	str.w	ip, [r1, r3]
 8015f30:	d1e7      	bne.n	8015f02 <uxr_process_acknack+0x1a>
 8015f32:	3e00      	subs	r6, #0
 8015f34:	f04f 0300 	mov.w	r3, #0
 8015f38:	bf18      	it	ne
 8015f3a:	2601      	movne	r6, #1
 8015f3c:	f884 3020 	strb.w	r3, [r4, #32]
 8015f40:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f46:	bf00      	nop

08015f48 <uxr_is_output_up_to_date>:
 8015f48:	8a01      	ldrh	r1, [r0, #16]
 8015f4a:	8a40      	ldrh	r0, [r0, #18]
 8015f4c:	b508      	push	{r3, lr}
 8015f4e:	f000 f925 	bl	801619c <uxr_seq_num_cmp>
 8015f52:	fab0 f080 	clz	r0, r0
 8015f56:	0940      	lsrs	r0, r0, #5
 8015f58:	bd08      	pop	{r3, pc}
 8015f5a:	bf00      	nop

08015f5c <get_available_free_slots>:
 8015f5c:	8901      	ldrh	r1, [r0, #8]
 8015f5e:	b1e1      	cbz	r1, 8015f9a <get_available_free_slots+0x3e>
 8015f60:	6843      	ldr	r3, [r0, #4]
 8015f62:	f04f 0c00 	mov.w	ip, #0
 8015f66:	b530      	push	{r4, r5, lr}
 8015f68:	fbb3 fef1 	udiv	lr, r3, r1
 8015f6c:	6805      	ldr	r5, [r0, #0]
 8015f6e:	4662      	mov	r2, ip
 8015f70:	7b04      	ldrb	r4, [r0, #12]
 8015f72:	4660      	mov	r0, ip
 8015f74:	f10c 0c01 	add.w	ip, ip, #1
 8015f78:	fbb2 f3f1 	udiv	r3, r2, r1
 8015f7c:	fb01 2313 	mls	r3, r1, r3, r2
 8015f80:	fa1f f28c 	uxth.w	r2, ip
 8015f84:	b29b      	uxth	r3, r3
 8015f86:	fb0e f303 	mul.w	r3, lr, r3
 8015f8a:	58eb      	ldr	r3, [r5, r3]
 8015f8c:	429c      	cmp	r4, r3
 8015f8e:	d101      	bne.n	8015f94 <get_available_free_slots+0x38>
 8015f90:	3001      	adds	r0, #1
 8015f92:	b280      	uxth	r0, r0
 8015f94:	428a      	cmp	r2, r1
 8015f96:	d3ed      	bcc.n	8015f74 <get_available_free_slots+0x18>
 8015f98:	bd30      	pop	{r4, r5, pc}
 8015f9a:	4608      	mov	r0, r1
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop

08015fa0 <uxr_buffer_cancel_data>:
 8015fa0:	b510      	push	{r4, lr}
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	b094      	sub	sp, #80	@ 0x50
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	9205      	str	r2, [sp, #20]
 8015faa:	9301      	str	r3, [sp, #4]
 8015fac:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fb0:	f88d 301e 	strb.w	r3, [sp, #30]
 8015fb4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015fb8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015fbc:	2308      	movs	r3, #8
 8015fbe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	9300      	str	r3, [sp, #0]
 8015fc6:	ab0c      	add	r3, sp, #48	@ 0x30
 8015fc8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015fcc:	2210      	movs	r2, #16
 8015fce:	f7fb fafd 	bl	80115cc <uxr_prepare_stream_to_write_submessage>
 8015fd2:	b918      	cbnz	r0, 8015fdc <uxr_buffer_cancel_data+0x3c>
 8015fd4:	4604      	mov	r4, r0
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	b014      	add	sp, #80	@ 0x50
 8015fda:	bd10      	pop	{r4, pc}
 8015fdc:	9905      	ldr	r1, [sp, #20]
 8015fde:	aa06      	add	r2, sp, #24
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f7fb fc2f 	bl	8011844 <uxr_init_base_object_request>
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	a906      	add	r1, sp, #24
 8015fea:	a80c      	add	r0, sp, #48	@ 0x30
 8015fec:	f7fc fe42 	bl	8012c74 <uxr_serialize_READ_DATA_Payload>
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	b014      	add	sp, #80	@ 0x50
 8015ff4:	bd10      	pop	{r4, pc}
 8015ff6:	bf00      	nop

08015ff8 <read_submessage_format>:
 8015ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ffc:	b095      	sub	sp, #84	@ 0x54
 8015ffe:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8016002:	b113      	cbz	r3, 801600a <read_submessage_format+0x12>
 8016004:	b015      	add	sp, #84	@ 0x54
 8016006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801600a:	4606      	mov	r6, r0
 801600c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801600e:	460c      	mov	r4, r1
 8016010:	4615      	mov	r5, r2
 8016012:	9004      	str	r0, [sp, #16]
 8016014:	4699      	mov	r9, r3
 8016016:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8016018:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801601c:	9005      	str	r0, [sp, #20]
 801601e:	a80c      	add	r0, sp, #48	@ 0x30
 8016020:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016024:	1a52      	subs	r2, r2, r1
 8016026:	f7fa f98f 	bl	8010348 <ucdr_init_buffer>
 801602a:	a80c      	add	r0, sp, #48	@ 0x30
 801602c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016030:	f7fa f95e 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8016034:	69e2      	ldr	r2, [r4, #28]
 8016036:	b19a      	cbz	r2, 8016060 <read_submessage_format+0x68>
 8016038:	f1b8 0f07 	cmp.w	r8, #7
 801603c:	f882 9014 	strb.w	r9, [r2, #20]
 8016040:	d040      	beq.n	80160c4 <read_submessage_format+0xcc>
 8016042:	f1b8 0f08 	cmp.w	r8, #8
 8016046:	d02e      	beq.n	80160a6 <read_submessage_format+0xae>
 8016048:	f1b8 0f06 	cmp.w	r8, #6
 801604c:	d011      	beq.n	8016072 <read_submessage_format+0x7a>
 801604e:	2301      	movs	r3, #1
 8016050:	7513      	strb	r3, [r2, #20]
 8016052:	4629      	mov	r1, r5
 8016054:	4620      	mov	r0, r4
 8016056:	f7fa f9cb 	bl	80103f0 <ucdr_advance_buffer>
 801605a:	b015      	add	sp, #84	@ 0x54
 801605c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016060:	f1b8 0f07 	cmp.w	r8, #7
 8016064:	d02e      	beq.n	80160c4 <read_submessage_format+0xcc>
 8016066:	f1b8 0f08 	cmp.w	r8, #8
 801606a:	d01c      	beq.n	80160a6 <read_submessage_format+0xae>
 801606c:	f1b8 0f06 	cmp.w	r8, #6
 8016070:	d1ef      	bne.n	8016052 <read_submessage_format+0x5a>
 8016072:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8016076:	f1b8 0f00 	cmp.w	r8, #0
 801607a:	d011      	beq.n	80160a0 <read_submessage_format+0xa8>
 801607c:	ab0c      	add	r3, sp, #48	@ 0x30
 801607e:	9501      	str	r5, [sp, #4]
 8016080:	463a      	mov	r2, r7
 8016082:	4630      	mov	r0, r6
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	2306      	movs	r3, #6
 8016088:	f88d 3016 	strb.w	r3, [sp, #22]
 801608c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8016090:	9302      	str	r3, [sp, #8]
 8016092:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016096:	47c0      	blx	r8
 8016098:	2301      	movs	r3, #1
 801609a:	69e2      	ldr	r2, [r4, #28]
 801609c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80160a0:	2a00      	cmp	r2, #0
 80160a2:	d1d4      	bne.n	801604e <read_submessage_format+0x56>
 80160a4:	e7d5      	b.n	8016052 <read_submessage_format+0x5a>
 80160a6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d0f8      	beq.n	80160a0 <read_submessage_format+0xa8>
 80160ae:	a80c      	add	r0, sp, #48	@ 0x30
 80160b0:	a906      	add	r1, sp, #24
 80160b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80160b6:	f7fc fe91 	bl	8012ddc <uxr_deserialize_SampleIdentity>
 80160ba:	b9a0      	cbnz	r0, 80160e6 <read_submessage_format+0xee>
 80160bc:	69e2      	ldr	r2, [r4, #28]
 80160be:	2a00      	cmp	r2, #0
 80160c0:	d1c5      	bne.n	801604e <read_submessage_format+0x56>
 80160c2:	e7c6      	b.n	8016052 <read_submessage_format+0x5a>
 80160c4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80160c8:	b13b      	cbz	r3, 80160da <read_submessage_format+0xe2>
 80160ca:	a906      	add	r1, sp, #24
 80160cc:	a80c      	add	r0, sp, #48	@ 0x30
 80160ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80160d2:	f7fc fb6f 	bl	80127b4 <uxr_deserialize_BaseObjectRequest>
 80160d6:	bb60      	cbnz	r0, 8016132 <read_submessage_format+0x13a>
 80160d8:	69e2      	ldr	r2, [r4, #28]
 80160da:	68a3      	ldr	r3, [r4, #8]
 80160dc:	442b      	add	r3, r5
 80160de:	60a3      	str	r3, [r4, #8]
 80160e0:	2a00      	cmp	r2, #0
 80160e2:	d1b4      	bne.n	801604e <read_submessage_format+0x56>
 80160e4:	e7b5      	b.n	8016052 <read_submessage_format+0x5a>
 80160e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80160e8:	a80c      	add	r0, sp, #48	@ 0x30
 80160ea:	eba8 0803 	sub.w	r8, r8, r3
 80160ee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80160f2:	44a8      	add	r8, r5
 80160f4:	1a52      	subs	r2, r2, r1
 80160f6:	f7fa f927 	bl	8010348 <ucdr_init_buffer>
 80160fa:	a80c      	add	r0, sp, #48	@ 0x30
 80160fc:	fa1f f888 	uxth.w	r8, r8
 8016100:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016104:	f7fa f8f4 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8016108:	ab0c      	add	r3, sp, #48	@ 0x30
 801610a:	2108      	movs	r1, #8
 801610c:	f8cd 8004 	str.w	r8, [sp, #4]
 8016110:	9300      	str	r3, [sp, #0]
 8016112:	463a      	mov	r2, r7
 8016114:	f88d 1016 	strb.w	r1, [sp, #22]
 8016118:	ab06      	add	r3, sp, #24
 801611a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801611e:	4630      	mov	r0, r6
 8016120:	9102      	str	r1, [sp, #8]
 8016122:	9905      	ldr	r1, [sp, #20]
 8016124:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8016128:	47b8      	blx	r7
 801612a:	2301      	movs	r3, #1
 801612c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016130:	e7c4      	b.n	80160bc <read_submessage_format+0xc4>
 8016132:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016138:	a80c      	add	r0, sp, #48	@ 0x30
 801613a:	1a52      	subs	r2, r2, r1
 801613c:	eba8 0803 	sub.w	r8, r8, r3
 8016140:	f7fa f902 	bl	8010348 <ucdr_init_buffer>
 8016144:	a80c      	add	r0, sp, #48	@ 0x30
 8016146:	44a8      	add	r8, r5
 8016148:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801614c:	f7fa f8d0 	bl	80102f0 <ucdr_set_on_full_buffer_callback>
 8016150:	ab0c      	add	r3, sp, #48	@ 0x30
 8016152:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016156:	fa1f f888 	uxth.w	r8, r8
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	463a      	mov	r2, r7
 801615e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016162:	4630      	mov	r0, r6
 8016164:	f8cd 8004 	str.w	r8, [sp, #4]
 8016168:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801616c:	2107      	movs	r1, #7
 801616e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016172:	b29b      	uxth	r3, r3
 8016174:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8016178:	9102      	str	r1, [sp, #8]
 801617a:	9905      	ldr	r1, [sp, #20]
 801617c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8016180:	47b8      	blx	r7
 8016182:	2301      	movs	r3, #1
 8016184:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8016188:	e7a6      	b.n	80160d8 <read_submessage_format+0xe0>
 801618a:	bf00      	nop

0801618c <uxr_seq_num_add>:
 801618c:	4408      	add	r0, r1
 801618e:	b280      	uxth	r0, r0
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop

08016194 <uxr_seq_num_sub>:
 8016194:	1a40      	subs	r0, r0, r1
 8016196:	b280      	uxth	r0, r0
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop

0801619c <uxr_seq_num_cmp>:
 801619c:	4288      	cmp	r0, r1
 801619e:	d011      	beq.n	80161c4 <uxr_seq_num_cmp+0x28>
 80161a0:	d309      	bcc.n	80161b6 <uxr_seq_num_cmp+0x1a>
 80161a2:	4288      	cmp	r0, r1
 80161a4:	d910      	bls.n	80161c8 <uxr_seq_num_cmp+0x2c>
 80161a6:	1a40      	subs	r0, r0, r1
 80161a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80161ac:	bfd4      	ite	le
 80161ae:	2001      	movle	r0, #1
 80161b0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80161b4:	4770      	bx	lr
 80161b6:	1a0b      	subs	r3, r1, r0
 80161b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80161bc:	daf1      	bge.n	80161a2 <uxr_seq_num_cmp+0x6>
 80161be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161c2:	4770      	bx	lr
 80161c4:	2000      	movs	r0, #0
 80161c6:	4770      	bx	lr
 80161c8:	2001      	movs	r0, #1
 80161ca:	4770      	bx	lr

080161cc <uxr_init_framing_io>:
 80161cc:	2300      	movs	r3, #0
 80161ce:	7041      	strb	r1, [r0, #1]
 80161d0:	7003      	strb	r3, [r0, #0]
 80161d2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80161d4:	4770      	bx	lr
 80161d6:	bf00      	nop

080161d8 <uxr_write_framed_msg>:
 80161d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161dc:	4617      	mov	r7, r2
 80161de:	7842      	ldrb	r2, [r0, #1]
 80161e0:	460e      	mov	r6, r1
 80161e2:	b083      	sub	sp, #12
 80161e4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80161e8:	469b      	mov	fp, r3
 80161ea:	237e      	movs	r3, #126	@ 0x7e
 80161ec:	4604      	mov	r4, r0
 80161ee:	2901      	cmp	r1, #1
 80161f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80161f4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80161f8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80161fc:	f240 8115 	bls.w	801642a <uxr_write_framed_msg+0x252>
 8016200:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016204:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8016208:	2202      	movs	r2, #2
 801620a:	2901      	cmp	r1, #1
 801620c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016210:	d952      	bls.n	80162b8 <uxr_write_framed_msg+0xe0>
 8016212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016214:	2103      	movs	r1, #3
 8016216:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801621a:	b2dd      	uxtb	r5, r3
 801621c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8016220:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016224:	2a01      	cmp	r2, #1
 8016226:	d95c      	bls.n	80162e2 <uxr_write_framed_msg+0x10a>
 8016228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801622a:	1862      	adds	r2, r4, r1
 801622c:	3101      	adds	r1, #1
 801622e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016232:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8016236:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801623a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801623e:	2a01      	cmp	r2, #1
 8016240:	d961      	bls.n	8016306 <uxr_write_framed_msg+0x12e>
 8016242:	1c4a      	adds	r2, r1, #1
 8016244:	4421      	add	r1, r4
 8016246:	b2d2      	uxtb	r2, r2
 8016248:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801624c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016250:	2b00      	cmp	r3, #0
 8016252:	d06a      	beq.n	801632a <uxr_write_framed_msg+0x152>
 8016254:	f04f 0800 	mov.w	r8, #0
 8016258:	46c1      	mov	r9, r8
 801625a:	e016      	b.n	801628a <uxr_write_framed_msg+0xb2>
 801625c:	2a29      	cmp	r2, #41	@ 0x29
 801625e:	d868      	bhi.n	8016332 <uxr_write_framed_msg+0x15a>
 8016260:	18a0      	adds	r0, r4, r2
 8016262:	3201      	adds	r2, #1
 8016264:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016268:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801626c:	ea88 0101 	eor.w	r1, r8, r1
 8016270:	4b7d      	ldr	r3, [pc, #500]	@ (8016468 <uxr_write_framed_msg+0x290>)
 8016272:	f109 0901 	add.w	r9, r9, #1
 8016276:	b2c9      	uxtb	r1, r1
 8016278:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801627c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8016280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016282:	454b      	cmp	r3, r9
 8016284:	d969      	bls.n	801635a <uxr_write_framed_msg+0x182>
 8016286:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801628a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801628e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016292:	2801      	cmp	r0, #1
 8016294:	d8e2      	bhi.n	801625c <uxr_write_framed_msg+0x84>
 8016296:	1c50      	adds	r0, r2, #1
 8016298:	b2c0      	uxtb	r0, r0
 801629a:	2829      	cmp	r0, #41	@ 0x29
 801629c:	d849      	bhi.n	8016332 <uxr_write_framed_msg+0x15a>
 801629e:	18a0      	adds	r0, r4, r2
 80162a0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80162a4:	3202      	adds	r2, #2
 80162a6:	f081 0520 	eor.w	r5, r1, #32
 80162aa:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80162ae:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80162b2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80162b6:	e7d9      	b.n	801626c <uxr_write_framed_msg+0x94>
 80162b8:	2104      	movs	r1, #4
 80162ba:	f04f 0c03 	mov.w	ip, #3
 80162be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162c0:	4422      	add	r2, r4
 80162c2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80162c6:	44a4      	add	ip, r4
 80162c8:	b2dd      	uxtb	r5, r3
 80162ca:	f080 0020 	eor.w	r0, r0, #32
 80162ce:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80162d2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80162d6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80162da:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80162de:	2a01      	cmp	r2, #1
 80162e0:	d8a2      	bhi.n	8016228 <uxr_write_framed_msg+0x50>
 80162e2:	1862      	adds	r2, r4, r1
 80162e4:	207d      	movs	r0, #125	@ 0x7d
 80162e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162e8:	f085 0520 	eor.w	r5, r5, #32
 80162ec:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80162f0:	3102      	adds	r1, #2
 80162f2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80162f6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80162fa:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80162fe:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8016302:	2a01      	cmp	r2, #1
 8016304:	d89d      	bhi.n	8016242 <uxr_write_framed_msg+0x6a>
 8016306:	1c4d      	adds	r5, r1, #1
 8016308:	1c8a      	adds	r2, r1, #2
 801630a:	f080 0020 	eor.w	r0, r0, #32
 801630e:	4421      	add	r1, r4
 8016310:	fa54 f585 	uxtab	r5, r4, r5
 8016314:	b2d2      	uxtb	r2, r2
 8016316:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801631a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801631e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8016322:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016326:	2b00      	cmp	r3, #0
 8016328:	d194      	bne.n	8016254 <uxr_write_framed_msg+0x7c>
 801632a:	4619      	mov	r1, r3
 801632c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016330:	e019      	b.n	8016366 <uxr_write_framed_msg+0x18e>
 8016332:	2500      	movs	r5, #0
 8016334:	e000      	b.n	8016338 <uxr_write_framed_msg+0x160>
 8016336:	b160      	cbz	r0, 8016352 <uxr_write_framed_msg+0x17a>
 8016338:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801633c:	1b52      	subs	r2, r2, r5
 801633e:	4653      	mov	r3, sl
 8016340:	4638      	mov	r0, r7
 8016342:	4421      	add	r1, r4
 8016344:	47b0      	blx	r6
 8016346:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801634a:	4405      	add	r5, r0
 801634c:	4295      	cmp	r5, r2
 801634e:	d3f2      	bcc.n	8016336 <uxr_write_framed_msg+0x15e>
 8016350:	d066      	beq.n	8016420 <uxr_write_framed_msg+0x248>
 8016352:	2000      	movs	r0, #0
 8016354:	b003      	add	sp, #12
 8016356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801635a:	fa5f f188 	uxtb.w	r1, r8
 801635e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016362:	f8ad 8004 	strh.w	r8, [sp, #4]
 8016366:	f04f 0900 	mov.w	r9, #0
 801636a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801636e:	46c8      	mov	r8, r9
 8016370:	e013      	b.n	801639a <uxr_write_framed_msg+0x1c2>
 8016372:	2a29      	cmp	r2, #41	@ 0x29
 8016374:	d824      	bhi.n	80163c0 <uxr_write_framed_msg+0x1e8>
 8016376:	18a3      	adds	r3, r4, r2
 8016378:	3201      	adds	r2, #1
 801637a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801637e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016382:	f109 0901 	add.w	r9, r9, #1
 8016386:	f1b9 0f02 	cmp.w	r9, #2
 801638a:	d02d      	beq.n	80163e8 <uxr_write_framed_msg+0x210>
 801638c:	f109 0308 	add.w	r3, r9, #8
 8016390:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016394:	446b      	add	r3, sp
 8016396:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801639a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801639e:	2b01      	cmp	r3, #1
 80163a0:	d8e7      	bhi.n	8016372 <uxr_write_framed_msg+0x19a>
 80163a2:	1c53      	adds	r3, r2, #1
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	2b29      	cmp	r3, #41	@ 0x29
 80163a8:	d80a      	bhi.n	80163c0 <uxr_write_framed_msg+0x1e8>
 80163aa:	18a3      	adds	r3, r4, r2
 80163ac:	f081 0120 	eor.w	r1, r1, #32
 80163b0:	3202      	adds	r2, #2
 80163b2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80163b6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80163ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80163be:	e7e0      	b.n	8016382 <uxr_write_framed_msg+0x1aa>
 80163c0:	2500      	movs	r5, #0
 80163c2:	e001      	b.n	80163c8 <uxr_write_framed_msg+0x1f0>
 80163c4:	2800      	cmp	r0, #0
 80163c6:	d0c4      	beq.n	8016352 <uxr_write_framed_msg+0x17a>
 80163c8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80163cc:	1b52      	subs	r2, r2, r5
 80163ce:	4653      	mov	r3, sl
 80163d0:	4638      	mov	r0, r7
 80163d2:	4421      	add	r1, r4
 80163d4:	47b0      	blx	r6
 80163d6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80163da:	4405      	add	r5, r0
 80163dc:	4295      	cmp	r5, r2
 80163de:	d3f1      	bcc.n	80163c4 <uxr_write_framed_msg+0x1ec>
 80163e0:	d1b7      	bne.n	8016352 <uxr_write_framed_msg+0x17a>
 80163e2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80163e6:	e7d1      	b.n	801638c <uxr_write_framed_msg+0x1b4>
 80163e8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80163ec:	b19a      	cbz	r2, 8016416 <uxr_write_framed_msg+0x23e>
 80163ee:	2500      	movs	r5, #0
 80163f0:	e001      	b.n	80163f6 <uxr_write_framed_msg+0x21e>
 80163f2:	2800      	cmp	r0, #0
 80163f4:	d0ad      	beq.n	8016352 <uxr_write_framed_msg+0x17a>
 80163f6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80163fa:	1b52      	subs	r2, r2, r5
 80163fc:	4653      	mov	r3, sl
 80163fe:	4638      	mov	r0, r7
 8016400:	4421      	add	r1, r4
 8016402:	47b0      	blx	r6
 8016404:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016408:	4405      	add	r5, r0
 801640a:	4295      	cmp	r5, r2
 801640c:	d3f1      	bcc.n	80163f2 <uxr_write_framed_msg+0x21a>
 801640e:	d1a0      	bne.n	8016352 <uxr_write_framed_msg+0x17a>
 8016410:	2300      	movs	r3, #0
 8016412:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016418:	b298      	uxth	r0, r3
 801641a:	b003      	add	sp, #12
 801641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016420:	f04f 0300 	mov.w	r3, #0
 8016424:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016428:	e72a      	b.n	8016280 <uxr_write_framed_msg+0xa8>
 801642a:	217d      	movs	r1, #125	@ 0x7d
 801642c:	f082 0220 	eor.w	r2, r2, #32
 8016430:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8016434:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016438:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801643c:	2203      	movs	r2, #3
 801643e:	2901      	cmp	r1, #1
 8016440:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016444:	d803      	bhi.n	801644e <uxr_write_framed_msg+0x276>
 8016446:	2105      	movs	r1, #5
 8016448:	f04f 0c04 	mov.w	ip, #4
 801644c:	e737      	b.n	80162be <uxr_write_framed_msg+0xe6>
 801644e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016450:	2104      	movs	r1, #4
 8016452:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8016456:	b2dd      	uxtb	r5, r3
 8016458:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801645c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8016460:	2a01      	cmp	r2, #1
 8016462:	f63f aee1 	bhi.w	8016228 <uxr_write_framed_msg+0x50>
 8016466:	e73c      	b.n	80162e2 <uxr_write_framed_msg+0x10a>
 8016468:	080192b8 	.word	0x080192b8

0801646c <uxr_framing_read_transport>:
 801646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016470:	4604      	mov	r4, r0
 8016472:	b085      	sub	sp, #20
 8016474:	4692      	mov	sl, r2
 8016476:	4689      	mov	r9, r1
 8016478:	461d      	mov	r5, r3
 801647a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801647c:	f7fb fb98 	bl	8011bb0 <uxr_millis>
 8016480:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016484:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8016488:	4680      	mov	r8, r0
 801648a:	42ba      	cmp	r2, r7
 801648c:	d05f      	beq.n	801654e <uxr_framing_read_transport+0xe2>
 801648e:	d817      	bhi.n	80164c0 <uxr_framing_read_transport+0x54>
 8016490:	3f01      	subs	r7, #1
 8016492:	1aba      	subs	r2, r7, r2
 8016494:	2700      	movs	r7, #0
 8016496:	b2d2      	uxtb	r2, r2
 8016498:	42b2      	cmp	r2, r6
 801649a:	d81a      	bhi.n	80164d2 <uxr_framing_read_transport+0x66>
 801649c:	19d3      	adds	r3, r2, r7
 801649e:	42b3      	cmp	r3, r6
 80164a0:	d852      	bhi.n	8016548 <uxr_framing_read_transport+0xdc>
 80164a2:	b9d2      	cbnz	r2, 80164da <uxr_framing_read_transport+0x6e>
 80164a4:	2600      	movs	r6, #0
 80164a6:	f7fb fb83 	bl	8011bb0 <uxr_millis>
 80164aa:	682b      	ldr	r3, [r5, #0]
 80164ac:	eba0 0008 	sub.w	r0, r0, r8
 80164b0:	1a1b      	subs	r3, r3, r0
 80164b2:	4630      	mov	r0, r6
 80164b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164b8:	602b      	str	r3, [r5, #0]
 80164ba:	b005      	add	sp, #20
 80164bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c0:	2f00      	cmp	r7, #0
 80164c2:	d060      	beq.n	8016586 <uxr_framing_read_transport+0x11a>
 80164c4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80164c8:	3f01      	subs	r7, #1
 80164ca:	b2d2      	uxtb	r2, r2
 80164cc:	b2ff      	uxtb	r7, r7
 80164ce:	42b2      	cmp	r2, r6
 80164d0:	d9e4      	bls.n	801649c <uxr_framing_read_transport+0x30>
 80164d2:	b2f2      	uxtb	r2, r6
 80164d4:	2700      	movs	r7, #0
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	d0e4      	beq.n	80164a4 <uxr_framing_read_transport+0x38>
 80164da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164dc:	4650      	mov	r0, sl
 80164de:	9203      	str	r2, [sp, #12]
 80164e0:	9300      	str	r3, [sp, #0]
 80164e2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80164e6:	682b      	ldr	r3, [r5, #0]
 80164e8:	3102      	adds	r1, #2
 80164ea:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8016590 <uxr_framing_read_transport+0x124>
 80164ee:	4421      	add	r1, r4
 80164f0:	47c8      	blx	r9
 80164f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80164f6:	4606      	mov	r6, r0
 80164f8:	4403      	add	r3, r0
 80164fa:	0859      	lsrs	r1, r3, #1
 80164fc:	fbab 2101 	umull	r2, r1, fp, r1
 8016500:	222a      	movs	r2, #42	@ 0x2a
 8016502:	0889      	lsrs	r1, r1, #2
 8016504:	fb02 3111 	mls	r1, r2, r1, r3
 8016508:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801650c:	2800      	cmp	r0, #0
 801650e:	d0c9      	beq.n	80164a4 <uxr_framing_read_transport+0x38>
 8016510:	9a03      	ldr	r2, [sp, #12]
 8016512:	4290      	cmp	r0, r2
 8016514:	d1c7      	bne.n	80164a6 <uxr_framing_read_transport+0x3a>
 8016516:	2f00      	cmp	r7, #0
 8016518:	d0c5      	beq.n	80164a6 <uxr_framing_read_transport+0x3a>
 801651a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801651c:	3102      	adds	r1, #2
 801651e:	463a      	mov	r2, r7
 8016520:	4650      	mov	r0, sl
 8016522:	4421      	add	r1, r4
 8016524:	9300      	str	r3, [sp, #0]
 8016526:	2300      	movs	r3, #0
 8016528:	47c8      	blx	r9
 801652a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801652e:	4406      	add	r6, r0
 8016530:	1813      	adds	r3, r2, r0
 8016532:	085a      	lsrs	r2, r3, #1
 8016534:	fbab 1b02 	umull	r1, fp, fp, r2
 8016538:	222a      	movs	r2, #42	@ 0x2a
 801653a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801653e:	fb02 331b 	mls	r3, r2, fp, r3
 8016542:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016546:	e7ae      	b.n	80164a6 <uxr_framing_read_transport+0x3a>
 8016548:	1ab6      	subs	r6, r6, r2
 801654a:	b2f7      	uxtb	r7, r6
 801654c:	e7a9      	b.n	80164a2 <uxr_framing_read_transport+0x36>
 801654e:	2300      	movs	r3, #0
 8016550:	2e28      	cmp	r6, #40	@ 0x28
 8016552:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8016554:	d9bd      	bls.n	80164d2 <uxr_framing_read_transport+0x66>
 8016556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016558:	2229      	movs	r2, #41	@ 0x29
 801655a:	1ca1      	adds	r1, r4, #2
 801655c:	4650      	mov	r0, sl
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	682b      	ldr	r3, [r5, #0]
 8016562:	47c8      	blx	r9
 8016564:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016568:	4606      	mov	r6, r0
 801656a:	212a      	movs	r1, #42	@ 0x2a
 801656c:	4403      	add	r3, r0
 801656e:	4808      	ldr	r0, [pc, #32]	@ (8016590 <uxr_framing_read_transport+0x124>)
 8016570:	085a      	lsrs	r2, r3, #1
 8016572:	fba0 0202 	umull	r0, r2, r0, r2
 8016576:	0892      	lsrs	r2, r2, #2
 8016578:	fb01 3312 	mls	r3, r1, r2, r3
 801657c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016580:	2e00      	cmp	r6, #0
 8016582:	d08f      	beq.n	80164a4 <uxr_framing_read_transport+0x38>
 8016584:	e78f      	b.n	80164a6 <uxr_framing_read_transport+0x3a>
 8016586:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801658a:	b2d2      	uxtb	r2, r2
 801658c:	e784      	b.n	8016498 <uxr_framing_read_transport+0x2c>
 801658e:	bf00      	nop
 8016590:	30c30c31 	.word	0x30c30c31

08016594 <uxr_read_framed_msg>:
 8016594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016598:	461e      	mov	r6, r3
 801659a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801659e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80165a2:	b083      	sub	sp, #12
 80165a4:	4604      	mov	r4, r0
 80165a6:	4688      	mov	r8, r1
 80165a8:	429d      	cmp	r5, r3
 80165aa:	4691      	mov	r9, r2
 80165ac:	f000 818c 	beq.w	80168c8 <uxr_read_framed_msg+0x334>
 80165b0:	7823      	ldrb	r3, [r4, #0]
 80165b2:	4dc3      	ldr	r5, [pc, #780]	@ (80168c0 <uxr_read_framed_msg+0x32c>)
 80165b4:	4fc3      	ldr	r7, [pc, #780]	@ (80168c4 <uxr_read_framed_msg+0x330>)
 80165b6:	2b07      	cmp	r3, #7
 80165b8:	d8fd      	bhi.n	80165b6 <uxr_read_framed_msg+0x22>
 80165ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80165be:	011c      	.short	0x011c
 80165c0:	00d900fb 	.word	0x00d900fb
 80165c4:	008f00ba 	.word	0x008f00ba
 80165c8:	00320051 	.word	0x00320051
 80165cc:	0008      	.short	0x0008
 80165ce:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80165d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80165d6:	4299      	cmp	r1, r3
 80165d8:	f000 814d 	beq.w	8016876 <uxr_read_framed_msg+0x2e2>
 80165dc:	18e2      	adds	r2, r4, r3
 80165de:	7892      	ldrb	r2, [r2, #2]
 80165e0:	2a7d      	cmp	r2, #125	@ 0x7d
 80165e2:	f000 81b8 	beq.w	8016956 <uxr_read_framed_msg+0x3c2>
 80165e6:	3301      	adds	r3, #1
 80165e8:	212a      	movs	r1, #42	@ 0x2a
 80165ea:	2a7e      	cmp	r2, #126	@ 0x7e
 80165ec:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80165f0:	fba5 c000 	umull	ip, r0, r5, r0
 80165f4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80165f8:	fb01 3310 	mls	r3, r1, r0, r3
 80165fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016600:	f000 8257 	beq.w	8016ab2 <uxr_read_framed_msg+0x51e>
 8016604:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016606:	2000      	movs	r0, #0
 8016608:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801660a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801660e:	7020      	strb	r0, [r4, #0]
 8016610:	b29b      	uxth	r3, r3
 8016612:	4299      	cmp	r1, r3
 8016614:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016616:	f000 8178 	beq.w	801690a <uxr_read_framed_msg+0x376>
 801661a:	2000      	movs	r0, #0
 801661c:	b003      	add	sp, #12
 801661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016622:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016626:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801662a:	4298      	cmp	r0, r3
 801662c:	f000 8132 	beq.w	8016894 <uxr_read_framed_msg+0x300>
 8016630:	18e2      	adds	r2, r4, r3
 8016632:	7891      	ldrb	r1, [r2, #2]
 8016634:	297d      	cmp	r1, #125	@ 0x7d
 8016636:	f000 8170 	beq.w	801691a <uxr_read_framed_msg+0x386>
 801663a:	3301      	adds	r3, #1
 801663c:	202a      	movs	r0, #42	@ 0x2a
 801663e:	297e      	cmp	r1, #126	@ 0x7e
 8016640:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016644:	fba5 c202 	umull	ip, r2, r5, r2
 8016648:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801664c:	fb00 3312 	mls	r3, r0, r2, r3
 8016650:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016654:	f000 821d 	beq.w	8016a92 <uxr_read_framed_msg+0x4fe>
 8016658:	2307      	movs	r3, #7
 801665a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801665c:	7023      	strb	r3, [r4, #0]
 801665e:	e7aa      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 8016660:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016662:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8016666:	459e      	cmp	lr, r3
 8016668:	d827      	bhi.n	80166ba <uxr_read_framed_msg+0x126>
 801666a:	e032      	b.n	80166d2 <uxr_read_framed_msg+0x13e>
 801666c:	fba5 b101 	umull	fp, r1, r5, r1
 8016670:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016674:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016678:	0889      	lsrs	r1, r1, #2
 801667a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801667e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016682:	f000 80d4 	beq.w	801682e <uxr_read_framed_msg+0x29a>
 8016686:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801668a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801668e:	f000 80cb 	beq.w	8016828 <uxr_read_framed_msg+0x294>
 8016692:	f806 c003 	strb.w	ip, [r6, r3]
 8016696:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8016698:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801669a:	ea80 010c 	eor.w	r1, r0, ip
 801669e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80166a2:	3301      	adds	r3, #1
 80166a4:	b2c9      	uxtb	r1, r1
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80166ac:	4573      	cmp	r3, lr
 80166ae:	8663      	strh	r3, [r4, #50]	@ 0x32
 80166b0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80166b4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80166b6:	f080 811d 	bcs.w	80168f4 <uxr_read_framed_msg+0x360>
 80166ba:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80166be:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80166c2:	1c50      	adds	r0, r2, #1
 80166c4:	eb04 0c02 	add.w	ip, r4, r2
 80166c8:	4592      	cmp	sl, r2
 80166ca:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80166ce:	d1cd      	bne.n	801666c <uxr_read_framed_msg+0xd8>
 80166d0:	459e      	cmp	lr, r3
 80166d2:	f040 8114 	bne.w	80168fe <uxr_read_framed_msg+0x36a>
 80166d6:	2306      	movs	r3, #6
 80166d8:	7023      	strb	r3, [r4, #0]
 80166da:	e76c      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 80166dc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80166e0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80166e4:	4298      	cmp	r0, r3
 80166e6:	f000 80c6 	beq.w	8016876 <uxr_read_framed_msg+0x2e2>
 80166ea:	18e2      	adds	r2, r4, r3
 80166ec:	7891      	ldrb	r1, [r2, #2]
 80166ee:	297d      	cmp	r1, #125	@ 0x7d
 80166f0:	f000 8193 	beq.w	8016a1a <uxr_read_framed_msg+0x486>
 80166f4:	3301      	adds	r3, #1
 80166f6:	202a      	movs	r0, #42	@ 0x2a
 80166f8:	297e      	cmp	r1, #126	@ 0x7e
 80166fa:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80166fe:	fba5 c202 	umull	ip, r2, r5, r2
 8016702:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016706:	fb00 3312 	mls	r3, r0, r2, r3
 801670a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801670e:	f000 81d0 	beq.w	8016ab2 <uxr_read_framed_msg+0x51e>
 8016712:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016714:	2000      	movs	r0, #0
 8016716:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801671a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801671c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801671e:	b29b      	uxth	r3, r3
 8016720:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016722:	428b      	cmp	r3, r1
 8016724:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016726:	f240 80e2 	bls.w	80168ee <uxr_read_framed_msg+0x35a>
 801672a:	7020      	strb	r0, [r4, #0]
 801672c:	b003      	add	sp, #12
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016736:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801673a:	4298      	cmp	r0, r3
 801673c:	f000 80aa 	beq.w	8016894 <uxr_read_framed_msg+0x300>
 8016740:	18e2      	adds	r2, r4, r3
 8016742:	7891      	ldrb	r1, [r2, #2]
 8016744:	297d      	cmp	r1, #125	@ 0x7d
 8016746:	f000 8186 	beq.w	8016a56 <uxr_read_framed_msg+0x4c2>
 801674a:	3301      	adds	r3, #1
 801674c:	202a      	movs	r0, #42	@ 0x2a
 801674e:	297e      	cmp	r1, #126	@ 0x7e
 8016750:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016754:	fba5 c202 	umull	ip, r2, r5, r2
 8016758:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801675c:	fb00 3312 	mls	r3, r0, r2, r3
 8016760:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016764:	f000 8195 	beq.w	8016a92 <uxr_read_framed_msg+0x4fe>
 8016768:	2304      	movs	r3, #4
 801676a:	8621      	strh	r1, [r4, #48]	@ 0x30
 801676c:	7023      	strb	r3, [r4, #0]
 801676e:	e722      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 8016770:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016774:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016778:	4290      	cmp	r0, r2
 801677a:	f000 80b4 	beq.w	80168e6 <uxr_read_framed_msg+0x352>
 801677e:	18a3      	adds	r3, r4, r2
 8016780:	7899      	ldrb	r1, [r3, #2]
 8016782:	297d      	cmp	r1, #125	@ 0x7d
 8016784:	f000 8107 	beq.w	8016996 <uxr_read_framed_msg+0x402>
 8016788:	3201      	adds	r2, #1
 801678a:	232a      	movs	r3, #42	@ 0x2a
 801678c:	297e      	cmp	r1, #126	@ 0x7e
 801678e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8016792:	fba5 c000 	umull	ip, r0, r5, r0
 8016796:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801679a:	fb03 2210 	mls	r2, r3, r0, r2
 801679e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80167a2:	f000 818a 	beq.w	8016aba <uxr_read_framed_msg+0x526>
 80167a6:	7863      	ldrb	r3, [r4, #1]
 80167a8:	428b      	cmp	r3, r1
 80167aa:	bf0c      	ite	eq
 80167ac:	2303      	moveq	r3, #3
 80167ae:	2300      	movne	r3, #0
 80167b0:	7023      	strb	r3, [r4, #0]
 80167b2:	e700      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 80167b4:	2300      	movs	r3, #0
 80167b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80167ba:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80167be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80167c2:	4299      	cmp	r1, r3
 80167c4:	d06a      	beq.n	801689c <uxr_read_framed_msg+0x308>
 80167c6:	18e2      	adds	r2, r4, r3
 80167c8:	7890      	ldrb	r0, [r2, #2]
 80167ca:	287d      	cmp	r0, #125	@ 0x7d
 80167cc:	f000 8100 	beq.w	80169d0 <uxr_read_framed_msg+0x43c>
 80167d0:	3301      	adds	r3, #1
 80167d2:	212a      	movs	r1, #42	@ 0x2a
 80167d4:	287e      	cmp	r0, #126	@ 0x7e
 80167d6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80167da:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80167de:	fba5 c202 	umull	ip, r2, r5, r2
 80167e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80167e6:	fb01 3312 	mls	r3, r1, r2, r3
 80167ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80167ee:	d055      	beq.n	801689c <uxr_read_framed_msg+0x308>
 80167f0:	2302      	movs	r3, #2
 80167f2:	7023      	strb	r3, [r4, #0]
 80167f4:	e6df      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 80167f6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80167fa:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80167fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016802:	1c5a      	adds	r2, r3, #1
 8016804:	459c      	cmp	ip, r3
 8016806:	eb04 0103 	add.w	r1, r4, r3
 801680a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801680e:	f43f af04 	beq.w	801661a <uxr_read_framed_msg+0x86>
 8016812:	fba5 0303 	umull	r0, r3, r5, r3
 8016816:	7889      	ldrb	r1, [r1, #2]
 8016818:	089b      	lsrs	r3, r3, #2
 801681a:	297e      	cmp	r1, #126	@ 0x7e
 801681c:	fb0e 2313 	mls	r3, lr, r3, r2
 8016820:	b2db      	uxtb	r3, r3
 8016822:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016826:	d1ec      	bne.n	8016802 <uxr_read_framed_msg+0x26e>
 8016828:	2301      	movs	r3, #1
 801682a:	7023      	strb	r3, [r4, #0]
 801682c:	e6c3      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 801682e:	1c50      	adds	r0, r2, #1
 8016830:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016834:	3202      	adds	r2, #2
 8016836:	0841      	lsrs	r1, r0, #1
 8016838:	fba5 c101 	umull	ip, r1, r5, r1
 801683c:	0889      	lsrs	r1, r1, #2
 801683e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016842:	1860      	adds	r0, r4, r1
 8016844:	b2c9      	uxtb	r1, r1
 8016846:	458a      	cmp	sl, r1
 8016848:	f43f af42 	beq.w	80166d0 <uxr_read_framed_msg+0x13c>
 801684c:	0851      	lsrs	r1, r2, #1
 801684e:	7880      	ldrb	r0, [r0, #2]
 8016850:	fba5 a101 	umull	sl, r1, r5, r1
 8016854:	287e      	cmp	r0, #126	@ 0x7e
 8016856:	f080 0c20 	eor.w	ip, r0, #32
 801685a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801685e:	fb0b 2211 	mls	r2, fp, r1, r2
 8016862:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016866:	f47f af14 	bne.w	8016692 <uxr_read_framed_msg+0xfe>
 801686a:	459e      	cmp	lr, r3
 801686c:	f43f af33 	beq.w	80166d6 <uxr_read_framed_msg+0x142>
 8016870:	2301      	movs	r3, #1
 8016872:	7023      	strb	r3, [r4, #0]
 8016874:	e69f      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 8016876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	2301      	movs	r3, #1
 801687c:	9301      	str	r3, [sp, #4]
 801687e:	464a      	mov	r2, r9
 8016880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016882:	4641      	mov	r1, r8
 8016884:	4620      	mov	r0, r4
 8016886:	f7ff fdf1 	bl	801646c <uxr_framing_read_transport>
 801688a:	2800      	cmp	r0, #0
 801688c:	f43f aec5 	beq.w	801661a <uxr_read_framed_msg+0x86>
 8016890:	7823      	ldrb	r3, [r4, #0]
 8016892:	e690      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 8016894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016896:	9300      	str	r3, [sp, #0]
 8016898:	2302      	movs	r3, #2
 801689a:	e7ef      	b.n	801687c <uxr_read_framed_msg+0x2e8>
 801689c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801689e:	464a      	mov	r2, r9
 80168a0:	4641      	mov	r1, r8
 80168a2:	4620      	mov	r0, r4
 80168a4:	9300      	str	r3, [sp, #0]
 80168a6:	2304      	movs	r3, #4
 80168a8:	9301      	str	r3, [sp, #4]
 80168aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80168ac:	f7ff fdde 	bl	801646c <uxr_framing_read_transport>
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d1ed      	bne.n	8016890 <uxr_read_framed_msg+0x2fc>
 80168b4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80168b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80168ba:	d0e9      	beq.n	8016890 <uxr_read_framed_msg+0x2fc>
 80168bc:	e6ad      	b.n	801661a <uxr_read_framed_msg+0x86>
 80168be:	bf00      	nop
 80168c0:	30c30c31 	.word	0x30c30c31
 80168c4:	080192b8 	.word	0x080192b8
 80168c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	2305      	movs	r3, #5
 80168ce:	9301      	str	r3, [sp, #4]
 80168d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80168d2:	f7ff fdcb 	bl	801646c <uxr_framing_read_transport>
 80168d6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80168da:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80168de:	429a      	cmp	r2, r3
 80168e0:	f43f ae9b 	beq.w	801661a <uxr_read_framed_msg+0x86>
 80168e4:	e664      	b.n	80165b0 <uxr_read_framed_msg+0x1c>
 80168e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168e8:	9300      	str	r3, [sp, #0]
 80168ea:	2303      	movs	r3, #3
 80168ec:	e7c6      	b.n	801687c <uxr_read_framed_msg+0x2e8>
 80168ee:	2305      	movs	r3, #5
 80168f0:	7023      	strb	r3, [r4, #0]
 80168f2:	e660      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 80168f4:	f43f aeef 	beq.w	80166d6 <uxr_read_framed_msg+0x142>
 80168f8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80168fc:	d094      	beq.n	8016828 <uxr_read_framed_msg+0x294>
 80168fe:	ebae 0303 	sub.w	r3, lr, r3
 8016902:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016904:	3302      	adds	r3, #2
 8016906:	9200      	str	r2, [sp, #0]
 8016908:	e7b8      	b.n	801687c <uxr_read_framed_msg+0x2e8>
 801690a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801690e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016910:	7013      	strb	r3, [r2, #0]
 8016912:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016914:	b003      	add	sp, #12
 8016916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801691a:	1c59      	adds	r1, r3, #1
 801691c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016920:	084a      	lsrs	r2, r1, #1
 8016922:	fba5 e202 	umull	lr, r2, r5, r2
 8016926:	0892      	lsrs	r2, r2, #2
 8016928:	fb0c 1212 	mls	r2, ip, r2, r1
 801692c:	b2d1      	uxtb	r1, r2
 801692e:	4288      	cmp	r0, r1
 8016930:	d0b0      	beq.n	8016894 <uxr_read_framed_msg+0x300>
 8016932:	3302      	adds	r3, #2
 8016934:	4422      	add	r2, r4
 8016936:	7891      	ldrb	r1, [r2, #2]
 8016938:	085a      	lsrs	r2, r3, #1
 801693a:	fba5 0202 	umull	r0, r2, r5, r2
 801693e:	297e      	cmp	r1, #126	@ 0x7e
 8016940:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016944:	fb0c 3312 	mls	r3, ip, r2, r3
 8016948:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801694c:	f000 80a1 	beq.w	8016a92 <uxr_read_framed_msg+0x4fe>
 8016950:	f081 0120 	eor.w	r1, r1, #32
 8016954:	e680      	b.n	8016658 <uxr_read_framed_msg+0xc4>
 8016956:	f103 0c01 	add.w	ip, r3, #1
 801695a:	202a      	movs	r0, #42	@ 0x2a
 801695c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016960:	fba5 e202 	umull	lr, r2, r5, r2
 8016964:	0892      	lsrs	r2, r2, #2
 8016966:	fb00 c212 	mls	r2, r0, r2, ip
 801696a:	fa5f fc82 	uxtb.w	ip, r2
 801696e:	4561      	cmp	r1, ip
 8016970:	d081      	beq.n	8016876 <uxr_read_framed_msg+0x2e2>
 8016972:	3302      	adds	r3, #2
 8016974:	4422      	add	r2, r4
 8016976:	0859      	lsrs	r1, r3, #1
 8016978:	7892      	ldrb	r2, [r2, #2]
 801697a:	fba5 c101 	umull	ip, r1, r5, r1
 801697e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016980:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016984:	fb00 3311 	mls	r3, r0, r1, r3
 8016988:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801698c:	f000 8091 	beq.w	8016ab2 <uxr_read_framed_msg+0x51e>
 8016990:	f082 0220 	eor.w	r2, r2, #32
 8016994:	e636      	b.n	8016604 <uxr_read_framed_msg+0x70>
 8016996:	1c51      	adds	r1, r2, #1
 8016998:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801699c:	084b      	lsrs	r3, r1, #1
 801699e:	fba5 e303 	umull	lr, r3, r5, r3
 80169a2:	089b      	lsrs	r3, r3, #2
 80169a4:	fb0c 1313 	mls	r3, ip, r3, r1
 80169a8:	b2d9      	uxtb	r1, r3
 80169aa:	4288      	cmp	r0, r1
 80169ac:	d09b      	beq.n	80168e6 <uxr_read_framed_msg+0x352>
 80169ae:	3202      	adds	r2, #2
 80169b0:	4423      	add	r3, r4
 80169b2:	0850      	lsrs	r0, r2, #1
 80169b4:	789b      	ldrb	r3, [r3, #2]
 80169b6:	fba5 1000 	umull	r1, r0, r5, r0
 80169ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80169bc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80169c0:	fb0c 2210 	mls	r2, ip, r0, r2
 80169c4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80169c8:	d077      	beq.n	8016aba <uxr_read_framed_msg+0x526>
 80169ca:	f083 0120 	eor.w	r1, r3, #32
 80169ce:	e6ea      	b.n	80167a6 <uxr_read_framed_msg+0x212>
 80169d0:	f103 0c01 	add.w	ip, r3, #1
 80169d4:	202a      	movs	r0, #42	@ 0x2a
 80169d6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80169da:	fba5 e202 	umull	lr, r2, r5, r2
 80169de:	0892      	lsrs	r2, r2, #2
 80169e0:	fb00 c212 	mls	r2, r0, r2, ip
 80169e4:	fa5f fc82 	uxtb.w	ip, r2
 80169e8:	4561      	cmp	r1, ip
 80169ea:	f43f af57 	beq.w	801689c <uxr_read_framed_msg+0x308>
 80169ee:	3302      	adds	r3, #2
 80169f0:	4422      	add	r2, r4
 80169f2:	7891      	ldrb	r1, [r2, #2]
 80169f4:	085a      	lsrs	r2, r3, #1
 80169f6:	fba5 c202 	umull	ip, r2, r5, r2
 80169fa:	297e      	cmp	r1, #126	@ 0x7e
 80169fc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016a00:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016a04:	fb00 3312 	mls	r3, r0, r2, r3
 8016a08:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016a0c:	f43f af46 	beq.w	801689c <uxr_read_framed_msg+0x308>
 8016a10:	f081 0120 	eor.w	r1, r1, #32
 8016a14:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016a18:	e6ea      	b.n	80167f0 <uxr_read_framed_msg+0x25c>
 8016a1a:	1c59      	adds	r1, r3, #1
 8016a1c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016a20:	084a      	lsrs	r2, r1, #1
 8016a22:	fba5 e202 	umull	lr, r2, r5, r2
 8016a26:	0892      	lsrs	r2, r2, #2
 8016a28:	fb0c 1212 	mls	r2, ip, r2, r1
 8016a2c:	b2d1      	uxtb	r1, r2
 8016a2e:	4288      	cmp	r0, r1
 8016a30:	f43f af21 	beq.w	8016876 <uxr_read_framed_msg+0x2e2>
 8016a34:	3302      	adds	r3, #2
 8016a36:	4422      	add	r2, r4
 8016a38:	7891      	ldrb	r1, [r2, #2]
 8016a3a:	085a      	lsrs	r2, r3, #1
 8016a3c:	fba5 0202 	umull	r0, r2, r5, r2
 8016a40:	297e      	cmp	r1, #126	@ 0x7e
 8016a42:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016a46:	fb0c 3312 	mls	r3, ip, r2, r3
 8016a4a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016a4e:	d030      	beq.n	8016ab2 <uxr_read_framed_msg+0x51e>
 8016a50:	f081 0120 	eor.w	r1, r1, #32
 8016a54:	e65d      	b.n	8016712 <uxr_read_framed_msg+0x17e>
 8016a56:	1c59      	adds	r1, r3, #1
 8016a58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016a5c:	084a      	lsrs	r2, r1, #1
 8016a5e:	fba5 e202 	umull	lr, r2, r5, r2
 8016a62:	0892      	lsrs	r2, r2, #2
 8016a64:	fb0c 1212 	mls	r2, ip, r2, r1
 8016a68:	b2d1      	uxtb	r1, r2
 8016a6a:	4288      	cmp	r0, r1
 8016a6c:	f43f af12 	beq.w	8016894 <uxr_read_framed_msg+0x300>
 8016a70:	3302      	adds	r3, #2
 8016a72:	4422      	add	r2, r4
 8016a74:	7891      	ldrb	r1, [r2, #2]
 8016a76:	085a      	lsrs	r2, r3, #1
 8016a78:	fba5 0202 	umull	r0, r2, r5, r2
 8016a7c:	297e      	cmp	r1, #126	@ 0x7e
 8016a7e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016a82:	fb0c 3312 	mls	r3, ip, r2, r3
 8016a86:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016a8a:	d002      	beq.n	8016a92 <uxr_read_framed_msg+0x4fe>
 8016a8c:	f081 0120 	eor.w	r1, r1, #32
 8016a90:	e66a      	b.n	8016768 <uxr_read_framed_msg+0x1d4>
 8016a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a94:	9300      	str	r3, [sp, #0]
 8016a96:	2302      	movs	r3, #2
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	464a      	mov	r2, r9
 8016a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a9e:	4641      	mov	r1, r8
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f7ff fce3 	bl	801646c <uxr_framing_read_transport>
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	f47f aef2 	bne.w	8016890 <uxr_read_framed_msg+0x2fc>
 8016aac:	2301      	movs	r3, #1
 8016aae:	7023      	strb	r3, [r4, #0]
 8016ab0:	e581      	b.n	80165b6 <uxr_read_framed_msg+0x22>
 8016ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ab4:	9300      	str	r3, [sp, #0]
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e7ee      	b.n	8016a98 <uxr_read_framed_msg+0x504>
 8016aba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	2303      	movs	r3, #3
 8016ac0:	e7ea      	b.n	8016a98 <uxr_read_framed_msg+0x504>
 8016ac2:	bf00      	nop

08016ac4 <rcl_get_default_domain_id>:
 8016ac4:	b530      	push	{r4, r5, lr}
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	b083      	sub	sp, #12
 8016aca:	9300      	str	r3, [sp, #0]
 8016acc:	b1d0      	cbz	r0, 8016b04 <rcl_get_default_domain_id+0x40>
 8016ace:	4604      	mov	r4, r0
 8016ad0:	4669      	mov	r1, sp
 8016ad2:	4815      	ldr	r0, [pc, #84]	@ (8016b28 <rcl_get_default_domain_id+0x64>)
 8016ad4:	f7fd f91c 	bl	8013d10 <rcutils_get_env>
 8016ad8:	4602      	mov	r2, r0
 8016ada:	b110      	cbz	r0, 8016ae2 <rcl_get_default_domain_id+0x1e>
 8016adc:	2001      	movs	r0, #1
 8016ade:	b003      	add	sp, #12
 8016ae0:	bd30      	pop	{r4, r5, pc}
 8016ae2:	9b00      	ldr	r3, [sp, #0]
 8016ae4:	b18b      	cbz	r3, 8016b0a <rcl_get_default_domain_id+0x46>
 8016ae6:	7818      	ldrb	r0, [r3, #0]
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0f8      	beq.n	8016ade <rcl_get_default_domain_id+0x1a>
 8016aec:	a901      	add	r1, sp, #4
 8016aee:	4618      	mov	r0, r3
 8016af0:	9201      	str	r2, [sp, #4]
 8016af2:	f000 fe75 	bl	80177e0 <strtoul>
 8016af6:	4605      	mov	r5, r0
 8016af8:	b150      	cbz	r0, 8016b10 <rcl_get_default_domain_id+0x4c>
 8016afa:	1c43      	adds	r3, r0, #1
 8016afc:	d00d      	beq.n	8016b1a <rcl_get_default_domain_id+0x56>
 8016afe:	2000      	movs	r0, #0
 8016b00:	6025      	str	r5, [r4, #0]
 8016b02:	e7ec      	b.n	8016ade <rcl_get_default_domain_id+0x1a>
 8016b04:	200b      	movs	r0, #11
 8016b06:	b003      	add	sp, #12
 8016b08:	bd30      	pop	{r4, r5, pc}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	b003      	add	sp, #12
 8016b0e:	bd30      	pop	{r4, r5, pc}
 8016b10:	9b01      	ldr	r3, [sp, #4]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d0f2      	beq.n	8016afe <rcl_get_default_domain_id+0x3a>
 8016b18:	e7e0      	b.n	8016adc <rcl_get_default_domain_id+0x18>
 8016b1a:	f001 f8c7 	bl	8017cac <__errno>
 8016b1e:	6803      	ldr	r3, [r0, #0]
 8016b20:	2b22      	cmp	r3, #34	@ 0x22
 8016b22:	d1ec      	bne.n	8016afe <rcl_get_default_domain_id+0x3a>
 8016b24:	e7da      	b.n	8016adc <rcl_get_default_domain_id+0x18>
 8016b26:	bf00      	nop
 8016b28:	080194b8 	.word	0x080194b8

08016b2c <rcl_expand_topic_name>:
 8016b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b30:	b08d      	sub	sp, #52	@ 0x34
 8016b32:	4698      	mov	r8, r3
 8016b34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016b36:	9207      	str	r2, [sp, #28]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	bf18      	it	ne
 8016b3c:	f1b8 0f00 	cmpne.w	r8, #0
 8016b40:	bf0c      	ite	eq
 8016b42:	2301      	moveq	r3, #1
 8016b44:	2300      	movne	r3, #0
 8016b46:	2a00      	cmp	r2, #0
 8016b48:	bf08      	it	eq
 8016b4a:	f043 0301 	orreq.w	r3, r3, #1
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	bf08      	it	eq
 8016b52:	f043 0301 	orreq.w	r3, r3, #1
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d13d      	bne.n	8016bd6 <rcl_expand_topic_name+0xaa>
 8016b5a:	fab0 f280 	clz	r2, r0
 8016b5e:	4604      	mov	r4, r0
 8016b60:	0952      	lsrs	r2, r2, #5
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d037      	beq.n	8016bd6 <rcl_expand_topic_name+0xaa>
 8016b66:	460f      	mov	r7, r1
 8016b68:	a90b      	add	r1, sp, #44	@ 0x2c
 8016b6a:	f000 f9ed 	bl	8016f48 <rcl_validate_topic_name>
 8016b6e:	4605      	mov	r5, r0
 8016b70:	bb68      	cbnz	r0, 8016bce <rcl_expand_topic_name+0xa2>
 8016b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d137      	bne.n	8016be8 <rcl_expand_topic_name+0xbc>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	a90b      	add	r1, sp, #44	@ 0x2c
 8016b7c:	4638      	mov	r0, r7
 8016b7e:	f7fd fcf9 	bl	8014574 <rmw_validate_node_name>
 8016b82:	bb68      	cbnz	r0, 8016be0 <rcl_expand_topic_name+0xb4>
 8016b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d133      	bne.n	8016bf2 <rcl_expand_topic_name+0xc6>
 8016b8a:	462a      	mov	r2, r5
 8016b8c:	a90b      	add	r1, sp, #44	@ 0x2c
 8016b8e:	9807      	ldr	r0, [sp, #28]
 8016b90:	f7fd fcd2 	bl	8014538 <rmw_validate_namespace>
 8016b94:	bb20      	cbnz	r0, 8016be0 <rcl_expand_topic_name+0xb4>
 8016b96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016b98:	2d00      	cmp	r5, #0
 8016b9a:	f040 80a2 	bne.w	8016ce2 <rcl_expand_topic_name+0x1b6>
 8016b9e:	217b      	movs	r1, #123	@ 0x7b
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f000 ffa1 	bl	8017ae8 <strchr>
 8016ba6:	7823      	ldrb	r3, [r4, #0]
 8016ba8:	4681      	mov	r9, r0
 8016baa:	bb20      	cbnz	r0, 8016bf6 <rcl_expand_topic_name+0xca>
 8016bac:	2b2f      	cmp	r3, #47	@ 0x2f
 8016bae:	d122      	bne.n	8016bf6 <rcl_expand_topic_name+0xca>
 8016bb0:	ab19      	add	r3, sp, #100	@ 0x64
 8016bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bb6:	ab16      	add	r3, sp, #88	@ 0x58
 8016bb8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016bc0:	f7fd fa08 	bl	8013fd4 <rcutils_strdup>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016bc8:	bf08      	it	eq
 8016bca:	250a      	moveq	r5, #10
 8016bcc:	6018      	str	r0, [r3, #0]
 8016bce:	4628      	mov	r0, r5
 8016bd0:	b00d      	add	sp, #52	@ 0x34
 8016bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd6:	250b      	movs	r5, #11
 8016bd8:	4628      	mov	r0, r5
 8016bda:	b00d      	add	sp, #52	@ 0x34
 8016bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be0:	f7fc f926 	bl	8012e30 <rcl_convert_rmw_ret_to_rcl_ret>
 8016be4:	4605      	mov	r5, r0
 8016be6:	e7f2      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016be8:	2567      	movs	r5, #103	@ 0x67
 8016bea:	4628      	mov	r0, r5
 8016bec:	b00d      	add	sp, #52	@ 0x34
 8016bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf2:	25c9      	movs	r5, #201	@ 0xc9
 8016bf4:	e7eb      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016bf6:	2b7e      	cmp	r3, #126	@ 0x7e
 8016bf8:	d075      	beq.n	8016ce6 <rcl_expand_topic_name+0x1ba>
 8016bfa:	f1b9 0f00 	cmp.w	r9, #0
 8016bfe:	f000 80c2 	beq.w	8016d86 <rcl_expand_topic_name+0x25a>
 8016c02:	2300      	movs	r3, #0
 8016c04:	46a2      	mov	sl, r4
 8016c06:	461e      	mov	r6, r3
 8016c08:	9508      	str	r5, [sp, #32]
 8016c0a:	4655      	mov	r5, sl
 8016c0c:	9409      	str	r4, [sp, #36]	@ 0x24
 8016c0e:	46b2      	mov	sl, r6
 8016c10:	464c      	mov	r4, r9
 8016c12:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016c16:	2c00      	cmp	r4, #0
 8016c18:	f000 80ae 	beq.w	8016d78 <rcl_expand_topic_name+0x24c>
 8016c1c:	217d      	movs	r1, #125	@ 0x7d
 8016c1e:	4628      	mov	r0, r5
 8016c20:	f000 ff62 	bl	8017ae8 <strchr>
 8016c24:	eba0 0904 	sub.w	r9, r0, r4
 8016c28:	4621      	mov	r1, r4
 8016c2a:	4869      	ldr	r0, [pc, #420]	@ (8016dd0 <rcl_expand_topic_name+0x2a4>)
 8016c2c:	f109 0601 	add.w	r6, r9, #1
 8016c30:	4632      	mov	r2, r6
 8016c32:	f000 ff66 	bl	8017b02 <strncmp>
 8016c36:	2800      	cmp	r0, #0
 8016c38:	d051      	beq.n	8016cde <rcl_expand_topic_name+0x1b2>
 8016c3a:	4632      	mov	r2, r6
 8016c3c:	4621      	mov	r1, r4
 8016c3e:	4865      	ldr	r0, [pc, #404]	@ (8016dd4 <rcl_expand_topic_name+0x2a8>)
 8016c40:	f000 ff5f 	bl	8017b02 <strncmp>
 8016c44:	b128      	cbz	r0, 8016c52 <rcl_expand_topic_name+0x126>
 8016c46:	4632      	mov	r2, r6
 8016c48:	4621      	mov	r1, r4
 8016c4a:	4863      	ldr	r0, [pc, #396]	@ (8016dd8 <rcl_expand_topic_name+0x2ac>)
 8016c4c:	f000 ff59 	bl	8017b02 <strncmp>
 8016c50:	bb38      	cbnz	r0, 8016ca2 <rcl_expand_topic_name+0x176>
 8016c52:	46d9      	mov	r9, fp
 8016c54:	ab18      	add	r3, sp, #96	@ 0x60
 8016c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c5a:	ab16      	add	r3, sp, #88	@ 0x58
 8016c5c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c60:	4620      	mov	r0, r4
 8016c62:	4631      	mov	r1, r6
 8016c64:	cb0c      	ldmia	r3, {r2, r3}
 8016c66:	f7fd f9d7 	bl	8014018 <rcutils_strndup>
 8016c6a:	4604      	mov	r4, r0
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	f000 80a3 	beq.w	8016db8 <rcl_expand_topic_name+0x28c>
 8016c72:	464a      	mov	r2, r9
 8016c74:	4628      	mov	r0, r5
 8016c76:	ab16      	add	r3, sp, #88	@ 0x58
 8016c78:	4621      	mov	r1, r4
 8016c7a:	f7fd f8ab 	bl	8013dd4 <rcutils_repl_str>
 8016c7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c80:	4605      	mov	r5, r0
 8016c82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c84:	4620      	mov	r0, r4
 8016c86:	4798      	blx	r3
 8016c88:	4650      	mov	r0, sl
 8016c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016c8e:	4798      	blx	r3
 8016c90:	2d00      	cmp	r5, #0
 8016c92:	d06c      	beq.n	8016d6e <rcl_expand_topic_name+0x242>
 8016c94:	217b      	movs	r1, #123	@ 0x7b
 8016c96:	4628      	mov	r0, r5
 8016c98:	f000 ff26 	bl	8017ae8 <strchr>
 8016c9c:	46aa      	mov	sl, r5
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	e7b9      	b.n	8016c16 <rcl_expand_topic_name+0xea>
 8016ca2:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016ca6:	1c61      	adds	r1, r4, #1
 8016ca8:	4640      	mov	r0, r8
 8016caa:	f7fd facd 	bl	8014248 <rcutils_string_map_getn>
 8016cae:	4681      	mov	r9, r0
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	d1cf      	bne.n	8016c54 <rcl_expand_topic_name+0x128>
 8016cb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016cb6:	aa18      	add	r2, sp, #96	@ 0x60
 8016cb8:	2569      	movs	r5, #105	@ 0x69
 8016cba:	6018      	str	r0, [r3, #0]
 8016cbc:	ab16      	add	r3, sp, #88	@ 0x58
 8016cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8016cc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016cc4:	4631      	mov	r1, r6
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	cb0c      	ldmia	r3, {r2, r3}
 8016cca:	f7fd f9a5 	bl	8014018 <rcutils_strndup>
 8016cce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016cd2:	4798      	blx	r3
 8016cd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016cd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cd8:	4650      	mov	r0, sl
 8016cda:	4798      	blx	r3
 8016cdc:	e777      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016cde:	46b9      	mov	r9, r7
 8016ce0:	e7b8      	b.n	8016c54 <rcl_expand_topic_name+0x128>
 8016ce2:	25ca      	movs	r5, #202	@ 0xca
 8016ce4:	e773      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016ce6:	9e07      	ldr	r6, [sp, #28]
 8016ce8:	4630      	mov	r0, r6
 8016cea:	f7e9 fb03 	bl	80002f4 <strlen>
 8016cee:	4a3b      	ldr	r2, [pc, #236]	@ (8016ddc <rcl_expand_topic_name+0x2b0>)
 8016cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8016de0 <rcl_expand_topic_name+0x2b4>)
 8016cf2:	9603      	str	r6, [sp, #12]
 8016cf4:	2801      	cmp	r0, #1
 8016cf6:	bf18      	it	ne
 8016cf8:	4613      	movne	r3, r2
 8016cfa:	9704      	str	r7, [sp, #16]
 8016cfc:	9302      	str	r3, [sp, #8]
 8016cfe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	1c63      	adds	r3, r4, #1
 8016d04:	9305      	str	r3, [sp, #20]
 8016d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d0a:	9301      	str	r3, [sp, #4]
 8016d0c:	ab16      	add	r3, sp, #88	@ 0x58
 8016d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d10:	f7fd f826 	bl	8013d60 <rcutils_format_string_limit>
 8016d14:	4606      	mov	r6, r0
 8016d16:	b350      	cbz	r0, 8016d6e <rcl_expand_topic_name+0x242>
 8016d18:	f1b9 0f00 	cmp.w	r9, #0
 8016d1c:	d005      	beq.n	8016d2a <rcl_expand_topic_name+0x1fe>
 8016d1e:	217b      	movs	r1, #123	@ 0x7b
 8016d20:	46b2      	mov	sl, r6
 8016d22:	f000 fee1 	bl	8017ae8 <strchr>
 8016d26:	4681      	mov	r9, r0
 8016d28:	e76e      	b.n	8016c08 <rcl_expand_topic_name+0xdc>
 8016d2a:	7833      	ldrb	r3, [r6, #0]
 8016d2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d2e:	d01b      	beq.n	8016d68 <rcl_expand_topic_name+0x23c>
 8016d30:	9c07      	ldr	r4, [sp, #28]
 8016d32:	4620      	mov	r0, r4
 8016d34:	f7e9 fade 	bl	80002f4 <strlen>
 8016d38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d3c:	4a29      	ldr	r2, [pc, #164]	@ (8016de4 <rcl_expand_topic_name+0x2b8>)
 8016d3e:	9301      	str	r3, [sp, #4]
 8016d40:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016d42:	9604      	str	r6, [sp, #16]
 8016d44:	9300      	str	r3, [sp, #0]
 8016d46:	4b28      	ldr	r3, [pc, #160]	@ (8016de8 <rcl_expand_topic_name+0x2bc>)
 8016d48:	9403      	str	r4, [sp, #12]
 8016d4a:	2801      	cmp	r0, #1
 8016d4c:	bf18      	it	ne
 8016d4e:	4613      	movne	r3, r2
 8016d50:	9302      	str	r3, [sp, #8]
 8016d52:	ab16      	add	r3, sp, #88	@ 0x58
 8016d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d56:	f7fd f803 	bl	8013d60 <rcutils_format_string_limit>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016d5e:	4630      	mov	r0, r6
 8016d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d62:	461e      	mov	r6, r3
 8016d64:	4790      	blx	r2
 8016d66:	b116      	cbz	r6, 8016d6e <rcl_expand_topic_name+0x242>
 8016d68:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016d6a:	601e      	str	r6, [r3, #0]
 8016d6c:	e72f      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016d72:	250a      	movs	r5, #10
 8016d74:	6013      	str	r3, [r2, #0]
 8016d76:	e72a      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016d78:	4653      	mov	r3, sl
 8016d7a:	4656      	mov	r6, sl
 8016d7c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d1d2      	bne.n	8016d2a <rcl_expand_topic_name+0x1fe>
 8016d84:	7823      	ldrb	r3, [r4, #0]
 8016d86:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d88:	d01e      	beq.n	8016dc8 <rcl_expand_topic_name+0x29c>
 8016d8a:	9e07      	ldr	r6, [sp, #28]
 8016d8c:	4630      	mov	r0, r6
 8016d8e:	f7e9 fab1 	bl	80002f4 <strlen>
 8016d92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016d94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d98:	9603      	str	r6, [sp, #12]
 8016d9a:	9404      	str	r4, [sp, #16]
 8016d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8016da0:	4a10      	ldr	r2, [pc, #64]	@ (8016de4 <rcl_expand_topic_name+0x2b8>)
 8016da2:	4b11      	ldr	r3, [pc, #68]	@ (8016de8 <rcl_expand_topic_name+0x2bc>)
 8016da4:	2801      	cmp	r0, #1
 8016da6:	bf18      	it	ne
 8016da8:	4613      	movne	r3, r2
 8016daa:	9302      	str	r3, [sp, #8]
 8016dac:	ab16      	add	r3, sp, #88	@ 0x58
 8016dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016db0:	f7fc ffd6 	bl	8013d60 <rcutils_format_string_limit>
 8016db4:	4606      	mov	r6, r0
 8016db6:	e7d6      	b.n	8016d66 <rcl_expand_topic_name+0x23a>
 8016db8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8016dbc:	4650      	mov	r0, sl
 8016dbe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016dc0:	6014      	str	r4, [r2, #0]
 8016dc2:	250a      	movs	r5, #10
 8016dc4:	4798      	blx	r3
 8016dc6:	e702      	b.n	8016bce <rcl_expand_topic_name+0xa2>
 8016dc8:	2300      	movs	r3, #0
 8016dca:	461e      	mov	r6, r3
 8016dcc:	e7cc      	b.n	8016d68 <rcl_expand_topic_name+0x23c>
 8016dce:	bf00      	nop
 8016dd0:	080194d0 	.word	0x080194d0
 8016dd4:	080194d8 	.word	0x080194d8
 8016dd8:	080194e0 	.word	0x080194e0
 8016ddc:	080194c8 	.word	0x080194c8
 8016de0:	08018cb0 	.word	0x08018cb0
 8016de4:	08018e44 	.word	0x08018e44
 8016de8:	08018cc0 	.word	0x08018cc0

08016dec <rcl_get_default_topic_name_substitutions>:
 8016dec:	2800      	cmp	r0, #0
 8016dee:	bf0c      	ite	eq
 8016df0:	200b      	moveq	r0, #11
 8016df2:	2000      	movne	r0, #0
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop

08016df8 <rcl_get_zero_initialized_guard_condition>:
 8016df8:	4a03      	ldr	r2, [pc, #12]	@ (8016e08 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e00:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e04:	4618      	mov	r0, r3
 8016e06:	4770      	bx	lr
 8016e08:	080194ec 	.word	0x080194ec

08016e0c <rcl_guard_condition_init_from_rmw>:
 8016e0c:	b082      	sub	sp, #8
 8016e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	4604      	mov	r4, r0
 8016e16:	460e      	mov	r6, r1
 8016e18:	4615      	mov	r5, r2
 8016e1a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016e1e:	f10d 0e04 	add.w	lr, sp, #4
 8016e22:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016e26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016e2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8016e32:	a801      	add	r0, sp, #4
 8016e34:	f8ce 3000 	str.w	r3, [lr]
 8016e38:	f7f7 fd5a 	bl	800e8f0 <rcutils_allocator_is_valid>
 8016e3c:	f080 0301 	eor.w	r3, r0, #1
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	bb3b      	cbnz	r3, 8016e94 <rcl_guard_condition_init_from_rmw+0x88>
 8016e44:	b334      	cbz	r4, 8016e94 <rcl_guard_condition_init_from_rmw+0x88>
 8016e46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016e4a:	f1b8 0f00 	cmp.w	r8, #0
 8016e4e:	d11a      	bne.n	8016e86 <rcl_guard_condition_init_from_rmw+0x7a>
 8016e50:	b305      	cbz	r5, 8016e94 <rcl_guard_condition_init_from_rmw+0x88>
 8016e52:	4628      	mov	r0, r5
 8016e54:	f7fc f80a 	bl	8012e6c <rcl_context_is_valid>
 8016e58:	b1f0      	cbz	r0, 8016e98 <rcl_guard_condition_init_from_rmw+0x8c>
 8016e5a:	9b01      	ldr	r3, [sp, #4]
 8016e5c:	201c      	movs	r0, #28
 8016e5e:	9905      	ldr	r1, [sp, #20]
 8016e60:	4798      	blx	r3
 8016e62:	4607      	mov	r7, r0
 8016e64:	6060      	str	r0, [r4, #4]
 8016e66:	b320      	cbz	r0, 8016eb2 <rcl_guard_condition_init_from_rmw+0xa6>
 8016e68:	b1c6      	cbz	r6, 8016e9c <rcl_guard_condition_init_from_rmw+0x90>
 8016e6a:	6006      	str	r6, [r0, #0]
 8016e6c:	f880 8004 	strb.w	r8, [r0, #4]
 8016e70:	ac01      	add	r4, sp, #4
 8016e72:	f107 0c08 	add.w	ip, r7, #8
 8016e76:	2500      	movs	r5, #0
 8016e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	f8cc 3000 	str.w	r3, [ip]
 8016e84:	e000      	b.n	8016e88 <rcl_guard_condition_init_from_rmw+0x7c>
 8016e86:	2564      	movs	r5, #100	@ 0x64
 8016e88:	4628      	mov	r0, r5
 8016e8a:	b006      	add	sp, #24
 8016e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e90:	b002      	add	sp, #8
 8016e92:	4770      	bx	lr
 8016e94:	250b      	movs	r5, #11
 8016e96:	e7f7      	b.n	8016e88 <rcl_guard_condition_init_from_rmw+0x7c>
 8016e98:	2565      	movs	r5, #101	@ 0x65
 8016e9a:	e7f5      	b.n	8016e88 <rcl_guard_condition_init_from_rmw+0x7c>
 8016e9c:	6828      	ldr	r0, [r5, #0]
 8016e9e:	3028      	adds	r0, #40	@ 0x28
 8016ea0:	f000 fa42 	bl	8017328 <rmw_create_guard_condition>
 8016ea4:	6038      	str	r0, [r7, #0]
 8016ea6:	6867      	ldr	r7, [r4, #4]
 8016ea8:	683e      	ldr	r6, [r7, #0]
 8016eaa:	b126      	cbz	r6, 8016eb6 <rcl_guard_condition_init_from_rmw+0xaa>
 8016eac:	2301      	movs	r3, #1
 8016eae:	713b      	strb	r3, [r7, #4]
 8016eb0:	e7de      	b.n	8016e70 <rcl_guard_condition_init_from_rmw+0x64>
 8016eb2:	250a      	movs	r5, #10
 8016eb4:	e7e8      	b.n	8016e88 <rcl_guard_condition_init_from_rmw+0x7c>
 8016eb6:	9b02      	ldr	r3, [sp, #8]
 8016eb8:	4638      	mov	r0, r7
 8016eba:	9905      	ldr	r1, [sp, #20]
 8016ebc:	2501      	movs	r5, #1
 8016ebe:	4798      	blx	r3
 8016ec0:	6066      	str	r6, [r4, #4]
 8016ec2:	e7e1      	b.n	8016e88 <rcl_guard_condition_init_from_rmw+0x7c>

08016ec4 <rcl_guard_condition_fini>:
 8016ec4:	b570      	push	{r4, r5, r6, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	b1f0      	cbz	r0, 8016f08 <rcl_guard_condition_fini+0x44>
 8016eca:	6843      	ldr	r3, [r0, #4]
 8016ecc:	4604      	mov	r4, r0
 8016ece:	b163      	cbz	r3, 8016eea <rcl_guard_condition_fini+0x26>
 8016ed0:	6818      	ldr	r0, [r3, #0]
 8016ed2:	68de      	ldr	r6, [r3, #12]
 8016ed4:	6999      	ldr	r1, [r3, #24]
 8016ed6:	b160      	cbz	r0, 8016ef2 <rcl_guard_condition_fini+0x2e>
 8016ed8:	791d      	ldrb	r5, [r3, #4]
 8016eda:	b965      	cbnz	r5, 8016ef6 <rcl_guard_condition_fini+0x32>
 8016edc:	4618      	mov	r0, r3
 8016ede:	47b0      	blx	r6
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	6063      	str	r3, [r4, #4]
 8016ee6:	b002      	add	sp, #8
 8016ee8:	bd70      	pop	{r4, r5, r6, pc}
 8016eea:	461d      	mov	r5, r3
 8016eec:	4628      	mov	r0, r5
 8016eee:	b002      	add	sp, #8
 8016ef0:	bd70      	pop	{r4, r5, r6, pc}
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	e7f2      	b.n	8016edc <rcl_guard_condition_fini+0x18>
 8016ef6:	9101      	str	r1, [sp, #4]
 8016ef8:	f000 fa2c 	bl	8017354 <rmw_destroy_guard_condition>
 8016efc:	1e05      	subs	r5, r0, #0
 8016efe:	6863      	ldr	r3, [r4, #4]
 8016f00:	9901      	ldr	r1, [sp, #4]
 8016f02:	bf18      	it	ne
 8016f04:	2501      	movne	r5, #1
 8016f06:	e7e9      	b.n	8016edc <rcl_guard_condition_fini+0x18>
 8016f08:	250b      	movs	r5, #11
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	b002      	add	sp, #8
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}

08016f10 <rcl_guard_condition_get_default_options>:
 8016f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f12:	b087      	sub	sp, #28
 8016f14:	4606      	mov	r6, r0
 8016f16:	4c0b      	ldr	r4, [pc, #44]	@ (8016f44 <rcl_guard_condition_get_default_options+0x34>)
 8016f18:	4668      	mov	r0, sp
 8016f1a:	f7f7 fcdb 	bl	800e8d4 <rcutils_get_default_allocator>
 8016f1e:	46ee      	mov	lr, sp
 8016f20:	46a4      	mov	ip, r4
 8016f22:	4625      	mov	r5, r4
 8016f24:	4634      	mov	r4, r6
 8016f26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f30:	f8de 7000 	ldr.w	r7, [lr]
 8016f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f36:	4630      	mov	r0, r6
 8016f38:	f8cc 7000 	str.w	r7, [ip]
 8016f3c:	6027      	str	r7, [r4, #0]
 8016f3e:	b007      	add	sp, #28
 8016f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f42:	bf00      	nop
 8016f44:	2406852c 	.word	0x2406852c

08016f48 <rcl_validate_topic_name>:
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	f000 8089 	beq.w	8017060 <rcl_validate_topic_name+0x118>
 8016f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f52:	460e      	mov	r6, r1
 8016f54:	2900      	cmp	r1, #0
 8016f56:	f000 8085 	beq.w	8017064 <rcl_validate_topic_name+0x11c>
 8016f5a:	4604      	mov	r4, r0
 8016f5c:	4617      	mov	r7, r2
 8016f5e:	f7e9 f9c9 	bl	80002f4 <strlen>
 8016f62:	b1b0      	cbz	r0, 8016f92 <rcl_validate_topic_name+0x4a>
 8016f64:	f894 e000 	ldrb.w	lr, [r4]
 8016f68:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80170cc <rcl_validate_topic_name+0x184>
 8016f6c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8016f70:	f013 0304 	ands.w	r3, r3, #4
 8016f74:	d139      	bne.n	8016fea <rcl_validate_topic_name+0xa2>
 8016f76:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016f7a:	f814 2008 	ldrb.w	r2, [r4, r8]
 8016f7e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016f80:	d10f      	bne.n	8016fa2 <rcl_validate_topic_name+0x5a>
 8016f82:	2202      	movs	r2, #2
 8016f84:	6032      	str	r2, [r6, #0]
 8016f86:	b3a7      	cbz	r7, 8016ff2 <rcl_validate_topic_name+0xaa>
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f8c7 8000 	str.w	r8, [r7]
 8016f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f92:	2301      	movs	r3, #1
 8016f94:	6033      	str	r3, [r6, #0]
 8016f96:	b367      	cbz	r7, 8016ff2 <rcl_validate_topic_name+0xaa>
 8016f98:	2300      	movs	r3, #0
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	603b      	str	r3, [r7, #0]
 8016f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fa2:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 8016fa6:	461d      	mov	r5, r3
 8016fa8:	4619      	mov	r1, r3
 8016faa:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016fae:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8016fb2:	f1b9 0f09 	cmp.w	r9, #9
 8016fb6:	d91f      	bls.n	8016ff8 <rcl_validate_topic_name+0xb0>
 8016fb8:	f022 0920 	bic.w	r9, r2, #32
 8016fbc:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8016fc0:	f1b9 0f19 	cmp.w	r9, #25
 8016fc4:	d918      	bls.n	8016ff8 <rcl_validate_topic_name+0xb0>
 8016fc6:	2a5f      	cmp	r2, #95	@ 0x5f
 8016fc8:	d024      	beq.n	8017014 <rcl_validate_topic_name+0xcc>
 8016fca:	2a2f      	cmp	r2, #47	@ 0x2f
 8016fcc:	d058      	beq.n	8017080 <rcl_validate_topic_name+0x138>
 8016fce:	2a7e      	cmp	r2, #126	@ 0x7e
 8016fd0:	d04a      	beq.n	8017068 <rcl_validate_topic_name+0x120>
 8016fd2:	2a7b      	cmp	r2, #123	@ 0x7b
 8016fd4:	d05b      	beq.n	801708e <rcl_validate_topic_name+0x146>
 8016fd6:	2a7d      	cmp	r2, #125	@ 0x7d
 8016fd8:	d169      	bne.n	80170ae <rcl_validate_topic_name+0x166>
 8016fda:	2d00      	cmp	r5, #0
 8016fdc:	d15c      	bne.n	8017098 <rcl_validate_topic_name+0x150>
 8016fde:	2305      	movs	r3, #5
 8016fe0:	6033      	str	r3, [r6, #0]
 8016fe2:	b137      	cbz	r7, 8016ff2 <rcl_validate_topic_name+0xaa>
 8016fe4:	2000      	movs	r0, #0
 8016fe6:	6039      	str	r1, [r7, #0]
 8016fe8:	e7d9      	b.n	8016f9e <rcl_validate_topic_name+0x56>
 8016fea:	2304      	movs	r3, #4
 8016fec:	6033      	str	r3, [r6, #0]
 8016fee:	2f00      	cmp	r7, #0
 8016ff0:	d1d2      	bne.n	8016f98 <rcl_validate_topic_name+0x50>
 8016ff2:	2000      	movs	r0, #0
 8016ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ff8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016ffc:	0752      	lsls	r2, r2, #29
 8016ffe:	d509      	bpl.n	8017014 <rcl_validate_topic_name+0xcc>
 8017000:	2900      	cmp	r1, #0
 8017002:	bf0c      	ite	eq
 8017004:	2200      	moveq	r2, #0
 8017006:	f005 0201 	andne.w	r2, r5, #1
 801700a:	b11a      	cbz	r2, 8017014 <rcl_validate_topic_name+0xcc>
 801700c:	1e4d      	subs	r5, r1, #1
 801700e:	429d      	cmp	r5, r3
 8017010:	d031      	beq.n	8017076 <rcl_validate_topic_name+0x12e>
 8017012:	4615      	mov	r5, r2
 8017014:	3101      	adds	r1, #1
 8017016:	4288      	cmp	r0, r1
 8017018:	d1c7      	bne.n	8016faa <rcl_validate_topic_name+0x62>
 801701a:	2d00      	cmp	r5, #0
 801701c:	d142      	bne.n	80170a4 <rcl_validate_topic_name+0x15c>
 801701e:	4628      	mov	r0, r5
 8017020:	2301      	movs	r3, #1
 8017022:	e00c      	b.n	801703e <rcl_validate_topic_name+0xf6>
 8017024:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8017028:	d101      	bne.n	801702e <rcl_validate_topic_name+0xe6>
 801702a:	2801      	cmp	r0, #1
 801702c:	d047      	beq.n	80170be <rcl_validate_topic_name+0x176>
 801702e:	1c5a      	adds	r2, r3, #1
 8017030:	428b      	cmp	r3, r1
 8017032:	f100 0001 	add.w	r0, r0, #1
 8017036:	f104 0401 	add.w	r4, r4, #1
 801703a:	4613      	mov	r3, r2
 801703c:	d22e      	bcs.n	801709c <rcl_validate_topic_name+0x154>
 801703e:	4580      	cmp	r8, r0
 8017040:	d0f5      	beq.n	801702e <rcl_validate_topic_name+0xe6>
 8017042:	7822      	ldrb	r2, [r4, #0]
 8017044:	2a2f      	cmp	r2, #47	@ 0x2f
 8017046:	d1ed      	bne.n	8017024 <rcl_validate_topic_name+0xdc>
 8017048:	7862      	ldrb	r2, [r4, #1]
 801704a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801704e:	0752      	lsls	r2, r2, #29
 8017050:	d5ed      	bpl.n	801702e <rcl_validate_topic_name+0xe6>
 8017052:	2204      	movs	r2, #4
 8017054:	6032      	str	r2, [r6, #0]
 8017056:	2f00      	cmp	r7, #0
 8017058:	d0cb      	beq.n	8016ff2 <rcl_validate_topic_name+0xaa>
 801705a:	2000      	movs	r0, #0
 801705c:	603b      	str	r3, [r7, #0]
 801705e:	e79e      	b.n	8016f9e <rcl_validate_topic_name+0x56>
 8017060:	200b      	movs	r0, #11
 8017062:	4770      	bx	lr
 8017064:	200b      	movs	r0, #11
 8017066:	e79a      	b.n	8016f9e <rcl_validate_topic_name+0x56>
 8017068:	2900      	cmp	r1, #0
 801706a:	d0d3      	beq.n	8017014 <rcl_validate_topic_name+0xcc>
 801706c:	2306      	movs	r3, #6
 801706e:	6033      	str	r3, [r6, #0]
 8017070:	2f00      	cmp	r7, #0
 8017072:	d1b7      	bne.n	8016fe4 <rcl_validate_topic_name+0x9c>
 8017074:	e7bd      	b.n	8016ff2 <rcl_validate_topic_name+0xaa>
 8017076:	2309      	movs	r3, #9
 8017078:	6033      	str	r3, [r6, #0]
 801707a:	2f00      	cmp	r7, #0
 801707c:	d1b2      	bne.n	8016fe4 <rcl_validate_topic_name+0x9c>
 801707e:	e7b8      	b.n	8016ff2 <rcl_validate_topic_name+0xaa>
 8017080:	2d00      	cmp	r5, #0
 8017082:	d0c7      	beq.n	8017014 <rcl_validate_topic_name+0xcc>
 8017084:	2308      	movs	r3, #8
 8017086:	6033      	str	r3, [r6, #0]
 8017088:	2f00      	cmp	r7, #0
 801708a:	d1ab      	bne.n	8016fe4 <rcl_validate_topic_name+0x9c>
 801708c:	e7b1      	b.n	8016ff2 <rcl_validate_topic_name+0xaa>
 801708e:	2d00      	cmp	r5, #0
 8017090:	d1f8      	bne.n	8017084 <rcl_validate_topic_name+0x13c>
 8017092:	460b      	mov	r3, r1
 8017094:	2501      	movs	r5, #1
 8017096:	e7bd      	b.n	8017014 <rcl_validate_topic_name+0xcc>
 8017098:	2500      	movs	r5, #0
 801709a:	e7bb      	b.n	8017014 <rcl_validate_topic_name+0xcc>
 801709c:	2300      	movs	r3, #0
 801709e:	4618      	mov	r0, r3
 80170a0:	6033      	str	r3, [r6, #0]
 80170a2:	e77c      	b.n	8016f9e <rcl_validate_topic_name+0x56>
 80170a4:	2205      	movs	r2, #5
 80170a6:	6032      	str	r2, [r6, #0]
 80170a8:	2f00      	cmp	r7, #0
 80170aa:	d1d6      	bne.n	801705a <rcl_validate_topic_name+0x112>
 80170ac:	e7a1      	b.n	8016ff2 <rcl_validate_topic_name+0xaa>
 80170ae:	2d00      	cmp	r5, #0
 80170b0:	bf14      	ite	ne
 80170b2:	2308      	movne	r3, #8
 80170b4:	2303      	moveq	r3, #3
 80170b6:	6033      	str	r3, [r6, #0]
 80170b8:	2f00      	cmp	r7, #0
 80170ba:	d193      	bne.n	8016fe4 <rcl_validate_topic_name+0x9c>
 80170bc:	e799      	b.n	8016ff2 <rcl_validate_topic_name+0xaa>
 80170be:	2307      	movs	r3, #7
 80170c0:	6033      	str	r3, [r6, #0]
 80170c2:	2f00      	cmp	r7, #0
 80170c4:	d095      	beq.n	8016ff2 <rcl_validate_topic_name+0xaa>
 80170c6:	2301      	movs	r3, #1
 80170c8:	e7c7      	b.n	801705a <rcl_validate_topic_name+0x112>
 80170ca:	bf00      	nop
 80170cc:	08019564 	.word	0x08019564

080170d0 <on_status>:
 80170d0:	b082      	sub	sp, #8
 80170d2:	b002      	add	sp, #8
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop

080170d8 <on_topic>:
 80170d8:	4a23      	ldr	r2, [pc, #140]	@ (8017168 <on_topic+0x90>)
 80170da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170de:	6812      	ldr	r2, [r2, #0]
 80170e0:	b094      	sub	sp, #80	@ 0x50
 80170e2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80170e4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80170e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80170ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80170ec:	b3c2      	cbz	r2, 8017160 <on_topic+0x88>
 80170ee:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80170f2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80170f6:	e001      	b.n	80170fc <on_topic+0x24>
 80170f8:	6852      	ldr	r2, [r2, #4]
 80170fa:	b38a      	cbz	r2, 8017160 <on_topic+0x88>
 80170fc:	6894      	ldr	r4, [r2, #8]
 80170fe:	8aa3      	ldrh	r3, [r4, #20]
 8017100:	428b      	cmp	r3, r1
 8017102:	d1f9      	bne.n	80170f8 <on_topic+0x20>
 8017104:	7da3      	ldrb	r3, [r4, #22]
 8017106:	4283      	cmp	r3, r0
 8017108:	d1f6      	bne.n	80170f8 <on_topic+0x20>
 801710a:	2248      	movs	r2, #72	@ 0x48
 801710c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017110:	4668      	mov	r0, sp
 8017112:	f000 fe00 	bl	8017d16 <memcpy>
 8017116:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801711a:	4620      	mov	r0, r4
 801711c:	cb0c      	ldmia	r3, {r2, r3}
 801711e:	f7f7 fff3 	bl	800f108 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017122:	4607      	mov	r7, r0
 8017124:	b1e0      	cbz	r0, 8017160 <on_topic+0x88>
 8017126:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801712a:	462a      	mov	r2, r5
 801712c:	4630      	mov	r0, r6
 801712e:	f108 0110 	add.w	r1, r8, #16
 8017132:	f7fe f853 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 8017136:	b930      	cbnz	r0, 8017146 <on_topic+0x6e>
 8017138:	4639      	mov	r1, r7
 801713a:	480c      	ldr	r0, [pc, #48]	@ (801716c <on_topic+0x94>)
 801713c:	b014      	add	sp, #80	@ 0x50
 801713e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017142:	f7fd ba87 	b.w	8014654 <put_memory>
 8017146:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801714a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801714e:	f7f7 fdd9 	bl	800ed04 <rmw_uros_epoch_nanos>
 8017152:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017156:	2305      	movs	r3, #5
 8017158:	e942 0102 	strd	r0, r1, [r2, #-8]
 801715c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017160:	b014      	add	sp, #80	@ 0x50
 8017162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017166:	bf00      	nop
 8017168:	240683fc 	.word	0x240683fc
 801716c:	240683ec 	.word	0x240683ec

08017170 <on_request>:
 8017170:	4824      	ldr	r0, [pc, #144]	@ (8017204 <on_request+0x94>)
 8017172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017176:	6800      	ldr	r0, [r0, #0]
 8017178:	b094      	sub	sp, #80	@ 0x50
 801717a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801717c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8017180:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017182:	2800      	cmp	r0, #0
 8017184:	d03b      	beq.n	80171fe <on_request+0x8e>
 8017186:	461d      	mov	r5, r3
 8017188:	e001      	b.n	801718e <on_request+0x1e>
 801718a:	6840      	ldr	r0, [r0, #4]
 801718c:	b3b8      	cbz	r0, 80171fe <on_request+0x8e>
 801718e:	6884      	ldr	r4, [r0, #8]
 8017190:	8b21      	ldrh	r1, [r4, #24]
 8017192:	4291      	cmp	r1, r2
 8017194:	d1f9      	bne.n	801718a <on_request+0x1a>
 8017196:	2248      	movs	r2, #72	@ 0x48
 8017198:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801719c:	4668      	mov	r0, sp
 801719e:	f000 fdba 	bl	8017d16 <memcpy>
 80171a2:	f104 0320 	add.w	r3, r4, #32
 80171a6:	4620      	mov	r0, r4
 80171a8:	cb0c      	ldmia	r3, {r2, r3}
 80171aa:	f7f7 ffad 	bl	800f108 <rmw_uxrce_get_static_input_buffer_for_entity>
 80171ae:	4680      	mov	r8, r0
 80171b0:	b328      	cbz	r0, 80171fe <on_request+0x8e>
 80171b2:	4630      	mov	r0, r6
 80171b4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80171b8:	463a      	mov	r2, r7
 80171ba:	f106 0110 	add.w	r1, r6, #16
 80171be:	f7fe f80d 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 80171c2:	b930      	cbnz	r0, 80171d2 <on_request+0x62>
 80171c4:	4641      	mov	r1, r8
 80171c6:	4810      	ldr	r0, [pc, #64]	@ (8017208 <on_request+0x98>)
 80171c8:	b014      	add	sp, #80	@ 0x50
 80171ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171ce:	f7fd ba41 	b.w	8014654 <put_memory>
 80171d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171d4:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 80171d8:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80171dc:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80171e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80171e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80171ec:	f7f7 fd8a 	bl	800ed04 <rmw_uros_epoch_nanos>
 80171f0:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80171f4:	2303      	movs	r3, #3
 80171f6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80171fa:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80171fe:	b014      	add	sp, #80	@ 0x50
 8017200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017204:	240683cc 	.word	0x240683cc
 8017208:	240683ec 	.word	0x240683ec

0801720c <on_reply>:
 801720c:	4822      	ldr	r0, [pc, #136]	@ (8017298 <on_reply+0x8c>)
 801720e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017212:	6800      	ldr	r0, [r0, #0]
 8017214:	b094      	sub	sp, #80	@ 0x50
 8017216:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8017218:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801721c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801721e:	b3b8      	cbz	r0, 8017290 <on_reply+0x84>
 8017220:	461d      	mov	r5, r3
 8017222:	e001      	b.n	8017228 <on_reply+0x1c>
 8017224:	6840      	ldr	r0, [r0, #4]
 8017226:	b398      	cbz	r0, 8017290 <on_reply+0x84>
 8017228:	6884      	ldr	r4, [r0, #8]
 801722a:	8b21      	ldrh	r1, [r4, #24]
 801722c:	4291      	cmp	r1, r2
 801722e:	d1f9      	bne.n	8017224 <on_reply+0x18>
 8017230:	2248      	movs	r2, #72	@ 0x48
 8017232:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017236:	4668      	mov	r0, sp
 8017238:	f000 fd6d 	bl	8017d16 <memcpy>
 801723c:	f104 0320 	add.w	r3, r4, #32
 8017240:	4620      	mov	r0, r4
 8017242:	cb0c      	ldmia	r3, {r2, r3}
 8017244:	f7f7 ff60 	bl	800f108 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017248:	4680      	mov	r8, r0
 801724a:	b308      	cbz	r0, 8017290 <on_reply+0x84>
 801724c:	4630      	mov	r0, r6
 801724e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8017252:	463a      	mov	r2, r7
 8017254:	f106 0110 	add.w	r1, r6, #16
 8017258:	f7fd ffc0 	bl	80151dc <ucdr_deserialize_array_uint8_t>
 801725c:	b930      	cbnz	r0, 801726c <on_reply+0x60>
 801725e:	4641      	mov	r1, r8
 8017260:	480e      	ldr	r0, [pc, #56]	@ (801729c <on_reply+0x90>)
 8017262:	b014      	add	sp, #80	@ 0x50
 8017264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017268:	f7fd b9f4 	b.w	8014654 <put_memory>
 801726c:	2200      	movs	r2, #0
 801726e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8017272:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8017276:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801727a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801727e:	f7f7 fd41 	bl	800ed04 <rmw_uros_epoch_nanos>
 8017282:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8017286:	2304      	movs	r3, #4
 8017288:	e942 0102 	strd	r0, r1, [r2, #-8]
 801728c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8017290:	b014      	add	sp, #80	@ 0x50
 8017292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017296:	bf00      	nop
 8017298:	24063ae0 	.word	0x24063ae0
 801729c:	240683ec 	.word	0x240683ec

080172a0 <rmw_destroy_client>:
 80172a0:	b570      	push	{r4, r5, r6, lr}
 80172a2:	b128      	cbz	r0, 80172b0 <rmw_destroy_client+0x10>
 80172a4:	4604      	mov	r4, r0
 80172a6:	6800      	ldr	r0, [r0, #0]
 80172a8:	460d      	mov	r5, r1
 80172aa:	f7f8 f801 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 80172ae:	b910      	cbnz	r0, 80172b6 <rmw_destroy_client+0x16>
 80172b0:	2401      	movs	r4, #1
 80172b2:	4620      	mov	r0, r4
 80172b4:	bd70      	pop	{r4, r5, r6, pc}
 80172b6:	6863      	ldr	r3, [r4, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d0f9      	beq.n	80172b0 <rmw_destroy_client+0x10>
 80172bc:	2d00      	cmp	r5, #0
 80172be:	d0f7      	beq.n	80172b0 <rmw_destroy_client+0x10>
 80172c0:	6828      	ldr	r0, [r5, #0]
 80172c2:	f7f7 fff5 	bl	800f2b0 <is_uxrce_rmw_identifier_valid>
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d0f2      	beq.n	80172b0 <rmw_destroy_client+0x10>
 80172ca:	686e      	ldr	r6, [r5, #4]
 80172cc:	2e00      	cmp	r6, #0
 80172ce:	d0ef      	beq.n	80172b0 <rmw_destroy_client+0x10>
 80172d0:	6864      	ldr	r4, [r4, #4]
 80172d2:	6932      	ldr	r2, [r6, #16]
 80172d4:	6920      	ldr	r0, [r4, #16]
 80172d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80172da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172de:	6819      	ldr	r1, [r3, #0]
 80172e0:	f7fe fe5e 	bl	8015fa0 <uxr_buffer_cancel_data>
 80172e4:	4602      	mov	r2, r0
 80172e6:	6920      	ldr	r0, [r4, #16]
 80172e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80172ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80172f0:	f7f7 ff64 	bl	800f1bc <run_xrce_session>
 80172f4:	6920      	ldr	r0, [r4, #16]
 80172f6:	6932      	ldr	r2, [r6, #16]
 80172f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80172fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017300:	6819      	ldr	r1, [r3, #0]
 8017302:	f7f9 f895 	bl	8010430 <uxr_buffer_delete_entity>
 8017306:	4602      	mov	r2, r0
 8017308:	6920      	ldr	r0, [r4, #16]
 801730a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801730e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017312:	f7f7 ff53 	bl	800f1bc <run_xrce_session>
 8017316:	4603      	mov	r3, r0
 8017318:	4628      	mov	r0, r5
 801731a:	2b00      	cmp	r3, #0
 801731c:	bf14      	ite	ne
 801731e:	2400      	movne	r4, #0
 8017320:	2402      	moveq	r4, #2
 8017322:	f7f7 fecf 	bl	800f0c4 <rmw_uxrce_fini_client_memory>
 8017326:	e7c4      	b.n	80172b2 <rmw_destroy_client+0x12>

08017328 <rmw_create_guard_condition>:
 8017328:	b538      	push	{r3, r4, r5, lr}
 801732a:	4605      	mov	r5, r0
 801732c:	4808      	ldr	r0, [pc, #32]	@ (8017350 <rmw_create_guard_condition+0x28>)
 801732e:	f7fd f981 	bl	8014634 <get_memory>
 8017332:	4603      	mov	r3, r0
 8017334:	b148      	cbz	r0, 801734a <rmw_create_guard_condition+0x22>
 8017336:	6884      	ldr	r4, [r0, #8]
 8017338:	2300      	movs	r3, #0
 801733a:	61e5      	str	r5, [r4, #28]
 801733c:	7423      	strb	r3, [r4, #16]
 801733e:	f7fd f99d 	bl	801467c <rmw_get_implementation_identifier>
 8017342:	f104 0314 	add.w	r3, r4, #20
 8017346:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801734a:	4618      	mov	r0, r3
 801734c:	bd38      	pop	{r3, r4, r5, pc}
 801734e:	bf00      	nop
 8017350:	2406838c 	.word	0x2406838c

08017354 <rmw_destroy_guard_condition>:
 8017354:	b508      	push	{r3, lr}
 8017356:	4b08      	ldr	r3, [pc, #32]	@ (8017378 <rmw_destroy_guard_condition+0x24>)
 8017358:	6819      	ldr	r1, [r3, #0]
 801735a:	b911      	cbnz	r1, 8017362 <rmw_destroy_guard_condition+0xe>
 801735c:	e00a      	b.n	8017374 <rmw_destroy_guard_condition+0x20>
 801735e:	6849      	ldr	r1, [r1, #4]
 8017360:	b141      	cbz	r1, 8017374 <rmw_destroy_guard_condition+0x20>
 8017362:	688b      	ldr	r3, [r1, #8]
 8017364:	3314      	adds	r3, #20
 8017366:	4298      	cmp	r0, r3
 8017368:	d1f9      	bne.n	801735e <rmw_destroy_guard_condition+0xa>
 801736a:	4803      	ldr	r0, [pc, #12]	@ (8017378 <rmw_destroy_guard_condition+0x24>)
 801736c:	f7fd f972 	bl	8014654 <put_memory>
 8017370:	2000      	movs	r0, #0
 8017372:	bd08      	pop	{r3, pc}
 8017374:	2001      	movs	r0, #1
 8017376:	bd08      	pop	{r3, pc}
 8017378:	2406838c 	.word	0x2406838c

0801737c <calloc>:
 801737c:	4b02      	ldr	r3, [pc, #8]	@ (8017388 <calloc+0xc>)
 801737e:	460a      	mov	r2, r1
 8017380:	4601      	mov	r1, r0
 8017382:	6818      	ldr	r0, [r3, #0]
 8017384:	f000 b802 	b.w	801738c <_calloc_r>
 8017388:	240000c4 	.word	0x240000c4

0801738c <_calloc_r>:
 801738c:	b570      	push	{r4, r5, r6, lr}
 801738e:	fba1 5402 	umull	r5, r4, r1, r2
 8017392:	b93c      	cbnz	r4, 80173a4 <_calloc_r+0x18>
 8017394:	4629      	mov	r1, r5
 8017396:	f000 f887 	bl	80174a8 <_malloc_r>
 801739a:	4606      	mov	r6, r0
 801739c:	b928      	cbnz	r0, 80173aa <_calloc_r+0x1e>
 801739e:	2600      	movs	r6, #0
 80173a0:	4630      	mov	r0, r6
 80173a2:	bd70      	pop	{r4, r5, r6, pc}
 80173a4:	220c      	movs	r2, #12
 80173a6:	6002      	str	r2, [r0, #0]
 80173a8:	e7f9      	b.n	801739e <_calloc_r+0x12>
 80173aa:	462a      	mov	r2, r5
 80173ac:	4621      	mov	r1, r4
 80173ae:	f000 fb93 	bl	8017ad8 <memset>
 80173b2:	e7f5      	b.n	80173a0 <_calloc_r+0x14>

080173b4 <getenv>:
 80173b4:	b507      	push	{r0, r1, r2, lr}
 80173b6:	4b04      	ldr	r3, [pc, #16]	@ (80173c8 <getenv+0x14>)
 80173b8:	4601      	mov	r1, r0
 80173ba:	aa01      	add	r2, sp, #4
 80173bc:	6818      	ldr	r0, [r3, #0]
 80173be:	f000 f805 	bl	80173cc <_findenv_r>
 80173c2:	b003      	add	sp, #12
 80173c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80173c8:	240000c4 	.word	0x240000c4

080173cc <_findenv_r>:
 80173cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017440 <_findenv_r+0x74>
 80173d4:	4606      	mov	r6, r0
 80173d6:	4689      	mov	r9, r1
 80173d8:	4617      	mov	r7, r2
 80173da:	f000 fcc9 	bl	8017d70 <__env_lock>
 80173de:	f8da 4000 	ldr.w	r4, [sl]
 80173e2:	b134      	cbz	r4, 80173f2 <_findenv_r+0x26>
 80173e4:	464b      	mov	r3, r9
 80173e6:	4698      	mov	r8, r3
 80173e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173ec:	b13a      	cbz	r2, 80173fe <_findenv_r+0x32>
 80173ee:	2a3d      	cmp	r2, #61	@ 0x3d
 80173f0:	d1f9      	bne.n	80173e6 <_findenv_r+0x1a>
 80173f2:	4630      	mov	r0, r6
 80173f4:	f000 fcc2 	bl	8017d7c <__env_unlock>
 80173f8:	2000      	movs	r0, #0
 80173fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173fe:	eba8 0809 	sub.w	r8, r8, r9
 8017402:	46a3      	mov	fp, r4
 8017404:	f854 0b04 	ldr.w	r0, [r4], #4
 8017408:	2800      	cmp	r0, #0
 801740a:	d0f2      	beq.n	80173f2 <_findenv_r+0x26>
 801740c:	4642      	mov	r2, r8
 801740e:	4649      	mov	r1, r9
 8017410:	f000 fb77 	bl	8017b02 <strncmp>
 8017414:	2800      	cmp	r0, #0
 8017416:	d1f4      	bne.n	8017402 <_findenv_r+0x36>
 8017418:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801741c:	eb03 0508 	add.w	r5, r3, r8
 8017420:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017424:	2b3d      	cmp	r3, #61	@ 0x3d
 8017426:	d1ec      	bne.n	8017402 <_findenv_r+0x36>
 8017428:	f8da 3000 	ldr.w	r3, [sl]
 801742c:	ebab 0303 	sub.w	r3, fp, r3
 8017430:	109b      	asrs	r3, r3, #2
 8017432:	4630      	mov	r0, r6
 8017434:	603b      	str	r3, [r7, #0]
 8017436:	f000 fca1 	bl	8017d7c <__env_unlock>
 801743a:	1c68      	adds	r0, r5, #1
 801743c:	e7dd      	b.n	80173fa <_findenv_r+0x2e>
 801743e:	bf00      	nop
 8017440:	24000000 	.word	0x24000000

08017444 <malloc>:
 8017444:	4b02      	ldr	r3, [pc, #8]	@ (8017450 <malloc+0xc>)
 8017446:	4601      	mov	r1, r0
 8017448:	6818      	ldr	r0, [r3, #0]
 801744a:	f000 b82d 	b.w	80174a8 <_malloc_r>
 801744e:	bf00      	nop
 8017450:	240000c4 	.word	0x240000c4

08017454 <free>:
 8017454:	4b02      	ldr	r3, [pc, #8]	@ (8017460 <free+0xc>)
 8017456:	4601      	mov	r1, r0
 8017458:	6818      	ldr	r0, [r3, #0]
 801745a:	f000 bc95 	b.w	8017d88 <_free_r>
 801745e:	bf00      	nop
 8017460:	240000c4 	.word	0x240000c4

08017464 <sbrk_aligned>:
 8017464:	b570      	push	{r4, r5, r6, lr}
 8017466:	4e0f      	ldr	r6, [pc, #60]	@ (80174a4 <sbrk_aligned+0x40>)
 8017468:	460c      	mov	r4, r1
 801746a:	6831      	ldr	r1, [r6, #0]
 801746c:	4605      	mov	r5, r0
 801746e:	b911      	cbnz	r1, 8017476 <sbrk_aligned+0x12>
 8017470:	f000 fbfa 	bl	8017c68 <_sbrk_r>
 8017474:	6030      	str	r0, [r6, #0]
 8017476:	4621      	mov	r1, r4
 8017478:	4628      	mov	r0, r5
 801747a:	f000 fbf5 	bl	8017c68 <_sbrk_r>
 801747e:	1c43      	adds	r3, r0, #1
 8017480:	d103      	bne.n	801748a <sbrk_aligned+0x26>
 8017482:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017486:	4620      	mov	r0, r4
 8017488:	bd70      	pop	{r4, r5, r6, pc}
 801748a:	1cc4      	adds	r4, r0, #3
 801748c:	f024 0403 	bic.w	r4, r4, #3
 8017490:	42a0      	cmp	r0, r4
 8017492:	d0f8      	beq.n	8017486 <sbrk_aligned+0x22>
 8017494:	1a21      	subs	r1, r4, r0
 8017496:	4628      	mov	r0, r5
 8017498:	f000 fbe6 	bl	8017c68 <_sbrk_r>
 801749c:	3001      	adds	r0, #1
 801749e:	d1f2      	bne.n	8017486 <sbrk_aligned+0x22>
 80174a0:	e7ef      	b.n	8017482 <sbrk_aligned+0x1e>
 80174a2:	bf00      	nop
 80174a4:	24068540 	.word	0x24068540

080174a8 <_malloc_r>:
 80174a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174ac:	1ccd      	adds	r5, r1, #3
 80174ae:	f025 0503 	bic.w	r5, r5, #3
 80174b2:	3508      	adds	r5, #8
 80174b4:	2d0c      	cmp	r5, #12
 80174b6:	bf38      	it	cc
 80174b8:	250c      	movcc	r5, #12
 80174ba:	2d00      	cmp	r5, #0
 80174bc:	4606      	mov	r6, r0
 80174be:	db01      	blt.n	80174c4 <_malloc_r+0x1c>
 80174c0:	42a9      	cmp	r1, r5
 80174c2:	d904      	bls.n	80174ce <_malloc_r+0x26>
 80174c4:	230c      	movs	r3, #12
 80174c6:	6033      	str	r3, [r6, #0]
 80174c8:	2000      	movs	r0, #0
 80174ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80175a4 <_malloc_r+0xfc>
 80174d2:	f000 f869 	bl	80175a8 <__malloc_lock>
 80174d6:	f8d8 3000 	ldr.w	r3, [r8]
 80174da:	461c      	mov	r4, r3
 80174dc:	bb44      	cbnz	r4, 8017530 <_malloc_r+0x88>
 80174de:	4629      	mov	r1, r5
 80174e0:	4630      	mov	r0, r6
 80174e2:	f7ff ffbf 	bl	8017464 <sbrk_aligned>
 80174e6:	1c43      	adds	r3, r0, #1
 80174e8:	4604      	mov	r4, r0
 80174ea:	d158      	bne.n	801759e <_malloc_r+0xf6>
 80174ec:	f8d8 4000 	ldr.w	r4, [r8]
 80174f0:	4627      	mov	r7, r4
 80174f2:	2f00      	cmp	r7, #0
 80174f4:	d143      	bne.n	801757e <_malloc_r+0xd6>
 80174f6:	2c00      	cmp	r4, #0
 80174f8:	d04b      	beq.n	8017592 <_malloc_r+0xea>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	4639      	mov	r1, r7
 80174fe:	4630      	mov	r0, r6
 8017500:	eb04 0903 	add.w	r9, r4, r3
 8017504:	f000 fbb0 	bl	8017c68 <_sbrk_r>
 8017508:	4581      	cmp	r9, r0
 801750a:	d142      	bne.n	8017592 <_malloc_r+0xea>
 801750c:	6821      	ldr	r1, [r4, #0]
 801750e:	1a6d      	subs	r5, r5, r1
 8017510:	4629      	mov	r1, r5
 8017512:	4630      	mov	r0, r6
 8017514:	f7ff ffa6 	bl	8017464 <sbrk_aligned>
 8017518:	3001      	adds	r0, #1
 801751a:	d03a      	beq.n	8017592 <_malloc_r+0xea>
 801751c:	6823      	ldr	r3, [r4, #0]
 801751e:	442b      	add	r3, r5
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	f8d8 3000 	ldr.w	r3, [r8]
 8017526:	685a      	ldr	r2, [r3, #4]
 8017528:	bb62      	cbnz	r2, 8017584 <_malloc_r+0xdc>
 801752a:	f8c8 7000 	str.w	r7, [r8]
 801752e:	e00f      	b.n	8017550 <_malloc_r+0xa8>
 8017530:	6822      	ldr	r2, [r4, #0]
 8017532:	1b52      	subs	r2, r2, r5
 8017534:	d420      	bmi.n	8017578 <_malloc_r+0xd0>
 8017536:	2a0b      	cmp	r2, #11
 8017538:	d917      	bls.n	801756a <_malloc_r+0xc2>
 801753a:	1961      	adds	r1, r4, r5
 801753c:	42a3      	cmp	r3, r4
 801753e:	6025      	str	r5, [r4, #0]
 8017540:	bf18      	it	ne
 8017542:	6059      	strne	r1, [r3, #4]
 8017544:	6863      	ldr	r3, [r4, #4]
 8017546:	bf08      	it	eq
 8017548:	f8c8 1000 	streq.w	r1, [r8]
 801754c:	5162      	str	r2, [r4, r5]
 801754e:	604b      	str	r3, [r1, #4]
 8017550:	4630      	mov	r0, r6
 8017552:	f000 f82f 	bl	80175b4 <__malloc_unlock>
 8017556:	f104 000b 	add.w	r0, r4, #11
 801755a:	1d23      	adds	r3, r4, #4
 801755c:	f020 0007 	bic.w	r0, r0, #7
 8017560:	1ac2      	subs	r2, r0, r3
 8017562:	bf1c      	itt	ne
 8017564:	1a1b      	subne	r3, r3, r0
 8017566:	50a3      	strne	r3, [r4, r2]
 8017568:	e7af      	b.n	80174ca <_malloc_r+0x22>
 801756a:	6862      	ldr	r2, [r4, #4]
 801756c:	42a3      	cmp	r3, r4
 801756e:	bf0c      	ite	eq
 8017570:	f8c8 2000 	streq.w	r2, [r8]
 8017574:	605a      	strne	r2, [r3, #4]
 8017576:	e7eb      	b.n	8017550 <_malloc_r+0xa8>
 8017578:	4623      	mov	r3, r4
 801757a:	6864      	ldr	r4, [r4, #4]
 801757c:	e7ae      	b.n	80174dc <_malloc_r+0x34>
 801757e:	463c      	mov	r4, r7
 8017580:	687f      	ldr	r7, [r7, #4]
 8017582:	e7b6      	b.n	80174f2 <_malloc_r+0x4a>
 8017584:	461a      	mov	r2, r3
 8017586:	685b      	ldr	r3, [r3, #4]
 8017588:	42a3      	cmp	r3, r4
 801758a:	d1fb      	bne.n	8017584 <_malloc_r+0xdc>
 801758c:	2300      	movs	r3, #0
 801758e:	6053      	str	r3, [r2, #4]
 8017590:	e7de      	b.n	8017550 <_malloc_r+0xa8>
 8017592:	230c      	movs	r3, #12
 8017594:	6033      	str	r3, [r6, #0]
 8017596:	4630      	mov	r0, r6
 8017598:	f000 f80c 	bl	80175b4 <__malloc_unlock>
 801759c:	e794      	b.n	80174c8 <_malloc_r+0x20>
 801759e:	6005      	str	r5, [r0, #0]
 80175a0:	e7d6      	b.n	8017550 <_malloc_r+0xa8>
 80175a2:	bf00      	nop
 80175a4:	24068544 	.word	0x24068544

080175a8 <__malloc_lock>:
 80175a8:	4801      	ldr	r0, [pc, #4]	@ (80175b0 <__malloc_lock+0x8>)
 80175aa:	f000 bbaa 	b.w	8017d02 <__retarget_lock_acquire_recursive>
 80175ae:	bf00      	nop
 80175b0:	24068689 	.word	0x24068689

080175b4 <__malloc_unlock>:
 80175b4:	4801      	ldr	r0, [pc, #4]	@ (80175bc <__malloc_unlock+0x8>)
 80175b6:	f000 bba5 	b.w	8017d04 <__retarget_lock_release_recursive>
 80175ba:	bf00      	nop
 80175bc:	24068689 	.word	0x24068689

080175c0 <srand>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4b10      	ldr	r3, [pc, #64]	@ (8017604 <srand+0x44>)
 80175c4:	681d      	ldr	r5, [r3, #0]
 80175c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175c8:	4604      	mov	r4, r0
 80175ca:	b9b3      	cbnz	r3, 80175fa <srand+0x3a>
 80175cc:	2018      	movs	r0, #24
 80175ce:	f7ff ff39 	bl	8017444 <malloc>
 80175d2:	4602      	mov	r2, r0
 80175d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80175d6:	b920      	cbnz	r0, 80175e2 <srand+0x22>
 80175d8:	4b0b      	ldr	r3, [pc, #44]	@ (8017608 <srand+0x48>)
 80175da:	480c      	ldr	r0, [pc, #48]	@ (801760c <srand+0x4c>)
 80175dc:	2146      	movs	r1, #70	@ 0x46
 80175de:	f000 fba9 	bl	8017d34 <__assert_func>
 80175e2:	490b      	ldr	r1, [pc, #44]	@ (8017610 <srand+0x50>)
 80175e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017614 <srand+0x54>)
 80175e6:	e9c0 1300 	strd	r1, r3, [r0]
 80175ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017618 <srand+0x58>)
 80175ec:	6083      	str	r3, [r0, #8]
 80175ee:	230b      	movs	r3, #11
 80175f0:	8183      	strh	r3, [r0, #12]
 80175f2:	2100      	movs	r1, #0
 80175f4:	2001      	movs	r0, #1
 80175f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80175fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175fc:	2200      	movs	r2, #0
 80175fe:	611c      	str	r4, [r3, #16]
 8017600:	615a      	str	r2, [r3, #20]
 8017602:	bd38      	pop	{r3, r4, r5, pc}
 8017604:	240000c4 	.word	0x240000c4
 8017608:	080194f4 	.word	0x080194f4
 801760c:	0801950b 	.word	0x0801950b
 8017610:	abcd330e 	.word	0xabcd330e
 8017614:	e66d1234 	.word	0xe66d1234
 8017618:	0005deec 	.word	0x0005deec

0801761c <rand>:
 801761c:	4b16      	ldr	r3, [pc, #88]	@ (8017678 <rand+0x5c>)
 801761e:	b510      	push	{r4, lr}
 8017620:	681c      	ldr	r4, [r3, #0]
 8017622:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017624:	b9b3      	cbnz	r3, 8017654 <rand+0x38>
 8017626:	2018      	movs	r0, #24
 8017628:	f7ff ff0c 	bl	8017444 <malloc>
 801762c:	4602      	mov	r2, r0
 801762e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017630:	b920      	cbnz	r0, 801763c <rand+0x20>
 8017632:	4b12      	ldr	r3, [pc, #72]	@ (801767c <rand+0x60>)
 8017634:	4812      	ldr	r0, [pc, #72]	@ (8017680 <rand+0x64>)
 8017636:	2152      	movs	r1, #82	@ 0x52
 8017638:	f000 fb7c 	bl	8017d34 <__assert_func>
 801763c:	4911      	ldr	r1, [pc, #68]	@ (8017684 <rand+0x68>)
 801763e:	4b12      	ldr	r3, [pc, #72]	@ (8017688 <rand+0x6c>)
 8017640:	e9c0 1300 	strd	r1, r3, [r0]
 8017644:	4b11      	ldr	r3, [pc, #68]	@ (801768c <rand+0x70>)
 8017646:	6083      	str	r3, [r0, #8]
 8017648:	230b      	movs	r3, #11
 801764a:	8183      	strh	r3, [r0, #12]
 801764c:	2100      	movs	r1, #0
 801764e:	2001      	movs	r0, #1
 8017650:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017654:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017656:	480e      	ldr	r0, [pc, #56]	@ (8017690 <rand+0x74>)
 8017658:	690b      	ldr	r3, [r1, #16]
 801765a:	694c      	ldr	r4, [r1, #20]
 801765c:	4a0d      	ldr	r2, [pc, #52]	@ (8017694 <rand+0x78>)
 801765e:	4358      	muls	r0, r3
 8017660:	fb02 0004 	mla	r0, r2, r4, r0
 8017664:	fba3 3202 	umull	r3, r2, r3, r2
 8017668:	3301      	adds	r3, #1
 801766a:	eb40 0002 	adc.w	r0, r0, r2
 801766e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017672:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017676:	bd10      	pop	{r4, pc}
 8017678:	240000c4 	.word	0x240000c4
 801767c:	080194f4 	.word	0x080194f4
 8017680:	0801950b 	.word	0x0801950b
 8017684:	abcd330e 	.word	0xabcd330e
 8017688:	e66d1234 	.word	0xe66d1234
 801768c:	0005deec 	.word	0x0005deec
 8017690:	5851f42d 	.word	0x5851f42d
 8017694:	4c957f2d 	.word	0x4c957f2d

08017698 <realloc>:
 8017698:	4b02      	ldr	r3, [pc, #8]	@ (80176a4 <realloc+0xc>)
 801769a:	460a      	mov	r2, r1
 801769c:	4601      	mov	r1, r0
 801769e:	6818      	ldr	r0, [r3, #0]
 80176a0:	f000 b802 	b.w	80176a8 <_realloc_r>
 80176a4:	240000c4 	.word	0x240000c4

080176a8 <_realloc_r>:
 80176a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ac:	4680      	mov	r8, r0
 80176ae:	4615      	mov	r5, r2
 80176b0:	460c      	mov	r4, r1
 80176b2:	b921      	cbnz	r1, 80176be <_realloc_r+0x16>
 80176b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176b8:	4611      	mov	r1, r2
 80176ba:	f7ff bef5 	b.w	80174a8 <_malloc_r>
 80176be:	b92a      	cbnz	r2, 80176cc <_realloc_r+0x24>
 80176c0:	f000 fb62 	bl	8017d88 <_free_r>
 80176c4:	2400      	movs	r4, #0
 80176c6:	4620      	mov	r0, r4
 80176c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176cc:	f000 fba6 	bl	8017e1c <_malloc_usable_size_r>
 80176d0:	4285      	cmp	r5, r0
 80176d2:	4606      	mov	r6, r0
 80176d4:	d802      	bhi.n	80176dc <_realloc_r+0x34>
 80176d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80176da:	d8f4      	bhi.n	80176c6 <_realloc_r+0x1e>
 80176dc:	4629      	mov	r1, r5
 80176de:	4640      	mov	r0, r8
 80176e0:	f7ff fee2 	bl	80174a8 <_malloc_r>
 80176e4:	4607      	mov	r7, r0
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d0ec      	beq.n	80176c4 <_realloc_r+0x1c>
 80176ea:	42b5      	cmp	r5, r6
 80176ec:	462a      	mov	r2, r5
 80176ee:	4621      	mov	r1, r4
 80176f0:	bf28      	it	cs
 80176f2:	4632      	movcs	r2, r6
 80176f4:	f000 fb0f 	bl	8017d16 <memcpy>
 80176f8:	4621      	mov	r1, r4
 80176fa:	4640      	mov	r0, r8
 80176fc:	f000 fb44 	bl	8017d88 <_free_r>
 8017700:	463c      	mov	r4, r7
 8017702:	e7e0      	b.n	80176c6 <_realloc_r+0x1e>

08017704 <_strtoul_l.constprop.0>:
 8017704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017708:	4e34      	ldr	r6, [pc, #208]	@ (80177dc <_strtoul_l.constprop.0+0xd8>)
 801770a:	4686      	mov	lr, r0
 801770c:	460d      	mov	r5, r1
 801770e:	4628      	mov	r0, r5
 8017710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017714:	5d37      	ldrb	r7, [r6, r4]
 8017716:	f017 0708 	ands.w	r7, r7, #8
 801771a:	d1f8      	bne.n	801770e <_strtoul_l.constprop.0+0xa>
 801771c:	2c2d      	cmp	r4, #45	@ 0x2d
 801771e:	d12f      	bne.n	8017780 <_strtoul_l.constprop.0+0x7c>
 8017720:	782c      	ldrb	r4, [r5, #0]
 8017722:	2701      	movs	r7, #1
 8017724:	1c85      	adds	r5, r0, #2
 8017726:	f033 0010 	bics.w	r0, r3, #16
 801772a:	d109      	bne.n	8017740 <_strtoul_l.constprop.0+0x3c>
 801772c:	2c30      	cmp	r4, #48	@ 0x30
 801772e:	d12c      	bne.n	801778a <_strtoul_l.constprop.0+0x86>
 8017730:	7828      	ldrb	r0, [r5, #0]
 8017732:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017736:	2858      	cmp	r0, #88	@ 0x58
 8017738:	d127      	bne.n	801778a <_strtoul_l.constprop.0+0x86>
 801773a:	786c      	ldrb	r4, [r5, #1]
 801773c:	2310      	movs	r3, #16
 801773e:	3502      	adds	r5, #2
 8017740:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017744:	2600      	movs	r6, #0
 8017746:	fbb8 f8f3 	udiv	r8, r8, r3
 801774a:	fb03 f908 	mul.w	r9, r3, r8
 801774e:	ea6f 0909 	mvn.w	r9, r9
 8017752:	4630      	mov	r0, r6
 8017754:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017758:	f1bc 0f09 	cmp.w	ip, #9
 801775c:	d81c      	bhi.n	8017798 <_strtoul_l.constprop.0+0x94>
 801775e:	4664      	mov	r4, ip
 8017760:	42a3      	cmp	r3, r4
 8017762:	dd2a      	ble.n	80177ba <_strtoul_l.constprop.0+0xb6>
 8017764:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017768:	d007      	beq.n	801777a <_strtoul_l.constprop.0+0x76>
 801776a:	4580      	cmp	r8, r0
 801776c:	d322      	bcc.n	80177b4 <_strtoul_l.constprop.0+0xb0>
 801776e:	d101      	bne.n	8017774 <_strtoul_l.constprop.0+0x70>
 8017770:	45a1      	cmp	r9, r4
 8017772:	db1f      	blt.n	80177b4 <_strtoul_l.constprop.0+0xb0>
 8017774:	fb00 4003 	mla	r0, r0, r3, r4
 8017778:	2601      	movs	r6, #1
 801777a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801777e:	e7e9      	b.n	8017754 <_strtoul_l.constprop.0+0x50>
 8017780:	2c2b      	cmp	r4, #43	@ 0x2b
 8017782:	bf04      	itt	eq
 8017784:	782c      	ldrbeq	r4, [r5, #0]
 8017786:	1c85      	addeq	r5, r0, #2
 8017788:	e7cd      	b.n	8017726 <_strtoul_l.constprop.0+0x22>
 801778a:	2b00      	cmp	r3, #0
 801778c:	d1d8      	bne.n	8017740 <_strtoul_l.constprop.0+0x3c>
 801778e:	2c30      	cmp	r4, #48	@ 0x30
 8017790:	bf0c      	ite	eq
 8017792:	2308      	moveq	r3, #8
 8017794:	230a      	movne	r3, #10
 8017796:	e7d3      	b.n	8017740 <_strtoul_l.constprop.0+0x3c>
 8017798:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801779c:	f1bc 0f19 	cmp.w	ip, #25
 80177a0:	d801      	bhi.n	80177a6 <_strtoul_l.constprop.0+0xa2>
 80177a2:	3c37      	subs	r4, #55	@ 0x37
 80177a4:	e7dc      	b.n	8017760 <_strtoul_l.constprop.0+0x5c>
 80177a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80177aa:	f1bc 0f19 	cmp.w	ip, #25
 80177ae:	d804      	bhi.n	80177ba <_strtoul_l.constprop.0+0xb6>
 80177b0:	3c57      	subs	r4, #87	@ 0x57
 80177b2:	e7d5      	b.n	8017760 <_strtoul_l.constprop.0+0x5c>
 80177b4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80177b8:	e7df      	b.n	801777a <_strtoul_l.constprop.0+0x76>
 80177ba:	1c73      	adds	r3, r6, #1
 80177bc:	d106      	bne.n	80177cc <_strtoul_l.constprop.0+0xc8>
 80177be:	2322      	movs	r3, #34	@ 0x22
 80177c0:	f8ce 3000 	str.w	r3, [lr]
 80177c4:	4630      	mov	r0, r6
 80177c6:	b932      	cbnz	r2, 80177d6 <_strtoul_l.constprop.0+0xd2>
 80177c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177cc:	b107      	cbz	r7, 80177d0 <_strtoul_l.constprop.0+0xcc>
 80177ce:	4240      	negs	r0, r0
 80177d0:	2a00      	cmp	r2, #0
 80177d2:	d0f9      	beq.n	80177c8 <_strtoul_l.constprop.0+0xc4>
 80177d4:	b106      	cbz	r6, 80177d8 <_strtoul_l.constprop.0+0xd4>
 80177d6:	1e69      	subs	r1, r5, #1
 80177d8:	6011      	str	r1, [r2, #0]
 80177da:	e7f5      	b.n	80177c8 <_strtoul_l.constprop.0+0xc4>
 80177dc:	08019564 	.word	0x08019564

080177e0 <strtoul>:
 80177e0:	4613      	mov	r3, r2
 80177e2:	460a      	mov	r2, r1
 80177e4:	4601      	mov	r1, r0
 80177e6:	4802      	ldr	r0, [pc, #8]	@ (80177f0 <strtoul+0x10>)
 80177e8:	6800      	ldr	r0, [r0, #0]
 80177ea:	f7ff bf8b 	b.w	8017704 <_strtoul_l.constprop.0>
 80177ee:	bf00      	nop
 80177f0:	240000c4 	.word	0x240000c4

080177f4 <std>:
 80177f4:	2300      	movs	r3, #0
 80177f6:	b510      	push	{r4, lr}
 80177f8:	4604      	mov	r4, r0
 80177fa:	e9c0 3300 	strd	r3, r3, [r0]
 80177fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017802:	6083      	str	r3, [r0, #8]
 8017804:	8181      	strh	r1, [r0, #12]
 8017806:	6643      	str	r3, [r0, #100]	@ 0x64
 8017808:	81c2      	strh	r2, [r0, #14]
 801780a:	6183      	str	r3, [r0, #24]
 801780c:	4619      	mov	r1, r3
 801780e:	2208      	movs	r2, #8
 8017810:	305c      	adds	r0, #92	@ 0x5c
 8017812:	f000 f961 	bl	8017ad8 <memset>
 8017816:	4b0d      	ldr	r3, [pc, #52]	@ (801784c <std+0x58>)
 8017818:	6263      	str	r3, [r4, #36]	@ 0x24
 801781a:	4b0d      	ldr	r3, [pc, #52]	@ (8017850 <std+0x5c>)
 801781c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801781e:	4b0d      	ldr	r3, [pc, #52]	@ (8017854 <std+0x60>)
 8017820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017822:	4b0d      	ldr	r3, [pc, #52]	@ (8017858 <std+0x64>)
 8017824:	6323      	str	r3, [r4, #48]	@ 0x30
 8017826:	4b0d      	ldr	r3, [pc, #52]	@ (801785c <std+0x68>)
 8017828:	6224      	str	r4, [r4, #32]
 801782a:	429c      	cmp	r4, r3
 801782c:	d006      	beq.n	801783c <std+0x48>
 801782e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017832:	4294      	cmp	r4, r2
 8017834:	d002      	beq.n	801783c <std+0x48>
 8017836:	33d0      	adds	r3, #208	@ 0xd0
 8017838:	429c      	cmp	r4, r3
 801783a:	d105      	bne.n	8017848 <std+0x54>
 801783c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017844:	f000 ba5c 	b.w	8017d00 <__retarget_lock_init_recursive>
 8017848:	bd10      	pop	{r4, pc}
 801784a:	bf00      	nop
 801784c:	080179e1 	.word	0x080179e1
 8017850:	08017a03 	.word	0x08017a03
 8017854:	08017a3b 	.word	0x08017a3b
 8017858:	08017a5f 	.word	0x08017a5f
 801785c:	24068548 	.word	0x24068548

08017860 <stdio_exit_handler>:
 8017860:	4a02      	ldr	r2, [pc, #8]	@ (801786c <stdio_exit_handler+0xc>)
 8017862:	4903      	ldr	r1, [pc, #12]	@ (8017870 <stdio_exit_handler+0x10>)
 8017864:	4803      	ldr	r0, [pc, #12]	@ (8017874 <stdio_exit_handler+0x14>)
 8017866:	f000 b869 	b.w	801793c <_fwalk_sglue>
 801786a:	bf00      	nop
 801786c:	240000b8 	.word	0x240000b8
 8017870:	08018501 	.word	0x08018501
 8017874:	240000c8 	.word	0x240000c8

08017878 <cleanup_stdio>:
 8017878:	6841      	ldr	r1, [r0, #4]
 801787a:	4b0c      	ldr	r3, [pc, #48]	@ (80178ac <cleanup_stdio+0x34>)
 801787c:	4299      	cmp	r1, r3
 801787e:	b510      	push	{r4, lr}
 8017880:	4604      	mov	r4, r0
 8017882:	d001      	beq.n	8017888 <cleanup_stdio+0x10>
 8017884:	f000 fe3c 	bl	8018500 <_fflush_r>
 8017888:	68a1      	ldr	r1, [r4, #8]
 801788a:	4b09      	ldr	r3, [pc, #36]	@ (80178b0 <cleanup_stdio+0x38>)
 801788c:	4299      	cmp	r1, r3
 801788e:	d002      	beq.n	8017896 <cleanup_stdio+0x1e>
 8017890:	4620      	mov	r0, r4
 8017892:	f000 fe35 	bl	8018500 <_fflush_r>
 8017896:	68e1      	ldr	r1, [r4, #12]
 8017898:	4b06      	ldr	r3, [pc, #24]	@ (80178b4 <cleanup_stdio+0x3c>)
 801789a:	4299      	cmp	r1, r3
 801789c:	d004      	beq.n	80178a8 <cleanup_stdio+0x30>
 801789e:	4620      	mov	r0, r4
 80178a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178a4:	f000 be2c 	b.w	8018500 <_fflush_r>
 80178a8:	bd10      	pop	{r4, pc}
 80178aa:	bf00      	nop
 80178ac:	24068548 	.word	0x24068548
 80178b0:	240685b0 	.word	0x240685b0
 80178b4:	24068618 	.word	0x24068618

080178b8 <global_stdio_init.part.0>:
 80178b8:	b510      	push	{r4, lr}
 80178ba:	4b0b      	ldr	r3, [pc, #44]	@ (80178e8 <global_stdio_init.part.0+0x30>)
 80178bc:	4c0b      	ldr	r4, [pc, #44]	@ (80178ec <global_stdio_init.part.0+0x34>)
 80178be:	4a0c      	ldr	r2, [pc, #48]	@ (80178f0 <global_stdio_init.part.0+0x38>)
 80178c0:	601a      	str	r2, [r3, #0]
 80178c2:	4620      	mov	r0, r4
 80178c4:	2200      	movs	r2, #0
 80178c6:	2104      	movs	r1, #4
 80178c8:	f7ff ff94 	bl	80177f4 <std>
 80178cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80178d0:	2201      	movs	r2, #1
 80178d2:	2109      	movs	r1, #9
 80178d4:	f7ff ff8e 	bl	80177f4 <std>
 80178d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80178dc:	2202      	movs	r2, #2
 80178de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178e2:	2112      	movs	r1, #18
 80178e4:	f7ff bf86 	b.w	80177f4 <std>
 80178e8:	24068680 	.word	0x24068680
 80178ec:	24068548 	.word	0x24068548
 80178f0:	08017861 	.word	0x08017861

080178f4 <__sfp_lock_acquire>:
 80178f4:	4801      	ldr	r0, [pc, #4]	@ (80178fc <__sfp_lock_acquire+0x8>)
 80178f6:	f000 ba04 	b.w	8017d02 <__retarget_lock_acquire_recursive>
 80178fa:	bf00      	nop
 80178fc:	2406868a 	.word	0x2406868a

08017900 <__sfp_lock_release>:
 8017900:	4801      	ldr	r0, [pc, #4]	@ (8017908 <__sfp_lock_release+0x8>)
 8017902:	f000 b9ff 	b.w	8017d04 <__retarget_lock_release_recursive>
 8017906:	bf00      	nop
 8017908:	2406868a 	.word	0x2406868a

0801790c <__sinit>:
 801790c:	b510      	push	{r4, lr}
 801790e:	4604      	mov	r4, r0
 8017910:	f7ff fff0 	bl	80178f4 <__sfp_lock_acquire>
 8017914:	6a23      	ldr	r3, [r4, #32]
 8017916:	b11b      	cbz	r3, 8017920 <__sinit+0x14>
 8017918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801791c:	f7ff bff0 	b.w	8017900 <__sfp_lock_release>
 8017920:	4b04      	ldr	r3, [pc, #16]	@ (8017934 <__sinit+0x28>)
 8017922:	6223      	str	r3, [r4, #32]
 8017924:	4b04      	ldr	r3, [pc, #16]	@ (8017938 <__sinit+0x2c>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d1f5      	bne.n	8017918 <__sinit+0xc>
 801792c:	f7ff ffc4 	bl	80178b8 <global_stdio_init.part.0>
 8017930:	e7f2      	b.n	8017918 <__sinit+0xc>
 8017932:	bf00      	nop
 8017934:	08017879 	.word	0x08017879
 8017938:	24068680 	.word	0x24068680

0801793c <_fwalk_sglue>:
 801793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017940:	4607      	mov	r7, r0
 8017942:	4688      	mov	r8, r1
 8017944:	4614      	mov	r4, r2
 8017946:	2600      	movs	r6, #0
 8017948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801794c:	f1b9 0901 	subs.w	r9, r9, #1
 8017950:	d505      	bpl.n	801795e <_fwalk_sglue+0x22>
 8017952:	6824      	ldr	r4, [r4, #0]
 8017954:	2c00      	cmp	r4, #0
 8017956:	d1f7      	bne.n	8017948 <_fwalk_sglue+0xc>
 8017958:	4630      	mov	r0, r6
 801795a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801795e:	89ab      	ldrh	r3, [r5, #12]
 8017960:	2b01      	cmp	r3, #1
 8017962:	d907      	bls.n	8017974 <_fwalk_sglue+0x38>
 8017964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017968:	3301      	adds	r3, #1
 801796a:	d003      	beq.n	8017974 <_fwalk_sglue+0x38>
 801796c:	4629      	mov	r1, r5
 801796e:	4638      	mov	r0, r7
 8017970:	47c0      	blx	r8
 8017972:	4306      	orrs	r6, r0
 8017974:	3568      	adds	r5, #104	@ 0x68
 8017976:	e7e9      	b.n	801794c <_fwalk_sglue+0x10>

08017978 <sniprintf>:
 8017978:	b40c      	push	{r2, r3}
 801797a:	b530      	push	{r4, r5, lr}
 801797c:	4b17      	ldr	r3, [pc, #92]	@ (80179dc <sniprintf+0x64>)
 801797e:	1e0c      	subs	r4, r1, #0
 8017980:	681d      	ldr	r5, [r3, #0]
 8017982:	b09d      	sub	sp, #116	@ 0x74
 8017984:	da08      	bge.n	8017998 <sniprintf+0x20>
 8017986:	238b      	movs	r3, #139	@ 0x8b
 8017988:	602b      	str	r3, [r5, #0]
 801798a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801798e:	b01d      	add	sp, #116	@ 0x74
 8017990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017994:	b002      	add	sp, #8
 8017996:	4770      	bx	lr
 8017998:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801799c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179a0:	bf14      	ite	ne
 80179a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80179a6:	4623      	moveq	r3, r4
 80179a8:	9304      	str	r3, [sp, #16]
 80179aa:	9307      	str	r3, [sp, #28]
 80179ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179b0:	9002      	str	r0, [sp, #8]
 80179b2:	9006      	str	r0, [sp, #24]
 80179b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80179ba:	ab21      	add	r3, sp, #132	@ 0x84
 80179bc:	a902      	add	r1, sp, #8
 80179be:	4628      	mov	r0, r5
 80179c0:	9301      	str	r3, [sp, #4]
 80179c2:	f000 fa8f 	bl	8017ee4 <_svfiprintf_r>
 80179c6:	1c43      	adds	r3, r0, #1
 80179c8:	bfbc      	itt	lt
 80179ca:	238b      	movlt	r3, #139	@ 0x8b
 80179cc:	602b      	strlt	r3, [r5, #0]
 80179ce:	2c00      	cmp	r4, #0
 80179d0:	d0dd      	beq.n	801798e <sniprintf+0x16>
 80179d2:	9b02      	ldr	r3, [sp, #8]
 80179d4:	2200      	movs	r2, #0
 80179d6:	701a      	strb	r2, [r3, #0]
 80179d8:	e7d9      	b.n	801798e <sniprintf+0x16>
 80179da:	bf00      	nop
 80179dc:	240000c4 	.word	0x240000c4

080179e0 <__sread>:
 80179e0:	b510      	push	{r4, lr}
 80179e2:	460c      	mov	r4, r1
 80179e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e8:	f000 f92c 	bl	8017c44 <_read_r>
 80179ec:	2800      	cmp	r0, #0
 80179ee:	bfab      	itete	ge
 80179f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80179f2:	89a3      	ldrhlt	r3, [r4, #12]
 80179f4:	181b      	addge	r3, r3, r0
 80179f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80179fa:	bfac      	ite	ge
 80179fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80179fe:	81a3      	strhlt	r3, [r4, #12]
 8017a00:	bd10      	pop	{r4, pc}

08017a02 <__swrite>:
 8017a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a06:	461f      	mov	r7, r3
 8017a08:	898b      	ldrh	r3, [r1, #12]
 8017a0a:	05db      	lsls	r3, r3, #23
 8017a0c:	4605      	mov	r5, r0
 8017a0e:	460c      	mov	r4, r1
 8017a10:	4616      	mov	r6, r2
 8017a12:	d505      	bpl.n	8017a20 <__swrite+0x1e>
 8017a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a18:	2302      	movs	r3, #2
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f000 f900 	bl	8017c20 <_lseek_r>
 8017a20:	89a3      	ldrh	r3, [r4, #12]
 8017a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a2a:	81a3      	strh	r3, [r4, #12]
 8017a2c:	4632      	mov	r2, r6
 8017a2e:	463b      	mov	r3, r7
 8017a30:	4628      	mov	r0, r5
 8017a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a36:	f000 b927 	b.w	8017c88 <_write_r>

08017a3a <__sseek>:
 8017a3a:	b510      	push	{r4, lr}
 8017a3c:	460c      	mov	r4, r1
 8017a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a42:	f000 f8ed 	bl	8017c20 <_lseek_r>
 8017a46:	1c43      	adds	r3, r0, #1
 8017a48:	89a3      	ldrh	r3, [r4, #12]
 8017a4a:	bf15      	itete	ne
 8017a4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a56:	81a3      	strheq	r3, [r4, #12]
 8017a58:	bf18      	it	ne
 8017a5a:	81a3      	strhne	r3, [r4, #12]
 8017a5c:	bd10      	pop	{r4, pc}

08017a5e <__sclose>:
 8017a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a62:	f000 b877 	b.w	8017b54 <_close_r>

08017a66 <_vsniprintf_r>:
 8017a66:	b530      	push	{r4, r5, lr}
 8017a68:	4614      	mov	r4, r2
 8017a6a:	2c00      	cmp	r4, #0
 8017a6c:	b09b      	sub	sp, #108	@ 0x6c
 8017a6e:	4605      	mov	r5, r0
 8017a70:	461a      	mov	r2, r3
 8017a72:	da05      	bge.n	8017a80 <_vsniprintf_r+0x1a>
 8017a74:	238b      	movs	r3, #139	@ 0x8b
 8017a76:	6003      	str	r3, [r0, #0]
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a7c:	b01b      	add	sp, #108	@ 0x6c
 8017a7e:	bd30      	pop	{r4, r5, pc}
 8017a80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017a88:	bf14      	ite	ne
 8017a8a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017a8e:	4623      	moveq	r3, r4
 8017a90:	9302      	str	r3, [sp, #8]
 8017a92:	9305      	str	r3, [sp, #20]
 8017a94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a98:	9100      	str	r1, [sp, #0]
 8017a9a:	9104      	str	r1, [sp, #16]
 8017a9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017aa0:	4669      	mov	r1, sp
 8017aa2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017aa4:	f000 fa1e 	bl	8017ee4 <_svfiprintf_r>
 8017aa8:	1c43      	adds	r3, r0, #1
 8017aaa:	bfbc      	itt	lt
 8017aac:	238b      	movlt	r3, #139	@ 0x8b
 8017aae:	602b      	strlt	r3, [r5, #0]
 8017ab0:	2c00      	cmp	r4, #0
 8017ab2:	d0e3      	beq.n	8017a7c <_vsniprintf_r+0x16>
 8017ab4:	9b00      	ldr	r3, [sp, #0]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	701a      	strb	r2, [r3, #0]
 8017aba:	e7df      	b.n	8017a7c <_vsniprintf_r+0x16>

08017abc <vsniprintf>:
 8017abc:	b507      	push	{r0, r1, r2, lr}
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	460a      	mov	r2, r1
 8017ac4:	4601      	mov	r1, r0
 8017ac6:	4803      	ldr	r0, [pc, #12]	@ (8017ad4 <vsniprintf+0x18>)
 8017ac8:	6800      	ldr	r0, [r0, #0]
 8017aca:	f7ff ffcc 	bl	8017a66 <_vsniprintf_r>
 8017ace:	b003      	add	sp, #12
 8017ad0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ad4:	240000c4 	.word	0x240000c4

08017ad8 <memset>:
 8017ad8:	4402      	add	r2, r0
 8017ada:	4603      	mov	r3, r0
 8017adc:	4293      	cmp	r3, r2
 8017ade:	d100      	bne.n	8017ae2 <memset+0xa>
 8017ae0:	4770      	bx	lr
 8017ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8017ae6:	e7f9      	b.n	8017adc <memset+0x4>

08017ae8 <strchr>:
 8017ae8:	b2c9      	uxtb	r1, r1
 8017aea:	4603      	mov	r3, r0
 8017aec:	4618      	mov	r0, r3
 8017aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017af2:	b112      	cbz	r2, 8017afa <strchr+0x12>
 8017af4:	428a      	cmp	r2, r1
 8017af6:	d1f9      	bne.n	8017aec <strchr+0x4>
 8017af8:	4770      	bx	lr
 8017afa:	2900      	cmp	r1, #0
 8017afc:	bf18      	it	ne
 8017afe:	2000      	movne	r0, #0
 8017b00:	4770      	bx	lr

08017b02 <strncmp>:
 8017b02:	b510      	push	{r4, lr}
 8017b04:	b16a      	cbz	r2, 8017b22 <strncmp+0x20>
 8017b06:	3901      	subs	r1, #1
 8017b08:	1884      	adds	r4, r0, r2
 8017b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d103      	bne.n	8017b1e <strncmp+0x1c>
 8017b16:	42a0      	cmp	r0, r4
 8017b18:	d001      	beq.n	8017b1e <strncmp+0x1c>
 8017b1a:	2a00      	cmp	r2, #0
 8017b1c:	d1f5      	bne.n	8017b0a <strncmp+0x8>
 8017b1e:	1ad0      	subs	r0, r2, r3
 8017b20:	bd10      	pop	{r4, pc}
 8017b22:	4610      	mov	r0, r2
 8017b24:	e7fc      	b.n	8017b20 <strncmp+0x1e>

08017b26 <strstr>:
 8017b26:	780a      	ldrb	r2, [r1, #0]
 8017b28:	b570      	push	{r4, r5, r6, lr}
 8017b2a:	b96a      	cbnz	r2, 8017b48 <strstr+0x22>
 8017b2c:	bd70      	pop	{r4, r5, r6, pc}
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d109      	bne.n	8017b46 <strstr+0x20>
 8017b32:	460c      	mov	r4, r1
 8017b34:	4605      	mov	r5, r0
 8017b36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d0f6      	beq.n	8017b2c <strstr+0x6>
 8017b3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017b42:	429e      	cmp	r6, r3
 8017b44:	d0f7      	beq.n	8017b36 <strstr+0x10>
 8017b46:	3001      	adds	r0, #1
 8017b48:	7803      	ldrb	r3, [r0, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d1ef      	bne.n	8017b2e <strstr+0x8>
 8017b4e:	4618      	mov	r0, r3
 8017b50:	e7ec      	b.n	8017b2c <strstr+0x6>
	...

08017b54 <_close_r>:
 8017b54:	b538      	push	{r3, r4, r5, lr}
 8017b56:	4d06      	ldr	r5, [pc, #24]	@ (8017b70 <_close_r+0x1c>)
 8017b58:	2300      	movs	r3, #0
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	4608      	mov	r0, r1
 8017b5e:	602b      	str	r3, [r5, #0]
 8017b60:	f7e9 ff74 	bl	8001a4c <_close>
 8017b64:	1c43      	adds	r3, r0, #1
 8017b66:	d102      	bne.n	8017b6e <_close_r+0x1a>
 8017b68:	682b      	ldr	r3, [r5, #0]
 8017b6a:	b103      	cbz	r3, 8017b6e <_close_r+0x1a>
 8017b6c:	6023      	str	r3, [r4, #0]
 8017b6e:	bd38      	pop	{r3, r4, r5, pc}
 8017b70:	24068684 	.word	0x24068684

08017b74 <_reclaim_reent>:
 8017b74:	4b29      	ldr	r3, [pc, #164]	@ (8017c1c <_reclaim_reent+0xa8>)
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	4283      	cmp	r3, r0
 8017b7a:	b570      	push	{r4, r5, r6, lr}
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	d04b      	beq.n	8017c18 <_reclaim_reent+0xa4>
 8017b80:	69c3      	ldr	r3, [r0, #28]
 8017b82:	b1ab      	cbz	r3, 8017bb0 <_reclaim_reent+0x3c>
 8017b84:	68db      	ldr	r3, [r3, #12]
 8017b86:	b16b      	cbz	r3, 8017ba4 <_reclaim_reent+0x30>
 8017b88:	2500      	movs	r5, #0
 8017b8a:	69e3      	ldr	r3, [r4, #28]
 8017b8c:	68db      	ldr	r3, [r3, #12]
 8017b8e:	5959      	ldr	r1, [r3, r5]
 8017b90:	2900      	cmp	r1, #0
 8017b92:	d13b      	bne.n	8017c0c <_reclaim_reent+0x98>
 8017b94:	3504      	adds	r5, #4
 8017b96:	2d80      	cmp	r5, #128	@ 0x80
 8017b98:	d1f7      	bne.n	8017b8a <_reclaim_reent+0x16>
 8017b9a:	69e3      	ldr	r3, [r4, #28]
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	68d9      	ldr	r1, [r3, #12]
 8017ba0:	f000 f8f2 	bl	8017d88 <_free_r>
 8017ba4:	69e3      	ldr	r3, [r4, #28]
 8017ba6:	6819      	ldr	r1, [r3, #0]
 8017ba8:	b111      	cbz	r1, 8017bb0 <_reclaim_reent+0x3c>
 8017baa:	4620      	mov	r0, r4
 8017bac:	f000 f8ec 	bl	8017d88 <_free_r>
 8017bb0:	6961      	ldr	r1, [r4, #20]
 8017bb2:	b111      	cbz	r1, 8017bba <_reclaim_reent+0x46>
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f000 f8e7 	bl	8017d88 <_free_r>
 8017bba:	69e1      	ldr	r1, [r4, #28]
 8017bbc:	b111      	cbz	r1, 8017bc4 <_reclaim_reent+0x50>
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f000 f8e2 	bl	8017d88 <_free_r>
 8017bc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017bc6:	b111      	cbz	r1, 8017bce <_reclaim_reent+0x5a>
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f000 f8dd 	bl	8017d88 <_free_r>
 8017bce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bd0:	b111      	cbz	r1, 8017bd8 <_reclaim_reent+0x64>
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f000 f8d8 	bl	8017d88 <_free_r>
 8017bd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017bda:	b111      	cbz	r1, 8017be2 <_reclaim_reent+0x6e>
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f000 f8d3 	bl	8017d88 <_free_r>
 8017be2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017be4:	b111      	cbz	r1, 8017bec <_reclaim_reent+0x78>
 8017be6:	4620      	mov	r0, r4
 8017be8:	f000 f8ce 	bl	8017d88 <_free_r>
 8017bec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017bee:	b111      	cbz	r1, 8017bf6 <_reclaim_reent+0x82>
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	f000 f8c9 	bl	8017d88 <_free_r>
 8017bf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017bf8:	b111      	cbz	r1, 8017c00 <_reclaim_reent+0x8c>
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	f000 f8c4 	bl	8017d88 <_free_r>
 8017c00:	6a23      	ldr	r3, [r4, #32]
 8017c02:	b14b      	cbz	r3, 8017c18 <_reclaim_reent+0xa4>
 8017c04:	4620      	mov	r0, r4
 8017c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c0a:	4718      	bx	r3
 8017c0c:	680e      	ldr	r6, [r1, #0]
 8017c0e:	4620      	mov	r0, r4
 8017c10:	f000 f8ba 	bl	8017d88 <_free_r>
 8017c14:	4631      	mov	r1, r6
 8017c16:	e7bb      	b.n	8017b90 <_reclaim_reent+0x1c>
 8017c18:	bd70      	pop	{r4, r5, r6, pc}
 8017c1a:	bf00      	nop
 8017c1c:	240000c4 	.word	0x240000c4

08017c20 <_lseek_r>:
 8017c20:	b538      	push	{r3, r4, r5, lr}
 8017c22:	4d07      	ldr	r5, [pc, #28]	@ (8017c40 <_lseek_r+0x20>)
 8017c24:	4604      	mov	r4, r0
 8017c26:	4608      	mov	r0, r1
 8017c28:	4611      	mov	r1, r2
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	602a      	str	r2, [r5, #0]
 8017c2e:	461a      	mov	r2, r3
 8017c30:	f7e9 ff33 	bl	8001a9a <_lseek>
 8017c34:	1c43      	adds	r3, r0, #1
 8017c36:	d102      	bne.n	8017c3e <_lseek_r+0x1e>
 8017c38:	682b      	ldr	r3, [r5, #0]
 8017c3a:	b103      	cbz	r3, 8017c3e <_lseek_r+0x1e>
 8017c3c:	6023      	str	r3, [r4, #0]
 8017c3e:	bd38      	pop	{r3, r4, r5, pc}
 8017c40:	24068684 	.word	0x24068684

08017c44 <_read_r>:
 8017c44:	b538      	push	{r3, r4, r5, lr}
 8017c46:	4d07      	ldr	r5, [pc, #28]	@ (8017c64 <_read_r+0x20>)
 8017c48:	4604      	mov	r4, r0
 8017c4a:	4608      	mov	r0, r1
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	2200      	movs	r2, #0
 8017c50:	602a      	str	r2, [r5, #0]
 8017c52:	461a      	mov	r2, r3
 8017c54:	f7e9 fec1 	bl	80019da <_read>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	d102      	bne.n	8017c62 <_read_r+0x1e>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	b103      	cbz	r3, 8017c62 <_read_r+0x1e>
 8017c60:	6023      	str	r3, [r4, #0]
 8017c62:	bd38      	pop	{r3, r4, r5, pc}
 8017c64:	24068684 	.word	0x24068684

08017c68 <_sbrk_r>:
 8017c68:	b538      	push	{r3, r4, r5, lr}
 8017c6a:	4d06      	ldr	r5, [pc, #24]	@ (8017c84 <_sbrk_r+0x1c>)
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	4604      	mov	r4, r0
 8017c70:	4608      	mov	r0, r1
 8017c72:	602b      	str	r3, [r5, #0]
 8017c74:	f7e9 ff1e 	bl	8001ab4 <_sbrk>
 8017c78:	1c43      	adds	r3, r0, #1
 8017c7a:	d102      	bne.n	8017c82 <_sbrk_r+0x1a>
 8017c7c:	682b      	ldr	r3, [r5, #0]
 8017c7e:	b103      	cbz	r3, 8017c82 <_sbrk_r+0x1a>
 8017c80:	6023      	str	r3, [r4, #0]
 8017c82:	bd38      	pop	{r3, r4, r5, pc}
 8017c84:	24068684 	.word	0x24068684

08017c88 <_write_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	4d07      	ldr	r5, [pc, #28]	@ (8017ca8 <_write_r+0x20>)
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	4608      	mov	r0, r1
 8017c90:	4611      	mov	r1, r2
 8017c92:	2200      	movs	r2, #0
 8017c94:	602a      	str	r2, [r5, #0]
 8017c96:	461a      	mov	r2, r3
 8017c98:	f7e9 febc 	bl	8001a14 <_write>
 8017c9c:	1c43      	adds	r3, r0, #1
 8017c9e:	d102      	bne.n	8017ca6 <_write_r+0x1e>
 8017ca0:	682b      	ldr	r3, [r5, #0]
 8017ca2:	b103      	cbz	r3, 8017ca6 <_write_r+0x1e>
 8017ca4:	6023      	str	r3, [r4, #0]
 8017ca6:	bd38      	pop	{r3, r4, r5, pc}
 8017ca8:	24068684 	.word	0x24068684

08017cac <__errno>:
 8017cac:	4b01      	ldr	r3, [pc, #4]	@ (8017cb4 <__errno+0x8>)
 8017cae:	6818      	ldr	r0, [r3, #0]
 8017cb0:	4770      	bx	lr
 8017cb2:	bf00      	nop
 8017cb4:	240000c4 	.word	0x240000c4

08017cb8 <__libc_init_array>:
 8017cb8:	b570      	push	{r4, r5, r6, lr}
 8017cba:	4d0d      	ldr	r5, [pc, #52]	@ (8017cf0 <__libc_init_array+0x38>)
 8017cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8017cf4 <__libc_init_array+0x3c>)
 8017cbe:	1b64      	subs	r4, r4, r5
 8017cc0:	10a4      	asrs	r4, r4, #2
 8017cc2:	2600      	movs	r6, #0
 8017cc4:	42a6      	cmp	r6, r4
 8017cc6:	d109      	bne.n	8017cdc <__libc_init_array+0x24>
 8017cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8017cf8 <__libc_init_array+0x40>)
 8017cca:	4c0c      	ldr	r4, [pc, #48]	@ (8017cfc <__libc_init_array+0x44>)
 8017ccc:	f000 ff10 	bl	8018af0 <_init>
 8017cd0:	1b64      	subs	r4, r4, r5
 8017cd2:	10a4      	asrs	r4, r4, #2
 8017cd4:	2600      	movs	r6, #0
 8017cd6:	42a6      	cmp	r6, r4
 8017cd8:	d105      	bne.n	8017ce6 <__libc_init_array+0x2e>
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ce0:	4798      	blx	r3
 8017ce2:	3601      	adds	r6, #1
 8017ce4:	e7ee      	b.n	8017cc4 <__libc_init_array+0xc>
 8017ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cea:	4798      	blx	r3
 8017cec:	3601      	adds	r6, #1
 8017cee:	e7f2      	b.n	8017cd6 <__libc_init_array+0x1e>
 8017cf0:	080196dc 	.word	0x080196dc
 8017cf4:	080196dc 	.word	0x080196dc
 8017cf8:	080196dc 	.word	0x080196dc
 8017cfc:	080196e4 	.word	0x080196e4

08017d00 <__retarget_lock_init_recursive>:
 8017d00:	4770      	bx	lr

08017d02 <__retarget_lock_acquire_recursive>:
 8017d02:	4770      	bx	lr

08017d04 <__retarget_lock_release_recursive>:
 8017d04:	4770      	bx	lr

08017d06 <strcpy>:
 8017d06:	4603      	mov	r3, r0
 8017d08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d0c:	f803 2b01 	strb.w	r2, [r3], #1
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	d1f9      	bne.n	8017d08 <strcpy+0x2>
 8017d14:	4770      	bx	lr

08017d16 <memcpy>:
 8017d16:	440a      	add	r2, r1
 8017d18:	4291      	cmp	r1, r2
 8017d1a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017d1e:	d100      	bne.n	8017d22 <memcpy+0xc>
 8017d20:	4770      	bx	lr
 8017d22:	b510      	push	{r4, lr}
 8017d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d2c:	4291      	cmp	r1, r2
 8017d2e:	d1f9      	bne.n	8017d24 <memcpy+0xe>
 8017d30:	bd10      	pop	{r4, pc}
	...

08017d34 <__assert_func>:
 8017d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d36:	4614      	mov	r4, r2
 8017d38:	461a      	mov	r2, r3
 8017d3a:	4b09      	ldr	r3, [pc, #36]	@ (8017d60 <__assert_func+0x2c>)
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	4605      	mov	r5, r0
 8017d40:	68d8      	ldr	r0, [r3, #12]
 8017d42:	b954      	cbnz	r4, 8017d5a <__assert_func+0x26>
 8017d44:	4b07      	ldr	r3, [pc, #28]	@ (8017d64 <__assert_func+0x30>)
 8017d46:	461c      	mov	r4, r3
 8017d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d4c:	9100      	str	r1, [sp, #0]
 8017d4e:	462b      	mov	r3, r5
 8017d50:	4905      	ldr	r1, [pc, #20]	@ (8017d68 <__assert_func+0x34>)
 8017d52:	f000 fbfd 	bl	8018550 <fiprintf>
 8017d56:	f000 fc27 	bl	80185a8 <abort>
 8017d5a:	4b04      	ldr	r3, [pc, #16]	@ (8017d6c <__assert_func+0x38>)
 8017d5c:	e7f4      	b.n	8017d48 <__assert_func+0x14>
 8017d5e:	bf00      	nop
 8017d60:	240000c4 	.word	0x240000c4
 8017d64:	0801969f 	.word	0x0801969f
 8017d68:	08019671 	.word	0x08019671
 8017d6c:	08019664 	.word	0x08019664

08017d70 <__env_lock>:
 8017d70:	4801      	ldr	r0, [pc, #4]	@ (8017d78 <__env_lock+0x8>)
 8017d72:	f7ff bfc6 	b.w	8017d02 <__retarget_lock_acquire_recursive>
 8017d76:	bf00      	nop
 8017d78:	24068688 	.word	0x24068688

08017d7c <__env_unlock>:
 8017d7c:	4801      	ldr	r0, [pc, #4]	@ (8017d84 <__env_unlock+0x8>)
 8017d7e:	f7ff bfc1 	b.w	8017d04 <__retarget_lock_release_recursive>
 8017d82:	bf00      	nop
 8017d84:	24068688 	.word	0x24068688

08017d88 <_free_r>:
 8017d88:	b538      	push	{r3, r4, r5, lr}
 8017d8a:	4605      	mov	r5, r0
 8017d8c:	2900      	cmp	r1, #0
 8017d8e:	d041      	beq.n	8017e14 <_free_r+0x8c>
 8017d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d94:	1f0c      	subs	r4, r1, #4
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	bfb8      	it	lt
 8017d9a:	18e4      	addlt	r4, r4, r3
 8017d9c:	f7ff fc04 	bl	80175a8 <__malloc_lock>
 8017da0:	4a1d      	ldr	r2, [pc, #116]	@ (8017e18 <_free_r+0x90>)
 8017da2:	6813      	ldr	r3, [r2, #0]
 8017da4:	b933      	cbnz	r3, 8017db4 <_free_r+0x2c>
 8017da6:	6063      	str	r3, [r4, #4]
 8017da8:	6014      	str	r4, [r2, #0]
 8017daa:	4628      	mov	r0, r5
 8017dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017db0:	f7ff bc00 	b.w	80175b4 <__malloc_unlock>
 8017db4:	42a3      	cmp	r3, r4
 8017db6:	d908      	bls.n	8017dca <_free_r+0x42>
 8017db8:	6820      	ldr	r0, [r4, #0]
 8017dba:	1821      	adds	r1, r4, r0
 8017dbc:	428b      	cmp	r3, r1
 8017dbe:	bf01      	itttt	eq
 8017dc0:	6819      	ldreq	r1, [r3, #0]
 8017dc2:	685b      	ldreq	r3, [r3, #4]
 8017dc4:	1809      	addeq	r1, r1, r0
 8017dc6:	6021      	streq	r1, [r4, #0]
 8017dc8:	e7ed      	b.n	8017da6 <_free_r+0x1e>
 8017dca:	461a      	mov	r2, r3
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	b10b      	cbz	r3, 8017dd4 <_free_r+0x4c>
 8017dd0:	42a3      	cmp	r3, r4
 8017dd2:	d9fa      	bls.n	8017dca <_free_r+0x42>
 8017dd4:	6811      	ldr	r1, [r2, #0]
 8017dd6:	1850      	adds	r0, r2, r1
 8017dd8:	42a0      	cmp	r0, r4
 8017dda:	d10b      	bne.n	8017df4 <_free_r+0x6c>
 8017ddc:	6820      	ldr	r0, [r4, #0]
 8017dde:	4401      	add	r1, r0
 8017de0:	1850      	adds	r0, r2, r1
 8017de2:	4283      	cmp	r3, r0
 8017de4:	6011      	str	r1, [r2, #0]
 8017de6:	d1e0      	bne.n	8017daa <_free_r+0x22>
 8017de8:	6818      	ldr	r0, [r3, #0]
 8017dea:	685b      	ldr	r3, [r3, #4]
 8017dec:	6053      	str	r3, [r2, #4]
 8017dee:	4408      	add	r0, r1
 8017df0:	6010      	str	r0, [r2, #0]
 8017df2:	e7da      	b.n	8017daa <_free_r+0x22>
 8017df4:	d902      	bls.n	8017dfc <_free_r+0x74>
 8017df6:	230c      	movs	r3, #12
 8017df8:	602b      	str	r3, [r5, #0]
 8017dfa:	e7d6      	b.n	8017daa <_free_r+0x22>
 8017dfc:	6820      	ldr	r0, [r4, #0]
 8017dfe:	1821      	adds	r1, r4, r0
 8017e00:	428b      	cmp	r3, r1
 8017e02:	bf04      	itt	eq
 8017e04:	6819      	ldreq	r1, [r3, #0]
 8017e06:	685b      	ldreq	r3, [r3, #4]
 8017e08:	6063      	str	r3, [r4, #4]
 8017e0a:	bf04      	itt	eq
 8017e0c:	1809      	addeq	r1, r1, r0
 8017e0e:	6021      	streq	r1, [r4, #0]
 8017e10:	6054      	str	r4, [r2, #4]
 8017e12:	e7ca      	b.n	8017daa <_free_r+0x22>
 8017e14:	bd38      	pop	{r3, r4, r5, pc}
 8017e16:	bf00      	nop
 8017e18:	24068544 	.word	0x24068544

08017e1c <_malloc_usable_size_r>:
 8017e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e20:	1f18      	subs	r0, r3, #4
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	bfbc      	itt	lt
 8017e26:	580b      	ldrlt	r3, [r1, r0]
 8017e28:	18c0      	addlt	r0, r0, r3
 8017e2a:	4770      	bx	lr

08017e2c <__ssputs_r>:
 8017e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e30:	688e      	ldr	r6, [r1, #8]
 8017e32:	461f      	mov	r7, r3
 8017e34:	42be      	cmp	r6, r7
 8017e36:	680b      	ldr	r3, [r1, #0]
 8017e38:	4682      	mov	sl, r0
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	4690      	mov	r8, r2
 8017e3e:	d82d      	bhi.n	8017e9c <__ssputs_r+0x70>
 8017e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e48:	d026      	beq.n	8017e98 <__ssputs_r+0x6c>
 8017e4a:	6965      	ldr	r5, [r4, #20]
 8017e4c:	6909      	ldr	r1, [r1, #16]
 8017e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e52:	eba3 0901 	sub.w	r9, r3, r1
 8017e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e5a:	1c7b      	adds	r3, r7, #1
 8017e5c:	444b      	add	r3, r9
 8017e5e:	106d      	asrs	r5, r5, #1
 8017e60:	429d      	cmp	r5, r3
 8017e62:	bf38      	it	cc
 8017e64:	461d      	movcc	r5, r3
 8017e66:	0553      	lsls	r3, r2, #21
 8017e68:	d527      	bpl.n	8017eba <__ssputs_r+0x8e>
 8017e6a:	4629      	mov	r1, r5
 8017e6c:	f7ff fb1c 	bl	80174a8 <_malloc_r>
 8017e70:	4606      	mov	r6, r0
 8017e72:	b360      	cbz	r0, 8017ece <__ssputs_r+0xa2>
 8017e74:	6921      	ldr	r1, [r4, #16]
 8017e76:	464a      	mov	r2, r9
 8017e78:	f7ff ff4d 	bl	8017d16 <memcpy>
 8017e7c:	89a3      	ldrh	r3, [r4, #12]
 8017e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e86:	81a3      	strh	r3, [r4, #12]
 8017e88:	6126      	str	r6, [r4, #16]
 8017e8a:	6165      	str	r5, [r4, #20]
 8017e8c:	444e      	add	r6, r9
 8017e8e:	eba5 0509 	sub.w	r5, r5, r9
 8017e92:	6026      	str	r6, [r4, #0]
 8017e94:	60a5      	str	r5, [r4, #8]
 8017e96:	463e      	mov	r6, r7
 8017e98:	42be      	cmp	r6, r7
 8017e9a:	d900      	bls.n	8017e9e <__ssputs_r+0x72>
 8017e9c:	463e      	mov	r6, r7
 8017e9e:	6820      	ldr	r0, [r4, #0]
 8017ea0:	4632      	mov	r2, r6
 8017ea2:	4641      	mov	r1, r8
 8017ea4:	f000 fb66 	bl	8018574 <memmove>
 8017ea8:	68a3      	ldr	r3, [r4, #8]
 8017eaa:	1b9b      	subs	r3, r3, r6
 8017eac:	60a3      	str	r3, [r4, #8]
 8017eae:	6823      	ldr	r3, [r4, #0]
 8017eb0:	4433      	add	r3, r6
 8017eb2:	6023      	str	r3, [r4, #0]
 8017eb4:	2000      	movs	r0, #0
 8017eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eba:	462a      	mov	r2, r5
 8017ebc:	f7ff fbf4 	bl	80176a8 <_realloc_r>
 8017ec0:	4606      	mov	r6, r0
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	d1e0      	bne.n	8017e88 <__ssputs_r+0x5c>
 8017ec6:	6921      	ldr	r1, [r4, #16]
 8017ec8:	4650      	mov	r0, sl
 8017eca:	f7ff ff5d 	bl	8017d88 <_free_r>
 8017ece:	230c      	movs	r3, #12
 8017ed0:	f8ca 3000 	str.w	r3, [sl]
 8017ed4:	89a3      	ldrh	r3, [r4, #12]
 8017ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eda:	81a3      	strh	r3, [r4, #12]
 8017edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ee0:	e7e9      	b.n	8017eb6 <__ssputs_r+0x8a>
	...

08017ee4 <_svfiprintf_r>:
 8017ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee8:	4698      	mov	r8, r3
 8017eea:	898b      	ldrh	r3, [r1, #12]
 8017eec:	061b      	lsls	r3, r3, #24
 8017eee:	b09d      	sub	sp, #116	@ 0x74
 8017ef0:	4607      	mov	r7, r0
 8017ef2:	460d      	mov	r5, r1
 8017ef4:	4614      	mov	r4, r2
 8017ef6:	d510      	bpl.n	8017f1a <_svfiprintf_r+0x36>
 8017ef8:	690b      	ldr	r3, [r1, #16]
 8017efa:	b973      	cbnz	r3, 8017f1a <_svfiprintf_r+0x36>
 8017efc:	2140      	movs	r1, #64	@ 0x40
 8017efe:	f7ff fad3 	bl	80174a8 <_malloc_r>
 8017f02:	6028      	str	r0, [r5, #0]
 8017f04:	6128      	str	r0, [r5, #16]
 8017f06:	b930      	cbnz	r0, 8017f16 <_svfiprintf_r+0x32>
 8017f08:	230c      	movs	r3, #12
 8017f0a:	603b      	str	r3, [r7, #0]
 8017f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f10:	b01d      	add	sp, #116	@ 0x74
 8017f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f16:	2340      	movs	r3, #64	@ 0x40
 8017f18:	616b      	str	r3, [r5, #20]
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f1e:	2320      	movs	r3, #32
 8017f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f28:	2330      	movs	r3, #48	@ 0x30
 8017f2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180c8 <_svfiprintf_r+0x1e4>
 8017f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f32:	f04f 0901 	mov.w	r9, #1
 8017f36:	4623      	mov	r3, r4
 8017f38:	469a      	mov	sl, r3
 8017f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f3e:	b10a      	cbz	r2, 8017f44 <_svfiprintf_r+0x60>
 8017f40:	2a25      	cmp	r2, #37	@ 0x25
 8017f42:	d1f9      	bne.n	8017f38 <_svfiprintf_r+0x54>
 8017f44:	ebba 0b04 	subs.w	fp, sl, r4
 8017f48:	d00b      	beq.n	8017f62 <_svfiprintf_r+0x7e>
 8017f4a:	465b      	mov	r3, fp
 8017f4c:	4622      	mov	r2, r4
 8017f4e:	4629      	mov	r1, r5
 8017f50:	4638      	mov	r0, r7
 8017f52:	f7ff ff6b 	bl	8017e2c <__ssputs_r>
 8017f56:	3001      	adds	r0, #1
 8017f58:	f000 80a7 	beq.w	80180aa <_svfiprintf_r+0x1c6>
 8017f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f5e:	445a      	add	r2, fp
 8017f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f62:	f89a 3000 	ldrb.w	r3, [sl]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	f000 809f 	beq.w	80180aa <_svfiprintf_r+0x1c6>
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f76:	f10a 0a01 	add.w	sl, sl, #1
 8017f7a:	9304      	str	r3, [sp, #16]
 8017f7c:	9307      	str	r3, [sp, #28]
 8017f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f84:	4654      	mov	r4, sl
 8017f86:	2205      	movs	r2, #5
 8017f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f8c:	484e      	ldr	r0, [pc, #312]	@ (80180c8 <_svfiprintf_r+0x1e4>)
 8017f8e:	f7e8 f9bf 	bl	8000310 <memchr>
 8017f92:	9a04      	ldr	r2, [sp, #16]
 8017f94:	b9d8      	cbnz	r0, 8017fce <_svfiprintf_r+0xea>
 8017f96:	06d0      	lsls	r0, r2, #27
 8017f98:	bf44      	itt	mi
 8017f9a:	2320      	movmi	r3, #32
 8017f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fa0:	0711      	lsls	r1, r2, #28
 8017fa2:	bf44      	itt	mi
 8017fa4:	232b      	movmi	r3, #43	@ 0x2b
 8017fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017faa:	f89a 3000 	ldrb.w	r3, [sl]
 8017fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fb0:	d015      	beq.n	8017fde <_svfiprintf_r+0xfa>
 8017fb2:	9a07      	ldr	r2, [sp, #28]
 8017fb4:	4654      	mov	r4, sl
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	f04f 0c0a 	mov.w	ip, #10
 8017fbc:	4621      	mov	r1, r4
 8017fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fc2:	3b30      	subs	r3, #48	@ 0x30
 8017fc4:	2b09      	cmp	r3, #9
 8017fc6:	d94b      	bls.n	8018060 <_svfiprintf_r+0x17c>
 8017fc8:	b1b0      	cbz	r0, 8017ff8 <_svfiprintf_r+0x114>
 8017fca:	9207      	str	r2, [sp, #28]
 8017fcc:	e014      	b.n	8017ff8 <_svfiprintf_r+0x114>
 8017fce:	eba0 0308 	sub.w	r3, r0, r8
 8017fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8017fd6:	4313      	orrs	r3, r2
 8017fd8:	9304      	str	r3, [sp, #16]
 8017fda:	46a2      	mov	sl, r4
 8017fdc:	e7d2      	b.n	8017f84 <_svfiprintf_r+0xa0>
 8017fde:	9b03      	ldr	r3, [sp, #12]
 8017fe0:	1d19      	adds	r1, r3, #4
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	9103      	str	r1, [sp, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	bfbb      	ittet	lt
 8017fea:	425b      	neglt	r3, r3
 8017fec:	f042 0202 	orrlt.w	r2, r2, #2
 8017ff0:	9307      	strge	r3, [sp, #28]
 8017ff2:	9307      	strlt	r3, [sp, #28]
 8017ff4:	bfb8      	it	lt
 8017ff6:	9204      	strlt	r2, [sp, #16]
 8017ff8:	7823      	ldrb	r3, [r4, #0]
 8017ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8017ffc:	d10a      	bne.n	8018014 <_svfiprintf_r+0x130>
 8017ffe:	7863      	ldrb	r3, [r4, #1]
 8018000:	2b2a      	cmp	r3, #42	@ 0x2a
 8018002:	d132      	bne.n	801806a <_svfiprintf_r+0x186>
 8018004:	9b03      	ldr	r3, [sp, #12]
 8018006:	1d1a      	adds	r2, r3, #4
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	9203      	str	r2, [sp, #12]
 801800c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018010:	3402      	adds	r4, #2
 8018012:	9305      	str	r3, [sp, #20]
 8018014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80180d8 <_svfiprintf_r+0x1f4>
 8018018:	7821      	ldrb	r1, [r4, #0]
 801801a:	2203      	movs	r2, #3
 801801c:	4650      	mov	r0, sl
 801801e:	f7e8 f977 	bl	8000310 <memchr>
 8018022:	b138      	cbz	r0, 8018034 <_svfiprintf_r+0x150>
 8018024:	9b04      	ldr	r3, [sp, #16]
 8018026:	eba0 000a 	sub.w	r0, r0, sl
 801802a:	2240      	movs	r2, #64	@ 0x40
 801802c:	4082      	lsls	r2, r0
 801802e:	4313      	orrs	r3, r2
 8018030:	3401      	adds	r4, #1
 8018032:	9304      	str	r3, [sp, #16]
 8018034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018038:	4824      	ldr	r0, [pc, #144]	@ (80180cc <_svfiprintf_r+0x1e8>)
 801803a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801803e:	2206      	movs	r2, #6
 8018040:	f7e8 f966 	bl	8000310 <memchr>
 8018044:	2800      	cmp	r0, #0
 8018046:	d036      	beq.n	80180b6 <_svfiprintf_r+0x1d2>
 8018048:	4b21      	ldr	r3, [pc, #132]	@ (80180d0 <_svfiprintf_r+0x1ec>)
 801804a:	bb1b      	cbnz	r3, 8018094 <_svfiprintf_r+0x1b0>
 801804c:	9b03      	ldr	r3, [sp, #12]
 801804e:	3307      	adds	r3, #7
 8018050:	f023 0307 	bic.w	r3, r3, #7
 8018054:	3308      	adds	r3, #8
 8018056:	9303      	str	r3, [sp, #12]
 8018058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801805a:	4433      	add	r3, r6
 801805c:	9309      	str	r3, [sp, #36]	@ 0x24
 801805e:	e76a      	b.n	8017f36 <_svfiprintf_r+0x52>
 8018060:	fb0c 3202 	mla	r2, ip, r2, r3
 8018064:	460c      	mov	r4, r1
 8018066:	2001      	movs	r0, #1
 8018068:	e7a8      	b.n	8017fbc <_svfiprintf_r+0xd8>
 801806a:	2300      	movs	r3, #0
 801806c:	3401      	adds	r4, #1
 801806e:	9305      	str	r3, [sp, #20]
 8018070:	4619      	mov	r1, r3
 8018072:	f04f 0c0a 	mov.w	ip, #10
 8018076:	4620      	mov	r0, r4
 8018078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801807c:	3a30      	subs	r2, #48	@ 0x30
 801807e:	2a09      	cmp	r2, #9
 8018080:	d903      	bls.n	801808a <_svfiprintf_r+0x1a6>
 8018082:	2b00      	cmp	r3, #0
 8018084:	d0c6      	beq.n	8018014 <_svfiprintf_r+0x130>
 8018086:	9105      	str	r1, [sp, #20]
 8018088:	e7c4      	b.n	8018014 <_svfiprintf_r+0x130>
 801808a:	fb0c 2101 	mla	r1, ip, r1, r2
 801808e:	4604      	mov	r4, r0
 8018090:	2301      	movs	r3, #1
 8018092:	e7f0      	b.n	8018076 <_svfiprintf_r+0x192>
 8018094:	ab03      	add	r3, sp, #12
 8018096:	9300      	str	r3, [sp, #0]
 8018098:	462a      	mov	r2, r5
 801809a:	4b0e      	ldr	r3, [pc, #56]	@ (80180d4 <_svfiprintf_r+0x1f0>)
 801809c:	a904      	add	r1, sp, #16
 801809e:	4638      	mov	r0, r7
 80180a0:	f3af 8000 	nop.w
 80180a4:	1c42      	adds	r2, r0, #1
 80180a6:	4606      	mov	r6, r0
 80180a8:	d1d6      	bne.n	8018058 <_svfiprintf_r+0x174>
 80180aa:	89ab      	ldrh	r3, [r5, #12]
 80180ac:	065b      	lsls	r3, r3, #25
 80180ae:	f53f af2d 	bmi.w	8017f0c <_svfiprintf_r+0x28>
 80180b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180b4:	e72c      	b.n	8017f10 <_svfiprintf_r+0x2c>
 80180b6:	ab03      	add	r3, sp, #12
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	462a      	mov	r2, r5
 80180bc:	4b05      	ldr	r3, [pc, #20]	@ (80180d4 <_svfiprintf_r+0x1f0>)
 80180be:	a904      	add	r1, sp, #16
 80180c0:	4638      	mov	r0, r7
 80180c2:	f000 f879 	bl	80181b8 <_printf_i>
 80180c6:	e7ed      	b.n	80180a4 <_svfiprintf_r+0x1c0>
 80180c8:	080196a0 	.word	0x080196a0
 80180cc:	080196aa 	.word	0x080196aa
 80180d0:	00000000 	.word	0x00000000
 80180d4:	08017e2d 	.word	0x08017e2d
 80180d8:	080196a6 	.word	0x080196a6

080180dc <_printf_common>:
 80180dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180e0:	4616      	mov	r6, r2
 80180e2:	4698      	mov	r8, r3
 80180e4:	688a      	ldr	r2, [r1, #8]
 80180e6:	690b      	ldr	r3, [r1, #16]
 80180e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80180ec:	4293      	cmp	r3, r2
 80180ee:	bfb8      	it	lt
 80180f0:	4613      	movlt	r3, r2
 80180f2:	6033      	str	r3, [r6, #0]
 80180f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80180f8:	4607      	mov	r7, r0
 80180fa:	460c      	mov	r4, r1
 80180fc:	b10a      	cbz	r2, 8018102 <_printf_common+0x26>
 80180fe:	3301      	adds	r3, #1
 8018100:	6033      	str	r3, [r6, #0]
 8018102:	6823      	ldr	r3, [r4, #0]
 8018104:	0699      	lsls	r1, r3, #26
 8018106:	bf42      	ittt	mi
 8018108:	6833      	ldrmi	r3, [r6, #0]
 801810a:	3302      	addmi	r3, #2
 801810c:	6033      	strmi	r3, [r6, #0]
 801810e:	6825      	ldr	r5, [r4, #0]
 8018110:	f015 0506 	ands.w	r5, r5, #6
 8018114:	d106      	bne.n	8018124 <_printf_common+0x48>
 8018116:	f104 0a19 	add.w	sl, r4, #25
 801811a:	68e3      	ldr	r3, [r4, #12]
 801811c:	6832      	ldr	r2, [r6, #0]
 801811e:	1a9b      	subs	r3, r3, r2
 8018120:	42ab      	cmp	r3, r5
 8018122:	dc26      	bgt.n	8018172 <_printf_common+0x96>
 8018124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018128:	6822      	ldr	r2, [r4, #0]
 801812a:	3b00      	subs	r3, #0
 801812c:	bf18      	it	ne
 801812e:	2301      	movne	r3, #1
 8018130:	0692      	lsls	r2, r2, #26
 8018132:	d42b      	bmi.n	801818c <_printf_common+0xb0>
 8018134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018138:	4641      	mov	r1, r8
 801813a:	4638      	mov	r0, r7
 801813c:	47c8      	blx	r9
 801813e:	3001      	adds	r0, #1
 8018140:	d01e      	beq.n	8018180 <_printf_common+0xa4>
 8018142:	6823      	ldr	r3, [r4, #0]
 8018144:	6922      	ldr	r2, [r4, #16]
 8018146:	f003 0306 	and.w	r3, r3, #6
 801814a:	2b04      	cmp	r3, #4
 801814c:	bf02      	ittt	eq
 801814e:	68e5      	ldreq	r5, [r4, #12]
 8018150:	6833      	ldreq	r3, [r6, #0]
 8018152:	1aed      	subeq	r5, r5, r3
 8018154:	68a3      	ldr	r3, [r4, #8]
 8018156:	bf0c      	ite	eq
 8018158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801815c:	2500      	movne	r5, #0
 801815e:	4293      	cmp	r3, r2
 8018160:	bfc4      	itt	gt
 8018162:	1a9b      	subgt	r3, r3, r2
 8018164:	18ed      	addgt	r5, r5, r3
 8018166:	2600      	movs	r6, #0
 8018168:	341a      	adds	r4, #26
 801816a:	42b5      	cmp	r5, r6
 801816c:	d11a      	bne.n	80181a4 <_printf_common+0xc8>
 801816e:	2000      	movs	r0, #0
 8018170:	e008      	b.n	8018184 <_printf_common+0xa8>
 8018172:	2301      	movs	r3, #1
 8018174:	4652      	mov	r2, sl
 8018176:	4641      	mov	r1, r8
 8018178:	4638      	mov	r0, r7
 801817a:	47c8      	blx	r9
 801817c:	3001      	adds	r0, #1
 801817e:	d103      	bne.n	8018188 <_printf_common+0xac>
 8018180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018188:	3501      	adds	r5, #1
 801818a:	e7c6      	b.n	801811a <_printf_common+0x3e>
 801818c:	18e1      	adds	r1, r4, r3
 801818e:	1c5a      	adds	r2, r3, #1
 8018190:	2030      	movs	r0, #48	@ 0x30
 8018192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018196:	4422      	add	r2, r4
 8018198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801819c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80181a0:	3302      	adds	r3, #2
 80181a2:	e7c7      	b.n	8018134 <_printf_common+0x58>
 80181a4:	2301      	movs	r3, #1
 80181a6:	4622      	mov	r2, r4
 80181a8:	4641      	mov	r1, r8
 80181aa:	4638      	mov	r0, r7
 80181ac:	47c8      	blx	r9
 80181ae:	3001      	adds	r0, #1
 80181b0:	d0e6      	beq.n	8018180 <_printf_common+0xa4>
 80181b2:	3601      	adds	r6, #1
 80181b4:	e7d9      	b.n	801816a <_printf_common+0x8e>
	...

080181b8 <_printf_i>:
 80181b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80181bc:	7e0f      	ldrb	r7, [r1, #24]
 80181be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80181c0:	2f78      	cmp	r7, #120	@ 0x78
 80181c2:	4691      	mov	r9, r2
 80181c4:	4680      	mov	r8, r0
 80181c6:	460c      	mov	r4, r1
 80181c8:	469a      	mov	sl, r3
 80181ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80181ce:	d807      	bhi.n	80181e0 <_printf_i+0x28>
 80181d0:	2f62      	cmp	r7, #98	@ 0x62
 80181d2:	d80a      	bhi.n	80181ea <_printf_i+0x32>
 80181d4:	2f00      	cmp	r7, #0
 80181d6:	f000 80d2 	beq.w	801837e <_printf_i+0x1c6>
 80181da:	2f58      	cmp	r7, #88	@ 0x58
 80181dc:	f000 80b9 	beq.w	8018352 <_printf_i+0x19a>
 80181e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80181e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80181e8:	e03a      	b.n	8018260 <_printf_i+0xa8>
 80181ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80181ee:	2b15      	cmp	r3, #21
 80181f0:	d8f6      	bhi.n	80181e0 <_printf_i+0x28>
 80181f2:	a101      	add	r1, pc, #4	@ (adr r1, 80181f8 <_printf_i+0x40>)
 80181f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181f8:	08018251 	.word	0x08018251
 80181fc:	08018265 	.word	0x08018265
 8018200:	080181e1 	.word	0x080181e1
 8018204:	080181e1 	.word	0x080181e1
 8018208:	080181e1 	.word	0x080181e1
 801820c:	080181e1 	.word	0x080181e1
 8018210:	08018265 	.word	0x08018265
 8018214:	080181e1 	.word	0x080181e1
 8018218:	080181e1 	.word	0x080181e1
 801821c:	080181e1 	.word	0x080181e1
 8018220:	080181e1 	.word	0x080181e1
 8018224:	08018365 	.word	0x08018365
 8018228:	0801828f 	.word	0x0801828f
 801822c:	0801831f 	.word	0x0801831f
 8018230:	080181e1 	.word	0x080181e1
 8018234:	080181e1 	.word	0x080181e1
 8018238:	08018387 	.word	0x08018387
 801823c:	080181e1 	.word	0x080181e1
 8018240:	0801828f 	.word	0x0801828f
 8018244:	080181e1 	.word	0x080181e1
 8018248:	080181e1 	.word	0x080181e1
 801824c:	08018327 	.word	0x08018327
 8018250:	6833      	ldr	r3, [r6, #0]
 8018252:	1d1a      	adds	r2, r3, #4
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	6032      	str	r2, [r6, #0]
 8018258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801825c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018260:	2301      	movs	r3, #1
 8018262:	e09d      	b.n	80183a0 <_printf_i+0x1e8>
 8018264:	6833      	ldr	r3, [r6, #0]
 8018266:	6820      	ldr	r0, [r4, #0]
 8018268:	1d19      	adds	r1, r3, #4
 801826a:	6031      	str	r1, [r6, #0]
 801826c:	0606      	lsls	r6, r0, #24
 801826e:	d501      	bpl.n	8018274 <_printf_i+0xbc>
 8018270:	681d      	ldr	r5, [r3, #0]
 8018272:	e003      	b.n	801827c <_printf_i+0xc4>
 8018274:	0645      	lsls	r5, r0, #25
 8018276:	d5fb      	bpl.n	8018270 <_printf_i+0xb8>
 8018278:	f9b3 5000 	ldrsh.w	r5, [r3]
 801827c:	2d00      	cmp	r5, #0
 801827e:	da03      	bge.n	8018288 <_printf_i+0xd0>
 8018280:	232d      	movs	r3, #45	@ 0x2d
 8018282:	426d      	negs	r5, r5
 8018284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018288:	4859      	ldr	r0, [pc, #356]	@ (80183f0 <_printf_i+0x238>)
 801828a:	230a      	movs	r3, #10
 801828c:	e011      	b.n	80182b2 <_printf_i+0xfa>
 801828e:	6821      	ldr	r1, [r4, #0]
 8018290:	6833      	ldr	r3, [r6, #0]
 8018292:	0608      	lsls	r0, r1, #24
 8018294:	f853 5b04 	ldr.w	r5, [r3], #4
 8018298:	d402      	bmi.n	80182a0 <_printf_i+0xe8>
 801829a:	0649      	lsls	r1, r1, #25
 801829c:	bf48      	it	mi
 801829e:	b2ad      	uxthmi	r5, r5
 80182a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80182a2:	4853      	ldr	r0, [pc, #332]	@ (80183f0 <_printf_i+0x238>)
 80182a4:	6033      	str	r3, [r6, #0]
 80182a6:	bf14      	ite	ne
 80182a8:	230a      	movne	r3, #10
 80182aa:	2308      	moveq	r3, #8
 80182ac:	2100      	movs	r1, #0
 80182ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80182b2:	6866      	ldr	r6, [r4, #4]
 80182b4:	60a6      	str	r6, [r4, #8]
 80182b6:	2e00      	cmp	r6, #0
 80182b8:	bfa2      	ittt	ge
 80182ba:	6821      	ldrge	r1, [r4, #0]
 80182bc:	f021 0104 	bicge.w	r1, r1, #4
 80182c0:	6021      	strge	r1, [r4, #0]
 80182c2:	b90d      	cbnz	r5, 80182c8 <_printf_i+0x110>
 80182c4:	2e00      	cmp	r6, #0
 80182c6:	d04b      	beq.n	8018360 <_printf_i+0x1a8>
 80182c8:	4616      	mov	r6, r2
 80182ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80182ce:	fb03 5711 	mls	r7, r3, r1, r5
 80182d2:	5dc7      	ldrb	r7, [r0, r7]
 80182d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80182d8:	462f      	mov	r7, r5
 80182da:	42bb      	cmp	r3, r7
 80182dc:	460d      	mov	r5, r1
 80182de:	d9f4      	bls.n	80182ca <_printf_i+0x112>
 80182e0:	2b08      	cmp	r3, #8
 80182e2:	d10b      	bne.n	80182fc <_printf_i+0x144>
 80182e4:	6823      	ldr	r3, [r4, #0]
 80182e6:	07df      	lsls	r7, r3, #31
 80182e8:	d508      	bpl.n	80182fc <_printf_i+0x144>
 80182ea:	6923      	ldr	r3, [r4, #16]
 80182ec:	6861      	ldr	r1, [r4, #4]
 80182ee:	4299      	cmp	r1, r3
 80182f0:	bfde      	ittt	le
 80182f2:	2330      	movle	r3, #48	@ 0x30
 80182f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80182fc:	1b92      	subs	r2, r2, r6
 80182fe:	6122      	str	r2, [r4, #16]
 8018300:	f8cd a000 	str.w	sl, [sp]
 8018304:	464b      	mov	r3, r9
 8018306:	aa03      	add	r2, sp, #12
 8018308:	4621      	mov	r1, r4
 801830a:	4640      	mov	r0, r8
 801830c:	f7ff fee6 	bl	80180dc <_printf_common>
 8018310:	3001      	adds	r0, #1
 8018312:	d14a      	bne.n	80183aa <_printf_i+0x1f2>
 8018314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018318:	b004      	add	sp, #16
 801831a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831e:	6823      	ldr	r3, [r4, #0]
 8018320:	f043 0320 	orr.w	r3, r3, #32
 8018324:	6023      	str	r3, [r4, #0]
 8018326:	4833      	ldr	r0, [pc, #204]	@ (80183f4 <_printf_i+0x23c>)
 8018328:	2778      	movs	r7, #120	@ 0x78
 801832a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801832e:	6823      	ldr	r3, [r4, #0]
 8018330:	6831      	ldr	r1, [r6, #0]
 8018332:	061f      	lsls	r7, r3, #24
 8018334:	f851 5b04 	ldr.w	r5, [r1], #4
 8018338:	d402      	bmi.n	8018340 <_printf_i+0x188>
 801833a:	065f      	lsls	r7, r3, #25
 801833c:	bf48      	it	mi
 801833e:	b2ad      	uxthmi	r5, r5
 8018340:	6031      	str	r1, [r6, #0]
 8018342:	07d9      	lsls	r1, r3, #31
 8018344:	bf44      	itt	mi
 8018346:	f043 0320 	orrmi.w	r3, r3, #32
 801834a:	6023      	strmi	r3, [r4, #0]
 801834c:	b11d      	cbz	r5, 8018356 <_printf_i+0x19e>
 801834e:	2310      	movs	r3, #16
 8018350:	e7ac      	b.n	80182ac <_printf_i+0xf4>
 8018352:	4827      	ldr	r0, [pc, #156]	@ (80183f0 <_printf_i+0x238>)
 8018354:	e7e9      	b.n	801832a <_printf_i+0x172>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	f023 0320 	bic.w	r3, r3, #32
 801835c:	6023      	str	r3, [r4, #0]
 801835e:	e7f6      	b.n	801834e <_printf_i+0x196>
 8018360:	4616      	mov	r6, r2
 8018362:	e7bd      	b.n	80182e0 <_printf_i+0x128>
 8018364:	6833      	ldr	r3, [r6, #0]
 8018366:	6825      	ldr	r5, [r4, #0]
 8018368:	6961      	ldr	r1, [r4, #20]
 801836a:	1d18      	adds	r0, r3, #4
 801836c:	6030      	str	r0, [r6, #0]
 801836e:	062e      	lsls	r6, r5, #24
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	d501      	bpl.n	8018378 <_printf_i+0x1c0>
 8018374:	6019      	str	r1, [r3, #0]
 8018376:	e002      	b.n	801837e <_printf_i+0x1c6>
 8018378:	0668      	lsls	r0, r5, #25
 801837a:	d5fb      	bpl.n	8018374 <_printf_i+0x1bc>
 801837c:	8019      	strh	r1, [r3, #0]
 801837e:	2300      	movs	r3, #0
 8018380:	6123      	str	r3, [r4, #16]
 8018382:	4616      	mov	r6, r2
 8018384:	e7bc      	b.n	8018300 <_printf_i+0x148>
 8018386:	6833      	ldr	r3, [r6, #0]
 8018388:	1d1a      	adds	r2, r3, #4
 801838a:	6032      	str	r2, [r6, #0]
 801838c:	681e      	ldr	r6, [r3, #0]
 801838e:	6862      	ldr	r2, [r4, #4]
 8018390:	2100      	movs	r1, #0
 8018392:	4630      	mov	r0, r6
 8018394:	f7e7 ffbc 	bl	8000310 <memchr>
 8018398:	b108      	cbz	r0, 801839e <_printf_i+0x1e6>
 801839a:	1b80      	subs	r0, r0, r6
 801839c:	6060      	str	r0, [r4, #4]
 801839e:	6863      	ldr	r3, [r4, #4]
 80183a0:	6123      	str	r3, [r4, #16]
 80183a2:	2300      	movs	r3, #0
 80183a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183a8:	e7aa      	b.n	8018300 <_printf_i+0x148>
 80183aa:	6923      	ldr	r3, [r4, #16]
 80183ac:	4632      	mov	r2, r6
 80183ae:	4649      	mov	r1, r9
 80183b0:	4640      	mov	r0, r8
 80183b2:	47d0      	blx	sl
 80183b4:	3001      	adds	r0, #1
 80183b6:	d0ad      	beq.n	8018314 <_printf_i+0x15c>
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	079b      	lsls	r3, r3, #30
 80183bc:	d413      	bmi.n	80183e6 <_printf_i+0x22e>
 80183be:	68e0      	ldr	r0, [r4, #12]
 80183c0:	9b03      	ldr	r3, [sp, #12]
 80183c2:	4298      	cmp	r0, r3
 80183c4:	bfb8      	it	lt
 80183c6:	4618      	movlt	r0, r3
 80183c8:	e7a6      	b.n	8018318 <_printf_i+0x160>
 80183ca:	2301      	movs	r3, #1
 80183cc:	4632      	mov	r2, r6
 80183ce:	4649      	mov	r1, r9
 80183d0:	4640      	mov	r0, r8
 80183d2:	47d0      	blx	sl
 80183d4:	3001      	adds	r0, #1
 80183d6:	d09d      	beq.n	8018314 <_printf_i+0x15c>
 80183d8:	3501      	adds	r5, #1
 80183da:	68e3      	ldr	r3, [r4, #12]
 80183dc:	9903      	ldr	r1, [sp, #12]
 80183de:	1a5b      	subs	r3, r3, r1
 80183e0:	42ab      	cmp	r3, r5
 80183e2:	dcf2      	bgt.n	80183ca <_printf_i+0x212>
 80183e4:	e7eb      	b.n	80183be <_printf_i+0x206>
 80183e6:	2500      	movs	r5, #0
 80183e8:	f104 0619 	add.w	r6, r4, #25
 80183ec:	e7f5      	b.n	80183da <_printf_i+0x222>
 80183ee:	bf00      	nop
 80183f0:	080196b1 	.word	0x080196b1
 80183f4:	080196c2 	.word	0x080196c2

080183f8 <__sflush_r>:
 80183f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80183fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018400:	0716      	lsls	r6, r2, #28
 8018402:	4605      	mov	r5, r0
 8018404:	460c      	mov	r4, r1
 8018406:	d454      	bmi.n	80184b2 <__sflush_r+0xba>
 8018408:	684b      	ldr	r3, [r1, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	dc02      	bgt.n	8018414 <__sflush_r+0x1c>
 801840e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018410:	2b00      	cmp	r3, #0
 8018412:	dd48      	ble.n	80184a6 <__sflush_r+0xae>
 8018414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018416:	2e00      	cmp	r6, #0
 8018418:	d045      	beq.n	80184a6 <__sflush_r+0xae>
 801841a:	2300      	movs	r3, #0
 801841c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018420:	682f      	ldr	r7, [r5, #0]
 8018422:	6a21      	ldr	r1, [r4, #32]
 8018424:	602b      	str	r3, [r5, #0]
 8018426:	d030      	beq.n	801848a <__sflush_r+0x92>
 8018428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801842a:	89a3      	ldrh	r3, [r4, #12]
 801842c:	0759      	lsls	r1, r3, #29
 801842e:	d505      	bpl.n	801843c <__sflush_r+0x44>
 8018430:	6863      	ldr	r3, [r4, #4]
 8018432:	1ad2      	subs	r2, r2, r3
 8018434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018436:	b10b      	cbz	r3, 801843c <__sflush_r+0x44>
 8018438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801843a:	1ad2      	subs	r2, r2, r3
 801843c:	2300      	movs	r3, #0
 801843e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018440:	6a21      	ldr	r1, [r4, #32]
 8018442:	4628      	mov	r0, r5
 8018444:	47b0      	blx	r6
 8018446:	1c43      	adds	r3, r0, #1
 8018448:	89a3      	ldrh	r3, [r4, #12]
 801844a:	d106      	bne.n	801845a <__sflush_r+0x62>
 801844c:	6829      	ldr	r1, [r5, #0]
 801844e:	291d      	cmp	r1, #29
 8018450:	d82b      	bhi.n	80184aa <__sflush_r+0xb2>
 8018452:	4a2a      	ldr	r2, [pc, #168]	@ (80184fc <__sflush_r+0x104>)
 8018454:	410a      	asrs	r2, r1
 8018456:	07d6      	lsls	r6, r2, #31
 8018458:	d427      	bmi.n	80184aa <__sflush_r+0xb2>
 801845a:	2200      	movs	r2, #0
 801845c:	6062      	str	r2, [r4, #4]
 801845e:	04d9      	lsls	r1, r3, #19
 8018460:	6922      	ldr	r2, [r4, #16]
 8018462:	6022      	str	r2, [r4, #0]
 8018464:	d504      	bpl.n	8018470 <__sflush_r+0x78>
 8018466:	1c42      	adds	r2, r0, #1
 8018468:	d101      	bne.n	801846e <__sflush_r+0x76>
 801846a:	682b      	ldr	r3, [r5, #0]
 801846c:	b903      	cbnz	r3, 8018470 <__sflush_r+0x78>
 801846e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018472:	602f      	str	r7, [r5, #0]
 8018474:	b1b9      	cbz	r1, 80184a6 <__sflush_r+0xae>
 8018476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801847a:	4299      	cmp	r1, r3
 801847c:	d002      	beq.n	8018484 <__sflush_r+0x8c>
 801847e:	4628      	mov	r0, r5
 8018480:	f7ff fc82 	bl	8017d88 <_free_r>
 8018484:	2300      	movs	r3, #0
 8018486:	6363      	str	r3, [r4, #52]	@ 0x34
 8018488:	e00d      	b.n	80184a6 <__sflush_r+0xae>
 801848a:	2301      	movs	r3, #1
 801848c:	4628      	mov	r0, r5
 801848e:	47b0      	blx	r6
 8018490:	4602      	mov	r2, r0
 8018492:	1c50      	adds	r0, r2, #1
 8018494:	d1c9      	bne.n	801842a <__sflush_r+0x32>
 8018496:	682b      	ldr	r3, [r5, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d0c6      	beq.n	801842a <__sflush_r+0x32>
 801849c:	2b1d      	cmp	r3, #29
 801849e:	d001      	beq.n	80184a4 <__sflush_r+0xac>
 80184a0:	2b16      	cmp	r3, #22
 80184a2:	d11e      	bne.n	80184e2 <__sflush_r+0xea>
 80184a4:	602f      	str	r7, [r5, #0]
 80184a6:	2000      	movs	r0, #0
 80184a8:	e022      	b.n	80184f0 <__sflush_r+0xf8>
 80184aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ae:	b21b      	sxth	r3, r3
 80184b0:	e01b      	b.n	80184ea <__sflush_r+0xf2>
 80184b2:	690f      	ldr	r7, [r1, #16]
 80184b4:	2f00      	cmp	r7, #0
 80184b6:	d0f6      	beq.n	80184a6 <__sflush_r+0xae>
 80184b8:	0793      	lsls	r3, r2, #30
 80184ba:	680e      	ldr	r6, [r1, #0]
 80184bc:	bf08      	it	eq
 80184be:	694b      	ldreq	r3, [r1, #20]
 80184c0:	600f      	str	r7, [r1, #0]
 80184c2:	bf18      	it	ne
 80184c4:	2300      	movne	r3, #0
 80184c6:	eba6 0807 	sub.w	r8, r6, r7
 80184ca:	608b      	str	r3, [r1, #8]
 80184cc:	f1b8 0f00 	cmp.w	r8, #0
 80184d0:	dde9      	ble.n	80184a6 <__sflush_r+0xae>
 80184d2:	6a21      	ldr	r1, [r4, #32]
 80184d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80184d6:	4643      	mov	r3, r8
 80184d8:	463a      	mov	r2, r7
 80184da:	4628      	mov	r0, r5
 80184dc:	47b0      	blx	r6
 80184de:	2800      	cmp	r0, #0
 80184e0:	dc08      	bgt.n	80184f4 <__sflush_r+0xfc>
 80184e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ea:	81a3      	strh	r3, [r4, #12]
 80184ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f4:	4407      	add	r7, r0
 80184f6:	eba8 0800 	sub.w	r8, r8, r0
 80184fa:	e7e7      	b.n	80184cc <__sflush_r+0xd4>
 80184fc:	dfbffffe 	.word	0xdfbffffe

08018500 <_fflush_r>:
 8018500:	b538      	push	{r3, r4, r5, lr}
 8018502:	690b      	ldr	r3, [r1, #16]
 8018504:	4605      	mov	r5, r0
 8018506:	460c      	mov	r4, r1
 8018508:	b913      	cbnz	r3, 8018510 <_fflush_r+0x10>
 801850a:	2500      	movs	r5, #0
 801850c:	4628      	mov	r0, r5
 801850e:	bd38      	pop	{r3, r4, r5, pc}
 8018510:	b118      	cbz	r0, 801851a <_fflush_r+0x1a>
 8018512:	6a03      	ldr	r3, [r0, #32]
 8018514:	b90b      	cbnz	r3, 801851a <_fflush_r+0x1a>
 8018516:	f7ff f9f9 	bl	801790c <__sinit>
 801851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d0f3      	beq.n	801850a <_fflush_r+0xa>
 8018522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018524:	07d0      	lsls	r0, r2, #31
 8018526:	d404      	bmi.n	8018532 <_fflush_r+0x32>
 8018528:	0599      	lsls	r1, r3, #22
 801852a:	d402      	bmi.n	8018532 <_fflush_r+0x32>
 801852c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801852e:	f7ff fbe8 	bl	8017d02 <__retarget_lock_acquire_recursive>
 8018532:	4628      	mov	r0, r5
 8018534:	4621      	mov	r1, r4
 8018536:	f7ff ff5f 	bl	80183f8 <__sflush_r>
 801853a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801853c:	07da      	lsls	r2, r3, #31
 801853e:	4605      	mov	r5, r0
 8018540:	d4e4      	bmi.n	801850c <_fflush_r+0xc>
 8018542:	89a3      	ldrh	r3, [r4, #12]
 8018544:	059b      	lsls	r3, r3, #22
 8018546:	d4e1      	bmi.n	801850c <_fflush_r+0xc>
 8018548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801854a:	f7ff fbdb 	bl	8017d04 <__retarget_lock_release_recursive>
 801854e:	e7dd      	b.n	801850c <_fflush_r+0xc>

08018550 <fiprintf>:
 8018550:	b40e      	push	{r1, r2, r3}
 8018552:	b503      	push	{r0, r1, lr}
 8018554:	4601      	mov	r1, r0
 8018556:	ab03      	add	r3, sp, #12
 8018558:	4805      	ldr	r0, [pc, #20]	@ (8018570 <fiprintf+0x20>)
 801855a:	f853 2b04 	ldr.w	r2, [r3], #4
 801855e:	6800      	ldr	r0, [r0, #0]
 8018560:	9301      	str	r3, [sp, #4]
 8018562:	f000 f851 	bl	8018608 <_vfiprintf_r>
 8018566:	b002      	add	sp, #8
 8018568:	f85d eb04 	ldr.w	lr, [sp], #4
 801856c:	b003      	add	sp, #12
 801856e:	4770      	bx	lr
 8018570:	240000c4 	.word	0x240000c4

08018574 <memmove>:
 8018574:	4288      	cmp	r0, r1
 8018576:	b510      	push	{r4, lr}
 8018578:	eb01 0402 	add.w	r4, r1, r2
 801857c:	d902      	bls.n	8018584 <memmove+0x10>
 801857e:	4284      	cmp	r4, r0
 8018580:	4623      	mov	r3, r4
 8018582:	d807      	bhi.n	8018594 <memmove+0x20>
 8018584:	1e43      	subs	r3, r0, #1
 8018586:	42a1      	cmp	r1, r4
 8018588:	d008      	beq.n	801859c <memmove+0x28>
 801858a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801858e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018592:	e7f8      	b.n	8018586 <memmove+0x12>
 8018594:	4402      	add	r2, r0
 8018596:	4601      	mov	r1, r0
 8018598:	428a      	cmp	r2, r1
 801859a:	d100      	bne.n	801859e <memmove+0x2a>
 801859c:	bd10      	pop	{r4, pc}
 801859e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185a6:	e7f7      	b.n	8018598 <memmove+0x24>

080185a8 <abort>:
 80185a8:	b508      	push	{r3, lr}
 80185aa:	2006      	movs	r0, #6
 80185ac:	f000 fa00 	bl	80189b0 <raise>
 80185b0:	2001      	movs	r0, #1
 80185b2:	f7e9 fa07 	bl	80019c4 <_exit>

080185b6 <__sfputc_r>:
 80185b6:	6893      	ldr	r3, [r2, #8]
 80185b8:	3b01      	subs	r3, #1
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	b410      	push	{r4}
 80185be:	6093      	str	r3, [r2, #8]
 80185c0:	da08      	bge.n	80185d4 <__sfputc_r+0x1e>
 80185c2:	6994      	ldr	r4, [r2, #24]
 80185c4:	42a3      	cmp	r3, r4
 80185c6:	db01      	blt.n	80185cc <__sfputc_r+0x16>
 80185c8:	290a      	cmp	r1, #10
 80185ca:	d103      	bne.n	80185d4 <__sfputc_r+0x1e>
 80185cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185d0:	f000 b932 	b.w	8018838 <__swbuf_r>
 80185d4:	6813      	ldr	r3, [r2, #0]
 80185d6:	1c58      	adds	r0, r3, #1
 80185d8:	6010      	str	r0, [r2, #0]
 80185da:	7019      	strb	r1, [r3, #0]
 80185dc:	4608      	mov	r0, r1
 80185de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185e2:	4770      	bx	lr

080185e4 <__sfputs_r>:
 80185e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185e6:	4606      	mov	r6, r0
 80185e8:	460f      	mov	r7, r1
 80185ea:	4614      	mov	r4, r2
 80185ec:	18d5      	adds	r5, r2, r3
 80185ee:	42ac      	cmp	r4, r5
 80185f0:	d101      	bne.n	80185f6 <__sfputs_r+0x12>
 80185f2:	2000      	movs	r0, #0
 80185f4:	e007      	b.n	8018606 <__sfputs_r+0x22>
 80185f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185fa:	463a      	mov	r2, r7
 80185fc:	4630      	mov	r0, r6
 80185fe:	f7ff ffda 	bl	80185b6 <__sfputc_r>
 8018602:	1c43      	adds	r3, r0, #1
 8018604:	d1f3      	bne.n	80185ee <__sfputs_r+0xa>
 8018606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018608 <_vfiprintf_r>:
 8018608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801860c:	460d      	mov	r5, r1
 801860e:	b09d      	sub	sp, #116	@ 0x74
 8018610:	4614      	mov	r4, r2
 8018612:	4698      	mov	r8, r3
 8018614:	4606      	mov	r6, r0
 8018616:	b118      	cbz	r0, 8018620 <_vfiprintf_r+0x18>
 8018618:	6a03      	ldr	r3, [r0, #32]
 801861a:	b90b      	cbnz	r3, 8018620 <_vfiprintf_r+0x18>
 801861c:	f7ff f976 	bl	801790c <__sinit>
 8018620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018622:	07d9      	lsls	r1, r3, #31
 8018624:	d405      	bmi.n	8018632 <_vfiprintf_r+0x2a>
 8018626:	89ab      	ldrh	r3, [r5, #12]
 8018628:	059a      	lsls	r2, r3, #22
 801862a:	d402      	bmi.n	8018632 <_vfiprintf_r+0x2a>
 801862c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801862e:	f7ff fb68 	bl	8017d02 <__retarget_lock_acquire_recursive>
 8018632:	89ab      	ldrh	r3, [r5, #12]
 8018634:	071b      	lsls	r3, r3, #28
 8018636:	d501      	bpl.n	801863c <_vfiprintf_r+0x34>
 8018638:	692b      	ldr	r3, [r5, #16]
 801863a:	b99b      	cbnz	r3, 8018664 <_vfiprintf_r+0x5c>
 801863c:	4629      	mov	r1, r5
 801863e:	4630      	mov	r0, r6
 8018640:	f000 f938 	bl	80188b4 <__swsetup_r>
 8018644:	b170      	cbz	r0, 8018664 <_vfiprintf_r+0x5c>
 8018646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018648:	07dc      	lsls	r4, r3, #31
 801864a:	d504      	bpl.n	8018656 <_vfiprintf_r+0x4e>
 801864c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018650:	b01d      	add	sp, #116	@ 0x74
 8018652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018656:	89ab      	ldrh	r3, [r5, #12]
 8018658:	0598      	lsls	r0, r3, #22
 801865a:	d4f7      	bmi.n	801864c <_vfiprintf_r+0x44>
 801865c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801865e:	f7ff fb51 	bl	8017d04 <__retarget_lock_release_recursive>
 8018662:	e7f3      	b.n	801864c <_vfiprintf_r+0x44>
 8018664:	2300      	movs	r3, #0
 8018666:	9309      	str	r3, [sp, #36]	@ 0x24
 8018668:	2320      	movs	r3, #32
 801866a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801866e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018672:	2330      	movs	r3, #48	@ 0x30
 8018674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018824 <_vfiprintf_r+0x21c>
 8018678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801867c:	f04f 0901 	mov.w	r9, #1
 8018680:	4623      	mov	r3, r4
 8018682:	469a      	mov	sl, r3
 8018684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018688:	b10a      	cbz	r2, 801868e <_vfiprintf_r+0x86>
 801868a:	2a25      	cmp	r2, #37	@ 0x25
 801868c:	d1f9      	bne.n	8018682 <_vfiprintf_r+0x7a>
 801868e:	ebba 0b04 	subs.w	fp, sl, r4
 8018692:	d00b      	beq.n	80186ac <_vfiprintf_r+0xa4>
 8018694:	465b      	mov	r3, fp
 8018696:	4622      	mov	r2, r4
 8018698:	4629      	mov	r1, r5
 801869a:	4630      	mov	r0, r6
 801869c:	f7ff ffa2 	bl	80185e4 <__sfputs_r>
 80186a0:	3001      	adds	r0, #1
 80186a2:	f000 80a7 	beq.w	80187f4 <_vfiprintf_r+0x1ec>
 80186a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186a8:	445a      	add	r2, fp
 80186aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80186ac:	f89a 3000 	ldrb.w	r3, [sl]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	f000 809f 	beq.w	80187f4 <_vfiprintf_r+0x1ec>
 80186b6:	2300      	movs	r3, #0
 80186b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80186bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80186c0:	f10a 0a01 	add.w	sl, sl, #1
 80186c4:	9304      	str	r3, [sp, #16]
 80186c6:	9307      	str	r3, [sp, #28]
 80186c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80186cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80186ce:	4654      	mov	r4, sl
 80186d0:	2205      	movs	r2, #5
 80186d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186d6:	4853      	ldr	r0, [pc, #332]	@ (8018824 <_vfiprintf_r+0x21c>)
 80186d8:	f7e7 fe1a 	bl	8000310 <memchr>
 80186dc:	9a04      	ldr	r2, [sp, #16]
 80186de:	b9d8      	cbnz	r0, 8018718 <_vfiprintf_r+0x110>
 80186e0:	06d1      	lsls	r1, r2, #27
 80186e2:	bf44      	itt	mi
 80186e4:	2320      	movmi	r3, #32
 80186e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186ea:	0713      	lsls	r3, r2, #28
 80186ec:	bf44      	itt	mi
 80186ee:	232b      	movmi	r3, #43	@ 0x2b
 80186f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186f4:	f89a 3000 	ldrb.w	r3, [sl]
 80186f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80186fa:	d015      	beq.n	8018728 <_vfiprintf_r+0x120>
 80186fc:	9a07      	ldr	r2, [sp, #28]
 80186fe:	4654      	mov	r4, sl
 8018700:	2000      	movs	r0, #0
 8018702:	f04f 0c0a 	mov.w	ip, #10
 8018706:	4621      	mov	r1, r4
 8018708:	f811 3b01 	ldrb.w	r3, [r1], #1
 801870c:	3b30      	subs	r3, #48	@ 0x30
 801870e:	2b09      	cmp	r3, #9
 8018710:	d94b      	bls.n	80187aa <_vfiprintf_r+0x1a2>
 8018712:	b1b0      	cbz	r0, 8018742 <_vfiprintf_r+0x13a>
 8018714:	9207      	str	r2, [sp, #28]
 8018716:	e014      	b.n	8018742 <_vfiprintf_r+0x13a>
 8018718:	eba0 0308 	sub.w	r3, r0, r8
 801871c:	fa09 f303 	lsl.w	r3, r9, r3
 8018720:	4313      	orrs	r3, r2
 8018722:	9304      	str	r3, [sp, #16]
 8018724:	46a2      	mov	sl, r4
 8018726:	e7d2      	b.n	80186ce <_vfiprintf_r+0xc6>
 8018728:	9b03      	ldr	r3, [sp, #12]
 801872a:	1d19      	adds	r1, r3, #4
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	9103      	str	r1, [sp, #12]
 8018730:	2b00      	cmp	r3, #0
 8018732:	bfbb      	ittet	lt
 8018734:	425b      	neglt	r3, r3
 8018736:	f042 0202 	orrlt.w	r2, r2, #2
 801873a:	9307      	strge	r3, [sp, #28]
 801873c:	9307      	strlt	r3, [sp, #28]
 801873e:	bfb8      	it	lt
 8018740:	9204      	strlt	r2, [sp, #16]
 8018742:	7823      	ldrb	r3, [r4, #0]
 8018744:	2b2e      	cmp	r3, #46	@ 0x2e
 8018746:	d10a      	bne.n	801875e <_vfiprintf_r+0x156>
 8018748:	7863      	ldrb	r3, [r4, #1]
 801874a:	2b2a      	cmp	r3, #42	@ 0x2a
 801874c:	d132      	bne.n	80187b4 <_vfiprintf_r+0x1ac>
 801874e:	9b03      	ldr	r3, [sp, #12]
 8018750:	1d1a      	adds	r2, r3, #4
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	9203      	str	r2, [sp, #12]
 8018756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801875a:	3402      	adds	r4, #2
 801875c:	9305      	str	r3, [sp, #20]
 801875e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018834 <_vfiprintf_r+0x22c>
 8018762:	7821      	ldrb	r1, [r4, #0]
 8018764:	2203      	movs	r2, #3
 8018766:	4650      	mov	r0, sl
 8018768:	f7e7 fdd2 	bl	8000310 <memchr>
 801876c:	b138      	cbz	r0, 801877e <_vfiprintf_r+0x176>
 801876e:	9b04      	ldr	r3, [sp, #16]
 8018770:	eba0 000a 	sub.w	r0, r0, sl
 8018774:	2240      	movs	r2, #64	@ 0x40
 8018776:	4082      	lsls	r2, r0
 8018778:	4313      	orrs	r3, r2
 801877a:	3401      	adds	r4, #1
 801877c:	9304      	str	r3, [sp, #16]
 801877e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018782:	4829      	ldr	r0, [pc, #164]	@ (8018828 <_vfiprintf_r+0x220>)
 8018784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018788:	2206      	movs	r2, #6
 801878a:	f7e7 fdc1 	bl	8000310 <memchr>
 801878e:	2800      	cmp	r0, #0
 8018790:	d03f      	beq.n	8018812 <_vfiprintf_r+0x20a>
 8018792:	4b26      	ldr	r3, [pc, #152]	@ (801882c <_vfiprintf_r+0x224>)
 8018794:	bb1b      	cbnz	r3, 80187de <_vfiprintf_r+0x1d6>
 8018796:	9b03      	ldr	r3, [sp, #12]
 8018798:	3307      	adds	r3, #7
 801879a:	f023 0307 	bic.w	r3, r3, #7
 801879e:	3308      	adds	r3, #8
 80187a0:	9303      	str	r3, [sp, #12]
 80187a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187a4:	443b      	add	r3, r7
 80187a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80187a8:	e76a      	b.n	8018680 <_vfiprintf_r+0x78>
 80187aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80187ae:	460c      	mov	r4, r1
 80187b0:	2001      	movs	r0, #1
 80187b2:	e7a8      	b.n	8018706 <_vfiprintf_r+0xfe>
 80187b4:	2300      	movs	r3, #0
 80187b6:	3401      	adds	r4, #1
 80187b8:	9305      	str	r3, [sp, #20]
 80187ba:	4619      	mov	r1, r3
 80187bc:	f04f 0c0a 	mov.w	ip, #10
 80187c0:	4620      	mov	r0, r4
 80187c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187c6:	3a30      	subs	r2, #48	@ 0x30
 80187c8:	2a09      	cmp	r2, #9
 80187ca:	d903      	bls.n	80187d4 <_vfiprintf_r+0x1cc>
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d0c6      	beq.n	801875e <_vfiprintf_r+0x156>
 80187d0:	9105      	str	r1, [sp, #20]
 80187d2:	e7c4      	b.n	801875e <_vfiprintf_r+0x156>
 80187d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80187d8:	4604      	mov	r4, r0
 80187da:	2301      	movs	r3, #1
 80187dc:	e7f0      	b.n	80187c0 <_vfiprintf_r+0x1b8>
 80187de:	ab03      	add	r3, sp, #12
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	462a      	mov	r2, r5
 80187e4:	4b12      	ldr	r3, [pc, #72]	@ (8018830 <_vfiprintf_r+0x228>)
 80187e6:	a904      	add	r1, sp, #16
 80187e8:	4630      	mov	r0, r6
 80187ea:	f3af 8000 	nop.w
 80187ee:	4607      	mov	r7, r0
 80187f0:	1c78      	adds	r0, r7, #1
 80187f2:	d1d6      	bne.n	80187a2 <_vfiprintf_r+0x19a>
 80187f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187f6:	07d9      	lsls	r1, r3, #31
 80187f8:	d405      	bmi.n	8018806 <_vfiprintf_r+0x1fe>
 80187fa:	89ab      	ldrh	r3, [r5, #12]
 80187fc:	059a      	lsls	r2, r3, #22
 80187fe:	d402      	bmi.n	8018806 <_vfiprintf_r+0x1fe>
 8018800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018802:	f7ff fa7f 	bl	8017d04 <__retarget_lock_release_recursive>
 8018806:	89ab      	ldrh	r3, [r5, #12]
 8018808:	065b      	lsls	r3, r3, #25
 801880a:	f53f af1f 	bmi.w	801864c <_vfiprintf_r+0x44>
 801880e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018810:	e71e      	b.n	8018650 <_vfiprintf_r+0x48>
 8018812:	ab03      	add	r3, sp, #12
 8018814:	9300      	str	r3, [sp, #0]
 8018816:	462a      	mov	r2, r5
 8018818:	4b05      	ldr	r3, [pc, #20]	@ (8018830 <_vfiprintf_r+0x228>)
 801881a:	a904      	add	r1, sp, #16
 801881c:	4630      	mov	r0, r6
 801881e:	f7ff fccb 	bl	80181b8 <_printf_i>
 8018822:	e7e4      	b.n	80187ee <_vfiprintf_r+0x1e6>
 8018824:	080196a0 	.word	0x080196a0
 8018828:	080196aa 	.word	0x080196aa
 801882c:	00000000 	.word	0x00000000
 8018830:	080185e5 	.word	0x080185e5
 8018834:	080196a6 	.word	0x080196a6

08018838 <__swbuf_r>:
 8018838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801883a:	460e      	mov	r6, r1
 801883c:	4614      	mov	r4, r2
 801883e:	4605      	mov	r5, r0
 8018840:	b118      	cbz	r0, 801884a <__swbuf_r+0x12>
 8018842:	6a03      	ldr	r3, [r0, #32]
 8018844:	b90b      	cbnz	r3, 801884a <__swbuf_r+0x12>
 8018846:	f7ff f861 	bl	801790c <__sinit>
 801884a:	69a3      	ldr	r3, [r4, #24]
 801884c:	60a3      	str	r3, [r4, #8]
 801884e:	89a3      	ldrh	r3, [r4, #12]
 8018850:	071a      	lsls	r2, r3, #28
 8018852:	d501      	bpl.n	8018858 <__swbuf_r+0x20>
 8018854:	6923      	ldr	r3, [r4, #16]
 8018856:	b943      	cbnz	r3, 801886a <__swbuf_r+0x32>
 8018858:	4621      	mov	r1, r4
 801885a:	4628      	mov	r0, r5
 801885c:	f000 f82a 	bl	80188b4 <__swsetup_r>
 8018860:	b118      	cbz	r0, 801886a <__swbuf_r+0x32>
 8018862:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018866:	4638      	mov	r0, r7
 8018868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801886a:	6823      	ldr	r3, [r4, #0]
 801886c:	6922      	ldr	r2, [r4, #16]
 801886e:	1a98      	subs	r0, r3, r2
 8018870:	6963      	ldr	r3, [r4, #20]
 8018872:	b2f6      	uxtb	r6, r6
 8018874:	4283      	cmp	r3, r0
 8018876:	4637      	mov	r7, r6
 8018878:	dc05      	bgt.n	8018886 <__swbuf_r+0x4e>
 801887a:	4621      	mov	r1, r4
 801887c:	4628      	mov	r0, r5
 801887e:	f7ff fe3f 	bl	8018500 <_fflush_r>
 8018882:	2800      	cmp	r0, #0
 8018884:	d1ed      	bne.n	8018862 <__swbuf_r+0x2a>
 8018886:	68a3      	ldr	r3, [r4, #8]
 8018888:	3b01      	subs	r3, #1
 801888a:	60a3      	str	r3, [r4, #8]
 801888c:	6823      	ldr	r3, [r4, #0]
 801888e:	1c5a      	adds	r2, r3, #1
 8018890:	6022      	str	r2, [r4, #0]
 8018892:	701e      	strb	r6, [r3, #0]
 8018894:	6962      	ldr	r2, [r4, #20]
 8018896:	1c43      	adds	r3, r0, #1
 8018898:	429a      	cmp	r2, r3
 801889a:	d004      	beq.n	80188a6 <__swbuf_r+0x6e>
 801889c:	89a3      	ldrh	r3, [r4, #12]
 801889e:	07db      	lsls	r3, r3, #31
 80188a0:	d5e1      	bpl.n	8018866 <__swbuf_r+0x2e>
 80188a2:	2e0a      	cmp	r6, #10
 80188a4:	d1df      	bne.n	8018866 <__swbuf_r+0x2e>
 80188a6:	4621      	mov	r1, r4
 80188a8:	4628      	mov	r0, r5
 80188aa:	f7ff fe29 	bl	8018500 <_fflush_r>
 80188ae:	2800      	cmp	r0, #0
 80188b0:	d0d9      	beq.n	8018866 <__swbuf_r+0x2e>
 80188b2:	e7d6      	b.n	8018862 <__swbuf_r+0x2a>

080188b4 <__swsetup_r>:
 80188b4:	b538      	push	{r3, r4, r5, lr}
 80188b6:	4b29      	ldr	r3, [pc, #164]	@ (801895c <__swsetup_r+0xa8>)
 80188b8:	4605      	mov	r5, r0
 80188ba:	6818      	ldr	r0, [r3, #0]
 80188bc:	460c      	mov	r4, r1
 80188be:	b118      	cbz	r0, 80188c8 <__swsetup_r+0x14>
 80188c0:	6a03      	ldr	r3, [r0, #32]
 80188c2:	b90b      	cbnz	r3, 80188c8 <__swsetup_r+0x14>
 80188c4:	f7ff f822 	bl	801790c <__sinit>
 80188c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188cc:	0719      	lsls	r1, r3, #28
 80188ce:	d422      	bmi.n	8018916 <__swsetup_r+0x62>
 80188d0:	06da      	lsls	r2, r3, #27
 80188d2:	d407      	bmi.n	80188e4 <__swsetup_r+0x30>
 80188d4:	2209      	movs	r2, #9
 80188d6:	602a      	str	r2, [r5, #0]
 80188d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188dc:	81a3      	strh	r3, [r4, #12]
 80188de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188e2:	e033      	b.n	801894c <__swsetup_r+0x98>
 80188e4:	0758      	lsls	r0, r3, #29
 80188e6:	d512      	bpl.n	801890e <__swsetup_r+0x5a>
 80188e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188ea:	b141      	cbz	r1, 80188fe <__swsetup_r+0x4a>
 80188ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80188f0:	4299      	cmp	r1, r3
 80188f2:	d002      	beq.n	80188fa <__swsetup_r+0x46>
 80188f4:	4628      	mov	r0, r5
 80188f6:	f7ff fa47 	bl	8017d88 <_free_r>
 80188fa:	2300      	movs	r3, #0
 80188fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80188fe:	89a3      	ldrh	r3, [r4, #12]
 8018900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018904:	81a3      	strh	r3, [r4, #12]
 8018906:	2300      	movs	r3, #0
 8018908:	6063      	str	r3, [r4, #4]
 801890a:	6923      	ldr	r3, [r4, #16]
 801890c:	6023      	str	r3, [r4, #0]
 801890e:	89a3      	ldrh	r3, [r4, #12]
 8018910:	f043 0308 	orr.w	r3, r3, #8
 8018914:	81a3      	strh	r3, [r4, #12]
 8018916:	6923      	ldr	r3, [r4, #16]
 8018918:	b94b      	cbnz	r3, 801892e <__swsetup_r+0x7a>
 801891a:	89a3      	ldrh	r3, [r4, #12]
 801891c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018924:	d003      	beq.n	801892e <__swsetup_r+0x7a>
 8018926:	4621      	mov	r1, r4
 8018928:	4628      	mov	r0, r5
 801892a:	f000 f883 	bl	8018a34 <__smakebuf_r>
 801892e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018932:	f013 0201 	ands.w	r2, r3, #1
 8018936:	d00a      	beq.n	801894e <__swsetup_r+0x9a>
 8018938:	2200      	movs	r2, #0
 801893a:	60a2      	str	r2, [r4, #8]
 801893c:	6962      	ldr	r2, [r4, #20]
 801893e:	4252      	negs	r2, r2
 8018940:	61a2      	str	r2, [r4, #24]
 8018942:	6922      	ldr	r2, [r4, #16]
 8018944:	b942      	cbnz	r2, 8018958 <__swsetup_r+0xa4>
 8018946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801894a:	d1c5      	bne.n	80188d8 <__swsetup_r+0x24>
 801894c:	bd38      	pop	{r3, r4, r5, pc}
 801894e:	0799      	lsls	r1, r3, #30
 8018950:	bf58      	it	pl
 8018952:	6962      	ldrpl	r2, [r4, #20]
 8018954:	60a2      	str	r2, [r4, #8]
 8018956:	e7f4      	b.n	8018942 <__swsetup_r+0x8e>
 8018958:	2000      	movs	r0, #0
 801895a:	e7f7      	b.n	801894c <__swsetup_r+0x98>
 801895c:	240000c4 	.word	0x240000c4

08018960 <_raise_r>:
 8018960:	291f      	cmp	r1, #31
 8018962:	b538      	push	{r3, r4, r5, lr}
 8018964:	4605      	mov	r5, r0
 8018966:	460c      	mov	r4, r1
 8018968:	d904      	bls.n	8018974 <_raise_r+0x14>
 801896a:	2316      	movs	r3, #22
 801896c:	6003      	str	r3, [r0, #0]
 801896e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018972:	bd38      	pop	{r3, r4, r5, pc}
 8018974:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018976:	b112      	cbz	r2, 801897e <_raise_r+0x1e>
 8018978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801897c:	b94b      	cbnz	r3, 8018992 <_raise_r+0x32>
 801897e:	4628      	mov	r0, r5
 8018980:	f000 f830 	bl	80189e4 <_getpid_r>
 8018984:	4622      	mov	r2, r4
 8018986:	4601      	mov	r1, r0
 8018988:	4628      	mov	r0, r5
 801898a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801898e:	f000 b817 	b.w	80189c0 <_kill_r>
 8018992:	2b01      	cmp	r3, #1
 8018994:	d00a      	beq.n	80189ac <_raise_r+0x4c>
 8018996:	1c59      	adds	r1, r3, #1
 8018998:	d103      	bne.n	80189a2 <_raise_r+0x42>
 801899a:	2316      	movs	r3, #22
 801899c:	6003      	str	r3, [r0, #0]
 801899e:	2001      	movs	r0, #1
 80189a0:	e7e7      	b.n	8018972 <_raise_r+0x12>
 80189a2:	2100      	movs	r1, #0
 80189a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80189a8:	4620      	mov	r0, r4
 80189aa:	4798      	blx	r3
 80189ac:	2000      	movs	r0, #0
 80189ae:	e7e0      	b.n	8018972 <_raise_r+0x12>

080189b0 <raise>:
 80189b0:	4b02      	ldr	r3, [pc, #8]	@ (80189bc <raise+0xc>)
 80189b2:	4601      	mov	r1, r0
 80189b4:	6818      	ldr	r0, [r3, #0]
 80189b6:	f7ff bfd3 	b.w	8018960 <_raise_r>
 80189ba:	bf00      	nop
 80189bc:	240000c4 	.word	0x240000c4

080189c0 <_kill_r>:
 80189c0:	b538      	push	{r3, r4, r5, lr}
 80189c2:	4d07      	ldr	r5, [pc, #28]	@ (80189e0 <_kill_r+0x20>)
 80189c4:	2300      	movs	r3, #0
 80189c6:	4604      	mov	r4, r0
 80189c8:	4608      	mov	r0, r1
 80189ca:	4611      	mov	r1, r2
 80189cc:	602b      	str	r3, [r5, #0]
 80189ce:	f7e8 ffe9 	bl	80019a4 <_kill>
 80189d2:	1c43      	adds	r3, r0, #1
 80189d4:	d102      	bne.n	80189dc <_kill_r+0x1c>
 80189d6:	682b      	ldr	r3, [r5, #0]
 80189d8:	b103      	cbz	r3, 80189dc <_kill_r+0x1c>
 80189da:	6023      	str	r3, [r4, #0]
 80189dc:	bd38      	pop	{r3, r4, r5, pc}
 80189de:	bf00      	nop
 80189e0:	24068684 	.word	0x24068684

080189e4 <_getpid_r>:
 80189e4:	f7e8 bfd6 	b.w	8001994 <_getpid>

080189e8 <__swhatbuf_r>:
 80189e8:	b570      	push	{r4, r5, r6, lr}
 80189ea:	460c      	mov	r4, r1
 80189ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189f0:	2900      	cmp	r1, #0
 80189f2:	b096      	sub	sp, #88	@ 0x58
 80189f4:	4615      	mov	r5, r2
 80189f6:	461e      	mov	r6, r3
 80189f8:	da0d      	bge.n	8018a16 <__swhatbuf_r+0x2e>
 80189fa:	89a3      	ldrh	r3, [r4, #12]
 80189fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018a00:	f04f 0100 	mov.w	r1, #0
 8018a04:	bf14      	ite	ne
 8018a06:	2340      	movne	r3, #64	@ 0x40
 8018a08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	6031      	str	r1, [r6, #0]
 8018a10:	602b      	str	r3, [r5, #0]
 8018a12:	b016      	add	sp, #88	@ 0x58
 8018a14:	bd70      	pop	{r4, r5, r6, pc}
 8018a16:	466a      	mov	r2, sp
 8018a18:	f000 f848 	bl	8018aac <_fstat_r>
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	dbec      	blt.n	80189fa <__swhatbuf_r+0x12>
 8018a20:	9901      	ldr	r1, [sp, #4]
 8018a22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018a26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018a2a:	4259      	negs	r1, r3
 8018a2c:	4159      	adcs	r1, r3
 8018a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018a32:	e7eb      	b.n	8018a0c <__swhatbuf_r+0x24>

08018a34 <__smakebuf_r>:
 8018a34:	898b      	ldrh	r3, [r1, #12]
 8018a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a38:	079d      	lsls	r5, r3, #30
 8018a3a:	4606      	mov	r6, r0
 8018a3c:	460c      	mov	r4, r1
 8018a3e:	d507      	bpl.n	8018a50 <__smakebuf_r+0x1c>
 8018a40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018a44:	6023      	str	r3, [r4, #0]
 8018a46:	6123      	str	r3, [r4, #16]
 8018a48:	2301      	movs	r3, #1
 8018a4a:	6163      	str	r3, [r4, #20]
 8018a4c:	b003      	add	sp, #12
 8018a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a50:	ab01      	add	r3, sp, #4
 8018a52:	466a      	mov	r2, sp
 8018a54:	f7ff ffc8 	bl	80189e8 <__swhatbuf_r>
 8018a58:	9f00      	ldr	r7, [sp, #0]
 8018a5a:	4605      	mov	r5, r0
 8018a5c:	4639      	mov	r1, r7
 8018a5e:	4630      	mov	r0, r6
 8018a60:	f7fe fd22 	bl	80174a8 <_malloc_r>
 8018a64:	b948      	cbnz	r0, 8018a7a <__smakebuf_r+0x46>
 8018a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a6a:	059a      	lsls	r2, r3, #22
 8018a6c:	d4ee      	bmi.n	8018a4c <__smakebuf_r+0x18>
 8018a6e:	f023 0303 	bic.w	r3, r3, #3
 8018a72:	f043 0302 	orr.w	r3, r3, #2
 8018a76:	81a3      	strh	r3, [r4, #12]
 8018a78:	e7e2      	b.n	8018a40 <__smakebuf_r+0xc>
 8018a7a:	89a3      	ldrh	r3, [r4, #12]
 8018a7c:	6020      	str	r0, [r4, #0]
 8018a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a82:	81a3      	strh	r3, [r4, #12]
 8018a84:	9b01      	ldr	r3, [sp, #4]
 8018a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018a8a:	b15b      	cbz	r3, 8018aa4 <__smakebuf_r+0x70>
 8018a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a90:	4630      	mov	r0, r6
 8018a92:	f000 f81d 	bl	8018ad0 <_isatty_r>
 8018a96:	b128      	cbz	r0, 8018aa4 <__smakebuf_r+0x70>
 8018a98:	89a3      	ldrh	r3, [r4, #12]
 8018a9a:	f023 0303 	bic.w	r3, r3, #3
 8018a9e:	f043 0301 	orr.w	r3, r3, #1
 8018aa2:	81a3      	strh	r3, [r4, #12]
 8018aa4:	89a3      	ldrh	r3, [r4, #12]
 8018aa6:	431d      	orrs	r5, r3
 8018aa8:	81a5      	strh	r5, [r4, #12]
 8018aaa:	e7cf      	b.n	8018a4c <__smakebuf_r+0x18>

08018aac <_fstat_r>:
 8018aac:	b538      	push	{r3, r4, r5, lr}
 8018aae:	4d07      	ldr	r5, [pc, #28]	@ (8018acc <_fstat_r+0x20>)
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	4608      	mov	r0, r1
 8018ab6:	4611      	mov	r1, r2
 8018ab8:	602b      	str	r3, [r5, #0]
 8018aba:	f7e8 ffd3 	bl	8001a64 <_fstat>
 8018abe:	1c43      	adds	r3, r0, #1
 8018ac0:	d102      	bne.n	8018ac8 <_fstat_r+0x1c>
 8018ac2:	682b      	ldr	r3, [r5, #0]
 8018ac4:	b103      	cbz	r3, 8018ac8 <_fstat_r+0x1c>
 8018ac6:	6023      	str	r3, [r4, #0]
 8018ac8:	bd38      	pop	{r3, r4, r5, pc}
 8018aca:	bf00      	nop
 8018acc:	24068684 	.word	0x24068684

08018ad0 <_isatty_r>:
 8018ad0:	b538      	push	{r3, r4, r5, lr}
 8018ad2:	4d06      	ldr	r5, [pc, #24]	@ (8018aec <_isatty_r+0x1c>)
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	4604      	mov	r4, r0
 8018ad8:	4608      	mov	r0, r1
 8018ada:	602b      	str	r3, [r5, #0]
 8018adc:	f7e8 ffd2 	bl	8001a84 <_isatty>
 8018ae0:	1c43      	adds	r3, r0, #1
 8018ae2:	d102      	bne.n	8018aea <_isatty_r+0x1a>
 8018ae4:	682b      	ldr	r3, [r5, #0]
 8018ae6:	b103      	cbz	r3, 8018aea <_isatty_r+0x1a>
 8018ae8:	6023      	str	r3, [r4, #0]
 8018aea:	bd38      	pop	{r3, r4, r5, pc}
 8018aec:	24068684 	.word	0x24068684

08018af0 <_init>:
 8018af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af2:	bf00      	nop
 8018af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018af6:	bc08      	pop	{r3}
 8018af8:	469e      	mov	lr, r3
 8018afa:	4770      	bx	lr

08018afc <_fini>:
 8018afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018afe:	bf00      	nop
 8018b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b02:	bc08      	pop	{r3}
 8018b04:	469e      	mov	lr, r3
 8018b06:	4770      	bx	lr
