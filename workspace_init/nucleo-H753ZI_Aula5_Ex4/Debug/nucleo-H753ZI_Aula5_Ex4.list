
nucleo-H753ZI_Aula5_Ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a500  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800a7a0  0800a7a0  0000b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8c0  0800a8c0  0000b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a8cc  0800a8cc  0000b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a8d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a934  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a994  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005208  24000124  0800a9f4  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400532c  0800a9f4  0000c32c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a8fc  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538c  00000000  00000000  00036a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  0003bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000178c  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb1d  00000000  00000000  0003f3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002666b  00000000  00000000  0007bef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001779b0  00000000  00000000  000a255c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000842c  00000000  00000000  00219f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0022237c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a788 	.word	0x0800a788

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a788 	.word	0x0800a788

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f001 f8fe 	bl	8001820 <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fcad 	bl	8000f88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f009 ffc0 	bl	800a5b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fc85 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fc75 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fc64 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fc53 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <MX_FREERTOS_Init+0x34>)
 800080a:	2100      	movs	r1, #0
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_FREERTOS_Init+0x38>)
 800080e:	f006 fdbb 	bl	8007388 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <MX_FREERTOS_Init+0x3c>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <MX_FREERTOS_Init+0x40>)
 800081a:	2100      	movs	r1, #0
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <MX_FREERTOS_Init+0x44>)
 800081e:	f006 fdb3 	bl	8007388 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a09      	ldr	r2, [pc, #36]	@ (800084c <MX_FREERTOS_Init+0x48>)
 8000826:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of EventFlagPrintf */
  EventFlagPrintfHandle = osEventFlagsNew(&EventFlagPrintf_attributes);
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_FREERTOS_Init+0x4c>)
 800082a:	f006 fe5a 	bl	80074e2 <osEventFlagsNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <MX_FREERTOS_Init+0x50>)
 8000832:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	0800a830 	.word	0x0800a830
 800083c:	08000859 	.word	0x08000859
 8000840:	24000230 	.word	0x24000230
 8000844:	0800a854 	.word	0x0800a854
 8000848:	08000885 	.word	0x08000885
 800084c:	24000234 	.word	0x24000234
 8000850:	0800a878 	.word	0x0800a878
 8000854:	24000238 	.word	0x24000238

08000858 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  osDelay(1); // Blocking Task1 for force Task2 to run first
 8000860:	2001      	movs	r0, #1
 8000862:	f006 fe23 	bl	80074ac <osDelay>
  for(;;)
  {
	osEventFlagsSet(EventFlagPrintfHandle, 0x01);
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <StartTask1+0x28>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f006 fe77 	bl	8007560 <osEventFlagsSet>
	osDelay(500);
 8000872:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000876:	f006 fe19 	bl	80074ac <osDelay>
	osEventFlagsSet(EventFlagPrintfHandle, 0x01);
 800087a:	bf00      	nop
 800087c:	e7f3      	b.n	8000866 <StartTask1+0xe>
 800087e:	bf00      	nop
 8000880:	24000238 	.word	0x24000238

08000884 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  unsigned char ucCount = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	osEventFlagsWait(EventFlagPrintfHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <StartTask2+0x38>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	f006 fea2 	bl	80075e4 <osEventFlagsWait>
	printf_("Printf escrito pela Task2 liberado pela Event Flag setada pela Task1. #%d \n\r",ucCount); // Running sync printf
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <StartTask2+0x3c>)
 80008a6:	f000 fab3 	bl	8000e10 <printf_>
	ucCount++;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b0:	2102      	movs	r1, #2
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <StartTask2+0x40>)
 80008b4:	f001 fdb1 	bl	800241a <HAL_GPIO_TogglePin>
	osEventFlagsWait(EventFlagPrintfHandle, 0x01, osFlagsWaitAll, osWaitForever);
 80008b8:	bf00      	nop
 80008ba:	e7e9      	b.n	8000890 <StartTask2+0xc>
 80008bc:	24000238 	.word	0x24000238
 80008c0:	0800a7c0 	.word	0x0800a7c0
 80008c4:	58021000 	.word	0x58021000

080008c8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b62      	ldr	r3, [pc, #392]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a60      	ldr	r2, [pc, #384]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a59      	ldr	r2, [pc, #356]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b56      	ldr	r3, [pc, #344]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b53      	ldr	r3, [pc, #332]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a51      	ldr	r2, [pc, #324]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b4b      	ldr	r3, [pc, #300]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a42      	ldr	r2, [pc, #264]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b40      	ldr	r3, [pc, #256]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b3c      	ldr	r3, [pc, #240]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b38      	ldr	r3, [pc, #224]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a33      	ldr	r2, [pc, #204]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <MX_GPIO_Init+0x1a0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009b6:	482d      	ldr	r0, [pc, #180]	@ (8000a6c <MX_GPIO_Init+0x1a4>)
 80009b8:	f001 fd16 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c2:	482b      	ldr	r0, [pc, #172]	@ (8000a70 <MX_GPIO_Init+0x1a8>)
 80009c4:	f001 fd10 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2102      	movs	r1, #2
 80009cc:	4829      	ldr	r0, [pc, #164]	@ (8000a74 <MX_GPIO_Init+0x1ac>)
 80009ce:	f001 fd0b 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4824      	ldr	r0, [pc, #144]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80009e8:	f001 fb4e 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009ec:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4819      	ldr	r0, [pc, #100]	@ (8000a6c <MX_GPIO_Init+0x1a4>)
 8000a06:	f001 fb3f 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <MX_GPIO_Init+0x1a8>)
 8000a24:	f001 fb30 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	@ (8000a7c <MX_GPIO_Init+0x1b4>)
 8000a3e:	f001 fb23 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_GPIO_Init+0x1ac>)
 8000a5a:	f001 fb15 	bl	8002088 <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020400 	.word	0x58020400
 8000a70:	58020c00 	.word	0x58020c00
 8000a74:	58021000 	.word	0x58021000
 8000a78:	58020800 	.word	0x58020800
 8000a7c:	58021800 	.word	0x58021800

08000a80 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	if (str) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00a      	beq.n	8000aa6 <printchar_+0x26>
		**str = (char)c;
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000aa4:	e005      	b.n	8000ab2 <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <printchar_+0x3c>)
 8000aae:	f004 ffbb 	bl	8005a28 <HAL_UART_Transmit>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000288 	.word	0x24000288

08000ac0 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd17      	ble.n	8000b0c <prints_+0x4c>
		register int len = 0;
 8000adc:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000ade:	68be      	ldr	r6, [r7, #8]
 8000ae0:	e001      	b.n	8000ae6 <prints_+0x26>
 8000ae2:	3501      	adds	r5, #1
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	7833      	ldrb	r3, [r6, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1fa      	bne.n	8000ae2 <prints_+0x22>
		if (len >= width) width = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429d      	cmp	r5, r3
 8000af0:	db02      	blt.n	8000af8 <prints_+0x38>
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	e002      	b.n	8000afe <prints_+0x3e>
		else width -= len;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1b5b      	subs	r3, r3, r5
 8000afc:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <prints_+0x4c>
 8000b08:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d116      	bne.n	8000b44 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000b16:	e007      	b.n	8000b28 <prints_+0x68>
			printchar_(out, padchar);
 8000b18:	4641      	mov	r1, r8
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ffb0 	bl	8000a80 <printchar_>
			++pc;
 8000b20:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dcf4      	bgt.n	8000b18 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000b2e:	e009      	b.n	8000b44 <prints_+0x84>
		printchar_(out, *string);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff ffa2 	bl	8000a80 <printchar_>
		++pc;
 8000b3c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f1      	bne.n	8000b30 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000b4c:	e007      	b.n	8000b5e <prints_+0x9e>
		printchar_(out, padchar);
 8000b4e:	4641      	mov	r1, r8
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff95 	bl	8000a80 <printchar_>
		++pc;
 8000b56:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dcf4      	bgt.n	8000b4e <prints_+0x8e>
	}

	return pc;
 8000b64:	4623      	mov	r3, r4
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b70 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b74:	b089      	sub	sp, #36	@ 0x24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000b80:	f04f 0900 	mov.w	r9, #0
 8000b84:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000b86:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10c      	bne.n	8000ba8 <printi_+0x38>
		print_buf[0] = '0';
 8000b8e:	2330      	movs	r3, #48	@ 0x30
 8000b90:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000b96:	f107 0114 	add.w	r1, r7, #20
 8000b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <prints_>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	e04a      	b.n	8000c3e <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00a      	beq.n	8000bc4 <printi_+0x54>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0a      	cmp	r3, #10
 8000bb2:	d107      	bne.n	8000bc4 <printi_+0x54>
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da04      	bge.n	8000bc4 <printi_+0x54>
		neg = 1;
 8000bba:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000bc4:	f107 0414 	add.w	r4, r7, #20
 8000bc8:	340b      	adds	r4, #11
	*s = '\0';
 8000bca:	2300      	movs	r3, #0
 8000bcc:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000bce:	e015      	b.n	8000bfc <printi_+0x8c>
		t = (unsigned int)u % b;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	fbb5 f2f3 	udiv	r2, r5, r3
 8000bd6:	fb02 f303 	mul.w	r3, r2, r3
 8000bda:	1aeb      	subs	r3, r5, r3
 8000bdc:	4698      	mov	r8, r3
		if( t >= 10 )
 8000bde:	f1b8 0f09 	cmp.w	r8, #9
 8000be2:	dd02      	ble.n	8000bea <printi_+0x7a>
			t += letbase - '0' - 10;
 8000be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000be6:	3b3a      	subs	r3, #58	@ 0x3a
 8000be8:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000bea:	fa5f f388 	uxtb.w	r3, r8
 8000bee:	3c01      	subs	r4, #1
 8000bf0:	3330      	adds	r3, #48	@ 0x30
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000bfc:	2d00      	cmp	r5, #0
 8000bfe:	d1e7      	bne.n	8000bd0 <printi_+0x60>
	}

	if (neg) {
 8000c00:	f1b9 0f00 	cmp.w	r9, #0
 8000c04:	d013      	beq.n	8000c2e <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00d      	beq.n	8000c28 <printi_+0xb8>
 8000c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d008      	beq.n	8000c28 <printi_+0xb8>
			printchar_(out, '-');
 8000c16:	212d      	movs	r1, #45	@ 0x2d
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ff31 	bl	8000a80 <printchar_>
			++pc;
 8000c1e:	3601      	adds	r6, #1
			--width;
 8000c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c22:	3b01      	subs	r3, #1
 8000c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c26:	e002      	b.n	8000c2e <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000c28:	3c01      	subs	r4, #1
 8000c2a:	232d      	movs	r3, #45	@ 0x2d
 8000c2c:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c32:	4621      	mov	r1, r4
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff ff43 	bl	8000ac0 <prints_>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4433      	add	r3, r6
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	@ 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c48 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	b08a      	sub	sp, #40	@ 0x28
 8000c4e:	af04      	add	r7, sp, #16
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000c56:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000c58:	e0c4      	b.n	8000de4 <print_+0x19c>
		if (*format == '%') {
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b25      	cmp	r3, #37	@ 0x25
 8000c60:	f040 80b3 	bne.w	8000dca <print_+0x182>
			++format;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80bc 	beq.w	8000df0 <print_+0x1a8>
			if (*format == '%') goto out;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b25      	cmp	r3, #37	@ 0x25
 8000c7e:	f000 80a6 	beq.w	8000dce <print_+0x186>
			if (*format == '-') {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c88:	d109      	bne.n	8000c9e <print_+0x56>
				++format;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000c90:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000c92:	e004      	b.n	8000c9e <print_+0x56>
				++format;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000c9a:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b30      	cmp	r3, #48	@ 0x30
 8000ca4:	d0f6      	beq.n	8000c94 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000ca6:	e00b      	b.n	8000cc0 <print_+0x78>
				width *= 10;
 8000ca8:	462b      	mov	r3, r5
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	442b      	add	r3, r5
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	461d      	mov	r5, r3
				width += *format - '0';
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3b30      	subs	r3, #48	@ 0x30
 8000cb8:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cc6:	d903      	bls.n	8000cd0 <print_+0x88>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b39      	cmp	r3, #57	@ 0x39
 8000cce:	d9eb      	bls.n	8000ca8 <print_+0x60>
			}
			if( *format == 's' ) {
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b73      	cmp	r3, #115	@ 0x73
 8000cd6:	d112      	bne.n	8000cfe <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1d1a      	adds	r2, r3, #4
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000ce2:	f1b8 0f00 	cmp.w	r8, #0
 8000ce6:	d001      	beq.n	8000cec <print_+0xa4>
 8000ce8:	4641      	mov	r1, r8
 8000cea:	e000      	b.n	8000cee <print_+0xa6>
 8000cec:	4947      	ldr	r1, [pc, #284]	@ (8000e0c <print_+0x1c4>)
 8000cee:	4633      	mov	r3, r6
 8000cf0:	462a      	mov	r2, r5
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fee4 	bl	8000ac0 <prints_>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	441c      	add	r4, r3
				continue;
 8000cfc:	e06f      	b.n	8000dde <print_+0x196>
			}
			if( *format == 'd' ) {
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b64      	cmp	r3, #100	@ 0x64
 8000d04:	d10f      	bne.n	8000d26 <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1d1a      	adds	r2, r3, #4
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	6819      	ldr	r1, [r3, #0]
 8000d0e:	2361      	movs	r3, #97	@ 0x61
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	9601      	str	r6, [sp, #4]
 8000d14:	9500      	str	r5, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	220a      	movs	r2, #10
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff ff28 	bl	8000b70 <printi_>
 8000d20:	4603      	mov	r3, r0
 8000d22:	441c      	add	r4, r3
				continue;
 8000d24:	e05b      	b.n	8000dde <print_+0x196>
			}
			if( *format == 'x' ) {
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b78      	cmp	r3, #120	@ 0x78
 8000d2c:	d10f      	bne.n	8000d4e <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	1d1a      	adds	r2, r3, #4
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	2361      	movs	r3, #97	@ 0x61
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	9601      	str	r6, [sp, #4]
 8000d3c:	9500      	str	r5, [sp, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2210      	movs	r2, #16
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f7ff ff14 	bl	8000b70 <printi_>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	441c      	add	r4, r3
				continue;
 8000d4c:	e047      	b.n	8000dde <print_+0x196>
			}
			if( *format == 'X' ) {
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b58      	cmp	r3, #88	@ 0x58
 8000d54:	d10f      	bne.n	8000d76 <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	1d1a      	adds	r2, r3, #4
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	2341      	movs	r3, #65	@ 0x41
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	9601      	str	r6, [sp, #4]
 8000d64:	9500      	str	r5, [sp, #0]
 8000d66:	2300      	movs	r3, #0
 8000d68:	2210      	movs	r2, #16
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff ff00 	bl	8000b70 <printi_>
 8000d70:	4603      	mov	r3, r0
 8000d72:	441c      	add	r4, r3
				continue;
 8000d74:	e033      	b.n	8000dde <print_+0x196>
			}
			if( *format == 'u' ) {
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b75      	cmp	r3, #117	@ 0x75
 8000d7c:	d10f      	bne.n	8000d9e <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1d1a      	adds	r2, r3, #4
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	2361      	movs	r3, #97	@ 0x61
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	9601      	str	r6, [sp, #4]
 8000d8c:	9500      	str	r5, [sp, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	220a      	movs	r2, #10
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff feec 	bl	8000b70 <printi_>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	441c      	add	r4, r3
				continue;
 8000d9c:	e01f      	b.n	8000dde <print_+0x196>
			}
			if( *format == 'c' ) {
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b63      	cmp	r3, #99	@ 0x63
 8000da4:	d11b      	bne.n	8000dde <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000db2:	2300      	movs	r3, #0
 8000db4:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000db6:	f107 0114 	add.w	r1, r7, #20
 8000dba:	4633      	mov	r3, r6
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff fe7e 	bl	8000ac0 <prints_>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	441c      	add	r4, r3
				continue;
 8000dc8:	e009      	b.n	8000dde <print_+0x196>
			}
		}
		else {
		out:
 8000dca:	bf00      	nop
 8000dcc:	e000      	b.n	8000dd0 <print_+0x188>
			if (*format == '%') goto out;
 8000dce:	bf00      	nop
			printchar_(out, *format);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fe52 	bl	8000a80 <printchar_>
			++pc;
 8000ddc:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f47f af36 	bne.w	8000c5a <print_+0x12>
 8000dee:	e000      	b.n	8000df2 <print_+0x1aa>
			if (*format == '\0') break;
 8000df0:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <print_+0x1b8>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000e00:	4623      	mov	r3, r4
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e0c:	0800a810 	.word	0x0800a810

08000e10 <printf_>:

int printf_(const char *format, ...)
{
 8000e10:	b40f      	push	{r0, r1, r2, r3}
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6939      	ldr	r1, [r7, #16]
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ff10 	bl	8000c48 <print_>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e34:	b004      	add	sp, #16
 8000e36:	4770      	bx	lr

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 fb70 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f810 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f7ff fd40 	bl	80008c8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e48:	f7ff fbc2 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e4c:	f000 f9da 	bl	8001204 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e50:	f000 fa8e 	bl	8001370 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e54:	f006 fa4e 	bl	80072f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e58:	f7ff fcd4 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e5c:	f006 fa6e 	bl	800733c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <main+0x28>

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	@ 0x70
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6e:	224c      	movs	r2, #76	@ 0x4c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f009 fba0 	bl	800a5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f009 fb9a 	bl	800a5b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f001 fc13 	bl	80026b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <SystemClock_Config+0xf8>)
 8000e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e92:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <SystemClock_Config+0xf8>)
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e9a:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <SystemClock_Config+0xf8>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <SystemClock_Config+0xfc>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eac:	4a2c      	ldr	r2, [pc, #176]	@ (8000f60 <SystemClock_Config+0xfc>)
 8000eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <SystemClock_Config+0xfc>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec0:	bf00      	nop
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <SystemClock_Config+0xfc>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ece:	d1f8      	bne.n	8000ec2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ed4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2340      	movs	r3, #64	@ 0x40
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000eee:	2318      	movs	r3, #24
 8000ef0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000efe:	230c      	movs	r3, #12
 8000f00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fc18 	bl	8002744 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f1a:	f000 f835 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	233f      	movs	r3, #63	@ 0x3f
 8000f20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 f858 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f4e:	f000 f81b 	bl	8000f88 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3770      	adds	r7, #112	@ 0x70
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	58000400 	.word	0x58000400
 8000f60:	58024800 	.word	0x58024800

08000f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f76:	f000 fb0f 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40001000 	.word	0x40001000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <Error_Handler+0x8>

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_MspInit+0x38>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_MspInit+0x38>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_MspInit+0x38>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f06f 0001 	mvn.w	r0, #1
 8000fc0:	f000 fc06 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b090      	sub	sp, #64	@ 0x40
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	d827      	bhi.n	800102e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	2036      	movs	r0, #54	@ 0x36
 8000fe4:	f000 fbf4 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fe8:	2036      	movs	r0, #54	@ 0x36
 8000fea:	f000 fc0b 	bl	8001804 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fee:	4a29      	ldr	r2, [pc, #164]	@ (8001094 <HAL_InitTick+0xc4>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <HAL_InitTick+0xc8>)
 8000ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffa:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <HAL_InitTick+0xc8>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <HAL_InitTick+0xc8>)
 8001006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001012:	f107 0210 	add.w	r2, r7, #16
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fb77 	bl	8003710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <HAL_InitTick+0x6a>
 800102c:	e001      	b.n	8001032 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e02b      	b.n	800108a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001032:	f002 fb41 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8001036:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001038:	e004      	b.n	8001044 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103a:	f002 fb3d 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 800103e:	4603      	mov	r3, r0
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <HAL_InitTick+0xcc>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9b      	lsrs	r3, r3, #18
 800104e:	3b01      	subs	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_InitTick+0xd0>)
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_InitTick+0xd4>)
 8001056:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_InitTick+0xd0>)
 800105a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800105e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001060:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <HAL_InitTick+0xd0>)
 8001062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001064:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_InitTick+0xd0>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_InitTick+0xd0>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001072:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_InitTick+0xd0>)
 8001074:	f004 f9ba 	bl	80053ec <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800107e:	4808      	ldr	r0, [pc, #32]	@ (80010a0 <HAL_InitTick+0xd0>)
 8001080:	f004 fa16 	bl	80054b0 <HAL_TIM_Base_Start_IT>
 8001084:	4603      	mov	r3, r0
 8001086:	e000      	b.n	800108a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3740      	adds	r7, #64	@ 0x40
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	24000008 	.word	0x24000008
 8001098:	58024400 	.word	0x58024400
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	2400023c 	.word	0x2400023c
 80010a4:	40001000 	.word	0x40001000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <TIM6_DAC_IRQHandler+0x10>)
 80010e6:	f004 fa5b 	bl	80055a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400023c 	.word	0x2400023c

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <SystemInit+0xe4>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fe:	4a36      	ldr	r2, [pc, #216]	@ (80011d8 <SystemInit+0xe4>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001108:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <SystemInit+0xe8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	2b06      	cmp	r3, #6
 8001112:	d807      	bhi.n	8001124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <SystemInit+0xe8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 030f 	bic.w	r3, r3, #15
 800111c:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <SystemInit+0xe8>)
 800111e:	f043 0307 	orr.w	r3, r3, #7
 8001122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <SystemInit+0xec>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <SystemInit+0xec>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001130:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <SystemInit+0xec>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <SystemInit+0xec>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4929      	ldr	r1, [pc, #164]	@ (80011e0 <SystemInit+0xec>)
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <SystemInit+0xf0>)
 800113e:	4013      	ands	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <SystemInit+0xe8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <SystemInit+0xe8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <SystemInit+0xe8>)
 8001158:	f043 0307 	orr.w	r3, r3, #7
 800115c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115e:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <SystemInit+0xec>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <SystemInit+0xec>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <SystemInit+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <SystemInit+0xec>)
 8001172:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <SystemInit+0xf4>)
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <SystemInit+0xec>)
 8001178:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <SystemInit+0xf8>)
 800117a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <SystemInit+0xec>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <SystemInit+0xfc>)
 8001180:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <SystemInit+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <SystemInit+0xec>)
 800118a:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <SystemInit+0xfc>)
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <SystemInit+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <SystemInit+0xec>)
 8001196:	4a16      	ldr	r2, [pc, #88]	@ (80011f0 <SystemInit+0xfc>)
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <SystemInit+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <SystemInit+0xec>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <SystemInit+0xec>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <SystemInit+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <SystemInit+0x100>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <SystemInit+0x104>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011be:	d202      	bcs.n	80011c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <SystemInit+0x108>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <SystemInit+0x10c>)
 80011c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	52002000 	.word	0x52002000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e8:	02020200 	.word	0x02020200
 80011ec:	01ff0000 	.word	0x01ff0000
 80011f0:	01010280 	.word	0x01010280
 80011f4:	5c001000 	.word	0x5c001000
 80011f8:	ffff0000 	.word	0xffff0000
 80011fc:	51008108 	.word	0x51008108
 8001200:	52004000 	.word	0x52004000

08001204 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <MX_USART3_UART_Init+0x94>)
 800120c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124c:	4811      	ldr	r0, [pc, #68]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 800124e:	f004 fb9b 	bl	8005988 <HAL_UART_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001258:	f7ff fe96 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001260:	f005 fc31 	bl	8006ac6 <HAL_UARTEx_SetTxFifoThreshold>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800126a:	f7ff fe8d 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4808      	ldr	r0, [pc, #32]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001272:	f005 fc66 	bl	8006b42 <HAL_UARTEx_SetRxFifoThreshold>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800127c:	f7ff fe84 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <MX_USART3_UART_Init+0x90>)
 8001282:	f005 fbe7 	bl	8006a54 <HAL_UARTEx_DisableFifoMode>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800128c:	f7ff fe7c 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000288 	.word	0x24000288
 8001298:	40004800 	.word	0x40004800

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ba      	sub	sp, #232	@ 0xe8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	22c0      	movs	r2, #192	@ 0xc0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 f97b 	bl	800a5b8 <memset>
  if(uartHandle->Instance==USART3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_UART_MspInit+0xc8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d146      	bne.n	800135a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012cc:	f04f 0202 	mov.w	r2, #2
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fa56 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ee:	f7ff fe4b 	bl	8000f88 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 80012f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 80012fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_MspInit+0xcc>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800132e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_UART_MspInit+0xd0>)
 8001356:	f000 fe97 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800135a:	bf00      	nop
 800135c:	37e8      	adds	r7, #232	@ 0xe8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004800 	.word	0x40004800
 8001368:	58024400 	.word	0x58024400
 800136c:	58020c00 	.word	0x58020c00

08001370 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001378:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137c:	2209      	movs	r2, #9
 800137e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001382:	2202      	movs	r2, #2
 8001384:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138e:	2202      	movs	r2, #2
 8001390:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139a:	2200      	movs	r2, #0
 800139c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b8:	f001 f849 	bl	800244e <HAL_PCD_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013c2:	f7ff fde1 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2400031c 	.word	0x2400031c
 80013d0:	40080000 	.word	0x40080000

080013d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ba      	sub	sp, #232	@ 0xe8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	22c0      	movs	r2, #192	@ 0xc0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f009 f8df 	bl	800a5b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <HAL_PCD_MspInit+0xec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d159      	bne.n	80014b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001404:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001410:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f002 f9b9 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001428:	f7ff fdae 	bl	8000f88 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800142c:	f001 f97a 	bl	8002724 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800144e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001468:	230a      	movs	r3, #10
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001472:	4619      	mov	r1, r3
 8001474:	4814      	ldr	r0, [pc, #80]	@ (80014c8 <HAL_PCD_MspInit+0xf4>)
 8001476:	f000 fe07 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800147e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <HAL_PCD_MspInit+0xf4>)
 8001496:	f000 fdf7 	bl	8002088 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 800149c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014a0:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 80014a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_PCD_MspInit+0xf0>)
 80014ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	37e8      	adds	r7, #232	@ 0xe8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40080000 	.word	0x40080000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d0:	f7ff fe10 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f009 f8bb 	bl	800a674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fc9b 	bl	8000e38 <main>
  bx  lr
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001508:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800150c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001510:	0800a8d0 	.word	0x0800a8d0
  ldr r2, =_sbss
 8001514:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001518:	2400532c 	.word	0x2400532c

0800151c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC3_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f947 	bl	80017ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152c:	f001 ff1a 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_Init+0x68>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	4913      	ldr	r1, [pc, #76]	@ (800158c <HAL_Init+0x6c>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_Init+0x6c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_Init+0x70>)
 8001562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_Init+0x74>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fd30 	bl	8000fd0 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e002      	b.n	8001580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fd0b 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58024400 	.word	0x58024400
 800158c:	0800a888 	.word	0x0800a888
 8001590:	24000004 	.word	0x24000004
 8001594:	24000000 	.word	0x24000000

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2400000c 	.word	0x2400000c
 80015bc:	24000800 	.word	0x24000800

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	24000800 	.word	0x24000800

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2400000c 	.word	0x2400000c

08001620 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetREVID+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0c1b      	lsrs	r3, r3, #16
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	5c001000 	.word	0x5c001000

08001638 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001648:	4904      	ldr	r1, [pc, #16]	@ (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	58000400 	.word	0x58000400

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	@ (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	@ (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	@ (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff4c 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017de:	f7ff ff63 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f7ff ffb3 	bl	8001754 <NVIC_EncodePriority>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff82 	bl	8001700 <__NVIC_SetPriority>
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff56 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0e3      	b.n	80019fa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2223      	movs	r2, #35	@ 0x23
 8001840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe ff0f 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a04 <HAL_ETH_Init+0x1e4>)
 800184c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001850:	4a6c      	ldr	r2, [pc, #432]	@ (8001a04 <HAL_ETH_Init+0x1e4>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_ETH_Init+0x1e4>)
 800185c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7a1b      	ldrb	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fee1 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
 8001876:	e003      	b.n	8001880 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001878:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800187c:	f7ff fedc 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001880:	4b61      	ldr	r3, [pc, #388]	@ (8001a08 <HAL_ETH_Init+0x1e8>)
 8001882:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800189a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff fe90 	bl	80015c0 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018a2:	e011      	b.n	80018c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018a4:	f7ff fe8c 	bl	80015c0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018b2:	d909      	bls.n	80018c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	22e0      	movs	r2, #224	@ 0xe0
 80018c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e098      	b.n	80019fa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e4      	bne.n	80018a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f89e 	bl	8001a1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018e0:	f001 feba 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a49      	ldr	r2, [pc, #292]	@ (8001a0c <HAL_ETH_Init+0x1ec>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3a01      	subs	r2, #1
 80018f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fa81 	bl	8001e00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001906:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800190a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001916:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800191a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	22e0      	movs	r2, #224	@ 0xe0
 8001936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e05d      	b.n	80019fa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001946:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <HAL_ETH_Init+0x1f0>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6952      	ldr	r2, [r2, #20]
 8001952:	0051      	lsls	r1, r2, #1
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	430b      	orrs	r3, r1
 800195a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800195e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fae9 	bl	8001f3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fb2f 	bl	8001fcc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3305      	adds	r3, #5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	3303      	adds	r3, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061a      	lsls	r2, r3, #24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	3302      	adds	r3, #2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019bc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_ETH_Init+0x1f4>)
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <HAL_ETH_Init+0x1f8>)
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2210      	movs	r2, #16
 80019f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58000400 	.word	0x58000400
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	ffff8001 	.word	0xffff8001
 8001a14:	0c020060 	.word	0x0c020060
 8001a18:	0c20c000 	.word	0x0c20c000

08001a1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a36:	f001 fe0f 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8001a3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d804      	bhi.n	8001a4e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e022      	b.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d204      	bcs.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e019      	b.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d915      	bls.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d804      	bhi.n	8001a7a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00c      	b.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d804      	bhi.n	8001a8c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e003      	b.n	8001a94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a92:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	02160ebf 	.word	0x02160ebf
 8001aac:	03938700 	.word	0x03938700
 8001ab0:	05f5e0ff 	.word	0x05f5e0ff
 8001ab4:	08f0d17f 	.word	0x08f0d17f
 8001ab8:	0ee6b27f 	.word	0x0ee6b27f

08001abc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	7b5b      	ldrb	r3, [r3, #13]
 8001ae4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7b9b      	ldrb	r3, [r3, #14]
 8001aec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7bdb      	ldrb	r3, [r3, #15]
 8001af4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001af6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	7c12      	ldrb	r2, [r2, #16]
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d102      	bne.n	8001b06 <ETH_SetMACConfig+0x4a>
 8001b00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b04:	e000      	b.n	8001b08 <ETH_SetMACConfig+0x4c>
 8001b06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	7c52      	ldrb	r2, [r2, #17]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d102      	bne.n	8001b18 <ETH_SetMACConfig+0x5c>
 8001b12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b16:	e000      	b.n	8001b1a <ETH_SetMACConfig+0x5e>
 8001b18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7c9b      	ldrb	r3, [r3, #18]
 8001b20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b22:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	7f1b      	ldrb	r3, [r3, #28]
 8001b34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	7f5b      	ldrb	r3, [r3, #29]
 8001b3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	7f92      	ldrb	r2, [r2, #30]
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	d102      	bne.n	8001b4e <ETH_SetMACConfig+0x92>
 8001b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4c:	e000      	b.n	8001b50 <ETH_SetMACConfig+0x94>
 8001b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7fdb      	ldrb	r3, [r3, #31]
 8001b56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b60:	2a00      	cmp	r2, #0
 8001b62:	d102      	bne.n	8001b6a <ETH_SetMACConfig+0xae>
 8001b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b68:	e000      	b.n	8001b6c <ETH_SetMACConfig+0xb0>
 8001b6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b56      	ldr	r3, [pc, #344]	@ (8001ce8 <ETH_SetMACConfig+0x22c>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ba6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ba8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d102      	bne.n	8001bce <ETH_SetMACConfig+0x112>
 8001bc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bcc:	e000      	b.n	8001bd0 <ETH_SetMACConfig+0x114>
 8001bce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bd0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <ETH_SetMACConfig+0x230>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	68f9      	ldr	r1, [r7, #12]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bf4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <ETH_SetMACConfig+0x234>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d101      	bne.n	8001c2e <ETH_SetMACConfig+0x172>
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	e000      	b.n	8001c30 <ETH_SetMACConfig+0x174>
 8001c2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c42:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	f023 0103 	bic.w	r1, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c86:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	d101      	bne.n	8001caa <ETH_SetMACConfig+0x1ee>
 8001ca6:	2240      	movs	r2, #64	@ 0x40
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x1f0>
 8001caa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001cb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001cbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ccc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	00048083 	.word	0x00048083
 8001cec:	c0f88000 	.word	0xc0f88000
 8001cf0:	fffffef0 	.word	0xfffffef0

08001cf4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <ETH_SetDMAConfig+0xf8>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6811      	ldr	r1, [r2, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	791b      	ldrb	r3, [r3, #4]
 8001d20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	7b1b      	ldrb	r3, [r3, #12]
 8001d2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <ETH_SetDMAConfig+0xfc>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7b5b      	ldrb	r3, [r3, #13]
 8001d52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d64:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <ETH_SetDMAConfig+0x100>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	430b      	orrs	r3, r1
 8001d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d78:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	7d1b      	ldrb	r3, [r3, #20]
 8001d84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	7f5b      	ldrb	r3, [r3, #29]
 8001d8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <ETH_SetDMAConfig+0x104>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7f1b      	ldrb	r3, [r3, #28]
 8001db6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <ETH_SetDMAConfig+0x108>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ddc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	ffff87fd 	.word	0xffff87fd
 8001df0:	ffff2ffe 	.word	0xffff2ffe
 8001df4:	fffec000 	.word	0xfffec000
 8001df8:	ffc0efef 	.word	0xffc0efef
 8001dfc:	7fc0ffff 	.word	0x7fc0ffff

08001e00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a4      	sub	sp, #144	@ 0x90
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e40:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e58:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e5c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e82:	2300      	movs	r3, #0
 8001e84:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001eaa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001eda:	2300      	movs	r3, #0
 8001edc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fde6 	bl	8001abc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fee1 	bl	8001cf4 <ETH_SetDMAConfig>
}
 8001f32:	bf00      	nop
 8001f34:	3790      	adds	r7, #144	@ 0x90
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e01d      	b.n	8001f84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68d9      	ldr	r1, [r3, #12]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	3206      	adds	r2, #6
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d9de      	bls.n	8001f48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e023      	b.n	8002022 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6919      	ldr	r1, [r3, #16]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	3212      	adds	r2, #18
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3301      	adds	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d9d8      	bls.n	8001fda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800204e:	461a      	mov	r2, r3
 8002050:	2303      	movs	r3, #3
 8002052:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002062:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002076:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002096:	4b89      	ldr	r3, [pc, #548]	@ (80022bc <HAL_GPIO_Init+0x234>)
 8002098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800209a:	e194      	b.n	80023c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8186 	beq.w	80023c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d005      	beq.n	80020cc <HAL_GPIO_Init+0x44>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d130      	bne.n	800212e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002102:	2201      	movs	r2, #1
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	f003 0201 	and.w	r2, r3, #1
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d017      	beq.n	800216a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	69b9      	ldr	r1, [r7, #24]
 80021ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0203 	and.w	r2, r3, #3
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80e0 	beq.w	80023c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_GPIO_Init+0x238>)
 8002202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002206:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <HAL_GPIO_Init+0x238>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_GPIO_Init+0x238>)
 8002212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221e:	4a29      	ldr	r2, [pc, #164]	@ (80022c4 <HAL_GPIO_Init+0x23c>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a20      	ldr	r2, [pc, #128]	@ (80022c8 <HAL_GPIO_Init+0x240>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d052      	beq.n	80022f0 <HAL_GPIO_Init+0x268>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_GPIO_Init+0x244>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d031      	beq.n	80022b6 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <HAL_GPIO_Init+0x248>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <HAL_GPIO_Init+0x24c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d025      	beq.n	80022ae <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_GPIO_Init+0x250>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1b      	ldr	r2, [pc, #108]	@ (80022dc <HAL_GPIO_Init+0x254>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <HAL_GPIO_Init+0x258>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x21a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <HAL_GPIO_Init+0x25c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x216>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_GPIO_Init+0x260>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x212>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_GPIO_Init+0x264>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x20e>
 8002292:	2309      	movs	r3, #9
 8002294:	e02d      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 8002296:	230a      	movs	r3, #10
 8002298:	e02b      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 800229a:	2308      	movs	r3, #8
 800229c:	e029      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 800229e:	2307      	movs	r3, #7
 80022a0:	e027      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022a2:	2306      	movs	r3, #6
 80022a4:	e025      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022a6:	2305      	movs	r3, #5
 80022a8:	e023      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022aa:	2304      	movs	r3, #4
 80022ac:	e021      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e01f      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e01d      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e01b      	b.n	80022f2 <HAL_GPIO_Init+0x26a>
 80022ba:	bf00      	nop
 80022bc:	58000080 	.word	0x58000080
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58000400 	.word	0x58000400
 80022c8:	58020000 	.word	0x58020000
 80022cc:	58020400 	.word	0x58020400
 80022d0:	58020800 	.word	0x58020800
 80022d4:	58020c00 	.word	0x58020c00
 80022d8:	58021000 	.word	0x58021000
 80022dc:	58021400 	.word	0x58021400
 80022e0:	58021800 	.word	0x58021800
 80022e4:	58021c00 	.word	0x58021c00
 80022e8:	58022000 	.word	0x58022000
 80022ec:	58022400 	.word	0x58022400
 80022f0:	2300      	movs	r3, #0
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f002 0203 	and.w	r2, r2, #3
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	4093      	lsls	r3, r2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002302:	4938      	ldr	r1, [pc, #224]	@ (80023e4 <HAL_GPIO_Init+0x35c>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f ae63 	bne.w	800209c <HAL_GPIO_Init+0x14>
  }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3724      	adds	r7, #36	@ 0x24
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	58000400 	.word	0x58000400

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43d9      	mvns	r1, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af02      	add	r7, sp, #8
 8002454:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0fe      	b.n	800265e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe ffad 	bl	80013d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f004 fc5a 	bl	8006d40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7c1a      	ldrb	r2, [r3, #16]
 8002494:	f88d 2000 	strb.w	r2, [sp]
 8002498:	3304      	adds	r3, #4
 800249a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249c:	f004 fbde 	bl	8006c5c <USB_CoreInit>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0d5      	b.n	800265e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 fc52 	bl	8006d62 <USB_SetCurrentMode>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0c6      	b.n	800265e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e04a      	b.n	800256c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3315      	adds	r3, #21
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3314      	adds	r3, #20
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	b298      	uxth	r0, r3
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	332e      	adds	r3, #46	@ 0x2e
 8002512:	4602      	mov	r2, r0
 8002514:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3318      	adds	r3, #24
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	331c      	adds	r3, #28
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3320      	adds	r3, #32
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3324      	adds	r3, #36	@ 0x24
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3301      	adds	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	429a      	cmp	r2, r3
 8002574:	d3af      	bcc.n	80024d6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	e044      	b.n	8002606 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3301      	adds	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3b5      	bcc.n	800257c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7c1a      	ldrb	r2, [r3, #16]
 8002618:	f88d 2000 	strb.w	r2, [sp]
 800261c:	3304      	adds	r3, #4
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	f004 fbec 	bl	8006dfc <USB_DevInit>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e013      	b.n	800265e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f80b 	bl	8002668 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fda7 	bl	80071aa <USB_DevDisconnect>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_PCDEx_ActivateLPM+0x44>)
 8002698:	4313      	orrs	r3, r2
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	10000003 	.word	0x10000003

080026b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_PWREx_ConfigSupply+0x70>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d00a      	beq.n	80026da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026c4:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_PWREx_ConfigSupply+0x70>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e01f      	b.n	8002716 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e01d      	b.n	8002716 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_PWREx_ConfigSupply+0x70>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	490f      	ldr	r1, [pc, #60]	@ (8002720 <HAL_PWREx_ConfigSupply+0x70>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026ea:	f7fe ff69 	bl	80015c0 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026f0:	e009      	b.n	8002706 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026f2:	f7fe ff65 	bl	80015c0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002700:	d901      	bls.n	8002706 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_PWREx_ConfigSupply+0x70>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002712:	d1ee      	bne.n	80026f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58024800 	.word	0x58024800

08002724 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800272e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	58024800 	.word	0x58024800

08002744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	@ 0x30
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 bc48 	b.w	8002fe8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8088 	beq.w	8002876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b99      	ldr	r3, [pc, #612]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002770:	4b96      	ldr	r3, [pc, #600]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	2b10      	cmp	r3, #16
 800277a:	d007      	beq.n	800278c <HAL_RCC_OscConfig+0x48>
 800277c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277e:	2b18      	cmp	r3, #24
 8002780:	d111      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b8f      	ldr	r3, [pc, #572]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06d      	beq.n	8002874 <HAL_RCC_OscConfig+0x130>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d169      	bne.n	8002874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f000 bc21 	b.w	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x7a>
 80027b0:	4b86      	ldr	r3, [pc, #536]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a85      	ldr	r2, [pc, #532]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x9c>
 80027c6:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a80      	ldr	r2, [pc, #512]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b7e      	ldr	r3, [pc, #504]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7d      	ldr	r2, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xc0>
 80027ea:	4b78      	ldr	r3, [pc, #480]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a77      	ldr	r2, [pc, #476]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a74      	ldr	r2, [pc, #464]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 8002804:	4b71      	ldr	r3, [pc, #452]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a70      	ldr	r2, [pc, #448]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6d      	ldr	r2, [pc, #436]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fecc 	bl	80015c0 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fec8 	bl	80015c0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e3d4      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800283e:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe feb8 	bl	80015c0 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe feb4 	bl	80015c0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e3c0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002866:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x110>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80ca 	beq.w	8002a18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002884:	4b51      	ldr	r3, [pc, #324]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800288c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800288e:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_RCC_OscConfig+0x166>
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2b18      	cmp	r3, #24
 800289e:	d156      	bne.n	800294e <HAL_RCC_OscConfig+0x20a>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d151      	bne.n	800294e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028aa:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x17e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e392      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028c2:	4b42      	ldr	r3, [pc, #264]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0219 	bic.w	r2, r3, #25
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	493f      	ldr	r1, [pc, #252]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fe74 	bl	80015c0 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe fe70 	bl	80015c0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e37c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	f7fe fe91 	bl	8001620 <HAL_GetREVID>
 80028fe:	4603      	mov	r3, r0
 8002900:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002904:	4293      	cmp	r3, r2
 8002906:	d817      	bhi.n	8002938 <HAL_RCC_OscConfig+0x1f4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x1de>
 8002910:	4b2e      	ldr	r3, [pc, #184]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	e07a      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	031b      	lsls	r3, r3, #12
 8002930:	4926      	ldr	r1, [pc, #152]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002936:	e06f      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	4921      	ldr	r1, [pc, #132]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	e064      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d047      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0219 	bic.w	r2, r3, #25
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	491a      	ldr	r1, [pc, #104]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fe2a 	bl	80015c0 <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe fe26 	bl	80015c0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e332      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	f7fe fe47 	bl	8001620 <HAL_GetREVID>
 8002992:	4603      	mov	r3, r0
 8002994:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002998:	4293      	cmp	r3, r2
 800299a:	d819      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x28c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b40      	cmp	r3, #64	@ 0x40
 80029a2:	d108      	bne.n	80029b6 <HAL_RCC_OscConfig+0x272>
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029ac:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b2:	6053      	str	r3, [r2, #4]
 80029b4:	e030      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	031b      	lsls	r3, r3, #12
 80029c4:	4901      	ldr	r1, [pc, #4]	@ (80029cc <HAL_RCC_OscConfig+0x288>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
 80029ca:	e025      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
 80029cc:	58024400 	.word	0x58024400
 80029d0:	4b9a      	ldr	r3, [pc, #616]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	4997      	ldr	r1, [pc, #604]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
 80029e4:	e018      	b.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e6:	4b95      	ldr	r3, [pc, #596]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a94      	ldr	r2, [pc, #592]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fde5 	bl	80015c0 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fa:	f7fe fde1 	bl	80015c0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e2ed      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a0c:	4b8b      	ldr	r3, [pc, #556]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a9 	beq.w	8002b78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a26:	4b85      	ldr	r3, [pc, #532]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a30:	4b82      	ldr	r3, [pc, #520]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d007      	beq.n	8002a4c <HAL_RCC_OscConfig+0x308>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b18      	cmp	r3, #24
 8002a40:	d13a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x374>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d135      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x320>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b80      	cmp	r3, #128	@ 0x80
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e2c1      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a64:	f7fe fddc 	bl	8001620 <HAL_GetREVID>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d817      	bhi.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x348>
 8002a7a:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a82:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a8a:	e075      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	069b      	lsls	r3, r3, #26
 8002a9a:	4968      	ldr	r1, [pc, #416]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aa0:	e06a      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa2:	4b66      	ldr	r3, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	4962      	ldr	r1, [pc, #392]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab6:	e05f      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d042      	beq.n	8002b46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fd78 	bl	80015c0 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fd74 	bl	80015c0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e280      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ae6:	4b55      	ldr	r3, [pc, #340]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af2:	f7fe fd95 	bl	8001620 <HAL_GetREVID>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d817      	bhi.n	8002b30 <HAL_RCC_OscConfig+0x3ec>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d108      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3d6>
 8002b08:	4b4c      	ldr	r3, [pc, #304]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b10:	4a4a      	ldr	r2, [pc, #296]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b16:	6053      	str	r3, [r2, #4]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
 8002b1a:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	4944      	ldr	r1, [pc, #272]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 8002b2e:	e023      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
 8002b30:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	493f      	ldr	r1, [pc, #252]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
 8002b44:	e018      	b.n	8002b78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b46:	4b3d      	ldr	r3, [pc, #244]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fd35 	bl	80015c0 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fd31 	bl	80015c0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e23d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b6c:	4b33      	ldr	r3, [pc, #204]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d036      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d019      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b90:	4a2a      	ldr	r2, [pc, #168]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fd12 	bl	80015c0 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fd0e 	bl	80015c0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e21a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb2:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x45c>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fcf8 	bl	80015c0 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fcf4 	bl	80015c0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e200      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002be6:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d039      	beq.n	8002c72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fcd5 	bl	80015c0 <HAL_GetTick>
 8002c16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1a:	f7fe fcd1 	bl	80015c0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1dd      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_RCC_OscConfig+0x4f8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4d6>
 8002c38:	e01b      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
 8002c3a:	bf00      	nop
 8002c3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c40:	4b9b      	ldr	r3, [pc, #620]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a9a      	ldr	r2, [pc, #616]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fcb8 	bl	80015c0 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c54:	f7fe fcb4 	bl	80015c0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1c0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c66:	4b92      	ldr	r3, [pc, #584]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8081 	beq.w	8002d82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c80:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb4 <HAL_RCC_OscConfig+0x770>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a8b      	ldr	r2, [pc, #556]	@ (8002eb4 <HAL_RCC_OscConfig+0x770>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fc98 	bl	80015c0 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe fc94 	bl	80015c0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1a0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca6:	4b83      	ldr	r3, [pc, #524]	@ (8002eb4 <HAL_RCC_OscConfig+0x770>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x584>
 8002cba:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	e02d      	b.n	8002d24 <HAL_RCC_OscConfig+0x5e0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x5a6>
 8002cd0:	4b77      	ldr	r3, [pc, #476]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	4a76      	ldr	r2, [pc, #472]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cdc:	4b74      	ldr	r3, [pc, #464]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a73      	ldr	r2, [pc, #460]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCC_OscConfig+0x5e0>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c8>
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a6b      	ldr	r2, [pc, #428]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0x5e0>
 8002d0c:	4b68      	ldr	r3, [pc, #416]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a67      	ldr	r2, [pc, #412]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d18:	4b65      	ldr	r3, [pc, #404]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a64      	ldr	r2, [pc, #400]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc48 	bl	80015c0 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fc44 	bl	80015c0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e14e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCC_OscConfig+0x5f0>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fc32 	bl	80015c0 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fc2e 	bl	80015c0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e138      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d76:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ee      	bne.n	8002d60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 812d 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d8c:	4b48      	ldr	r3, [pc, #288]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d94:	2b18      	cmp	r3, #24
 8002d96:	f000 80bd 	beq.w	8002f14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	f040 809e 	bne.w	8002ee0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b42      	ldr	r3, [pc, #264]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a41      	ldr	r2, [pc, #260]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fc06 	bl	80015c0 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fc02 	bl	80015c0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e10e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd6:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <HAL_RCC_OscConfig+0x774>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4931      	ldr	r1, [pc, #196]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	3b01      	subs	r3, #1
 8002df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	025b      	lsls	r3, r3, #9
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e20:	4923      	ldr	r1, [pc, #140]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e26:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	4a21      	ldr	r2, [pc, #132]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e32:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e36:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e3e:	00d2      	lsls	r2, r2, #3
 8002e40:	491b      	ldr	r1, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f023 020c 	bic.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	4917      	ldr	r1, [pc, #92]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e58:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	f023 0202 	bic.w	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e64:	4912      	ldr	r1, [pc, #72]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	4a10      	ldr	r2, [pc, #64]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e76:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	4a07      	ldr	r2, [pc, #28]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fb8b 	bl	80015c0 <HAL_GetTick>
 8002eaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eac:	e011      	b.n	8002ed2 <HAL_RCC_OscConfig+0x78e>
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58024800 	.word	0x58024800
 8002eb8:	fffffc0c 	.word	0xfffffc0c
 8002ebc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe fb7e 	bl	80015c0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e08a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x77c>
 8002ede:	e082      	b.n	8002fe6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a42      	ldr	r2, [pc, #264]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fb68 	bl	80015c0 <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fb64 	bl	80015c0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e070      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f06:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x7b0>
 8002f12:	e068      	b.n	8002fe6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f1a:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d031      	beq.n	8002f8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f003 0203 	and.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d12a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d122      	bne.n	8002f8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	0a5b      	lsrs	r3, r3, #9
 8002f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d108      	bne.n	8002f8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e02b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f90:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d01f      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fa6:	4b12      	ldr	r3, [pc, #72]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb2:	f7fe fb05 	bl	80015c0 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fb8:	bf00      	nop
 8002fba:	f7fe fb01 	bl	80015c0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d0f9      	beq.n	8002fba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_RCC_OscConfig+0x8b0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fd2:	00d2      	lsls	r2, r2, #3
 8002fd4:	4906      	ldr	r1, [pc, #24]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <HAL_RCC_OscConfig+0x8ac>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3730      	adds	r7, #48	@ 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	ffff0007 	.word	0xffff0007

08002ff8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e19c      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b8a      	ldr	r3, [pc, #552]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b87      	ldr	r3, [pc, #540]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 020f 	bic.w	r2, r3, #15
 8003022:	4985      	ldr	r1, [pc, #532]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b83      	ldr	r3, [pc, #524]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e184      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	4b7b      	ldr	r3, [pc, #492]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003058:	4b78      	ldr	r3, [pc, #480]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	4975      	ldr	r1, [pc, #468]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003066:	4313      	orrs	r3, r2
 8003068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	4b70      	ldr	r3, [pc, #448]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003082:	429a      	cmp	r2, r3
 8003084:	d908      	bls.n	8003098 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003086:	4b6d      	ldr	r3, [pc, #436]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	496a      	ldr	r1, [pc, #424]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	4b64      	ldr	r3, [pc, #400]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d908      	bls.n	80030c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030b4:	4b61      	ldr	r3, [pc, #388]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	495e      	ldr	r1, [pc, #376]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	4b59      	ldr	r3, [pc, #356]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030de:	429a      	cmp	r2, r3
 80030e0:	d908      	bls.n	80030f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030e2:	4b56      	ldr	r3, [pc, #344]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4953      	ldr	r1, [pc, #332]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	4b4d      	ldr	r3, [pc, #308]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	429a      	cmp	r2, r3
 800310e:	d908      	bls.n	8003122 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f023 020f 	bic.w	r2, r3, #15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4947      	ldr	r1, [pc, #284]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800311e:	4313      	orrs	r3, r2
 8003120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d055      	beq.n	80031da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800312e:	4b43      	ldr	r3, [pc, #268]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4940      	ldr	r1, [pc, #256]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800313c:	4313      	orrs	r3, r2
 800313e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003148:	4b3c      	ldr	r3, [pc, #240]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d121      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0f6      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003160:	4b36      	ldr	r3, [pc, #216]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d115      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0ea      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003178:	4b30      	ldr	r3, [pc, #192]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0de      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003188:	4b2c      	ldr	r3, [pc, #176]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d6      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003198:	4b28      	ldr	r3, [pc, #160]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f023 0207 	bic.w	r2, r3, #7
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4925      	ldr	r1, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe fa09 	bl	80015c0 <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b2:	f7fe fa05 	bl	80015c0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0be      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d1eb      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d208      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	490e      	ldr	r1, [pc, #56]	@ (800323c <HAL_RCC_ClockConfig+0x244>)
 8003204:	4313      	orrs	r3, r2
 8003206:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d214      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 020f 	bic.w	r2, r3, #15
 800321e:	4906      	ldr	r1, [pc, #24]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <HAL_RCC_ClockConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e086      	b.n	8003346 <HAL_RCC_ClockConfig+0x34e>
 8003238:	52002000 	.word	0x52002000
 800323c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003258:	429a      	cmp	r2, r3
 800325a:	d208      	bcs.n	800326e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800325c:	4b3c      	ldr	r3, [pc, #240]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	4939      	ldr	r1, [pc, #228]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 800326a:	4313      	orrs	r3, r2
 800326c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	4b34      	ldr	r3, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003286:	429a      	cmp	r2, r3
 8003288:	d208      	bcs.n	800329c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800328a:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	492e      	ldr	r1, [pc, #184]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 8003298:	4313      	orrs	r3, r2
 800329a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d208      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032b8:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d010      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	4b1d      	ldr	r3, [pc, #116]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d208      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4917      	ldr	r1, [pc, #92]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032f8:	f000 f834 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	4912      	ldr	r1, [pc, #72]	@ (8003354 <HAL_RCC_ClockConfig+0x35c>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003316:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x358>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <HAL_RCC_ClockConfig+0x35c>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <HAL_RCC_ClockConfig+0x360>)
 800332e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <HAL_RCC_ClockConfig+0x364>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_RCC_ClockConfig+0x368>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fe48 	bl	8000fd0 <HAL_InitTick>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	0800a888 	.word	0x0800a888
 8003358:	24000004 	.word	0x24000004
 800335c:	24000000 	.word	0x24000000
 8003360:	24000008 	.word	0x24000008

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	@ 0x24
 8003368:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336a:	4bb3      	ldr	r3, [pc, #716]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003372:	2b18      	cmp	r3, #24
 8003374:	f200 8155 	bhi.w	8003622 <HAL_RCC_GetSysClockFreq+0x2be>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <HAL_RCC_GetSysClockFreq+0x1c>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033e5 	.word	0x080033e5
 8003384:	08003623 	.word	0x08003623
 8003388:	08003623 	.word	0x08003623
 800338c:	08003623 	.word	0x08003623
 8003390:	08003623 	.word	0x08003623
 8003394:	08003623 	.word	0x08003623
 8003398:	08003623 	.word	0x08003623
 800339c:	08003623 	.word	0x08003623
 80033a0:	0800340b 	.word	0x0800340b
 80033a4:	08003623 	.word	0x08003623
 80033a8:	08003623 	.word	0x08003623
 80033ac:	08003623 	.word	0x08003623
 80033b0:	08003623 	.word	0x08003623
 80033b4:	08003623 	.word	0x08003623
 80033b8:	08003623 	.word	0x08003623
 80033bc:	08003623 	.word	0x08003623
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003623 	.word	0x08003623
 80033c8:	08003623 	.word	0x08003623
 80033cc:	08003623 	.word	0x08003623
 80033d0:	08003623 	.word	0x08003623
 80033d4:	08003623 	.word	0x08003623
 80033d8:	08003623 	.word	0x08003623
 80033dc:	08003623 	.word	0x08003623
 80033e0:	08003417 	.word	0x08003417
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033e4:	4b94      	ldr	r3, [pc, #592]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033f0:	4b91      	ldr	r3, [pc, #580]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	08db      	lsrs	r3, r3, #3
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	4a90      	ldr	r2, [pc, #576]	@ (800363c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003402:	e111      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003404:	4b8d      	ldr	r3, [pc, #564]	@ (800363c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003406:	61bb      	str	r3, [r7, #24]
      break;
 8003408:	e10e      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800340a:	4b8d      	ldr	r3, [pc, #564]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800340c:	61bb      	str	r3, [r7, #24]
      break;
 800340e:	e10b      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003410:	4b8c      	ldr	r3, [pc, #560]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003412:	61bb      	str	r3, [r7, #24]
      break;
 8003414:	e108      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003416:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003420:	4b85      	ldr	r3, [pc, #532]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800342a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800342c:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003436:	4b80      	ldr	r3, [pc, #512]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80e1 	beq.w	800361c <HAL_RCC_GetSysClockFreq+0x2b8>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b02      	cmp	r3, #2
 800345e:	f000 8083 	beq.w	8003568 <HAL_RCC_GetSysClockFreq+0x204>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b02      	cmp	r3, #2
 8003466:	f200 80a1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x248>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x114>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d056      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003476:	e099      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003478:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02d      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003484:	4b6c      	ldr	r3, [pc, #432]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	4a6b      	ldr	r2, [pc, #428]	@ (800363c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ae:	4b62      	ldr	r3, [pc, #392]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034be:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003648 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034de:	e087      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800364c <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f2:	4b51      	ldr	r3, [pc, #324]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003502:	ed97 6a02 	vldr	s12, [r7, #8]
 8003506:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003648 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003522:	e065      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003650 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a02 	vldr	s12, [r7, #8]
 800354a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003648 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003566:	e043      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003654 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003648 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035aa:	e021      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003650 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003648 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035f0:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035fa:	3301      	adds	r3, #1
 80035fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003608:	edd7 6a07 	vldr	s13, [r7, #28]
 800360c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003614:	ee17 3a90 	vmov	r3, s15
 8003618:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800361a:	e005      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003622:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003624:	61bb      	str	r3, [r7, #24]
      break;
 8003626:	bf00      	nop
  }

  return sysclockfreq;
 8003628:	69bb      	ldr	r3, [r7, #24]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
 800363c:	03d09000 	.word	0x03d09000
 8003640:	003d0900 	.word	0x003d0900
 8003644:	007a1200 	.word	0x007a1200
 8003648:	46000000 	.word	0x46000000
 800364c:	4c742400 	.word	0x4c742400
 8003650:	4a742400 	.word	0x4a742400
 8003654:	4af42400 	.word	0x4af42400

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800365e:	f7ff fe81 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490f      	ldr	r1, [pc, #60]	@ (80036ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	4a07      	ldr	r2, [pc, #28]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003694:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003696:	4a07      	ldr	r2, [pc, #28]	@ (80036b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800369c:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	58024400 	.word	0x58024400
 80036ac:	0800a888 	.word	0x0800a888
 80036b0:	24000004 	.word	0x24000004
 80036b4:	24000000 	.word	0x24000000

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036bc:	f7ff ffcc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4904      	ldr	r1, [pc, #16]	@ (80036e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	0800a888 	.word	0x0800a888

080036e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036e8:	f7ff ffb6 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4904      	ldr	r1, [pc, #16]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x28>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	58024400 	.word	0x58024400
 800370c:	0800a888 	.word	0x0800a888

08003710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	223f      	movs	r2, #63	@ 0x3f
 800371e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003720:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0207 	and.w	r2, r3, #7
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800372c:	4b17      	ldr	r3, [pc, #92]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003744:	4b11      	ldr	r3, [pc, #68]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003750:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_RCC_GetClockConfig+0x7c>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_RCC_GetClockConfig+0x80>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	58024400 	.word	0x58024400
 8003790:	52002000 	.word	0x52002000

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b0ca      	sub	sp, #296	@ 0x128
 800379a:	af00      	add	r7, sp, #0
 800379c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037b8:	2500      	movs	r5, #0
 80037ba:	ea54 0305 	orrs.w	r3, r4, r5
 80037be:	d049      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ca:	d02f      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d0:	d828      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d6:	d01a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037dc:	d822      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037e6:	d007      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037e8:	e01c      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ea:	4bb8      	ldr	r3, [pc, #736]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	4ab7      	ldr	r2, [pc, #732]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037f6:	e01a      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	3308      	adds	r3, #8
 80037fe:	2102      	movs	r1, #2
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fc8f 	bl	8005124 <RCCEx_PLL2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800380c:	e00f      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fd36 	bl	8005288 <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003822:	e004      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800382c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003836:	4ba5      	ldr	r3, [pc, #660]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003844:	4aa1      	ldr	r2, [pc, #644]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003846:	430b      	orrs	r3, r1
 8003848:	6513      	str	r3, [r2, #80]	@ 0x50
 800384a:	e003      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003860:	f04f 0900 	mov.w	r9, #0
 8003864:	ea58 0309 	orrs.w	r3, r8, r9
 8003868:	d047      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	2b04      	cmp	r3, #4
 8003872:	d82a      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	08003891 	.word	0x08003891
 8003880:	0800389f 	.word	0x0800389f
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038d3 	.word	0x080038d3
 800388c:	080038d3 	.word	0x080038d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b8e      	ldr	r3, [pc, #568]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	4a8d      	ldr	r2, [pc, #564]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800389c:	e01a      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	3308      	adds	r3, #8
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fc3c 	bl	8005124 <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b2:	e00f      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	3328      	adds	r3, #40	@ 0x28
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fce3 	bl	8005288 <RCCEx_PLL3_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038dc:	4b7b      	ldr	r3, [pc, #492]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	f023 0107 	bic.w	r1, r3, #7
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	4a78      	ldr	r2, [pc, #480]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f0:	e003      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003906:	f04f 0b00 	mov.w	fp, #0
 800390a:	ea5a 030b 	orrs.w	r3, sl, fp
 800390e:	d04c      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391a:	d030      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800391c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003920:	d829      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003922:	2bc0      	cmp	r3, #192	@ 0xc0
 8003924:	d02d      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003926:	2bc0      	cmp	r3, #192	@ 0xc0
 8003928:	d825      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392a:	2b80      	cmp	r3, #128	@ 0x80
 800392c:	d018      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d821      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003936:	2b40      	cmp	r3, #64	@ 0x40
 8003938:	d007      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800393a:	e01c      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393c:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	4a62      	ldr	r2, [pc, #392]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003948:	e01c      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3308      	adds	r3, #8
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fbe6 	bl	8005124 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800395e:	e011      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	3328      	adds	r3, #40	@ 0x28
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fc8d 	bl	8005288 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800398c:	4b4f      	ldr	r3, [pc, #316]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800398e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003990:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	4a4c      	ldr	r2, [pc, #304]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d053      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039d6:	d035      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039dc:	d82e      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039e2:	d031      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039e8:	d828      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ee:	d01a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f4:	d822      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039fe:	d007      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a00:	e01c      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a02:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	4a31      	ldr	r2, [pc, #196]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a0e:	e01c      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	3308      	adds	r3, #8
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fb83 	bl	8005124 <RCCEx_PLL2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a24:	e011      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3328      	adds	r3, #40	@ 0x28
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fc2a 	bl	8005288 <RCCEx_PLL3_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e006      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a52:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a62:	4a1a      	ldr	r2, [pc, #104]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a68:	e003      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d056      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9e:	d038      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aa4:	d831      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aa6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003aaa:	d034      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003aac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ab0:	d82b      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ab6:	d01d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003abc:	d825      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ac2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ac8:	e01f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aca:	bf00      	nop
 8003acc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003adc:	e01c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb1c 	bl	8005124 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	3328      	adds	r3, #40	@ 0x28
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fbc3 	bl	8005288 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b20:	4b8e      	ldr	r3, [pc, #568]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b30:	4a8a      	ldr	r2, [pc, #552]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d03a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	2b30      	cmp	r3, #48	@ 0x30
 8003b68:	d01f      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b6a:	2b30      	cmp	r3, #48	@ 0x30
 8003b6c:	d819      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d00c      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d815      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d111      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7e:	4b77      	ldr	r3, [pc, #476]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	4a76      	ldr	r2, [pc, #472]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b8a:	e011      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	3308      	adds	r3, #8
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fac5 	bl	8005124 <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bb8:	4b68      	ldr	r3, [pc, #416]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	4a65      	ldr	r2, [pc, #404]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003be2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d051      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c00:	d035      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c06:	d82e      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c0c:	d031      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c12:	d828      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c18:	d01a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1e:	d822      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c28:	d007      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c2a:	e01c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	4a4a      	ldr	r2, [pc, #296]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	3308      	adds	r3, #8
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 fa6e 	bl	8005124 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c4e:	e011      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	3328      	adds	r3, #40	@ 0x28
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fb15 	bl	8005288 <RCCEx_PLL3_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c7c:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	4a34      	ldr	r2, [pc, #208]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d056      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cc4:	d033      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cca:	d82c      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ccc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cd0:	d02f      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cd6:	d826      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cdc:	d02b      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce2:	d820      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce8:	d012      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cee:	d81a      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d022      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf8:	d115      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	3308      	adds	r3, #8
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fa0e 	bl	8005124 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d0e:	e015      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	3328      	adds	r3, #40	@ 0x28
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fab5 	bl	8005288 <RCCEx_PLL3_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d24:	e00a      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e004      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d52:	4a02      	ldr	r2, [pc, #8]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	d055      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d94:	d033      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d9a:	d82c      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da0:	d02f      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da6:	d826      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dac:	d02b      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db2:	d820      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db8:	d012      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbe:	d81a      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d022      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	3308      	adds	r3, #8
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f9a6 	bl	8005124 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dde:	e015      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	3328      	adds	r3, #40	@ 0x28
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fa4d 	bl	8005288 <RCCEx_PLL3_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003df4:	e00a      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e14:	4ba3      	ldr	r3, [pc, #652]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e24:	4a9f      	ldr	r2, [pc, #636]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e2a:	e003      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d037      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e5e:	d00e      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e64:	d816      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e70:	4b8c      	ldr	r3, [pc, #560]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4a8b      	ldr	r2, [pc, #556]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	3308      	adds	r3, #8
 8003e84:	2101      	movs	r1, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f94c 	bl	8005124 <RCCEx_PLL2_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eaa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a7b      	ldr	r2, [pc, #492]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003eda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d039      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d81c      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003eee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f31 	.word	0x08003f31
 8003ef8:	08003f05 	.word	0x08003f05
 8003efc:	08003f13 	.word	0x08003f13
 8003f00:	08003f31 	.word	0x08003f31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f10:	e00f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 f902 	bl	8005124 <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	f023 0103 	bic.w	r1, r3, #3
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f48:	4a56      	ldr	r2, [pc, #344]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f000 809f 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f86:	f7fd fb1b 	bl	80015c0 <HAL_GetTick>
 8003f8a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fd fb16 	bl	80015c0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	@ 0x64
 8003f9e:	d903      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ed      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d179      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fbc:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fc8:	4053      	eors	r3, r2
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd2:	4b34      	ldr	r3, [pc, #208]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b2e      	ldr	r3, [pc, #184]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	4a2d      	ldr	r2, [pc, #180]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400a:	d118      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fad8 	bl	80015c0 <HAL_GetTick>
 8004010:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004014:	e00d      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fd fad3 	bl	80015c0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004020:	1ad2      	subs	r2, r2, r3
 8004022:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004026:	429a      	cmp	r2, r3
 8004028:	d903      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004030:	e005      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004032:	4b1c      	ldr	r3, [pc, #112]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0eb      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004042:	2b00      	cmp	r3, #0
 8004044:	d129      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800404e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004056:	d10e      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004058:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004068:	091a      	lsrs	r2, r3, #4
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800406c:	4013      	ands	r3, r2
 800406e:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	e005      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004076:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004080:	6113      	str	r3, [r2, #16]
 8004082:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800408e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004092:	4a04      	ldr	r2, [pc, #16]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004094:	430b      	orrs	r3, r1
 8004096:	6713      	str	r3, [r2, #112]	@ 0x70
 8004098:	e00e      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040a2:	e009      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040a4:	58024400 	.word	0x58024400
 80040a8:	58024800 	.word	0x58024800
 80040ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 0301 	and.w	r3, r2, #1
 80040c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f000 8089 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e0:	2b28      	cmp	r3, #40	@ 0x28
 80040e2:	d86b      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080041c5 	.word	0x080041c5
 80040f0:	080041bd 	.word	0x080041bd
 80040f4:	080041bd 	.word	0x080041bd
 80040f8:	080041bd 	.word	0x080041bd
 80040fc:	080041bd 	.word	0x080041bd
 8004100:	080041bd 	.word	0x080041bd
 8004104:	080041bd 	.word	0x080041bd
 8004108:	080041bd 	.word	0x080041bd
 800410c:	08004191 	.word	0x08004191
 8004110:	080041bd 	.word	0x080041bd
 8004114:	080041bd 	.word	0x080041bd
 8004118:	080041bd 	.word	0x080041bd
 800411c:	080041bd 	.word	0x080041bd
 8004120:	080041bd 	.word	0x080041bd
 8004124:	080041bd 	.word	0x080041bd
 8004128:	080041bd 	.word	0x080041bd
 800412c:	080041a7 	.word	0x080041a7
 8004130:	080041bd 	.word	0x080041bd
 8004134:	080041bd 	.word	0x080041bd
 8004138:	080041bd 	.word	0x080041bd
 800413c:	080041bd 	.word	0x080041bd
 8004140:	080041bd 	.word	0x080041bd
 8004144:	080041bd 	.word	0x080041bd
 8004148:	080041bd 	.word	0x080041bd
 800414c:	080041c5 	.word	0x080041c5
 8004150:	080041bd 	.word	0x080041bd
 8004154:	080041bd 	.word	0x080041bd
 8004158:	080041bd 	.word	0x080041bd
 800415c:	080041bd 	.word	0x080041bd
 8004160:	080041bd 	.word	0x080041bd
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041bd 	.word	0x080041bd
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041bd 	.word	0x080041bd
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041c5 	.word	0x080041c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	3308      	adds	r3, #8
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f000 ffc3 	bl	8005124 <RCCEx_PLL2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041a4:	e00f      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	3328      	adds	r3, #40	@ 0x28
 80041ac:	2101      	movs	r1, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f86a 	bl	8005288 <RCCEx_PLL3_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041ba:	e004      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041ce:	4bbf      	ldr	r3, [pc, #764]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041dc:	4abb      	ldr	r2, [pc, #748]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041de:	430b      	orrs	r3, r1
 80041e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f002 0302 	and.w	r3, r2, #2
 80041f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004202:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d041      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004212:	2b05      	cmp	r3, #5
 8004214:	d824      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004269 	.word	0x08004269
 8004220:	08004235 	.word	0x08004235
 8004224:	0800424b 	.word	0x0800424b
 8004228:	08004269 	.word	0x08004269
 800422c:	08004269 	.word	0x08004269
 8004230:	08004269 	.word	0x08004269
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3308      	adds	r3, #8
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f000 ff71 	bl	8005124 <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	2101      	movs	r1, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f818 	bl	8005288 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800425e:	e004      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004272:	4b96      	ldr	r3, [pc, #600]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	f023 0107 	bic.w	r1, r3, #7
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004280:	4a92      	ldr	r2, [pc, #584]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004282:	430b      	orrs	r3, r1
 8004284:	6553      	str	r3, [r2, #84]	@ 0x54
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 0304 	and.w	r3, r2, #4
 800429c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d044      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d825      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042bc:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	08004311 	.word	0x08004311
 80042c8:	080042dd 	.word	0x080042dd
 80042cc:	080042f3 	.word	0x080042f3
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004311 	.word	0x08004311
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	3308      	adds	r3, #8
 80042e2:	2101      	movs	r1, #1
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 ff1d 	bl	8005124 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	3328      	adds	r3, #40	@ 0x28
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ffc4 	bl	8005288 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800431a:	4b6c      	ldr	r3, [pc, #432]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	f023 0107 	bic.w	r1, r3, #7
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432a:	4a68      	ldr	r2, [pc, #416]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f002 0320 	and.w	r3, r2, #32
 8004346:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004354:	460b      	mov	r3, r1
 8004356:	4313      	orrs	r3, r2
 8004358:	d055      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004366:	d033      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800436c:	d82c      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d02f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d826      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800437a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800437e:	d02b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004380:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004384:	d820      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800438a:	d012      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800438c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004390:	d81a      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d022      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800439a:	d115      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	3308      	adds	r3, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 febd 	bl	8005124 <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043b0:	e015      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	3328      	adds	r3, #40	@ 0x28
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 ff64 	bl	8005288 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043c6:	e00a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ce:	e006      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d0:	bf00      	nop
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d4:	bf00      	nop
 80043d6:	e002      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e6:	4b39      	ldr	r3, [pc, #228]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f6:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800441c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004420:	460b      	mov	r3, r1
 8004422:	4313      	orrs	r3, r2
 8004424:	d058      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800442e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004432:	d033      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004434:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004438:	d82c      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443e:	d02f      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004444:	d826      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004446:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800444a:	d02b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800444c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004450:	d820      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004456:	d012      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445c:	d81a      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d022      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004466:	d115      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	3308      	adds	r3, #8
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fe57 	bl	8005124 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	3328      	adds	r3, #40	@ 0x28
 8004484:	2102      	movs	r1, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fefe 	bl	8005288 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004492:	e00a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449a:	e006      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800449c:	bf00      	nop
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044c2:	4a02      	ldr	r2, [pc, #8]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044ca:	bf00      	nop
 80044cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d055      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004500:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004504:	d033      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004506:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800450a:	d82c      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004510:	d02f      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004516:	d826      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004518:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800451c:	d02b      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800451e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004522:	d820      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004528:	d012      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800452a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452e:	d81a      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d022      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004538:	d115      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	3308      	adds	r3, #8
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fdee 	bl	8005124 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800454e:	e015      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	3328      	adds	r3, #40	@ 0x28
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fe95 	bl	8005288 <RCCEx_PLL3_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004564:	e00a      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800456e:	bf00      	nop
 8004570:	e004      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004584:	4ba1      	ldr	r3, [pc, #644]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004590:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004594:	4a9d      	ldr	r2, [pc, #628]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004596:	430b      	orrs	r3, r1
 8004598:	6593      	str	r3, [r2, #88]	@ 0x58
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 0308 	and.w	r3, r2, #8
 80045b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d01e      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	3328      	adds	r3, #40	@ 0x28
 80045d8:	2102      	movs	r1, #2
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fe54 	bl	8005288 <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045ec:	4b87      	ldr	r3, [pc, #540]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fc:	4a83      	ldr	r2, [pc, #524]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f002 0310 	and.w	r3, r2, #16
 800460e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004618:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800461c:	460b      	mov	r3, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	d01e      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462e:	d10c      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	3328      	adds	r3, #40	@ 0x28
 8004636:	2102      	movs	r1, #2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fe25 	bl	8005288 <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800464a:	4b70      	ldr	r3, [pc, #448]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800465a:	4a6c      	ldr	r2, [pc, #432]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800466c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004676:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d03e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800468c:	d022      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800468e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004692:	d81b      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469c:	d00b      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800469e:	e015      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	3308      	adds	r3, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fd3b 	bl	8005124 <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046b4:	e00f      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3328      	adds	r3, #40	@ 0x28
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fde2 	bl	8005288 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ca:	e004      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046de:	4b4b      	ldr	r3, [pc, #300]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046ee:	4a47      	ldr	r2, [pc, #284]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f4:	e003      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800470a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800470c:	2300      	movs	r3, #0
 800470e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004710:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d03b      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004726:	d01f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004728:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800472c:	d818      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004732:	d003      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004738:	d007      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800473a:	e011      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b33      	ldr	r3, [pc, #204]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	4a32      	ldr	r2, [pc, #200]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004748:	e00f      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	3328      	adds	r3, #40	@ 0x28
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fd98 	bl	8005288 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004772:	4b26      	ldr	r3, [pc, #152]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	4a22      	ldr	r2, [pc, #136]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6553      	str	r3, [r2, #84]	@ 0x54
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800479e:	673b      	str	r3, [r7, #112]	@ 0x70
 80047a0:	2300      	movs	r3, #0
 80047a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80047a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047a8:	460b      	mov	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	d034      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047bc:	d007      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047be:	e011      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	4a11      	ldr	r2, [pc, #68]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047cc:	e00e      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	3308      	adds	r3, #8
 80047d4:	2102      	movs	r1, #2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fca4 	bl	8005124 <RCCEx_PLL2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047e2:	e003      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004802:	4a02      	ldr	r2, [pc, #8]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004804:	430b      	orrs	r3, r1
 8004806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004808:	e006      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004826:	2300      	movs	r3, #0
 8004828:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800482a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d00c      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004838:	3328      	adds	r3, #40	@ 0x28
 800483a:	2102      	movs	r1, #2
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fd23 	bl	8005288 <RCCEx_PLL3_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800485a:	663b      	str	r3, [r7, #96]	@ 0x60
 800485c:	2300      	movs	r3, #0
 800485e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004860:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d038      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004876:	d018      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800487c:	d811      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800487e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004882:	d014      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004888:	d80b      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d011      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800488e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004892:	d106      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004894:	4bc3      	ldr	r3, [pc, #780]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	4ac2      	ldr	r2, [pc, #776]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048a0:	e008      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048a8:	e004      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048aa:	bf00      	nop
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048bc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048cc:	4ab5      	ldr	r2, [pc, #724]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ce:	430b      	orrs	r3, r1
 80048d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80048d2:	e003      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ea:	2300      	movs	r3, #0
 80048ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048f2:	460b      	mov	r3, r1
 80048f4:	4313      	orrs	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f8:	4baa      	ldr	r3, [pc, #680]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	4aa7      	ldr	r2, [pc, #668]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004908:	430b      	orrs	r3, r1
 800490a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004918:	653b      	str	r3, [r7, #80]	@ 0x50
 800491a:	2300      	movs	r3, #0
 800491c:	657b      	str	r3, [r7, #84]	@ 0x54
 800491e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004922:	460b      	mov	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004928:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004934:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004938:	4a9a      	ldr	r2, [pc, #616]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493a:	430b      	orrs	r3, r1
 800493c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800494c:	2300      	movs	r3, #0
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004950:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800495a:	4b92      	ldr	r3, [pc, #584]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800495e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004968:	4a8e      	ldr	r2, [pc, #568]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496a:	430b      	orrs	r3, r1
 800496c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800497a:	643b      	str	r3, [r7, #64]	@ 0x40
 800497c:	2300      	movs	r3, #0
 800497e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004980:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800498a:	4b86      	ldr	r3, [pc, #536]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4a85      	ldr	r2, [pc, #532]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004994:	6113      	str	r3, [r2, #16]
 8004996:	4b83      	ldr	r3, [pc, #524]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004998:	6919      	ldr	r1, [r3, #16]
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049a2:	4a80      	ldr	r2, [pc, #512]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049b6:	2300      	movs	r3, #0
 80049b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049c4:	4b77      	ldr	r3, [pc, #476]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	4a74      	ldr	r2, [pc, #464]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f4:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a04:	4a67      	ldr	r2, [pc, #412]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	2100      	movs	r1, #0
 8004a14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d011      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fb78 	bl	8005124 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	2100      	movs	r1, #0
 8004a54:	6239      	str	r1, [r7, #32]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d011      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb58 	bl	8005124 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	2100      	movs	r1, #0
 8004a94:	61b9      	str	r1, [r7, #24]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d011      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb38 	bl	8005124 <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6139      	str	r1, [r7, #16]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fbca 	bl	8005288 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	2100      	movs	r1, #0
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d011      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	3328      	adds	r3, #40	@ 0x28
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fbaa 	bl	8005288 <RCCEx_PLL3_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	2100      	movs	r1, #0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d011      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	3328      	adds	r3, #40	@ 0x28
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb8a 	bl	8005288 <RCCEx_PLL3_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba4:	58024400 	.word	0x58024400

08004ba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bac:	f7fe fd54 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4904      	ldr	r1, [pc, #16]	@ (8004bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	0800a888 	.word	0x0800a888

08004bd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004be6:	4b9f      	ldr	r3, [pc, #636]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	0b1b      	lsrs	r3, r3, #12
 8004bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004bfe:	4b99      	ldr	r3, [pc, #612]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	08db      	lsrs	r3, r3, #3
 8004c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8111 	beq.w	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	f000 8083 	beq.w	8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f200 80a1 	bhi.w	8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d056      	beq.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c3e:	e099      	b.n	8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c40:	4b88      	ldr	r3, [pc, #544]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02d      	beq.n	8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c4c:	4b85      	ldr	r3, [pc, #532]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	4a84      	ldr	r2, [pc, #528]	@ (8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c76:	4b7b      	ldr	r3, [pc, #492]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ca6:	e087      	b.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cba:	4b6a      	ldr	r3, [pc, #424]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cea:	e065      	b.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfe:	4b59      	ldr	r3, [pc, #356]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2e:	e043      	b.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b48      	ldr	r3, [pc, #288]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d72:	e021      	b.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b37      	ldr	r3, [pc, #220]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004db8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	0a5b      	lsrs	r3, r3, #9
 8004dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dde:	ee17 2a90 	vmov	r2, s15
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004de6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 2a90 	vmov	r2, s15
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e14:	4b13      	ldr	r3, [pc, #76]	@ (8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e42:	e008      	b.n	8004e56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	3724      	adds	r7, #36	@ 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	46000000 	.word	0x46000000
 8004e70:	4c742400 	.word	0x4c742400
 8004e74:	4a742400 	.word	0x4a742400
 8004e78:	4af42400 	.word	0x4af42400

08004e7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	@ 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e84:	4ba1      	ldr	r3, [pc, #644]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e8e:	4b9f      	ldr	r3, [pc, #636]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	0d1b      	lsrs	r3, r3, #20
 8004e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e9a:	4b9c      	ldr	r3, [pc, #624]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ea6:	4b99      	ldr	r3, [pc, #612]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	08db      	lsrs	r3, r3, #3
 8004eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8111 	beq.w	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f000 8083 	beq.w	8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	f200 80a1 	bhi.w	800501c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d056      	beq.n	8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ee6:	e099      	b.n	800501c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee8:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02d      	beq.n	8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef4:	4b85      	ldr	r3, [pc, #532]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a84      	ldr	r2, [pc, #528]	@ (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f4e:	e087      	b.n	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f62:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f92:	e065      	b.n	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800511c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa6:	4b59      	ldr	r3, [pc, #356]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd6:	e043      	b.n	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fea:	4b48      	ldr	r3, [pc, #288]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ffe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501a:	e021      	b.n	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800511c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502e:	4b37      	ldr	r3, [pc, #220]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005042:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800505e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005060:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	0a5b      	lsrs	r3, r3, #9
 8005066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507a:	edd7 6a07 	vldr	s13, [r7, #28]
 800507e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005086:	ee17 2a90 	vmov	r2, s15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800508e:	4b1f      	ldr	r3, [pc, #124]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b4:	ee17 2a90 	vmov	r2, s15
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050bc:	4b13      	ldr	r3, [pc, #76]	@ (800510c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	0e1b      	lsrs	r3, r3, #24
 80050c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e2:	ee17 2a90 	vmov	r2, s15
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050ea:	e008      	b.n	80050fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
}
 80050fe:	bf00      	nop
 8005100:	3724      	adds	r7, #36	@ 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
 8005110:	03d09000 	.word	0x03d09000
 8005114:	46000000 	.word	0x46000000
 8005118:	4c742400 	.word	0x4c742400
 800511c:	4a742400 	.word	0x4a742400
 8005120:	4af42400 	.word	0x4af42400

08005124 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005132:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b03      	cmp	r3, #3
 800513c:	d101      	bne.n	8005142 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e099      	b.n	8005276 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005142:	4b4f      	ldr	r3, [pc, #316]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4e      	ldr	r2, [pc, #312]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005148:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc fa37 	bl	80015c0 <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005156:	f7fc fa33 	bl	80015c0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e086      	b.n	8005276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005168:	4b45      	ldr	r3, [pc, #276]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005174:	4b42      	ldr	r3, [pc, #264]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	493f      	ldr	r1, [pc, #252]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	628b      	str	r3, [r1, #40]	@ 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	3b01      	subs	r3, #1
 800518e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	3b01      	subs	r3, #1
 8005198:	025b      	lsls	r3, r3, #9
 800519a:	b29b      	uxth	r3, r3
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051b8:	4931      	ldr	r1, [pc, #196]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051be:	4b30      	ldr	r3, [pc, #192]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	492d      	ldr	r1, [pc, #180]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	f023 0220 	bic.w	r2, r3, #32
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	4928      	ldr	r1, [pc, #160]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051e2:	4b27      	ldr	r3, [pc, #156]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	4a26      	ldr	r2, [pc, #152]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051f2:	4b24      	ldr	r3, [pc, #144]	@ (8005284 <RCCEx_PLL2_Config+0x160>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	69d2      	ldr	r2, [r2, #28]
 80051fa:	00d2      	lsls	r2, r2, #3
 80051fc:	4920      	ldr	r1, [pc, #128]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005208:	f043 0310 	orr.w	r3, r3, #16
 800520c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005214:	4b1a      	ldr	r3, [pc, #104]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800521a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800521e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005220:	e00f      	b.n	8005242 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d106      	bne.n	8005236 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005228:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005234:	e005      	b.n	8005242 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005236:	4b12      	ldr	r3, [pc, #72]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4a11      	ldr	r2, [pc, #68]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005242:	4b0f      	ldr	r3, [pc, #60]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0e      	ldr	r2, [pc, #56]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 8005248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800524c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524e:	f7fc f9b7 	bl	80015c0 <HAL_GetTick>
 8005252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005254:	e008      	b.n	8005268 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005256:	f7fc f9b3 	bl	80015c0 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e006      	b.n	8005276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <RCCEx_PLL2_Config+0x15c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
 8005284:	ffff0007 	.word	0xffff0007

08005288 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005296:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d101      	bne.n	80052a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e099      	b.n	80053da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052a6:	4b4f      	ldr	r3, [pc, #316]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc f985 	bl	80015c0 <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ba:	f7fc f981 	bl	80015c0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e086      	b.n	80053da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052cc:	4b45      	ldr	r3, [pc, #276]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052d8:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	051b      	lsls	r3, r3, #20
 80052e6:	493f      	ldr	r1, [pc, #252]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	b29b      	uxth	r3, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	3b01      	subs	r3, #1
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800531c:	4931      	ldr	r1, [pc, #196]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800531e:	4313      	orrs	r3, r2
 8005320:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005322:	4b30      	ldr	r3, [pc, #192]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	492d      	ldr	r1, [pc, #180]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005334:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	4928      	ldr	r1, [pc, #160]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005346:	4b27      	ldr	r3, [pc, #156]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800534c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005352:	4b24      	ldr	r3, [pc, #144]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005356:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <RCCEx_PLL3_Config+0x160>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	69d2      	ldr	r2, [r2, #28]
 800535e:	00d2      	lsls	r2, r2, #3
 8005360:	4920      	ldr	r1, [pc, #128]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005378:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	4a19      	ldr	r2, [pc, #100]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800537e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005384:	e00f      	b.n	80053a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800538c:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 8005392:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005398:	e005      	b.n	80053a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053a6:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a0e      	ldr	r2, [pc, #56]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b2:	f7fc f905 	bl	80015c0 <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053b8:	e008      	b.n	80053cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053ba:	f7fc f901 	bl	80015c0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	ffff0007 	.word	0xffff0007

080053ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e049      	b.n	8005492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f841 	bl	800549a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 f9e8 	bl	8005800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d001      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e054      	b.n	8005572 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <HAL_TIM_Base_Start_IT+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f2:	d01d      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <HAL_TIM_Base_Start_IT+0xd4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <HAL_TIM_Base_Start_IT+0xd8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <HAL_TIM_Base_Start_IT+0xdc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_TIM_Base_Start_IT+0xe0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_TIM_Base_Start_IT+0xe4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x80>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <HAL_TIM_Base_Start_IT+0xe8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d115      	bne.n	800555c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	4b19      	ldr	r3, [pc, #100]	@ (800559c <HAL_TIM_Base_Start_IT+0xec>)
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b06      	cmp	r3, #6
 8005540:	d015      	beq.n	800556e <HAL_TIM_Base_Start_IT+0xbe>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005548:	d011      	beq.n	800556e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	e008      	b.n	800556e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e000      	b.n	8005570 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40001800 	.word	0x40001800
 8005598:	40014000 	.word	0x40014000
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01b      	beq.n	8005604 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0202 	mvn.w	r2, #2
 80055d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8e9 	bl	80057c2 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8db 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8ec 	bl	80057d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0204 	mvn.w	r2, #4
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8c3 	bl	80057c2 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8b5 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8c6 	bl	80057d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d020      	beq.n	800569c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0208 	mvn.w	r2, #8
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2204      	movs	r2, #4
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f89d 	bl	80057c2 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f88f 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8a0 	bl	80057d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0210 	mvn.w	r2, #16
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2208      	movs	r2, #8
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f877 	bl	80057c2 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f869 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f87a 	bl	80057d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0201 	mvn.w	r2, #1
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fc2c 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00c      	beq.n	800573a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f913 	bl	8005960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00c      	beq.n	800575e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f90b 	bl	8005974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f834 	bl	80057ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0220 	mvn.w	r2, #32
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8d3 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a46      	ldr	r2, [pc, #280]	@ (800592c <TIM_Base_SetConfig+0x12c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581e:	d00f      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a43      	ldr	r2, [pc, #268]	@ (8005930 <TIM_Base_SetConfig+0x130>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a42      	ldr	r2, [pc, #264]	@ (8005934 <TIM_Base_SetConfig+0x134>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a41      	ldr	r2, [pc, #260]	@ (8005938 <TIM_Base_SetConfig+0x138>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a40      	ldr	r2, [pc, #256]	@ (800593c <TIM_Base_SetConfig+0x13c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d108      	bne.n	8005852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a35      	ldr	r2, [pc, #212]	@ (800592c <TIM_Base_SetConfig+0x12c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01f      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d01b      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a32      	ldr	r2, [pc, #200]	@ (8005930 <TIM_Base_SetConfig+0x130>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d017      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a31      	ldr	r2, [pc, #196]	@ (8005934 <TIM_Base_SetConfig+0x134>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <TIM_Base_SetConfig+0x138>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2f      	ldr	r2, [pc, #188]	@ (800593c <TIM_Base_SetConfig+0x13c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2e      	ldr	r2, [pc, #184]	@ (8005940 <TIM_Base_SetConfig+0x140>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2d      	ldr	r2, [pc, #180]	@ (8005944 <TIM_Base_SetConfig+0x144>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	@ (8005948 <TIM_Base_SetConfig+0x148>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a16      	ldr	r2, [pc, #88]	@ (800592c <TIM_Base_SetConfig+0x12c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a18      	ldr	r2, [pc, #96]	@ (800593c <TIM_Base_SetConfig+0x13c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <TIM_Base_SetConfig+0x140>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a16      	ldr	r2, [pc, #88]	@ (8005944 <TIM_Base_SetConfig+0x144>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <TIM_Base_SetConfig+0x148>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d103      	bne.n	8005900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d105      	bne.n	800591e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	611a      	str	r2, [r3, #16]
  }
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e042      	b.n	8005a20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fb fc75 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	@ 0x24
 80059b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fe1e 	bl	8006614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8b3 	bl	8005b44 <UART_SetConfig>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e01b      	b.n	8005a20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fe9d 	bl	8006758 <UART_CheckIdleState>
 8005a1e:	4603      	mov	r3, r0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d17b      	bne.n	8005b3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_UART_Transmit+0x26>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e074      	b.n	8005b3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2221      	movs	r2, #33	@ 0x21
 8005a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a62:	f7fb fdad 	bl	80015c0 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a80:	d108      	bne.n	8005a94 <HAL_UART_Transmit+0x6c>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e003      	b.n	8005a9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a9c:	e030      	b.n	8005b00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2180      	movs	r1, #128	@ 0x80
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 feff 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e03d      	b.n	8005b3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	3302      	adds	r3, #2
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e007      	b.n	8005aee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1c8      	bne.n	8005a9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2200      	movs	r2, #0
 8005b14:	2140      	movs	r1, #64	@ 0x40
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fec8 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b092      	sub	sp, #72	@ 0x48
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4bbe      	ldr	r3, [pc, #760]	@ (8005e6c <UART_SetConfig+0x328>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4ab3      	ldr	r2, [pc, #716]	@ (8005e70 <UART_SetConfig+0x32c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bac:	4313      	orrs	r3, r2
 8005bae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	4baf      	ldr	r3, [pc, #700]	@ (8005e74 <UART_SetConfig+0x330>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	f023 010f 	bic.w	r1, r3, #15
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4aa6      	ldr	r2, [pc, #664]	@ (8005e78 <UART_SetConfig+0x334>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d177      	bne.n	8005cd4 <UART_SetConfig+0x190>
 8005be4:	4ba5      	ldr	r3, [pc, #660]	@ (8005e7c <UART_SetConfig+0x338>)
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bec:	2b28      	cmp	r3, #40	@ 0x28
 8005bee:	d86d      	bhi.n	8005ccc <UART_SetConfig+0x188>
 8005bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0xb4>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c9d 	.word	0x08005c9d
 8005bfc:	08005ccd 	.word	0x08005ccd
 8005c00:	08005ccd 	.word	0x08005ccd
 8005c04:	08005ccd 	.word	0x08005ccd
 8005c08:	08005ccd 	.word	0x08005ccd
 8005c0c:	08005ccd 	.word	0x08005ccd
 8005c10:	08005ccd 	.word	0x08005ccd
 8005c14:	08005ccd 	.word	0x08005ccd
 8005c18:	08005ca5 	.word	0x08005ca5
 8005c1c:	08005ccd 	.word	0x08005ccd
 8005c20:	08005ccd 	.word	0x08005ccd
 8005c24:	08005ccd 	.word	0x08005ccd
 8005c28:	08005ccd 	.word	0x08005ccd
 8005c2c:	08005ccd 	.word	0x08005ccd
 8005c30:	08005ccd 	.word	0x08005ccd
 8005c34:	08005ccd 	.word	0x08005ccd
 8005c38:	08005cad 	.word	0x08005cad
 8005c3c:	08005ccd 	.word	0x08005ccd
 8005c40:	08005ccd 	.word	0x08005ccd
 8005c44:	08005ccd 	.word	0x08005ccd
 8005c48:	08005ccd 	.word	0x08005ccd
 8005c4c:	08005ccd 	.word	0x08005ccd
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005ccd 	.word	0x08005ccd
 8005c58:	08005cb5 	.word	0x08005cb5
 8005c5c:	08005ccd 	.word	0x08005ccd
 8005c60:	08005ccd 	.word	0x08005ccd
 8005c64:	08005ccd 	.word	0x08005ccd
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005ccd 	.word	0x08005ccd
 8005c70:	08005ccd 	.word	0x08005ccd
 8005c74:	08005ccd 	.word	0x08005ccd
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005ccd 	.word	0x08005ccd
 8005c88:	08005ccd 	.word	0x08005ccd
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005ccd 	.word	0x08005ccd
 8005c94:	08005ccd 	.word	0x08005ccd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e222      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e21e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e21a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e216      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e212      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cc4:	2340      	movs	r3, #64	@ 0x40
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e20e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e20a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a69      	ldr	r2, [pc, #420]	@ (8005e80 <UART_SetConfig+0x33c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d130      	bne.n	8005d40 <UART_SetConfig+0x1fc>
 8005cde:	4b67      	ldr	r3, [pc, #412]	@ (8005e7c <UART_SetConfig+0x338>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d826      	bhi.n	8005d38 <UART_SetConfig+0x1f4>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0x1ac>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e1ec      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e1e8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e1e4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e1e0      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e1dc      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d30:	2340      	movs	r3, #64	@ 0x40
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e1d8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d38:	2380      	movs	r3, #128	@ 0x80
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e1d4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a4f      	ldr	r2, [pc, #316]	@ (8005e84 <UART_SetConfig+0x340>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d130      	bne.n	8005dac <UART_SetConfig+0x268>
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e7c <UART_SetConfig+0x338>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d826      	bhi.n	8005da4 <UART_SetConfig+0x260>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0x218>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d75 	.word	0x08005d75
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e1b6      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e1b2      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e1ae      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e1aa      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d94:	2320      	movs	r3, #32
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e1a6      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d9c:	2340      	movs	r3, #64	@ 0x40
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e1a2      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005da4:	2380      	movs	r3, #128	@ 0x80
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e19e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a35      	ldr	r2, [pc, #212]	@ (8005e88 <UART_SetConfig+0x344>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d130      	bne.n	8005e18 <UART_SetConfig+0x2d4>
 8005db6:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <UART_SetConfig+0x338>)
 8005db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d826      	bhi.n	8005e10 <UART_SetConfig+0x2cc>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0x284>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005df1 	.word	0x08005df1
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e180      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e17c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e178      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e174      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e170      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	@ 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e16c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e168      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e8c <UART_SetConfig+0x348>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d142      	bne.n	8005ea8 <UART_SetConfig+0x364>
 8005e22:	4b16      	ldr	r3, [pc, #88]	@ (8005e7c <UART_SetConfig+0x338>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d838      	bhi.n	8005ea0 <UART_SetConfig+0x35c>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x2f0>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e14a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e146      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e142      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e13e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e6c:	cfff69f3 	.word	0xcfff69f3
 8005e70:	58000c00 	.word	0x58000c00
 8005e74:	11fff4ff 	.word	0x11fff4ff
 8005e78:	40011000 	.word	0x40011000
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	40004400 	.word	0x40004400
 8005e84:	40004800 	.word	0x40004800
 8005e88:	40004c00 	.word	0x40004c00
 8005e8c:	40005000 	.word	0x40005000
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e128      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e98:	2340      	movs	r3, #64	@ 0x40
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e124      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e120      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4acb      	ldr	r2, [pc, #812]	@ (80061dc <UART_SetConfig+0x698>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d176      	bne.n	8005fa0 <UART_SetConfig+0x45c>
 8005eb2:	4bcb      	ldr	r3, [pc, #812]	@ (80061e0 <UART_SetConfig+0x69c>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eba:	2b28      	cmp	r3, #40	@ 0x28
 8005ebc:	d86c      	bhi.n	8005f98 <UART_SetConfig+0x454>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0x380>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f69 	.word	0x08005f69
 8005ec8:	08005f99 	.word	0x08005f99
 8005ecc:	08005f99 	.word	0x08005f99
 8005ed0:	08005f99 	.word	0x08005f99
 8005ed4:	08005f99 	.word	0x08005f99
 8005ed8:	08005f99 	.word	0x08005f99
 8005edc:	08005f99 	.word	0x08005f99
 8005ee0:	08005f99 	.word	0x08005f99
 8005ee4:	08005f71 	.word	0x08005f71
 8005ee8:	08005f99 	.word	0x08005f99
 8005eec:	08005f99 	.word	0x08005f99
 8005ef0:	08005f99 	.word	0x08005f99
 8005ef4:	08005f99 	.word	0x08005f99
 8005ef8:	08005f99 	.word	0x08005f99
 8005efc:	08005f99 	.word	0x08005f99
 8005f00:	08005f99 	.word	0x08005f99
 8005f04:	08005f79 	.word	0x08005f79
 8005f08:	08005f99 	.word	0x08005f99
 8005f0c:	08005f99 	.word	0x08005f99
 8005f10:	08005f99 	.word	0x08005f99
 8005f14:	08005f99 	.word	0x08005f99
 8005f18:	08005f99 	.word	0x08005f99
 8005f1c:	08005f99 	.word	0x08005f99
 8005f20:	08005f99 	.word	0x08005f99
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f99 	.word	0x08005f99
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e0bc      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e0b8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e0b4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e0b0      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e0ac      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f90:	2340      	movs	r3, #64	@ 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e0a8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f98:	2380      	movs	r3, #128	@ 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e0a4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a8f      	ldr	r2, [pc, #572]	@ (80061e4 <UART_SetConfig+0x6a0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d130      	bne.n	800600c <UART_SetConfig+0x4c8>
 8005faa:	4b8d      	ldr	r3, [pc, #564]	@ (80061e0 <UART_SetConfig+0x69c>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d826      	bhi.n	8006004 <UART_SetConfig+0x4c0>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x478>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e086      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e082      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e07e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e07a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e076      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e072      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006004:	2380      	movs	r3, #128	@ 0x80
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e06e      	b.n	80060ea <UART_SetConfig+0x5a6>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a75      	ldr	r2, [pc, #468]	@ (80061e8 <UART_SetConfig+0x6a4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d130      	bne.n	8006078 <UART_SetConfig+0x534>
 8006016:	4b72      	ldr	r3, [pc, #456]	@ (80061e0 <UART_SetConfig+0x69c>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b05      	cmp	r3, #5
 8006020:	d826      	bhi.n	8006070 <UART_SetConfig+0x52c>
 8006022:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x4e4>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006041 	.word	0x08006041
 800602c:	08006049 	.word	0x08006049
 8006030:	08006051 	.word	0x08006051
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e050      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e04c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e048      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e044      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e040      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006068:	2340      	movs	r3, #64	@ 0x40
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e03c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e038      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5b      	ldr	r2, [pc, #364]	@ (80061ec <UART_SetConfig+0x6a8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d130      	bne.n	80060e4 <UART_SetConfig+0x5a0>
 8006082:	4b57      	ldr	r3, [pc, #348]	@ (80061e0 <UART_SetConfig+0x69c>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d826      	bhi.n	80060dc <UART_SetConfig+0x598>
 800608e:	a201      	add	r2, pc, #4	@ (adr r2, 8006094 <UART_SetConfig+0x550>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2302      	movs	r3, #2
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e01a      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e016      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e012      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e00e      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e00a      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060d4:	2340      	movs	r3, #64	@ 0x40
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e006      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060dc:	2380      	movs	r3, #128	@ 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	@ (80061ec <UART_SetConfig+0x6a8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f040 80f8 	bne.w	80062e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	dc46      	bgt.n	800618c <UART_SetConfig+0x648>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f2c0 8082 	blt.w	8006208 <UART_SetConfig+0x6c4>
 8006104:	3b02      	subs	r3, #2
 8006106:	2b1e      	cmp	r3, #30
 8006108:	d87e      	bhi.n	8006208 <UART_SetConfig+0x6c4>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0x5cc>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006193 	.word	0x08006193
 8006114:	08006209 	.word	0x08006209
 8006118:	0800619b 	.word	0x0800619b
 800611c:	08006209 	.word	0x08006209
 8006120:	08006209 	.word	0x08006209
 8006124:	08006209 	.word	0x08006209
 8006128:	080061ab 	.word	0x080061ab
 800612c:	08006209 	.word	0x08006209
 8006130:	08006209 	.word	0x08006209
 8006134:	08006209 	.word	0x08006209
 8006138:	08006209 	.word	0x08006209
 800613c:	08006209 	.word	0x08006209
 8006140:	08006209 	.word	0x08006209
 8006144:	08006209 	.word	0x08006209
 8006148:	080061bb 	.word	0x080061bb
 800614c:	08006209 	.word	0x08006209
 8006150:	08006209 	.word	0x08006209
 8006154:	08006209 	.word	0x08006209
 8006158:	08006209 	.word	0x08006209
 800615c:	08006209 	.word	0x08006209
 8006160:	08006209 	.word	0x08006209
 8006164:	08006209 	.word	0x08006209
 8006168:	08006209 	.word	0x08006209
 800616c:	08006209 	.word	0x08006209
 8006170:	08006209 	.word	0x08006209
 8006174:	08006209 	.word	0x08006209
 8006178:	08006209 	.word	0x08006209
 800617c:	08006209 	.word	0x08006209
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	080061fb 	.word	0x080061fb
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d037      	beq.n	8006200 <UART_SetConfig+0x6bc>
 8006190:	e03a      	b.n	8006208 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006192:	f7fe fd09 	bl	8004ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006196:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006198:	e03c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fd18 	bl	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a8:	e034      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061aa:	f107 0318 	add.w	r3, r7, #24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fe64 	bl	8004e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b8:	e02c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <UART_SetConfig+0x69c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <UART_SetConfig+0x69c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	08db      	lsrs	r3, r3, #3
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	4a07      	ldr	r2, [pc, #28]	@ (80061f0 <UART_SetConfig+0x6ac>)
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d8:	e01c      	b.n	8006214 <UART_SetConfig+0x6d0>
 80061da:	bf00      	nop
 80061dc:	40011400 	.word	0x40011400
 80061e0:	58024400 	.word	0x58024400
 80061e4:	40007800 	.word	0x40007800
 80061e8:	40007c00 	.word	0x40007c00
 80061ec:	58000c00 	.word	0x58000c00
 80061f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b9d      	ldr	r3, [pc, #628]	@ (800646c <UART_SetConfig+0x928>)
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f8:	e00c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061fa:	4b9d      	ldr	r3, [pc, #628]	@ (8006470 <UART_SetConfig+0x92c>)
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e009      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006206:	e005      	b.n	8006214 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006212:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 81de 	beq.w	80065d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	4a94      	ldr	r2, [pc, #592]	@ (8006474 <UART_SetConfig+0x930>)
 8006222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006226:	461a      	mov	r2, r3
 8006228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623c:	429a      	cmp	r2, r3
 800623e:	d305      	bcc.n	800624c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006252:	e1c1      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006256:	2200      	movs	r2, #0
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	60fa      	str	r2, [r7, #12]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	4a84      	ldr	r2, [pc, #528]	@ (8006474 <UART_SetConfig+0x930>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	b29b      	uxth	r3, r3
 8006268:	2200      	movs	r2, #0
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006276:	f7fa f833 	bl	80002e0 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	020b      	lsls	r3, r1, #8
 800628c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006290:	0202      	lsls	r2, r0, #8
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	6849      	ldr	r1, [r1, #4]
 8006296:	0849      	lsrs	r1, r1, #1
 8006298:	2000      	movs	r0, #0
 800629a:	460c      	mov	r4, r1
 800629c:	4605      	mov	r5, r0
 800629e:	eb12 0804 	adds.w	r8, r2, r4
 80062a2:	eb43 0905 	adc.w	r9, r3, r5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	469a      	mov	sl, r3
 80062ae:	4693      	mov	fp, r2
 80062b0:	4652      	mov	r2, sl
 80062b2:	465b      	mov	r3, fp
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa f812 	bl	80002e0 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ca:	d308      	bcc.n	80062de <UART_SetConfig+0x79a>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d2:	d204      	bcs.n	80062de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	e17c      	b.n	80065d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062e4:	e178      	b.n	80065d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ee:	f040 80c5 	bne.w	800647c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	dc48      	bgt.n	800638c <UART_SetConfig+0x848>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db7b      	blt.n	80063f6 <UART_SetConfig+0x8b2>
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d879      	bhi.n	80063f6 <UART_SetConfig+0x8b2>
 8006302:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <UART_SetConfig+0x7c4>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006393 	.word	0x08006393
 800630c:	0800639b 	.word	0x0800639b
 8006310:	080063f7 	.word	0x080063f7
 8006314:	080063f7 	.word	0x080063f7
 8006318:	080063a3 	.word	0x080063a3
 800631c:	080063f7 	.word	0x080063f7
 8006320:	080063f7 	.word	0x080063f7
 8006324:	080063f7 	.word	0x080063f7
 8006328:	080063b3 	.word	0x080063b3
 800632c:	080063f7 	.word	0x080063f7
 8006330:	080063f7 	.word	0x080063f7
 8006334:	080063f7 	.word	0x080063f7
 8006338:	080063f7 	.word	0x080063f7
 800633c:	080063f7 	.word	0x080063f7
 8006340:	080063f7 	.word	0x080063f7
 8006344:	080063f7 	.word	0x080063f7
 8006348:	080063c3 	.word	0x080063c3
 800634c:	080063f7 	.word	0x080063f7
 8006350:	080063f7 	.word	0x080063f7
 8006354:	080063f7 	.word	0x080063f7
 8006358:	080063f7 	.word	0x080063f7
 800635c:	080063f7 	.word	0x080063f7
 8006360:	080063f7 	.word	0x080063f7
 8006364:	080063f7 	.word	0x080063f7
 8006368:	080063f7 	.word	0x080063f7
 800636c:	080063f7 	.word	0x080063f7
 8006370:	080063f7 	.word	0x080063f7
 8006374:	080063f7 	.word	0x080063f7
 8006378:	080063f7 	.word	0x080063f7
 800637c:	080063f7 	.word	0x080063f7
 8006380:	080063f7 	.word	0x080063f7
 8006384:	080063f7 	.word	0x080063f7
 8006388:	080063e9 	.word	0x080063e9
 800638c:	2b40      	cmp	r3, #64	@ 0x40
 800638e:	d02e      	beq.n	80063ee <UART_SetConfig+0x8aa>
 8006390:	e031      	b.n	80063f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006392:	f7fd f991 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8006396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006398:	e033      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639a:	f7fd f9a3 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
 800639e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063a0:	e02f      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fc14 	bl	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b0:	e027      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063b2:	f107 0318 	add.w	r3, r7, #24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fd60 	bl	8004e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e01f      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006478 <UART_SetConfig+0x934>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <UART_SetConfig+0x934>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	4a24      	ldr	r2, [pc, #144]	@ (800646c <UART_SetConfig+0x928>)
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063e0:	e00f      	b.n	8006402 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063e2:	4b22      	ldr	r3, [pc, #136]	@ (800646c <UART_SetConfig+0x928>)
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e6:	e00c      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063e8:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <UART_SetConfig+0x92c>)
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ec:	e009      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f4:	e005      	b.n	8006402 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80e7 	beq.w	80065d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	4a19      	ldr	r2, [pc, #100]	@ (8006474 <UART_SetConfig+0x930>)
 8006410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006414:	461a      	mov	r2, r3
 8006416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006418:	fbb3 f3f2 	udiv	r3, r3, r2
 800641c:	005a      	lsls	r2, r3, #1
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	085b      	lsrs	r3, r3, #1
 8006424:	441a      	add	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	2b0f      	cmp	r3, #15
 8006434:	d916      	bls.n	8006464 <UART_SetConfig+0x920>
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643c:	d212      	bcs.n	8006464 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	b29b      	uxth	r3, r3
 8006442:	f023 030f 	bic.w	r3, r3, #15
 8006446:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	b29a      	uxth	r2, r3
 8006454:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006456:	4313      	orrs	r3, r2
 8006458:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e0b9      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800646a:	e0b5      	b.n	80065d8 <UART_SetConfig+0xa94>
 800646c:	03d09000 	.word	0x03d09000
 8006470:	003d0900 	.word	0x003d0900
 8006474:	0800a898 	.word	0x0800a898
 8006478:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800647c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006480:	2b20      	cmp	r3, #32
 8006482:	dc49      	bgt.n	8006518 <UART_SetConfig+0x9d4>
 8006484:	2b00      	cmp	r3, #0
 8006486:	db7c      	blt.n	8006582 <UART_SetConfig+0xa3e>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d87a      	bhi.n	8006582 <UART_SetConfig+0xa3e>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0x950>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	0800651f 	.word	0x0800651f
 8006498:	08006527 	.word	0x08006527
 800649c:	08006583 	.word	0x08006583
 80064a0:	08006583 	.word	0x08006583
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	08006583 	.word	0x08006583
 80064ac:	08006583 	.word	0x08006583
 80064b0:	08006583 	.word	0x08006583
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006583 	.word	0x08006583
 80064bc:	08006583 	.word	0x08006583
 80064c0:	08006583 	.word	0x08006583
 80064c4:	08006583 	.word	0x08006583
 80064c8:	08006583 	.word	0x08006583
 80064cc:	08006583 	.word	0x08006583
 80064d0:	08006583 	.word	0x08006583
 80064d4:	0800654f 	.word	0x0800654f
 80064d8:	08006583 	.word	0x08006583
 80064dc:	08006583 	.word	0x08006583
 80064e0:	08006583 	.word	0x08006583
 80064e4:	08006583 	.word	0x08006583
 80064e8:	08006583 	.word	0x08006583
 80064ec:	08006583 	.word	0x08006583
 80064f0:	08006583 	.word	0x08006583
 80064f4:	08006583 	.word	0x08006583
 80064f8:	08006583 	.word	0x08006583
 80064fc:	08006583 	.word	0x08006583
 8006500:	08006583 	.word	0x08006583
 8006504:	08006583 	.word	0x08006583
 8006508:	08006583 	.word	0x08006583
 800650c:	08006583 	.word	0x08006583
 8006510:	08006583 	.word	0x08006583
 8006514:	08006575 	.word	0x08006575
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d02e      	beq.n	800657a <UART_SetConfig+0xa36>
 800651c:	e031      	b.n	8006582 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fd f8cb 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8006522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006524:	e033      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006526:	f7fd f8dd 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
 800652a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800652c:	e02f      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fb4e 	bl	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653c:	e027      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fc9a 	bl	8004e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654c:	e01f      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654e:	4b2d      	ldr	r3, [pc, #180]	@ (8006604 <UART_SetConfig+0xac0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800655a:	4b2a      	ldr	r3, [pc, #168]	@ (8006604 <UART_SetConfig+0xac0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	4a28      	ldr	r2, [pc, #160]	@ (8006608 <UART_SetConfig+0xac4>)
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800656c:	e00f      	b.n	800658e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800656e:	4b26      	ldr	r3, [pc, #152]	@ (8006608 <UART_SetConfig+0xac4>)
 8006570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006572:	e00c      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006574:	4b25      	ldr	r3, [pc, #148]	@ (800660c <UART_SetConfig+0xac8>)
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800658c:	bf00      	nop
    }

    if (pclk != 0U)
 800658e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d021      	beq.n	80065d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	4a1d      	ldr	r2, [pc, #116]	@ (8006610 <UART_SetConfig+0xacc>)
 800659a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800659e:	461a      	mov	r2, r3
 80065a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	441a      	add	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	2b0f      	cmp	r3, #15
 80065bc:	d909      	bls.n	80065d2 <UART_SetConfig+0xa8e>
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c4:	d205      	bcs.n	80065d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	e002      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2201      	movs	r2, #1
 80065dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3748      	adds	r7, #72	@ 0x48
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	03d09000 	.word	0x03d09000
 800660c:	003d0900 	.word	0x003d0900
 8006610:	0800a898 	.word	0x0800a898

08006614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01a      	beq.n	800672a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006712:	d10a      	bne.n	800672a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b098      	sub	sp, #96	@ 0x60
 800675c:	af02      	add	r7, sp, #8
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006768:	f7fa ff2a 	bl	80015c0 <HAL_GetTick>
 800676c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d12f      	bne.n	80067dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	2200      	movs	r2, #0
 8006786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f88e 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d022      	beq.n	80067dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e6      	bne.n	8006796 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e063      	b.n	80068a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d149      	bne.n	800687e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067f2:	2200      	movs	r2, #0
 80067f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f857 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d03c      	beq.n	800687e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	623b      	str	r3, [r7, #32]
   return(result);
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006822:	633b      	str	r3, [r7, #48]	@ 0x30
 8006824:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e6      	bne.n	8006804 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	60fb      	str	r3, [r7, #12]
   return(result);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006856:	61fa      	str	r2, [r7, #28]
 8006858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	69b9      	ldr	r1, [r7, #24]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	617b      	str	r3, [r7, #20]
   return(result);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e5      	bne.n	8006836 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e012      	b.n	80068a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3758      	adds	r7, #88	@ 0x58
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	e04f      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c4:	d04b      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fa fe7b 	bl	80015c0 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x30>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e04e      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d037      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b80      	cmp	r3, #128	@ 0x80
 80068f2:	d034      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d031      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b08      	cmp	r3, #8
 8006906:	d110      	bne.n	800692a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2208      	movs	r2, #8
 800690e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f839 	bl	8006988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2208      	movs	r2, #8
 800691a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e029      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006938:	d111      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f81f 	bl	8006988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e00f      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d0a0      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b095      	sub	sp, #84	@ 0x54
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e6      	bne.n	8006990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a50 <UART_EndRxTransfer+0xc8>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e5      	bne.n	80069c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d118      	bne.n	8006a30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f023 0310 	bic.w	r3, r3, #16
 8006a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a44:	bf00      	nop
 8006a46:	3754      	adds	r7, #84	@ 0x54
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	effffffe 	.word	0xeffffffe

08006a54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UARTEx_DisableFifoMode+0x16>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e027      	b.n	8006aba <HAL_UARTEx_DisableFifoMode+0x66>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2224      	movs	r2, #36	@ 0x24
 8006a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0201 	bic.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e02d      	b.n	8006b3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2224      	movs	r2, #36	@ 0x24
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f850 	bl	8006bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e02d      	b.n	8006bb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2224      	movs	r2, #36	@ 0x24
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f812 	bl	8006bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006be0:	e031      	b.n	8006c46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006be2:	2310      	movs	r3, #16
 8006be4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006be6:	2310      	movs	r3, #16
 8006be8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	0e5b      	lsrs	r3, r3, #25
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	0f5b      	lsrs	r3, r3, #29
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	7b3a      	ldrb	r2, [r7, #12]
 8006c0e:	4911      	ldr	r1, [pc, #68]	@ (8006c54 <UARTEx_SetNbDataToProcess+0x94>)
 8006c10:	5c8a      	ldrb	r2, [r1, r2]
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c16:	7b3a      	ldrb	r2, [r7, #12]
 8006c18:	490f      	ldr	r1, [pc, #60]	@ (8006c58 <UARTEx_SetNbDataToProcess+0x98>)
 8006c1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	7b7a      	ldrb	r2, [r7, #13]
 8006c2c:	4909      	ldr	r1, [pc, #36]	@ (8006c54 <UARTEx_SetNbDataToProcess+0x94>)
 8006c2e:	5c8a      	ldrb	r2, [r1, r2]
 8006c30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c34:	7b7a      	ldrb	r2, [r7, #13]
 8006c36:	4908      	ldr	r1, [pc, #32]	@ (8006c58 <UARTEx_SetNbDataToProcess+0x98>)
 8006c38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	0800a8b0 	.word	0x0800a8b0
 8006c58:	0800a8b8 	.word	0x0800a8b8

08006c5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	f107 001c 	add.w	r0, r7, #28
 8006c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d121      	bne.n	8006cba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	4b2c      	ldr	r3, [pc, #176]	@ (8006d38 <USB_CoreInit+0xdc>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d105      	bne.n	8006cae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 faaa 	bl	8007208 <USB_CoreReset>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	e01b      	b.n	8006cf2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa9e 	bl	8007208 <USB_CoreReset>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ce4:	e005      	b.n	8006cf2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cf2:	7fbb      	ldrb	r3, [r7, #30]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d116      	bne.n	8006d26 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <USB_CoreInit+0xe0>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f043 0206 	orr.w	r2, r3, #6
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f043 0220 	orr.w	r2, r3, #32
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d32:	b004      	add	sp, #16
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	ffbdffbf 	.word	0xffbdffbf
 8006d3c:	03ee0000 	.word	0x03ee0000

08006d40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 0201 	bic.w	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d115      	bne.n	8006db0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d90:	200a      	movs	r0, #10
 8006d92:	f7fa fc21 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	330a      	adds	r3, #10
 8006d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa25 	bl	80071ec <USB_GetMode>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d01e      	beq.n	8006de6 <USB_SetCurrentMode+0x84>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dac:	d9f0      	bls.n	8006d90 <USB_SetCurrentMode+0x2e>
 8006dae:	e01a      	b.n	8006de6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d115      	bne.n	8006de2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dc2:	200a      	movs	r0, #10
 8006dc4:	f7fa fc08 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	330a      	adds	r3, #10
 8006dcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa0c 	bl	80071ec <USB_GetMode>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <USB_SetCurrentMode+0x84>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dde:	d9f0      	bls.n	8006dc2 <USB_SetCurrentMode+0x60>
 8006de0:	e001      	b.n	8006de6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e005      	b.n	8006df2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dea:	d101      	bne.n	8006df0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	e009      	b.n	8006e30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3340      	adds	r3, #64	@ 0x40
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b0e      	cmp	r3, #14
 8006e34:	d9f2      	bls.n	8006e1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d11c      	bne.n	8006e78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e005      	b.n	8006e84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e90:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d10d      	bne.n	8006eb4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f968 	bl	8007178 <USB_SetDevSpeed>
 8006ea8:	e008      	b.n	8006ebc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f963 	bl	8007178 <USB_SetDevSpeed>
 8006eb2:	e003      	b.n	8006ebc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006eb4:	2103      	movs	r1, #3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f95e 	bl	8007178 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8fa 	bl	80070b8 <USB_FlushTxFifo>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f924 	bl	800711c <USB_FlushRxFifo>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e043      	b.n	8006f90 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f1e:	d118      	bne.n	8006f52 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f32:	461a      	mov	r2, r3
 8006f34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e013      	b.n	8006f64 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e008      	b.n	8006f64 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f82:	461a      	mov	r2, r3
 8006f84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f94:	461a      	mov	r2, r3
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d3b5      	bcc.n	8006f08 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	e043      	b.n	800702a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb8:	d118      	bne.n	8006fec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e013      	b.n	8006ffe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e008      	b.n	8006ffe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	2300      	movs	r3, #0
 800700e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701c:	461a      	mov	r2, r3
 800701e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	3301      	adds	r3, #1
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800702e:	461a      	mov	r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	4293      	cmp	r3, r2
 8007034:	d3b5      	bcc.n	8006fa2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007048:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007056:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007058:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800705c:	2b00      	cmp	r3, #0
 800705e:	d105      	bne.n	800706c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f043 0210 	orr.w	r2, r3, #16
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <USB_DevInit+0x2b4>)
 8007072:	4313      	orrs	r3, r2
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007078:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f043 0208 	orr.w	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800708c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <USB_DevInit+0x2b8>)
 800709a:	4313      	orrs	r3, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ac:	b004      	add	sp, #16
 80070ae:	4770      	bx	lr
 80070b0:	803c3800 	.word	0x803c3800
 80070b4:	40000004 	.word	0x40000004

080070b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d2:	d901      	bls.n	80070d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e01b      	b.n	8007110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	daf2      	bge.n	80070c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	019b      	lsls	r3, r3, #6
 80070e8:	f043 0220 	orr.w	r2, r3, #32
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070fc:	d901      	bls.n	8007102 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e006      	b.n	8007110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b20      	cmp	r3, #32
 800710c:	d0f0      	beq.n	80070f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007134:	d901      	bls.n	800713a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e018      	b.n	800716c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	daf2      	bge.n	8007128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2210      	movs	r2, #16
 800714a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007158:	d901      	bls.n	800715e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e006      	b.n	800716c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d0f0      	beq.n	800714c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0301 	and.w	r3, r3, #1
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007220:	d901      	bls.n	8007226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e01b      	b.n	800725e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	daf2      	bge.n	8007214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f043 0201 	orr.w	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724a:	d901      	bls.n	8007250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d0f0      	beq.n	800723e <USB_CoreReset+0x36>

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <__NVIC_SetPriority>:
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	6039      	str	r1, [r7, #0]
 8007276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	db0a      	blt.n	8007296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	490c      	ldr	r1, [pc, #48]	@ (80072b8 <__NVIC_SetPriority+0x4c>)
 8007286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800728a:	0112      	lsls	r2, r2, #4
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	440b      	add	r3, r1
 8007290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007294:	e00a      	b.n	80072ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	4908      	ldr	r1, [pc, #32]	@ (80072bc <__NVIC_SetPriority+0x50>)
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3b04      	subs	r3, #4
 80072a4:	0112      	lsls	r2, r2, #4
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	440b      	add	r3, r1
 80072aa:	761a      	strb	r2, [r3, #24]
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	e000e100 	.word	0xe000e100
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <SysTick_Handler+0x1c>)
 80072c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072c8:	f002 f8c4 	bl	8009454 <xTaskGetSchedulerState>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d001      	beq.n	80072d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072d2:	f002 fef1 	bl	800a0b8 <xPortSysTickHandler>
  }
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	e000e010 	.word	0xe000e010

080072e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072e4:	2100      	movs	r1, #0
 80072e6:	f06f 0004 	mvn.w	r0, #4
 80072ea:	f7ff ffbf 	bl	800726c <__NVIC_SetPriority>
#endif
}
 80072ee:	bf00      	nop
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fa:	f3ef 8305 	mrs	r3, IPSR
 80072fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007306:	f06f 0305 	mvn.w	r3, #5
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e00c      	b.n	8007328 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800730e:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <osKernelInitialize+0x44>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <osKernelInitialize+0x44>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	e002      	b.n	8007328 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007328:	687b      	ldr	r3, [r7, #4]
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	24000804 	.word	0x24000804

0800733c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007342:	f3ef 8305 	mrs	r3, IPSR
 8007346:	603b      	str	r3, [r7, #0]
  return(result);
 8007348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <osKernelStart+0x1a>
    stat = osErrorISR;
 800734e:	f06f 0305 	mvn.w	r3, #5
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e010      	b.n	8007378 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007356:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <osKernelStart+0x48>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d109      	bne.n	8007372 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800735e:	f7ff ffbf 	bl	80072e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007362:	4b08      	ldr	r3, [pc, #32]	@ (8007384 <osKernelStart+0x48>)
 8007364:	2202      	movs	r2, #2
 8007366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007368:	f001 fb6e 	bl	8008a48 <vTaskStartScheduler>
      stat = osOK;
 800736c:	2300      	movs	r3, #0
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	e002      	b.n	8007378 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007378:	687b      	ldr	r3, [r7, #4]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	24000804 	.word	0x24000804

08007388 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	@ 0x38
 800738c:	af04      	add	r7, sp, #16
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007398:	f3ef 8305 	mrs	r3, IPSR
 800739c:	617b      	str	r3, [r7, #20]
  return(result);
 800739e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d17e      	bne.n	80074a2 <osThreadNew+0x11a>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d07b      	beq.n	80074a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073aa:	2380      	movs	r3, #128	@ 0x80
 80073ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073ae:	2318      	movs	r3, #24
 80073b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d045      	beq.n	800744e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <osThreadNew+0x48>
        name = attr->name;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <osThreadNew+0x6e>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b38      	cmp	r3, #56	@ 0x38
 80073e8:	d805      	bhi.n	80073f6 <osThreadNew+0x6e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <osThreadNew+0x72>
        return (NULL);
 80073f6:	2300      	movs	r3, #0
 80073f8:	e054      	b.n	80074a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <osThreadNew+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	2ba7      	cmp	r3, #167	@ 0xa7
 8007418:	d90a      	bls.n	8007430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <osThreadNew+0xa8>
        mem = 1;
 800742a:	2301      	movs	r3, #1
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e010      	b.n	8007452 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10c      	bne.n	8007452 <osThreadNew+0xca>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <osThreadNew+0xca>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <osThreadNew+0xca>
          mem = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e001      	b.n	8007452 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d110      	bne.n	800747a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007460:	9202      	str	r2, [sp, #8]
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f001 f8f6 	bl	8008660 <xTaskCreateStatic>
 8007474:	4603      	mov	r3, r0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e013      	b.n	80074a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d110      	bne.n	80074a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	b29a      	uxth	r2, r3
 8007484:	f107 0310 	add.w	r3, r7, #16
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f001 f944 	bl	8008720 <xTaskCreate>
 8007498:	4603      	mov	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <osThreadNew+0x11a>
            hTask = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074a2:	693b      	ldr	r3, [r7, #16]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	@ 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <osDelay+0x1c>
    stat = osErrorISR;
 80074c0:	f06f 0305 	mvn.w	r3, #5
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e007      	b.n	80074d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fa82 	bl	80089dc <vTaskDelay>
    }
  }

  return (stat);
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ee:	f3ef 8305 	mrs	r3, IPSR
 80074f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80074f4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d12d      	bne.n	8007556 <osEventFlagsNew+0x74>
    mem = -1;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074fe:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d015      	beq.n	8007532 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d006      	beq.n	800751c <osEventFlagsNew+0x3a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b1f      	cmp	r3, #31
 8007514:	d902      	bls.n	800751c <osEventFlagsNew+0x3a>
        mem = 1;
 8007516:	2301      	movs	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	e00c      	b.n	8007536 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <osEventFlagsNew+0x54>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <osEventFlagsNew+0x54>
          mem = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e001      	b.n	8007536 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d106      	bne.n	800754a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f8e9 	bl	8007718 <xEventGroupCreateStatic>
 8007546:	6178      	str	r0, [r7, #20]
 8007548:	e005      	b.n	8007556 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007550:	f000 f91b 	bl	800778a <xEventGroupCreate>
 8007554:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <osEventFlagsSet+0x1c>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800757a:	d303      	bcc.n	8007584 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800757c:	f06f 0303 	mvn.w	r3, #3
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e028      	b.n	80075d6 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007584:	f3ef 8305 	mrs	r3, IPSR
 8007588:	60fb      	str	r3, [r7, #12]
  return(result);
 800758a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01d      	beq.n	80075cc <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007594:	f107 0308 	add.w	r3, r7, #8
 8007598:	461a      	mov	r2, r3
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6938      	ldr	r0, [r7, #16]
 800759e:	f000 fa9d 	bl	8007adc <xEventGroupSetBitsFromISR>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80075a8:	f06f 0302 	mvn.w	r3, #2
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e012      	b.n	80075d6 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <osEventFlagsSet+0x76>
 80075ba:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <osEventFlagsSet+0x80>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	e004      	b.n	80075d6 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6938      	ldr	r0, [r7, #16]
 80075d0:	f000 f9c8 	bl	8007964 <xEventGroupSetBits>
 80075d4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80075d6:	697b      	ldr	r3, [r7, #20]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08c      	sub	sp, #48	@ 0x30
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <osEventFlagsWait+0x20>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007602:	d303      	bcc.n	800760c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007604:	f06f 0303 	mvn.w	r3, #3
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	e04b      	b.n	80076a4 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800760c:	f3ef 8305 	mrs	r3, IPSR
 8007610:	617b      	str	r3, [r7, #20]
  return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007618:	f06f 0305 	mvn.w	r3, #5
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e041      	b.n	80076a4 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800762a:	2301      	movs	r3, #1
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
 800762e:	e001      	b.n	8007634 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007630:	2300      	movs	r3, #0
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800763e:	2300      	movs	r3, #0
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	e001      	b.n	8007648 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	6a3a      	ldr	r2, [r7, #32]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	69b8      	ldr	r0, [r7, #24]
 8007654:	f000 f8b4 	bl	80077c0 <xEventGroupWaitBits>
 8007658:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4013      	ands	r3, r2
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	d019      	beq.n	80076a4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007676:	f06f 0301 	mvn.w	r3, #1
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e012      	b.n	80076a4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800767e:	f06f 0302 	mvn.w	r3, #2
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e00e      	b.n	80076a4 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007696:	f06f 0301 	mvn.w	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	e002      	b.n	80076a4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800769e:	f06f 0302 	mvn.w	r3, #2
 80076a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80076a4:	69fb      	ldr	r3, [r7, #28]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3728      	adds	r7, #40	@ 0x28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a07      	ldr	r2, [pc, #28]	@ (80076dc <vApplicationGetIdleTaskMemory+0x2c>)
 80076c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a06      	ldr	r2, [pc, #24]	@ (80076e0 <vApplicationGetIdleTaskMemory+0x30>)
 80076c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2280      	movs	r2, #128	@ 0x80
 80076cc:	601a      	str	r2, [r3, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	24000808 	.word	0x24000808
 80076e0:	240008b0 	.word	0x240008b0

080076e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a07      	ldr	r2, [pc, #28]	@ (8007710 <vApplicationGetTimerTaskMemory+0x2c>)
 80076f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4a06      	ldr	r2, [pc, #24]	@ (8007714 <vApplicationGetTimerTaskMemory+0x30>)
 80076fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	24000ab0 	.word	0x24000ab0
 8007714:	24000b58 	.word	0x24000b58

08007718 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800773e:	2320      	movs	r3, #32
 8007740:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b20      	cmp	r3, #32
 8007746:	d00b      	beq.n	8007760 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	3304      	adds	r3, #4
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f9c5 	bl	8007b04 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2201      	movs	r2, #1
 800777e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007780:	697b      	ldr	r3, [r7, #20]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007790:	2020      	movs	r0, #32
 8007792:	f002 fd23 	bl	800a1dc <pvPortMalloc>
 8007796:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f9ab 	bl	8007b04 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80077b4:	687b      	ldr	r3, [r7, #4]
	}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b090      	sub	sp, #64	@ 0x40
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10b      	bne.n	80077f8 <xEventGroupWaitBits+0x38>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	623b      	str	r3, [r7, #32]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077fe:	d30b      	bcc.n	8007818 <xEventGroupWaitBits+0x58>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61fb      	str	r3, [r7, #28]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <xEventGroupWaitBits+0x76>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	61bb      	str	r3, [r7, #24]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007836:	f001 fe0d 	bl	8009454 <xTaskGetSchedulerState>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <xEventGroupWaitBits+0x86>
 8007840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <xEventGroupWaitBits+0x8a>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <xEventGroupWaitBits+0x8c>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	617b      	str	r3, [r7, #20]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8007868:	f001 f95e 	bl	8008b28 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800786c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007878:	f000 f90d 	bl	8007a96 <prvTestWaitCondition>
 800787c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00e      	beq.n	80078a2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007886:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007888:	2300      	movs	r3, #0
 800788a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d028      	beq.n	80078e4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	43db      	mvns	r3, r3
 800789a:	401a      	ands	r2, r3
 800789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e020      	b.n	80078e4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80078a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80078ac:	2301      	movs	r3, #1
 80078ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80078b0:	e018      	b.n	80078e4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80078b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078be:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078cc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	1d18      	adds	r0, r3, #4
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	4313      	orrs	r3, r2
 80078d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078da:	4619      	mov	r1, r3
 80078dc:	f001 fb26 	bl	8008f2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80078e4:	f001 f92e 	bl	8008b44 <xTaskResumeAll>
 80078e8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80078ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d031      	beq.n	8007954 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d107      	bne.n	8007906 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80078f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <xEventGroupWaitBits+0x1a0>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007906:	f001 fe33 	bl	8009570 <uxTaskResetEventItemValue>
 800790a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800790c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800790e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d11a      	bne.n	800794c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8007916:	f002 fb3f 	bl	8009f98 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800791a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007926:	f000 f8b6 	bl	8007a96 <prvTestWaitCondition>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d006      	beq.n	8007944 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	43db      	mvns	r3, r3
 800793e:	401a      	ands	r2, r3
 8007940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007942:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007944:	2301      	movs	r3, #1
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8007948:	f002 fb58 	bl	8009ffc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800794c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007956:	4618      	mov	r0, r3
 8007958:	3740      	adds	r7, #64	@ 0x40
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	@ 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800796e:	2300      	movs	r3, #0
 8007970:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <xEventGroupSetBits+0x34>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800799e:	d30b      	bcc.n	80079b8 <xEventGroupSetBits+0x54>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	e7fd      	b.n	80079b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	3304      	adds	r3, #4
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	3308      	adds	r3, #8
 80079c2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80079c4:	f001 f8b0 	bl	8008b28 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80079da:	e03c      	b.n	8007a56 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80079f2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80079fa:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d108      	bne.n	8007a18 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a16:	e008      	b.n	8007a2a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d101      	bne.n	8007a2a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007a4e:	f001 fb3b 	bl	80090c8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8007a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d1be      	bne.n	80079dc <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a64:	43db      	mvns	r3, r3
 8007a66:	401a      	ands	r2, r3
 8007a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007a6c:	f001 f86a 	bl	8008b44 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	681b      	ldr	r3, [r3, #0]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3738      	adds	r7, #56	@ 0x38
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff6b 	bl	8007964 <xEventGroupSetBits>
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007a96:	b480      	push	{r7}
 8007a98:	b087      	sub	sp, #28
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e007      	b.n	8007acc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d101      	bne.n	8007acc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007acc:	697b      	ldr	r3, [r7, #20]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
	...

08007adc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	4804      	ldr	r0, [pc, #16]	@ (8007b00 <xEventGroupSetBitsFromISR+0x24>)
 8007af0:	f002 f904 	bl	8009cfc <xTimerPendFunctionCallFromISR>
 8007af4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007af6:	697b      	ldr	r3, [r7, #20]
	}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	08007a7d 	.word	0x08007a7d

08007b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f103 0208 	add.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f103 0208 	add.w	r2, r3, #8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f103 0208 	add.w	r2, r3, #8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bbc:	d103      	bne.n	8007bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e00c      	b.n	8007be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e002      	b.n	8007bd4 <vListInsert+0x2e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d2f6      	bcs.n	8007bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	601a      	str	r2, [r3, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6892      	ldr	r2, [r2, #8]
 8007c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6852      	ldr	r2, [r2, #4]
 8007c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d103      	bne.n	8007c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	1e5a      	subs	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xQueueGenericReset+0x2c>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60bb      	str	r3, [r7, #8]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c98:	f002 f97e 	bl	8009f98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca4:	68f9      	ldr	r1, [r7, #12]
 8007ca6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	441a      	add	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	22ff      	movs	r2, #255	@ 0xff
 8007cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	22ff      	movs	r2, #255	@ 0xff
 8007ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d114      	bne.n	8007d18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01a      	beq.n	8007d2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3310      	adds	r3, #16
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 f980 	bl	8009000 <xTaskRemoveFromEventList>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d012      	beq.n	8007d2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <xQueueGenericReset+0xd0>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	e009      	b.n	8007d2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3310      	adds	r3, #16
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fef1 	bl	8007b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3324      	adds	r3, #36	@ 0x24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff feec 	bl	8007b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d2c:	f002 f966 	bl	8009ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d30:	2301      	movs	r3, #1
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08e      	sub	sp, #56	@ 0x38
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <xQueueGenericCreateStatic+0x56>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <xQueueGenericCreateStatic+0x5a>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericCreateStatic+0x5c>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	623b      	str	r3, [r7, #32]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <xQueueGenericCreateStatic+0x84>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <xQueueGenericCreateStatic+0x88>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <xQueueGenericCreateStatic+0x8a>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	61fb      	str	r3, [r7, #28]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007de6:	2350      	movs	r3, #80	@ 0x50
 8007de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b50      	cmp	r3, #80	@ 0x50
 8007dee:	d00b      	beq.n	8007e08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	61bb      	str	r3, [r7, #24]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00d      	beq.n	8007e30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f805 	bl	8007e3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3730      	adds	r7, #48	@ 0x30
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e002      	b.n	8007e5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e68:	2101      	movs	r1, #1
 8007e6a:	69b8      	ldr	r0, [r7, #24]
 8007e6c:	f7ff fefe 	bl	8007c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08e      	sub	sp, #56	@ 0x38
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <xQueueGenericSend+0x34>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <xQueueGenericSend+0x42>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueGenericSend+0x46>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueGenericSend+0x48>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <xQueueGenericSend+0x64>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <xQueueGenericSend+0x72>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <xQueueGenericSend+0x76>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <xQueueGenericSend+0x78>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <xQueueGenericSend+0x94>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	623b      	str	r3, [r7, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f14:	f001 fa9e 	bl	8009454 <xTaskGetSchedulerState>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <xQueueGenericSend+0xa4>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <xQueueGenericSend+0xa8>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <xQueueGenericSend+0xaa>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <xQueueGenericSend+0xc6>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f46:	f002 f827 	bl	8009f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <xQueueGenericSend+0xdc>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d129      	bne.n	8007fb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f62:	f000 fa0f 	bl	8008384 <prvCopyDataToQueue>
 8007f66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d010      	beq.n	8007f92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	3324      	adds	r3, #36	@ 0x24
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 f843 	bl	8009000 <xTaskRemoveFromEventList>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d013      	beq.n	8007fa8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f80:	4b3f      	ldr	r3, [pc, #252]	@ (8008080 <xQueueGenericSend+0x200>)
 8007f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	e00a      	b.n	8007fa8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d007      	beq.n	8007fa8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f98:	4b39      	ldr	r3, [pc, #228]	@ (8008080 <xQueueGenericSend+0x200>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fa8:	f002 f828 	bl	8009ffc <vPortExitCritical>
				return pdPASS;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e063      	b.n	8008078 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fb6:	f002 f821 	bl	8009ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e05c      	b.n	8008078 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 f8e1 	bl	8009190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fd2:	f002 f813 	bl	8009ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fd6:	f000 fda7 	bl	8008b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fda:	f001 ffdd 	bl	8009f98 <vPortEnterCritical>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fea:	d103      	bne.n	8007ff4 <xQueueGenericSend+0x174>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ffa:	b25b      	sxtb	r3, r3
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008000:	d103      	bne.n	800800a <xQueueGenericSend+0x18a>
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800800a:	f001 fff7 	bl	8009ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800800e:	1d3a      	adds	r2, r7, #4
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f001 f8d0 	bl	80091bc <xTaskCheckForTimeOut>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d124      	bne.n	800806c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008022:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008024:	f000 faa6 	bl	8008574 <prvIsQueueFull>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	3310      	adds	r3, #16
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	4611      	mov	r1, r2
 8008036:	4618      	mov	r0, r3
 8008038:	f000 ff52 	bl	8008ee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800803c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800803e:	f000 fa31 	bl	80084a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008042:	f000 fd7f 	bl	8008b44 <xTaskResumeAll>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f47f af7c 	bne.w	8007f46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800804e:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <xQueueGenericSend+0x200>)
 8008050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	e772      	b.n	8007f46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008062:	f000 fa1f 	bl	80084a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008066:	f000 fd6d 	bl	8008b44 <xTaskResumeAll>
 800806a:	e76c      	b.n	8007f46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800806c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800806e:	f000 fa19 	bl	80084a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008072:	f000 fd67 	bl	8008b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008076:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008078:	4618      	mov	r0, r3
 800807a:	3738      	adds	r7, #56	@ 0x38
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b090      	sub	sp, #64	@ 0x40
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10b      	bne.n	80080b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	e7fd      	b.n	80080b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <xQueueGenericSendFromISR+0x3e>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <xQueueGenericSendFromISR+0x42>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <xQueueGenericSendFromISR+0x44>
 80080c6:	2300      	movs	r3, #0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d103      	bne.n	80080f2 <xQueueGenericSendFromISR+0x6e>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <xQueueGenericSendFromISR+0x72>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <xQueueGenericSendFromISR+0x74>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	623b      	str	r3, [r7, #32]
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008114:	f002 f820 	bl	800a158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008118:	f3ef 8211 	mrs	r2, BASEPRI
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	61fa      	str	r2, [r7, #28]
 800812e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008130:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <xQueueGenericSendFromISR+0xc2>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d12f      	bne.n	80081a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800815c:	f000 f912 	bl	8008384 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008160:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008168:	d112      	bne.n	8008190 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d016      	beq.n	80081a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	3324      	adds	r3, #36	@ 0x24
 8008176:	4618      	mov	r0, r3
 8008178:	f000 ff42 	bl	8009000 <xTaskRemoveFromEventList>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00e      	beq.n	80081a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e007      	b.n	80081a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008190:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008194:	3301      	adds	r3, #1
 8008196:	b2db      	uxtb	r3, r3
 8008198:	b25a      	sxtb	r2, r3
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081a0:	2301      	movs	r3, #1
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081a4:	e001      	b.n	80081aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3740      	adds	r7, #64	@ 0x40
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08c      	sub	sp, #48	@ 0x30
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10b      	bne.n	80081f2 <xQueueReceive+0x32>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	623b      	str	r3, [r7, #32]
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	e7fd      	b.n	80081ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <xQueueReceive+0x40>
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <xQueueReceive+0x44>
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <xQueueReceive+0x46>
 8008204:	2300      	movs	r3, #0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <xQueueReceive+0x62>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	61fb      	str	r3, [r7, #28]
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	e7fd      	b.n	800821e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008222:	f001 f917 	bl	8009454 <xTaskGetSchedulerState>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <xQueueReceive+0x72>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <xQueueReceive+0x76>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueReceive+0x78>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <xQueueReceive+0x94>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008254:	f001 fea0 	bl	8009f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01f      	beq.n	80082a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008268:	f000 f8f6 	bl	8008458 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	1e5a      	subs	r2, r3, #1
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00f      	beq.n	800829c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	3310      	adds	r3, #16
 8008280:	4618      	mov	r0, r3
 8008282:	f000 febd 	bl	8009000 <xTaskRemoveFromEventList>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d007      	beq.n	800829c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800828c:	4b3c      	ldr	r3, [pc, #240]	@ (8008380 <xQueueReceive+0x1c0>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800829c:	f001 feae 	bl	8009ffc <vPortExitCritical>
				return pdPASS;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e069      	b.n	8008378 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d103      	bne.n	80082b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082aa:	f001 fea7 	bl	8009ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e062      	b.n	8008378 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d106      	bne.n	80082c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 ff67 	bl	8009190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c6:	f001 fe99 	bl	8009ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082ca:	f000 fc2d 	bl	8008b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ce:	f001 fe63 	bl	8009f98 <vPortEnterCritical>
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082de:	d103      	bne.n	80082e8 <xQueueReceive+0x128>
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082f4:	d103      	bne.n	80082fe <xQueueReceive+0x13e>
 80082f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082fe:	f001 fe7d 	bl	8009ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008302:	1d3a      	adds	r2, r7, #4
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f000 ff56 	bl	80091bc <xTaskCheckForTimeOut>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d123      	bne.n	800835e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008318:	f000 f916 	bl	8008548 <prvIsQueueEmpty>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d017      	beq.n	8008352 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	3324      	adds	r3, #36	@ 0x24
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fdd8 	bl	8008ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008332:	f000 f8b7 	bl	80084a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008336:	f000 fc05 	bl	8008b44 <xTaskResumeAll>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d189      	bne.n	8008254 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008340:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <xQueueReceive+0x1c0>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	e780      	b.n	8008254 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008354:	f000 f8a6 	bl	80084a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008358:	f000 fbf4 	bl	8008b44 <xTaskResumeAll>
 800835c:	e77a      	b.n	8008254 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800835e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008360:	f000 f8a0 	bl	80084a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008364:	f000 fbee 	bl	8008b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836a:	f000 f8ed 	bl	8008548 <prvIsQueueEmpty>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	f43f af6f 	beq.w	8008254 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008376:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008378:	4618      	mov	r0, r3
 800837a:	3730      	adds	r7, #48	@ 0x30
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008398:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d14d      	bne.n	8008446 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f86e 	bl	8009490 <xTaskPriorityDisinherit>
 80083b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	e043      	b.n	8008446 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d119      	bne.n	80083f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6858      	ldr	r0, [r3, #4]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	461a      	mov	r2, r3
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	f002 f976 	bl	800a6c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083dc:	441a      	add	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d32b      	bcc.n	8008446 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	e026      	b.n	8008446 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68d8      	ldr	r0, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	461a      	mov	r2, r3
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	f002 f95c 	bl	800a6c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008410:	425b      	negs	r3, r3
 8008412:	441a      	add	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d207      	bcs.n	8008434 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842c:	425b      	negs	r3, r3
 800842e:	441a      	add	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d105      	bne.n	8008446 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	3b01      	subs	r3, #1
 8008444:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800844e:	697b      	ldr	r3, [r7, #20]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d018      	beq.n	800849c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	441a      	add	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	429a      	cmp	r2, r3
 8008482:	d303      	bcc.n	800848c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68d9      	ldr	r1, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008494:	461a      	mov	r2, r3
 8008496:	6838      	ldr	r0, [r7, #0]
 8008498:	f002 f912 	bl	800a6c0 <memcpy>
	}
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084ac:	f001 fd74 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084b8:	e011      	b.n	80084de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d012      	beq.n	80084e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3324      	adds	r3, #36	@ 0x24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fd9a 	bl	8009000 <xTaskRemoveFromEventList>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084d2:	f000 fed7 	bl	8009284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	3b01      	subs	r3, #1
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dce9      	bgt.n	80084ba <prvUnlockQueue+0x16>
 80084e6:	e000      	b.n	80084ea <prvUnlockQueue+0x46>
					break;
 80084e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	22ff      	movs	r2, #255	@ 0xff
 80084ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084f2:	f001 fd83 	bl	8009ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084f6:	f001 fd4f 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008500:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008502:	e011      	b.n	8008528 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d012      	beq.n	8008532 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3310      	adds	r3, #16
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fd75 	bl	8009000 <xTaskRemoveFromEventList>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800851c:	f000 feb2 	bl	8009284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	3b01      	subs	r3, #1
 8008524:	b2db      	uxtb	r3, r3
 8008526:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dce9      	bgt.n	8008504 <prvUnlockQueue+0x60>
 8008530:	e000      	b.n	8008534 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008532:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	22ff      	movs	r2, #255	@ 0xff
 8008538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800853c:	f001 fd5e 	bl	8009ffc <vPortExitCritical>
}
 8008540:	bf00      	nop
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008550:	f001 fd22 	bl	8009f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800855c:	2301      	movs	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e001      	b.n	8008566 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008566:	f001 fd49 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 800856a:	68fb      	ldr	r3, [r7, #12]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800857c:	f001 fd0c 	bl	8009f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008588:	429a      	cmp	r2, r3
 800858a:	d102      	bne.n	8008592 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e001      	b.n	8008596 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008596:	f001 fd31 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 800859a:	68fb      	ldr	r3, [r7, #12]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e014      	b.n	80085de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085b4:	4a0f      	ldr	r2, [pc, #60]	@ (80085f4 <vQueueAddToRegistry+0x50>)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085c0:	490c      	ldr	r1, [pc, #48]	@ (80085f4 <vQueueAddToRegistry+0x50>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <vQueueAddToRegistry+0x50>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085d6:	e006      	b.n	80085e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b07      	cmp	r3, #7
 80085e2:	d9e7      	bls.n	80085b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	24000f58 	.word	0x24000f58

080085f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008608:	f001 fcc6 	bl	8009f98 <vPortEnterCritical>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008612:	b25b      	sxtb	r3, r3
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008618:	d103      	bne.n	8008622 <vQueueWaitForMessageRestricted+0x2a>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008628:	b25b      	sxtb	r3, r3
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800862e:	d103      	bne.n	8008638 <vQueueWaitForMessageRestricted+0x40>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008638:	f001 fce0 	bl	8009ffc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	3324      	adds	r3, #36	@ 0x24
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fcab 	bl	8008fa8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008652:	6978      	ldr	r0, [r7, #20]
 8008654:	f7ff ff26 	bl	80084a4 <prvUnlockQueue>
	}
 8008658:	bf00      	nop
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	@ 0x38
 8008664:	af04      	add	r7, sp, #16
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	623b      	str	r3, [r7, #32]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	61fb      	str	r3, [r7, #28]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086aa:	23a8      	movs	r3, #168	@ 0xa8
 80086ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80086b2:	d00b      	beq.n	80086cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	61bb      	str	r3, [r7, #24]
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01e      	beq.n	8008712 <xTaskCreateStatic+0xb2>
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01b      	beq.n	8008712 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ec:	2300      	movs	r3, #0
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	9302      	str	r3, [sp, #8]
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f851 	bl	80087ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800870a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800870c:	f000 f8f6 	bl	80088fc <prvAddNewTaskToReadyList>
 8008710:	e001      	b.n	8008716 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008716:	697b      	ldr	r3, [r7, #20]
	}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08c      	sub	sp, #48	@ 0x30
 8008724:	af04      	add	r7, sp, #16
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4618      	mov	r0, r3
 8008736:	f001 fd51 	bl	800a1dc <pvPortMalloc>
 800873a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008742:	20a8      	movs	r0, #168	@ 0xa8
 8008744:	f001 fd4a 	bl	800a1dc <pvPortMalloc>
 8008748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	631a      	str	r2, [r3, #48]	@ 0x30
 8008756:	e005      	b.n	8008764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	f001 fe0d 	bl	800a378 <vPortFree>
 800875e:	e001      	b.n	8008764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	2300      	movs	r3, #0
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	9302      	str	r3, [sp, #8]
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f80f 	bl	80087ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800878e:	69f8      	ldr	r0, [r7, #28]
 8008790:	f000 f8b4 	bl	80088fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e002      	b.n	80087a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800879e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087a0:	69bb      	ldr	r3, [r7, #24]
	}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	461a      	mov	r2, r3
 80087c4:	21a5      	movs	r1, #165	@ 0xa5
 80087c6:	f001 fef7 	bl	800a5b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80087d4:	440b      	add	r3, r1
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	f023 0307 	bic.w	r3, r3, #7
 80087e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01f      	beq.n	800884c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800880c:	2300      	movs	r3, #0
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	e012      	b.n	8008838 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	7819      	ldrb	r1, [r3, #0]
 800881a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	3334      	adds	r3, #52	@ 0x34
 8008822:	460a      	mov	r2, r1
 8008824:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	3301      	adds	r3, #1
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d9e9      	bls.n	8008812 <prvInitialiseNewTask+0x66>
 800883e:	e000      	b.n	8008842 <prvInitialiseNewTask+0x96>
			{
				break;
 8008840:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800884a:	e003      	b.n	8008854 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	2b37      	cmp	r3, #55	@ 0x37
 8008858:	d901      	bls.n	800885e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800885a:	2337      	movs	r3, #55	@ 0x37
 800885c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008868:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2200      	movs	r2, #0
 800886e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff f965 	bl	8007b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	3318      	adds	r3, #24
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff f960 	bl	8007b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008898:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	3354      	adds	r3, #84	@ 0x54
 80088ae:	224c      	movs	r2, #76	@ 0x4c
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 fe80 	bl	800a5b8 <memset>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	4a0d      	ldr	r2, [pc, #52]	@ (80088f0 <prvInitialiseNewTask+0x144>)
 80088bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	4a0c      	ldr	r2, [pc, #48]	@ (80088f4 <prvInitialiseNewTask+0x148>)
 80088c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <prvInitialiseNewTask+0x14c>)
 80088c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	69b8      	ldr	r0, [r7, #24]
 80088d0:	f001 fa34 	bl	8009d3c <pxPortInitialiseStack>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088e6:	bf00      	nop
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	240051ec 	.word	0x240051ec
 80088f4:	24005254 	.word	0x24005254
 80088f8:	240052bc 	.word	0x240052bc

080088fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008904:	f001 fb48 	bl	8009f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008908:	4b2d      	ldr	r3, [pc, #180]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 8008910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008912:	4b2c      	ldr	r3, [pc, #176]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800891a:	4a2a      	ldr	r2, [pc, #168]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008920:	4b27      	ldr	r3, [pc, #156]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d110      	bne.n	800894a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008928:	f000 fcd0 	bl	80092cc <prvInitialiseTaskLists>
 800892c:	e00d      	b.n	800894a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800892e:	4b26      	ldr	r3, [pc, #152]	@ (80089c8 <prvAddNewTaskToReadyList+0xcc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008936:	4b23      	ldr	r3, [pc, #140]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	429a      	cmp	r2, r3
 8008942:	d802      	bhi.n	800894a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008944:	4a1f      	ldr	r2, [pc, #124]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800894a:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	4a1e      	ldr	r2, [pc, #120]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 8008952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008954:	4b1d      	ldr	r3, [pc, #116]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <prvAddNewTaskToReadyList+0xd4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d903      	bls.n	8008970 <prvAddNewTaskToReadyList+0x74>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <prvAddNewTaskToReadyList+0xd4>)
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4a15      	ldr	r2, [pc, #84]	@ (80089d4 <prvAddNewTaskToReadyList+0xd8>)
 800897e:	441a      	add	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7ff f8e9 	bl	8007b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800898c:	f001 fb36 	bl	8009ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008990:	4b0d      	ldr	r3, [pc, #52]	@ (80089c8 <prvAddNewTaskToReadyList+0xcc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00e      	beq.n	80089b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d207      	bcs.n	80089b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089a6:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <prvAddNewTaskToReadyList+0xdc>)
 80089a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	2400146c 	.word	0x2400146c
 80089c4:	24000f98 	.word	0x24000f98
 80089c8:	24001478 	.word	0x24001478
 80089cc:	24001488 	.word	0x24001488
 80089d0:	24001474 	.word	0x24001474
 80089d4:	24000f9c 	.word	0x24000f9c
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d018      	beq.n	8008a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ee:	4b14      	ldr	r3, [pc, #80]	@ (8008a40 <vTaskDelay+0x64>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <vTaskDelay+0x32>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a0e:	f000 f88b 	bl	8008b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fdc3 	bl	80095a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a1a:	f000 f893 	bl	8008b44 <xTaskResumeAll>
 8008a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <vTaskDelay+0x68>)
 8008a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	24001494 	.word	0x24001494
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	@ 0x28
 8008a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a56:	463a      	mov	r2, r7
 8008a58:	1d39      	adds	r1, r7, #4
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fe26 	bl	80076b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	9202      	str	r2, [sp, #8]
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	460a      	mov	r2, r1
 8008a76:	4924      	ldr	r1, [pc, #144]	@ (8008b08 <vTaskStartScheduler+0xc0>)
 8008a78:	4824      	ldr	r0, [pc, #144]	@ (8008b0c <vTaskStartScheduler+0xc4>)
 8008a7a:	f7ff fdf1 	bl	8008660 <xTaskCreateStatic>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4a23      	ldr	r2, [pc, #140]	@ (8008b10 <vTaskStartScheduler+0xc8>)
 8008a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <vTaskStartScheduler+0xc8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e001      	b.n	8008a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d102      	bne.n	8008aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a9c:	f000 fdd4 	bl	8009648 <xTimerCreateTimerTask>
 8008aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d11b      	bne.n	8008ae0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	613b      	str	r3, [r7, #16]
}
 8008aba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008abc:	4b15      	ldr	r3, [pc, #84]	@ (8008b14 <vTaskStartScheduler+0xcc>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3354      	adds	r3, #84	@ 0x54
 8008ac2:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <vTaskStartScheduler+0xd0>)
 8008ac4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac6:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <vTaskStartScheduler+0xd4>)
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ace:	4b14      	ldr	r3, [pc, #80]	@ (8008b20 <vTaskStartScheduler+0xd8>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ad4:	4b13      	ldr	r3, [pc, #76]	@ (8008b24 <vTaskStartScheduler+0xdc>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ada:	f001 f9b9 	bl	8009e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ade:	e00f      	b.n	8008b00 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ae6:	d10b      	bne.n	8008b00 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	60fb      	str	r3, [r7, #12]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <vTaskStartScheduler+0xb4>
}
 8008b00:	bf00      	nop
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	0800a818 	.word	0x0800a818
 8008b0c:	0800929d 	.word	0x0800929d
 8008b10:	24001490 	.word	0x24001490
 8008b14:	24000f98 	.word	0x24000f98
 8008b18:	24000014 	.word	0x24000014
 8008b1c:	2400148c 	.word	0x2400148c
 8008b20:	24001478 	.word	0x24001478
 8008b24:	24001470 	.word	0x24001470

08008b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b2c:	4b04      	ldr	r3, [pc, #16]	@ (8008b40 <vTaskSuspendAll+0x18>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a03      	ldr	r2, [pc, #12]	@ (8008b40 <vTaskSuspendAll+0x18>)
 8008b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b36:	bf00      	nop
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	24001494 	.word	0x24001494

08008b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b52:	4b42      	ldr	r3, [pc, #264]	@ (8008c5c <xTaskResumeAll+0x118>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <xTaskResumeAll+0x2e>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	603b      	str	r3, [r7, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b72:	f001 fa11 	bl	8009f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b76:	4b39      	ldr	r3, [pc, #228]	@ (8008c5c <xTaskResumeAll+0x118>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4a37      	ldr	r2, [pc, #220]	@ (8008c5c <xTaskResumeAll+0x118>)
 8008b7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b80:	4b36      	ldr	r3, [pc, #216]	@ (8008c5c <xTaskResumeAll+0x118>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d162      	bne.n	8008c4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b88:	4b35      	ldr	r3, [pc, #212]	@ (8008c60 <xTaskResumeAll+0x11c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d05e      	beq.n	8008c4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b90:	e02f      	b.n	8008bf2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b92:	4b34      	ldr	r3, [pc, #208]	@ (8008c64 <xTaskResumeAll+0x120>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3318      	adds	r3, #24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff f83a 	bl	8007c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff f835 	bl	8007c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8008c68 <xTaskResumeAll+0x124>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d903      	bls.n	8008bc2 <xTaskResumeAll+0x7e>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8008c68 <xTaskResumeAll+0x124>)
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4a27      	ldr	r2, [pc, #156]	@ (8008c6c <xTaskResumeAll+0x128>)
 8008bd0:	441a      	add	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fe ffc0 	bl	8007b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be2:	4b23      	ldr	r3, [pc, #140]	@ (8008c70 <xTaskResumeAll+0x12c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d302      	bcc.n	8008bf2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008bec:	4b21      	ldr	r3, [pc, #132]	@ (8008c74 <xTaskResumeAll+0x130>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c64 <xTaskResumeAll+0x120>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1cb      	bne.n	8008b92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c00:	f000 fc08 	bl	8009414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c04:	4b1c      	ldr	r3, [pc, #112]	@ (8008c78 <xTaskResumeAll+0x134>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d010      	beq.n	8008c32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c10:	f000 f846 	bl	8008ca0 <xTaskIncrementTick>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c1a:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <xTaskResumeAll+0x130>)
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f1      	bne.n	8008c10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c2c:	4b12      	ldr	r3, [pc, #72]	@ (8008c78 <xTaskResumeAll+0x134>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <xTaskResumeAll+0x130>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c7c <xTaskResumeAll+0x138>)
 8008c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c4e:	f001 f9d5 	bl	8009ffc <vPortExitCritical>

	return xAlreadyYielded;
 8008c52:	68bb      	ldr	r3, [r7, #8]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	24001494 	.word	0x24001494
 8008c60:	2400146c 	.word	0x2400146c
 8008c64:	2400142c 	.word	0x2400142c
 8008c68:	24001474 	.word	0x24001474
 8008c6c:	24000f9c 	.word	0x24000f9c
 8008c70:	24000f98 	.word	0x24000f98
 8008c74:	24001480 	.word	0x24001480
 8008c78:	2400147c 	.word	0x2400147c
 8008c7c:	e000ed04 	.word	0xe000ed04

08008c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c86:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <xTaskGetTickCount+0x1c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c8c:	687b      	ldr	r3, [r7, #4]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	24001470 	.word	0x24001470

08008ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b4f      	ldr	r3, [pc, #316]	@ (8008de8 <xTaskIncrementTick+0x148>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 8090 	bne.w	8008dd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8008dec <xTaskIncrementTick+0x14c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8008dec <xTaskIncrementTick+0x14c>)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d121      	bne.n	8008d0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc8:	4b49      	ldr	r3, [pc, #292]	@ (8008df0 <xTaskIncrementTick+0x150>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <xTaskIncrementTick+0x4a>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	603b      	str	r3, [r7, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	e7fd      	b.n	8008ce6 <xTaskIncrementTick+0x46>
 8008cea:	4b41      	ldr	r3, [pc, #260]	@ (8008df0 <xTaskIncrementTick+0x150>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <xTaskIncrementTick+0x154>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8008df0 <xTaskIncrementTick+0x150>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8008df4 <xTaskIncrementTick+0x154>)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008df8 <xTaskIncrementTick+0x158>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	4a3c      	ldr	r2, [pc, #240]	@ (8008df8 <xTaskIncrementTick+0x158>)
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	f000 fb84 	bl	8009414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008dfc <xTaskIncrementTick+0x15c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d349      	bcc.n	8008daa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d16:	4b36      	ldr	r3, [pc, #216]	@ (8008df0 <xTaskIncrementTick+0x150>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d20:	4b36      	ldr	r3, [pc, #216]	@ (8008dfc <xTaskIncrementTick+0x15c>)
 8008d22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d26:	601a      	str	r2, [r3, #0]
					break;
 8008d28:	e03f      	b.n	8008daa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2a:	4b31      	ldr	r3, [pc, #196]	@ (8008df0 <xTaskIncrementTick+0x150>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d203      	bcs.n	8008d4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d42:	4a2e      	ldr	r2, [pc, #184]	@ (8008dfc <xTaskIncrementTick+0x15c>)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d48:	e02f      	b.n	8008daa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe ff62 	bl	8007c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	3318      	adds	r3, #24
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe ff59 	bl	8007c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	4b25      	ldr	r3, [pc, #148]	@ (8008e00 <xTaskIncrementTick+0x160>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d903      	bls.n	8008d7a <xTaskIncrementTick+0xda>
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d76:	4a22      	ldr	r2, [pc, #136]	@ (8008e00 <xTaskIncrementTick+0x160>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a1f      	ldr	r2, [pc, #124]	@ (8008e04 <xTaskIncrementTick+0x164>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fe fee4 	bl	8007b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <xTaskIncrementTick+0x168>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3b8      	bcc.n	8008d16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da8:	e7b5      	b.n	8008d16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008daa:	4b17      	ldr	r3, [pc, #92]	@ (8008e08 <xTaskIncrementTick+0x168>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db0:	4914      	ldr	r1, [pc, #80]	@ (8008e04 <xTaskIncrementTick+0x164>)
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d901      	bls.n	8008dc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dc6:	4b11      	ldr	r3, [pc, #68]	@ (8008e0c <xTaskIncrementTick+0x16c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e004      	b.n	8008dde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <xTaskIncrementTick+0x170>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	4a0d      	ldr	r2, [pc, #52]	@ (8008e10 <xTaskIncrementTick+0x170>)
 8008ddc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	24001494 	.word	0x24001494
 8008dec:	24001470 	.word	0x24001470
 8008df0:	24001424 	.word	0x24001424
 8008df4:	24001428 	.word	0x24001428
 8008df8:	24001484 	.word	0x24001484
 8008dfc:	2400148c 	.word	0x2400148c
 8008e00:	24001474 	.word	0x24001474
 8008e04:	24000f9c 	.word	0x24000f9c
 8008e08:	24000f98 	.word	0x24000f98
 8008e0c:	24001480 	.word	0x24001480
 8008e10:	2400147c 	.word	0x2400147c

08008e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec8 <vTaskSwitchContext+0xb4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e22:	4b2a      	ldr	r3, [pc, #168]	@ (8008ecc <vTaskSwitchContext+0xb8>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e28:	e047      	b.n	8008eba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008e2a:	4b28      	ldr	r3, [pc, #160]	@ (8008ecc <vTaskSwitchContext+0xb8>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e30:	4b27      	ldr	r3, [pc, #156]	@ (8008ed0 <vTaskSwitchContext+0xbc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	e011      	b.n	8008e5c <vTaskSwitchContext+0x48>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10b      	bne.n	8008e56 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	607b      	str	r3, [r7, #4]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vTaskSwitchContext+0x3e>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	491d      	ldr	r1, [pc, #116]	@ (8008ed4 <vTaskSwitchContext+0xc0>)
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0e3      	beq.n	8008e38 <vTaskSwitchContext+0x24>
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4a16      	ldr	r2, [pc, #88]	@ (8008ed4 <vTaskSwitchContext+0xc0>)
 8008e7c:	4413      	add	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3308      	adds	r3, #8
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d104      	bne.n	8008ea0 <vTaskSwitchContext+0x8c>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	605a      	str	r2, [r3, #4]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed8 <vTaskSwitchContext+0xc4>)
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	4a09      	ldr	r2, [pc, #36]	@ (8008ed0 <vTaskSwitchContext+0xbc>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008eb0:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <vTaskSwitchContext+0xc4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3354      	adds	r3, #84	@ 0x54
 8008eb6:	4a09      	ldr	r2, [pc, #36]	@ (8008edc <vTaskSwitchContext+0xc8>)
 8008eb8:	6013      	str	r3, [r2, #0]
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	24001494 	.word	0x24001494
 8008ecc:	24001480 	.word	0x24001480
 8008ed0:	24001474 	.word	0x24001474
 8008ed4:	24000f9c 	.word	0x24000f9c
 8008ed8:	24000f98 	.word	0x24000f98
 8008edc:	24000014 	.word	0x24000014

08008ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60fb      	str	r3, [r7, #12]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f08:	4b07      	ldr	r3, [pc, #28]	@ (8008f28 <vTaskPlaceOnEventList+0x48>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3318      	adds	r3, #24
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fe fe48 	bl	8007ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f16:	2101      	movs	r1, #1
 8008f18:	6838      	ldr	r0, [r7, #0]
 8008f1a:	f000 fb41 	bl	80095a0 <prvAddCurrentTaskToDelayedList>
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	24000f98 	.word	0x24000f98

08008f2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	617b      	str	r3, [r7, #20]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008f56:	4b12      	ldr	r3, [pc, #72]	@ (8008fa0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10b      	bne.n	8008f76 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	613b      	str	r3, [r7, #16]
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	e7fd      	b.n	8008f72 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008f80:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f82:	4b08      	ldr	r3, [pc, #32]	@ (8008fa4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3318      	adds	r3, #24
 8008f88:	4619      	mov	r1, r3
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7fe fde7 	bl	8007b5e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f90:	2101      	movs	r1, #1
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fb04 	bl	80095a0 <prvAddCurrentTaskToDelayedList>
}
 8008f98:	bf00      	nop
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	24001494 	.word	0x24001494
 8008fa4:	24000f98 	.word	0x24000f98

08008fa8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	617b      	str	r3, [r7, #20]
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	e7fd      	b.n	8008fce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ffc <vTaskPlaceOnEventListRestricted+0x54>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4619      	mov	r1, r3
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7fe fdbf 	bl	8007b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f000 fad6 	bl	80095a0 <prvAddCurrentTaskToDelayedList>
	}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	24000f98 	.word	0x24000f98

08009000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10b      	bne.n	800902e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3318      	adds	r3, #24
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fdf0 	bl	8007c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009038:	4b1d      	ldr	r3, [pc, #116]	@ (80090b0 <xTaskRemoveFromEventList+0xb0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d11d      	bne.n	800907c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	3304      	adds	r3, #4
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fde7 	bl	8007c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904e:	4b19      	ldr	r3, [pc, #100]	@ (80090b4 <xTaskRemoveFromEventList+0xb4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d903      	bls.n	800905e <xTaskRemoveFromEventList+0x5e>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	4a16      	ldr	r2, [pc, #88]	@ (80090b4 <xTaskRemoveFromEventList+0xb4>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4a13      	ldr	r2, [pc, #76]	@ (80090b8 <xTaskRemoveFromEventList+0xb8>)
 800906c:	441a      	add	r2, r3
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3304      	adds	r3, #4
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f7fe fd72 	bl	8007b5e <vListInsertEnd>
 800907a:	e005      	b.n	8009088 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3318      	adds	r3, #24
 8009080:	4619      	mov	r1, r3
 8009082:	480e      	ldr	r0, [pc, #56]	@ (80090bc <xTaskRemoveFromEventList+0xbc>)
 8009084:	f7fe fd6b 	bl	8007b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908c:	4b0c      	ldr	r3, [pc, #48]	@ (80090c0 <xTaskRemoveFromEventList+0xc0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009092:	429a      	cmp	r2, r3
 8009094:	d905      	bls.n	80090a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800909a:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <xTaskRemoveFromEventList+0xc4>)
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	e001      	b.n	80090a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	24001494 	.word	0x24001494
 80090b4:	24001474 	.word	0x24001474
 80090b8:	24000f9c 	.word	0x24000f9c
 80090bc:	2400142c 	.word	0x2400142c
 80090c0:	24000f98 	.word	0x24000f98
 80090c4:	24001480 	.word	0x24001480

080090c8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80090d2:	4b2a      	ldr	r3, [pc, #168]	@ (800917c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	613b      	str	r3, [r7, #16]
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	e7fd      	b.n	80090ee <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	60fb      	str	r3, [r7, #12]
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	e7fd      	b.n	800911c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe fd79 	bl	8007c18 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fd74 	bl	8007c18 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009134:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d903      	bls.n	8009144 <vTaskRemoveFromUnorderedEventList+0x7c>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	4a0f      	ldr	r2, [pc, #60]	@ (8009180 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a0c      	ldr	r2, [pc, #48]	@ (8009184 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009152:	441a      	add	r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe fcff 	bl	8007b5e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916a:	429a      	cmp	r2, r3
 800916c:	d902      	bls.n	8009174 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800916e:	4b07      	ldr	r3, [pc, #28]	@ (800918c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
	}
}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	24001494 	.word	0x24001494
 8009180:	24001474 	.word	0x24001474
 8009184:	24000f9c 	.word	0x24000f9c
 8009188:	24000f98 	.word	0x24000f98
 800918c:	24001480 	.word	0x24001480

08009190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <vTaskInternalSetTimeOutState+0x24>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091a0:	4b05      	ldr	r3, [pc, #20]	@ (80091b8 <vTaskInternalSetTimeOutState+0x28>)
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	24001484 	.word	0x24001484
 80091b8:	24001470 	.word	0x24001470

080091bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	613b      	str	r3, [r7, #16]
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009202:	f000 fec9 	bl	8009f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009206:	4b1d      	ldr	r3, [pc, #116]	@ (800927c <xTaskCheckForTimeOut+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800921e:	d102      	bne.n	8009226 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e023      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b15      	ldr	r3, [pc, #84]	@ (8009280 <xTaskCheckForTimeOut+0xc4>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d007      	beq.n	8009242 <xTaskCheckForTimeOut+0x86>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	e015      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	429a      	cmp	r2, r3
 800924a:	d20b      	bcs.n	8009264 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ff99 	bl	8009190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	e004      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800926a:	2301      	movs	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800926e:	f000 fec5 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 8009272:	69fb      	ldr	r3, [r7, #28]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	24001470 	.word	0x24001470
 8009280:	24001484 	.word	0x24001484

08009284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <vTaskMissedYield+0x14>)
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
}
 800928e:	bf00      	nop
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	24001480 	.word	0x24001480

0800929c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092a4:	f000 f852 	bl	800934c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092a8:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <prvIdleTask+0x28>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d9f9      	bls.n	80092a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092b0:	4b05      	ldr	r3, [pc, #20]	@ (80092c8 <prvIdleTask+0x2c>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092c0:	e7f0      	b.n	80092a4 <prvIdleTask+0x8>
 80092c2:	bf00      	nop
 80092c4:	24000f9c 	.word	0x24000f9c
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092d2:	2300      	movs	r3, #0
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	e00c      	b.n	80092f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a12      	ldr	r2, [pc, #72]	@ (800932c <prvInitialiseTaskLists+0x60>)
 80092e4:	4413      	add	r3, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fc0c 	bl	8007b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3301      	adds	r3, #1
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b37      	cmp	r3, #55	@ 0x37
 80092f6:	d9ef      	bls.n	80092d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092f8:	480d      	ldr	r0, [pc, #52]	@ (8009330 <prvInitialiseTaskLists+0x64>)
 80092fa:	f7fe fc03 	bl	8007b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092fe:	480d      	ldr	r0, [pc, #52]	@ (8009334 <prvInitialiseTaskLists+0x68>)
 8009300:	f7fe fc00 	bl	8007b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009304:	480c      	ldr	r0, [pc, #48]	@ (8009338 <prvInitialiseTaskLists+0x6c>)
 8009306:	f7fe fbfd 	bl	8007b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800930a:	480c      	ldr	r0, [pc, #48]	@ (800933c <prvInitialiseTaskLists+0x70>)
 800930c:	f7fe fbfa 	bl	8007b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009310:	480b      	ldr	r0, [pc, #44]	@ (8009340 <prvInitialiseTaskLists+0x74>)
 8009312:	f7fe fbf7 	bl	8007b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009316:	4b0b      	ldr	r3, [pc, #44]	@ (8009344 <prvInitialiseTaskLists+0x78>)
 8009318:	4a05      	ldr	r2, [pc, #20]	@ (8009330 <prvInitialiseTaskLists+0x64>)
 800931a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800931c:	4b0a      	ldr	r3, [pc, #40]	@ (8009348 <prvInitialiseTaskLists+0x7c>)
 800931e:	4a05      	ldr	r2, [pc, #20]	@ (8009334 <prvInitialiseTaskLists+0x68>)
 8009320:	601a      	str	r2, [r3, #0]
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	24000f9c 	.word	0x24000f9c
 8009330:	240013fc 	.word	0x240013fc
 8009334:	24001410 	.word	0x24001410
 8009338:	2400142c 	.word	0x2400142c
 800933c:	24001440 	.word	0x24001440
 8009340:	24001458 	.word	0x24001458
 8009344:	24001424 	.word	0x24001424
 8009348:	24001428 	.word	0x24001428

0800934c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009352:	e019      	b.n	8009388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009354:	f000 fe20 	bl	8009f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	4b10      	ldr	r3, [pc, #64]	@ (800939c <prvCheckTasksWaitingTermination+0x50>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fc57 	bl	8007c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800936a:	4b0d      	ldr	r3, [pc, #52]	@ (80093a0 <prvCheckTasksWaitingTermination+0x54>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a0b      	ldr	r2, [pc, #44]	@ (80093a0 <prvCheckTasksWaitingTermination+0x54>)
 8009372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009374:	4b0b      	ldr	r3, [pc, #44]	@ (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	4a0a      	ldr	r2, [pc, #40]	@ (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 800937c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800937e:	f000 fe3d 	bl	8009ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f810 	bl	80093a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009388:	4b06      	ldr	r3, [pc, #24]	@ (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e1      	bne.n	8009354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	24001440 	.word	0x24001440
 80093a0:	2400146c 	.word	0x2400146c
 80093a4:	24001454 	.word	0x24001454

080093a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3354      	adds	r3, #84	@ 0x54
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f907 	bl	800a5c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d108      	bne.n	80093d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 ffd5 	bl	800a378 <vPortFree>
				vPortFree( pxTCB );
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 ffd2 	bl	800a378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093d4:	e019      	b.n	800940a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d103      	bne.n	80093e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 ffc9 	bl	800a378 <vPortFree>
	}
 80093e6:	e010      	b.n	800940a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d00b      	beq.n	800940a <prvDeleteTCB+0x62>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	60fb      	str	r3, [r7, #12]
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <prvDeleteTCB+0x5e>
	}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800941a:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <prvResetNextTaskUnblockTime+0x38>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009424:	4b0a      	ldr	r3, [pc, #40]	@ (8009450 <prvResetNextTaskUnblockTime+0x3c>)
 8009426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800942a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800942c:	e008      	b.n	8009440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942e:	4b07      	ldr	r3, [pc, #28]	@ (800944c <prvResetNextTaskUnblockTime+0x38>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4a04      	ldr	r2, [pc, #16]	@ (8009450 <prvResetNextTaskUnblockTime+0x3c>)
 800943e:	6013      	str	r3, [r2, #0]
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	24001424 	.word	0x24001424
 8009450:	2400148c 	.word	0x2400148c

08009454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800945a:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <xTaskGetSchedulerState+0x34>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009462:	2301      	movs	r3, #1
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	e008      	b.n	800947a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009468:	4b08      	ldr	r3, [pc, #32]	@ (800948c <xTaskGetSchedulerState+0x38>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009470:	2302      	movs	r3, #2
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	e001      	b.n	800947a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009476:	2300      	movs	r3, #0
 8009478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800947a:	687b      	ldr	r3, [r7, #4]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	24001478 	.word	0x24001478
 800948c:	24001494 	.word	0x24001494

08009490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800949c:	2300      	movs	r3, #0
 800949e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d058      	beq.n	8009558 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094a6:	4b2f      	ldr	r3, [pc, #188]	@ (8009564 <xTaskPriorityDisinherit+0xd4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d00b      	beq.n	80094c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	60fb      	str	r3, [r7, #12]
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	e7fd      	b.n	80094c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	60bb      	str	r3, [r7, #8]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ec:	1e5a      	subs	r2, r3, #1
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d02c      	beq.n	8009558 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009502:	2b00      	cmp	r3, #0
 8009504:	d128      	bne.n	8009558 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	3304      	adds	r3, #4
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe fb84 	bl	8007c18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009528:	4b0f      	ldr	r3, [pc, #60]	@ (8009568 <xTaskPriorityDisinherit+0xd8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d903      	bls.n	8009538 <xTaskPriorityDisinherit+0xa8>
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	4a0c      	ldr	r2, [pc, #48]	@ (8009568 <xTaskPriorityDisinherit+0xd8>)
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4a09      	ldr	r2, [pc, #36]	@ (800956c <xTaskPriorityDisinherit+0xdc>)
 8009546:	441a      	add	r2, r3
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	3304      	adds	r3, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7fe fb05 	bl	8007b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009558:	697b      	ldr	r3, [r7, #20]
	}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	24000f98 	.word	0x24000f98
 8009568:	24001474 	.word	0x24001474
 800956c:	24000f9c 	.word	0x24000f9c

08009570 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009576:	4b09      	ldr	r3, [pc, #36]	@ (800959c <uxTaskResetEventItemValue+0x2c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957e:	4b07      	ldr	r3, [pc, #28]	@ (800959c <uxTaskResetEventItemValue+0x2c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009584:	4b05      	ldr	r3, [pc, #20]	@ (800959c <uxTaskResetEventItemValue+0x2c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800958c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800958e:	687b      	ldr	r3, [r7, #4]
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	24000f98 	.word	0x24000f98

080095a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095aa:	4b21      	ldr	r3, [pc, #132]	@ (8009630 <prvAddCurrentTaskToDelayedList+0x90>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b0:	4b20      	ldr	r3, [pc, #128]	@ (8009634 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fb2e 	bl	8007c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095c2:	d10a      	bne.n	80095da <prvAddCurrentTaskToDelayedList+0x3a>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009634 <prvAddCurrentTaskToDelayedList+0x94>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4619      	mov	r1, r3
 80095d2:	4819      	ldr	r0, [pc, #100]	@ (8009638 <prvAddCurrentTaskToDelayedList+0x98>)
 80095d4:	f7fe fac3 	bl	8007b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095d8:	e026      	b.n	8009628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4413      	add	r3, r2
 80095e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095e2:	4b14      	ldr	r3, [pc, #80]	@ (8009634 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d209      	bcs.n	8009606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f2:	4b12      	ldr	r3, [pc, #72]	@ (800963c <prvAddCurrentTaskToDelayedList+0x9c>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009634 <prvAddCurrentTaskToDelayedList+0x94>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f7fe fad1 	bl	8007ba6 <vListInsert>
}
 8009604:	e010      	b.n	8009628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009606:	4b0e      	ldr	r3, [pc, #56]	@ (8009640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b0a      	ldr	r3, [pc, #40]	@ (8009634 <prvAddCurrentTaskToDelayedList+0x94>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3304      	adds	r3, #4
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7fe fac7 	bl	8007ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009618:	4b0a      	ldr	r3, [pc, #40]	@ (8009644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d202      	bcs.n	8009628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009622:	4a08      	ldr	r2, [pc, #32]	@ (8009644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	6013      	str	r3, [r2, #0]
}
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	24001470 	.word	0x24001470
 8009634:	24000f98 	.word	0x24000f98
 8009638:	24001458 	.word	0x24001458
 800963c:	24001428 	.word	0x24001428
 8009640:	24001424 	.word	0x24001424
 8009644:	2400148c 	.word	0x2400148c

08009648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	@ 0x28
 800964c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009652:	f000 fb13 	bl	8009c7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009656:	4b1d      	ldr	r3, [pc, #116]	@ (80096cc <xTimerCreateTimerTask+0x84>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d021      	beq.n	80096a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009666:	1d3a      	adds	r2, r7, #4
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	f107 030c 	add.w	r3, r7, #12
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe f837 	bl	80076e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	9202      	str	r2, [sp, #8]
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	2302      	movs	r3, #2
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	460a      	mov	r2, r1
 8009688:	4911      	ldr	r1, [pc, #68]	@ (80096d0 <xTimerCreateTimerTask+0x88>)
 800968a:	4812      	ldr	r0, [pc, #72]	@ (80096d4 <xTimerCreateTimerTask+0x8c>)
 800968c:	f7fe ffe8 	bl	8008660 <xTaskCreateStatic>
 8009690:	4603      	mov	r3, r0
 8009692:	4a11      	ldr	r2, [pc, #68]	@ (80096d8 <xTimerCreateTimerTask+0x90>)
 8009694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009696:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <xTimerCreateTimerTask+0x90>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800969e:	2301      	movs	r3, #1
 80096a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10b      	bne.n	80096c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	613b      	str	r3, [r7, #16]
}
 80096ba:	bf00      	nop
 80096bc:	bf00      	nop
 80096be:	e7fd      	b.n	80096bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096c0:	697b      	ldr	r3, [r7, #20]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	240014c8 	.word	0x240014c8
 80096d0:	0800a820 	.word	0x0800a820
 80096d4:	08009815 	.word	0x08009815
 80096d8:	240014cc 	.word	0x240014cc

080096dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	@ 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <xTimerGenericCommand+0x30>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	623b      	str	r3, [r7, #32]
}
 8009706:	bf00      	nop
 8009708:	bf00      	nop
 800970a:	e7fd      	b.n	8009708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800970c:	4b19      	ldr	r3, [pc, #100]	@ (8009774 <xTimerGenericCommand+0x98>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d02a      	beq.n	800976a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b05      	cmp	r3, #5
 8009724:	dc18      	bgt.n	8009758 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009726:	f7ff fe95 	bl	8009454 <xTaskGetSchedulerState>
 800972a:	4603      	mov	r3, r0
 800972c:	2b02      	cmp	r3, #2
 800972e:	d109      	bne.n	8009744 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009730:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <xTimerGenericCommand+0x98>)
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	f107 0110 	add.w	r1, r7, #16
 8009738:	2300      	movs	r3, #0
 800973a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973c:	f7fe fba0 	bl	8007e80 <xQueueGenericSend>
 8009740:	6278      	str	r0, [r7, #36]	@ 0x24
 8009742:	e012      	b.n	800976a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009744:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <xTimerGenericCommand+0x98>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	f107 0110 	add.w	r1, r7, #16
 800974c:	2300      	movs	r3, #0
 800974e:	2200      	movs	r2, #0
 8009750:	f7fe fb96 	bl	8007e80 <xQueueGenericSend>
 8009754:	6278      	str	r0, [r7, #36]	@ 0x24
 8009756:	e008      	b.n	800976a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009758:	4b06      	ldr	r3, [pc, #24]	@ (8009774 <xTimerGenericCommand+0x98>)
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	f107 0110 	add.w	r1, r7, #16
 8009760:	2300      	movs	r3, #0
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	f7fe fc8e 	bl	8008084 <xQueueGenericSendFromISR>
 8009768:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800976c:	4618      	mov	r0, r3
 800976e:	3728      	adds	r7, #40	@ 0x28
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	240014c8 	.word	0x240014c8

08009778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009782:	4b23      	ldr	r3, [pc, #140]	@ (8009810 <prvProcessExpiredTimer+0x98>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	3304      	adds	r3, #4
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fa41 	bl	8007c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d023      	beq.n	80097ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	699a      	ldr	r2, [r3, #24]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	18d1      	adds	r1, r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	6978      	ldr	r0, [r7, #20]
 80097b2:	f000 f8d5 	bl	8009960 <prvInsertTimerInActiveList>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d020      	beq.n	80097fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097bc:	2300      	movs	r3, #0
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2300      	movs	r3, #0
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	6978      	ldr	r0, [r7, #20]
 80097c8:	f7ff ff88 	bl	80096dc <xTimerGenericCommand>
 80097cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d114      	bne.n	80097fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	60fb      	str	r3, [r7, #12]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	6978      	ldr	r0, [r7, #20]
 8009804:	4798      	blx	r3
}
 8009806:	bf00      	nop
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	240014c0 	.word	0x240014c0

08009814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800981c:	f107 0308 	add.w	r3, r7, #8
 8009820:	4618      	mov	r0, r3
 8009822:	f000 f859 	bl	80098d8 <prvGetNextExpireTime>
 8009826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4619      	mov	r1, r3
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 f805 	bl	800983c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009832:	f000 f8d7 	bl	80099e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009836:	bf00      	nop
 8009838:	e7f0      	b.n	800981c <prvTimerTask+0x8>
	...

0800983c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009846:	f7ff f96f 	bl	8008b28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f866 	bl	8009920 <prvSampleTimeNow>
 8009854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d130      	bne.n	80098be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <prvProcessTimerOrBlockTask+0x3c>
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	429a      	cmp	r2, r3
 8009868:	d806      	bhi.n	8009878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800986a:	f7ff f96b 	bl	8008b44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800986e:	68f9      	ldr	r1, [r7, #12]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ff81 	bl	8009778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009876:	e024      	b.n	80098c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d008      	beq.n	8009890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800987e:	4b13      	ldr	r3, [pc, #76]	@ (80098cc <prvProcessTimerOrBlockTask+0x90>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <prvProcessTimerOrBlockTask+0x50>
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <prvProcessTimerOrBlockTask+0x52>
 800988c:	2300      	movs	r3, #0
 800988e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009890:	4b0f      	ldr	r3, [pc, #60]	@ (80098d0 <prvProcessTimerOrBlockTask+0x94>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4619      	mov	r1, r3
 800989e:	f7fe feab 	bl	80085f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098a2:	f7ff f94f 	bl	8008b44 <xTaskResumeAll>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098ac:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <prvProcessTimerOrBlockTask+0x98>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
}
 80098bc:	e001      	b.n	80098c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098be:	f7ff f941 	bl	8008b44 <xTaskResumeAll>
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	240014c4 	.word	0x240014c4
 80098d0:	240014c8 	.word	0x240014c8
 80098d4:	e000ed04 	.word	0xe000ed04

080098d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098e0:	4b0e      	ldr	r3, [pc, #56]	@ (800991c <prvGetNextExpireTime+0x44>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <prvGetNextExpireTime+0x16>
 80098ea:	2201      	movs	r2, #1
 80098ec:	e000      	b.n	80098f0 <prvGetNextExpireTime+0x18>
 80098ee:	2200      	movs	r2, #0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098fc:	4b07      	ldr	r3, [pc, #28]	@ (800991c <prvGetNextExpireTime+0x44>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e001      	b.n	800990c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	240014c0 	.word	0x240014c0

08009920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009928:	f7ff f9aa 	bl	8008c80 <xTaskGetTickCount>
 800992c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800992e:	4b0b      	ldr	r3, [pc, #44]	@ (800995c <prvSampleTimeNow+0x3c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	429a      	cmp	r2, r3
 8009936:	d205      	bcs.n	8009944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009938:	f000 f93a 	bl	8009bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	e002      	b.n	800994a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800994a:	4a04      	ldr	r2, [pc, #16]	@ (800995c <prvSampleTimeNow+0x3c>)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009950:	68fb      	ldr	r3, [r7, #12]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	240014d0 	.word	0x240014d0

08009960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d812      	bhi.n	80099ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	429a      	cmp	r2, r3
 8009992:	d302      	bcc.n	800999a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009994:	2301      	movs	r3, #1
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	e01b      	b.n	80099d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800999a:	4b10      	ldr	r3, [pc, #64]	@ (80099dc <prvInsertTimerInActiveList+0x7c>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f7fe f8fe 	bl	8007ba6 <vListInsert>
 80099aa:	e012      	b.n	80099d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d206      	bcs.n	80099c2 <prvInsertTimerInActiveList+0x62>
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d302      	bcc.n	80099c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e007      	b.n	80099d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099c2:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <prvInsertTimerInActiveList+0x80>)
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f7fe f8ea 	bl	8007ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099d2:	697b      	ldr	r3, [r7, #20]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	240014c4 	.word	0x240014c4
 80099e0:	240014c0 	.word	0x240014c0

080099e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08e      	sub	sp, #56	@ 0x38
 80099e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ea:	e0ce      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da19      	bge.n	8009a26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099f2:	1d3b      	adds	r3, r7, #4
 80099f4:	3304      	adds	r3, #4
 80099f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	61fb      	str	r3, [r7, #28]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a1c:	6850      	ldr	r0, [r2, #4]
 8009a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a20:	6892      	ldr	r2, [r2, #8]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f2c0 80ae 	blt.w	8009b8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d004      	beq.n	8009a44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe f8ea 	bl	8007c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a44:	463b      	mov	r3, r7
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff ff6a 	bl	8009920 <prvSampleTimeNow>
 8009a4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b09      	cmp	r3, #9
 8009a52:	f200 8097 	bhi.w	8009b84 <prvProcessReceivedCommands+0x1a0>
 8009a56:	a201      	add	r2, pc, #4	@ (adr r2, 8009a5c <prvProcessReceivedCommands+0x78>)
 8009a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5c:	08009a85 	.word	0x08009a85
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a85 	.word	0x08009a85
 8009a68:	08009afb 	.word	0x08009afb
 8009a6c:	08009b0f 	.word	0x08009b0f
 8009a70:	08009b5b 	.word	0x08009b5b
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a85 	.word	0x08009a85
 8009a7c:	08009afb 	.word	0x08009afb
 8009a80:	08009b0f 	.word	0x08009b0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	18d1      	adds	r1, r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aa4:	f7ff ff5c 	bl	8009960 <prvInsertTimerInActiveList>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d06c      	beq.n	8009b88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ab4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d061      	beq.n	8009b88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	441a      	add	r2, r3
 8009acc:	2300      	movs	r3, #0
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad6:	f7ff fe01 	bl	80096dc <xTimerGenericCommand>
 8009ada:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d152      	bne.n	8009b88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	61bb      	str	r3, [r7, #24]
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	e7fd      	b.n	8009af6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b0c:	e03d      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10b      	bne.n	8009b46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	617b      	str	r3, [r7, #20]
}
 8009b40:	bf00      	nop
 8009b42:	bf00      	nop
 8009b44:	e7fd      	b.n	8009b42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	18d1      	adds	r1, r2, r3
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b54:	f7ff ff04 	bl	8009960 <prvInsertTimerInActiveList>
					break;
 8009b58:	e017      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b6a:	f000 fc05 	bl	800a378 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b6e:	e00c      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b82:	e002      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009b84:	bf00      	nop
 8009b86:	e000      	b.n	8009b8a <prvProcessReceivedCommands+0x1a6>
					break;
 8009b88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b8a:	4b08      	ldr	r3, [pc, #32]	@ (8009bac <prvProcessReceivedCommands+0x1c8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1d39      	adds	r1, r7, #4
 8009b90:	2200      	movs	r2, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fb14 	bl	80081c0 <xQueueReceive>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f47f af26 	bne.w	80099ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	3730      	adds	r7, #48	@ 0x30
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	240014c8 	.word	0x240014c8

08009bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bb6:	e049      	b.n	8009c4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe f821 	bl	8007c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02f      	beq.n	8009c4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d90e      	bls.n	8009c1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3304      	adds	r3, #4
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7fd ffc6 	bl	8007ba6 <vListInsert>
 8009c1a:	e017      	b.n	8009c4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	2300      	movs	r3, #0
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fd58 	bl	80096dc <xTimerGenericCommand>
 8009c2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	603b      	str	r3, [r7, #0]
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c4c:	4b09      	ldr	r3, [pc, #36]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1b0      	bne.n	8009bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c56:	4b07      	ldr	r3, [pc, #28]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c5c:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <prvSwitchTimerLists+0xc8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a04      	ldr	r2, [pc, #16]	@ (8009c74 <prvSwitchTimerLists+0xc4>)
 8009c62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c64:	4a04      	ldr	r2, [pc, #16]	@ (8009c78 <prvSwitchTimerLists+0xc8>)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6013      	str	r3, [r2, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	240014c0 	.word	0x240014c0
 8009c78:	240014c4 	.word	0x240014c4

08009c7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c82:	f000 f989 	bl	8009f98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c86:	4b15      	ldr	r3, [pc, #84]	@ (8009cdc <prvCheckForValidListAndQueue+0x60>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d120      	bne.n	8009cd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c8e:	4814      	ldr	r0, [pc, #80]	@ (8009ce0 <prvCheckForValidListAndQueue+0x64>)
 8009c90:	f7fd ff38 	bl	8007b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c94:	4813      	ldr	r0, [pc, #76]	@ (8009ce4 <prvCheckForValidListAndQueue+0x68>)
 8009c96:	f7fd ff35 	bl	8007b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c9a:	4b13      	ldr	r3, [pc, #76]	@ (8009ce8 <prvCheckForValidListAndQueue+0x6c>)
 8009c9c:	4a10      	ldr	r2, [pc, #64]	@ (8009ce0 <prvCheckForValidListAndQueue+0x64>)
 8009c9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ca0:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <prvCheckForValidListAndQueue+0x70>)
 8009ca2:	4a10      	ldr	r2, [pc, #64]	@ (8009ce4 <prvCheckForValidListAndQueue+0x68>)
 8009ca4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4b11      	ldr	r3, [pc, #68]	@ (8009cf0 <prvCheckForValidListAndQueue+0x74>)
 8009cac:	4a11      	ldr	r2, [pc, #68]	@ (8009cf4 <prvCheckForValidListAndQueue+0x78>)
 8009cae:	2110      	movs	r1, #16
 8009cb0:	200a      	movs	r0, #10
 8009cb2:	f7fe f845 	bl	8007d40 <xQueueGenericCreateStatic>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4a08      	ldr	r2, [pc, #32]	@ (8009cdc <prvCheckForValidListAndQueue+0x60>)
 8009cba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cbc:	4b07      	ldr	r3, [pc, #28]	@ (8009cdc <prvCheckForValidListAndQueue+0x60>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cc4:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <prvCheckForValidListAndQueue+0x60>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	490b      	ldr	r1, [pc, #44]	@ (8009cf8 <prvCheckForValidListAndQueue+0x7c>)
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fc6a 	bl	80085a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cd0:	f000 f994 	bl	8009ffc <vPortExitCritical>
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	240014c8 	.word	0x240014c8
 8009ce0:	24001498 	.word	0x24001498
 8009ce4:	240014ac 	.word	0x240014ac
 8009ce8:	240014c0 	.word	0x240014c0
 8009cec:	240014c4 	.word	0x240014c4
 8009cf0:	24001574 	.word	0x24001574
 8009cf4:	240014d4 	.word	0x240014d4
 8009cf8:	0800a828 	.word	0x0800a828

08009cfc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	@ 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009d0a:	f06f 0301 	mvn.w	r3, #1
 8009d0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d1c:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <xTimerPendFunctionCallFromISR+0x3c>)
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	f107 0114 	add.w	r1, r7, #20
 8009d24:	2300      	movs	r3, #0
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	f7fe f9ac 	bl	8008084 <xQueueGenericSendFromISR>
 8009d2c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	@ 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	240014c8 	.word	0x240014c8

08009d3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3b04      	subs	r3, #4
 8009d4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3b04      	subs	r3, #4
 8009d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f023 0201 	bic.w	r2, r3, #1
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8009da0 <pxPortInitialiseStack+0x64>)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3b14      	subs	r3, #20
 8009d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3b04      	subs	r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f06f 0202 	mvn.w	r2, #2
 8009d8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3b20      	subs	r3, #32
 8009d90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d92:	68fb      	ldr	r3, [r7, #12]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	08009da5 	.word	0x08009da5

08009da4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dae:	4b13      	ldr	r3, [pc, #76]	@ (8009dfc <prvTaskExitError+0x58>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009db6:	d00b      	beq.n	8009dd0 <prvTaskExitError+0x2c>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <prvTaskExitError+0x28>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60bb      	str	r3, [r7, #8]
}
 8009de2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009de4:	bf00      	nop
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0fc      	beq.n	8009de6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	24000010 	.word	0x24000010

08009e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e00:	4b07      	ldr	r3, [pc, #28]	@ (8009e20 <pxCurrentTCBConst2>)
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	6808      	ldr	r0, [r1, #0]
 8009e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f380 8809 	msr	PSP, r0
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8811 	msr	BASEPRI, r0
 8009e1a:	4770      	bx	lr
 8009e1c:	f3af 8000 	nop.w

08009e20 <pxCurrentTCBConst2>:
 8009e20:	24000f98 	.word	0x24000f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop

08009e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e28:	4808      	ldr	r0, [pc, #32]	@ (8009e4c <prvPortStartFirstTask+0x24>)
 8009e2a:	6800      	ldr	r0, [r0, #0]
 8009e2c:	6800      	ldr	r0, [r0, #0]
 8009e2e:	f380 8808 	msr	MSP, r0
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8814 	msr	CONTROL, r0
 8009e3a:	b662      	cpsie	i
 8009e3c:	b661      	cpsie	f
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	df00      	svc	0
 8009e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e4a:	bf00      	nop
 8009e4c:	e000ed08 	.word	0xe000ed08

08009e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e56:	4b47      	ldr	r3, [pc, #284]	@ (8009f74 <xPortStartScheduler+0x124>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a47      	ldr	r2, [pc, #284]	@ (8009f78 <xPortStartScheduler+0x128>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d10b      	bne.n	8009e78 <xPortStartScheduler+0x28>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e78:	4b3e      	ldr	r3, [pc, #248]	@ (8009f74 <xPortStartScheduler+0x124>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f7c <xPortStartScheduler+0x12c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d10b      	bne.n	8009e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	60fb      	str	r3, [r7, #12]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e9a:	4b39      	ldr	r3, [pc, #228]	@ (8009f80 <xPortStartScheduler+0x130>)
 8009e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	22ff      	movs	r2, #255	@ 0xff
 8009eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	4b31      	ldr	r3, [pc, #196]	@ (8009f84 <xPortStartScheduler+0x134>)
 8009ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ec2:	4b31      	ldr	r3, [pc, #196]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ec4:	2207      	movs	r2, #7
 8009ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ec8:	e009      	b.n	8009ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009eca:	4b2f      	ldr	r3, [pc, #188]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee6:	2b80      	cmp	r3, #128	@ 0x80
 8009ee8:	d0ef      	beq.n	8009eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eea:	4b27      	ldr	r3, [pc, #156]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1c3 0307 	rsb	r3, r3, #7
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d00b      	beq.n	8009f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60bb      	str	r3, [r7, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	4a1c      	ldr	r2, [pc, #112]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f20:	4a19      	ldr	r2, [pc, #100]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f2c:	4b17      	ldr	r3, [pc, #92]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a16      	ldr	r2, [pc, #88]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f38:	4b14      	ldr	r3, [pc, #80]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a13      	ldr	r2, [pc, #76]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f44:	f000 f8da 	bl	800a0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f48:	4b11      	ldr	r3, [pc, #68]	@ (8009f90 <xPortStartScheduler+0x140>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f4e:	f000 f8f9 	bl	800a144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f52:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <xPortStartScheduler+0x144>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a0f      	ldr	r2, [pc, #60]	@ (8009f94 <xPortStartScheduler+0x144>)
 8009f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f5e:	f7ff ff63 	bl	8009e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f62:	f7fe ff57 	bl	8008e14 <vTaskSwitchContext>
	prvTaskExitError();
 8009f66:	f7ff ff1d 	bl	8009da4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	e000ed00 	.word	0xe000ed00
 8009f78:	410fc271 	.word	0x410fc271
 8009f7c:	410fc270 	.word	0x410fc270
 8009f80:	e000e400 	.word	0xe000e400
 8009f84:	240015c4 	.word	0x240015c4
 8009f88:	240015c8 	.word	0x240015c8
 8009f8c:	e000ed20 	.word	0xe000ed20
 8009f90:	24000010 	.word	0x24000010
 8009f94:	e000ef34 	.word	0xe000ef34

08009f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d110      	bne.n	8009fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <vPortEnterCritical+0x60>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	603b      	str	r3, [r7, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	e7fd      	b.n	8009fe2 <vPortEnterCritical+0x4a>
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	24000010 	.word	0x24000010
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a002:	4b12      	ldr	r3, [pc, #72]	@ (800a04c <vPortExitCritical+0x50>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <vPortExitCritical+0x26>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	607b      	str	r3, [r7, #4]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a022:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <vPortExitCritical+0x50>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3b01      	subs	r3, #1
 800a028:	4a08      	ldr	r2, [pc, #32]	@ (800a04c <vPortExitCritical+0x50>)
 800a02a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a02c:	4b07      	ldr	r3, [pc, #28]	@ (800a04c <vPortExitCritical+0x50>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <vPortExitCritical+0x44>
 800a034:	2300      	movs	r3, #0
 800a036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	f383 8811 	msr	BASEPRI, r3
}
 800a03e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	24000010 	.word	0x24000010

0800a050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a050:	f3ef 8009 	mrs	r0, PSP
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4b15      	ldr	r3, [pc, #84]	@ (800a0b0 <pxCurrentTCBConst>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	f01e 0f10 	tst.w	lr, #16
 800a060:	bf08      	it	eq
 800a062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a074:	f380 8811 	msr	BASEPRI, r0
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f7fe fec8 	bl	8008e14 <vTaskSwitchContext>
 800a084:	f04f 0000 	mov.w	r0, #0
 800a088:	f380 8811 	msr	BASEPRI, r0
 800a08c:	bc09      	pop	{r0, r3}
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	6808      	ldr	r0, [r1, #0]
 800a092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a096:	f01e 0f10 	tst.w	lr, #16
 800a09a:	bf08      	it	eq
 800a09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0a0:	f380 8809 	msr	PSP, r0
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst>:
 800a0b0:	24000f98 	.word	0x24000f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0d2:	f7fe fde5 	bl	8008ca0 <xTaskIncrementTick>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0dc:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <xPortSysTickHandler+0x40>)
 800a0de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
}
 800a0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a100:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a106:	4b0b      	ldr	r3, [pc, #44]	@ (800a134 <vPortSetupTimerInterrupt+0x38>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a10c:	4b0a      	ldr	r3, [pc, #40]	@ (800a138 <vPortSetupTimerInterrupt+0x3c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0a      	ldr	r2, [pc, #40]	@ (800a13c <vPortSetupTimerInterrupt+0x40>)
 800a112:	fba2 2303 	umull	r2, r3, r2, r3
 800a116:	099b      	lsrs	r3, r3, #6
 800a118:	4a09      	ldr	r2, [pc, #36]	@ (800a140 <vPortSetupTimerInterrupt+0x44>)
 800a11a:	3b01      	subs	r3, #1
 800a11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a11e:	4b04      	ldr	r3, [pc, #16]	@ (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a120:	2207      	movs	r2, #7
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	e000e010 	.word	0xe000e010
 800a134:	e000e018 	.word	0xe000e018
 800a138:	24000000 	.word	0x24000000
 800a13c:	10624dd3 	.word	0x10624dd3
 800a140:	e000e014 	.word	0xe000e014

0800a144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a154 <vPortEnableVFP+0x10>
 800a148:	6801      	ldr	r1, [r0, #0]
 800a14a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a14e:	6001      	str	r1, [r0, #0]
 800a150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a152:	bf00      	nop
 800a154:	e000ed88 	.word	0xe000ed88

0800a158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b0f      	cmp	r3, #15
 800a168:	d915      	bls.n	800a196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a16a:	4a18      	ldr	r2, [pc, #96]	@ (800a1cc <vPortValidateInterruptPriority+0x74>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a174:	4b16      	ldr	r3, [pc, #88]	@ (800a1d0 <vPortValidateInterruptPriority+0x78>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	7afa      	ldrb	r2, [r7, #11]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d20b      	bcs.n	800a196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	607b      	str	r3, [r7, #4]
}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	e7fd      	b.n	800a192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a196:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <vPortValidateInterruptPriority+0x7c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <vPortValidateInterruptPriority+0x80>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90b      	bls.n	800a1be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	603b      	str	r3, [r7, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortValidateInterruptPriority+0x62>
	}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	e000e3f0 	.word	0xe000e3f0
 800a1d0:	240015c4 	.word	0x240015c4
 800a1d4:	e000ed0c 	.word	0xe000ed0c
 800a1d8:	240015c8 	.word	0x240015c8

0800a1dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	@ 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1e8:	f7fe fc9e 	bl	8008b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a360 <pvPortMalloc+0x184>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1f4:	f000 f924 	bl	800a440 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a364 <pvPortMalloc+0x188>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4013      	ands	r3, r2
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 8095 	bne.w	800a330 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01e      	beq.n	800a24a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a20c:	2208      	movs	r2, #8
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4413      	add	r3, r2
 800a212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d015      	beq.n	800a24a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f023 0307 	bic.w	r3, r3, #7
 800a224:	3308      	adds	r3, #8
 800a226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <pvPortMalloc+0x6e>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	617b      	str	r3, [r7, #20]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d06f      	beq.n	800a330 <pvPortMalloc+0x154>
 800a250:	4b45      	ldr	r3, [pc, #276]	@ (800a368 <pvPortMalloc+0x18c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d86a      	bhi.n	800a330 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a25a:	4b44      	ldr	r3, [pc, #272]	@ (800a36c <pvPortMalloc+0x190>)
 800a25c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a25e:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <pvPortMalloc+0x190>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a264:	e004      	b.n	800a270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d903      	bls.n	800a282 <pvPortMalloc+0xa6>
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1f1      	bne.n	800a266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a282:	4b37      	ldr	r3, [pc, #220]	@ (800a360 <pvPortMalloc+0x184>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a288:	429a      	cmp	r2, r3
 800a28a:	d051      	beq.n	800a330 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2208      	movs	r2, #8
 800a292:	4413      	add	r3, r2
 800a294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d920      	bls.n	800a2f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <pvPortMalloc+0xfc>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2ea:	69b8      	ldr	r0, [r7, #24]
 800a2ec:	f000 f90a 	bl	800a504 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a368 <pvPortMalloc+0x18c>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a368 <pvPortMalloc+0x18c>)
 800a2fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a368 <pvPortMalloc+0x18c>)
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b1b      	ldr	r3, [pc, #108]	@ (800a370 <pvPortMalloc+0x194>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d203      	bcs.n	800a312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a30a:	4b17      	ldr	r3, [pc, #92]	@ (800a368 <pvPortMalloc+0x18c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a18      	ldr	r2, [pc, #96]	@ (800a370 <pvPortMalloc+0x194>)
 800a310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <pvPortMalloc+0x188>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a326:	4b13      	ldr	r3, [pc, #76]	@ (800a374 <pvPortMalloc+0x198>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	4a11      	ldr	r2, [pc, #68]	@ (800a374 <pvPortMalloc+0x198>)
 800a32e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a330:	f7fe fc08 	bl	8008b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <pvPortMalloc+0x17a>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <pvPortMalloc+0x176>
	return pvReturn;
 800a356:	69fb      	ldr	r3, [r7, #28]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3728      	adds	r7, #40	@ 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	240051d4 	.word	0x240051d4
 800a364:	240051e8 	.word	0x240051e8
 800a368:	240051d8 	.word	0x240051d8
 800a36c:	240051cc 	.word	0x240051cc
 800a370:	240051dc 	.word	0x240051dc
 800a374:	240051e0 	.word	0x240051e0

0800a378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d04f      	beq.n	800a42a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a38a:	2308      	movs	r3, #8
 800a38c:	425b      	negs	r3, r3
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	4b25      	ldr	r3, [pc, #148]	@ (800a434 <vPortFree+0xbc>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <vPortFree+0x46>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60fb      	str	r3, [r7, #12]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <vPortFree+0x66>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60bb      	str	r3, [r7, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <vPortFree+0xbc>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01e      	beq.n	800a42a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d11a      	bne.n	800a42a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a434 <vPortFree+0xbc>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	401a      	ands	r2, r3
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a404:	f7fe fb90 	bl	8008b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b0a      	ldr	r3, [pc, #40]	@ (800a438 <vPortFree+0xc0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4413      	add	r3, r2
 800a412:	4a09      	ldr	r2, [pc, #36]	@ (800a438 <vPortFree+0xc0>)
 800a414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f000 f874 	bl	800a504 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a41c:	4b07      	ldr	r3, [pc, #28]	@ (800a43c <vPortFree+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	4a06      	ldr	r2, [pc, #24]	@ (800a43c <vPortFree+0xc4>)
 800a424:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a426:	f7fe fb8d 	bl	8008b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a42a:	bf00      	nop
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	240051e8 	.word	0x240051e8
 800a438:	240051d8 	.word	0x240051d8
 800a43c:	240051e4 	.word	0x240051e4

0800a440 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a446:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a44a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a44c:	4b27      	ldr	r3, [pc, #156]	@ (800a4ec <prvHeapInit+0xac>)
 800a44e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00c      	beq.n	800a474 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3307      	adds	r3, #7
 800a45e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ec <prvHeapInit+0xac>)
 800a470:	4413      	add	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a478:	4a1d      	ldr	r2, [pc, #116]	@ (800a4f0 <prvHeapInit+0xb0>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a47e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f0 <prvHeapInit+0xb0>)
 800a480:	2200      	movs	r2, #0
 800a482:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	4413      	add	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a48c:	2208      	movs	r2, #8
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0307 	bic.w	r3, r3, #7
 800a49a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4a15      	ldr	r2, [pc, #84]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4a2:	4b14      	ldr	r3, [pc, #80]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4aa:	4b12      	ldr	r3, [pc, #72]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f8 <prvHeapInit+0xb8>)
 800a4ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4a09      	ldr	r2, [pc, #36]	@ (800a4fc <prvHeapInit+0xbc>)
 800a4d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4d8:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <prvHeapInit+0xc0>)
 800a4da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a4de:	601a      	str	r2, [r3, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	240015cc 	.word	0x240015cc
 800a4f0:	240051cc 	.word	0x240051cc
 800a4f4:	240051d4 	.word	0x240051d4
 800a4f8:	240051dc 	.word	0x240051dc
 800a4fc:	240051d8 	.word	0x240051d8
 800a500:	240051e8 	.word	0x240051e8

0800a504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a50c:	4b28      	ldr	r3, [pc, #160]	@ (800a5b0 <prvInsertBlockIntoFreeList+0xac>)
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e002      	b.n	800a518 <prvInsertBlockIntoFreeList+0x14>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d8f7      	bhi.n	800a512 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4413      	add	r3, r2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d108      	bne.n	800a546 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	441a      	add	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d118      	bne.n	800a58c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d00d      	beq.n	800a582 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	441a      	add	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	e008      	b.n	800a594 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e003      	b.n	800a594 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d002      	beq.n	800a5a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5a2:	bf00      	nop
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	240051cc 	.word	0x240051cc
 800a5b4:	240051d4 	.word	0x240051d4

0800a5b8 <memset>:
 800a5b8:	4402      	add	r2, r0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d100      	bne.n	800a5c2 <memset+0xa>
 800a5c0:	4770      	bx	lr
 800a5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5c6:	e7f9      	b.n	800a5bc <memset+0x4>

0800a5c8 <_reclaim_reent>:
 800a5c8:	4b29      	ldr	r3, [pc, #164]	@ (800a670 <_reclaim_reent+0xa8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	d04b      	beq.n	800a66c <_reclaim_reent+0xa4>
 800a5d4:	69c3      	ldr	r3, [r0, #28]
 800a5d6:	b1ab      	cbz	r3, 800a604 <_reclaim_reent+0x3c>
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	b16b      	cbz	r3, 800a5f8 <_reclaim_reent+0x30>
 800a5dc:	2500      	movs	r5, #0
 800a5de:	69e3      	ldr	r3, [r4, #28]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	5959      	ldr	r1, [r3, r5]
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d13b      	bne.n	800a660 <_reclaim_reent+0x98>
 800a5e8:	3504      	adds	r5, #4
 800a5ea:	2d80      	cmp	r5, #128	@ 0x80
 800a5ec:	d1f7      	bne.n	800a5de <_reclaim_reent+0x16>
 800a5ee:	69e3      	ldr	r3, [r4, #28]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	68d9      	ldr	r1, [r3, #12]
 800a5f4:	f000 f872 	bl	800a6dc <_free_r>
 800a5f8:	69e3      	ldr	r3, [r4, #28]
 800a5fa:	6819      	ldr	r1, [r3, #0]
 800a5fc:	b111      	cbz	r1, 800a604 <_reclaim_reent+0x3c>
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 f86c 	bl	800a6dc <_free_r>
 800a604:	6961      	ldr	r1, [r4, #20]
 800a606:	b111      	cbz	r1, 800a60e <_reclaim_reent+0x46>
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 f867 	bl	800a6dc <_free_r>
 800a60e:	69e1      	ldr	r1, [r4, #28]
 800a610:	b111      	cbz	r1, 800a618 <_reclaim_reent+0x50>
 800a612:	4620      	mov	r0, r4
 800a614:	f000 f862 	bl	800a6dc <_free_r>
 800a618:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a61a:	b111      	cbz	r1, 800a622 <_reclaim_reent+0x5a>
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 f85d 	bl	800a6dc <_free_r>
 800a622:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a624:	b111      	cbz	r1, 800a62c <_reclaim_reent+0x64>
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f858 	bl	800a6dc <_free_r>
 800a62c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a62e:	b111      	cbz	r1, 800a636 <_reclaim_reent+0x6e>
 800a630:	4620      	mov	r0, r4
 800a632:	f000 f853 	bl	800a6dc <_free_r>
 800a636:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a638:	b111      	cbz	r1, 800a640 <_reclaim_reent+0x78>
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 f84e 	bl	800a6dc <_free_r>
 800a640:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a642:	b111      	cbz	r1, 800a64a <_reclaim_reent+0x82>
 800a644:	4620      	mov	r0, r4
 800a646:	f000 f849 	bl	800a6dc <_free_r>
 800a64a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a64c:	b111      	cbz	r1, 800a654 <_reclaim_reent+0x8c>
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 f844 	bl	800a6dc <_free_r>
 800a654:	6a23      	ldr	r3, [r4, #32]
 800a656:	b14b      	cbz	r3, 800a66c <_reclaim_reent+0xa4>
 800a658:	4620      	mov	r0, r4
 800a65a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a65e:	4718      	bx	r3
 800a660:	680e      	ldr	r6, [r1, #0]
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f83a 	bl	800a6dc <_free_r>
 800a668:	4631      	mov	r1, r6
 800a66a:	e7bb      	b.n	800a5e4 <_reclaim_reent+0x1c>
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
 800a66e:	bf00      	nop
 800a670:	24000014 	.word	0x24000014

0800a674 <__libc_init_array>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4d0d      	ldr	r5, [pc, #52]	@ (800a6ac <__libc_init_array+0x38>)
 800a678:	4c0d      	ldr	r4, [pc, #52]	@ (800a6b0 <__libc_init_array+0x3c>)
 800a67a:	1b64      	subs	r4, r4, r5
 800a67c:	10a4      	asrs	r4, r4, #2
 800a67e:	2600      	movs	r6, #0
 800a680:	42a6      	cmp	r6, r4
 800a682:	d109      	bne.n	800a698 <__libc_init_array+0x24>
 800a684:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b4 <__libc_init_array+0x40>)
 800a686:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b8 <__libc_init_array+0x44>)
 800a688:	f000 f87e 	bl	800a788 <_init>
 800a68c:	1b64      	subs	r4, r4, r5
 800a68e:	10a4      	asrs	r4, r4, #2
 800a690:	2600      	movs	r6, #0
 800a692:	42a6      	cmp	r6, r4
 800a694:	d105      	bne.n	800a6a2 <__libc_init_array+0x2e>
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69c:	4798      	blx	r3
 800a69e:	3601      	adds	r6, #1
 800a6a0:	e7ee      	b.n	800a680 <__libc_init_array+0xc>
 800a6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a6:	4798      	blx	r3
 800a6a8:	3601      	adds	r6, #1
 800a6aa:	e7f2      	b.n	800a692 <__libc_init_array+0x1e>
 800a6ac:	0800a8c8 	.word	0x0800a8c8
 800a6b0:	0800a8c8 	.word	0x0800a8c8
 800a6b4:	0800a8c8 	.word	0x0800a8c8
 800a6b8:	0800a8cc 	.word	0x0800a8cc

0800a6bc <__retarget_lock_acquire_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_release_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <memcpy>:
 800a6c0:	440a      	add	r2, r1
 800a6c2:	4291      	cmp	r1, r2
 800a6c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a6c8:	d100      	bne.n	800a6cc <memcpy+0xc>
 800a6ca:	4770      	bx	lr
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d6:	4291      	cmp	r1, r2
 800a6d8:	d1f9      	bne.n	800a6ce <memcpy+0xe>
 800a6da:	bd10      	pop	{r4, pc}

0800a6dc <_free_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4605      	mov	r5, r0
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	d041      	beq.n	800a768 <_free_r+0x8c>
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f0c      	subs	r4, r1, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfb8      	it	lt
 800a6ee:	18e4      	addlt	r4, r4, r3
 800a6f0:	f000 f83e 	bl	800a770 <__malloc_lock>
 800a6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a76c <_free_r+0x90>)
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	b933      	cbnz	r3, 800a708 <_free_r+0x2c>
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	6014      	str	r4, [r2, #0]
 800a6fe:	4628      	mov	r0, r5
 800a700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a704:	f000 b83a 	b.w	800a77c <__malloc_unlock>
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d908      	bls.n	800a71e <_free_r+0x42>
 800a70c:	6820      	ldr	r0, [r4, #0]
 800a70e:	1821      	adds	r1, r4, r0
 800a710:	428b      	cmp	r3, r1
 800a712:	bf01      	itttt	eq
 800a714:	6819      	ldreq	r1, [r3, #0]
 800a716:	685b      	ldreq	r3, [r3, #4]
 800a718:	1809      	addeq	r1, r1, r0
 800a71a:	6021      	streq	r1, [r4, #0]
 800a71c:	e7ed      	b.n	800a6fa <_free_r+0x1e>
 800a71e:	461a      	mov	r2, r3
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	b10b      	cbz	r3, 800a728 <_free_r+0x4c>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d9fa      	bls.n	800a71e <_free_r+0x42>
 800a728:	6811      	ldr	r1, [r2, #0]
 800a72a:	1850      	adds	r0, r2, r1
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d10b      	bne.n	800a748 <_free_r+0x6c>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	4401      	add	r1, r0
 800a734:	1850      	adds	r0, r2, r1
 800a736:	4283      	cmp	r3, r0
 800a738:	6011      	str	r1, [r2, #0]
 800a73a:	d1e0      	bne.n	800a6fe <_free_r+0x22>
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	6053      	str	r3, [r2, #4]
 800a742:	4408      	add	r0, r1
 800a744:	6010      	str	r0, [r2, #0]
 800a746:	e7da      	b.n	800a6fe <_free_r+0x22>
 800a748:	d902      	bls.n	800a750 <_free_r+0x74>
 800a74a:	230c      	movs	r3, #12
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	e7d6      	b.n	800a6fe <_free_r+0x22>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	1821      	adds	r1, r4, r0
 800a754:	428b      	cmp	r3, r1
 800a756:	bf04      	itt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	6063      	str	r3, [r4, #4]
 800a75e:	bf04      	itt	eq
 800a760:	1809      	addeq	r1, r1, r0
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	6054      	str	r4, [r2, #4]
 800a766:	e7ca      	b.n	800a6fe <_free_r+0x22>
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	24005328 	.word	0x24005328

0800a770 <__malloc_lock>:
 800a770:	4801      	ldr	r0, [pc, #4]	@ (800a778 <__malloc_lock+0x8>)
 800a772:	f7ff bfa3 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a776:	bf00      	nop
 800a778:	24005324 	.word	0x24005324

0800a77c <__malloc_unlock>:
 800a77c:	4801      	ldr	r0, [pc, #4]	@ (800a784 <__malloc_unlock+0x8>)
 800a77e:	f7ff bf9e 	b.w	800a6be <__retarget_lock_release_recursive>
 800a782:	bf00      	nop
 800a784:	24005324 	.word	0x24005324

0800a788 <_init>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr

0800a794 <_fini>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr
