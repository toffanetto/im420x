
nucleo-H753ZI_Aula5_Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a330  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800a5d0  0800a5d0  0000b5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6d0  0800a6d0  0000b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6d8  0800a6d8  0000b6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6dc  0800a6dc  0000b6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a6e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a744  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a7a4  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  24000124  0800a804  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005328  0800a804  0000c328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c96  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005068  00000000  00000000  00035de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001722  00000000  00000000  0003cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c779  00000000  00000000  0003e34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b96  00000000  00000000  0007aac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001776ec  00000000  00000000  000a0659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00217d45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  00217d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0021ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a5b8 	.word	0x0800a5b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a5b8 	.word	0x0800a5b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f001 f8f0 	bl	8001804 <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fc9f 	bl	8000f6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f009 fed8 	bl	800a3e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fc77 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fc67 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fc56 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fc45 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000808:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_FREERTOS_Init+0x28>)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_FREERTOS_Init+0x2c>)
 800080e:	f006 fdad 	bl	800736c <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <MX_FREERTOS_Init+0x30>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <MX_FREERTOS_Init+0x34>)
 800081a:	2100      	movs	r1, #0
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_FREERTOS_Init+0x38>)
 800081e:	f006 fda5 	bl	800736c <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <MX_FREERTOS_Init+0x3c>)
 8000826:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800a650 	.word	0x0800a650
 8000830:	08000845 	.word	0x08000845
 8000834:	24000230 	.word	0x24000230
 8000838:	0800a674 	.word	0x0800a674
 800083c:	08000871 	.word	0x08000871
 8000840:	24000234 	.word	0x24000234

08000844 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  osDelay(1); // Blocking Task1 for force Task2 to run first
 800084c:	2001      	movs	r0, #1
 800084e:	f006 feee 	bl	800762e <osDelay>
  for(;;)
  {
	osThreadFlagsSet(Task2Handle, 0x01);
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <StartTask1+0x28>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f006 fe19 	bl	8007490 <osThreadFlagsSet>
	osDelay(500);
 800085e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000862:	f006 fee4 	bl	800762e <osDelay>
	osThreadFlagsSet(Task2Handle, 0x01);
 8000866:	bf00      	nop
 8000868:	e7f3      	b.n	8000852 <StartTask1+0xe>
 800086a:	bf00      	nop
 800086c:	24000234 	.word	0x24000234

08000870 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */

  unsigned char ucCounter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 800087c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000880:	2101      	movs	r1, #1
 8000882:	2001      	movs	r0, #1
 8000884:	f006 fe52 	bl	800752c <osThreadFlagsWait>
	printf_("Printf escrito pela Task2 liberado pela Thread Flag setada pela Task1. #%d\n\r", ucCounter);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <StartTask2+0x34>)
 800088e:	f000 fab1 	bl	8000df4 <printf_>
	ucCounter++;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	3301      	adds	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000898:	2102      	movs	r1, #2
 800089a:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <StartTask2+0x38>)
 800089c:	f001 fdaf 	bl	80023fe <HAL_GPIO_TogglePin>
	osThreadFlagsWait(0x01, osFlagsWaitAll, osWaitForever);
 80008a0:	bf00      	nop
 80008a2:	e7eb      	b.n	800087c <StartTask2+0xc>
 80008a4:	0800a5e0 	.word	0x0800a5e0
 80008a8:	58021000 	.word	0x58021000

080008ac <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b62      	ldr	r3, [pc, #392]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c8:	4a60      	ldr	r2, [pc, #384]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a59      	ldr	r2, [pc, #356]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	4a51      	ldr	r2, [pc, #324]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	4a4a      	ldr	r2, [pc, #296]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000958:	4b3c      	ldr	r3, [pc, #240]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	4a33      	ldr	r2, [pc, #204]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <MX_GPIO_Init+0x1a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f244 0101 	movw	r1, #16385	@ 0x4001
 800099a:	482d      	ldr	r0, [pc, #180]	@ (8000a50 <MX_GPIO_Init+0x1a4>)
 800099c:	f001 fd16 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a6:	482b      	ldr	r0, [pc, #172]	@ (8000a54 <MX_GPIO_Init+0x1a8>)
 80009a8:	f001 fd10 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2102      	movs	r1, #2
 80009b0:	4829      	ldr	r0, [pc, #164]	@ (8000a58 <MX_GPIO_Init+0x1ac>)
 80009b2:	f001 fd0b 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <MX_GPIO_Init+0x1b0>)
 80009cc:	f001 fb4e 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009d0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <MX_GPIO_Init+0x1a4>)
 80009ea:	f001 fb3f 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <MX_GPIO_Init+0x1a8>)
 8000a08:	f001 fb30 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <MX_GPIO_Init+0x1b4>)
 8000a22:	f001 fb23 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_GPIO_Init+0x1ac>)
 8000a3e:	f001 fb15 	bl	800206c <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	@ 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58020c00 	.word	0x58020c00
 8000a58:	58021000 	.word	0x58021000
 8000a5c:	58020800 	.word	0x58020800
 8000a60:	58021800 	.word	0x58021800

08000a64 <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	if (str) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00a      	beq.n	8000a8a <printchar_+0x26>
		**str = (char)c;
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000a88:	e005      	b.n	8000a96 <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000a8a:	4639      	mov	r1, r7
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <printchar_+0x3c>)
 8000a92:	f004 ffbb 	bl	8005a0c <HAL_UART_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000284 	.word	0x24000284

08000aa4 <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dd17      	ble.n	8000af0 <prints_+0x4c>
		register int len = 0;
 8000ac0:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000ac2:	68be      	ldr	r6, [r7, #8]
 8000ac4:	e001      	b.n	8000aca <prints_+0x26>
 8000ac6:	3501      	adds	r5, #1
 8000ac8:	3601      	adds	r6, #1
 8000aca:	7833      	ldrb	r3, [r6, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1fa      	bne.n	8000ac6 <prints_+0x22>
		if (len >= width) width = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429d      	cmp	r5, r3
 8000ad4:	db02      	blt.n	8000adc <prints_+0x38>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	e002      	b.n	8000ae2 <prints_+0x3e>
		else width -= len;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1b5b      	subs	r3, r3, r5
 8000ae0:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <prints_+0x4c>
 8000aec:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d116      	bne.n	8000b28 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000afa:	e007      	b.n	8000b0c <prints_+0x68>
			printchar_(out, padchar);
 8000afc:	4641      	mov	r1, r8
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ffb0 	bl	8000a64 <printchar_>
			++pc;
 8000b04:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dcf4      	bgt.n	8000afc <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000b12:	e009      	b.n	8000b28 <prints_+0x84>
		printchar_(out, *string);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ffa2 	bl	8000a64 <printchar_>
		++pc;
 8000b20:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000b30:	e007      	b.n	8000b42 <prints_+0x9e>
		printchar_(out, padchar);
 8000b32:	4641      	mov	r1, r8
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ff95 	bl	8000a64 <printchar_>
		++pc;
 8000b3a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dcf4      	bgt.n	8000b32 <prints_+0x8e>
	}

	return pc;
 8000b48:	4623      	mov	r3, r4
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b54 <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b58:	b089      	sub	sp, #36	@ 0x24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000b64:	f04f 0900 	mov.w	r9, #0
 8000b68:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000b6a:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10c      	bne.n	8000b8c <printi_+0x38>
		print_buf[0] = '0';
 8000b72:	2330      	movs	r3, #48	@ 0x30
 8000b74:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000b76:	2300      	movs	r3, #0
 8000b78:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000b7a:	f107 0114 	add.w	r1, r7, #20
 8000b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ff8e 	bl	8000aa4 <prints_>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	e04a      	b.n	8000c22 <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <printi_+0x54>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0a      	cmp	r3, #10
 8000b96:	d107      	bne.n	8000ba8 <printi_+0x54>
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da04      	bge.n	8000ba8 <printi_+0x54>
		neg = 1;
 8000b9e:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000ba8:	f107 0414 	add.w	r4, r7, #20
 8000bac:	340b      	adds	r4, #11
	*s = '\0';
 8000bae:	2300      	movs	r3, #0
 8000bb0:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000bb2:	e015      	b.n	8000be0 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	fbb5 f2f3 	udiv	r2, r5, r3
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	1aeb      	subs	r3, r5, r3
 8000bc0:	4698      	mov	r8, r3
		if( t >= 10 )
 8000bc2:	f1b8 0f09 	cmp.w	r8, #9
 8000bc6:	dd02      	ble.n	8000bce <printi_+0x7a>
			t += letbase - '0' - 10;
 8000bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bca:	3b3a      	subs	r3, #58	@ 0x3a
 8000bcc:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000bce:	fa5f f388 	uxtb.w	r3, r8
 8000bd2:	3c01      	subs	r4, #1
 8000bd4:	3330      	adds	r3, #48	@ 0x30
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d1e7      	bne.n	8000bb4 <printi_+0x60>
	}

	if (neg) {
 8000be4:	f1b9 0f00 	cmp.w	r9, #0
 8000be8:	d013      	beq.n	8000c12 <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00d      	beq.n	8000c0c <printi_+0xb8>
 8000bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <printi_+0xb8>
			printchar_(out, '-');
 8000bfa:	212d      	movs	r1, #45	@ 0x2d
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ff31 	bl	8000a64 <printchar_>
			++pc;
 8000c02:	3601      	adds	r6, #1
			--width;
 8000c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c06:	3b01      	subs	r3, #1
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c0a:	e002      	b.n	8000c12 <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000c0c:	3c01      	subs	r4, #1
 8000c0e:	232d      	movs	r3, #45	@ 0x2d
 8000c10:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c16:	4621      	mov	r1, r4
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ff43 	bl	8000aa4 <prints_>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4433      	add	r3, r6
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c2c <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c30:	b08a      	sub	sp, #40	@ 0x28
 8000c32:	af04      	add	r7, sp, #16
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000c3a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000c3c:	e0c4      	b.n	8000dc8 <print_+0x19c>
		if (*format == '%') {
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b25      	cmp	r3, #37	@ 0x25
 8000c44:	f040 80b3 	bne.w	8000dae <print_+0x182>
			++format;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 80bc 	beq.w	8000dd4 <print_+0x1a8>
			if (*format == '%') goto out;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b25      	cmp	r3, #37	@ 0x25
 8000c62:	f000 80a6 	beq.w	8000db2 <print_+0x186>
			if (*format == '-') {
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c6c:	d109      	bne.n	8000c82 <print_+0x56>
				++format;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000c74:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000c76:	e004      	b.n	8000c82 <print_+0x56>
				++format;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000c7e:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b30      	cmp	r3, #48	@ 0x30
 8000c88:	d0f6      	beq.n	8000c78 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000c8a:	e00b      	b.n	8000ca4 <print_+0x78>
				width *= 10;
 8000c8c:	462b      	mov	r3, r5
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	442b      	add	r3, r5
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	461d      	mov	r5, r3
				width += *format - '0';
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b30      	subs	r3, #48	@ 0x30
 8000c9c:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000caa:	d903      	bls.n	8000cb4 <print_+0x88>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b39      	cmp	r3, #57	@ 0x39
 8000cb2:	d9eb      	bls.n	8000c8c <print_+0x60>
			}
			if( *format == 's' ) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b73      	cmp	r3, #115	@ 0x73
 8000cba:	d112      	bne.n	8000ce2 <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1d1a      	adds	r2, r3, #4
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000cc6:	f1b8 0f00 	cmp.w	r8, #0
 8000cca:	d001      	beq.n	8000cd0 <print_+0xa4>
 8000ccc:	4641      	mov	r1, r8
 8000cce:	e000      	b.n	8000cd2 <print_+0xa6>
 8000cd0:	4947      	ldr	r1, [pc, #284]	@ (8000df0 <print_+0x1c4>)
 8000cd2:	4633      	mov	r3, r6
 8000cd4:	462a      	mov	r2, r5
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fee4 	bl	8000aa4 <prints_>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	441c      	add	r4, r3
				continue;
 8000ce0:	e06f      	b.n	8000dc2 <print_+0x196>
			}
			if( *format == 'd' ) {
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b64      	cmp	r3, #100	@ 0x64
 8000ce8:	d10f      	bne.n	8000d0a <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	2361      	movs	r3, #97	@ 0x61
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	9601      	str	r6, [sp, #4]
 8000cf8:	9500      	str	r5, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff ff28 	bl	8000b54 <printi_>
 8000d04:	4603      	mov	r3, r0
 8000d06:	441c      	add	r4, r3
				continue;
 8000d08:	e05b      	b.n	8000dc2 <print_+0x196>
			}
			if( *format == 'x' ) {
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b78      	cmp	r3, #120	@ 0x78
 8000d10:	d10f      	bne.n	8000d32 <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1d1a      	adds	r2, r3, #4
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	2361      	movs	r3, #97	@ 0x61
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	9601      	str	r6, [sp, #4]
 8000d20:	9500      	str	r5, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	2210      	movs	r2, #16
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff ff14 	bl	8000b54 <printi_>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	441c      	add	r4, r3
				continue;
 8000d30:	e047      	b.n	8000dc2 <print_+0x196>
			}
			if( *format == 'X' ) {
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b58      	cmp	r3, #88	@ 0x58
 8000d38:	d10f      	bne.n	8000d5a <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	1d1a      	adds	r2, r3, #4
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	2341      	movs	r3, #65	@ 0x41
 8000d44:	9302      	str	r3, [sp, #8]
 8000d46:	9601      	str	r6, [sp, #4]
 8000d48:	9500      	str	r5, [sp, #0]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff ff00 	bl	8000b54 <printi_>
 8000d54:	4603      	mov	r3, r0
 8000d56:	441c      	add	r4, r3
				continue;
 8000d58:	e033      	b.n	8000dc2 <print_+0x196>
			}
			if( *format == 'u' ) {
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b75      	cmp	r3, #117	@ 0x75
 8000d60:	d10f      	bne.n	8000d82 <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	1d1a      	adds	r2, r3, #4
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	2361      	movs	r3, #97	@ 0x61
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	9601      	str	r6, [sp, #4]
 8000d70:	9500      	str	r5, [sp, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	220a      	movs	r2, #10
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff feec 	bl	8000b54 <printi_>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	441c      	add	r4, r3
				continue;
 8000d80:	e01f      	b.n	8000dc2 <print_+0x196>
			}
			if( *format == 'c' ) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b63      	cmp	r3, #99	@ 0x63
 8000d88:	d11b      	bne.n	8000dc2 <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1d1a      	adds	r2, r3, #4
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000d96:	2300      	movs	r3, #0
 8000d98:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000d9a:	f107 0114 	add.w	r1, r7, #20
 8000d9e:	4633      	mov	r3, r6
 8000da0:	462a      	mov	r2, r5
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fe7e 	bl	8000aa4 <prints_>
 8000da8:	4603      	mov	r3, r0
 8000daa:	441c      	add	r4, r3
				continue;
 8000dac:	e009      	b.n	8000dc2 <print_+0x196>
			}
		}
		else {
		out:
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <print_+0x188>
			if (*format == '%') goto out;
 8000db2:	bf00      	nop
			printchar_(out, *format);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fe52 	bl	8000a64 <printchar_>
			++pc;
 8000dc0:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f af36 	bne.w	8000c3e <print_+0x12>
 8000dd2:	e000      	b.n	8000dd6 <print_+0x1aa>
			if (*format == '\0') break;
 8000dd4:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <print_+0x1b8>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000de4:	4623      	mov	r3, r4
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df0:	0800a630 	.word	0x0800a630

08000df4 <printf_>:

int printf_(const char *format, ...)
{
 8000df4:	b40f      	push	{r0, r1, r2, r3}
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6939      	ldr	r1, [r7, #16]
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff10 	bl	8000c2c <print_>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f000 fb70 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f810 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f7ff fd40 	bl	80008ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000e2c:	f7ff fbd0 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e30:	f000 f9da 	bl	80011e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e34:	f000 fa8e 	bl	8001354 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e38:	f006 fa4e 	bl	80072d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e3c:	f7ff fce2 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e40:	f006 fa6e 	bl	8007320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <main+0x28>

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09c      	sub	sp, #112	@ 0x70
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	224c      	movs	r2, #76	@ 0x4c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f009 fac6 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f009 fac0 	bl	800a3e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f001 fc13 	bl	8002694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e76:	4a32      	ldr	r2, [pc, #200]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e7e:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <SystemClock_Config+0xfc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e90:	4a2c      	ldr	r2, [pc, #176]	@ (8000f44 <SystemClock_Config+0xfc>)
 8000e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <SystemClock_Config+0xfc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea4:	bf00      	nop
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <SystemClock_Config+0xfc>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb2:	d1f8      	bne.n	8000ea6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2340      	movs	r3, #64	@ 0x40
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fc18 	bl	8002728 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000efe:	f000 f835 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	233f      	movs	r3, #63	@ 0x3f
 8000f04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2101      	movs	r1, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 f858 	bl	8002fdc <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f32:	f000 f81b 	bl	8000f6c <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3770      	adds	r7, #112	@ 0x70
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	58000400 	.word	0x58000400
 8000f44:	58024800 	.word	0x58024800

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5a:	f000 fb0f 	bl	800157c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40001000 	.word	0x40001000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x38>)
 8000f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f06f 0001 	mvn.w	r0, #1
 8000fa4:	f000 fc06 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	@ 0x40
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d827      	bhi.n	8001012 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	2036      	movs	r0, #54	@ 0x36
 8000fc8:	f000 fbf4 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fcc:	2036      	movs	r0, #54	@ 0x36
 8000fce:	f000 fc0b 	bl	80017e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fd2:	4a29      	ldr	r2, [pc, #164]	@ (8001078 <HAL_InitTick+0xc4>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <HAL_InitTick+0xc8>)
 8000fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fde:	4a27      	ldr	r2, [pc, #156]	@ (800107c <HAL_InitTick+0xc8>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe8:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_InitTick+0xc8>)
 8000fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff6:	f107 0210 	add.w	r2, r7, #16
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fb77 	bl	80036f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800100a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <HAL_InitTick+0x6a>
 8001010:	e001      	b.n	8001016 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e02b      	b.n	800106e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001016:	f002 fb41 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800101a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800101e:	f002 fb3d 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8001022:	4603      	mov	r3, r0
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800102a:	4a15      	ldr	r2, [pc, #84]	@ (8001080 <HAL_InitTick+0xcc>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	0c9b      	lsrs	r3, r3, #18
 8001032:	3b01      	subs	r3, #1
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <HAL_InitTick+0xd0>)
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <HAL_InitTick+0xd4>)
 800103a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_InitTick+0xd0>)
 800103e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001042:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <HAL_InitTick+0xd0>)
 8001046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001048:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_InitTick+0xd0>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_InitTick+0xd0>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <HAL_InitTick+0xd0>)
 8001058:	f004 f9ba 	bl	80053d0 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d104      	bne.n	800106c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001062:	4808      	ldr	r0, [pc, #32]	@ (8001084 <HAL_InitTick+0xd0>)
 8001064:	f004 fa16 	bl	8005494 <HAL_TIM_Base_Start_IT>
 8001068:	4603      	mov	r3, r0
 800106a:	e000      	b.n	800106e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3740      	adds	r7, #64	@ 0x40
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000008 	.word	0x24000008
 800107c:	58024400 	.word	0x58024400
 8001080:	431bde83 	.word	0x431bde83
 8001084:	24000238 	.word	0x24000238
 8001088:	40001000 	.word	0x40001000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM6_DAC_IRQHandler+0x10>)
 80010ca:	f004 fa5b 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000238 	.word	0x24000238

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010dc:	4b37      	ldr	r3, [pc, #220]	@ (80011bc <SystemInit+0xe4>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e2:	4a36      	ldr	r2, [pc, #216]	@ (80011bc <SystemInit+0xe4>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ec:	4b34      	ldr	r3, [pc, #208]	@ (80011c0 <SystemInit+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d807      	bhi.n	8001108 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f8:	4b31      	ldr	r3, [pc, #196]	@ (80011c0 <SystemInit+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <SystemInit+0xe8>)
 8001102:	f043 0307 	orr.w	r3, r3, #7
 8001106:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <SystemInit+0xec>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2d      	ldr	r2, [pc, #180]	@ (80011c4 <SystemInit+0xec>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <SystemInit+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800111a:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <SystemInit+0xec>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4929      	ldr	r1, [pc, #164]	@ (80011c4 <SystemInit+0xec>)
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <SystemInit+0xf0>)
 8001122:	4013      	ands	r3, r2
 8001124:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001126:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <SystemInit+0xe8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001132:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <SystemInit+0xe8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 030f 	bic.w	r3, r3, #15
 800113a:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <SystemInit+0xe8>)
 800113c:	f043 0307 	orr.w	r3, r3, #7
 8001140:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <SystemInit+0xec>)
 8001156:	4a1d      	ldr	r2, [pc, #116]	@ (80011cc <SystemInit+0xf4>)
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <SystemInit+0xec>)
 800115c:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <SystemInit+0xf8>)
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <SystemInit+0xec>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <SystemInit+0xfc>)
 8001164:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <SystemInit+0xec>)
 800116e:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <SystemInit+0xfc>)
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <SystemInit+0xec>)
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <SystemInit+0xec>)
 800117a:	4a16      	ldr	r2, [pc, #88]	@ (80011d4 <SystemInit+0xfc>)
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <SystemInit+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <SystemInit+0xec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <SystemInit+0xec>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800118e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <SystemInit+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <SystemInit+0x100>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <SystemInit+0x104>)
 800119c:	4013      	ands	r3, r2
 800119e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011a2:	d202      	bcs.n	80011aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <SystemInit+0x108>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <SystemInit+0x10c>)
 80011ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	52002000 	.word	0x52002000
 80011c4:	58024400 	.word	0x58024400
 80011c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011cc:	02020200 	.word	0x02020200
 80011d0:	01ff0000 	.word	0x01ff0000
 80011d4:	01010280 	.word	0x01010280
 80011d8:	5c001000 	.word	0x5c001000
 80011dc:	ffff0000 	.word	0xffff0000
 80011e0:	51008108 	.word	0x51008108
 80011e4:	52004000 	.word	0x52004000

080011e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_USART3_UART_Init+0x94>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001232:	f004 fb9b 	bl	800596c <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800123c:	f7ff fe96 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001244:	f005 fc31 	bl	8006aaa <HAL_UARTEx_SetTxFifoThreshold>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800124e:	f7ff fe8d 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001256:	f005 fc66 	bl	8006b26 <HAL_UARTEx_SetRxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001260:	f7ff fe84 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_USART3_UART_Init+0x90>)
 8001266:	f005 fbe7 	bl	8006a38 <HAL_UARTEx_DisableFifoMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001270:	f7ff fe7c 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000284 	.word	0x24000284
 800127c:	40004800 	.word	0x40004800

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ba      	sub	sp, #232	@ 0xe8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	22c0      	movs	r2, #192	@ 0xc0
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f009 f8a1 	bl	800a3e8 <memset>
  if(uartHandle->Instance==USART3)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_UART_MspInit+0xc8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d146      	bne.n	800133e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b0:	f04f 0202 	mov.w	r2, #2
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fa56 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012d2:	f7ff fe4b 	bl	8000f6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <HAL_UART_MspInit+0xcc>)
 80012d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012dc:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_UART_MspInit+0xcc>)
 80012de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_UART_MspInit+0xcc>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_UART_MspInit+0xcc>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a14      	ldr	r2, [pc, #80]	@ (800134c <HAL_UART_MspInit+0xcc>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0xcc>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001316:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_UART_MspInit+0xd0>)
 800133a:	f000 fe97 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	37e8      	adds	r7, #232	@ 0xe8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004800 	.word	0x40004800
 800134c:	58024400 	.word	0x58024400
 8001350:	58020c00 	.word	0x58020c00

08001354 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135a:	4a16      	ldr	r2, [pc, #88]	@ (80013b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800135c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001360:	2209      	movs	r2, #9
 8001362:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001366:	2202      	movs	r2, #2
 8001368:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001372:	2202      	movs	r2, #2
 8001374:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001378:	2201      	movs	r2, #1
 800137a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138a:	2201      	movs	r2, #1
 800138c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001390:	2201      	movs	r2, #1
 8001392:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001396:	2200      	movs	r2, #0
 8001398:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139c:	f001 f849 	bl	8002432 <HAL_PCD_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013a6:	f7ff fde1 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000318 	.word	0x24000318
 80013b4:	40080000 	.word	0x40080000

080013b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ba      	sub	sp, #232	@ 0xe8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	22c0      	movs	r2, #192	@ 0xc0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 f805 	bl	800a3e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a30      	ldr	r2, [pc, #192]	@ (80014a4 <HAL_PCD_MspInit+0xec>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d159      	bne.n	800149c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f002 f9b9 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800140c:	f7ff fdae 	bl	8000f6c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001410:	f001 f97a 	bl	8002708 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001432:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800144c:	230a      	movs	r3, #10
 800144e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001456:	4619      	mov	r1, r3
 8001458:	4814      	ldr	r0, [pc, #80]	@ (80014ac <HAL_PCD_MspInit+0xf4>)
 800145a:	f000 fe07 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <HAL_PCD_MspInit+0xf4>)
 800147a:	f000 fdf7 	bl	800206c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 8001480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001484:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 8001486:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800148a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_PCD_MspInit+0xf0>)
 8001490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800149c:	bf00      	nop
 800149e:	37e8      	adds	r7, #232	@ 0xe8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40080000 	.word	0x40080000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020000 	.word	0x58020000

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b4:	f7ff fe10 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f008 ffe1 	bl	800a4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fc9b 	bl	8000e1c <main>
  bx  lr
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80014f4:	0800a6e0 	.word	0x0800a6e0
  ldr r2, =_sbss
 80014f8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80014fc:	24005328 	.word	0x24005328

08001500 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC3_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f000 f947 	bl	800179e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001510:	f001 ff1a 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_Init+0x68>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	4913      	ldr	r1, [pc, #76]	@ (8001570 <HAL_Init+0x6c>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_Init+0x68>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_Init+0x6c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_Init+0x70>)
 8001546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001548:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_Init+0x74>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154e:	200f      	movs	r0, #15
 8001550:	f7ff fd30 	bl	8000fb4 <HAL_InitTick>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e002      	b.n	8001564 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800155e:	f7ff fd0b 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	58024400 	.word	0x58024400
 8001570:	0800a698 	.word	0x0800a698
 8001574:	24000004 	.word	0x24000004
 8001578:	24000000 	.word	0x24000000

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	240007fc 	.word	0x240007fc

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	240007fc 	.word	0x240007fc

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2400000c 	.word	0x2400000c

08001604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001608:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <HAL_GetREVID+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	5c001000 	.word	0x5c001000

0800161c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800162c:	4904      	ldr	r1, [pc, #16]	@ (8001640 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	58000400 	.word	0x58000400

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <__NVIC_SetPriorityGrouping+0x40>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	4313      	orrs	r3, r2
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <__NVIC_SetPriorityGrouping+0x40>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	05fa0000 	.word	0x05fa0000

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	@ (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	@ (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	@ (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	@ 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff4c 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c2:	f7ff ff63 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6978      	ldr	r0, [r7, #20]
 80017ce:	f7ff ffb3 	bl	8001738 <NVIC_EncodePriority>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff82 	bl	80016e4 <__NVIC_SetPriority>
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff56 	bl	80016a8 <__NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0e3      	b.n	80019de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800181c:	2b00      	cmp	r3, #0
 800181e:	d106      	bne.n	800182e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2223      	movs	r2, #35	@ 0x23
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7fe ff1d 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b6e      	ldr	r3, [pc, #440]	@ (80019e8 <HAL_ETH_Init+0x1e4>)
 8001830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001834:	4a6c      	ldr	r2, [pc, #432]	@ (80019e8 <HAL_ETH_Init+0x1e4>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800183e:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <HAL_ETH_Init+0x1e4>)
 8001840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7a1b      	ldrb	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fee1 	bl	800161c <HAL_SYSCFG_ETHInterfaceSelect>
 800185a:	e003      	b.n	8001864 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800185c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001860:	f7ff fedc 	bl	800161c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001864:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <HAL_ETH_Init+0x1e8>)
 8001866:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800187e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fe90 	bl	80015a4 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001886:	e011      	b.n	80018ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001888:	f7ff fe8c 	bl	80015a4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001896:	d909      	bls.n	80018ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2204      	movs	r2, #4
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	22e0      	movs	r2, #224	@ 0xe0
 80018a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e098      	b.n	80019de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f89e 	bl	8001a00 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018c4:	f001 feba 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a49      	ldr	r2, [pc, #292]	@ (80019f0 <HAL_ETH_Init+0x1ec>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3a01      	subs	r2, #1
 80018d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fa81 	bl	8001de4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018ee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018fe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	22e0      	movs	r2, #224	@ 0xe0
 800191a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e05d      	b.n	80019de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_ETH_Init+0x1f0>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6952      	ldr	r2, [r2, #20]
 8001936:	0051      	lsls	r1, r2, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001942:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fae9 	bl	8001f1e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fb2f 	bl	8001fb0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	3305      	adds	r3, #5
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	021a      	lsls	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	3303      	adds	r3, #3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	061a      	lsls	r2, r3, #24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	3302      	adds	r3, #2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001990:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800199e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_ETH_Init+0x1f4>)
 80019b2:	430b      	orrs	r3, r1
 80019b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_ETH_Init+0x1f8>)
 80019c6:	430b      	orrs	r3, r1
 80019c8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2210      	movs	r2, #16
 80019d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58000400 	.word	0x58000400
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	ffff8001 	.word	0xffff8001
 80019f8:	0c020060 	.word	0x0c020060
 80019fc:	0c20c000 	.word	0x0c20c000

08001a00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a1a:	f001 fe0f 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8001a1e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d804      	bhi.n	8001a32 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e022      	b.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d204      	bcs.n	8001a44 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e019      	b.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d915      	bls.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d804      	bhi.n	8001a5e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e00c      	b.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d804      	bhi.n	8001a70 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e003      	b.n	8001a78 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	02160ebf 	.word	0x02160ebf
 8001a90:	03938700 	.word	0x03938700
 8001a94:	05f5e0ff 	.word	0x05f5e0ff
 8001a98:	08f0d17f 	.word	0x08f0d17f
 8001a9c:	0ee6b27f 	.word	0x0ee6b27f

08001aa0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7b5b      	ldrb	r3, [r3, #13]
 8001ac8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7b9b      	ldrb	r3, [r3, #14]
 8001ad0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ad2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7bdb      	ldrb	r3, [r3, #15]
 8001ad8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ada:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	7c12      	ldrb	r2, [r2, #16]
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	d102      	bne.n	8001aea <ETH_SetMACConfig+0x4a>
 8001ae4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ae8:	e000      	b.n	8001aec <ETH_SetMACConfig+0x4c>
 8001aea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001aec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	7c52      	ldrb	r2, [r2, #17]
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d102      	bne.n	8001afc <ETH_SetMACConfig+0x5c>
 8001af6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001afa:	e000      	b.n	8001afe <ETH_SetMACConfig+0x5e>
 8001afc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7c9b      	ldrb	r3, [r3, #18]
 8001b04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b06:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7f1b      	ldrb	r3, [r3, #28]
 8001b18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	7f92      	ldrb	r2, [r2, #30]
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d102      	bne.n	8001b32 <ETH_SetMACConfig+0x92>
 8001b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b30:	e000      	b.n	8001b34 <ETH_SetMACConfig+0x94>
 8001b32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7fdb      	ldrb	r3, [r3, #31]
 8001b3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	d102      	bne.n	8001b4e <ETH_SetMACConfig+0xae>
 8001b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b4c:	e000      	b.n	8001b50 <ETH_SetMACConfig+0xb0>
 8001b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b56      	ldr	r3, [pc, #344]	@ (8001ccc <ETH_SetMACConfig+0x22c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ba0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x112>
 8001bac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x114>
 8001bb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bb4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4b42      	ldr	r3, [pc, #264]	@ (8001cd0 <ETH_SetMACConfig+0x230>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <ETH_SetMACConfig+0x234>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001bfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d101      	bne.n	8001c12 <ETH_SetMACConfig+0x172>
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	e000      	b.n	8001c14 <ETH_SetMACConfig+0x174>
 8001c12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c26:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	f023 0103 	bic.w	r1, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c6a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d101      	bne.n	8001c8e <ETH_SetMACConfig+0x1ee>
 8001c8a:	2240      	movs	r2, #64	@ 0x40
 8001c8c:	e000      	b.n	8001c90 <ETH_SetMACConfig+0x1f0>
 8001c8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001c98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001ca2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001cb0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	00048083 	.word	0x00048083
 8001cd0:	c0f88000 	.word	0xc0f88000
 8001cd4:	fffffef0 	.word	0xfffffef0

08001cd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <ETH_SetDMAConfig+0xf8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6811      	ldr	r1, [r2, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cfe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7b1b      	ldrb	r3, [r3, #12]
 8001d10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <ETH_SetDMAConfig+0xfc>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d30:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	7b5b      	ldrb	r3, [r3, #13]
 8001d36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d48:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <ETH_SetDMAConfig+0x100>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d5c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	7d1b      	ldrb	r3, [r3, #20]
 8001d68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	7f5b      	ldrb	r3, [r3, #29]
 8001d70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <ETH_SetDMAConfig+0x104>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d92:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	7f1b      	ldrb	r3, [r3, #28]
 8001d9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <ETH_SetDMAConfig+0x108>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	ffff87fd 	.word	0xffff87fd
 8001dd4:	ffff2ffe 	.word	0xffff2ffe
 8001dd8:	fffec000 	.word	0xfffec000
 8001ddc:	ffc0efef 	.word	0xffc0efef
 8001de0:	7fc0ffff 	.word	0x7fc0ffff

08001de4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0a4      	sub	sp, #144	@ 0x90
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001df2:	2300      	movs	r3, #0
 8001df4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e24:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e3c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e40:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e8e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e98:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fde6 	bl	8001aa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001eee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ef2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ef8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001efc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f04:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fee1 	bl	8001cd8 <ETH_SetDMAConfig>
}
 8001f16:	bf00      	nop
 8001f18:	3790      	adds	r7, #144	@ 0x90
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e01d      	b.n	8001f68 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68d9      	ldr	r1, [r3, #12]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	3206      	adds	r2, #6
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d9de      	bls.n	8001f2c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f90:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e023      	b.n	8002006 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	3212      	adds	r2, #18
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d9d8      	bls.n	8001fbe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002032:	461a      	mov	r2, r3
 8002034:	2303      	movs	r3, #3
 8002036:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002046:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800207a:	4b89      	ldr	r3, [pc, #548]	@ (80022a0 <HAL_GPIO_Init+0x234>)
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800207e:	e194      	b.n	80023aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8186 	beq.w	80023a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x44>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d123      	bne.n	80021a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80e0 	beq.w	80023a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ea:	4a2e      	ldr	r2, [pc, #184]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_GPIO_Init+0x23c>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a20      	ldr	r2, [pc, #128]	@ (80022ac <HAL_GPIO_Init+0x240>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d052      	beq.n	80022d4 <HAL_GPIO_Init+0x268>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <HAL_GPIO_Init+0x244>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_GPIO_Init+0x248>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02b      	beq.n	8002296 <HAL_GPIO_Init+0x22a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_GPIO_Init+0x24c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x226>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_GPIO_Init+0x250>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x222>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <HAL_GPIO_Init+0x254>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x21e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_GPIO_Init+0x258>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <HAL_GPIO_Init+0x25c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_GPIO_Init+0x260>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_GPIO_Init+0x264>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x20e>
 8002276:	2309      	movs	r3, #9
 8002278:	e02d      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800227a:	230a      	movs	r3, #10
 800227c:	e02b      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800227e:	2308      	movs	r3, #8
 8002280:	e029      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002282:	2307      	movs	r3, #7
 8002284:	e027      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002286:	2306      	movs	r3, #6
 8002288:	e025      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800228a:	2305      	movs	r3, #5
 800228c:	e023      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800228e:	2304      	movs	r3, #4
 8002290:	e021      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002292:	2303      	movs	r3, #3
 8002294:	e01f      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002296:	2302      	movs	r3, #2
 8002298:	e01d      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800229a:	2301      	movs	r3, #1
 800229c:	e01b      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800229e:	bf00      	nop
 80022a0:	58000080 	.word	0x58000080
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58000400 	.word	0x58000400
 80022ac:	58020000 	.word	0x58020000
 80022b0:	58020400 	.word	0x58020400
 80022b4:	58020800 	.word	0x58020800
 80022b8:	58020c00 	.word	0x58020c00
 80022bc:	58021000 	.word	0x58021000
 80022c0:	58021400 	.word	0x58021400
 80022c4:	58021800 	.word	0x58021800
 80022c8:	58021c00 	.word	0x58021c00
 80022cc:	58022000 	.word	0x58022000
 80022d0:	58022400 	.word	0x58022400
 80022d4:	2300      	movs	r3, #0
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e6:	4938      	ldr	r1, [pc, #224]	@ (80023c8 <HAL_GPIO_Init+0x35c>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800231a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f ae63 	bne.w	8002080 <HAL_GPIO_Init+0x14>
  }
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	3724      	adds	r7, #36	@ 0x24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58000400 	.word	0x58000400

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002410:	887a      	ldrh	r2, [r7, #2]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	041a      	lsls	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43d9      	mvns	r1, r3
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	400b      	ands	r3, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af02      	add	r7, sp, #8
 8002438:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0fe      	b.n	8002642 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe ffad 	bl	80013b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fc5a 	bl	8006d24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7c1a      	ldrb	r2, [r3, #16]
 8002478:	f88d 2000 	strb.w	r2, [sp]
 800247c:	3304      	adds	r3, #4
 800247e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002480:	f004 fbde 	bl	8006c40 <USB_CoreInit>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0d5      	b.n	8002642 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fc52 	bl	8006d46 <USB_SetCurrentMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0c6      	b.n	8002642 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e04a      	b.n	8002550 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3315      	adds	r3, #21
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3314      	adds	r3, #20
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b298      	uxth	r0, r3
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	332e      	adds	r3, #46	@ 0x2e
 80024f6:	4602      	mov	r2, r0
 80024f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3318      	adds	r3, #24
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	331c      	adds	r3, #28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3320      	adds	r3, #32
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3324      	adds	r3, #36	@ 0x24
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3af      	bcc.n	80024ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3b5      	bcc.n	8002560 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7c1a      	ldrb	r2, [r3, #16]
 80025fc:	f88d 2000 	strb.w	r2, [sp]
 8002600:	3304      	adds	r3, #4
 8002602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002604:	f004 fbec 	bl	8006de0 <USB_DevInit>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e013      	b.n	8002642 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f80b 	bl	800264c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fda7 	bl	800718e <USB_DevDisconnect>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_PCDEx_ActivateLPM+0x44>)
 800267c:	4313      	orrs	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	10000003 	.word	0x10000003

08002694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_PWREx_ConfigSupply+0x70>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00a      	beq.n	80026be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026a8:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <HAL_PWREx_ConfigSupply+0x70>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e01f      	b.n	80026fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e01d      	b.n	80026fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_PWREx_ConfigSupply+0x70>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	490f      	ldr	r1, [pc, #60]	@ (8002704 <HAL_PWREx_ConfigSupply+0x70>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026ce:	f7fe ff69 	bl	80015a4 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026d4:	e009      	b.n	80026ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026d6:	f7fe ff65 	bl	80015a4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026e4:	d901      	bls.n	80026ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_PWREx_ConfigSupply+0x70>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f6:	d1ee      	bne.n	80026d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58024800 	.word	0x58024800

08002708 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	58024800 	.word	0x58024800

08002728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	@ 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f000 bc48 	b.w	8002fcc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8088 	beq.w	800285a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274a:	4b99      	ldr	r3, [pc, #612]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002754:	4b96      	ldr	r3, [pc, #600]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275c:	2b10      	cmp	r3, #16
 800275e:	d007      	beq.n	8002770 <HAL_RCC_OscConfig+0x48>
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	2b18      	cmp	r3, #24
 8002764:	d111      	bne.n	800278a <HAL_RCC_OscConfig+0x62>
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b8f      	ldr	r3, [pc, #572]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06d      	beq.n	8002858 <HAL_RCC_OscConfig+0x130>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d169      	bne.n	8002858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f000 bc21 	b.w	8002fcc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x7a>
 8002794:	4b86      	ldr	r3, [pc, #536]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a85      	ldr	r2, [pc, #532]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e02e      	b.n	8002800 <HAL_RCC_OscConfig+0xd8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x9c>
 80027aa:	4b81      	ldr	r3, [pc, #516]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a80      	ldr	r2, [pc, #512]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7d      	ldr	r2, [pc, #500]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e01d      	b.n	8002800 <HAL_RCC_OscConfig+0xd8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 80027ce:	4b78      	ldr	r3, [pc, #480]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a77      	ldr	r2, [pc, #476]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b75      	ldr	r3, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a74      	ldr	r2, [pc, #464]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0xd8>
 80027e8:	4b71      	ldr	r3, [pc, #452]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a70      	ldr	r2, [pc, #448]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b6e      	ldr	r3, [pc, #440]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6d      	ldr	r2, [pc, #436]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fecc 	bl	80015a4 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fec8 	bl	80015a4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e3d4      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002822:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe feb8 	bl	80015a4 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe feb4 	bl	80015a4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	@ 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e3c0      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800284a:	4b59      	ldr	r3, [pc, #356]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x110>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80ca 	beq.w	80029fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002868:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002870:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002872:	4b4f      	ldr	r3, [pc, #316]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_RCC_OscConfig+0x166>
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2b18      	cmp	r3, #24
 8002882:	d156      	bne.n	8002932 <HAL_RCC_OscConfig+0x20a>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d151      	bne.n	8002932 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288e:	4b48      	ldr	r3, [pc, #288]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e392      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028a6:	4b42      	ldr	r3, [pc, #264]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0219 	bic.w	r2, r3, #25
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	493f      	ldr	r1, [pc, #252]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fe74 	bl	80015a4 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fe70 	bl	80015a4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e37c      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d2:	4b37      	ldr	r3, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	f7fe fe91 	bl	8001604 <HAL_GetREVID>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d817      	bhi.n	800291c <HAL_RCC_OscConfig+0x1f4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d108      	bne.n	8002906 <HAL_RCC_OscConfig+0x1de>
 80028f4:	4b2e      	ldr	r3, [pc, #184]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028fc:	4a2c      	ldr	r2, [pc, #176]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002902:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002904:	e07a      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	031b      	lsls	r3, r3, #12
 8002914:	4926      	ldr	r1, [pc, #152]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291a:	e06f      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	4921      	ldr	r1, [pc, #132]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002930:	e064      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d047      	beq.n	80029ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0219 	bic.w	r2, r3, #25
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	491a      	ldr	r1, [pc, #104]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fe2a 	bl	80015a4 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe fe26 	bl	80015a4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e332      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002966:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	f7fe fe47 	bl	8001604 <HAL_GetREVID>
 8002976:	4603      	mov	r3, r0
 8002978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800297c:	4293      	cmp	r3, r2
 800297e:	d819      	bhi.n	80029b4 <HAL_RCC_OscConfig+0x28c>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d108      	bne.n	800299a <HAL_RCC_OscConfig+0x272>
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002990:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 8002992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002996:	6053      	str	r3, [r2, #4]
 8002998:	e030      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	4901      	ldr	r1, [pc, #4]	@ (80029b0 <HAL_RCC_OscConfig+0x288>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
 80029ae:	e025      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
 80029b0:	58024400 	.word	0x58024400
 80029b4:	4b9a      	ldr	r3, [pc, #616]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	4997      	ldr	r1, [pc, #604]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e018      	b.n	80029fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b95      	ldr	r3, [pc, #596]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a94      	ldr	r2, [pc, #592]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fde5 	bl	80015a4 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fde1 	bl	80015a4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e2ed      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a9 	beq.w	8002b5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a14:	4b82      	ldr	r3, [pc, #520]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d007      	beq.n	8002a30 <HAL_RCC_OscConfig+0x308>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b18      	cmp	r3, #24
 8002a24:	d13a      	bne.n	8002a9c <HAL_RCC_OscConfig+0x374>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d135      	bne.n	8002a9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a30:	4b7b      	ldr	r3, [pc, #492]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_OscConfig+0x320>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e2c1      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a48:	f7fe fddc 	bl	8001604 <HAL_GetREVID>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d817      	bhi.n	8002a86 <HAL_RCC_OscConfig+0x35e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCC_OscConfig+0x348>
 8002a5e:	4b70      	ldr	r3, [pc, #448]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a66:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6e:	e075      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a70:	4b6b      	ldr	r3, [pc, #428]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	069b      	lsls	r3, r3, #26
 8002a7e:	4968      	ldr	r1, [pc, #416]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a84:	e06a      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a86:	4b66      	ldr	r3, [pc, #408]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	4962      	ldr	r1, [pc, #392]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9a:	e05f      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d042      	beq.n	8002b2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fd78 	bl	80015a4 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fd74 	bl	80015a4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e280      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aca:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad6:	f7fe fd95 	bl	8001604 <HAL_GetREVID>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d817      	bhi.n	8002b14 <HAL_RCC_OscConfig+0x3ec>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d108      	bne.n	8002afe <HAL_RCC_OscConfig+0x3d6>
 8002aec:	4b4c      	ldr	r3, [pc, #304]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002af4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	e02e      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
 8002afe:	4b48      	ldr	r3, [pc, #288]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	069b      	lsls	r3, r3, #26
 8002b0c:	4944      	ldr	r1, [pc, #272]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	e023      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
 8002b14:	4b42      	ldr	r3, [pc, #264]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	493f      	ldr	r1, [pc, #252]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fd35 	bl	80015a4 <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fd31 	bl	80015a4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e23d      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b50:	4b33      	ldr	r3, [pc, #204]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d036      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d019      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b74:	4a2a      	ldr	r2, [pc, #168]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fd12 	bl	80015a4 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fe fd0e 	bl	80015a4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e21a      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x45c>
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fcf8 	bl	80015a4 <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fcf4 	bl	80015a4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e200      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d039      	beq.n	8002c56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fcd5 	bl	80015a4 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfe:	f7fe fcd1 	bl	80015a4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1dd      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
 8002c1c:	e01b      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c24:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a9a      	ldr	r2, [pc, #616]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fcb8 	bl	80015a4 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c38:	f7fe fcb4 	bl	80015a4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1c0      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c4a:	4b92      	ldr	r3, [pc, #584]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8081 	beq.w	8002d66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c64:	4b8c      	ldr	r3, [pc, #560]	@ (8002e98 <HAL_RCC_OscConfig+0x770>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a8b      	ldr	r2, [pc, #556]	@ (8002e98 <HAL_RCC_OscConfig+0x770>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fc98 	bl	80015a4 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe fc94 	bl	80015a4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1a0      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8a:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <HAL_RCC_OscConfig+0x770>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x584>
 8002c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002caa:	e02d      	b.n	8002d08 <HAL_RCC_OscConfig+0x5e0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10c      	bne.n	8002cce <HAL_RCC_OscConfig+0x5a6>
 8002cb4:	4b77      	ldr	r3, [pc, #476]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a76      	ldr	r2, [pc, #472]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc0:	4b74      	ldr	r3, [pc, #464]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a73      	ldr	r2, [pc, #460]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x5e0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5c8>
 8002cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a6e      	ldr	r2, [pc, #440]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0x5e0>
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	4a67      	ldr	r2, [pc, #412]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfc:	4b65      	ldr	r3, [pc, #404]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a64      	ldr	r2, [pc, #400]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f023 0304 	bic.w	r3, r3, #4
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc48 	bl	80015a4 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe fc44 	bl	80015a4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e14e      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2e:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <HAL_RCC_OscConfig+0x5f0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fc32 	bl	80015a4 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fe fc2e 	bl	80015a4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e138      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ee      	bne.n	8002d44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 812d 	beq.w	8002fca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d70:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d78:	2b18      	cmp	r3, #24
 8002d7a:	f000 80bd 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	f040 809e 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d88:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a41      	ldr	r2, [pc, #260]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fc06 	bl	80015a4 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fc02 	bl	80015a4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e10e      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dae:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <HAL_RCC_OscConfig+0x774>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	4931      	ldr	r1, [pc, #196]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de2:	3b01      	subs	r3, #1
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	3b01      	subs	r3, #1
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e04:	4923      	ldr	r1, [pc, #140]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	4a21      	ldr	r2, [pc, #132]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <HAL_RCC_OscConfig+0x778>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e22:	00d2      	lsls	r2, r2, #3
 8002e24:	491b      	ldr	r1, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f023 020c 	bic.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4917      	ldr	r1, [pc, #92]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	f023 0202 	bic.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	4912      	ldr	r1, [pc, #72]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_RCC_OscConfig+0x76c>)
 8002e84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb8b 	bl	80015a4 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e90:	e011      	b.n	8002eb6 <HAL_RCC_OscConfig+0x78e>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	58024800 	.word	0x58024800
 8002e9c:	fffffc0c 	.word	0xfffffc0c
 8002ea0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fb7e 	bl	80015a4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e08a      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x77c>
 8002ec2:	e082      	b.n	8002fca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b43      	ldr	r3, [pc, #268]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a42      	ldr	r2, [pc, #264]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fb68 	bl	80015a4 <HAL_GetTick>
 8002ed4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fb64 	bl	80015a4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e070      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eea:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x7b0>
 8002ef6:	e068      	b.n	8002fca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002efe:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d031      	beq.n	8002f70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d122      	bne.n	8002f70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	0a5b      	lsrs	r3, r3, #9
 8002f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e02b      	b.n	8002fcc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f74:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d01f      	beq.n	8002fca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f8a:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	4a11      	ldr	r2, [pc, #68]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f96:	f7fe fb05 	bl	80015a4 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f9c:	bf00      	nop
 8002f9e:	f7fe fb01 	bl	80015a4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d0f9      	beq.n	8002f9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_RCC_OscConfig+0x8b0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	4906      	ldr	r1, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_RCC_OscConfig+0x8ac>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3730      	adds	r7, #48	@ 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	ffff0007 	.word	0xffff0007

08002fdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e19c      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b8a      	ldr	r3, [pc, #552]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b87      	ldr	r3, [pc, #540]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	4985      	ldr	r1, [pc, #532]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e184      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	4b7b      	ldr	r3, [pc, #492]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003038:	429a      	cmp	r2, r3
 800303a:	d908      	bls.n	800304e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800303c:	4b78      	ldr	r3, [pc, #480]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4975      	ldr	r1, [pc, #468]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800304a:	4313      	orrs	r3, r2
 800304c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003066:	429a      	cmp	r2, r3
 8003068:	d908      	bls.n	800307c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	496a      	ldr	r1, [pc, #424]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d010      	beq.n	80030aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	4b64      	ldr	r3, [pc, #400]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003094:	429a      	cmp	r2, r3
 8003096:	d908      	bls.n	80030aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003098:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	495e      	ldr	r1, [pc, #376]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	4b59      	ldr	r3, [pc, #356]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030c6:	4b56      	ldr	r3, [pc, #344]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4953      	ldr	r1, [pc, #332]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d908      	bls.n	8003106 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 020f 	bic.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4947      	ldr	r1, [pc, #284]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d055      	beq.n	80031be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003112:	4b43      	ldr	r3, [pc, #268]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4940      	ldr	r1, [pc, #256]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800312c:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d121      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0f6      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003144:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d115      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ea      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800315c:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0de      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800316c:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0d6      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f023 0207 	bic.w	r2, r3, #7
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800318a:	4313      	orrs	r3, r2
 800318c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318e:	f7fe fa09 	bl	80015a4 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003194:	e00a      	b.n	80031ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003196:	f7fe fa05 	bl	80015a4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0be      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d1eb      	bne.n	8003196 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d208      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	490e      	ldr	r1, [pc, #56]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d214      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 020f 	bic.w	r2, r3, #15
 8003202:	4906      	ldr	r1, [pc, #24]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b04      	ldr	r3, [pc, #16]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e086      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
 800321c:	52002000 	.word	0x52002000
 8003220:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	4b3f      	ldr	r3, [pc, #252]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003240:	4b3c      	ldr	r3, [pc, #240]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4939      	ldr	r1, [pc, #228]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800324e:	4313      	orrs	r3, r2
 8003250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	4b34      	ldr	r3, [pc, #208]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800326a:	429a      	cmp	r2, r3
 800326c:	d208      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800326e:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	492e      	ldr	r1, [pc, #184]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800327c:	4313      	orrs	r3, r2
 800327e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800329c:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4922      	ldr	r1, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d208      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4917      	ldr	r1, [pc, #92]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032dc:	f000 f834 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	4912      	ldr	r1, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x35c>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <HAL_RCC_ClockConfig+0x35c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x360>)
 8003312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003314:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x364>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x368>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd fe48 	bl	8000fb4 <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	0800a698 	.word	0x0800a698
 800333c:	24000004 	.word	0x24000004
 8003340:	24000000 	.word	0x24000000
 8003344:	24000008 	.word	0x24000008

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334e:	4bb3      	ldr	r3, [pc, #716]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003356:	2b18      	cmp	r3, #24
 8003358:	f200 8155 	bhi.w	8003606 <HAL_RCC_GetSysClockFreq+0x2be>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <HAL_RCC_GetSysClockFreq+0x1c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	080033c9 	.word	0x080033c9
 8003368:	08003607 	.word	0x08003607
 800336c:	08003607 	.word	0x08003607
 8003370:	08003607 	.word	0x08003607
 8003374:	08003607 	.word	0x08003607
 8003378:	08003607 	.word	0x08003607
 800337c:	08003607 	.word	0x08003607
 8003380:	08003607 	.word	0x08003607
 8003384:	080033ef 	.word	0x080033ef
 8003388:	08003607 	.word	0x08003607
 800338c:	08003607 	.word	0x08003607
 8003390:	08003607 	.word	0x08003607
 8003394:	08003607 	.word	0x08003607
 8003398:	08003607 	.word	0x08003607
 800339c:	08003607 	.word	0x08003607
 80033a0:	08003607 	.word	0x08003607
 80033a4:	080033f5 	.word	0x080033f5
 80033a8:	08003607 	.word	0x08003607
 80033ac:	08003607 	.word	0x08003607
 80033b0:	08003607 	.word	0x08003607
 80033b4:	08003607 	.word	0x08003607
 80033b8:	08003607 	.word	0x08003607
 80033bc:	08003607 	.word	0x08003607
 80033c0:	08003607 	.word	0x08003607
 80033c4:	080033fb 	.word	0x080033fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c8:	4b94      	ldr	r3, [pc, #592]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033d4:	4b91      	ldr	r3, [pc, #580]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	4a90      	ldr	r2, [pc, #576]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033e6:	e111      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ea:	61bb      	str	r3, [r7, #24]
      break;
 80033ec:	e10e      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f0:	61bb      	str	r3, [r7, #24]
      break;
 80033f2:	e10b      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033f6:	61bb      	str	r3, [r7, #24]
      break;
 80033f8:	e108      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033fa:	4b88      	ldr	r3, [pc, #544]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003404:	4b85      	ldr	r3, [pc, #532]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800340e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003410:	4b82      	ldr	r3, [pc, #520]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800341a:	4b80      	ldr	r3, [pc, #512]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80e1 	beq.w	8003600 <HAL_RCC_GetSysClockFreq+0x2b8>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f000 8083 	beq.w	800354c <HAL_RCC_GetSysClockFreq+0x204>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b02      	cmp	r3, #2
 800344a:	f200 80a1 	bhi.w	8003590 <HAL_RCC_GetSysClockFreq+0x248>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x114>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d056      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x1c0>
 800345a:	e099      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800345c:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003468:	4b6c      	ldr	r3, [pc, #432]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	4a6b      	ldr	r2, [pc, #428]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b62      	ldr	r3, [pc, #392]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034c2:	e087      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003630 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b51      	ldr	r3, [pc, #324]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e065      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003634 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b40      	ldr	r3, [pc, #256]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	e043      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003638 <HAL_RCC_GetSysClockFreq+0x2f0>
 800355a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003572:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800358e:	e021      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003634 <HAL_RCC_GetSysClockFreq+0x2ec>
 800359e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a2:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	0a5b      	lsrs	r3, r3, #9
 80035da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035de:	3301      	adds	r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f8:	ee17 3a90 	vmov	r3, s15
 80035fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035fe:	e005      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003608:	61bb      	str	r3, [r7, #24]
      break;
 800360a:	bf00      	nop
  }

  return sysclockfreq;
 800360c:	69bb      	ldr	r3, [r7, #24]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	@ 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
 8003620:	03d09000 	.word	0x03d09000
 8003624:	003d0900 	.word	0x003d0900
 8003628:	007a1200 	.word	0x007a1200
 800362c:	46000000 	.word	0x46000000
 8003630:	4c742400 	.word	0x4c742400
 8003634:	4a742400 	.word	0x4a742400
 8003638:	4af42400 	.word	0x4af42400

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003642:	f7ff fe81 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_GetHCLKFreq+0x50>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490f      	ldr	r1, [pc, #60]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x54>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003660:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <HAL_RCC_GetHCLKFreq+0x50>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x54>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x58>)
 8003678:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367a:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <HAL_RCC_GetHCLKFreq+0x5c>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x58>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	58024400 	.word	0x58024400
 8003690:	0800a698 	.word	0x0800a698
 8003694:	24000004 	.word	0x24000004
 8003698:	24000000 	.word	0x24000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036a0:	f7ff ffcc 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	0800a698 	.word	0x0800a698

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036cc:	f7ff ffb6 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4904      	ldr	r1, [pc, #16]	@ (80036f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	58024400 	.word	0x58024400
 80036f0:	0800a698 	.word	0x0800a698

080036f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	223f      	movs	r2, #63	@ 0x3f
 8003702:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0207 	and.w	r2, r3, #7
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003734:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <HAL_RCC_GetClockConfig+0x7c>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_GetClockConfig+0x80>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	58024400 	.word	0x58024400
 8003774:	52002000 	.word	0x52002000

08003778 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b0ca      	sub	sp, #296	@ 0x128
 800377e:	af00      	add	r7, sp, #0
 8003780:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003784:	2300      	movs	r3, #0
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378a:	2300      	movs	r3, #0
 800378c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800379c:	2500      	movs	r5, #0
 800379e:	ea54 0305 	orrs.w	r3, r4, r5
 80037a2:	d049      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ae:	d02f      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037b4:	d828      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037ba:	d01a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c0:	d822      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ca:	d007      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037cc:	e01c      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ce:	4bb8      	ldr	r3, [pc, #736]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	4ab7      	ldr	r2, [pc, #732]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037da:	e01a      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	3308      	adds	r3, #8
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fc8f 	bl	8005108 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fd36 	bl	800526c <RCCEx_PLL3_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800381a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003828:	4aa1      	ldr	r2, [pc, #644]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6513      	str	r3, [r2, #80]	@ 0x50
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003844:	f04f 0900 	mov.w	r9, #0
 8003848:	ea58 0309 	orrs.w	r3, r8, r9
 800384c:	d047      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	2b04      	cmp	r3, #4
 8003856:	d82a      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003875 	.word	0x08003875
 8003864:	08003883 	.word	0x08003883
 8003868:	08003899 	.word	0x08003899
 800386c:	080038b7 	.word	0x080038b7
 8003870:	080038b7 	.word	0x080038b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b8e      	ldr	r3, [pc, #568]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	4a8d      	ldr	r2, [pc, #564]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003880:	e01a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	3308      	adds	r3, #8
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fc3c 	bl	8005108 <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003896:	e00f      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389c:	3328      	adds	r3, #40	@ 0x28
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fce3 	bl	800526c <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	f023 0107 	bic.w	r1, r3, #7
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	4a78      	ldr	r2, [pc, #480]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d4:	e003      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80038ea:	f04f 0b00 	mov.w	fp, #0
 80038ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80038f2:	d04c      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038fe:	d030      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003904:	d829      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003906:	2bc0      	cmp	r3, #192	@ 0xc0
 8003908:	d02d      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800390a:	2bc0      	cmp	r3, #192	@ 0xc0
 800390c:	d825      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800390e:	2b80      	cmp	r3, #128	@ 0x80
 8003910:	d018      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003912:	2b80      	cmp	r3, #128	@ 0x80
 8003914:	d821      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d007      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800391e:	e01c      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b63      	ldr	r3, [pc, #396]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	4a62      	ldr	r2, [pc, #392]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800392c:	e01c      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	3308      	adds	r3, #8
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fbe6 	bl	8005108 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003942:	e011      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	3328      	adds	r3, #40	@ 0x28
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fc8d 	bl	800526c <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003958:	e006      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003970:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003974:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6513      	str	r3, [r2, #80]	@ 0x50
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800399a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d053      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ba:	d035      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039c0:	d82e      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039c6:	d031      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039cc:	d828      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d2:	d01a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d8:	d822      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039e2:	d007      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039e4:	e01c      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e6:	4b32      	ldr	r3, [pc, #200]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4a31      	ldr	r2, [pc, #196]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039f2:	e01c      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	3308      	adds	r3, #8
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fb83 	bl	8005108 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a08:	e011      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	3328      	adds	r3, #40	@ 0x28
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 fc2a 	bl	800526c <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a1e:	e006      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a36:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a46:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d056      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a82:	d038      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a88:	d831      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a8e:	d034      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a94:	d82b      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a9a:	d01d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aa0:	d825      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003aac:	e01f      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4ba2      	ldr	r3, [pc, #648]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e01c      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fb1c 	bl	8005108 <RCCEx_PLL2_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ad6:	e011      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	3328      	adds	r3, #40	@ 0x28
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fbc3 	bl	800526c <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aec:	e006      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b04:	4b8e      	ldr	r3, [pc, #568]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b14:	4a8a      	ldr	r2, [pc, #552]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b16:	430b      	orrs	r3, r1
 8003b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	d03a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	2b30      	cmp	r3, #48	@ 0x30
 8003b4c:	d01f      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b4e:	2b30      	cmp	r3, #48	@ 0x30
 8003b50:	d819      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d815      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d019      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d111      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b62:	4b77      	ldr	r3, [pc, #476]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	4a76      	ldr	r2, [pc, #472]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	3308      	adds	r3, #8
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fac5 	bl	8005108 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8c:	e002      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b9c:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d051      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be4:	d035      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bea:	d82e      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bf0:	d031      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bf6:	d828      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfc:	d01a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c02:	d822      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0c:	d007      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c0e:	e01c      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4b4b      	ldr	r3, [pc, #300]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	4a4a      	ldr	r2, [pc, #296]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3308      	adds	r3, #8
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fa6e 	bl	8005108 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c32:	e011      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	3328      	adds	r3, #40	@ 0x28
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fb15 	bl	800526c <RCCEx_PLL3_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c60:	4b37      	ldr	r3, [pc, #220]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	4a34      	ldr	r2, [pc, #208]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d056      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca8:	d033      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cae:	d82c      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cb4:	d02f      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cba:	d826      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc0:	d02b      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc6:	d820      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ccc:	d012      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cd2:	d81a      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cdc:	d115      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fa0e 	bl	8005108 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cf2:	e015      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	3328      	adds	r3, #40	@ 0x28
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fab5 	bl	800526c <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d08:	e00a      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d12:	bf00      	nop
 8003d14:	e004      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d36:	4a02      	ldr	r2, [pc, #8]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	d055      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d78:	d033      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d7e:	d82c      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d02f      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8a:	d826      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d90:	d02b      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d96:	d820      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d9c:	d012      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003da2:	d81a      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d022      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dac:	d115      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	3308      	adds	r3, #8
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f9a6 	bl	8005108 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e015      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	3328      	adds	r3, #40	@ 0x28
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fa4d 	bl	800526c <RCCEx_PLL3_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003de2:	bf00      	nop
 8003de4:	e004      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003df8:	4ba3      	ldr	r3, [pc, #652]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e08:	4a9f      	ldr	r2, [pc, #636]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d037      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e42:	d00e      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e48:	d816      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e52:	d111      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e54:	4b8c      	ldr	r3, [pc, #560]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	4a8b      	ldr	r2, [pc, #556]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e60:	e00f      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	3308      	adds	r3, #8
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f94c 	bl	8005108 <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	4a7b      	ldr	r2, [pc, #492]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e9e:	e003      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ebe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d039      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d81c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003ee9 	.word	0x08003ee9
 8003ee0:	08003ef7 	.word	0x08003ef7
 8003ee4:	08003f15 	.word	0x08003f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4b67      	ldr	r3, [pc, #412]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	4a66      	ldr	r2, [pc, #408]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3308      	adds	r3, #8
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f902 	bl	8005108 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f22:	f023 0103 	bic.w	r1, r3, #3
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2c:	4a56      	ldr	r2, [pc, #344]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f000 809f 	beq.w	800409c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a4a      	ldr	r2, [pc, #296]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fb1b 	bl	80015a4 <HAL_GetTick>
 8003f6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f72:	e00b      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f74:	f7fd fb16 	bl	80015a4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b64      	cmp	r3, #100	@ 0x64
 8003f82:	d903      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f8a:	e005      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ed      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d179      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fa0:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fac:	4053      	eors	r3, r2
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb6:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fc2:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a30      	ldr	r2, [pc, #192]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fce:	4b2e      	ldr	r3, [pc, #184]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fda:	4a2b      	ldr	r2, [pc, #172]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fe0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fee:	d118      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fad8 	bl	80015a4 <HAL_GetTick>
 8003ff4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff8:	e00d      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fd fad3 	bl	80015a4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004014:	e005      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004016:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0eb      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004026:	2b00      	cmp	r3, #0
 8004028:	d129      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800403a:	d10e      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800403c:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800404c:	091a      	lsrs	r2, r3, #4
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004050:	4013      	ands	r3, r2
 8004052:	4a0d      	ldr	r2, [pc, #52]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004054:	430b      	orrs	r3, r1
 8004056:	6113      	str	r3, [r2, #16]
 8004058:	e005      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004064:	6113      	str	r3, [r2, #16]
 8004066:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004068:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
 800407c:	e00e      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004086:	e009      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004088:	58024400 	.word	0x58024400
 800408c:	58024800 	.word	0x58024800
 8004090:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f002 0301 	and.w	r3, r2, #1
 80040a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f000 8089 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c4:	2b28      	cmp	r3, #40	@ 0x28
 80040c6:	d86b      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040c8:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080041a9 	.word	0x080041a9
 80040d4:	080041a1 	.word	0x080041a1
 80040d8:	080041a1 	.word	0x080041a1
 80040dc:	080041a1 	.word	0x080041a1
 80040e0:	080041a1 	.word	0x080041a1
 80040e4:	080041a1 	.word	0x080041a1
 80040e8:	080041a1 	.word	0x080041a1
 80040ec:	080041a1 	.word	0x080041a1
 80040f0:	08004175 	.word	0x08004175
 80040f4:	080041a1 	.word	0x080041a1
 80040f8:	080041a1 	.word	0x080041a1
 80040fc:	080041a1 	.word	0x080041a1
 8004100:	080041a1 	.word	0x080041a1
 8004104:	080041a1 	.word	0x080041a1
 8004108:	080041a1 	.word	0x080041a1
 800410c:	080041a1 	.word	0x080041a1
 8004110:	0800418b 	.word	0x0800418b
 8004114:	080041a1 	.word	0x080041a1
 8004118:	080041a1 	.word	0x080041a1
 800411c:	080041a1 	.word	0x080041a1
 8004120:	080041a1 	.word	0x080041a1
 8004124:	080041a1 	.word	0x080041a1
 8004128:	080041a1 	.word	0x080041a1
 800412c:	080041a1 	.word	0x080041a1
 8004130:	080041a9 	.word	0x080041a9
 8004134:	080041a1 	.word	0x080041a1
 8004138:	080041a1 	.word	0x080041a1
 800413c:	080041a1 	.word	0x080041a1
 8004140:	080041a1 	.word	0x080041a1
 8004144:	080041a1 	.word	0x080041a1
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041a1 	.word	0x080041a1
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041a1 	.word	0x080041a1
 8004158:	080041a1 	.word	0x080041a1
 800415c:	080041a1 	.word	0x080041a1
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041a9 	.word	0x080041a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ffc3 	bl	8005108 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3328      	adds	r3, #40	@ 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f86a 	bl	800526c <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041b2:	4bbf      	ldr	r3, [pc, #764]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c0:	4abb      	ldr	r2, [pc, #748]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f002 0302 	and.w	r3, r2, #2
 80041dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80041e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d041      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d824      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004219 	.word	0x08004219
 8004208:	0800422f 	.word	0x0800422f
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 ff71 	bl	8005108 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800422c:	e00f      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	3328      	adds	r3, #40	@ 0x28
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f818 	bl	800526c <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004242:	e004      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004256:	4b96      	ldr	r3, [pc, #600]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f023 0107 	bic.w	r1, r3, #7
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004264:	4a92      	ldr	r2, [pc, #584]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004266:	430b      	orrs	r3, r1
 8004268:	6553      	str	r3, [r2, #84]	@ 0x54
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 0304 	and.w	r3, r2, #4
 8004280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800428a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d044      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429c:	2b05      	cmp	r3, #5
 800429e:	d825      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff1d 	bl	8005108 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3328      	adds	r3, #40	@ 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ffc4 	bl	800526c <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042fe:	4b6c      	ldr	r3, [pc, #432]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004302:	f023 0107 	bic.w	r1, r3, #7
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800430e:	4a68      	ldr	r2, [pc, #416]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6593      	str	r3, [r2, #88]	@ 0x58
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 0320 	and.w	r3, r2, #32
 800432a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d055      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434a:	d033      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004350:	d82c      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435c:	d826      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800435e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004362:	d02b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004368:	d820      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800436a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436e:	d012      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004374:	d81a      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800437a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800437e:	d115      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	3308      	adds	r3, #8
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 febd 	bl	8005108 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ff64 	bl	800526c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043b4:	bf00      	nop
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	4a35      	ldr	r2, [pc, #212]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6553      	str	r3, [r2, #84]	@ 0x54
 80043e0:	e003      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004400:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d058      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004412:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004416:	d033      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004418:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800441c:	d82c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004422:	d02f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004428:	d826      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800442a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800442e:	d02b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004434:	d820      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443a:	d012      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004440:	d81a      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d022      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444a:	d115      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	3308      	adds	r3, #8
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fe57 	bl	8005108 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004460:	e015      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3328      	adds	r3, #40	@ 0x28
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fefe 	bl	800526c <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	e006      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004480:	bf00      	nop
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004484:	bf00      	nop
 8004486:	e002      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10e      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044a6:	4a02      	ldr	r2, [pc, #8]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d055      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044e8:	d033      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044ee:	d82c      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f4:	d02f      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044fa:	d826      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004500:	d02b      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004502:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004506:	d820      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800450c:	d012      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800450e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004512:	d81a      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d022      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451c:	d115      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	3308      	adds	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fdee 	bl	8005108 <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004532:	e015      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	3328      	adds	r3, #40	@ 0x28
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fe95 	bl	800526c <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004552:	bf00      	nop
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004568:	4ba1      	ldr	r3, [pc, #644]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004578:	4a9d      	ldr	r2, [pc, #628]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457a:	430b      	orrs	r3, r1
 800457c:	6593      	str	r3, [r2, #88]	@ 0x58
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0308 	and.w	r3, r2, #8
 8004594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800459e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d01e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	3328      	adds	r3, #40	@ 0x28
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fe54 	bl	800526c <RCCEx_PLL3_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045d0:	4b87      	ldr	r3, [pc, #540]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	4a83      	ldr	r2, [pc, #524]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e2:	430b      	orrs	r3, r1
 80045e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f002 0310 	and.w	r3, r2, #16
 80045f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d01e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800460e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004612:	d10c      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fe25 	bl	800526c <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800462e:	4b70      	ldr	r3, [pc, #448]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463e:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800465a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d03e      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800466c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004670:	d022      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004676:	d81b      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d00b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	3308      	adds	r3, #8
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd3b 	bl	8005108 <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3328      	adds	r3, #40	@ 0x28
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fde2 	bl	800526c <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c2:	4b4b      	ldr	r3, [pc, #300]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046d2:	4a47      	ldr	r2, [pc, #284]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046f0:	2300      	movs	r3, #0
 80046f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800470a:	d01f      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800470c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004710:	d818      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004716:	d003      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800471c:	d007      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800472c:	e00f      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	3328      	adds	r3, #40	@ 0x28
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fd98 	bl	800526c <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004756:	4b26      	ldr	r3, [pc, #152]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004766:	4a22      	ldr	r2, [pc, #136]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6553      	str	r3, [r2, #84]	@ 0x54
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004782:	673b      	str	r3, [r7, #112]	@ 0x70
 8004784:	2300      	movs	r3, #0
 8004786:	677b      	str	r3, [r7, #116]	@ 0x74
 8004788:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d034      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d007      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047b0:	e00e      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3308      	adds	r3, #8
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fca4 	bl	8005108 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047c6:	e003      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047d8:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e6:	4a02      	ldr	r2, [pc, #8]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800480a:	2300      	movs	r3, #0
 800480c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800480e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d00c      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	3328      	adds	r3, #40	@ 0x28
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fd23 	bl	800526c <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800483e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004840:	2300      	movs	r3, #0
 8004842:	667b      	str	r3, [r7, #100]	@ 0x64
 8004844:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004848:	460b      	mov	r3, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	d038      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485a:	d018      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800485c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004860:	d811      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004866:	d014      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800486c:	d80b      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004876:	d106      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4bc3      	ldr	r3, [pc, #780]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	4ac2      	ldr	r2, [pc, #776]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b0:	4ab5      	ldr	r2, [pc, #724]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048b6:	e003      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ce:	2300      	movs	r3, #0
 80048d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048dc:	4baa      	ldr	r3, [pc, #680]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ea:	4aa7      	ldr	r2, [pc, #668]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fe:	2300      	movs	r3, #0
 8004900:	657b      	str	r3, [r7, #84]	@ 0x54
 8004902:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800490c:	4b9e      	ldr	r3, [pc, #632]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800491c:	4a9a      	ldr	r2, [pc, #616]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800492e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004930:	2300      	movs	r3, #0
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004934:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800493e:	4b92      	ldr	r3, [pc, #584]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004942:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494c:	4a8e      	ldr	r2, [pc, #568]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800495e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004960:	2300      	movs	r3, #0
 8004962:	647b      	str	r3, [r7, #68]	@ 0x44
 8004964:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004968:	460b      	mov	r3, r1
 800496a:	4313      	orrs	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800496e:	4b86      	ldr	r3, [pc, #536]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	4a85      	ldr	r2, [pc, #532]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004974:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004978:	6113      	str	r3, [r2, #16]
 800497a:	4b83      	ldr	r3, [pc, #524]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800497c:	6919      	ldr	r1, [r3, #16]
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004986:	4a80      	ldr	r2, [pc, #512]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004988:	430b      	orrs	r3, r1
 800498a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800499a:	2300      	movs	r3, #0
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800499e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049a8:	4b77      	ldr	r3, [pc, #476]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	4a74      	ldr	r2, [pc, #464]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e8:	4a67      	ldr	r2, [pc, #412]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	2100      	movs	r1, #0
 80049f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d011      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	3308      	adds	r3, #8
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fb78 	bl	8005108 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	2100      	movs	r1, #0
 8004a38:	6239      	str	r1, [r7, #32]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	3308      	adds	r3, #8
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb58 	bl	8005108 <RCCEx_PLL2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	2100      	movs	r1, #0
 8004a78:	61b9      	str	r1, [r7, #24]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d011      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	3308      	adds	r3, #8
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb38 	bl	8005108 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	6139      	str	r1, [r7, #16]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d011      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	3328      	adds	r3, #40	@ 0x28
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fbca 	bl	800526c <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	2100      	movs	r1, #0
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d011      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	3328      	adds	r3, #40	@ 0x28
 8004b10:	2101      	movs	r1, #1
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fbaa 	bl	800526c <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	2100      	movs	r1, #0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d011      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	3328      	adds	r3, #40	@ 0x28
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fb8a 	bl	800526c <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b82:	46bd      	mov	sp, r7
 8004b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b88:	58024400 	.word	0x58024400

08004b8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b90:	f7fe fd54 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4904      	ldr	r1, [pc, #16]	@ (8004bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	0800a698 	.word	0x0800a698

08004bb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bc0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bca:	4b9f      	ldr	r3, [pc, #636]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	0b1b      	lsrs	r3, r3, #12
 8004bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004be2:	4b99      	ldr	r3, [pc, #612]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8111 	beq.w	8004e28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f000 8083 	beq.w	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d056      	beq.n	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c22:	e099      	b.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b88      	ldr	r3, [pc, #544]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02d      	beq.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	4b85      	ldr	r3, [pc, #532]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a84      	ldr	r2, [pc, #528]	@ (8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c8a:	e087      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cce:	e065      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e043      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b48      	ldr	r3, [pc, #288]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e021      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 2a90 	vmov	r2, s15
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1e:	ee17 2a90 	vmov	r2, s15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	3724      	adds	r7, #36	@ 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	46000000 	.word	0x46000000
 8004e54:	4c742400 	.word	0x4c742400
 8004e58:	4a742400 	.word	0x4a742400
 8004e5c:	4af42400 	.word	0x4af42400

08004e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e68:	4ba1      	ldr	r3, [pc, #644]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e72:	4b9f      	ldr	r3, [pc, #636]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	0d1b      	lsrs	r3, r3, #20
 8004e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e8a:	4b99      	ldr	r3, [pc, #612]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8111 	beq.w	80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f000 8083 	beq.w	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f200 80a1 	bhi.w	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d056      	beq.n	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004eca:	e099      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02d      	beq.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed8:	4b85      	ldr	r3, [pc, #532]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	4a84      	ldr	r2, [pc, #528]	@ (80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b7b      	ldr	r3, [pc, #492]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f32:	e087      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b6a      	ldr	r3, [pc, #424]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f76:	e065      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fba:	e043      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffe:	e021      	b.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800505a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800505e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506a:	ee17 2a90 	vmov	r2, s15
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005072:	4b1f      	ldr	r3, [pc, #124]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800508c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	ee17 2a90 	vmov	r2, s15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050a0:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80050be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c6:	ee17 2a90 	vmov	r2, s15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050ce:	e008      	b.n	80050e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	@ 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	03d09000 	.word	0x03d09000
 80050f8:	46000000 	.word	0x46000000
 80050fc:	4c742400 	.word	0x4c742400
 8005100:	4a742400 	.word	0x4a742400
 8005104:	4af42400 	.word	0x4af42400

08005108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005116:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d101      	bne.n	8005126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e099      	b.n	800525a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005126:	4b4f      	ldr	r3, [pc, #316]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4e      	ldr	r2, [pc, #312]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800512c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc fa37 	bl	80015a4 <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800513a:	f7fc fa33 	bl	80015a4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e086      	b.n	800525a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800514c:	4b45      	ldr	r3, [pc, #276]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005158:	4b42      	ldr	r3, [pc, #264]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	493f      	ldr	r1, [pc, #252]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	628b      	str	r3, [r1, #40]	@ 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	b29b      	uxth	r3, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	3b01      	subs	r3, #1
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800519c:	4931      	ldr	r1, [pc, #196]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051a2:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	492d      	ldr	r1, [pc, #180]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	f023 0220 	bic.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4928      	ldr	r1, [pc, #160]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051c6:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	f023 0310 	bic.w	r3, r3, #16
 80051d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d6:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <RCCEx_PLL2_Config+0x160>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	69d2      	ldr	r2, [r2, #28]
 80051de:	00d2      	lsls	r2, r2, #3
 80051e0:	4920      	ldr	r1, [pc, #128]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f043 0310 	orr.w	r3, r3, #16
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005204:	e00f      	b.n	8005226 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800520c:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a14      	ldr	r2, [pc, #80]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005218:	e005      	b.n	8005226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005224:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005226:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0e      	ldr	r2, [pc, #56]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800522c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc f9b7 	bl	80015a4 <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800523a:	f7fc f9b3 	bl	80015a4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <RCCEx_PLL2_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	ffff0007 	.word	0xffff0007

0800526c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800527a:	4b53      	ldr	r3, [pc, #332]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d101      	bne.n	800528a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e099      	b.n	80053be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a4e      	ldr	r2, [pc, #312]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fc f985 	bl	80015a4 <HAL_GetTick>
 800529a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800529c:	e008      	b.n	80052b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800529e:	f7fc f981 	bl	80015a4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e086      	b.n	80053be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052b0:	4b45      	ldr	r3, [pc, #276]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052bc:	4b42      	ldr	r3, [pc, #264]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	051b      	lsls	r3, r3, #20
 80052ca:	493f      	ldr	r1, [pc, #252]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	3b01      	subs	r3, #1
 80052e0:	025b      	lsls	r3, r3, #9
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005300:	4931      	ldr	r1, [pc, #196]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005306:	4b30      	ldr	r3, [pc, #192]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	492d      	ldr	r1, [pc, #180]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005318:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	4928      	ldr	r1, [pc, #160]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800532a:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	4a26      	ldr	r2, [pc, #152]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005336:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800533a:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <RCCEx_PLL3_Config+0x160>)
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	69d2      	ldr	r2, [r2, #28]
 8005342:	00d2      	lsls	r2, r2, #3
 8005344:	4920      	ldr	r1, [pc, #128]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800534a:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800535c:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	4a19      	ldr	r2, [pc, #100]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005362:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005368:	e00f      	b.n	800538a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d106      	bne.n	800537e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005370:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005376:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800537a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800537c:	e005      	b.n	800538a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800537e:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005384:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0e      	ldr	r2, [pc, #56]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005396:	f7fc f905 	bl	80015a4 <HAL_GetTick>
 800539a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800539c:	e008      	b.n	80053b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800539e:	f7fc f901 	bl	80015a4 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e006      	b.n	80053be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	ffff0007 	.word	0xffff0007

080053d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e049      	b.n	8005476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f841 	bl	800547e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f000 f9e8 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e054      	b.n	8005556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d01d      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a22      	ldr	r2, [pc, #136]	@ (8005568 <HAL_TIM_Base_Start_IT+0xd4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a21      	ldr	r2, [pc, #132]	@ (800556c <HAL_TIM_Base_Start_IT+0xd8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005570 <HAL_TIM_Base_Start_IT+0xdc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <HAL_TIM_Base_Start_IT+0xe0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <HAL_TIM_Base_Start_IT+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_TIM_Base_Start_IT+0xe8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d115      	bne.n	8005540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	4b19      	ldr	r3, [pc, #100]	@ (8005580 <HAL_TIM_Base_Start_IT+0xec>)
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d015      	beq.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d011      	beq.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	e008      	b.n	8005552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e000      	b.n	8005554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40010400 	.word	0x40010400
 8005578:	40001800 	.word	0x40001800
 800557c:	40014000 	.word	0x40014000
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8e9 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8db 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8ec 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0204 	mvn.w	r2, #4
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8c3 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f8b5 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8c6 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0208 	mvn.w	r2, #8
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f89d 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f88f 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8a0 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f877 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f869 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f87a 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0201 	mvn.w	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fc2c 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f913 	bl	8005944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00c      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f90b 	bl	8005958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f834 	bl	80057ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0220 	mvn.w	r2, #32
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8d3 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a46      	ldr	r2, [pc, #280]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <TIM_Base_SetConfig+0x130>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a42      	ldr	r2, [pc, #264]	@ (8005918 <TIM_Base_SetConfig+0x134>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a41      	ldr	r2, [pc, #260]	@ (800591c <TIM_Base_SetConfig+0x138>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a40      	ldr	r2, [pc, #256]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a35      	ldr	r2, [pc, #212]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01f      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005844:	d01b      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a32      	ldr	r2, [pc, #200]	@ (8005914 <TIM_Base_SetConfig+0x130>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d017      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a31      	ldr	r2, [pc, #196]	@ (8005918 <TIM_Base_SetConfig+0x134>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a30      	ldr	r2, [pc, #192]	@ (800591c <TIM_Base_SetConfig+0x138>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00f      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2f      	ldr	r2, [pc, #188]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2e      	ldr	r2, [pc, #184]	@ (8005924 <TIM_Base_SetConfig+0x140>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <TIM_Base_SetConfig+0x144>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_Base_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2c      	ldr	r2, [pc, #176]	@ (800592c <TIM_Base_SetConfig+0x148>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d108      	bne.n	8005890 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <TIM_Base_SetConfig+0x12c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <TIM_Base_SetConfig+0x13c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <TIM_Base_SetConfig+0x140>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <TIM_Base_SetConfig+0x144>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a15      	ldr	r2, [pc, #84]	@ (800592c <TIM_Base_SetConfig+0x148>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d105      	bne.n	8005902 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]
  }
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40010400 	.word	0x40010400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e042      	b.n	8005a04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fc75 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2224      	movs	r2, #36	@ 0x24
 800599a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fe1e 	bl	80065f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8b3 	bl	8005b28 <UART_SetConfig>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e01b      	b.n	8005a04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fe9d 	bl	800673c <UART_CheckIdleState>
 8005a02:	4603      	mov	r3, r0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	@ 0x28
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d17b      	bne.n	8005b1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_UART_Transmit+0x26>
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e074      	b.n	8005b20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2221      	movs	r2, #33	@ 0x21
 8005a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a46:	f7fb fdad 	bl	80015a4 <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a64:	d108      	bne.n	8005a78 <HAL_UART_Transmit+0x6c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e003      	b.n	8005a80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a80:	e030      	b.n	8005ae4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2180      	movs	r1, #128	@ 0x80
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 feff 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e03d      	b.n	8005b20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	3302      	adds	r3, #2
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e007      	b.n	8005ad2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1c8      	bne.n	8005a82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2140      	movs	r1, #64	@ 0x40
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fec8 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e006      	b.n	8005b20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e000      	b.n	8005b20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
  }
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b2c:	b092      	sub	sp, #72	@ 0x48
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4bbe      	ldr	r3, [pc, #760]	@ (8005e50 <UART_SetConfig+0x328>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4ab3      	ldr	r2, [pc, #716]	@ (8005e54 <UART_SetConfig+0x32c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b90:	4313      	orrs	r3, r2
 8005b92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	4baf      	ldr	r3, [pc, #700]	@ (8005e58 <UART_SetConfig+0x330>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	f023 010f 	bic.w	r1, r3, #15
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e5c <UART_SetConfig+0x334>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d177      	bne.n	8005cb8 <UART_SetConfig+0x190>
 8005bc8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e60 <UART_SetConfig+0x338>)
 8005bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd0:	2b28      	cmp	r3, #40	@ 0x28
 8005bd2:	d86d      	bhi.n	8005cb0 <UART_SetConfig+0x188>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <UART_SetConfig+0xb4>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c81 	.word	0x08005c81
 8005be0:	08005cb1 	.word	0x08005cb1
 8005be4:	08005cb1 	.word	0x08005cb1
 8005be8:	08005cb1 	.word	0x08005cb1
 8005bec:	08005cb1 	.word	0x08005cb1
 8005bf0:	08005cb1 	.word	0x08005cb1
 8005bf4:	08005cb1 	.word	0x08005cb1
 8005bf8:	08005cb1 	.word	0x08005cb1
 8005bfc:	08005c89 	.word	0x08005c89
 8005c00:	08005cb1 	.word	0x08005cb1
 8005c04:	08005cb1 	.word	0x08005cb1
 8005c08:	08005cb1 	.word	0x08005cb1
 8005c0c:	08005cb1 	.word	0x08005cb1
 8005c10:	08005cb1 	.word	0x08005cb1
 8005c14:	08005cb1 	.word	0x08005cb1
 8005c18:	08005cb1 	.word	0x08005cb1
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005cb1 	.word	0x08005cb1
 8005c24:	08005cb1 	.word	0x08005cb1
 8005c28:	08005cb1 	.word	0x08005cb1
 8005c2c:	08005cb1 	.word	0x08005cb1
 8005c30:	08005cb1 	.word	0x08005cb1
 8005c34:	08005cb1 	.word	0x08005cb1
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005c99 	.word	0x08005c99
 8005c40:	08005cb1 	.word	0x08005cb1
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005cb1 	.word	0x08005cb1
 8005c54:	08005cb1 	.word	0x08005cb1
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005cb1 	.word	0x08005cb1
 8005c64:	08005cb1 	.word	0x08005cb1
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005cb1 	.word	0x08005cb1
 8005c70:	08005cb1 	.word	0x08005cb1
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005cb1 	.word	0x08005cb1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e222      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e21e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c90:	2308      	movs	r3, #8
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e21a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e216      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e212      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ca8:	2340      	movs	r3, #64	@ 0x40
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e20e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e20a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a69      	ldr	r2, [pc, #420]	@ (8005e64 <UART_SetConfig+0x33c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d130      	bne.n	8005d24 <UART_SetConfig+0x1fc>
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <UART_SetConfig+0x338>)
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d826      	bhi.n	8005d1c <UART_SetConfig+0x1f4>
 8005cce:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <UART_SetConfig+0x1ac>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e1ec      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1e8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1e4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1e0      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1dc      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d14:	2340      	movs	r3, #64	@ 0x40
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e1d8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d1c:	2380      	movs	r3, #128	@ 0x80
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e1d4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a4f      	ldr	r2, [pc, #316]	@ (8005e68 <UART_SetConfig+0x340>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d130      	bne.n	8005d90 <UART_SetConfig+0x268>
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e60 <UART_SetConfig+0x338>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d826      	bhi.n	8005d88 <UART_SetConfig+0x260>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x218>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d69 	.word	0x08005d69
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e1b6      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1b2      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1ae      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1aa      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e1a6      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d80:	2340      	movs	r3, #64	@ 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e1a2      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e19e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a35      	ldr	r2, [pc, #212]	@ (8005e6c <UART_SetConfig+0x344>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x2d4>
 8005d9a:	4b31      	ldr	r3, [pc, #196]	@ (8005e60 <UART_SetConfig+0x338>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x2cc>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x284>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e180      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e17c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e178      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e174      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e170      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dec:	2340      	movs	r3, #64	@ 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e16c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e168      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <UART_SetConfig+0x348>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d142      	bne.n	8005e8c <UART_SetConfig+0x364>
 8005e06:	4b16      	ldr	r3, [pc, #88]	@ (8005e60 <UART_SetConfig+0x338>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d838      	bhi.n	8005e84 <UART_SetConfig+0x35c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <UART_SetConfig+0x2f0>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e14a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e146      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e142      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e13e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e50:	cfff69f3 	.word	0xcfff69f3
 8005e54:	58000c00 	.word	0x58000c00
 8005e58:	11fff4ff 	.word	0x11fff4ff
 8005e5c:	40011000 	.word	0x40011000
 8005e60:	58024400 	.word	0x58024400
 8005e64:	40004400 	.word	0x40004400
 8005e68:	40004800 	.word	0x40004800
 8005e6c:	40004c00 	.word	0x40004c00
 8005e70:	40005000 	.word	0x40005000
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e128      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e7c:	2340      	movs	r3, #64	@ 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e124      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e120      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4acb      	ldr	r2, [pc, #812]	@ (80061c0 <UART_SetConfig+0x698>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d176      	bne.n	8005f84 <UART_SetConfig+0x45c>
 8005e96:	4bcb      	ldr	r3, [pc, #812]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e9e:	2b28      	cmp	r3, #40	@ 0x28
 8005ea0:	d86c      	bhi.n	8005f7c <UART_SetConfig+0x454>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0x380>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005f4d 	.word	0x08005f4d
 8005eac:	08005f7d 	.word	0x08005f7d
 8005eb0:	08005f7d 	.word	0x08005f7d
 8005eb4:	08005f7d 	.word	0x08005f7d
 8005eb8:	08005f7d 	.word	0x08005f7d
 8005ebc:	08005f7d 	.word	0x08005f7d
 8005ec0:	08005f7d 	.word	0x08005f7d
 8005ec4:	08005f7d 	.word	0x08005f7d
 8005ec8:	08005f55 	.word	0x08005f55
 8005ecc:	08005f7d 	.word	0x08005f7d
 8005ed0:	08005f7d 	.word	0x08005f7d
 8005ed4:	08005f7d 	.word	0x08005f7d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	08005f7d 	.word	0x08005f7d
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f7d 	.word	0x08005f7d
 8005ee8:	08005f5d 	.word	0x08005f5d
 8005eec:	08005f7d 	.word	0x08005f7d
 8005ef0:	08005f7d 	.word	0x08005f7d
 8005ef4:	08005f7d 	.word	0x08005f7d
 8005ef8:	08005f7d 	.word	0x08005f7d
 8005efc:	08005f7d 	.word	0x08005f7d
 8005f00:	08005f7d 	.word	0x08005f7d
 8005f04:	08005f7d 	.word	0x08005f7d
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f7d 	.word	0x08005f7d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08005f7d 	.word	0x08005f7d
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f7d 	.word	0x08005f7d
 8005f30:	08005f7d 	.word	0x08005f7d
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f7d 	.word	0x08005f7d
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e0bc      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0b8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0b4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e0b0      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e0ac      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e0a8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e0a4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a8f      	ldr	r2, [pc, #572]	@ (80061c8 <UART_SetConfig+0x6a0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d130      	bne.n	8005ff0 <UART_SetConfig+0x4c8>
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d826      	bhi.n	8005fe8 <UART_SetConfig+0x4c0>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x478>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	08005fc9 	.word	0x08005fc9
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e086      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e082      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e07e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e07a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e076      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fe0:	2340      	movs	r3, #64	@ 0x40
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e072      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fe8:	2380      	movs	r3, #128	@ 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e06e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a75      	ldr	r2, [pc, #468]	@ (80061cc <UART_SetConfig+0x6a4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d130      	bne.n	800605c <UART_SetConfig+0x534>
 8005ffa:	4b72      	ldr	r3, [pc, #456]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b05      	cmp	r3, #5
 8006004:	d826      	bhi.n	8006054 <UART_SetConfig+0x52c>
 8006006:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <UART_SetConfig+0x4e4>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006025 	.word	0x08006025
 8006010:	0800602d 	.word	0x0800602d
 8006014:	08006035 	.word	0x08006035
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e050      	b.n	80060ce <UART_SetConfig+0x5a6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e04c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e048      	b.n	80060ce <UART_SetConfig+0x5a6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e044      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e040      	b.n	80060ce <UART_SetConfig+0x5a6>
 800604c:	2340      	movs	r3, #64	@ 0x40
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e03c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e038      	b.n	80060ce <UART_SetConfig+0x5a6>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5b      	ldr	r2, [pc, #364]	@ (80061d0 <UART_SetConfig+0x6a8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d130      	bne.n	80060c8 <UART_SetConfig+0x5a0>
 8006066:	4b57      	ldr	r3, [pc, #348]	@ (80061c4 <UART_SetConfig+0x69c>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b05      	cmp	r3, #5
 8006070:	d826      	bhi.n	80060c0 <UART_SetConfig+0x598>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0x550>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006091 	.word	0x08006091
 800607c:	08006099 	.word	0x08006099
 8006080:	080060a1 	.word	0x080060a1
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2302      	movs	r3, #2
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e01a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e016      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e012      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e00e      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e00a      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060b8:	2340      	movs	r3, #64	@ 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e006      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e002      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a3f      	ldr	r2, [pc, #252]	@ (80061d0 <UART_SetConfig+0x6a8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	f040 80f8 	bne.w	80062ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060de:	2b20      	cmp	r3, #32
 80060e0:	dc46      	bgt.n	8006170 <UART_SetConfig+0x648>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	f2c0 8082 	blt.w	80061ec <UART_SetConfig+0x6c4>
 80060e8:	3b02      	subs	r3, #2
 80060ea:	2b1e      	cmp	r3, #30
 80060ec:	d87e      	bhi.n	80061ec <UART_SetConfig+0x6c4>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <UART_SetConfig+0x5cc>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006177 	.word	0x08006177
 80060f8:	080061ed 	.word	0x080061ed
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	080061ed 	.word	0x080061ed
 8006104:	080061ed 	.word	0x080061ed
 8006108:	080061ed 	.word	0x080061ed
 800610c:	0800618f 	.word	0x0800618f
 8006110:	080061ed 	.word	0x080061ed
 8006114:	080061ed 	.word	0x080061ed
 8006118:	080061ed 	.word	0x080061ed
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	0800619f 	.word	0x0800619f
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061ed 	.word	0x080061ed
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061ed 	.word	0x080061ed
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061df 	.word	0x080061df
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	d037      	beq.n	80061e4 <UART_SetConfig+0x6bc>
 8006174:	e03a      	b.n	80061ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006176:	f7fe fd09 	bl	8004b8c <HAL_RCCEx_GetD3PCLK1Freq>
 800617a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800617c:	e03c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fd18 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e034      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800618e:	f107 0318 	add.w	r3, r7, #24
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fe64 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619c:	e02c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800619e:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <UART_SetConfig+0x69c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061aa:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <UART_SetConfig+0x69c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	4a07      	ldr	r2, [pc, #28]	@ (80061d4 <UART_SetConfig+0x6ac>)
 80061b6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061bc:	e01c      	b.n	80061f8 <UART_SetConfig+0x6d0>
 80061be:	bf00      	nop
 80061c0:	40011400 	.word	0x40011400
 80061c4:	58024400 	.word	0x58024400
 80061c8:	40007800 	.word	0x40007800
 80061cc:	40007c00 	.word	0x40007c00
 80061d0:	58000c00 	.word	0x58000c00
 80061d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006450 <UART_SetConfig+0x928>)
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e00c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061de:	4b9d      	ldr	r3, [pc, #628]	@ (8006454 <UART_SetConfig+0x92c>)
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e2:	e009      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ea:	e005      	b.n	80061f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 81de 	beq.w	80065bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	4a94      	ldr	r2, [pc, #592]	@ (8006458 <UART_SetConfig+0x930>)
 8006206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800620a:	461a      	mov	r2, r3
 800620c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	4413      	add	r3, r2
 800621e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006220:	429a      	cmp	r2, r3
 8006222:	d305      	bcc.n	8006230 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006236:	e1c1      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	2200      	movs	r2, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	60fa      	str	r2, [r7, #12]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	4a84      	ldr	r2, [pc, #528]	@ (8006458 <UART_SetConfig+0x930>)
 8006246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624a:	b29b      	uxth	r3, r3
 800624c:	2200      	movs	r2, #0
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800625a:	f7fa f841 	bl	80002e0 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	020b      	lsls	r3, r1, #8
 8006270:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006274:	0202      	lsls	r2, r0, #8
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	6849      	ldr	r1, [r1, #4]
 800627a:	0849      	lsrs	r1, r1, #1
 800627c:	2000      	movs	r0, #0
 800627e:	460c      	mov	r4, r1
 8006280:	4605      	mov	r5, r0
 8006282:	eb12 0804 	adds.w	r8, r2, r4
 8006286:	eb43 0905 	adc.w	r9, r3, r5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	469a      	mov	sl, r3
 8006292:	4693      	mov	fp, r2
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	4640      	mov	r0, r8
 800629a:	4649      	mov	r1, r9
 800629c:	f7fa f820 	bl	80002e0 <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4613      	mov	r3, r2
 80062a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ae:	d308      	bcc.n	80062c2 <UART_SetConfig+0x79a>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062b6:	d204      	bcs.n	80062c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	e17c      	b.n	80065bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062c8:	e178      	b.n	80065bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d2:	f040 80c5 	bne.w	8006460 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062da:	2b20      	cmp	r3, #32
 80062dc:	dc48      	bgt.n	8006370 <UART_SetConfig+0x848>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db7b      	blt.n	80063da <UART_SetConfig+0x8b2>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d879      	bhi.n	80063da <UART_SetConfig+0x8b2>
 80062e6:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0x7c4>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006377 	.word	0x08006377
 80062f0:	0800637f 	.word	0x0800637f
 80062f4:	080063db 	.word	0x080063db
 80062f8:	080063db 	.word	0x080063db
 80062fc:	08006387 	.word	0x08006387
 8006300:	080063db 	.word	0x080063db
 8006304:	080063db 	.word	0x080063db
 8006308:	080063db 	.word	0x080063db
 800630c:	08006397 	.word	0x08006397
 8006310:	080063db 	.word	0x080063db
 8006314:	080063db 	.word	0x080063db
 8006318:	080063db 	.word	0x080063db
 800631c:	080063db 	.word	0x080063db
 8006320:	080063db 	.word	0x080063db
 8006324:	080063db 	.word	0x080063db
 8006328:	080063db 	.word	0x080063db
 800632c:	080063a7 	.word	0x080063a7
 8006330:	080063db 	.word	0x080063db
 8006334:	080063db 	.word	0x080063db
 8006338:	080063db 	.word	0x080063db
 800633c:	080063db 	.word	0x080063db
 8006340:	080063db 	.word	0x080063db
 8006344:	080063db 	.word	0x080063db
 8006348:	080063db 	.word	0x080063db
 800634c:	080063db 	.word	0x080063db
 8006350:	080063db 	.word	0x080063db
 8006354:	080063db 	.word	0x080063db
 8006358:	080063db 	.word	0x080063db
 800635c:	080063db 	.word	0x080063db
 8006360:	080063db 	.word	0x080063db
 8006364:	080063db 	.word	0x080063db
 8006368:	080063db 	.word	0x080063db
 800636c:	080063cd 	.word	0x080063cd
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d02e      	beq.n	80063d2 <UART_SetConfig+0x8aa>
 8006374:	e031      	b.n	80063da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006376:	f7fd f991 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800637a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800637c:	e033      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637e:	f7fd f9a3 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8006382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006384:	e02f      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fc14 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006394:	e027      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006396:	f107 0318 	add.w	r3, r7, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fd60 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a4:	e01f      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a6:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <UART_SetConfig+0x934>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063b2:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <UART_SetConfig+0x934>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <UART_SetConfig+0x928>)
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063c4:	e00f      	b.n	80063e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063c6:	4b22      	ldr	r3, [pc, #136]	@ (8006450 <UART_SetConfig+0x928>)
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ca:	e00c      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063cc:	4b21      	ldr	r3, [pc, #132]	@ (8006454 <UART_SetConfig+0x92c>)
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d0:	e009      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e005      	b.n	80063e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80e7 	beq.w	80065bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f2:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <UART_SetConfig+0x930>)
 80063f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006400:	005a      	lsls	r2, r3, #1
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	441a      	add	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	2b0f      	cmp	r3, #15
 8006418:	d916      	bls.n	8006448 <UART_SetConfig+0x920>
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d212      	bcs.n	8006448 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	b29b      	uxth	r3, r3
 8006426:	f023 030f 	bic.w	r3, r3, #15
 800642a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	b29a      	uxth	r2, r3
 8006438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800643a:	4313      	orrs	r3, r2
 800643c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	e0b9      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800644e:	e0b5      	b.n	80065bc <UART_SetConfig+0xa94>
 8006450:	03d09000 	.word	0x03d09000
 8006454:	003d0900 	.word	0x003d0900
 8006458:	0800a6a8 	.word	0x0800a6a8
 800645c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006464:	2b20      	cmp	r3, #32
 8006466:	dc49      	bgt.n	80064fc <UART_SetConfig+0x9d4>
 8006468:	2b00      	cmp	r3, #0
 800646a:	db7c      	blt.n	8006566 <UART_SetConfig+0xa3e>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d87a      	bhi.n	8006566 <UART_SetConfig+0xa3e>
 8006470:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <UART_SetConfig+0x950>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	08006503 	.word	0x08006503
 800647c:	0800650b 	.word	0x0800650b
 8006480:	08006567 	.word	0x08006567
 8006484:	08006567 	.word	0x08006567
 8006488:	08006513 	.word	0x08006513
 800648c:	08006567 	.word	0x08006567
 8006490:	08006567 	.word	0x08006567
 8006494:	08006567 	.word	0x08006567
 8006498:	08006523 	.word	0x08006523
 800649c:	08006567 	.word	0x08006567
 80064a0:	08006567 	.word	0x08006567
 80064a4:	08006567 	.word	0x08006567
 80064a8:	08006567 	.word	0x08006567
 80064ac:	08006567 	.word	0x08006567
 80064b0:	08006567 	.word	0x08006567
 80064b4:	08006567 	.word	0x08006567
 80064b8:	08006533 	.word	0x08006533
 80064bc:	08006567 	.word	0x08006567
 80064c0:	08006567 	.word	0x08006567
 80064c4:	08006567 	.word	0x08006567
 80064c8:	08006567 	.word	0x08006567
 80064cc:	08006567 	.word	0x08006567
 80064d0:	08006567 	.word	0x08006567
 80064d4:	08006567 	.word	0x08006567
 80064d8:	08006567 	.word	0x08006567
 80064dc:	08006567 	.word	0x08006567
 80064e0:	08006567 	.word	0x08006567
 80064e4:	08006567 	.word	0x08006567
 80064e8:	08006567 	.word	0x08006567
 80064ec:	08006567 	.word	0x08006567
 80064f0:	08006567 	.word	0x08006567
 80064f4:	08006567 	.word	0x08006567
 80064f8:	08006559 	.word	0x08006559
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d02e      	beq.n	800655e <UART_SetConfig+0xa36>
 8006500:	e031      	b.n	8006566 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006502:	f7fd f8cb 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006508:	e033      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800650a:	f7fd f8dd 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 800650e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006510:	e02f      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fb4e 	bl	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006520:	e027      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fc9a 	bl	8004e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e01f      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006532:	4b2d      	ldr	r3, [pc, #180]	@ (80065e8 <UART_SetConfig+0xac0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800653e:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <UART_SetConfig+0xac0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	4a28      	ldr	r2, [pc, #160]	@ (80065ec <UART_SetConfig+0xac4>)
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006550:	e00f      	b.n	8006572 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006552:	4b26      	ldr	r3, [pc, #152]	@ (80065ec <UART_SetConfig+0xac4>)
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006556:	e00c      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006558:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <UART_SetConfig+0xac8>)
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e009      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e005      	b.n	8006572 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006570:	bf00      	nop
    }

    if (pclk != 0U)
 8006572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d021      	beq.n	80065bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	4a1d      	ldr	r2, [pc, #116]	@ (80065f4 <UART_SetConfig+0xacc>)
 800657e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006582:	461a      	mov	r2, r3
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	fbb3 f2f2 	udiv	r2, r3, r2
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d909      	bls.n	80065b6 <UART_SetConfig+0xa8e>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a8:	d205      	bcs.n	80065b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e002      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3748      	adds	r7, #72	@ 0x48
 80065e0:	46bd      	mov	sp, r7
 80065e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
 80065ec:	03d09000 	.word	0x03d09000
 80065f0:	003d0900 	.word	0x003d0900
 80065f4:	0800a6a8 	.word	0x0800a6a8

080065f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f6:	d10a      	bne.n	800670e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b098      	sub	sp, #96	@ 0x60
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800674c:	f7fa ff2a 	bl	80015a4 <HAL_GetTick>
 8006750:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d12f      	bne.n	80067c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006768:	2200      	movs	r2, #0
 800676a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f88e 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d022      	beq.n	80067c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006798:	647b      	str	r3, [r7, #68]	@ 0x44
 800679a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800679e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e063      	b.n	8006888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d149      	bne.n	8006862 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d6:	2200      	movs	r2, #0
 80067d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f857 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03c      	beq.n	8006862 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	623b      	str	r3, [r7, #32]
   return(result);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006806:	633b      	str	r3, [r7, #48]	@ 0x30
 8006808:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800680c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60fb      	str	r3, [r7, #12]
   return(result);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800683a:	61fa      	str	r2, [r7, #28]
 800683c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69b9      	ldr	r1, [r7, #24]
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	617b      	str	r3, [r7, #20]
   return(result);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e012      	b.n	8006888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3758      	adds	r7, #88	@ 0x58
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	e04f      	b.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a8:	d04b      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068aa:	f7fa fe7b 	bl	80015a4 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e04e      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d037      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b80      	cmp	r3, #128	@ 0x80
 80068d6:	d034      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d031      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d110      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2208      	movs	r2, #8
 80068f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f839 	bl	800696c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2208      	movs	r2, #8
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e029      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691c:	d111      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f81f 	bl	800696c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e00f      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	429a      	cmp	r2, r3
 800695e:	d0a0      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b095      	sub	sp, #84	@ 0x54
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006992:	643b      	str	r3, [r7, #64]	@ 0x40
 8006994:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a34 <UART_EndRxTransfer+0xc8>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d118      	bne.n	8006a14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f023 0310 	bic.w	r3, r3, #16
 80069f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6979      	ldr	r1, [r7, #20]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a28:	bf00      	nop
 8006a2a:	3754      	adds	r7, #84	@ 0x54
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	effffffe 	.word	0xeffffffe

08006a38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e027      	b.n	8006a9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2224      	movs	r2, #36	@ 0x24
 8006a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e02d      	b.n	8006b1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2224      	movs	r2, #36	@ 0x24
 8006ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f850 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e02d      	b.n	8006b9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2224      	movs	r2, #36	@ 0x24
 8006b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f812 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bc4:	e031      	b.n	8006c2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bc6:	2310      	movs	r3, #16
 8006bc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bca:	2310      	movs	r3, #16
 8006bcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e5b      	lsrs	r3, r3, #25
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	0f5b      	lsrs	r3, r3, #29
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	7b3a      	ldrb	r2, [r7, #12]
 8006bf2:	4911      	ldr	r1, [pc, #68]	@ (8006c38 <UARTEx_SetNbDataToProcess+0x94>)
 8006bf4:	5c8a      	ldrb	r2, [r1, r2]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bfa:	7b3a      	ldrb	r2, [r7, #12]
 8006bfc:	490f      	ldr	r1, [pc, #60]	@ (8006c3c <UARTEx_SetNbDataToProcess+0x98>)
 8006bfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	7b7a      	ldrb	r2, [r7, #13]
 8006c10:	4909      	ldr	r1, [pc, #36]	@ (8006c38 <UARTEx_SetNbDataToProcess+0x94>)
 8006c12:	5c8a      	ldrb	r2, [r1, r2]
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c18:	7b7a      	ldrb	r2, [r7, #13]
 8006c1a:	4908      	ldr	r1, [pc, #32]	@ (8006c3c <UARTEx_SetNbDataToProcess+0x98>)
 8006c1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	0800a6c0 	.word	0x0800a6c0
 8006c3c:	0800a6c8 	.word	0x0800a6c8

08006c40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c40:	b084      	sub	sp, #16
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	f107 001c 	add.w	r0, r7, #28
 8006c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d121      	bne.n	8006c9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d1c <USB_CoreInit+0xdc>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 faaa 	bl	80071ec <USB_CoreReset>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e01b      	b.n	8006cd6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa9e 	bl	80071ec <USB_CoreReset>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cc8:	e005      	b.n	8006cd6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd6:	7fbb      	ldrb	r3, [r7, #30]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d116      	bne.n	8006d0a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <USB_CoreInit+0xe0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f043 0206 	orr.w	r2, r3, #6
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d16:	b004      	add	sp, #16
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	ffbdffbf 	.word	0xffbdffbf
 8006d20:	03ee0000 	.word	0x03ee0000

08006d24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f023 0201 	bic.w	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d115      	bne.n	8006d94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d74:	200a      	movs	r0, #10
 8006d76:	f7fa fc21 	bl	80015bc <HAL_Delay>
      ms += 10U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	330a      	adds	r3, #10
 8006d7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa25 	bl	80071d0 <USB_GetMode>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d01e      	beq.n	8006dca <USB_SetCurrentMode+0x84>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d90:	d9f0      	bls.n	8006d74 <USB_SetCurrentMode+0x2e>
 8006d92:	e01a      	b.n	8006dca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d115      	bne.n	8006dc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006da6:	200a      	movs	r0, #10
 8006da8:	f7fa fc08 	bl	80015bc <HAL_Delay>
      ms += 10U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	330a      	adds	r3, #10
 8006db0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa0c 	bl	80071d0 <USB_GetMode>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <USB_SetCurrentMode+0x84>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dc2:	d9f0      	bls.n	8006da6 <USB_SetCurrentMode+0x60>
 8006dc4:	e001      	b.n	8006dca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e005      	b.n	8006dd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dce:	d101      	bne.n	8006dd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de0:	b084      	sub	sp, #16
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	e009      	b.n	8006e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3340      	adds	r3, #64	@ 0x40
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b0e      	cmp	r3, #14
 8006e18:	d9f2      	bls.n	8006e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d11c      	bne.n	8006e5c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e005      	b.n	8006e68 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2300      	movs	r3, #0
 8006e72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10d      	bne.n	8006e98 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f968 	bl	800715c <USB_SetDevSpeed>
 8006e8c:	e008      	b.n	8006ea0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e8e:	2101      	movs	r1, #1
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f963 	bl	800715c <USB_SetDevSpeed>
 8006e96:	e003      	b.n	8006ea0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e98:	2103      	movs	r1, #3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f95e 	bl	800715c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ea0:	2110      	movs	r1, #16
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8fa 	bl	800709c <USB_FlushTxFifo>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f924 	bl	8007100 <USB_FlushRxFifo>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	e043      	b.n	8006f74 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f02:	d118      	bne.n	8006f36 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f16:	461a      	mov	r2, r3
 8006f18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e013      	b.n	8006f48 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e008      	b.n	8006f48 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f54:	461a      	mov	r2, r3
 8006f56:	2300      	movs	r3, #0
 8006f58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f66:	461a      	mov	r2, r3
 8006f68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3301      	adds	r3, #1
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f78:	461a      	mov	r2, r3
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d3b5      	bcc.n	8006eec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	e043      	b.n	800700e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f9c:	d118      	bne.n	8006fd0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e013      	b.n	8006fe2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e008      	b.n	8006fe2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007000:	461a      	mov	r2, r3
 8007002:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3301      	adds	r3, #1
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007012:	461a      	mov	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4293      	cmp	r3, r2
 8007018:	d3b5      	bcc.n	8006f86 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800702c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800703a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800703c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f043 0210 	orr.w	r2, r3, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699a      	ldr	r2, [r3, #24]
 8007054:	4b0f      	ldr	r3, [pc, #60]	@ (8007094 <USB_DevInit+0x2b4>)
 8007056:	4313      	orrs	r3, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800705c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f043 0208 	orr.w	r2, r3, #8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007070:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007074:	2b01      	cmp	r3, #1
 8007076:	d105      	bne.n	8007084 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <USB_DevInit+0x2b8>)
 800707e:	4313      	orrs	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007090:	b004      	add	sp, #16
 8007092:	4770      	bx	lr
 8007094:	803c3800 	.word	0x803c3800
 8007098:	40000004 	.word	0x40000004

0800709c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b6:	d901      	bls.n	80070bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e01b      	b.n	80070f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	daf2      	bge.n	80070aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	019b      	lsls	r3, r3, #6
 80070cc:	f043 0220 	orr.w	r2, r3, #32
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e0:	d901      	bls.n	80070e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e006      	b.n	80070f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d0f0      	beq.n	80070d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007118:	d901      	bls.n	800711e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e018      	b.n	8007150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	daf2      	bge.n	800710c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2210      	movs	r2, #16
 800712e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800713c:	d901      	bls.n	8007142 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e006      	b.n	8007150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b10      	cmp	r3, #16
 800714c:	d0f0      	beq.n	8007130 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800717c:	4313      	orrs	r3, r2
 800717e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f003 0301 	and.w	r3, r3, #1
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007204:	d901      	bls.n	800720a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e01b      	b.n	8007242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	daf2      	bge.n	80071f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800722e:	d901      	bls.n	8007234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e006      	b.n	8007242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d0f0      	beq.n	8007222 <USB_CoreReset+0x36>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <__NVIC_SetPriority>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800725c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	db0a      	blt.n	800727a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	490c      	ldr	r1, [pc, #48]	@ (800729c <__NVIC_SetPriority+0x4c>)
 800726a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800726e:	0112      	lsls	r2, r2, #4
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	440b      	add	r3, r1
 8007274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007278:	e00a      	b.n	8007290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	b2da      	uxtb	r2, r3
 800727e:	4908      	ldr	r1, [pc, #32]	@ (80072a0 <__NVIC_SetPriority+0x50>)
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	3b04      	subs	r3, #4
 8007288:	0112      	lsls	r2, r2, #4
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	440b      	add	r3, r1
 800728e:	761a      	strb	r2, [r3, #24]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	e000e100 	.word	0xe000e100
 80072a0:	e000ed00 	.word	0xe000ed00

080072a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072a8:	4b05      	ldr	r3, [pc, #20]	@ (80072c0 <SysTick_Handler+0x1c>)
 80072aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072ac:	f001 fe14 	bl	8008ed8 <xTaskGetSchedulerState>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072b6:	f002 fe17 	bl	8009ee8 <xPortSysTickHandler>
  }
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010

080072c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80072c8:	2100      	movs	r1, #0
 80072ca:	f06f 0004 	mvn.w	r0, #4
 80072ce:	f7ff ffbf 	bl	8007250 <__NVIC_SetPriority>
#endif
}
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	603b      	str	r3, [r7, #0]
  return(result);
 80072e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80072ea:	f06f 0305 	mvn.w	r3, #5
 80072ee:	607b      	str	r3, [r7, #4]
 80072f0:	e00c      	b.n	800730c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072f2:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <osKernelInitialize+0x44>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072fa:	4b08      	ldr	r3, [pc, #32]	@ (800731c <osKernelInitialize+0x44>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007300:	2300      	movs	r3, #0
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	e002      	b.n	800730c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800730a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800730c:	687b      	ldr	r3, [r7, #4]
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	24000800 	.word	0x24000800

08007320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007326:	f3ef 8305 	mrs	r3, IPSR
 800732a:	603b      	str	r3, [r7, #0]
  return(result);
 800732c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007332:	f06f 0305 	mvn.w	r3, #5
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	e010      	b.n	800735c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <osKernelStart+0x48>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d109      	bne.n	8007356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007342:	f7ff ffbf 	bl	80072c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007346:	4b08      	ldr	r3, [pc, #32]	@ (8007368 <osKernelStart+0x48>)
 8007348:	2202      	movs	r2, #2
 800734a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800734c:	f001 f960 	bl	8008610 <vTaskStartScheduler>
      stat = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e002      	b.n	800735c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800735a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800735c:	687b      	ldr	r3, [r7, #4]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	24000800 	.word	0x24000800

0800736c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b08e      	sub	sp, #56	@ 0x38
 8007370:	af04      	add	r7, sp, #16
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737c:	f3ef 8305 	mrs	r3, IPSR
 8007380:	617b      	str	r3, [r7, #20]
  return(result);
 8007382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007384:	2b00      	cmp	r3, #0
 8007386:	d17e      	bne.n	8007486 <osThreadNew+0x11a>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d07b      	beq.n	8007486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800738e:	2380      	movs	r3, #128	@ 0x80
 8007390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007392:	2318      	movs	r3, #24
 8007394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800739e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d045      	beq.n	8007432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <osThreadNew+0x48>
        name = attr->name;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <osThreadNew+0x6e>
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b38      	cmp	r3, #56	@ 0x38
 80073cc:	d805      	bhi.n	80073da <osThreadNew+0x6e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <osThreadNew+0x72>
        return (NULL);
 80073da:	2300      	movs	r3, #0
 80073dc:	e054      	b.n	8007488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	089b      	lsrs	r3, r3, #2
 80073ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00e      	beq.n	8007414 <osThreadNew+0xa8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80073fc:	d90a      	bls.n	8007414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <osThreadNew+0xa8>
        mem = 1;
 800740e:	2301      	movs	r3, #1
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	e010      	b.n	8007436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <osThreadNew+0xca>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d108      	bne.n	8007436 <osThreadNew+0xca>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <osThreadNew+0xca>
          mem = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e001      	b.n	8007436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d110      	bne.n	800745e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007444:	9202      	str	r2, [sp, #8]
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fee8 	bl	8008228 <xTaskCreateStatic>
 8007458:	4603      	mov	r3, r0
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	e013      	b.n	8007486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d110      	bne.n	8007486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	b29a      	uxth	r2, r3
 8007468:	f107 0310 	add.w	r3, r7, #16
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 ff36 	bl	80082e8 <xTaskCreate>
 800747c:	4603      	mov	r3, r0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d001      	beq.n	8007486 <osThreadNew+0x11a>
            hTask = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007486:	693b      	ldr	r3, [r7, #16]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3728      	adds	r7, #40	@ 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <osThreadFlagsSet+0x1a>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da03      	bge.n	80074b2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80074aa:	f06f 0303 	mvn.w	r3, #3
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e035      	b.n	800751e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b8:	f3ef 8305 	mrs	r3, IPSR
 80074bc:	613b      	str	r3, [r7, #16]
  return(result);
 80074be:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01f      	beq.n	8007504 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	2201      	movs	r2, #1
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	f001 feaf 	bl	8009238 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	2200      	movs	r2, #0
 80074e0:	9200      	str	r2, [sp, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	6978      	ldr	r0, [r7, #20]
 80074e8:	f001 fea6 	bl	8009238 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d015      	beq.n	800751e <osThreadFlagsSet+0x8e>
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <osThreadFlagsSet+0x98>)
 80074f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	e00c      	b.n	800751e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007504:	2300      	movs	r3, #0
 8007506:	2201      	movs	r2, #1
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f001 fdd2 	bl	80090b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007510:	f107 030c 	add.w	r3, r7, #12
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f001 fdcb 	bl	80090b4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b08c      	sub	sp, #48	@ 0x30
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007538:	f3ef 8305 	mrs	r3, IPSR
 800753c:	617b      	str	r3, [r7, #20]
  return(result);
 800753e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8007544:	f06f 0305 	mvn.w	r3, #5
 8007548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800754a:	e06b      	b.n	8007624 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	da03      	bge.n	800755a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007552:	f06f 0303 	mvn.w	r3, #3
 8007556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007558:	e064      	b.n	8007624 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007568:	e001      	b.n	800756e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8007576:	f001 f967 	bl	8008848 <xTaskGetTickCount>
 800757a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800757c:	f107 0210 	add.w	r2, r7, #16
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007584:	2000      	movs	r0, #0
 8007586:	f001 fd35 	bl	8008ff4 <xTaskNotifyWait>
 800758a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d137      	bne.n	8007602 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4013      	ands	r3, r2
 8007598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800759e:	4313      	orrs	r3, r2
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b0:	4013      	ands	r3, r2
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d032      	beq.n	800761e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80075be:	f06f 0302 	mvn.w	r3, #2
 80075c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80075c4:	e02e      	b.n	8007624 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d128      	bne.n	8007622 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80075d6:	f06f 0302 	mvn.w	r3, #2
 80075da:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80075dc:	e022      	b.n	8007624 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80075de:	f001 f933 	bl	8008848 <xTaskGetTickCount>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d902      	bls.n	80075f8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f6:	e00e      	b.n	8007616 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80075f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007600:	e009      	b.n	8007616 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007608:	f06f 0302 	mvn.w	r3, #2
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760e:	e002      	b.n	8007616 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007610:	f06f 0301 	mvn.w	r3, #1
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1af      	bne.n	800757c <osThreadFlagsWait+0x50>
 800761c:	e002      	b.n	8007624 <osThreadFlagsWait+0xf8>
            break;
 800761e:	bf00      	nop
 8007620:	e000      	b.n	8007624 <osThreadFlagsWait+0xf8>
            break;
 8007622:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007626:	4618      	mov	r0, r3
 8007628:	3730      	adds	r7, #48	@ 0x30
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007636:	f3ef 8305 	mrs	r3, IPSR
 800763a:	60bb      	str	r3, [r7, #8]
  return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <osDelay+0x1c>
    stat = osErrorISR;
 8007642:	f06f 0305 	mvn.w	r3, #5
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	e007      	b.n	800765a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ffa5 	bl	80085a4 <vTaskDelay>
    }
  }

  return (stat);
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a07      	ldr	r2, [pc, #28]	@ (8007690 <vApplicationGetIdleTaskMemory+0x2c>)
 8007674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4a06      	ldr	r2, [pc, #24]	@ (8007694 <vApplicationGetIdleTaskMemory+0x30>)
 800767a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2280      	movs	r2, #128	@ 0x80
 8007680:	601a      	str	r2, [r3, #0]
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	24000804 	.word	0x24000804
 8007694:	240008ac 	.word	0x240008ac

08007698 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4a07      	ldr	r2, [pc, #28]	@ (80076c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80076a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4a06      	ldr	r2, [pc, #24]	@ (80076c8 <vApplicationGetTimerTaskMemory+0x30>)
 80076ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076b6:	601a      	str	r2, [r3, #0]
}
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	24000aac 	.word	0x24000aac
 80076c8:	24000b54 	.word	0x24000b54

080076cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f103 0208 	add.w	r2, r3, #8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0208 	add.w	r2, r3, #8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f103 0208 	add.w	r2, r3, #8
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007784:	d103      	bne.n	800778e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e00c      	b.n	80077a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3308      	adds	r3, #8
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e002      	b.n	800779c <vListInsert+0x2e>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d2f6      	bcs.n	8007796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6892      	ldr	r2, [r2, #8]
 80077f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6852      	ldr	r2, [r2, #4]
 8007800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d103      	bne.n	8007814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1e5a      	subs	r2, r3, #1
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10b      	bne.n	8007860 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	e7fd      	b.n	800785c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007860:	f002 fab2 	bl	8009dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	68f9      	ldr	r1, [r7, #12]
 800786e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	441a      	add	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	3b01      	subs	r3, #1
 8007892:	68f9      	ldr	r1, [r7, #12]
 8007894:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	441a      	add	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	22ff      	movs	r2, #255	@ 0xff
 80078a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22ff      	movs	r2, #255	@ 0xff
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d114      	bne.n	80078e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01a      	beq.n	80078f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3310      	adds	r3, #16
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f942 	bl	8008b4c <xTaskRemoveFromEventList>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d012      	beq.n	80078f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007904 <xQueueGenericReset+0xd0>)
 80078d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	e009      	b.n	80078f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3310      	adds	r3, #16
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fef1 	bl	80076cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3324      	adds	r3, #36	@ 0x24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff feec 	bl	80076cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078f4:	f002 fa9a 	bl	8009e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078f8:	2301      	movs	r3, #1
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08e      	sub	sp, #56	@ 0x38
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <xQueueGenericCreateStatic+0x56>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <xQueueGenericCreateStatic+0x5a>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xQueueGenericCreateStatic+0x5c>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	623b      	str	r3, [r7, #32]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <xQueueGenericCreateStatic+0x84>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <xQueueGenericCreateStatic+0x88>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <xQueueGenericCreateStatic+0x8a>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	61fb      	str	r3, [r7, #28]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ae:	2350      	movs	r3, #80	@ 0x50
 80079b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b50      	cmp	r3, #80	@ 0x50
 80079b6:	d00b      	beq.n	80079d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61bb      	str	r3, [r7, #24]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00d      	beq.n	80079f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f805 	bl	8007a02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3730      	adds	r7, #48	@ 0x30
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d103      	bne.n	8007a1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e002      	b.n	8007a24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a30:	2101      	movs	r1, #1
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f7ff fefe 	bl	8007834 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	@ 0x38
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a56:	2300      	movs	r3, #0
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <xQueueGenericSend+0x34>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	e7fd      	b.n	8007a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <xQueueGenericSend+0x42>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <xQueueGenericSend+0x46>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueGenericSend+0x48>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xQueueGenericSend+0x64>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d103      	bne.n	8007aba <xQueueGenericSend+0x72>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <xQueueGenericSend+0x76>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueGenericSend+0x78>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <xQueueGenericSend+0x94>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007adc:	f001 f9fc 	bl	8008ed8 <xTaskGetSchedulerState>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <xQueueGenericSend+0xa4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <xQueueGenericSend+0xa8>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e000      	b.n	8007af2 <xQueueGenericSend+0xaa>
 8007af0:	2300      	movs	r3, #0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <xQueueGenericSend+0xc6>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	61fb      	str	r3, [r7, #28]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b0e:	f002 f95b 	bl	8009dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <xQueueGenericSend+0xdc>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d129      	bne.n	8007b78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b2a:	f000 fa0f 	bl	8007f4c <prvCopyDataToQueue>
 8007b2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d010      	beq.n	8007b5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	3324      	adds	r3, #36	@ 0x24
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f805 	bl	8008b4c <xTaskRemoveFromEventList>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d013      	beq.n	8007b70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b48:	4b3f      	ldr	r3, [pc, #252]	@ (8007c48 <xQueueGenericSend+0x200>)
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	e00a      	b.n	8007b70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b60:	4b39      	ldr	r3, [pc, #228]	@ (8007c48 <xQueueGenericSend+0x200>)
 8007b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b70:	f002 f95c 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e063      	b.n	8007c40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b7e:	f002 f955 	bl	8009e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e05c      	b.n	8007c40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 f83f 	bl	8008c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b96:	2301      	movs	r3, #1
 8007b98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b9a:	f002 f947 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b9e:	f000 fda7 	bl	80086f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ba2:	f002 f911 	bl	8009dc8 <vPortEnterCritical>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb2:	d103      	bne.n	8007bbc <xQueueGenericSend+0x174>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc8:	d103      	bne.n	8007bd2 <xQueueGenericSend+0x18a>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bd2:	f002 f92b 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bd6:	1d3a      	adds	r2, r7, #4
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 f82e 	bl	8008c40 <xTaskCheckForTimeOut>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d124      	bne.n	8007c34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bec:	f000 faa6 	bl	800813c <prvIsQueueFull>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d018      	beq.n	8007c28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 ff52 	bl	8008aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c06:	f000 fa31 	bl	800806c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c0a:	f000 fd7f 	bl	800870c <xTaskResumeAll>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f af7c 	bne.w	8007b0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c16:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <xQueueGenericSend+0x200>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	e772      	b.n	8007b0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c2a:	f000 fa1f 	bl	800806c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c2e:	f000 fd6d 	bl	800870c <xTaskResumeAll>
 8007c32:	e76c      	b.n	8007b0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c36:	f000 fa19 	bl	800806c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c3a:	f000 fd67 	bl	800870c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3738      	adds	r7, #56	@ 0x38
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b090      	sub	sp, #64	@ 0x40
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	e7fd      	b.n	8007c78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <xQueueGenericSendFromISR+0x3e>
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <xQueueGenericSendFromISR+0x42>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e000      	b.n	8007c90 <xQueueGenericSendFromISR+0x44>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSendFromISR+0x6e>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericSendFromISR+0x72>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericSendFromISR+0x74>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10b      	bne.n	8007cdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	623b      	str	r3, [r7, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cdc:	f002 f954 	bl	8009f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8007ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61fa      	str	r2, [r7, #28]
 8007cf6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d302      	bcc.n	8007d0e <xQueueGenericSendFromISR+0xc2>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d12f      	bne.n	8007d6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d24:	f000 f912 	bl	8007f4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d30:	d112      	bne.n	8007d58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d016      	beq.n	8007d68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	3324      	adds	r3, #36	@ 0x24
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 ff04 	bl	8008b4c <xTaskRemoveFromEventList>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e007      	b.n	8007d68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	b25a      	sxtb	r2, r3
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d6c:	e001      	b.n	8007d72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3740      	adds	r7, #64	@ 0x40
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08c      	sub	sp, #48	@ 0x30
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <xQueueReceive+0x32>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	623b      	str	r3, [r7, #32]
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	e7fd      	b.n	8007db6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <xQueueReceive+0x40>
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueReceive+0x44>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueReceive+0x46>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <xQueueReceive+0x62>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dea:	f001 f875 	bl	8008ed8 <xTaskGetSchedulerState>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <xQueueReceive+0x72>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <xQueueReceive+0x76>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <xQueueReceive+0x78>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xQueueReceive+0x94>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61bb      	str	r3, [r7, #24]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e1c:	f001 ffd4 	bl	8009dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01f      	beq.n	8007e6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e30:	f000 f8f6 	bl	8008020 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	1e5a      	subs	r2, r3, #1
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00f      	beq.n	8007e64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	3310      	adds	r3, #16
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fe7f 	bl	8008b4c <xTaskRemoveFromEventList>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e54:	4b3c      	ldr	r3, [pc, #240]	@ (8007f48 <xQueueReceive+0x1c0>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e64:	f001 ffe2 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e069      	b.n	8007f40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e72:	f001 ffdb 	bl	8009e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e062      	b.n	8007f40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e80:	f107 0310 	add.w	r3, r7, #16
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fec5 	bl	8008c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e8e:	f001 ffcd 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e92:	f000 fc2d 	bl	80086f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e96:	f001 ff97 	bl	8009dc8 <vPortEnterCritical>
 8007e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ea6:	d103      	bne.n	8007eb0 <xQueueReceive+0x128>
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eb6:	b25b      	sxtb	r3, r3
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ebc:	d103      	bne.n	8007ec6 <xQueueReceive+0x13e>
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ec6:	f001 ffb1 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eca:	1d3a      	adds	r2, r7, #4
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 feb4 	bl	8008c40 <xTaskCheckForTimeOut>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d123      	bne.n	8007f26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee0:	f000 f916 	bl	8008110 <prvIsQueueEmpty>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	3324      	adds	r3, #36	@ 0x24
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fdd8 	bl	8008aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007efa:	f000 f8b7 	bl	800806c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007efe:	f000 fc05 	bl	800870c <xTaskResumeAll>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d189      	bne.n	8007e1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f08:	4b0f      	ldr	r3, [pc, #60]	@ (8007f48 <xQueueReceive+0x1c0>)
 8007f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	e780      	b.n	8007e1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f1c:	f000 f8a6 	bl	800806c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f20:	f000 fbf4 	bl	800870c <xTaskResumeAll>
 8007f24:	e77a      	b.n	8007e1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f28:	f000 f8a0 	bl	800806c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f2c:	f000 fbee 	bl	800870c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f32:	f000 f8ed 	bl	8008110 <prvIsQueueEmpty>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f43f af6f 	beq.w	8007e1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3730      	adds	r7, #48	@ 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10d      	bne.n	8007f86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d14d      	bne.n	800800e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 ffcc 	bl	8008f14 <xTaskPriorityDisinherit>
 8007f7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
 8007f84:	e043      	b.n	800800e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d119      	bne.n	8007fc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6858      	ldr	r0, [r3, #4]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	461a      	mov	r2, r3
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	f002 faaa 	bl	800a4f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d32b      	bcc.n	800800e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	e026      	b.n	800800e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68d8      	ldr	r0, [r3, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	f002 fa90 	bl	800a4f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	425b      	negs	r3, r3
 8007fda:	441a      	add	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d207      	bcs.n	8007ffc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	425b      	negs	r3, r3
 8007ff6:	441a      	add	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d105      	bne.n	800800e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	3b01      	subs	r3, #1
 800800c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008016:	697b      	ldr	r3, [r7, #20]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	441a      	add	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d303      	bcc.n	8008054 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68d9      	ldr	r1, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805c:	461a      	mov	r2, r3
 800805e:	6838      	ldr	r0, [r7, #0]
 8008060:	f002 fa46 	bl	800a4f0 <memcpy>
	}
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008074:	f001 fea8 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800807e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008080:	e011      	b.n	80080a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	2b00      	cmp	r3, #0
 8008088:	d012      	beq.n	80080b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3324      	adds	r3, #36	@ 0x24
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fd5c 	bl	8008b4c <xTaskRemoveFromEventList>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800809a:	f000 fe35 	bl	8008d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dce9      	bgt.n	8008082 <prvUnlockQueue+0x16>
 80080ae:	e000      	b.n	80080b2 <prvUnlockQueue+0x46>
					break;
 80080b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	22ff      	movs	r2, #255	@ 0xff
 80080b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080ba:	f001 feb7 	bl	8009e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080be:	f001 fe83 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ca:	e011      	b.n	80080f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d012      	beq.n	80080fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3310      	adds	r3, #16
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fd37 	bl	8008b4c <xTaskRemoveFromEventList>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080e4:	f000 fe10 	bl	8008d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	dce9      	bgt.n	80080cc <prvUnlockQueue+0x60>
 80080f8:	e000      	b.n	80080fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	22ff      	movs	r2, #255	@ 0xff
 8008100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008104:	f001 fe92 	bl	8009e2c <vPortExitCritical>
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008118:	f001 fe56 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e001      	b.n	800812e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800812e:	f001 fe7d 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008144:	f001 fe40 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008150:	429a      	cmp	r2, r3
 8008152:	d102      	bne.n	800815a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e001      	b.n	800815e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800815e:	f001 fe65 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8008162:	68fb      	ldr	r3, [r7, #12]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	e014      	b.n	80081a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800817c:	4a0f      	ldr	r2, [pc, #60]	@ (80081bc <vQueueAddToRegistry+0x50>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008188:	490c      	ldr	r1, [pc, #48]	@ (80081bc <vQueueAddToRegistry+0x50>)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008192:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <vQueueAddToRegistry+0x50>)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	4413      	add	r3, r2
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800819e:	e006      	b.n	80081ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3301      	adds	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b07      	cmp	r3, #7
 80081aa:	d9e7      	bls.n	800817c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	24000f54 	.word	0x24000f54

080081c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081d0:	f001 fdfa 	bl	8009dc8 <vPortEnterCritical>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081da:	b25b      	sxtb	r3, r3
 80081dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081e0:	d103      	bne.n	80081ea <vQueueWaitForMessageRestricted+0x2a>
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f6:	d103      	bne.n	8008200 <vQueueWaitForMessageRestricted+0x40>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008200:	f001 fe14 	bl	8009e2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	3324      	adds	r3, #36	@ 0x24
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fc6d 	bl	8008af4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f7ff ff26 	bl	800806c <prvUnlockQueue>
	}
 8008220:	bf00      	nop
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	@ 0x38
 800822c:	af04      	add	r7, sp, #16
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <xTaskCreateStatic+0x2c>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <xTaskCreateStatic+0x4a>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61fb      	str	r3, [r7, #28]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008272:	23a8      	movs	r3, #168	@ 0xa8
 8008274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2ba8      	cmp	r3, #168	@ 0xa8
 800827a:	d00b      	beq.n	8008294 <xTaskCreateStatic+0x6c>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61bb      	str	r3, [r7, #24]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008294:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <xTaskCreateStatic+0xb2>
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01b      	beq.n	80082da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082b4:	2300      	movs	r3, #0
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	9302      	str	r3, [sp, #8]
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f851 	bl	8008374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082d4:	f000 f8f6 	bl	80084c4 <prvAddNewTaskToReadyList>
 80082d8:	e001      	b.n	80082de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082de:	697b      	ldr	r3, [r7, #20]
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3728      	adds	r7, #40	@ 0x28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	@ 0x30
 80082ec:	af04      	add	r7, sp, #16
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fe85 	bl	800a00c <pvPortMalloc>
 8008302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00e      	beq.n	8008328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800830a:	20a8      	movs	r0, #168	@ 0xa8
 800830c:	f001 fe7e 	bl	800a00c <pvPortMalloc>
 8008310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	631a      	str	r2, [r3, #48]	@ 0x30
 800831e:	e005      	b.n	800832c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008320:	6978      	ldr	r0, [r7, #20]
 8008322:	f001 ff41 	bl	800a1a8 <vPortFree>
 8008326:	e001      	b.n	800832c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	2300      	movs	r3, #0
 800833e:	9303      	str	r3, [sp, #12]
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f80f 	bl	8008374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008356:	69f8      	ldr	r0, [r7, #28]
 8008358:	f000 f8b4 	bl	80084c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800835c:	2301      	movs	r3, #1
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	e002      	b.n	8008368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008368:	69bb      	ldr	r3, [r7, #24]
	}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	461a      	mov	r2, r3
 800838c:	21a5      	movs	r1, #165	@ 0xa5
 800838e:	f002 f82b 	bl	800a3e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800839c:	440b      	add	r3, r1
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	f023 0307 	bic.w	r3, r3, #7
 80083aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	617b      	str	r3, [r7, #20]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01f      	beq.n	8008414 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e012      	b.n	8008400 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	7819      	ldrb	r1, [r3, #0]
 80083e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	4413      	add	r3, r2
 80083e8:	3334      	adds	r3, #52	@ 0x34
 80083ea:	460a      	mov	r2, r1
 80083ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d006      	beq.n	8008408 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	3301      	adds	r3, #1
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d9e9      	bls.n	80083da <prvInitialiseNewTask+0x66>
 8008406:	e000      	b.n	800840a <prvInitialiseNewTask+0x96>
			{
				break;
 8008408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008412:	e003      	b.n	800841c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	2b37      	cmp	r3, #55	@ 0x37
 8008420:	d901      	bls.n	8008426 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008422:	2337      	movs	r3, #55	@ 0x37
 8008424:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800842a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008430:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	2200      	movs	r2, #0
 8008436:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff f965 	bl	800770c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	3318      	adds	r3, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff f960 	bl	800770c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008460:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	2200      	movs	r2, #0
 800846e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	3354      	adds	r3, #84	@ 0x54
 8008476:	224c      	movs	r2, #76	@ 0x4c
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f001 ffb4 	bl	800a3e8 <memset>
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	4a0d      	ldr	r2, [pc, #52]	@ (80084b8 <prvInitialiseNewTask+0x144>)
 8008484:	659a      	str	r2, [r3, #88]	@ 0x58
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	4a0c      	ldr	r2, [pc, #48]	@ (80084bc <prvInitialiseNewTask+0x148>)
 800848a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	4a0c      	ldr	r2, [pc, #48]	@ (80084c0 <prvInitialiseNewTask+0x14c>)
 8008490:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	69b8      	ldr	r0, [r7, #24]
 8008498:	f001 fb62 	bl	8009b60 <pxPortInitialiseStack>
 800849c:	4602      	mov	r2, r0
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ae:	bf00      	nop
 80084b0:	3720      	adds	r7, #32
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	240051e8 	.word	0x240051e8
 80084bc:	24005250 	.word	0x24005250
 80084c0:	240052b8 	.word	0x240052b8

080084c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084cc:	f001 fc7c 	bl	8009dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008588 <prvAddNewTaskToReadyList+0xc4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3301      	adds	r3, #1
 80084d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008588 <prvAddNewTaskToReadyList+0xc4>)
 80084d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084da:	4b2c      	ldr	r3, [pc, #176]	@ (800858c <prvAddNewTaskToReadyList+0xc8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084e2:	4a2a      	ldr	r2, [pc, #168]	@ (800858c <prvAddNewTaskToReadyList+0xc8>)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084e8:	4b27      	ldr	r3, [pc, #156]	@ (8008588 <prvAddNewTaskToReadyList+0xc4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d110      	bne.n	8008512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084f0:	f000 fc2e 	bl	8008d50 <prvInitialiseTaskLists>
 80084f4:	e00d      	b.n	8008512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084f6:	4b26      	ldr	r3, [pc, #152]	@ (8008590 <prvAddNewTaskToReadyList+0xcc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084fe:	4b23      	ldr	r3, [pc, #140]	@ (800858c <prvAddNewTaskToReadyList+0xc8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008508:	429a      	cmp	r2, r3
 800850a:	d802      	bhi.n	8008512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800850c:	4a1f      	ldr	r2, [pc, #124]	@ (800858c <prvAddNewTaskToReadyList+0xc8>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008512:	4b20      	ldr	r3, [pc, #128]	@ (8008594 <prvAddNewTaskToReadyList+0xd0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	4a1e      	ldr	r2, [pc, #120]	@ (8008594 <prvAddNewTaskToReadyList+0xd0>)
 800851a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800851c:	4b1d      	ldr	r3, [pc, #116]	@ (8008594 <prvAddNewTaskToReadyList+0xd0>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008528:	4b1b      	ldr	r3, [pc, #108]	@ (8008598 <prvAddNewTaskToReadyList+0xd4>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d903      	bls.n	8008538 <prvAddNewTaskToReadyList+0x74>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	4a18      	ldr	r2, [pc, #96]	@ (8008598 <prvAddNewTaskToReadyList+0xd4>)
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4a15      	ldr	r2, [pc, #84]	@ (800859c <prvAddNewTaskToReadyList+0xd8>)
 8008546:	441a      	add	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f7ff f8e9 	bl	8007726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008554:	f001 fc6a 	bl	8009e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008558:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <prvAddNewTaskToReadyList+0xcc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00e      	beq.n	800857e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008560:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <prvAddNewTaskToReadyList+0xc8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	429a      	cmp	r2, r3
 800856c:	d207      	bcs.n	800857e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800856e:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <prvAddNewTaskToReadyList+0xdc>)
 8008570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	24001468 	.word	0x24001468
 800858c:	24000f94 	.word	0x24000f94
 8008590:	24001474 	.word	0x24001474
 8008594:	24001484 	.word	0x24001484
 8008598:	24001470 	.word	0x24001470
 800859c:	24000f98 	.word	0x24000f98
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d018      	beq.n	80085e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085b6:	4b14      	ldr	r3, [pc, #80]	@ (8008608 <vTaskDelay+0x64>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <vTaskDelay+0x32>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60bb      	str	r3, [r7, #8]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085d6:	f000 f88b 	bl	80086f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085da:	2100      	movs	r1, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 ff11 	bl	8009404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085e2:	f000 f893 	bl	800870c <xTaskResumeAll>
 80085e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d107      	bne.n	80085fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80085ee:	4b07      	ldr	r3, [pc, #28]	@ (800860c <vTaskDelay+0x68>)
 80085f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	24001490 	.word	0x24001490
 800860c:	e000ed04 	.word	0xe000ed04

08008610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	@ 0x28
 8008614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800861e:	463a      	mov	r2, r7
 8008620:	1d39      	adds	r1, r7, #4
 8008622:	f107 0308 	add.w	r3, r7, #8
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff f81c 	bl	8007664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	9202      	str	r2, [sp, #8]
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2300      	movs	r3, #0
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	460a      	mov	r2, r1
 800863e:	4924      	ldr	r1, [pc, #144]	@ (80086d0 <vTaskStartScheduler+0xc0>)
 8008640:	4824      	ldr	r0, [pc, #144]	@ (80086d4 <vTaskStartScheduler+0xc4>)
 8008642:	f7ff fdf1 	bl	8008228 <xTaskCreateStatic>
 8008646:	4603      	mov	r3, r0
 8008648:	4a23      	ldr	r2, [pc, #140]	@ (80086d8 <vTaskStartScheduler+0xc8>)
 800864a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800864c:	4b22      	ldr	r3, [pc, #136]	@ (80086d8 <vTaskStartScheduler+0xc8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e001      	b.n	800865e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d102      	bne.n	800866a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008664:	f000 ff22 	bl	80094ac <xTimerCreateTimerTask>
 8008668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d11b      	bne.n	80086a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008684:	4b15      	ldr	r3, [pc, #84]	@ (80086dc <vTaskStartScheduler+0xcc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3354      	adds	r3, #84	@ 0x54
 800868a:	4a15      	ldr	r2, [pc, #84]	@ (80086e0 <vTaskStartScheduler+0xd0>)
 800868c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800868e:	4b15      	ldr	r3, [pc, #84]	@ (80086e4 <vTaskStartScheduler+0xd4>)
 8008690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008696:	4b14      	ldr	r3, [pc, #80]	@ (80086e8 <vTaskStartScheduler+0xd8>)
 8008698:	2201      	movs	r2, #1
 800869a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800869c:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <vTaskStartScheduler+0xdc>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086a2:	f001 faed 	bl	8009c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086a6:	e00f      	b.n	80086c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ae:	d10b      	bne.n	80086c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <vTaskStartScheduler+0xb4>
}
 80086c8:	bf00      	nop
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	0800a638 	.word	0x0800a638
 80086d4:	08008d21 	.word	0x08008d21
 80086d8:	2400148c 	.word	0x2400148c
 80086dc:	24000f94 	.word	0x24000f94
 80086e0:	24000014 	.word	0x24000014
 80086e4:	24001488 	.word	0x24001488
 80086e8:	24001474 	.word	0x24001474
 80086ec:	2400146c 	.word	0x2400146c

080086f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086f4:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a03      	ldr	r2, [pc, #12]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086fe:	bf00      	nop
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	24001490 	.word	0x24001490

0800870c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800871a:	4b42      	ldr	r3, [pc, #264]	@ (8008824 <xTaskResumeAll+0x118>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <xTaskResumeAll+0x2e>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	603b      	str	r3, [r7, #0]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800873a:	f001 fb45 	bl	8009dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800873e:	4b39      	ldr	r3, [pc, #228]	@ (8008824 <xTaskResumeAll+0x118>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a37      	ldr	r2, [pc, #220]	@ (8008824 <xTaskResumeAll+0x118>)
 8008746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008748:	4b36      	ldr	r3, [pc, #216]	@ (8008824 <xTaskResumeAll+0x118>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d162      	bne.n	8008816 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008750:	4b35      	ldr	r3, [pc, #212]	@ (8008828 <xTaskResumeAll+0x11c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d05e      	beq.n	8008816 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008758:	e02f      	b.n	80087ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b34      	ldr	r3, [pc, #208]	@ (800882c <xTaskResumeAll+0x120>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3318      	adds	r3, #24
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff f83a 	bl	80077e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f835 	bl	80077e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877a:	4b2d      	ldr	r3, [pc, #180]	@ (8008830 <xTaskResumeAll+0x124>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d903      	bls.n	800878a <xTaskResumeAll+0x7e>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <xTaskResumeAll+0x124>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4a27      	ldr	r2, [pc, #156]	@ (8008834 <xTaskResumeAll+0x128>)
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe ffc0 	bl	8007726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087aa:	4b23      	ldr	r3, [pc, #140]	@ (8008838 <xTaskResumeAll+0x12c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d302      	bcc.n	80087ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087b4:	4b21      	ldr	r3, [pc, #132]	@ (800883c <xTaskResumeAll+0x130>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <xTaskResumeAll+0x120>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1cb      	bne.n	800875a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087c8:	f000 fb66 	bl	8008e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <xTaskResumeAll+0x134>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d010      	beq.n	80087fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087d8:	f000 f846 	bl	8008868 <xTaskIncrementTick>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80087e2:	4b16      	ldr	r3, [pc, #88]	@ (800883c <xTaskResumeAll+0x130>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f1      	bne.n	80087d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80087f4:	4b12      	ldr	r3, [pc, #72]	@ (8008840 <xTaskResumeAll+0x134>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087fa:	4b10      	ldr	r3, [pc, #64]	@ (800883c <xTaskResumeAll+0x130>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <xTaskResumeAll+0x138>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008816:	f001 fb09 	bl	8009e2c <vPortExitCritical>

	return xAlreadyYielded;
 800881a:	68bb      	ldr	r3, [r7, #8]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	24001490 	.word	0x24001490
 8008828:	24001468 	.word	0x24001468
 800882c:	24001428 	.word	0x24001428
 8008830:	24001470 	.word	0x24001470
 8008834:	24000f98 	.word	0x24000f98
 8008838:	24000f94 	.word	0x24000f94
 800883c:	2400147c 	.word	0x2400147c
 8008840:	24001478 	.word	0x24001478
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800884e:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <xTaskGetTickCount+0x1c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008854:	687b      	ldr	r3, [r7, #4]
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2400146c 	.word	0x2400146c

08008868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008872:	4b4f      	ldr	r3, [pc, #316]	@ (80089b0 <xTaskIncrementTick+0x148>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f040 8090 	bne.w	800899c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800887c:	4b4d      	ldr	r3, [pc, #308]	@ (80089b4 <xTaskIncrementTick+0x14c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008884:	4a4b      	ldr	r2, [pc, #300]	@ (80089b4 <xTaskIncrementTick+0x14c>)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d121      	bne.n	80088d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008890:	4b49      	ldr	r3, [pc, #292]	@ (80089b8 <xTaskIncrementTick+0x150>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	603b      	str	r3, [r7, #0]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <xTaskIncrementTick+0x46>
 80088b2:	4b41      	ldr	r3, [pc, #260]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	4b40      	ldr	r3, [pc, #256]	@ (80089bc <xTaskIncrementTick+0x154>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3e      	ldr	r2, [pc, #248]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	4a3e      	ldr	r2, [pc, #248]	@ (80089bc <xTaskIncrementTick+0x154>)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4b3e      	ldr	r3, [pc, #248]	@ (80089c0 <xTaskIncrementTick+0x158>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	4a3c      	ldr	r2, [pc, #240]	@ (80089c0 <xTaskIncrementTick+0x158>)
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	f000 fae2 	bl	8008e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088d4:	4b3b      	ldr	r3, [pc, #236]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d349      	bcc.n	8008972 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088de:	4b36      	ldr	r3, [pc, #216]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e8:	4b36      	ldr	r3, [pc, #216]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088ee:	601a      	str	r2, [r3, #0]
					break;
 80088f0:	e03f      	b.n	8008972 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f2:	4b31      	ldr	r3, [pc, #196]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d203      	bcs.n	8008912 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800890a:	4a2e      	ldr	r2, [pc, #184]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008910:	e02f      	b.n	8008972 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3304      	adds	r3, #4
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ff62 	bl	80077e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3318      	adds	r3, #24
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe ff59 	bl	80077e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008932:	4b25      	ldr	r3, [pc, #148]	@ (80089c8 <xTaskIncrementTick+0x160>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d903      	bls.n	8008942 <xTaskIncrementTick+0xda>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	4a22      	ldr	r2, [pc, #136]	@ (80089c8 <xTaskIncrementTick+0x160>)
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a1f      	ldr	r2, [pc, #124]	@ (80089cc <xTaskIncrementTick+0x164>)
 8008950:	441a      	add	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3304      	adds	r3, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f7fe fee4 	bl	8007726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008962:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <xTaskIncrementTick+0x168>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d3b8      	bcc.n	80088de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008970:	e7b5      	b.n	80088de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008972:	4b17      	ldr	r3, [pc, #92]	@ (80089d0 <xTaskIncrementTick+0x168>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008978:	4914      	ldr	r1, [pc, #80]	@ (80089cc <xTaskIncrementTick+0x164>)
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d901      	bls.n	800898e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800898a:	2301      	movs	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <xTaskIncrementTick+0x16c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e004      	b.n	80089a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800899c:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <xTaskIncrementTick+0x170>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3301      	adds	r3, #1
 80089a2:	4a0d      	ldr	r2, [pc, #52]	@ (80089d8 <xTaskIncrementTick+0x170>)
 80089a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089a6:	697b      	ldr	r3, [r7, #20]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	24001490 	.word	0x24001490
 80089b4:	2400146c 	.word	0x2400146c
 80089b8:	24001420 	.word	0x24001420
 80089bc:	24001424 	.word	0x24001424
 80089c0:	24001480 	.word	0x24001480
 80089c4:	24001488 	.word	0x24001488
 80089c8:	24001470 	.word	0x24001470
 80089cc:	24000f98 	.word	0x24000f98
 80089d0:	24000f94 	.word	0x24000f94
 80089d4:	2400147c 	.word	0x2400147c
 80089d8:	24001478 	.word	0x24001478

080089dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008a90 <vTaskSwitchContext+0xb4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ea:	4b2a      	ldr	r3, [pc, #168]	@ (8008a94 <vTaskSwitchContext+0xb8>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089f0:	e047      	b.n	8008a82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80089f2:	4b28      	ldr	r3, [pc, #160]	@ (8008a94 <vTaskSwitchContext+0xb8>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f8:	4b27      	ldr	r3, [pc, #156]	@ (8008a98 <vTaskSwitchContext+0xbc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e011      	b.n	8008a24 <vTaskSwitchContext+0x48>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <vTaskSwitchContext+0x42>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	607b      	str	r3, [r7, #4]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vTaskSwitchContext+0x3e>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	491d      	ldr	r1, [pc, #116]	@ (8008a9c <vTaskSwitchContext+0xc0>)
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0e3      	beq.n	8008a00 <vTaskSwitchContext+0x24>
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <vTaskSwitchContext+0xc0>)
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d104      	bne.n	8008a68 <vTaskSwitchContext+0x8c>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa0 <vTaskSwitchContext+0xc4>)
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	4a09      	ldr	r2, [pc, #36]	@ (8008a98 <vTaskSwitchContext+0xbc>)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a78:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <vTaskSwitchContext+0xc4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3354      	adds	r3, #84	@ 0x54
 8008a7e:	4a09      	ldr	r2, [pc, #36]	@ (8008aa4 <vTaskSwitchContext+0xc8>)
 8008a80:	6013      	str	r3, [r2, #0]
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	24001490 	.word	0x24001490
 8008a94:	2400147c 	.word	0x2400147c
 8008a98:	24001470 	.word	0x24001470
 8008a9c:	24000f98 	.word	0x24000f98
 8008aa0:	24000f94 	.word	0x24000f94
 8008aa4:	24000014 	.word	0x24000014

08008aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60fb      	str	r3, [r7, #12]
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad0:	4b07      	ldr	r3, [pc, #28]	@ (8008af0 <vTaskPlaceOnEventList+0x48>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fe fe48 	bl	800776e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ade:	2101      	movs	r1, #1
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f000 fc8f 	bl	8009404 <prvAddCurrentTaskToDelayedList>
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	24000f94 	.word	0x24000f94

08008af4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	617b      	str	r3, [r7, #20]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3318      	adds	r3, #24
 8008b24:	4619      	mov	r1, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7fe fdfd 	bl	8007726 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	68b8      	ldr	r0, [r7, #8]
 8008b3c:	f000 fc62 	bl	8009404 <prvAddCurrentTaskToDelayedList>
	}
 8008b40:	bf00      	nop
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	24000f94 	.word	0x24000f94

08008b4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3318      	adds	r3, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fe2e 	bl	80077e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b84:	4b1d      	ldr	r3, [pc, #116]	@ (8008bfc <xTaskRemoveFromEventList+0xb0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d11d      	bne.n	8008bc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fe25 	bl	80077e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9a:	4b19      	ldr	r3, [pc, #100]	@ (8008c00 <xTaskRemoveFromEventList+0xb4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d903      	bls.n	8008baa <xTaskRemoveFromEventList+0x5e>
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba6:	4a16      	ldr	r2, [pc, #88]	@ (8008c00 <xTaskRemoveFromEventList+0xb4>)
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4a13      	ldr	r2, [pc, #76]	@ (8008c04 <xTaskRemoveFromEventList+0xb8>)
 8008bb8:	441a      	add	r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7fe fdb0 	bl	8007726 <vListInsertEnd>
 8008bc6:	e005      	b.n	8008bd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3318      	adds	r3, #24
 8008bcc:	4619      	mov	r1, r3
 8008bce:	480e      	ldr	r0, [pc, #56]	@ (8008c08 <xTaskRemoveFromEventList+0xbc>)
 8008bd0:	f7fe fda9 	bl	8007726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c0c <xTaskRemoveFromEventList+0xc0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d905      	bls.n	8008bee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008be6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <xTaskRemoveFromEventList+0xc4>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e001      	b.n	8008bf2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bf2:	697b      	ldr	r3, [r7, #20]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	24001490 	.word	0x24001490
 8008c00:	24001470 	.word	0x24001470
 8008c04:	24000f98 	.word	0x24000f98
 8008c08:	24001428 	.word	0x24001428
 8008c0c:	24000f94 	.word	0x24000f94
 8008c10:	2400147c 	.word	0x2400147c

08008c14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <vTaskInternalSetTimeOutState+0x24>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c24:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <vTaskInternalSetTimeOutState+0x28>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	605a      	str	r2, [r3, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	24001480 	.word	0x24001480
 8008c3c:	2400146c 	.word	0x2400146c

08008c40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	613b      	str	r3, [r7, #16]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10b      	bne.n	8008c86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60fb      	str	r3, [r7, #12]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008c86:	f001 f89f 	bl	8009dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008d00 <xTaskCheckForTimeOut+0xc0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ca2:	d102      	bne.n	8008caa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	e023      	b.n	8008cf2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4b15      	ldr	r3, [pc, #84]	@ (8008d04 <xTaskCheckForTimeOut+0xc4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d007      	beq.n	8008cc6 <xTaskCheckForTimeOut+0x86>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d302      	bcc.n	8008cc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	e015      	b.n	8008cf2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d20b      	bcs.n	8008ce8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	1ad2      	subs	r2, r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff ff99 	bl	8008c14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e004      	b.n	8008cf2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cf2:	f001 f89b 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3720      	adds	r7, #32
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	2400146c 	.word	0x2400146c
 8008d04:	24001480 	.word	0x24001480

08008d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d0c:	4b03      	ldr	r3, [pc, #12]	@ (8008d1c <vTaskMissedYield+0x14>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
}
 8008d12:	bf00      	nop
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	2400147c 	.word	0x2400147c

08008d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d28:	f000 f852 	bl	8008dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d2c:	4b06      	ldr	r3, [pc, #24]	@ (8008d48 <prvIdleTask+0x28>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d9f9      	bls.n	8008d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d34:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <prvIdleTask+0x2c>)
 8008d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d44:	e7f0      	b.n	8008d28 <prvIdleTask+0x8>
 8008d46:	bf00      	nop
 8008d48:	24000f98 	.word	0x24000f98
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d56:	2300      	movs	r3, #0
 8008d58:	607b      	str	r3, [r7, #4]
 8008d5a:	e00c      	b.n	8008d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4a12      	ldr	r2, [pc, #72]	@ (8008db0 <prvInitialiseTaskLists+0x60>)
 8008d68:	4413      	add	r3, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fcae 	bl	80076cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3301      	adds	r3, #1
 8008d74:	607b      	str	r3, [r7, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b37      	cmp	r3, #55	@ 0x37
 8008d7a:	d9ef      	bls.n	8008d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d7c:	480d      	ldr	r0, [pc, #52]	@ (8008db4 <prvInitialiseTaskLists+0x64>)
 8008d7e:	f7fe fca5 	bl	80076cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d82:	480d      	ldr	r0, [pc, #52]	@ (8008db8 <prvInitialiseTaskLists+0x68>)
 8008d84:	f7fe fca2 	bl	80076cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d88:	480c      	ldr	r0, [pc, #48]	@ (8008dbc <prvInitialiseTaskLists+0x6c>)
 8008d8a:	f7fe fc9f 	bl	80076cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d8e:	480c      	ldr	r0, [pc, #48]	@ (8008dc0 <prvInitialiseTaskLists+0x70>)
 8008d90:	f7fe fc9c 	bl	80076cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d94:	480b      	ldr	r0, [pc, #44]	@ (8008dc4 <prvInitialiseTaskLists+0x74>)
 8008d96:	f7fe fc99 	bl	80076cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <prvInitialiseTaskLists+0x78>)
 8008d9c:	4a05      	ldr	r2, [pc, #20]	@ (8008db4 <prvInitialiseTaskLists+0x64>)
 8008d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008da0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <prvInitialiseTaskLists+0x7c>)
 8008da2:	4a05      	ldr	r2, [pc, #20]	@ (8008db8 <prvInitialiseTaskLists+0x68>)
 8008da4:	601a      	str	r2, [r3, #0]
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	24000f98 	.word	0x24000f98
 8008db4:	240013f8 	.word	0x240013f8
 8008db8:	2400140c 	.word	0x2400140c
 8008dbc:	24001428 	.word	0x24001428
 8008dc0:	2400143c 	.word	0x2400143c
 8008dc4:	24001454 	.word	0x24001454
 8008dc8:	24001420 	.word	0x24001420
 8008dcc:	24001424 	.word	0x24001424

08008dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dd6:	e019      	b.n	8008e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dd8:	f000 fff6 	bl	8009dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ddc:	4b10      	ldr	r3, [pc, #64]	@ (8008e20 <prvCheckTasksWaitingTermination+0x50>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fcf9 	bl	80077e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dee:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <prvCheckTasksWaitingTermination+0x54>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	4a0b      	ldr	r2, [pc, #44]	@ (8008e24 <prvCheckTasksWaitingTermination+0x54>)
 8008df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008df8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e28 <prvCheckTasksWaitingTermination+0x58>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008e28 <prvCheckTasksWaitingTermination+0x58>)
 8008e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e02:	f001 f813 	bl	8009e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f810 	bl	8008e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e0c:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <prvCheckTasksWaitingTermination+0x58>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e1      	bne.n	8008dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	2400143c 	.word	0x2400143c
 8008e24:	24001468 	.word	0x24001468
 8008e28:	24001450 	.word	0x24001450

08008e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3354      	adds	r3, #84	@ 0x54
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fadd 	bl	800a3f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f9ab 	bl	800a1a8 <vPortFree>
				vPortFree( pxTCB );
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f9a8 	bl	800a1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e58:	e019      	b.n	8008e8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d103      	bne.n	8008e6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 f99f 	bl	800a1a8 <vPortFree>
	}
 8008e6a:	e010      	b.n	8008e8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d00b      	beq.n	8008e8e <prvDeleteTCB+0x62>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60fb      	str	r3, [r7, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <prvDeleteTCB+0x5e>
	}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x38>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eb0:	e008      	b.n	8008ec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb2:	4b07      	ldr	r3, [pc, #28]	@ (8008ed0 <prvResetNextTaskUnblockTime+0x38>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	4a04      	ldr	r2, [pc, #16]	@ (8008ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8008ec2:	6013      	str	r3, [r2, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	24001420 	.word	0x24001420
 8008ed4:	24001488 	.word	0x24001488

08008ed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ede:	4b0b      	ldr	r3, [pc, #44]	@ (8008f0c <xTaskGetSchedulerState+0x34>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	607b      	str	r3, [r7, #4]
 8008eea:	e008      	b.n	8008efe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eec:	4b08      	ldr	r3, [pc, #32]	@ (8008f10 <xTaskGetSchedulerState+0x38>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	607b      	str	r3, [r7, #4]
 8008ef8:	e001      	b.n	8008efe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008efa:	2300      	movs	r3, #0
 8008efc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008efe:	687b      	ldr	r3, [r7, #4]
	}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	24001474 	.word	0x24001474
 8008f10:	24001490 	.word	0x24001490

08008f14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d058      	beq.n	8008fdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe8 <xTaskPriorityDisinherit+0xd4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d00b      	beq.n	8008f4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60fb      	str	r3, [r7, #12]
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10b      	bne.n	8008f6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	60bb      	str	r3, [r7, #8]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d02c      	beq.n	8008fdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d128      	bne.n	8008fdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fc26 	bl	80077e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fac:	4b0f      	ldr	r3, [pc, #60]	@ (8008fec <xTaskPriorityDisinherit+0xd8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d903      	bls.n	8008fbc <xTaskPriorityDisinherit+0xa8>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8008fec <xTaskPriorityDisinherit+0xd8>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4a09      	ldr	r2, [pc, #36]	@ (8008ff0 <xTaskPriorityDisinherit+0xdc>)
 8008fca:	441a      	add	r2, r3
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe fba7 	bl	8007726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24000f94 	.word	0x24000f94
 8008fec:	24001470 	.word	0x24001470
 8008ff0:	24000f98 	.word	0x24000f98

08008ff4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009002:	f000 fee1 	bl	8009dc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <xTaskNotifyWait+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d01c      	beq.n	800904e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009014:	4b25      	ldr	r3, [pc, #148]	@ (80090ac <xTaskNotifyWait+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	43d2      	mvns	r2, r2
 8009020:	400a      	ands	r2, r1
 8009022:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009026:	4b21      	ldr	r3, [pc, #132]	@ (80090ac <xTaskNotifyWait+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009036:	2101      	movs	r1, #1
 8009038:	6838      	ldr	r0, [r7, #0]
 800903a:	f000 f9e3 	bl	8009404 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800903e:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <xTaskNotifyWait+0xbc>)
 8009040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800904e:	f000 feed 	bl	8009e2c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009052:	f000 feb9 	bl	8009dc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800905c:	4b13      	ldr	r3, [pc, #76]	@ (80090ac <xTaskNotifyWait+0xb8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009068:	4b10      	ldr	r3, [pc, #64]	@ (80090ac <xTaskNotifyWait+0xb8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d002      	beq.n	800907c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	e00a      	b.n	8009092 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800907c:	4b0b      	ldr	r3, [pc, #44]	@ (80090ac <xTaskNotifyWait+0xb8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	43d2      	mvns	r2, r2
 8009088:	400a      	ands	r2, r1
 800908a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800908e:	2301      	movs	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009092:	4b06      	ldr	r3, [pc, #24]	@ (80090ac <xTaskNotifyWait+0xb8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800909c:	f000 fec6 	bl	8009e2c <vPortExitCritical>

		return xReturn;
 80090a0:	697b      	ldr	r3, [r7, #20]
	}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	24000f94 	.word	0x24000f94
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	@ 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80090c4:	2301      	movs	r3, #1
 80090c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <xTaskGenericNotify+0x32>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61bb      	str	r3, [r7, #24]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80090ea:	f000 fe6d 	bl	8009dc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009104:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	2202      	movs	r2, #2
 800910a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d82e      	bhi.n	8009172 <xTaskGenericNotify+0xbe>
 8009114:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <xTaskGenericNotify+0x68>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009197 	.word	0x08009197
 8009120:	08009131 	.word	0x08009131
 8009124:	08009143 	.word	0x08009143
 8009128:	08009153 	.word	0x08009153
 800912c:	0800915d 	.word	0x0800915d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	431a      	orrs	r2, r3
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009140:	e02c      	b.n	800919c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8009150:	e024      	b.n	800919c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800915a:	e01f      	b.n	800919c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800915c:	7ffb      	ldrb	r3, [r7, #31]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d004      	beq.n	800916c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800916a:	e017      	b.n	800919c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800916c:	2300      	movs	r3, #0
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009170:	e014      	b.n	800919c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800917c:	d00d      	beq.n	800919a <xTaskGenericNotify+0xe6>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	617b      	str	r3, [r7, #20]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xTaskGenericNotify+0xde>
					break;
 8009196:	bf00      	nop
 8009198:	e000      	b.n	800919c <xTaskGenericNotify+0xe8>

					break;
 800919a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800919c:	7ffb      	ldrb	r3, [r7, #31]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d13b      	bne.n	800921a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fb1a 	bl	80077e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <xTaskGenericNotify+0x174>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d903      	bls.n	80091c0 <xTaskGenericNotify+0x10c>
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009228 <xTaskGenericNotify+0x174>)
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4a17      	ldr	r2, [pc, #92]	@ (800922c <xTaskGenericNotify+0x178>)
 80091ce:	441a      	add	r2, r3
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7fe faa5 	bl	8007726 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <xTaskGenericNotify+0x148>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	613b      	str	r3, [r7, #16]
}
 80091f6:	bf00      	nop
 80091f8:	bf00      	nop
 80091fa:	e7fd      	b.n	80091f8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009200:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <xTaskGenericNotify+0x17c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	429a      	cmp	r2, r3
 8009208:	d907      	bls.n	800921a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800920a:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <xTaskGenericNotify+0x180>)
 800920c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800921a:	f000 fe07 	bl	8009e2c <vPortExitCritical>

		return xReturn;
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009220:	4618      	mov	r0, r3
 8009222:	3728      	adds	r7, #40	@ 0x28
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	24001470 	.word	0x24001470
 800922c:	24000f98 	.word	0x24000f98
 8009230:	24000f94 	.word	0x24000f94
 8009234:	e000ed04 	.word	0xe000ed04

08009238 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	@ 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009248:	2301      	movs	r3, #1
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926a:	f000 fe8d 	bl	8009f88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009272:	f3ef 8211 	mrs	r2, BASEPRI
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	623a      	str	r2, [r7, #32]
 8009288:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800928a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80092a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d82e      	bhi.n	8009314 <xTaskGenericNotifyFromISR+0xdc>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <xTaskGenericNotifyFromISR+0x84>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	08009339 	.word	0x08009339
 80092c0:	080092d1 	.word	0x080092d1
 80092c4:	080092e3 	.word	0x080092e3
 80092c8:	080092f3 	.word	0x080092f3
 80092cc:	080092fd 	.word	0x080092fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	431a      	orrs	r2, r3
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80092e0:	e02d      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80092f0:	e025      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80092fa:	e020      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80092fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009300:	2b02      	cmp	r3, #2
 8009302:	d004      	beq.n	800930e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800930c:	e017      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800930e:	2300      	movs	r3, #0
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009312:	e014      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800931e:	d00d      	beq.n	800933c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	61bb      	str	r3, [r7, #24]
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009338:	bf00      	nop
 800933a:	e000      	b.n	800933e <xTaskGenericNotifyFromISR+0x106>
					break;
 800933c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800933e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009342:	2b01      	cmp	r3, #1
 8009344:	d147      	bne.n	80093d6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	617b      	str	r3, [r7, #20]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009366:	4b21      	ldr	r3, [pc, #132]	@ (80093ec <xTaskGenericNotifyFromISR+0x1b4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d11d      	bne.n	80093aa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	3304      	adds	r3, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fa34 	bl	80077e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937c:	4b1c      	ldr	r3, [pc, #112]	@ (80093f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d903      	bls.n	800938c <xTaskGenericNotifyFromISR+0x154>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	4a19      	ldr	r2, [pc, #100]	@ (80093f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4a16      	ldr	r2, [pc, #88]	@ (80093f4 <xTaskGenericNotifyFromISR+0x1bc>)
 800939a:	441a      	add	r2, r3
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	3304      	adds	r3, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f7fe f9bf 	bl	8007726 <vListInsertEnd>
 80093a8:	e005      	b.n	80093b6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	3318      	adds	r3, #24
 80093ae:	4619      	mov	r1, r3
 80093b0:	4811      	ldr	r0, [pc, #68]	@ (80093f8 <xTaskGenericNotifyFromISR+0x1c0>)
 80093b2:	f7fe f9b8 	bl	8007726 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ba:	4b10      	ldr	r3, [pc, #64]	@ (80093fc <xTaskGenericNotifyFromISR+0x1c4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d908      	bls.n	80093d6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80093c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80093ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093cc:	2201      	movs	r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <xTaskGenericNotifyFromISR+0x1c8>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f383 8811 	msr	BASEPRI, r3
}
 80093e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80093e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3738      	adds	r7, #56	@ 0x38
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	24001490 	.word	0x24001490
 80093f0:	24001470 	.word	0x24001470
 80093f4:	24000f98 	.word	0x24000f98
 80093f8:	24001428 	.word	0x24001428
 80093fc:	24000f94 	.word	0x24000f94
 8009400:	2400147c 	.word	0x2400147c

08009404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800940e:	4b21      	ldr	r3, [pc, #132]	@ (8009494 <prvAddCurrentTaskToDelayedList+0x90>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009414:	4b20      	ldr	r3, [pc, #128]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x94>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe f9e0 	bl	80077e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009426:	d10a      	bne.n	800943e <prvAddCurrentTaskToDelayedList+0x3a>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942e:	4b1a      	ldr	r3, [pc, #104]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x94>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4819      	ldr	r0, [pc, #100]	@ (800949c <prvAddCurrentTaskToDelayedList+0x98>)
 8009438:	f7fe f975 	bl	8007726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800943c:	e026      	b.n	800948c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009446:	4b14      	ldr	r3, [pc, #80]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x94>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	429a      	cmp	r2, r3
 8009454:	d209      	bcs.n	800946a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009456:	4b12      	ldr	r3, [pc, #72]	@ (80094a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x94>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7fe f983 	bl	800776e <vListInsert>
}
 8009468:	e010      	b.n	800948c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946a:	4b0e      	ldr	r3, [pc, #56]	@ (80094a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <prvAddCurrentTaskToDelayedList+0x94>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fe f979 	bl	800776e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800947c:	4b0a      	ldr	r3, [pc, #40]	@ (80094a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	d202      	bcs.n	800948c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009486:	4a08      	ldr	r2, [pc, #32]	@ (80094a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6013      	str	r3, [r2, #0]
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2400146c 	.word	0x2400146c
 8009498:	24000f94 	.word	0x24000f94
 800949c:	24001454 	.word	0x24001454
 80094a0:	24001424 	.word	0x24001424
 80094a4:	24001420 	.word	0x24001420
 80094a8:	24001488 	.word	0x24001488

080094ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	@ 0x28
 80094b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094b6:	f000 fb13 	bl	8009ae0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009530 <xTimerCreateTimerTask+0x84>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d021      	beq.n	8009506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	f107 0108 	add.w	r1, r7, #8
 80094d0:	f107 030c 	add.w	r3, r7, #12
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe f8df 	bl	8007698 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	9202      	str	r2, [sp, #8]
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	2302      	movs	r3, #2
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	460a      	mov	r2, r1
 80094ec:	4911      	ldr	r1, [pc, #68]	@ (8009534 <xTimerCreateTimerTask+0x88>)
 80094ee:	4812      	ldr	r0, [pc, #72]	@ (8009538 <xTimerCreateTimerTask+0x8c>)
 80094f0:	f7fe fe9a 	bl	8008228 <xTaskCreateStatic>
 80094f4:	4603      	mov	r3, r0
 80094f6:	4a11      	ldr	r2, [pc, #68]	@ (800953c <xTimerCreateTimerTask+0x90>)
 80094f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094fa:	4b10      	ldr	r3, [pc, #64]	@ (800953c <xTimerCreateTimerTask+0x90>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	613b      	str	r3, [r7, #16]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009524:	697b      	ldr	r3, [r7, #20]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	240014c4 	.word	0x240014c4
 8009534:	0800a640 	.word	0x0800a640
 8009538:	08009679 	.word	0x08009679
 800953c:	240014c8 	.word	0x240014c8

08009540 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800954e:	2300      	movs	r3, #0
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10b      	bne.n	8009570 <xTimerGenericCommand+0x30>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	623b      	str	r3, [r7, #32]
}
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	e7fd      	b.n	800956c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009570:	4b19      	ldr	r3, [pc, #100]	@ (80095d8 <xTimerGenericCommand+0x98>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d02a      	beq.n	80095ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b05      	cmp	r3, #5
 8009588:	dc18      	bgt.n	80095bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800958a:	f7ff fca5 	bl	8008ed8 <xTaskGetSchedulerState>
 800958e:	4603      	mov	r3, r0
 8009590:	2b02      	cmp	r3, #2
 8009592:	d109      	bne.n	80095a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009594:	4b10      	ldr	r3, [pc, #64]	@ (80095d8 <xTimerGenericCommand+0x98>)
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	f107 0110 	add.w	r1, r7, #16
 800959c:	2300      	movs	r3, #0
 800959e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a0:	f7fe fa52 	bl	8007a48 <xQueueGenericSend>
 80095a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80095a6:	e012      	b.n	80095ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095a8:	4b0b      	ldr	r3, [pc, #44]	@ (80095d8 <xTimerGenericCommand+0x98>)
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	f107 0110 	add.w	r1, r7, #16
 80095b0:	2300      	movs	r3, #0
 80095b2:	2200      	movs	r2, #0
 80095b4:	f7fe fa48 	bl	8007a48 <xQueueGenericSend>
 80095b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095ba:	e008      	b.n	80095ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <xTimerGenericCommand+0x98>)
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	f107 0110 	add.w	r1, r7, #16
 80095c4:	2300      	movs	r3, #0
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	f7fe fb40 	bl	8007c4c <xQueueGenericSendFromISR>
 80095cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3728      	adds	r7, #40	@ 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	240014c4 	.word	0x240014c4

080095dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e6:	4b23      	ldr	r3, [pc, #140]	@ (8009674 <prvProcessExpiredTimer+0x98>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe f8f3 	bl	80077e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d023      	beq.n	8009650 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	18d1      	adds	r1, r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	6978      	ldr	r0, [r7, #20]
 8009616:	f000 f8d5 	bl	80097c4 <prvInsertTimerInActiveList>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d020      	beq.n	8009662 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009620:	2300      	movs	r3, #0
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	2100      	movs	r1, #0
 800962a:	6978      	ldr	r0, [r7, #20]
 800962c:	f7ff ff88 	bl	8009540 <xTimerGenericCommand>
 8009630:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d114      	bne.n	8009662 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	60fb      	str	r3, [r7, #12]
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009656:	f023 0301 	bic.w	r3, r3, #1
 800965a:	b2da      	uxtb	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	6978      	ldr	r0, [r7, #20]
 8009668:	4798      	blx	r3
}
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	240014bc 	.word	0x240014bc

08009678 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f859 	bl	800973c <prvGetNextExpireTime>
 800968a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4619      	mov	r1, r3
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f805 	bl	80096a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009696:	f000 f8d7 	bl	8009848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800969a:	bf00      	nop
 800969c:	e7f0      	b.n	8009680 <prvTimerTask+0x8>
	...

080096a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096aa:	f7ff f821 	bl	80086f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ae:	f107 0308 	add.w	r3, r7, #8
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f866 	bl	8009784 <prvSampleTimeNow>
 80096b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d130      	bne.n	8009722 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <prvProcessTimerOrBlockTask+0x3c>
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d806      	bhi.n	80096dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096ce:	f7ff f81d 	bl	800870c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096d2:	68f9      	ldr	r1, [r7, #12]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff ff81 	bl	80095dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096da:	e024      	b.n	8009726 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d008      	beq.n	80096f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096e2:	4b13      	ldr	r3, [pc, #76]	@ (8009730 <prvProcessTimerOrBlockTask+0x90>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <prvProcessTimerOrBlockTask+0x50>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <prvProcessTimerOrBlockTask+0x52>
 80096f0:	2300      	movs	r3, #0
 80096f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <prvProcessTimerOrBlockTask+0x94>)
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4619      	mov	r1, r3
 8009702:	f7fe fd5d 	bl	80081c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009706:	f7ff f801 	bl	800870c <xTaskResumeAll>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009710:	4b09      	ldr	r3, [pc, #36]	@ (8009738 <prvProcessTimerOrBlockTask+0x98>)
 8009712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	f3bf 8f6f 	isb	sy
}
 8009720:	e001      	b.n	8009726 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009722:	f7fe fff3 	bl	800870c <xTaskResumeAll>
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	240014c0 	.word	0x240014c0
 8009734:	240014c4 	.word	0x240014c4
 8009738:	e000ed04 	.word	0xe000ed04

0800973c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009744:	4b0e      	ldr	r3, [pc, #56]	@ (8009780 <prvGetNextExpireTime+0x44>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <prvGetNextExpireTime+0x16>
 800974e:	2201      	movs	r2, #1
 8009750:	e000      	b.n	8009754 <prvGetNextExpireTime+0x18>
 8009752:	2200      	movs	r2, #0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d105      	bne.n	800976c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009760:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <prvGetNextExpireTime+0x44>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	e001      	b.n	8009770 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009770:	68fb      	ldr	r3, [r7, #12]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	240014bc 	.word	0x240014bc

08009784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800978c:	f7ff f85c 	bl	8008848 <xTaskGetTickCount>
 8009790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009792:	4b0b      	ldr	r3, [pc, #44]	@ (80097c0 <prvSampleTimeNow+0x3c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	429a      	cmp	r2, r3
 800979a:	d205      	bcs.n	80097a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800979c:	f000 f93a 	bl	8009a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e002      	b.n	80097ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097ae:	4a04      	ldr	r2, [pc, #16]	@ (80097c0 <prvSampleTimeNow+0x3c>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097b4:	68fb      	ldr	r3, [r7, #12]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	240014cc 	.word	0x240014cc

080097c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d812      	bhi.n	8009810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097f8:	2301      	movs	r3, #1
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	e01b      	b.n	8009836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <prvInsertTimerInActiveList+0x7c>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fd ffb0 	bl	800776e <vListInsert>
 800980e:	e012      	b.n	8009836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d206      	bcs.n	8009826 <prvInsertTimerInActiveList+0x62>
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	e007      	b.n	8009836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009826:	4b07      	ldr	r3, [pc, #28]	@ (8009844 <prvInsertTimerInActiveList+0x80>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3304      	adds	r3, #4
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7fd ff9c 	bl	800776e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009836:	697b      	ldr	r3, [r7, #20]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	240014c0 	.word	0x240014c0
 8009844:	240014bc 	.word	0x240014bc

08009848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	@ 0x38
 800984c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800984e:	e0ce      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	da19      	bge.n	800988a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	3304      	adds	r3, #4
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61fb      	str	r3, [r7, #28]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800987a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009880:	6850      	ldr	r0, [r2, #4]
 8009882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009884:	6892      	ldr	r2, [r2, #8]
 8009886:	4611      	mov	r1, r2
 8009888:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f2c0 80ae 	blt.w	80099ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	3304      	adds	r3, #4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd ff9c 	bl	80077e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098a8:	463b      	mov	r3, r7
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff ff6a 	bl	8009784 <prvSampleTimeNow>
 80098b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	f200 8097 	bhi.w	80099e8 <prvProcessReceivedCommands+0x1a0>
 80098ba:	a201      	add	r2, pc, #4	@ (adr r2, 80098c0 <prvProcessReceivedCommands+0x78>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098e9 	.word	0x080098e9
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	0800995f 	.word	0x0800995f
 80098d0:	08009973 	.word	0x08009973
 80098d4:	080099bf 	.word	0x080099bf
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	080098e9 	.word	0x080098e9
 80098e0:	0800995f 	.word	0x0800995f
 80098e4:	08009973 	.word	0x08009973
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	18d1      	adds	r1, r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009908:	f7ff ff5c 	bl	80097c4 <prvInsertTimerInActiveList>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d06c      	beq.n	80099ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009918:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	d061      	beq.n	80099ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	441a      	add	r2, r3
 8009930:	2300      	movs	r3, #0
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	2100      	movs	r1, #0
 8009938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800993a:	f7ff fe01 	bl	8009540 <xTimerGenericCommand>
 800993e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d152      	bne.n	80099ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	61bb      	str	r3, [r7, #24]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	b2da      	uxtb	r2, r3
 800996a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009970:	e03d      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009978:	f043 0301 	orr.w	r3, r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	617b      	str	r3, [r7, #20]
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	e7fd      	b.n	80099a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	18d1      	adds	r1, r2, r3
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b8:	f7ff ff04 	bl	80097c4 <prvInsertTimerInActiveList>
					break;
 80099bc:	e017      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80099cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099ce:	f000 fbeb 	bl	800a1a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099d2:	e00c      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099e6:	e002      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80099e8:	bf00      	nop
 80099ea:	e000      	b.n	80099ee <prvProcessReceivedCommands+0x1a6>
					break;
 80099ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ee:	4b08      	ldr	r3, [pc, #32]	@ (8009a10 <prvProcessReceivedCommands+0x1c8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	1d39      	adds	r1, r7, #4
 80099f4:	2200      	movs	r2, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe f9c6 	bl	8007d88 <xQueueReceive>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f47f af26 	bne.w	8009850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	3730      	adds	r7, #48	@ 0x30
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	240014c4 	.word	0x240014c4

08009a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1a:	e049      	b.n	8009ab0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b2c      	ldr	r3, [pc, #176]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fd fed3 	bl	80077e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02f      	beq.n	8009ab0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4413      	add	r3, r2
 8009a58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d90e      	bls.n	8009a80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7fd fe78 	bl	800776e <vListInsert>
 8009a7e:	e017      	b.n	8009ab0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a80:	2300      	movs	r3, #0
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	2300      	movs	r3, #0
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fd58 	bl	8009540 <xTimerGenericCommand>
 8009a90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	603b      	str	r3, [r7, #0]
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	e7fd      	b.n	8009aac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ab0:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1b0      	bne.n	8009a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009aba:	4b07      	ldr	r3, [pc, #28]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ac0:	4b06      	ldr	r3, [pc, #24]	@ (8009adc <prvSwitchTimerLists+0xc8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a04      	ldr	r2, [pc, #16]	@ (8009ad8 <prvSwitchTimerLists+0xc4>)
 8009ac6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ac8:	4a04      	ldr	r2, [pc, #16]	@ (8009adc <prvSwitchTimerLists+0xc8>)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6013      	str	r3, [r2, #0]
}
 8009ace:	bf00      	nop
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	240014bc 	.word	0x240014bc
 8009adc:	240014c0 	.word	0x240014c0

08009ae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ae6:	f000 f96f 	bl	8009dc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aea:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d120      	bne.n	8009b34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009af2:	4814      	ldr	r0, [pc, #80]	@ (8009b44 <prvCheckForValidListAndQueue+0x64>)
 8009af4:	f7fd fdea 	bl	80076cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009af8:	4813      	ldr	r0, [pc, #76]	@ (8009b48 <prvCheckForValidListAndQueue+0x68>)
 8009afa:	f7fd fde7 	bl	80076cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009afe:	4b13      	ldr	r3, [pc, #76]	@ (8009b4c <prvCheckForValidListAndQueue+0x6c>)
 8009b00:	4a10      	ldr	r2, [pc, #64]	@ (8009b44 <prvCheckForValidListAndQueue+0x64>)
 8009b02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b04:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <prvCheckForValidListAndQueue+0x70>)
 8009b06:	4a10      	ldr	r2, [pc, #64]	@ (8009b48 <prvCheckForValidListAndQueue+0x68>)
 8009b08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4b11      	ldr	r3, [pc, #68]	@ (8009b54 <prvCheckForValidListAndQueue+0x74>)
 8009b10:	4a11      	ldr	r2, [pc, #68]	@ (8009b58 <prvCheckForValidListAndQueue+0x78>)
 8009b12:	2110      	movs	r1, #16
 8009b14:	200a      	movs	r0, #10
 8009b16:	f7fd fef7 	bl	8007908 <xQueueGenericCreateStatic>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4a08      	ldr	r2, [pc, #32]	@ (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b20:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b28:	4b05      	ldr	r3, [pc, #20]	@ (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	490b      	ldr	r1, [pc, #44]	@ (8009b5c <prvCheckForValidListAndQueue+0x7c>)
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fb1c 	bl	800816c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b34:	f000 f97a 	bl	8009e2c <vPortExitCritical>
}
 8009b38:	bf00      	nop
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	240014c4 	.word	0x240014c4
 8009b44:	24001494 	.word	0x24001494
 8009b48:	240014a8 	.word	0x240014a8
 8009b4c:	240014bc 	.word	0x240014bc
 8009b50:	240014c0 	.word	0x240014c0
 8009b54:	24001570 	.word	0x24001570
 8009b58:	240014d0 	.word	0x240014d0
 8009b5c:	0800a648 	.word	0x0800a648

08009b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b04      	subs	r3, #4
 8009b70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3b04      	subs	r3, #4
 8009b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0201 	bic.w	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b90:	4a0c      	ldr	r2, [pc, #48]	@ (8009bc4 <pxPortInitialiseStack+0x64>)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3b14      	subs	r3, #20
 8009b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f06f 0202 	mvn.w	r2, #2
 8009bae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3b20      	subs	r3, #32
 8009bb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	08009bc9 	.word	0x08009bc9

08009bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bd2:	4b13      	ldr	r3, [pc, #76]	@ (8009c20 <prvTaskExitError+0x58>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bda:	d00b      	beq.n	8009bf4 <prvTaskExitError+0x2c>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	e7fd      	b.n	8009bf0 <prvTaskExitError+0x28>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	60bb      	str	r3, [r7, #8]
}
 8009c06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c08:	bf00      	nop
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0fc      	beq.n	8009c0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	24000010 	.word	0x24000010
	...

08009c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c30:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <pxCurrentTCBConst2>)
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f380 8809 	msr	PSP, r0
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	4770      	bx	lr
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst2>:
 8009c50:	24000f94 	.word	0x24000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c58:	4808      	ldr	r0, [pc, #32]	@ (8009c7c <prvPortStartFirstTask+0x24>)
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f380 8808 	msr	MSP, r0
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8814 	msr	CONTROL, r0
 8009c6a:	b662      	cpsie	i
 8009c6c:	b661      	cpsie	f
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	df00      	svc	0
 8009c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed08 	.word	0xe000ed08

08009c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c86:	4b47      	ldr	r3, [pc, #284]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a47      	ldr	r2, [pc, #284]	@ (8009da8 <xPortStartScheduler+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10b      	bne.n	8009ca8 <xPortStartScheduler+0x28>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a3f      	ldr	r2, [pc, #252]	@ (8009dac <xPortStartScheduler+0x12c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10b      	bne.n	8009cca <xPortStartScheduler+0x4a>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	60fb      	str	r3, [r7, #12]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cca:	4b39      	ldr	r3, [pc, #228]	@ (8009db0 <xPortStartScheduler+0x130>)
 8009ccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	22ff      	movs	r2, #255	@ 0xff
 8009cda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	4b31      	ldr	r3, [pc, #196]	@ (8009db4 <xPortStartScheduler+0x134>)
 8009cf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cf2:	4b31      	ldr	r3, [pc, #196]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cf4:	2207      	movs	r2, #7
 8009cf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf8:	e009      	b.n	8009d0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	4a2d      	ldr	r2, [pc, #180]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d0e:	78fb      	ldrb	r3, [r7, #3]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d0ef      	beq.n	8009cfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d1a:	4b27      	ldr	r3, [pc, #156]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f1c3 0307 	rsb	r3, r3, #7
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d00b      	beq.n	8009d3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	4a1c      	ldr	r2, [pc, #112]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d48:	4b1b      	ldr	r3, [pc, #108]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d50:	4a19      	ldr	r2, [pc, #100]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d5c:	4b17      	ldr	r3, [pc, #92]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a16      	ldr	r2, [pc, #88]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d68:	4b14      	ldr	r3, [pc, #80]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a13      	ldr	r2, [pc, #76]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d74:	f000 f8da 	bl	8009f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d78:	4b11      	ldr	r3, [pc, #68]	@ (8009dc0 <xPortStartScheduler+0x140>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d7e:	f000 f8f9 	bl	8009f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d82:	4b10      	ldr	r3, [pc, #64]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a0f      	ldr	r2, [pc, #60]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d8e:	f7ff ff63 	bl	8009c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d92:	f7fe fe23 	bl	80089dc <vTaskSwitchContext>
	prvTaskExitError();
 8009d96:	f7ff ff17 	bl	8009bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed00 	.word	0xe000ed00
 8009da8:	410fc271 	.word	0x410fc271
 8009dac:	410fc270 	.word	0x410fc270
 8009db0:	e000e400 	.word	0xe000e400
 8009db4:	240015c0 	.word	0x240015c0
 8009db8:	240015c4 	.word	0x240015c4
 8009dbc:	e000ed20 	.word	0xe000ed20
 8009dc0:	24000010 	.word	0x24000010
 8009dc4:	e000ef34 	.word	0xe000ef34

08009dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dec:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d110      	bne.n	8009e16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009df4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e28 <vPortEnterCritical+0x60>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	603b      	str	r3, [r7, #0]
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	e7fd      	b.n	8009e12 <vPortEnterCritical+0x4a>
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	24000010 	.word	0x24000010
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e32:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <vPortExitCritical+0x26>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e52:	4b0a      	ldr	r3, [pc, #40]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <vPortExitCritical+0x44>
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f383 8811 	msr	BASEPRI, r3
}
 8009e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	24000010 	.word	0x24000010

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b15      	ldr	r3, [pc, #84]	@ (8009ee0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f01e 0f10 	tst.w	lr, #16
 8009e90:	bf08      	it	eq
 8009e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ea4:	f380 8811 	msr	BASEPRI, r0
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f7fe fd94 	bl	80089dc <vTaskSwitchContext>
 8009eb4:	f04f 0000 	mov.w	r0, #0
 8009eb8:	f380 8811 	msr	BASEPRI, r0
 8009ebc:	bc09      	pop	{r0, r3}
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f01e 0f10 	tst.w	lr, #16
 8009eca:	bf08      	it	eq
 8009ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ed0:	f380 8809 	msr	PSP, r0
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst>:
 8009ee0:	24000f94 	.word	0x24000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f02:	f7fe fcb1 	bl	8008868 <xTaskIncrementTick>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <xPortSysTickHandler+0x40>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <vPortSetupTimerInterrupt+0x38>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <vPortSetupTimerInterrupt+0x3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	@ (8009f6c <vPortSetupTimerInterrupt+0x40>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <vPortSetupTimerInterrupt+0x44>)
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010
 8009f64:	e000e018 	.word	0xe000e018
 8009f68:	24000000 	.word	0x24000000
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f84 <vPortEnableVFP+0x10>
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f7e:	6001      	str	r1, [r0, #0]
 8009f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e000ed88 	.word	0xe000ed88

08009f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d915      	bls.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f9a:	4a18      	ldr	r2, [pc, #96]	@ (8009ffc <vPortValidateInterruptPriority+0x74>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fa4:	4b16      	ldr	r3, [pc, #88]	@ (800a000 <vPortValidateInterruptPriority+0x78>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20b      	bcs.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	@ (800a004 <vPortValidateInterruptPriority+0x7c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <vPortValidateInterruptPriority+0x80>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d90b      	bls.n	8009fee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	603b      	str	r3, [r7, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortValidateInterruptPriority+0x62>
	}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	e000e3f0 	.word	0xe000e3f0
 800a000:	240015c0 	.word	0x240015c0
 800a004:	e000ed0c 	.word	0xe000ed0c
 800a008:	240015c4 	.word	0x240015c4

0800a00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	@ 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a018:	f7fe fb6a 	bl	80086f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <pvPortMalloc+0x184>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a024:	f000 f924 	bl	800a270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a028:	4b5a      	ldr	r3, [pc, #360]	@ (800a194 <pvPortMalloc+0x188>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 8095 	bne.w	800a160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01e      	beq.n	800a07a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a03c:	2208      	movs	r2, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4413      	add	r3, r2
 800a042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d015      	beq.n	800a07a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <pvPortMalloc+0x6e>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	617b      	str	r3, [r7, #20]
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d06f      	beq.n	800a160 <pvPortMalloc+0x154>
 800a080:	4b45      	ldr	r3, [pc, #276]	@ (800a198 <pvPortMalloc+0x18c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d86a      	bhi.n	800a160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a08a:	4b44      	ldr	r3, [pc, #272]	@ (800a19c <pvPortMalloc+0x190>)
 800a08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a08e:	4b43      	ldr	r3, [pc, #268]	@ (800a19c <pvPortMalloc+0x190>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a094:	e004      	b.n	800a0a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d903      	bls.n	800a0b2 <pvPortMalloc+0xa6>
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f1      	bne.n	800a096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0b2:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <pvPortMalloc+0x184>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d051      	beq.n	800a160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	4413      	add	r3, r2
 800a0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d920      	bls.n	800a120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <pvPortMalloc+0xfc>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a11a:	69b8      	ldr	r0, [r7, #24]
 800a11c:	f000 f90a 	bl	800a334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <pvPortMalloc+0x18c>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	4a1b      	ldr	r2, [pc, #108]	@ (800a198 <pvPortMalloc+0x18c>)
 800a12c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <pvPortMalloc+0x18c>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d203      	bcs.n	800a142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a13a:	4b17      	ldr	r3, [pc, #92]	@ (800a198 <pvPortMalloc+0x18c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <pvPortMalloc+0x188>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a156:	4b13      	ldr	r3, [pc, #76]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a15e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a160:	f7fe fad4 	bl	800870c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <pvPortMalloc+0x17a>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <pvPortMalloc+0x176>
	return pvReturn;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3728      	adds	r7, #40	@ 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	240051d0 	.word	0x240051d0
 800a194:	240051e4 	.word	0x240051e4
 800a198:	240051d4 	.word	0x240051d4
 800a19c:	240051c8 	.word	0x240051c8
 800a1a0:	240051d8 	.word	0x240051d8
 800a1a4:	240051dc 	.word	0x240051dc

0800a1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d04f      	beq.n	800a25a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	425b      	negs	r3, r3
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b25      	ldr	r3, [pc, #148]	@ (800a264 <vPortFree+0xbc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <vPortFree+0x46>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60fb      	str	r3, [r7, #12]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <vPortFree+0x66>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60bb      	str	r3, [r7, #8]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <vPortFree+0xbc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01e      	beq.n	800a25a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d11a      	bne.n	800a25a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <vPortFree+0xbc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	43db      	mvns	r3, r3
 800a22e:	401a      	ands	r2, r3
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a234:	f7fe fa5c 	bl	80086f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <vPortFree+0xc0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4413      	add	r3, r2
 800a242:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <vPortFree+0xc0>)
 800a244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f000 f874 	bl	800a334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <vPortFree+0xc4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3301      	adds	r3, #1
 800a252:	4a06      	ldr	r2, [pc, #24]	@ (800a26c <vPortFree+0xc4>)
 800a254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a256:	f7fe fa59 	bl	800870c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a25a:	bf00      	nop
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	240051e4 	.word	0x240051e4
 800a268:	240051d4 	.word	0x240051d4
 800a26c:	240051e0 	.word	0x240051e0

0800a270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a276:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a27c:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <prvHeapInit+0xac>)
 800a27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3307      	adds	r3, #7
 800a28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0307 	bic.w	r3, r3, #7
 800a296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	4a1f      	ldr	r2, [pc, #124]	@ (800a31c <prvHeapInit+0xac>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a320 <prvHeapInit+0xb0>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a320 <prvHeapInit+0xb0>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2bc:	2208      	movs	r2, #8
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2d2:	4b14      	ldr	r3, [pc, #80]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2da:	4b12      	ldr	r3, [pc, #72]	@ (800a324 <prvHeapInit+0xb4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <prvHeapInit+0xb4>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a328 <prvHeapInit+0xb8>)
 800a2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	4a09      	ldr	r2, [pc, #36]	@ (800a32c <prvHeapInit+0xbc>)
 800a306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a308:	4b09      	ldr	r3, [pc, #36]	@ (800a330 <prvHeapInit+0xc0>)
 800a30a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a30e:	601a      	str	r2, [r3, #0]
}
 800a310:	bf00      	nop
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	240015c8 	.word	0x240015c8
 800a320:	240051c8 	.word	0x240051c8
 800a324:	240051d0 	.word	0x240051d0
 800a328:	240051d8 	.word	0x240051d8
 800a32c:	240051d4 	.word	0x240051d4
 800a330:	240051e4 	.word	0x240051e4

0800a334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a33c:	4b28      	ldr	r3, [pc, #160]	@ (800a3e0 <prvInsertBlockIntoFreeList+0xac>)
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e002      	b.n	800a348 <prvInsertBlockIntoFreeList+0x14>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d8f7      	bhi.n	800a342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d108      	bne.n	800a376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	441a      	add	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d118      	bne.n	800a3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d00d      	beq.n	800a3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e008      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e003      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d002      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	240051c8 	.word	0x240051c8
 800a3e4:	240051d0 	.word	0x240051d0

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <_reclaim_reent>:
 800a3f8:	4b29      	ldr	r3, [pc, #164]	@ (800a4a0 <_reclaim_reent+0xa8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	b570      	push	{r4, r5, r6, lr}
 800a400:	4604      	mov	r4, r0
 800a402:	d04b      	beq.n	800a49c <_reclaim_reent+0xa4>
 800a404:	69c3      	ldr	r3, [r0, #28]
 800a406:	b1ab      	cbz	r3, 800a434 <_reclaim_reent+0x3c>
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	b16b      	cbz	r3, 800a428 <_reclaim_reent+0x30>
 800a40c:	2500      	movs	r5, #0
 800a40e:	69e3      	ldr	r3, [r4, #28]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	5959      	ldr	r1, [r3, r5]
 800a414:	2900      	cmp	r1, #0
 800a416:	d13b      	bne.n	800a490 <_reclaim_reent+0x98>
 800a418:	3504      	adds	r5, #4
 800a41a:	2d80      	cmp	r5, #128	@ 0x80
 800a41c:	d1f7      	bne.n	800a40e <_reclaim_reent+0x16>
 800a41e:	69e3      	ldr	r3, [r4, #28]
 800a420:	4620      	mov	r0, r4
 800a422:	68d9      	ldr	r1, [r3, #12]
 800a424:	f000 f872 	bl	800a50c <_free_r>
 800a428:	69e3      	ldr	r3, [r4, #28]
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	b111      	cbz	r1, 800a434 <_reclaim_reent+0x3c>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f86c 	bl	800a50c <_free_r>
 800a434:	6961      	ldr	r1, [r4, #20]
 800a436:	b111      	cbz	r1, 800a43e <_reclaim_reent+0x46>
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 f867 	bl	800a50c <_free_r>
 800a43e:	69e1      	ldr	r1, [r4, #28]
 800a440:	b111      	cbz	r1, 800a448 <_reclaim_reent+0x50>
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f862 	bl	800a50c <_free_r>
 800a448:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a44a:	b111      	cbz	r1, 800a452 <_reclaim_reent+0x5a>
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 f85d 	bl	800a50c <_free_r>
 800a452:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a454:	b111      	cbz	r1, 800a45c <_reclaim_reent+0x64>
 800a456:	4620      	mov	r0, r4
 800a458:	f000 f858 	bl	800a50c <_free_r>
 800a45c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a45e:	b111      	cbz	r1, 800a466 <_reclaim_reent+0x6e>
 800a460:	4620      	mov	r0, r4
 800a462:	f000 f853 	bl	800a50c <_free_r>
 800a466:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a468:	b111      	cbz	r1, 800a470 <_reclaim_reent+0x78>
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 f84e 	bl	800a50c <_free_r>
 800a470:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a472:	b111      	cbz	r1, 800a47a <_reclaim_reent+0x82>
 800a474:	4620      	mov	r0, r4
 800a476:	f000 f849 	bl	800a50c <_free_r>
 800a47a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a47c:	b111      	cbz	r1, 800a484 <_reclaim_reent+0x8c>
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f844 	bl	800a50c <_free_r>
 800a484:	6a23      	ldr	r3, [r4, #32]
 800a486:	b14b      	cbz	r3, 800a49c <_reclaim_reent+0xa4>
 800a488:	4620      	mov	r0, r4
 800a48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a48e:	4718      	bx	r3
 800a490:	680e      	ldr	r6, [r1, #0]
 800a492:	4620      	mov	r0, r4
 800a494:	f000 f83a 	bl	800a50c <_free_r>
 800a498:	4631      	mov	r1, r6
 800a49a:	e7bb      	b.n	800a414 <_reclaim_reent+0x1c>
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
 800a49e:	bf00      	nop
 800a4a0:	24000014 	.word	0x24000014

0800a4a4 <__libc_init_array>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a4dc <__libc_init_array+0x38>)
 800a4a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a4e0 <__libc_init_array+0x3c>)
 800a4aa:	1b64      	subs	r4, r4, r5
 800a4ac:	10a4      	asrs	r4, r4, #2
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	42a6      	cmp	r6, r4
 800a4b2:	d109      	bne.n	800a4c8 <__libc_init_array+0x24>
 800a4b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a4e4 <__libc_init_array+0x40>)
 800a4b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a4e8 <__libc_init_array+0x44>)
 800a4b8:	f000 f87e 	bl	800a5b8 <_init>
 800a4bc:	1b64      	subs	r4, r4, r5
 800a4be:	10a4      	asrs	r4, r4, #2
 800a4c0:	2600      	movs	r6, #0
 800a4c2:	42a6      	cmp	r6, r4
 800a4c4:	d105      	bne.n	800a4d2 <__libc_init_array+0x2e>
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4cc:	4798      	blx	r3
 800a4ce:	3601      	adds	r6, #1
 800a4d0:	e7ee      	b.n	800a4b0 <__libc_init_array+0xc>
 800a4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d6:	4798      	blx	r3
 800a4d8:	3601      	adds	r6, #1
 800a4da:	e7f2      	b.n	800a4c2 <__libc_init_array+0x1e>
 800a4dc:	0800a6d8 	.word	0x0800a6d8
 800a4e0:	0800a6d8 	.word	0x0800a6d8
 800a4e4:	0800a6d8 	.word	0x0800a6d8
 800a4e8:	0800a6dc 	.word	0x0800a6dc

0800a4ec <__retarget_lock_acquire_recursive>:
 800a4ec:	4770      	bx	lr

0800a4ee <__retarget_lock_release_recursive>:
 800a4ee:	4770      	bx	lr

0800a4f0 <memcpy>:
 800a4f0:	440a      	add	r2, r1
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a4f8:	d100      	bne.n	800a4fc <memcpy+0xc>
 800a4fa:	4770      	bx	lr
 800a4fc:	b510      	push	{r4, lr}
 800a4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a502:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a506:	4291      	cmp	r1, r2
 800a508:	d1f9      	bne.n	800a4fe <memcpy+0xe>
 800a50a:	bd10      	pop	{r4, pc}

0800a50c <_free_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4605      	mov	r5, r0
 800a510:	2900      	cmp	r1, #0
 800a512:	d041      	beq.n	800a598 <_free_r+0x8c>
 800a514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a518:	1f0c      	subs	r4, r1, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bfb8      	it	lt
 800a51e:	18e4      	addlt	r4, r4, r3
 800a520:	f000 f83e 	bl	800a5a0 <__malloc_lock>
 800a524:	4a1d      	ldr	r2, [pc, #116]	@ (800a59c <_free_r+0x90>)
 800a526:	6813      	ldr	r3, [r2, #0]
 800a528:	b933      	cbnz	r3, 800a538 <_free_r+0x2c>
 800a52a:	6063      	str	r3, [r4, #4]
 800a52c:	6014      	str	r4, [r2, #0]
 800a52e:	4628      	mov	r0, r5
 800a530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a534:	f000 b83a 	b.w	800a5ac <__malloc_unlock>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d908      	bls.n	800a54e <_free_r+0x42>
 800a53c:	6820      	ldr	r0, [r4, #0]
 800a53e:	1821      	adds	r1, r4, r0
 800a540:	428b      	cmp	r3, r1
 800a542:	bf01      	itttt	eq
 800a544:	6819      	ldreq	r1, [r3, #0]
 800a546:	685b      	ldreq	r3, [r3, #4]
 800a548:	1809      	addeq	r1, r1, r0
 800a54a:	6021      	streq	r1, [r4, #0]
 800a54c:	e7ed      	b.n	800a52a <_free_r+0x1e>
 800a54e:	461a      	mov	r2, r3
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	b10b      	cbz	r3, 800a558 <_free_r+0x4c>
 800a554:	42a3      	cmp	r3, r4
 800a556:	d9fa      	bls.n	800a54e <_free_r+0x42>
 800a558:	6811      	ldr	r1, [r2, #0]
 800a55a:	1850      	adds	r0, r2, r1
 800a55c:	42a0      	cmp	r0, r4
 800a55e:	d10b      	bne.n	800a578 <_free_r+0x6c>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	4401      	add	r1, r0
 800a564:	1850      	adds	r0, r2, r1
 800a566:	4283      	cmp	r3, r0
 800a568:	6011      	str	r1, [r2, #0]
 800a56a:	d1e0      	bne.n	800a52e <_free_r+0x22>
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	6053      	str	r3, [r2, #4]
 800a572:	4408      	add	r0, r1
 800a574:	6010      	str	r0, [r2, #0]
 800a576:	e7da      	b.n	800a52e <_free_r+0x22>
 800a578:	d902      	bls.n	800a580 <_free_r+0x74>
 800a57a:	230c      	movs	r3, #12
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	e7d6      	b.n	800a52e <_free_r+0x22>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	1821      	adds	r1, r4, r0
 800a584:	428b      	cmp	r3, r1
 800a586:	bf04      	itt	eq
 800a588:	6819      	ldreq	r1, [r3, #0]
 800a58a:	685b      	ldreq	r3, [r3, #4]
 800a58c:	6063      	str	r3, [r4, #4]
 800a58e:	bf04      	itt	eq
 800a590:	1809      	addeq	r1, r1, r0
 800a592:	6021      	streq	r1, [r4, #0]
 800a594:	6054      	str	r4, [r2, #4]
 800a596:	e7ca      	b.n	800a52e <_free_r+0x22>
 800a598:	bd38      	pop	{r3, r4, r5, pc}
 800a59a:	bf00      	nop
 800a59c:	24005324 	.word	0x24005324

0800a5a0 <__malloc_lock>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	@ (800a5a8 <__malloc_lock+0x8>)
 800a5a2:	f7ff bfa3 	b.w	800a4ec <__retarget_lock_acquire_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	24005320 	.word	0x24005320

0800a5ac <__malloc_unlock>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	@ (800a5b4 <__malloc_unlock+0x8>)
 800a5ae:	f7ff bf9e 	b.w	800a4ee <__retarget_lock_release_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	24005320 	.word	0x24005320

0800a5b8 <_init>:
 800a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ba:	bf00      	nop
 800a5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5be:	bc08      	pop	{r3}
 800a5c0:	469e      	mov	lr, r3
 800a5c2:	4770      	bx	lr

0800a5c4 <_fini>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr
