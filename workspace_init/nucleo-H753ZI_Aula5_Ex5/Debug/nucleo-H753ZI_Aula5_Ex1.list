
nucleo-H753ZI_Aula5_Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a080  0800a080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a178  0800a178  0000b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a17c  0800a17c  0000b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a180  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a1e4  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a244  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  24000124  0800a2a4  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005328  0800a2a4  0000c328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ba7  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ffc  00000000  00000000  00035cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0003acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001722  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c779  00000000  00000000  0003e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b9d  00000000  00000000  0007a96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177695  00000000  00000000  000a0508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00217b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  00217be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0021fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a068 	.word	0x0800a068

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a068 	.word	0x0800a068

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ETH_Init+0x80>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <MX_ETH_Init+0x84>)
 80005d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_ETH_Init+0x88>)
 80005e8:	22e1      	movs	r2, #225	@ 0xe1
 80005ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ETH_Init+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ETH_Init+0x80>)
 8000600:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_ETH_Init+0x88>)
 8000602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_ETH_Init+0x80>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ETH_Init+0x80>)
 800060c:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_ETH_Init+0x8c>)
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ETH_Init+0x80>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_ETH_Init+0x90>)
 8000614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_ETH_Init+0x80>)
 8000618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800061e:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ETH_Init+0x80>)
 8000620:	f001 f8e4 	bl	80017ec <HAL_ETH_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fc93 	bl	8000f54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_ETH_Init+0x94>)
 8000634:	f009 fc30 	bl	8009e98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_ETH_Init+0x94>)
 800063a:	2221      	movs	r2, #33	@ 0x21
 800063c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_ETH_Init+0x94>)
 8000640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_ETH_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000178 	.word	0x24000178
 8000654:	40028000 	.word	0x40028000
 8000658:	24000228 	.word	0x24000228
 800065c:	240000c4 	.word	0x240000c4
 8000660:	24000064 	.word	0x24000064
 8000664:	24000140 	.word	0x24000140

08000668 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <HAL_ETH_MspInit+0x184>)
 8000686:	4293      	cmp	r3, r2
 8000688:	f040 80ab 	bne.w	80007e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800068c:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800068e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000692:	4a57      	ldr	r2, [pc, #348]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800069c:	4b54      	ldr	r3, [pc, #336]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800069e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006c8:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ce:	4a48      	ldr	r2, [pc, #288]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d8:	4b45      	ldr	r3, [pc, #276]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_ETH_MspInit+0x188>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2332      	movs	r3, #50	@ 0x32
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076e:	230b      	movs	r3, #11
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <HAL_ETH_MspInit+0x18c>)
 800077a:	f001 fc6b 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800077e:	2386      	movs	r3, #134	@ 0x86
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <HAL_ETH_MspInit+0x190>)
 800079a:	f001 fc5b 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <HAL_ETH_MspInit+0x194>)
 80007bc:	f001 fc4a 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <HAL_ETH_MspInit+0x198>)
 80007de:	f001 fc39 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40028000 	.word	0x40028000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020800 	.word	0x58020800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021800 	.word	0x58021800

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000808:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_FREERTOS_Init+0x28>)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_FREERTOS_Init+0x2c>)
 800080e:	f006 fddf 	bl	80073d0 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <MX_FREERTOS_Init+0x30>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <MX_FREERTOS_Init+0x34>)
 800081a:	2100      	movs	r1, #0
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_FREERTOS_Init+0x38>)
 800081e:	f006 fdd7 	bl	80073d0 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <MX_FREERTOS_Init+0x3c>)
 8000826:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800a0f0 	.word	0x0800a0f0
 8000830:	08000845 	.word	0x08000845
 8000834:	24000230 	.word	0x24000230
 8000838:	0800a114 	.word	0x0800a114
 800083c:	08000871 	.word	0x08000871
 8000840:	24000234 	.word	0x24000234

08000844 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  osDelay(1); // Blocking Task1 for force Task2 to run first
 800084c:	2001      	movs	r0, #1
 800084e:	f006 fe51 	bl	80074f4 <osDelay>
  for(;;)
  {
	osKernelLock(); // Turning off scheduler
 8000852:	f006 fd65 	bl	8007320 <osKernelLock>
	printf_("Printf escrito pela Task1 \n\r"); // Running critical zone
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <StartTask1+0x28>)
 8000858:	f000 fac0 	bl	8000ddc <printf_>
	osKernelUnlock(); // Turning on scheduler back
 800085c:	f006 fd86 	bl	800736c <osKernelUnlock>
	osDelay(100);
 8000860:	2064      	movs	r0, #100	@ 0x64
 8000862:	f006 fe47 	bl	80074f4 <osDelay>
	osKernelLock(); // Turning off scheduler
 8000866:	bf00      	nop
 8000868:	e7f3      	b.n	8000852 <StartTask1+0xe>
 800086a:	bf00      	nop
 800086c:	0800a090 	.word	0x0800a090

08000870 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osKernelLock(); // Turning off scheduler
 8000878:	f006 fd52 	bl	8007320 <osKernelLock>
	printf_("Printf escrito pela Task2 \n\r"); // Running critical zone
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <StartTask2+0x20>)
 800087e:	f000 faad 	bl	8000ddc <printf_>
	osKernelUnlock(); // Turning on scheduler back
 8000882:	f006 fd73 	bl	800736c <osKernelUnlock>
    osDelay(100);
 8000886:	2064      	movs	r0, #100	@ 0x64
 8000888:	f006 fe34 	bl	80074f4 <osDelay>
	osKernelLock(); // Turning off scheduler
 800088c:	bf00      	nop
 800088e:	e7f3      	b.n	8000878 <StartTask2+0x8>
 8000890:	0800a0b0 	.word	0x0800a0b0

08000894 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b62      	ldr	r3, [pc, #392]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	4a60      	ldr	r2, [pc, #384]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	4a59      	ldr	r2, [pc, #356]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d8:	4b56      	ldr	r3, [pc, #344]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b53      	ldr	r3, [pc, #332]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a51      	ldr	r2, [pc, #324]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b4b      	ldr	r3, [pc, #300]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b44      	ldr	r3, [pc, #272]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a42      	ldr	r2, [pc, #264]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b40      	ldr	r3, [pc, #256]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000940:	4b3c      	ldr	r3, [pc, #240]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a3b      	ldr	r2, [pc, #236]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	4b35      	ldr	r3, [pc, #212]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_GPIO_Init+0x1a0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000982:	482d      	ldr	r0, [pc, #180]	@ (8000a38 <MX_GPIO_Init+0x1a4>)
 8000984:	f001 fd16 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098e:	482b      	ldr	r0, [pc, #172]	@ (8000a3c <MX_GPIO_Init+0x1a8>)
 8000990:	f001 fd10 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2102      	movs	r1, #2
 8000998:	4829      	ldr	r0, [pc, #164]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 800099a:	f001 fd0b 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <MX_GPIO_Init+0x1b0>)
 80009b4:	f001 fb4e 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009b8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4819      	ldr	r0, [pc, #100]	@ (8000a38 <MX_GPIO_Init+0x1a4>)
 80009d2:	f001 fb3f 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <MX_GPIO_Init+0x1a8>)
 80009f0:	f001 fb30 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x1b4>)
 8000a0a:	f001 fb23 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000a26:	f001 fb15 	bl	8002054 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020400 	.word	0x58020400
 8000a3c:	58020c00 	.word	0x58020c00
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	58021800 	.word	0x58021800

08000a4c <printchar_>:

// Included added to allow for the use of HAL UART library
#include "usart.h"

static void printchar_(char **str, int c)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	if (str) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <printchar_+0x26>
		**str = (char)c;
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
	else
	{
		//(void)putchar_(c);
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
	}
}
 8000a70:	e005      	b.n	8000a7e <printchar_+0x32>
		HAL_UART_Transmit(&huart3,(uint8_t *)&c, 1, 10); // Using UART3
 8000a72:	4639      	mov	r1, r7
 8000a74:	230a      	movs	r3, #10
 8000a76:	2201      	movs	r2, #1
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <printchar_+0x3c>)
 8000a7a:	f004 ffa1 	bl	80059c0 <HAL_UART_Transmit>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000284 	.word	0x24000284

08000a8c <prints_>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints_(char **out, const char *string, int width, int pad)
{
 8000a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dd17      	ble.n	8000ad8 <prints_+0x4c>
		register int len = 0;
 8000aa8:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000aaa:	68be      	ldr	r6, [r7, #8]
 8000aac:	e001      	b.n	8000ab2 <prints_+0x26>
 8000aae:	3501      	adds	r5, #1
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	7833      	ldrb	r3, [r6, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1fa      	bne.n	8000aae <prints_+0x22>
		if (len >= width) width = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	429d      	cmp	r5, r3
 8000abc:	db02      	blt.n	8000ac4 <prints_+0x38>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e002      	b.n	8000aca <prints_+0x3e>
		else width -= len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1b5b      	subs	r3, r3, r5
 8000ac8:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <prints_+0x4c>
 8000ad4:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d116      	bne.n	8000b10 <prints_+0x84>
		for ( ; width > 0; --width) {
 8000ae2:	e007      	b.n	8000af4 <prints_+0x68>
			printchar_(out, padchar);
 8000ae4:	4641      	mov	r1, r8
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ffb0 	bl	8000a4c <printchar_>
			++pc;
 8000aec:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dcf4      	bgt.n	8000ae4 <prints_+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000afa:	e009      	b.n	8000b10 <prints_+0x84>
		printchar_(out, *string);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff ffa2 	bl	8000a4c <printchar_>
		++pc;
 8000b08:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f1      	bne.n	8000afc <prints_+0x70>
	}
	for ( ; width > 0; --width) {
 8000b18:	e007      	b.n	8000b2a <prints_+0x9e>
		printchar_(out, padchar);
 8000b1a:	4641      	mov	r1, r8
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff ff95 	bl	8000a4c <printchar_>
		++pc;
 8000b22:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dcf4      	bgt.n	8000b1a <prints_+0x8e>
	}

	return pc;
 8000b30:	4623      	mov	r3, r4
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b3c <printi_>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi_(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b40:	b089      	sub	sp, #36	@ 0x24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000b4c:	f04f 0900 	mov.w	r9, #0
 8000b50:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000b52:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <printi_+0x38>
		print_buf[0] = '0';
 8000b5a:	2330      	movs	r3, #48	@ 0x30
 8000b5c:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000b5e:	2300      	movs	r3, #0
 8000b60:	757b      	strb	r3, [r7, #21]
		return prints_(out, print_buf, width, pad);
 8000b62:	f107 0114 	add.w	r1, r7, #20
 8000b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff ff8e 	bl	8000a8c <prints_>
 8000b70:	4603      	mov	r3, r0
 8000b72:	e04a      	b.n	8000c0a <printi_+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00a      	beq.n	8000b90 <printi_+0x54>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0a      	cmp	r3, #10
 8000b7e:	d107      	bne.n	8000b90 <printi_+0x54>
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da04      	bge.n	8000b90 <printi_+0x54>
		neg = 1;
 8000b86:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000b90:	f107 0414 	add.w	r4, r7, #20
 8000b94:	340b      	adds	r4, #11
	*s = '\0';
 8000b96:	2300      	movs	r3, #0
 8000b98:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000b9a:	e015      	b.n	8000bc8 <printi_+0x8c>
		t = (unsigned int)u % b;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	fbb5 f2f3 	udiv	r2, r5, r3
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	1aeb      	subs	r3, r5, r3
 8000ba8:	4698      	mov	r8, r3
		if( t >= 10 )
 8000baa:	f1b8 0f09 	cmp.w	r8, #9
 8000bae:	dd02      	ble.n	8000bb6 <printi_+0x7a>
			t += letbase - '0' - 10;
 8000bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bb2:	3b3a      	subs	r3, #58	@ 0x3a
 8000bb4:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 8000bb6:	fa5f f388 	uxtb.w	r3, r8
 8000bba:	3c01      	subs	r4, #1
 8000bbc:	3330      	adds	r3, #48	@ 0x30
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d1e7      	bne.n	8000b9c <printi_+0x60>
	}

	if (neg) {
 8000bcc:	f1b9 0f00 	cmp.w	r9, #0
 8000bd0:	d013      	beq.n	8000bfa <printi_+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00d      	beq.n	8000bf4 <printi_+0xb8>
 8000bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d008      	beq.n	8000bf4 <printi_+0xb8>
			printchar_(out, '-');
 8000be2:	212d      	movs	r1, #45	@ 0x2d
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff ff31 	bl	8000a4c <printchar_>
			++pc;
 8000bea:	3601      	adds	r6, #1
			--width;
 8000bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000bf2:	e002      	b.n	8000bfa <printi_+0xbe>
		}
		else {
			*--s = '-';
 8000bf4:	3c01      	subs	r4, #1
 8000bf6:	232d      	movs	r3, #45	@ 0x2d
 8000bf8:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints_(out, s, width, pad);
 8000bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000bfe:	4621      	mov	r1, r4
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff ff43 	bl	8000a8c <prints_>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4433      	add	r3, r6
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	@ 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c14 <print_>:

static int print_( char **out, const char *format, va_list args )
{
 8000c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c18:	b08a      	sub	sp, #40	@ 0x28
 8000c1a:	af04      	add	r7, sp, #16
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000c22:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000c24:	e0c4      	b.n	8000db0 <print_+0x19c>
		if (*format == '%') {
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b25      	cmp	r3, #37	@ 0x25
 8000c2c:	f040 80b3 	bne.w	8000d96 <print_+0x182>
			++format;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000c36:	2600      	movs	r6, #0
 8000c38:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80bc 	beq.w	8000dbc <print_+0x1a8>
			if (*format == '%') goto out;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b25      	cmp	r3, #37	@ 0x25
 8000c4a:	f000 80a6 	beq.w	8000d9a <print_+0x186>
			if (*format == '-') {
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c54:	d109      	bne.n	8000c6a <print_+0x56>
				++format;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000c5c:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000c5e:	e004      	b.n	8000c6a <print_+0x56>
				++format;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000c66:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b30      	cmp	r3, #48	@ 0x30
 8000c70:	d0f6      	beq.n	8000c60 <print_+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000c72:	e00b      	b.n	8000c8c <print_+0x78>
				width *= 10;
 8000c74:	462b      	mov	r3, r5
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	442b      	add	r3, r5
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	461d      	mov	r5, r3
				width += *format - '0';
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3b30      	subs	r3, #48	@ 0x30
 8000c84:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c92:	d903      	bls.n	8000c9c <print_+0x88>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b39      	cmp	r3, #57	@ 0x39
 8000c9a:	d9eb      	bls.n	8000c74 <print_+0x60>
			}
			if( *format == 's' ) {
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b73      	cmp	r3, #115	@ 0x73
 8000ca2:	d112      	bne.n	8000cca <print_+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4698      	mov	r8, r3
				pc += prints_(out, s?s:"(null)", width, pad);
 8000cae:	f1b8 0f00 	cmp.w	r8, #0
 8000cb2:	d001      	beq.n	8000cb8 <print_+0xa4>
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	e000      	b.n	8000cba <print_+0xa6>
 8000cb8:	4947      	ldr	r1, [pc, #284]	@ (8000dd8 <print_+0x1c4>)
 8000cba:	4633      	mov	r3, r6
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fee4 	bl	8000a8c <prints_>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	441c      	add	r4, r3
				continue;
 8000cc8:	e06f      	b.n	8000daa <print_+0x196>
			}
			if( *format == 'd' ) {
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b64      	cmp	r3, #100	@ 0x64
 8000cd0:	d10f      	bne.n	8000cf2 <print_+0xde>
				pc += printi_(out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	2361      	movs	r3, #97	@ 0x61
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	9601      	str	r6, [sp, #4]
 8000ce0:	9500      	str	r5, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff ff28 	bl	8000b3c <printi_>
 8000cec:	4603      	mov	r3, r0
 8000cee:	441c      	add	r4, r3
				continue;
 8000cf0:	e05b      	b.n	8000daa <print_+0x196>
			}
			if( *format == 'x' ) {
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b78      	cmp	r3, #120	@ 0x78
 8000cf8:	d10f      	bne.n	8000d1a <print_+0x106>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	1d1a      	adds	r2, r3, #4
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	2361      	movs	r3, #97	@ 0x61
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	9601      	str	r6, [sp, #4]
 8000d08:	9500      	str	r5, [sp, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff ff14 	bl	8000b3c <printi_>
 8000d14:	4603      	mov	r3, r0
 8000d16:	441c      	add	r4, r3
				continue;
 8000d18:	e047      	b.n	8000daa <print_+0x196>
			}
			if( *format == 'X' ) {
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b58      	cmp	r3, #88	@ 0x58
 8000d20:	d10f      	bne.n	8000d42 <print_+0x12e>
				pc += printi_(out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1d1a      	adds	r2, r3, #4
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	2341      	movs	r3, #65	@ 0x41
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	9601      	str	r6, [sp, #4]
 8000d30:	9500      	str	r5, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	2210      	movs	r2, #16
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff ff00 	bl	8000b3c <printi_>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	441c      	add	r4, r3
				continue;
 8000d40:	e033      	b.n	8000daa <print_+0x196>
			}
			if( *format == 'u' ) {
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b75      	cmp	r3, #117	@ 0x75
 8000d48:	d10f      	bne.n	8000d6a <print_+0x156>
				pc += printi_(out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1d1a      	adds	r2, r3, #4
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	2361      	movs	r3, #97	@ 0x61
 8000d54:	9302      	str	r3, [sp, #8]
 8000d56:	9601      	str	r6, [sp, #4]
 8000d58:	9500      	str	r5, [sp, #0]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff feec 	bl	8000b3c <printi_>
 8000d64:	4603      	mov	r3, r0
 8000d66:	441c      	add	r4, r3
				continue;
 8000d68:	e01f      	b.n	8000daa <print_+0x196>
			}
			if( *format == 'c' ) {
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b63      	cmp	r3, #99	@ 0x63
 8000d70:	d11b      	bne.n	8000daa <print_+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1d1a      	adds	r2, r3, #4
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000d7e:	2300      	movs	r3, #0
 8000d80:	757b      	strb	r3, [r7, #21]
				pc += prints_(out, scr, width, pad);
 8000d82:	f107 0114 	add.w	r1, r7, #20
 8000d86:	4633      	mov	r3, r6
 8000d88:	462a      	mov	r2, r5
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fe7e 	bl	8000a8c <prints_>
 8000d90:	4603      	mov	r3, r0
 8000d92:	441c      	add	r4, r3
				continue;
 8000d94:	e009      	b.n	8000daa <print_+0x196>
			}
		}
		else {
		out:
 8000d96:	bf00      	nop
 8000d98:	e000      	b.n	8000d9c <print_+0x188>
			if (*format == '%') goto out;
 8000d9a:	bf00      	nop
			printchar_(out, *format);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fe52 	bl	8000a4c <printchar_>
			++pc;
 8000da8:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f47f af36 	bne.w	8000c26 <print_+0x12>
 8000dba:	e000      	b.n	8000dbe <print_+0x1aa>
			if (*format == '\0') break;
 8000dbc:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <print_+0x1b8>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000dcc:	4623      	mov	r3, r4
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd8:	0800a0d0 	.word	0x0800a0d0

08000ddc <printf_>:

int printf_(const char *format, ...)
{
 8000ddc:	b40f      	push	{r0, r1, r2, r3}
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	607b      	str	r3, [r7, #4]
        return print_( 0, format, args );
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff10 	bl	8000c14 <print_>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e00:	b004      	add	sp, #16
 8000e02:	4770      	bx	lr

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fb70 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f810 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f7ff fd40 	bl	8000894 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e14:	f7ff fbdc 	bl	80005d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e18:	f000 f9da 	bl	80011d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e1c:	f000 fa8e 	bl	800133c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e20:	f006 fa34 	bl	800728c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e24:	f7ff fcee 	bl	8000804 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e28:	f006 fa54 	bl	80072d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <main+0x28>

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	@ 0x70
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	224c      	movs	r2, #76	@ 0x4c
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 f82a 	bl	8009e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2220      	movs	r2, #32
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f009 f824 	bl	8009e98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f001 fbf9 	bl	8002648 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <SystemClock_Config+0xf8>)
 8000e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5e:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <SystemClock_Config+0xf8>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e66:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <SystemClock_Config+0xf8>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <SystemClock_Config+0xfc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e78:	4a2c      	ldr	r2, [pc, #176]	@ (8000f2c <SystemClock_Config+0xfc>)
 8000e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <SystemClock_Config+0xfc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e8c:	bf00      	nop
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <SystemClock_Config+0xfc>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e9a:	d1f8      	bne.n	8000e8e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2340      	movs	r3, #64	@ 0x40
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000eba:	2318      	movs	r3, #24
 8000ebc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fbfe 	bl	80026dc <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ee6:	f000 f835 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	233f      	movs	r3, #63	@ 0x3f
 8000eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 f83e 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f1a:	f000 f81b 	bl	8000f54 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3770      	adds	r7, #112	@ 0x70
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	58000400 	.word	0x58000400
 8000f2c:	58024800 	.word	0x58024800

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f42:	f000 fb0f 	bl	8001564 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <HAL_MspInit+0x38>)
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_MspInit+0x38>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_MspInit+0x38>)
 8000f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	210f      	movs	r1, #15
 8000f88:	f06f 0001 	mvn.w	r0, #1
 8000f8c:	f000 fc06 	bl	800179c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	@ 0x40
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	d827      	bhi.n	8000ffa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000faa:	2200      	movs	r2, #0
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	2036      	movs	r0, #54	@ 0x36
 8000fb0:	f000 fbf4 	bl	800179c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb4:	2036      	movs	r0, #54	@ 0x36
 8000fb6:	f000 fc0b 	bl	80017d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <HAL_InitTick+0xc4>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc0:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <HAL_InitTick+0xc8>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc6:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <HAL_InitTick+0xc8>)
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <HAL_InitTick+0xc8>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fde:	f107 0210 	add.w	r2, r7, #16
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fb5d 	bl	80036a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <HAL_InitTick+0x6a>
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e02b      	b.n	8001056 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ffe:	f002 fb27 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8001002:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001004:	e004      	b.n	8001010 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001006:	f002 fb23 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 800100a:	4603      	mov	r3, r0
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <HAL_InitTick+0xcc>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	0c9b      	lsrs	r3, r3, #18
 800101a:	3b01      	subs	r3, #1
 800101c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <HAL_InitTick+0xd0>)
 8001020:	4a13      	ldr	r2, [pc, #76]	@ (8001070 <HAL_InitTick+0xd4>)
 8001022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_InitTick+0xd0>)
 8001026:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800102a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800102c:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <HAL_InitTick+0xd0>)
 800102e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001030:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_InitTick+0xd0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_InitTick+0xd0>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <HAL_InitTick+0xd0>)
 8001040:	f004 f9a0 	bl	8005384 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d104      	bne.n	8001054 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800104a:	4808      	ldr	r0, [pc, #32]	@ (800106c <HAL_InitTick+0xd0>)
 800104c:	f004 f9fc 	bl	8005448 <HAL_TIM_Base_Start_IT>
 8001050:	4603      	mov	r3, r0
 8001052:	e000      	b.n	8001056 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	3740      	adds	r7, #64	@ 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24000008 	.word	0x24000008
 8001064:	58024400 	.word	0x58024400
 8001068:	431bde83 	.word	0x431bde83
 800106c:	24000238 	.word	0x24000238
 8001070:	40001000 	.word	0x40001000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <TIM6_DAC_IRQHandler+0x10>)
 80010b2:	f004 fa41 	bl	8005538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000238 	.word	0x24000238

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c4:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <SystemInit+0xe4>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a36      	ldr	r2, [pc, #216]	@ (80011a4 <SystemInit+0xe4>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d4:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <SystemInit+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d807      	bhi.n	80010f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010e0:	4b31      	ldr	r3, [pc, #196]	@ (80011a8 <SystemInit+0xe8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 030f 	bic.w	r3, r3, #15
 80010e8:	4a2f      	ldr	r2, [pc, #188]	@ (80011a8 <SystemInit+0xe8>)
 80010ea:	f043 0307 	orr.w	r3, r3, #7
 80010ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <SystemInit+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <SystemInit+0xec>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <SystemInit+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <SystemInit+0xec>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4929      	ldr	r1, [pc, #164]	@ (80011ac <SystemInit+0xec>)
 8001108:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <SystemInit+0xf0>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110e:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <SystemInit+0xe8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <SystemInit+0xe8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 030f 	bic.w	r3, r3, #15
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <SystemInit+0xe8>)
 8001124:	f043 0307 	orr.w	r3, r3, #7
 8001128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <SystemInit+0xec>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <SystemInit+0xec>)
 800113e:	4a1d      	ldr	r2, [pc, #116]	@ (80011b4 <SystemInit+0xf4>)
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <SystemInit+0xec>)
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <SystemInit+0xf8>)
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <SystemInit+0xec>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <SystemInit+0xfc>)
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <SystemInit+0xec>)
 8001156:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <SystemInit+0xfc>)
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <SystemInit+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <SystemInit+0xec>)
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <SystemInit+0xfc>)
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <SystemInit+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <SystemInit+0xec>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <SystemInit+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <SystemInit+0x100>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <SystemInit+0x104>)
 8001184:	4013      	ands	r3, r2
 8001186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800118a:	d202      	bcs.n	8001192 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <SystemInit+0x108>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <SystemInit+0x10c>)
 8001194:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	52002000 	.word	0x52002000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	02020200 	.word	0x02020200
 80011b8:	01ff0000 	.word	0x01ff0000
 80011bc:	01010280 	.word	0x01010280
 80011c0:	5c001000 	.word	0x5c001000
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	51008108 	.word	0x51008108
 80011cc:	52004000 	.word	0x52004000

080011d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	@ (8001264 <MX_USART3_UART_Init+0x94>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001218:	4811      	ldr	r0, [pc, #68]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 800121a:	f004 fb81 	bl	8005920 <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001224:	f7ff fe96 	bl	8000f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 800122c:	f005 fc17 	bl	8006a5e <HAL_UARTEx_SetTxFifoThreshold>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001236:	f7ff fe8d 	bl	8000f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 800123e:	f005 fc4c 	bl	8006ada <HAL_UARTEx_SetRxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001248:	f7ff fe84 	bl	8000f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_USART3_UART_Init+0x90>)
 800124e:	f005 fbcd 	bl	80069ec <HAL_UARTEx_DisableFifoMode>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001258:	f7ff fe7c 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	24000284 	.word	0x24000284
 8001264:	40004800 	.word	0x40004800

08001268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ba      	sub	sp, #232	@ 0xe8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22c0      	movs	r2, #192	@ 0xc0
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f008 fe05 	bl	8009e98 <memset>
  if(uartHandle->Instance==USART3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_UART_MspInit+0xc8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d146      	bne.n	8001326 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001298:	f04f 0202 	mov.w	r2, #2
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fa3c 	bl	800372c <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ba:	f7ff fe4b 	bl	8000f54 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_UART_MspInit+0xcc>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <HAL_UART_MspInit+0xd0>)
 8001322:	f000 fe97 	bl	8002054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	37e8      	adds	r7, #232	@ 0xe8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004800 	.word	0x40004800
 8001334:	58024400 	.word	0x58024400
 8001338:	58020c00 	.word	0x58020c00

0800133c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001342:	4a16      	ldr	r2, [pc, #88]	@ (800139c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001344:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001348:	2209      	movs	r2, #9
 800134a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134e:	2202      	movs	r2, #2
 8001350:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135a:	2202      	movs	r2, #2
 800135c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001360:	2201      	movs	r2, #1
 8001362:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001372:	2201      	movs	r2, #1
 8001374:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001378:	2201      	movs	r2, #1
 800137a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001384:	f001 f82f 	bl	80023e6 <HAL_PCD_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800138e:	f7ff fde1 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	24000318 	.word	0x24000318
 800139c:	40080000 	.word	0x40080000

080013a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ba      	sub	sp, #232	@ 0xe8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 fd69 	bl	8009e98 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a30      	ldr	r2, [pc, #192]	@ (800148c <HAL_PCD_MspInit+0xec>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d159      	bne.n	8001484 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f99f 	bl	800372c <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013f4:	f7ff fdae 	bl	8000f54 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013f8:	f001 f960 	bl	80026bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800141a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001434:	230a      	movs	r3, #10
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800143e:	4619      	mov	r1, r3
 8001440:	4814      	ldr	r0, [pc, #80]	@ (8001494 <HAL_PCD_MspInit+0xf4>)
 8001442:	f000 fe07 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <HAL_PCD_MspInit+0xf4>)
 8001462:	f000 fdf7 	bl	8002054 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 800146e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001472:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_PCD_MspInit+0xf0>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800147c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37e8      	adds	r7, #232	@ 0xe8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40080000 	.word	0x40080000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800149c:	f7ff fe10 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	@ (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f008 fd45 	bl	8009f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff fc9b 	bl	8000e04 <main>
  bx  lr
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014d8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80014dc:	0800a180 	.word	0x0800a180
  ldr r2, =_sbss
 80014e0:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80014e4:	24005328 	.word	0x24005328

080014e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC3_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 f947 	bl	8001786 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f8:	f001 ff00 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_Init+0x68>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	4913      	ldr	r1, [pc, #76]	@ (8001558 <HAL_Init+0x6c>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
 8001514:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_Init+0x68>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_Init+0x6c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_Init+0x70>)
 800152e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <HAL_Init+0x74>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fd30 	bl	8000f9c <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e002      	b.n	800154c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001546:	f7ff fd0b 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	58024400 	.word	0x58024400
 8001558:	0800a138 	.word	0x0800a138
 800155c:	24000004 	.word	0x24000004
 8001560:	24000000 	.word	0x24000000

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2400000c 	.word	0x2400000c
 8001588:	240007fc 	.word	0x240007fc

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	240007fc 	.word	0x240007fc

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2400000c 	.word	0x2400000c

080015ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <HAL_GetREVID+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0c1b      	lsrs	r3, r3, #16
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	5c001000 	.word	0x5c001000

08001604 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001614:	4904      	ldr	r1, [pc, #16]	@ (8001628 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	58000400 	.word	0x58000400

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	4313      	orrs	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	05fa0000 	.word	0x05fa0000

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff4c 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017aa:	f7ff ff63 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	6978      	ldr	r0, [r7, #20]
 80017b6:	f7ff ffb3 	bl	8001720 <NVIC_EncodePriority>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff82 	bl	80016cc <__NVIC_SetPriority>
}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff56 	bl	8001690 <__NVIC_EnableIRQ>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0e3      	b.n	80019c6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2223      	movs	r2, #35	@ 0x23
 800180c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7fe ff29 	bl	8000668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b6e      	ldr	r3, [pc, #440]	@ (80019d0 <HAL_ETH_Init+0x1e4>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800181c:	4a6c      	ldr	r2, [pc, #432]	@ (80019d0 <HAL_ETH_Init+0x1e4>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001826:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <HAL_ETH_Init+0x1e4>)
 8001828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7a1b      	ldrb	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff fee1 	bl	8001604 <HAL_SYSCFG_ETHInterfaceSelect>
 8001842:	e003      	b.n	800184c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001844:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001848:	f7ff fedc 	bl	8001604 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800184c:	4b61      	ldr	r3, [pc, #388]	@ (80019d4 <HAL_ETH_Init+0x1e8>)
 800184e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001866:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001868:	f7ff fe90 	bl	800158c <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800186e:	e011      	b.n	8001894 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001870:	f7ff fe8c 	bl	800158c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800187e:	d909      	bls.n	8001894 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2204      	movs	r2, #4
 8001884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	22e0      	movs	r2, #224	@ 0xe0
 800188c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e098      	b.n	80019c6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1e4      	bne.n	8001870 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f89e 	bl	80019e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018ac:	f001 fea0 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <HAL_ETH_Init+0x1ec>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9a      	lsrs	r2, r3, #18
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3a01      	subs	r2, #1
 80018c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fa81 	bl	8001dcc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018d6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018e6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	22e0      	movs	r2, #224	@ 0xe0
 8001902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e05d      	b.n	80019c6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001912:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001916:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <HAL_ETH_Init+0x1f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6952      	ldr	r2, [r2, #20]
 800191e:	0051      	lsls	r1, r2, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800192a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fae9 	bl	8001f06 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fb2f 	bl	8001f98 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	3305      	adds	r3, #5
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	021a      	lsls	r2, r3, #8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	3303      	adds	r3, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	061a      	lsls	r2, r3, #24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	3302      	adds	r3, #2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001978:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001986:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001988:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_ETH_Init+0x1f4>)
 800199a:	430b      	orrs	r3, r1
 800199c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_ETH_Init+0x1f8>)
 80019ae:	430b      	orrs	r3, r1
 80019b0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2210      	movs	r2, #16
 80019c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	58024400 	.word	0x58024400
 80019d4:	58000400 	.word	0x58000400
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	ffff8001 	.word	0xffff8001
 80019e0:	0c020060 	.word	0x0c020060
 80019e4:	0c20c000 	.word	0x0c20c000

080019e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a02:	f001 fdf5 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8001a06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d804      	bhi.n	8001a1a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e022      	b.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4a16      	ldr	r2, [pc, #88]	@ (8001a78 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d204      	bcs.n	8001a2c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e019      	b.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d915      	bls.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d804      	bhi.n	8001a46 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e00c      	b.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	@ (8001a84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d804      	bhi.n	8001a58 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e003      	b.n	8001a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	02160ebf 	.word	0x02160ebf
 8001a78:	03938700 	.word	0x03938700
 8001a7c:	05f5e0ff 	.word	0x05f5e0ff
 8001a80:	08f0d17f 	.word	0x08f0d17f
 8001a84:	0ee6b27f 	.word	0x0ee6b27f

08001a88 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7b5b      	ldrb	r3, [r3, #13]
 8001ab0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7bdb      	ldrb	r3, [r3, #15]
 8001ac0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ac2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	7c12      	ldrb	r2, [r2, #16]
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	d102      	bne.n	8001ad2 <ETH_SetMACConfig+0x4a>
 8001acc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ad0:	e000      	b.n	8001ad4 <ETH_SetMACConfig+0x4c>
 8001ad2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ad4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	7c52      	ldrb	r2, [r2, #17]
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d102      	bne.n	8001ae4 <ETH_SetMACConfig+0x5c>
 8001ade:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ae2:	e000      	b.n	8001ae6 <ETH_SetMACConfig+0x5e>
 8001ae4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7c9b      	ldrb	r3, [r3, #18]
 8001aec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aee:	431a      	orrs	r2, r3
               macconf->Speed |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001af4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7f1b      	ldrb	r3, [r3, #28]
 8001b00:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7f5b      	ldrb	r3, [r3, #29]
 8001b08:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	7f92      	ldrb	r2, [r2, #30]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d102      	bne.n	8001b1a <ETH_SetMACConfig+0x92>
 8001b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x94>
 8001b1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7fdb      	ldrb	r3, [r3, #31]
 8001b22:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d102      	bne.n	8001b36 <ETH_SetMACConfig+0xae>
 8001b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b34:	e000      	b.n	8001b38 <ETH_SetMACConfig+0xb0>
 8001b36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b38:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b46:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b48:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <ETH_SetMACConfig+0x22c>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b72:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b7c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b86:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d102      	bne.n	8001b9a <ETH_SetMACConfig+0x112>
 8001b94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b98:	e000      	b.n	8001b9c <ETH_SetMACConfig+0x114>
 8001b9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b9c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <ETH_SetMACConfig+0x230>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bc0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <ETH_SetMACConfig+0x234>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001be4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d101      	bne.n	8001bfa <ETH_SetMACConfig+0x172>
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	e000      	b.n	8001bfc <ETH_SetMACConfig+0x174>
 8001bfa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bfc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c0e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c24:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c2c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3a:	f023 0103 	bic.w	r1, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c52:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d101      	bne.n	8001c76 <ETH_SetMACConfig+0x1ee>
 8001c72:	2240      	movs	r2, #64	@ 0x40
 8001c74:	e000      	b.n	8001c78 <ETH_SetMACConfig+0x1f0>
 8001c76:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001c80:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001c8a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001c98:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	00048083 	.word	0x00048083
 8001cb8:	c0f88000 	.word	0xc0f88000
 8001cbc:	fffffef0 	.word	0xfffffef0

08001cc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b38      	ldr	r3, [pc, #224]	@ (8001db8 <ETH_SetDMAConfig+0xf8>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ce6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	791b      	ldrb	r3, [r3, #4]
 8001cec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cf2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <ETH_SetDMAConfig+0xfc>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d18:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7b5b      	ldrb	r3, [r3, #13]
 8001d1e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d30:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <ETH_SetDMAConfig+0x100>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d44:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	7d1b      	ldrb	r3, [r3, #20]
 8001d50:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d52:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7f5b      	ldrb	r3, [r3, #29]
 8001d58:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d66:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <ETH_SetDMAConfig+0x104>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d7a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	7f1b      	ldrb	r3, [r3, #28]
 8001d82:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d94:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <ETH_SetDMAConfig+0x108>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001da8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	ffff87fd 	.word	0xffff87fd
 8001dbc:	ffff2ffe 	.word	0xffff2ffe
 8001dc0:	fffec000 	.word	0xfffec000
 8001dc4:	ffc0efef 	.word	0xffc0efef
 8001dc8:	7fc0ffff 	.word	0x7fc0ffff

08001dcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0a4      	sub	sp, #144	@ 0x90
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e0c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e24:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e28:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e46:	2300      	movs	r3, #0
 8001e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e64:	2320      	movs	r3, #32
 8001e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e76:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e80:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fde6 	bl	8001a88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ed6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ee0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ee4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001eec:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fee1 	bl	8001cc0 <ETH_SetDMAConfig>
}
 8001efe:	bf00      	nop
 8001f00:	3790      	adds	r7, #144	@ 0x90
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e01d      	b.n	8001f50 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	3206      	adds	r2, #6
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d9de      	bls.n	8001f14 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f64:	461a      	mov	r2, r3
 8001f66:	2303      	movs	r3, #3
 8001f68:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f78:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f88:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e023      	b.n	8001fee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	3212      	adds	r2, #18
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d9d8      	bls.n	8001fa6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201a:	461a      	mov	r2, r3
 800201c:	2303      	movs	r3, #3
 800201e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002042:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002062:	4b89      	ldr	r3, [pc, #548]	@ (8002288 <HAL_GPIO_Init+0x234>)
 8002064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002066:	e194      	b.n	8002392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8186 	beq.w	800238c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d005      	beq.n	8002098 <HAL_GPIO_Init+0x44>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b03      	cmp	r3, #3
 8002104:	d017      	beq.n	8002136 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d123      	bne.n	800218a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	69b9      	ldr	r1, [r7, #24]
 8002186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80e0 	beq.w	800238c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021cc:	4b2f      	ldr	r3, [pc, #188]	@ (800228c <HAL_GPIO_Init+0x238>)
 80021ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021d2:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <HAL_GPIO_Init+0x238>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021dc:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <HAL_GPIO_Init+0x238>)
 80021de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ea:	4a29      	ldr	r2, [pc, #164]	@ (8002290 <HAL_GPIO_Init+0x23c>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a20      	ldr	r2, [pc, #128]	@ (8002294 <HAL_GPIO_Init+0x240>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d052      	beq.n	80022bc <HAL_GPIO_Init+0x268>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <HAL_GPIO_Init+0x244>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d031      	beq.n	8002282 <HAL_GPIO_Init+0x22e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_GPIO_Init+0x248>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02b      	beq.n	800227e <HAL_GPIO_Init+0x22a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_GPIO_Init+0x24c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d025      	beq.n	800227a <HAL_GPIO_Init+0x226>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <HAL_GPIO_Init+0x250>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01f      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <HAL_GPIO_Init+0x254>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <HAL_GPIO_Init+0x258>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x21a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_GPIO_Init+0x25c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x216>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_GPIO_Init+0x260>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x212>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <HAL_GPIO_Init+0x264>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x20e>
 800225e:	2309      	movs	r3, #9
 8002260:	e02d      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002262:	230a      	movs	r3, #10
 8002264:	e02b      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002266:	2308      	movs	r3, #8
 8002268:	e029      	b.n	80022be <HAL_GPIO_Init+0x26a>
 800226a:	2307      	movs	r3, #7
 800226c:	e027      	b.n	80022be <HAL_GPIO_Init+0x26a>
 800226e:	2306      	movs	r3, #6
 8002270:	e025      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002272:	2305      	movs	r3, #5
 8002274:	e023      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002276:	2304      	movs	r3, #4
 8002278:	e021      	b.n	80022be <HAL_GPIO_Init+0x26a>
 800227a:	2303      	movs	r3, #3
 800227c:	e01f      	b.n	80022be <HAL_GPIO_Init+0x26a>
 800227e:	2302      	movs	r3, #2
 8002280:	e01d      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002282:	2301      	movs	r3, #1
 8002284:	e01b      	b.n	80022be <HAL_GPIO_Init+0x26a>
 8002286:	bf00      	nop
 8002288:	58000080 	.word	0x58000080
 800228c:	58024400 	.word	0x58024400
 8002290:	58000400 	.word	0x58000400
 8002294:	58020000 	.word	0x58020000
 8002298:	58020400 	.word	0x58020400
 800229c:	58020800 	.word	0x58020800
 80022a0:	58020c00 	.word	0x58020c00
 80022a4:	58021000 	.word	0x58021000
 80022a8:	58021400 	.word	0x58021400
 80022ac:	58021800 	.word	0x58021800
 80022b0:	58021c00 	.word	0x58021c00
 80022b4:	58022000 	.word	0x58022000
 80022b8:	58022400 	.word	0x58022400
 80022bc:	2300      	movs	r3, #0
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ce:	4938      	ldr	r1, [pc, #224]	@ (80023b0 <HAL_GPIO_Init+0x35c>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f ae63 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	3724      	adds	r7, #36	@ 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	58000400 	.word	0x58000400

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af02      	add	r7, sp, #8
 80023ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0fe      	b.n	80025f6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe ffc7 	bl	80013a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f004 fc5a 	bl	8006cd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7c1a      	ldrb	r2, [r3, #16]
 800242c:	f88d 2000 	strb.w	r2, [sp]
 8002430:	3304      	adds	r3, #4
 8002432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002434:	f004 fbde 	bl	8006bf4 <USB_CoreInit>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0d5      	b.n	80025f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fc52 	bl	8006cfa <USB_SetCurrentMode>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0c6      	b.n	80025f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e04a      	b.n	8002504 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3315      	adds	r3, #21
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3314      	adds	r3, #20
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	b298      	uxth	r0, r3
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	332e      	adds	r3, #46	@ 0x2e
 80024aa:	4602      	mov	r2, r0
 80024ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3318      	adds	r3, #24
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	331c      	adds	r3, #28
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3320      	adds	r3, #32
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3324      	adds	r3, #36	@ 0x24
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3301      	adds	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	791b      	ldrb	r3, [r3, #4]
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	429a      	cmp	r2, r3
 800250c:	d3af      	bcc.n	800246e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	e044      	b.n	800259e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	3301      	adds	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3b5      	bcc.n	8002514 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7c1a      	ldrb	r2, [r3, #16]
 80025b0:	f88d 2000 	strb.w	r2, [sp]
 80025b4:	3304      	adds	r3, #4
 80025b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b8:	f004 fbec 	bl	8006d94 <USB_DevInit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e013      	b.n	80025f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7b1b      	ldrb	r3, [r3, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d102      	bne.n	80025ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f80b 	bl	8002600 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 fda7 	bl	8007142 <USB_DevDisconnect>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_PCDEx_ActivateLPM+0x44>)
 8002630:	4313      	orrs	r3, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	10000003 	.word	0x10000003

08002648 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d00a      	beq.n	8002672 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x70>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e01f      	b.n	80026ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e01d      	b.n	80026ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	490f      	ldr	r1, [pc, #60]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x70>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4313      	orrs	r3, r2
 8002680:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002682:	f7fe ff83 	bl	800158c <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002688:	e009      	b.n	800269e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800268a:	f7fe ff7f 	bl	800158c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002698:	d901      	bls.n	800269e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x70>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026aa:	d1ee      	bne.n	800268a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	58024800 	.word	0x58024800

080026bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	58024800 	.word	0x58024800

080026dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	@ 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 bc48 	b.w	8002f80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8088 	beq.w	800280e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b99      	ldr	r3, [pc, #612]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002708:	4b96      	ldr	r3, [pc, #600]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800270e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002710:	2b10      	cmp	r3, #16
 8002712:	d007      	beq.n	8002724 <HAL_RCC_OscConfig+0x48>
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	2b18      	cmp	r3, #24
 8002718:	d111      	bne.n	800273e <HAL_RCC_OscConfig+0x62>
 800271a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4b8f      	ldr	r3, [pc, #572]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d06d      	beq.n	800280c <HAL_RCC_OscConfig+0x130>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d169      	bne.n	800280c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f000 bc21 	b.w	8002f80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x7a>
 8002748:	4b86      	ldr	r3, [pc, #536]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a85      	ldr	r2, [pc, #532]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x9c>
 800275e:	4b81      	ldr	r3, [pc, #516]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a80      	ldr	r2, [pc, #512]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7d      	ldr	r2, [pc, #500]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xc0>
 8002782:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a77      	ldr	r2, [pc, #476]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a74      	ldr	r2, [pc, #464]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 800279c:	4b71      	ldr	r3, [pc, #452]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a70      	ldr	r2, [pc, #448]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fee6 	bl	800158c <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fee2 	bl	800158c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e3d4      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d6:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fed2 	bl	800158c <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fece 	bl	800158c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e3c0      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fe:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x110>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80ca 	beq.w	80029b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281c:	4b51      	ldr	r3, [pc, #324]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002824:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002826:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_RCC_OscConfig+0x166>
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2b18      	cmp	r3, #24
 8002836:	d156      	bne.n	80028e6 <HAL_RCC_OscConfig+0x20a>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d151      	bne.n	80028e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002842:	4b48      	ldr	r3, [pc, #288]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e392      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285a:	4b42      	ldr	r3, [pc, #264]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0219 	bic.w	r2, r3, #25
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	493f      	ldr	r1, [pc, #252]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fe8e 	bl	800158c <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002874:	f7fe fe8a 	bl	800158c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e37c      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002886:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	f7fe feab 	bl	80015ec <HAL_GetREVID>
 8002896:	4603      	mov	r3, r0
 8002898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800289c:	4293      	cmp	r3, r2
 800289e:	d817      	bhi.n	80028d0 <HAL_RCC_OscConfig+0x1f4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b40      	cmp	r3, #64	@ 0x40
 80028a6:	d108      	bne.n	80028ba <HAL_RCC_OscConfig+0x1de>
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b8:	e07a      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	4926      	ldr	r1, [pc, #152]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ce:	e06f      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4921      	ldr	r1, [pc, #132]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e4:	e064      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d047      	beq.n	800297e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0219 	bic.w	r2, r3, #25
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	491a      	ldr	r1, [pc, #104]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fe44 	bl	800158c <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fe40 	bl	800158c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e332      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291a:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	f7fe fe61 	bl	80015ec <HAL_GetREVID>
 800292a:	4603      	mov	r3, r0
 800292c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002930:	4293      	cmp	r3, r2
 8002932:	d819      	bhi.n	8002968 <HAL_RCC_OscConfig+0x28c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d108      	bne.n	800294e <HAL_RCC_OscConfig+0x272>
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294a:	6053      	str	r3, [r2, #4]
 800294c:	e030      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	4901      	ldr	r1, [pc, #4]	@ (8002964 <HAL_RCC_OscConfig+0x288>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e025      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
 8002964:	58024400 	.word	0x58024400
 8002968:	4b9a      	ldr	r3, [pc, #616]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	4997      	ldr	r1, [pc, #604]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297e:	4b95      	ldr	r3, [pc, #596]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a94      	ldr	r2, [pc, #592]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fdff 	bl	800158c <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fdfb 	bl	800158c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e2ed      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029a4:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a9 	beq.w	8002b10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029be:	4b85      	ldr	r3, [pc, #532]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c8:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d007      	beq.n	80029e4 <HAL_RCC_OscConfig+0x308>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b18      	cmp	r3, #24
 80029d8:	d13a      	bne.n	8002a50 <HAL_RCC_OscConfig+0x374>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d135      	bne.n	8002a50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e4:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_OscConfig+0x320>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b80      	cmp	r3, #128	@ 0x80
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e2c1      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fc:	f7fe fdf6 	bl	80015ec <HAL_GetREVID>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d817      	bhi.n	8002a3a <HAL_RCC_OscConfig+0x35e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_OscConfig+0x348>
 8002a12:	4b70      	ldr	r3, [pc, #448]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a22:	e075      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a24:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	069b      	lsls	r3, r3, #26
 8002a32:	4968      	ldr	r1, [pc, #416]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a38:	e06a      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3a:	4b66      	ldr	r3, [pc, #408]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	4962      	ldr	r1, [pc, #392]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4e:	e05f      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d042      	beq.n	8002ade <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a58:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fd92 	bl	800158c <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fd8e 	bl	800158c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e280      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a7e:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8a:	f7fe fdaf 	bl	80015ec <HAL_GetREVID>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d817      	bhi.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d108      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3d6>
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aae:	6053      	str	r3, [r2, #4]
 8002ab0:	e02e      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
 8002ab2:	4b48      	ldr	r3, [pc, #288]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	4944      	ldr	r1, [pc, #272]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
 8002ac6:	e023      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
 8002ac8:	4b42      	ldr	r3, [pc, #264]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	493f      	ldr	r1, [pc, #252]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
 8002adc:	e018      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd4f 	bl	800158c <HAL_GetTick>
 8002aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002af2:	f7fe fd4b 	bl	800158c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e23d      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b04:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d036      	beq.n	8002b8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d019      	beq.n	8002b58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b24:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b28:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fd2c 	bl	800158c <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fd28 	bl	800158c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e21a      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b4a:	4b22      	ldr	r3, [pc, #136]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x45c>
 8002b56:	e018      	b.n	8002b8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fd12 	bl	800158c <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fd0e 	bl	800158c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e200      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d039      	beq.n	8002c0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fcef 	bl	800158c <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb2:	f7fe fceb 	bl	800158c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1dd      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bc4:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4d6>
 8002bd0:	e01b      	b.n	8002c0a <HAL_RCC_OscConfig+0x52e>
 8002bd2:	bf00      	nop
 8002bd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002be4:	f7fe fcd2 	bl	800158c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bec:	f7fe fcce 	bl	800158c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1c0      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bfe:	4b92      	ldr	r3, [pc, #584]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8081 	beq.w	8002d1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c18:	4b8c      	ldr	r3, [pc, #560]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a8b      	ldr	r2, [pc, #556]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c24:	f7fe fcb2 	bl	800158c <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe fcae 	bl	800158c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1a0      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3e:	4b83      	ldr	r3, [pc, #524]	@ (8002e4c <HAL_RCC_OscConfig+0x770>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x584>
 8002c52:	4b7d      	ldr	r3, [pc, #500]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a7c      	ldr	r2, [pc, #496]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	e02d      	b.n	8002cbc <HAL_RCC_OscConfig+0x5e0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x5a6>
 8002c68:	4b77      	ldr	r3, [pc, #476]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	4a76      	ldr	r2, [pc, #472]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c74:	4b74      	ldr	r3, [pc, #464]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a73      	ldr	r2, [pc, #460]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x5e0>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c8>
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c96:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x5e0>
 8002ca4:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a67      	ldr	r2, [pc, #412]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb0:	4b65      	ldr	r3, [pc, #404]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a64      	ldr	r2, [pc, #400]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fc62 	bl	800158c <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fc5e 	bl	800158c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e14e      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce2:	4b59      	ldr	r3, [pc, #356]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ee      	beq.n	8002ccc <HAL_RCC_OscConfig+0x5f0>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fc4c 	bl	800158c <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fc48 	bl	800158c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e138      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ee      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 812d 	beq.w	8002f7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d24:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d2c:	2b18      	cmp	r3, #24
 8002d2e:	f000 80bd 	beq.w	8002eac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	f040 809e 	bne.w	8002e78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a41      	ldr	r2, [pc, #260]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc20 	bl	800158c <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fc1c 	bl	800158c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e10e      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	4b39      	ldr	r3, [pc, #228]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_OscConfig+0x774>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	430a      	orrs	r2, r1
 8002d82:	4931      	ldr	r1, [pc, #196]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	3b01      	subs	r3, #1
 8002d98:	025b      	lsls	r3, r3, #9
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	3b01      	subs	r3, #1
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	3b01      	subs	r3, #1
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002db8:	4923      	ldr	r1, [pc, #140]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002dbe:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dca:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dce:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_RCC_OscConfig+0x778>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dd6:	00d2      	lsls	r2, r2, #3
 8002dd8:	491b      	ldr	r1, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	f023 020c 	bic.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4917      	ldr	r1, [pc, #92]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002df0:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	f023 0202 	bic.w	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfc:	4912      	ldr	r1, [pc, #72]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	4a10      	ldr	r2, [pc, #64]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e26:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	4a07      	ldr	r2, [pc, #28]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_RCC_OscConfig+0x76c>)
 8002e38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fba5 	bl	800158c <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e44:	e011      	b.n	8002e6a <HAL_RCC_OscConfig+0x78e>
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58024800 	.word	0x58024800
 8002e50:	fffffc0c 	.word	0xfffffc0c
 8002e54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fb98 	bl	800158c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e08a      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x77c>
 8002e76:	e082      	b.n	8002f7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b43      	ldr	r3, [pc, #268]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a42      	ldr	r2, [pc, #264]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fb82 	bl	800158c <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fb7e 	bl	800158c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e070      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x7b0>
 8002eaa:	e068      	b.n	8002f7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002eac:	4b36      	ldr	r3, [pc, #216]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eb2:	4b35      	ldr	r3, [pc, #212]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d031      	beq.n	8002f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d12a      	bne.n	8002f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d122      	bne.n	8002f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d11a      	bne.n	8002f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0a5b      	lsrs	r3, r3, #9
 8002ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d111      	bne.n	8002f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d108      	bne.n	8002f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e02b      	b.n	8002f80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	08db      	lsrs	r3, r3, #3
 8002f2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d01f      	beq.n	8002f7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f3e:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f4a:	f7fe fb1f 	bl	800158c <HAL_GetTick>
 8002f4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f50:	bf00      	nop
 8002f52:	f7fe fb1b 	bl	800158c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d0f9      	beq.n	8002f52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_RCC_OscConfig+0x8b0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f6a:	00d2      	lsls	r2, r2, #3
 8002f6c:	4906      	ldr	r1, [pc, #24]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f72:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <HAL_RCC_OscConfig+0x8ac>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3730      	adds	r7, #48	@ 0x30
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	ffff0007 	.word	0xffff0007

08002f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e19c      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b87      	ldr	r3, [pc, #540]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 020f 	bic.w	r2, r3, #15
 8002fba:	4985      	ldr	r1, [pc, #532]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b83      	ldr	r3, [pc, #524]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e184      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ff0:	4b78      	ldr	r3, [pc, #480]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	4975      	ldr	r1, [pc, #468]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800301a:	429a      	cmp	r2, r3
 800301c:	d908      	bls.n	8003030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800301e:	4b6d      	ldr	r3, [pc, #436]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	496a      	ldr	r1, [pc, #424]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800302c:	4313      	orrs	r3, r2
 800302e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	4b64      	ldr	r3, [pc, #400]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800304c:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	495e      	ldr	r1, [pc, #376]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800305a:	4313      	orrs	r3, r2
 800305c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d010      	beq.n	800308c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	4b59      	ldr	r3, [pc, #356]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003076:	429a      	cmp	r2, r3
 8003078:	d908      	bls.n	800308c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800307a:	4b56      	ldr	r3, [pc, #344]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4953      	ldr	r1, [pc, #332]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003088:	4313      	orrs	r3, r2
 800308a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d908      	bls.n	80030ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b4a      	ldr	r3, [pc, #296]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f023 020f 	bic.w	r2, r3, #15
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4947      	ldr	r1, [pc, #284]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d055      	beq.n	8003172 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030c6:	4b43      	ldr	r3, [pc, #268]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4940      	ldr	r1, [pc, #256]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030e0:	4b3c      	ldr	r3, [pc, #240]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d121      	bne.n	8003130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0f6      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d115      	bne.n	8003130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0ea      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003110:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0de      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003120:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0d6      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003130:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f023 0207 	bic.w	r2, r3, #7
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4925      	ldr	r1, [pc, #148]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800313e:	4313      	orrs	r3, r2
 8003140:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fe fa23 	bl	800158c <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003148:	e00a      	b.n	8003160 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314a:	f7fe fa1f 	bl	800158c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0be      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003160:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	429a      	cmp	r2, r3
 8003170:	d1eb      	bne.n	800314a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	429a      	cmp	r2, r3
 800318c:	d208      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318e:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f023 020f 	bic.w	r2, r3, #15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	490e      	ldr	r1, [pc, #56]	@ (80031d4 <HAL_RCC_ClockConfig+0x244>)
 800319c:	4313      	orrs	r3, r2
 800319e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d214      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	4906      	ldr	r1, [pc, #24]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <HAL_RCC_ClockConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e086      	b.n	80032de <HAL_RCC_ClockConfig+0x34e>
 80031d0:	52002000 	.word	0x52002000
 80031d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d208      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031f4:	4b3c      	ldr	r3, [pc, #240]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	4939      	ldr	r1, [pc, #228]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003202:	4313      	orrs	r3, r2
 8003204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800321e:	429a      	cmp	r2, r3
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	492e      	ldr	r1, [pc, #184]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003230:	4313      	orrs	r3, r2
 8003232:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	4b28      	ldr	r3, [pc, #160]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800324c:	429a      	cmp	r2, r3
 800324e:	d208      	bcs.n	8003262 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4922      	ldr	r1, [pc, #136]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 800325e:	4313      	orrs	r3, r2
 8003260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800327a:	429a      	cmp	r2, r3
 800327c:	d208      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800327e:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4917      	ldr	r1, [pc, #92]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 800328c:	4313      	orrs	r3, r2
 800328e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003290:	f000 f834 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	4912      	ldr	r1, [pc, #72]	@ (80032ec <HAL_RCC_ClockConfig+0x35c>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ae:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	4a0d      	ldr	r2, [pc, #52]	@ (80032ec <HAL_RCC_ClockConfig+0x35c>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_RCC_ClockConfig+0x360>)
 80032c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032c8:	4a0a      	ldr	r2, [pc, #40]	@ (80032f4 <HAL_RCC_ClockConfig+0x364>)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032ce:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x368>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fe62 	bl	8000f9c <HAL_InitTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	58024400 	.word	0x58024400
 80032ec:	0800a138 	.word	0x0800a138
 80032f0:	24000004 	.word	0x24000004
 80032f4:	24000000 	.word	0x24000000
 80032f8:	24000008 	.word	0x24000008

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	@ 0x24
 8003300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003302:	4bb3      	ldr	r3, [pc, #716]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800330a:	2b18      	cmp	r3, #24
 800330c:	f200 8155 	bhi.w	80035ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003310:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	0800337d 	.word	0x0800337d
 800331c:	080035bb 	.word	0x080035bb
 8003320:	080035bb 	.word	0x080035bb
 8003324:	080035bb 	.word	0x080035bb
 8003328:	080035bb 	.word	0x080035bb
 800332c:	080035bb 	.word	0x080035bb
 8003330:	080035bb 	.word	0x080035bb
 8003334:	080035bb 	.word	0x080035bb
 8003338:	080033a3 	.word	0x080033a3
 800333c:	080035bb 	.word	0x080035bb
 8003340:	080035bb 	.word	0x080035bb
 8003344:	080035bb 	.word	0x080035bb
 8003348:	080035bb 	.word	0x080035bb
 800334c:	080035bb 	.word	0x080035bb
 8003350:	080035bb 	.word	0x080035bb
 8003354:	080035bb 	.word	0x080035bb
 8003358:	080033a9 	.word	0x080033a9
 800335c:	080035bb 	.word	0x080035bb
 8003360:	080035bb 	.word	0x080035bb
 8003364:	080035bb 	.word	0x080035bb
 8003368:	080035bb 	.word	0x080035bb
 800336c:	080035bb 	.word	0x080035bb
 8003370:	080035bb 	.word	0x080035bb
 8003374:	080035bb 	.word	0x080035bb
 8003378:	080033af 	.word	0x080033af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800337c:	4b94      	ldr	r3, [pc, #592]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003388:	4b91      	ldr	r3, [pc, #580]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	4a90      	ldr	r2, [pc, #576]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800339a:	e111      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800339c:	4b8d      	ldr	r3, [pc, #564]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800339e:	61bb      	str	r3, [r7, #24]
      break;
 80033a0:	e10e      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033a2:	4b8d      	ldr	r3, [pc, #564]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033a4:	61bb      	str	r3, [r7, #24]
      break;
 80033a6:	e10b      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033a8:	4b8c      	ldr	r3, [pc, #560]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033aa:	61bb      	str	r3, [r7, #24]
      break;
 80033ac:	e108      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ae:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033b8:	4b85      	ldr	r3, [pc, #532]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033c4:	4b82      	ldr	r3, [pc, #520]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033ce:	4b80      	ldr	r3, [pc, #512]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	08db      	lsrs	r3, r3, #3
 80033d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80e1 	beq.w	80035b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f000 8083 	beq.w	8003500 <HAL_RCC_GetSysClockFreq+0x204>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	f200 80a1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x248>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x114>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d056      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800340e:	e099      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003410:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d02d      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800341c:	4b6c      	ldr	r3, [pc, #432]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	4a6b      	ldr	r2, [pc, #428]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b62      	ldr	r3, [pc, #392]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a02 	vldr	s12, [r7, #8]
 800345a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003476:	e087      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b51      	ldr	r3, [pc, #324]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a02 	vldr	s12, [r7, #8]
 800349e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ba:	e065      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ce:	4b40      	ldr	r3, [pc, #256]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034fe:	e043      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800350e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003512:	4b2f      	ldr	r3, [pc, #188]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003522:	ed97 6a02 	vldr	s12, [r7, #8]
 8003526:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800352a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003542:	e021      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003556:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003566:	ed97 6a02 	vldr	s12, [r7, #8]
 800356a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800356e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800357a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003586:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	0a5b      	lsrs	r3, r3, #9
 800358e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003592:	3301      	adds	r3, #1
 8003594:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ac:	ee17 3a90 	vmov	r3, s15
 80035b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035ba:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035bc:	61bb      	str	r3, [r7, #24]
      break;
 80035be:	bf00      	nop
  }

  return sysclockfreq;
 80035c0:	69bb      	ldr	r3, [r7, #24]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	58024400 	.word	0x58024400
 80035d4:	03d09000 	.word	0x03d09000
 80035d8:	003d0900 	.word	0x003d0900
 80035dc:	007a1200 	.word	0x007a1200
 80035e0:	46000000 	.word	0x46000000
 80035e4:	4c742400 	.word	0x4c742400
 80035e8:	4a742400 	.word	0x4a742400
 80035ec:	4af42400 	.word	0x4af42400

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035f6:	f7ff fe81 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_RCC_GetHCLKFreq+0x50>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	490f      	ldr	r1, [pc, #60]	@ (8003644 <HAL_RCC_GetHCLKFreq+0x54>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_RCC_GetHCLKFreq+0x50>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	4a09      	ldr	r2, [pc, #36]	@ (8003644 <HAL_RCC_GetHCLKFreq+0x54>)
 800361e:	5cd3      	ldrb	r3, [r2, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a07      	ldr	r2, [pc, #28]	@ (8003648 <HAL_RCC_GetHCLKFreq+0x58>)
 800362c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800362e:	4a07      	ldr	r2, [pc, #28]	@ (800364c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <HAL_RCC_GetHCLKFreq+0x58>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	58024400 	.word	0x58024400
 8003644:	0800a138 	.word	0x0800a138
 8003648:	24000004 	.word	0x24000004
 800364c:	24000000 	.word	0x24000000

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003654:	f7ff ffcc 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4904      	ldr	r1, [pc, #16]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	58024400 	.word	0x58024400
 8003678:	0800a138 	.word	0x0800a138

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003680:	f7ff ffb6 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4904      	ldr	r1, [pc, #16]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	58024400 	.word	0x58024400
 80036a4:	0800a138 	.word	0x0800a138

080036a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223f      	movs	r2, #63	@ 0x3f
 80036b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0207 	and.w	r2, r3, #7
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80036d0:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80036e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_RCC_GetClockConfig+0x7c>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_RCC_GetClockConfig+0x80>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	58024400 	.word	0x58024400
 8003728:	52002000 	.word	0x52002000

0800372c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800372c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003730:	b0ca      	sub	sp, #296	@ 0x128
 8003732:	af00      	add	r7, sp, #0
 8003734:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003750:	2500      	movs	r5, #0
 8003752:	ea54 0305 	orrs.w	r3, r4, r5
 8003756:	d049      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800375e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003762:	d02f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003764:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003768:	d828      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800376a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800376e:	d01a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003774:	d822      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800377e:	d007      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003780:	e01c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4bb8      	ldr	r3, [pc, #736]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	4ab7      	ldr	r2, [pc, #732]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800378e:	e01a      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	3308      	adds	r3, #8
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fc8f 	bl	80050bc <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037a4:	e00f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	3328      	adds	r3, #40	@ 0x28
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fd36 	bl	8005220 <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037f8:	f04f 0900 	mov.w	r9, #0
 80037fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003800:	d047      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	2b04      	cmp	r3, #4
 800380a:	d82a      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800380c:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003829 	.word	0x08003829
 8003818:	08003837 	.word	0x08003837
 800381c:	0800384d 	.word	0x0800384d
 8003820:	0800386b 	.word	0x0800386b
 8003824:	0800386b 	.word	0x0800386b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003828:	4b8e      	ldr	r3, [pc, #568]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	4a8d      	ldr	r2, [pc, #564]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003834:	e01a      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	3308      	adds	r3, #8
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fc3c 	bl	80050bc <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800384a:	e00f      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	3328      	adds	r3, #40	@ 0x28
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fce3 	bl	8005220 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800386a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003874:	4b7b      	ldr	r3, [pc, #492]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	f023 0107 	bic.w	r1, r3, #7
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003882:	4a78      	ldr	r2, [pc, #480]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6513      	str	r3, [r2, #80]	@ 0x50
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800389e:	f04f 0b00 	mov.w	fp, #0
 80038a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80038a6:	d04c      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b2:	d030      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b8:	d829      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80038bc:	d02d      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038be:	2bc0      	cmp	r3, #192	@ 0xc0
 80038c0:	d825      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038c2:	2b80      	cmp	r3, #128	@ 0x80
 80038c4:	d018      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d821      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038ce:	2b40      	cmp	r3, #64	@ 0x40
 80038d0:	d007      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038d2:	e01c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d4:	4b63      	ldr	r3, [pc, #396]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	4a62      	ldr	r2, [pc, #392]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038e0:	e01c      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3308      	adds	r3, #8
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fbe6 	bl	80050bc <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f6:	e011      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fc8d 	bl	8005220 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800391a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003924:	4b4f      	ldr	r3, [pc, #316]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003928:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	4a4c      	ldr	r2, [pc, #304]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6513      	str	r3, [r2, #80]	@ 0x50
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800394e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003952:	2300      	movs	r3, #0
 8003954:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d053      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800396a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800396e:	d035      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003974:	d82e      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003976:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800397a:	d031      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800397c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003980:	d828      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003986:	d01a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398c:	d822      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003996:	d007      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003998:	e01c      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399a:	4b32      	ldr	r3, [pc, #200]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	4a31      	ldr	r2, [pc, #196]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039a6:	e01c      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	3308      	adds	r3, #8
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fb83 	bl	80050bc <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039bc:	e011      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	3328      	adds	r3, #40	@ 0x28
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fc2a 	bl	8005220 <RCCEx_PLL3_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d2:	e006      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039da:	e002      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a24:	460b      	mov	r3, r1
 8003a26:	4313      	orrs	r3, r2
 8003a28:	d056      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a36:	d038      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3c:	d831      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a42:	d034      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a48:	d82b      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a4e:	d01d      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a54:	d825      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a60:	e01f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4ba2      	ldr	r3, [pc, #648]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 fb1c 	bl	80050bc <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fbc3 	bl	8005220 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ac8:	4a8a      	ldr	r2, [pc, #552]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ace:	e003      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003aee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003af2:	460b      	mov	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	d03a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	2b30      	cmp	r3, #48	@ 0x30
 8003b00:	d01f      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b02:	2b30      	cmp	r3, #48	@ 0x30
 8003b04:	d819      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d815      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d019      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d111      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b16:	4b77      	ldr	r3, [pc, #476]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	4a76      	ldr	r2, [pc, #472]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	3308      	adds	r3, #8
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fac5 	bl	80050bc <RCCEx_PLL2_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b50:	4b68      	ldr	r3, [pc, #416]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d051      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b98:	d035      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9e:	d82e      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ba0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ba4:	d031      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ba6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003baa:	d828      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb0:	d01a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb6:	d822      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d007      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fa6e 	bl	80050bc <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	3328      	adds	r3, #40	@ 0x28
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 fb15 	bl	8005220 <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c14:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c22:	4a34      	ldr	r2, [pc, #208]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d056      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c5c:	d033      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c62:	d82c      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c68:	d02f      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c6e:	d826      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c74:	d02b      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c7a:	d820      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c86:	d81a      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d022      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d115      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	3308      	adds	r3, #8
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fa0e 	bl	80050bc <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	3328      	adds	r3, #40	@ 0x28
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fab5 	bl	8005220 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cea:	4a02      	ldr	r2, [pc, #8]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d055      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d2c:	d033      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d32:	d82c      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d38:	d02f      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d826      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d44:	d02b      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d4a:	d820      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d50:	d012      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d56:	d81a      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d022      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d60:	d115      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d66:	3308      	adds	r3, #8
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f9a6 	bl	80050bc <RCCEx_PLL2_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d76:	e015      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	3328      	adds	r3, #40	@ 0x28
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 fa4d 	bl	8005220 <RCCEx_PLL3_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d96:	bf00      	nop
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dac:	4ba3      	ldr	r3, [pc, #652]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dbc:	4a9f      	ldr	r2, [pc, #636]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc2:	e003      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d037      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003df6:	d00e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dfc:	d816      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e06:	d111      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e08:	4b8c      	ldr	r3, [pc, #560]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	4a8b      	ldr	r2, [pc, #556]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e14:	e00f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f94c 	bl	80050bc <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	4a7b      	ldr	r2, [pc, #492]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d039      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d81c      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e86:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003e9d 	.word	0x08003e9d
 8003e94:	08003eab 	.word	0x08003eab
 8003e98:	08003ec9 	.word	0x08003ec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9c:	4b67      	ldr	r3, [pc, #412]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	4a66      	ldr	r2, [pc, #408]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	3308      	adds	r3, #8
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f902 	bl	80050bc <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ebe:	e004      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec6:	e000      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	f023 0103 	bic.w	r1, r3, #3
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee0:	4a56      	ldr	r2, [pc, #344]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f000 809f 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f12:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4a      	ldr	r2, [pc, #296]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f1e:	f7fd fb35 	bl	800158c <HAL_GetTick>
 8003f22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fb30 	bl	800158c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b64      	cmp	r3, #100	@ 0x64
 8003f36:	d903      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3e:	e005      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f40:	4b3f      	ldr	r3, [pc, #252]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ed      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d179      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f54:	4b39      	ldr	r3, [pc, #228]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f60:	4053      	eors	r3, r2
 8003f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f6a:	4b34      	ldr	r3, [pc, #208]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f76:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a30      	ldr	r2, [pc, #192]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa2:	d118      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd faf2 	bl	800158c <HAL_GetTick>
 8003fa8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fac:	e00d      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fd faed 	bl	800158c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fb8:	1ad2      	subs	r2, r2, r3
 8003fba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d903      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fca:	4b1c      	ldr	r3, [pc, #112]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0eb      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d129      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fee:	d10e      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004000:	091a      	lsrs	r2, r3, #4
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004004:	4013      	ands	r3, r2
 8004006:	4a0d      	ldr	r2, [pc, #52]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6113      	str	r3, [r2, #16]
 800400c:	e005      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004014:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004018:	6113      	str	r3, [r2, #16]
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402a:	4a04      	ldr	r2, [pc, #16]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004030:	e00e      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800403a:	e009      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800403c:	58024400 	.word	0x58024400
 8004040:	58024800 	.word	0x58024800
 8004044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 0301 	and.w	r3, r2, #1
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	f000 8089 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004078:	2b28      	cmp	r3, #40	@ 0x28
 800407a:	d86b      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	0800415d 	.word	0x0800415d
 8004088:	08004155 	.word	0x08004155
 800408c:	08004155 	.word	0x08004155
 8004090:	08004155 	.word	0x08004155
 8004094:	08004155 	.word	0x08004155
 8004098:	08004155 	.word	0x08004155
 800409c:	08004155 	.word	0x08004155
 80040a0:	08004155 	.word	0x08004155
 80040a4:	08004129 	.word	0x08004129
 80040a8:	08004155 	.word	0x08004155
 80040ac:	08004155 	.word	0x08004155
 80040b0:	08004155 	.word	0x08004155
 80040b4:	08004155 	.word	0x08004155
 80040b8:	08004155 	.word	0x08004155
 80040bc:	08004155 	.word	0x08004155
 80040c0:	08004155 	.word	0x08004155
 80040c4:	0800413f 	.word	0x0800413f
 80040c8:	08004155 	.word	0x08004155
 80040cc:	08004155 	.word	0x08004155
 80040d0:	08004155 	.word	0x08004155
 80040d4:	08004155 	.word	0x08004155
 80040d8:	08004155 	.word	0x08004155
 80040dc:	08004155 	.word	0x08004155
 80040e0:	08004155 	.word	0x08004155
 80040e4:	0800415d 	.word	0x0800415d
 80040e8:	08004155 	.word	0x08004155
 80040ec:	08004155 	.word	0x08004155
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004155 	.word	0x08004155
 80040f8:	08004155 	.word	0x08004155
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004155 	.word	0x08004155
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004155 	.word	0x08004155
 800410c:	08004155 	.word	0x08004155
 8004110:	08004155 	.word	0x08004155
 8004114:	08004155 	.word	0x08004155
 8004118:	08004155 	.word	0x08004155
 800411c:	08004155 	.word	0x08004155
 8004120:	08004155 	.word	0x08004155
 8004124:	0800415d 	.word	0x0800415d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	3308      	adds	r3, #8
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 ffc3 	bl	80050bc <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800413c:	e00f      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004142:	3328      	adds	r3, #40	@ 0x28
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f001 f86a 	bl	8005220 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004166:	4bbf      	ldr	r3, [pc, #764]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004174:	4abb      	ldr	r2, [pc, #748]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004176:	430b      	orrs	r3, r1
 8004178:	6553      	str	r3, [r2, #84]	@ 0x54
 800417a:	e003      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0302 	and.w	r3, r2, #2
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800419a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d041      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d824      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041ae:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	08004201 	.word	0x08004201
 80041b8:	080041cd 	.word	0x080041cd
 80041bc:	080041e3 	.word	0x080041e3
 80041c0:	08004201 	.word	0x08004201
 80041c4:	08004201 	.word	0x08004201
 80041c8:	08004201 	.word	0x08004201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	3308      	adds	r3, #8
 80041d2:	2101      	movs	r1, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 ff71 	bl	80050bc <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041e0:	e00f      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	3328      	adds	r3, #40	@ 0x28
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f818 	bl	8005220 <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800420a:	4b96      	ldr	r3, [pc, #600]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f023 0107 	bic.w	r1, r3, #7
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004218:	4a92      	ldr	r2, [pc, #584]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421a:	430b      	orrs	r3, r1
 800421c:	6553      	str	r3, [r2, #84]	@ 0x54
 800421e:	e003      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f002 0304 	and.w	r3, r2, #4
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800423e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	d044      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004250:	2b05      	cmp	r3, #5
 8004252:	d825      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004254:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	080042a9 	.word	0x080042a9
 8004260:	08004275 	.word	0x08004275
 8004264:	0800428b 	.word	0x0800428b
 8004268:	080042a9 	.word	0x080042a9
 800426c:	080042a9 	.word	0x080042a9
 8004270:	080042a9 	.word	0x080042a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	3308      	adds	r3, #8
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 ff1d 	bl	80050bc <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004288:	e00f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	3328      	adds	r3, #40	@ 0x28
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ffc4 	bl	8005220 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	f023 0107 	bic.w	r1, r3, #7
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c2:	4a68      	ldr	r2, [pc, #416]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f002 0320 	and.w	r3, r2, #32
 80042de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d055      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042fe:	d033      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004304:	d82c      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d02f      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004310:	d826      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004316:	d02b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800431c:	d820      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004322:	d012      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004328:	d81a      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d022      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004332:	d115      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	3308      	adds	r3, #8
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f000 febd 	bl	80050bc <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004348:	e015      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	3328      	adds	r3, #40	@ 0x28
 8004350:	2102      	movs	r1, #2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 ff64 	bl	8005220 <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800435e:	e00a      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004366:	e006      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004368:	bf00      	nop
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800437e:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004382:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438e:	4a35      	ldr	r2, [pc, #212]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6553      	str	r3, [r2, #84]	@ 0x54
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80043aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80043b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d058      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043ca:	d033      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043d0:	d82c      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d6:	d02f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043dc:	d826      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e2:	d02b      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e8:	d820      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ee:	d012      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f4:	d81a      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d022      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fe:	d115      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	3308      	adds	r3, #8
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fe57 	bl	80050bc <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004414:	e015      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fefe 	bl	8005220 <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800442a:	e00a      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004432:	e006      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004434:	bf00      	nop
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10e      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800445a:	4a02      	ldr	r2, [pc, #8]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800445c:	430b      	orrs	r3, r1
 800445e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d055      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004498:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800449c:	d033      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800449e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044a2:	d82c      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a8:	d02f      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ae:	d826      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044b4:	d02b      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044ba:	d820      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c0:	d012      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c6:	d81a      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d022      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d0:	d115      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	3308      	adds	r3, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fdee 	bl	80050bc <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044e6:	e015      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	3328      	adds	r3, #40	@ 0x28
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fe95 	bl	8005220 <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044fc:	e00a      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004506:	bf00      	nop
 8004508:	e004      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800451c:	4ba1      	ldr	r3, [pc, #644]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800452c:	4a9d      	ldr	r2, [pc, #628]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6593      	str	r3, [r2, #88]	@ 0x58
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f002 0308 	and.w	r3, r2, #8
 8004548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d01e      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	3328      	adds	r3, #40	@ 0x28
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fe54 	bl	8005220 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004584:	4b87      	ldr	r3, [pc, #540]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004594:	4a83      	ldr	r2, [pc, #524]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004596:	430b      	orrs	r3, r1
 8004598:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f002 0310 	and.w	r3, r2, #16
 80045a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d01e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	3328      	adds	r3, #40	@ 0x28
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fe25 	bl	8005220 <RCCEx_PLL3_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800460e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d03e      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004624:	d022      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800462a:	d81b      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d00b      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004636:	e015      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	3308      	adds	r3, #8
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fd3b 	bl	80050bc <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800464c:	e00f      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	3328      	adds	r3, #40	@ 0x28
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fde2 	bl	8005220 <RCCEx_PLL3_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004662:	e004      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466a:	e000      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800466c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004676:	4b4b      	ldr	r3, [pc, #300]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004686:	4a47      	ldr	r2, [pc, #284]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6593      	str	r3, [r2, #88]	@ 0x58
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a4:	2300      	movs	r3, #0
 80046a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046be:	d01f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046c4:	d818      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046d0:	d007      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4b33      	ldr	r3, [pc, #204]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	4a32      	ldr	r2, [pc, #200]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046e0:	e00f      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3328      	adds	r3, #40	@ 0x28
 80046e8:	2101      	movs	r1, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fd98 	bl	8005220 <RCCEx_PLL3_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046f6:	e004      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470a:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004736:	673b      	str	r3, [r7, #112]	@ 0x70
 8004738:	2300      	movs	r3, #0
 800473a:	677b      	str	r3, [r7, #116]	@ 0x74
 800473c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d034      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d007      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	4a11      	ldr	r2, [pc, #68]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004764:	e00e      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	3308      	adds	r3, #8
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fca4 	bl	80050bc <RCCEx_PLL2_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800477a:	e003      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479a:	4a02      	ldr	r2, [pc, #8]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479c:	430b      	orrs	r3, r1
 800479e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047be:	2300      	movs	r3, #0
 80047c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	d00c      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	3328      	adds	r3, #40	@ 0x28
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fd23 	bl	8005220 <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f4:	2300      	movs	r3, #0
 80047f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d038      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800480e:	d018      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004814:	d811      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481a:	d014      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800481c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004820:	d80b      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800482a:	d106      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4bc3      	ldr	r3, [pc, #780]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	4ac2      	ldr	r2, [pc, #776]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004838:	e008      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004840:	e004      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800484a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004854:	4bb9      	ldr	r3, [pc, #740]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004858:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004864:	4ab5      	ldr	r2, [pc, #724]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004866:	430b      	orrs	r3, r1
 8004868:	6553      	str	r3, [r2, #84]	@ 0x54
 800486a:	e003      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004882:	2300      	movs	r3, #0
 8004884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004890:	4baa      	ldr	r3, [pc, #680]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004894:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	4aa7      	ldr	r2, [pc, #668]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80048b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b2:	2300      	movs	r3, #0
 80048b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048c0:	4b9e      	ldr	r3, [pc, #632]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048d0:	4a9a      	ldr	r2, [pc, #616]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e4:	2300      	movs	r3, #0
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048f2:	4b92      	ldr	r3, [pc, #584]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004900:	4a8e      	ldr	r2, [pc, #568]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004902:	430b      	orrs	r3, r1
 8004904:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004912:	643b      	str	r3, [r7, #64]	@ 0x40
 8004914:	2300      	movs	r3, #0
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
 8004918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004922:	4b86      	ldr	r3, [pc, #536]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4a85      	ldr	r2, [pc, #532]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004928:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800492c:	6113      	str	r3, [r2, #16]
 800492e:	4b83      	ldr	r3, [pc, #524]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004930:	6919      	ldr	r1, [r3, #16]
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800493a:	4a80      	ldr	r2, [pc, #512]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800494c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800494e:	2300      	movs	r3, #0
 8004950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d009      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800495c:	4b77      	ldr	r3, [pc, #476]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004960:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496a:	4a74      	ldr	r2, [pc, #464]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496c:	430b      	orrs	r3, r1
 800496e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
 800497e:	2300      	movs	r3, #0
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
 8004982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004986:	460b      	mov	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800498c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800499c:	4a67      	ldr	r2, [pc, #412]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	2100      	movs	r1, #0
 80049ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3308      	adds	r3, #8
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fb78 	bl	80050bc <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	2100      	movs	r1, #0
 80049ec:	6239      	str	r1, [r7, #32]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3308      	adds	r3, #8
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb58 	bl	80050bc <RCCEx_PLL2_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	61b9      	str	r1, [r7, #24]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d011      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	3308      	adds	r3, #8
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb38 	bl	80050bc <RCCEx_PLL2_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6139      	str	r1, [r7, #16]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	3328      	adds	r3, #40	@ 0x28
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fbca 	bl	8005220 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	2100      	movs	r1, #0
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	f003 0310 	and.w	r3, r3, #16
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d011      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	3328      	adds	r3, #40	@ 0x28
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fbaa 	bl	8005220 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	2100      	movs	r1, #0
 8004aec:	6039      	str	r1, [r7, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d011      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2102      	movs	r1, #2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fb8a 	bl	8005220 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b36:	46bd      	mov	sp, r7
 8004b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3c:	58024400 	.word	0x58024400

08004b40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b44:	f7fe fd54 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4904      	ldr	r1, [pc, #16]	@ (8004b68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	58024400 	.word	0x58024400
 8004b68:	0800a138 	.word	0x0800a138

08004b6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	@ 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b74:	4ba1      	ldr	r3, [pc, #644]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	0b1b      	lsrs	r3, r3, #12
 8004b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b96:	4b99      	ldr	r3, [pc, #612]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8111 	beq.w	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f000 8083 	beq.w	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f200 80a1 	bhi.w	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d056      	beq.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bd6:	e099      	b.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd8:	4b88      	ldr	r3, [pc, #544]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02d      	beq.n	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004be4:	4b85      	ldr	r3, [pc, #532]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	4a84      	ldr	r2, [pc, #528]	@ (8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c3e:	e087      	b.n	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	e065      	b.n	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b59      	ldr	r3, [pc, #356]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc6:	e043      	b.n	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0a:	e021      	b.n	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1e:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d50:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	ee17 2a90 	vmov	r2, s15
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	ee17 2a90 	vmov	r2, s15
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004dac:	4b13      	ldr	r3, [pc, #76]	@ (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	0e1b      	lsrs	r3, r3, #24
 8004db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dda:	e008      	b.n	8004dee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
}
 8004dee:	bf00      	nop
 8004df0:	3724      	adds	r7, #36	@ 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	03d09000 	.word	0x03d09000
 8004e04:	46000000 	.word	0x46000000
 8004e08:	4c742400 	.word	0x4c742400
 8004e0c:	4a742400 	.word	0x4a742400
 8004e10:	4af42400 	.word	0x4af42400

08004e14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	@ 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e1c:	4ba1      	ldr	r3, [pc, #644]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e26:	4b9f      	ldr	r3, [pc, #636]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	0d1b      	lsrs	r3, r3, #20
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e32:	4b9c      	ldr	r3, [pc, #624]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e3e:	4b99      	ldr	r3, [pc, #612]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	08db      	lsrs	r3, r3, #3
 8004e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8111 	beq.w	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f000 8083 	beq.w	8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f200 80a1 	bhi.w	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d056      	beq.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e7e:	e099      	b.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e80:	4b88      	ldr	r3, [pc, #544]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02d      	beq.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e8c:	4b85      	ldr	r3, [pc, #532]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	4a84      	ldr	r2, [pc, #528]	@ (80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ee6:	e087      	b.n	8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b6a      	ldr	r3, [pc, #424]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	e065      	b.n	8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b59      	ldr	r3, [pc, #356]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6e:	e043      	b.n	8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb2:	e021      	b.n	8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc6:	4b37      	ldr	r3, [pc, #220]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ff6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800500e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005012:	edd7 6a07 	vldr	s13, [r7, #28]
 8005016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	ee17 2a90 	vmov	r2, s15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005026:	4b1f      	ldr	r3, [pc, #124]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800503c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005040:	edd7 6a07 	vldr	s13, [r7, #28]
 8005044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800504c:	ee17 2a90 	vmov	r2, s15
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005054:	4b13      	ldr	r3, [pc, #76]	@ (80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800506a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800506e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507a:	ee17 2a90 	vmov	r2, s15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
}
 8005096:	bf00      	nop
 8005098:	3724      	adds	r7, #36	@ 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400
 80050a8:	03d09000 	.word	0x03d09000
 80050ac:	46000000 	.word	0x46000000
 80050b0:	4c742400 	.word	0x4c742400
 80050b4:	4a742400 	.word	0x4a742400
 80050b8:	4af42400 	.word	0x4af42400

080050bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050ca:	4b53      	ldr	r3, [pc, #332]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d101      	bne.n	80050da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e099      	b.n	800520e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050da:	4b4f      	ldr	r3, [pc, #316]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a4e      	ldr	r2, [pc, #312]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fc fa51 	bl	800158c <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050ec:	e008      	b.n	8005100 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ee:	f7fc fa4d 	bl	800158c <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e086      	b.n	800520e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005100:	4b45      	ldr	r3, [pc, #276]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800510c:	4b42      	ldr	r3, [pc, #264]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	493f      	ldr	r1, [pc, #252]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	3b01      	subs	r3, #1
 8005126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	3b01      	subs	r3, #1
 8005130:	025b      	lsls	r3, r3, #9
 8005132:	b29b      	uxth	r3, r3
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	3b01      	subs	r3, #1
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	3b01      	subs	r3, #1
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005150:	4931      	ldr	r1, [pc, #196]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005156:	4b30      	ldr	r3, [pc, #192]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	492d      	ldr	r1, [pc, #180]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005164:	4313      	orrs	r3, r2
 8005166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	f023 0220 	bic.w	r2, r3, #32
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	4928      	ldr	r1, [pc, #160]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800517a:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	4a26      	ldr	r2, [pc, #152]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005186:	4b24      	ldr	r3, [pc, #144]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800518a:	4b24      	ldr	r3, [pc, #144]	@ (800521c <RCCEx_PLL2_Config+0x160>)
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	69d2      	ldr	r2, [r2, #28]
 8005192:	00d2      	lsls	r2, r2, #3
 8005194:	4920      	ldr	r1, [pc, #128]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800519a:	4b1f      	ldr	r3, [pc, #124]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	4a1e      	ldr	r2, [pc, #120]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	4a19      	ldr	r2, [pc, #100]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051b8:	e00f      	b.n	80051da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d106      	bne.n	80051ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051c0:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	4a14      	ldr	r2, [pc, #80]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051cc:	e005      	b.n	80051da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051ce:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	4a11      	ldr	r2, [pc, #68]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051da:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a0e      	ldr	r2, [pc, #56]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e6:	f7fc f9d1 	bl	800158c <HAL_GetTick>
 80051ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051ec:	e008      	b.n	8005200 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051ee:	f7fc f9cd 	bl	800158c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <RCCEx_PLL2_Config+0x15c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
 800521c:	ffff0007 	.word	0xffff0007

08005220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800522e:	4b53      	ldr	r3, [pc, #332]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b03      	cmp	r3, #3
 8005238:	d101      	bne.n	800523e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e099      	b.n	8005372 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800523e:	4b4f      	ldr	r3, [pc, #316]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4e      	ldr	r2, [pc, #312]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fc f99f 	bl	800158c <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005250:	e008      	b.n	8005264 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005252:	f7fc f99b 	bl	800158c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e086      	b.n	8005372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005264:	4b45      	ldr	r3, [pc, #276]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005270:	4b42      	ldr	r3, [pc, #264]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	051b      	lsls	r3, r3, #20
 800527e:	493f      	ldr	r1, [pc, #252]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	628b      	str	r3, [r1, #40]	@ 0x28
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	3b01      	subs	r3, #1
 8005294:	025b      	lsls	r3, r3, #9
 8005296:	b29b      	uxth	r3, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052b4:	4931      	ldr	r1, [pc, #196]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052ba:	4b30      	ldr	r3, [pc, #192]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	492d      	ldr	r1, [pc, #180]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052cc:	4b2b      	ldr	r3, [pc, #172]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	4928      	ldr	r1, [pc, #160]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052de:	4b27      	ldr	r3, [pc, #156]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4a26      	ldr	r2, [pc, #152]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052ea:	4b24      	ldr	r3, [pc, #144]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ee:	4b24      	ldr	r3, [pc, #144]	@ (8005380 <RCCEx_PLL3_Config+0x160>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	69d2      	ldr	r2, [r2, #28]
 80052f6:	00d2      	lsls	r2, r2, #3
 80052f8:	4920      	ldr	r1, [pc, #128]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052fe:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	4a19      	ldr	r2, [pc, #100]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800531a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800531c:	e00f      	b.n	800533e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d106      	bne.n	8005332 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005324:	4b15      	ldr	r3, [pc, #84]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	4a14      	ldr	r2, [pc, #80]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 800532a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800532e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005330:	e005      	b.n	800533e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4a11      	ldr	r2, [pc, #68]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800533e:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0e      	ldr	r2, [pc, #56]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534a:	f7fc f91f 	bl	800158c <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005350:	e008      	b.n	8005364 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005352:	f7fc f91b 	bl	800158c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <RCCEx_PLL3_Config+0x15c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	ffff0007 	.word	0xffff0007

08005384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e049      	b.n	800542a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f841 	bl	8005432 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f000 f9e8 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e054      	b.n	800550a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a26      	ldr	r2, [pc, #152]	@ (8005518 <HAL_TIM_Base_Start_IT+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548a:	d01d      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a22      	ldr	r2, [pc, #136]	@ (800551c <HAL_TIM_Base_Start_IT+0xd4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a21      	ldr	r2, [pc, #132]	@ (8005520 <HAL_TIM_Base_Start_IT+0xd8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005524 <HAL_TIM_Base_Start_IT+0xdc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005528 <HAL_TIM_Base_Start_IT+0xe0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <HAL_TIM_Base_Start_IT+0xe8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d115      	bne.n	80054f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_TIM_Base_Start_IT+0xec>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d015      	beq.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e0:	d011      	beq.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	e008      	b.n	8005506 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e000      	b.n	8005508 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40001800 	.word	0x40001800
 8005530:	40014000 	.word	0x40014000
 8005534:	00010007 	.word	0x00010007

08005538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d020      	beq.n	800559c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0202 	mvn.w	r2, #2
 800556c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f8e9 	bl	800575a <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f8db 	bl	8005746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f8ec 	bl	800576e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0204 	mvn.w	r2, #4
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8c3 	bl	800575a <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8b5 	bl	8005746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8c6 	bl	800576e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0208 	mvn.w	r2, #8
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f89d 	bl	800575a <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f88f 	bl	8005746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8a0 	bl	800576e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2208      	movs	r2, #8
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f877 	bl	800575a <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f869 	bl	8005746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f87a 	bl	800576e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0201 	mvn.w	r2, #1
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fc46 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80056ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f913 	bl	80058f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f90b 	bl	800590c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f834 	bl	8005782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0220 	mvn.w	r2, #32
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8d3 	bl	80058e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a46      	ldr	r2, [pc, #280]	@ (80058c4 <TIM_Base_SetConfig+0x12c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a43      	ldr	r2, [pc, #268]	@ (80058c8 <TIM_Base_SetConfig+0x130>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a42      	ldr	r2, [pc, #264]	@ (80058cc <TIM_Base_SetConfig+0x134>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a41      	ldr	r2, [pc, #260]	@ (80058d0 <TIM_Base_SetConfig+0x138>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a40      	ldr	r2, [pc, #256]	@ (80058d4 <TIM_Base_SetConfig+0x13c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a35      	ldr	r2, [pc, #212]	@ (80058c4 <TIM_Base_SetConfig+0x12c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01f      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a32      	ldr	r2, [pc, #200]	@ (80058c8 <TIM_Base_SetConfig+0x130>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a31      	ldr	r2, [pc, #196]	@ (80058cc <TIM_Base_SetConfig+0x134>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a30      	ldr	r2, [pc, #192]	@ (80058d0 <TIM_Base_SetConfig+0x138>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2f      	ldr	r2, [pc, #188]	@ (80058d4 <TIM_Base_SetConfig+0x13c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2e      	ldr	r2, [pc, #184]	@ (80058d8 <TIM_Base_SetConfig+0x140>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <TIM_Base_SetConfig+0x144>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <TIM_Base_SetConfig+0x148>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <TIM_Base_SetConfig+0x12c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a18      	ldr	r2, [pc, #96]	@ (80058d4 <TIM_Base_SetConfig+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	@ (80058d8 <TIM_Base_SetConfig+0x140>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a16      	ldr	r2, [pc, #88]	@ (80058dc <TIM_Base_SetConfig+0x144>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <TIM_Base_SetConfig+0x148>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	611a      	str	r2, [r3, #16]
  }
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e042      	b.n	80059b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fb fc8f 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	@ 0x24
 800594e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fe1e 	bl	80065ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8b3 	bl	8005adc <UART_SetConfig>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e01b      	b.n	80059b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800598e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800599e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fe9d 	bl	80066f0 <UART_CheckIdleState>
 80059b6:	4603      	mov	r3, r0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	@ 0x28
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d17b      	bne.n	8005ad2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_UART_Transmit+0x26>
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e074      	b.n	8005ad4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2221      	movs	r2, #33	@ 0x21
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fa:	f7fb fdc7 	bl	800158c <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a18:	d108      	bne.n	8005a2c <HAL_UART_Transmit+0x6c>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e003      	b.n	8005a34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a34:	e030      	b.n	8005a98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	@ 0x80
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 feff 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e03d      	b.n	8005ad4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3302      	adds	r3, #2
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e007      	b.n	8005a86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1c8      	bne.n	8005a36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2140      	movs	r1, #64	@ 0x40
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fec8 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e006      	b.n	8005ad4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae0:	b092      	sub	sp, #72	@ 0x48
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4bbe      	ldr	r3, [pc, #760]	@ (8005e04 <UART_SetConfig+0x328>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4ab3      	ldr	r2, [pc, #716]	@ (8005e08 <UART_SetConfig+0x32c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b44:	4313      	orrs	r3, r2
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4baf      	ldr	r3, [pc, #700]	@ (8005e0c <UART_SetConfig+0x330>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	f023 010f 	bic.w	r1, r3, #15
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4aa6      	ldr	r2, [pc, #664]	@ (8005e10 <UART_SetConfig+0x334>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d177      	bne.n	8005c6c <UART_SetConfig+0x190>
 8005b7c:	4ba5      	ldr	r3, [pc, #660]	@ (8005e14 <UART_SetConfig+0x338>)
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b84:	2b28      	cmp	r3, #40	@ 0x28
 8005b86:	d86d      	bhi.n	8005c64 <UART_SetConfig+0x188>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <UART_SetConfig+0xb4>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005c35 	.word	0x08005c35
 8005b94:	08005c65 	.word	0x08005c65
 8005b98:	08005c65 	.word	0x08005c65
 8005b9c:	08005c65 	.word	0x08005c65
 8005ba0:	08005c65 	.word	0x08005c65
 8005ba4:	08005c65 	.word	0x08005c65
 8005ba8:	08005c65 	.word	0x08005c65
 8005bac:	08005c65 	.word	0x08005c65
 8005bb0:	08005c3d 	.word	0x08005c3d
 8005bb4:	08005c65 	.word	0x08005c65
 8005bb8:	08005c65 	.word	0x08005c65
 8005bbc:	08005c65 	.word	0x08005c65
 8005bc0:	08005c65 	.word	0x08005c65
 8005bc4:	08005c65 	.word	0x08005c65
 8005bc8:	08005c65 	.word	0x08005c65
 8005bcc:	08005c65 	.word	0x08005c65
 8005bd0:	08005c45 	.word	0x08005c45
 8005bd4:	08005c65 	.word	0x08005c65
 8005bd8:	08005c65 	.word	0x08005c65
 8005bdc:	08005c65 	.word	0x08005c65
 8005be0:	08005c65 	.word	0x08005c65
 8005be4:	08005c65 	.word	0x08005c65
 8005be8:	08005c65 	.word	0x08005c65
 8005bec:	08005c65 	.word	0x08005c65
 8005bf0:	08005c4d 	.word	0x08005c4d
 8005bf4:	08005c65 	.word	0x08005c65
 8005bf8:	08005c65 	.word	0x08005c65
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c65 	.word	0x08005c65
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c55 	.word	0x08005c55
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c65 	.word	0x08005c65
 8005c20:	08005c65 	.word	0x08005c65
 8005c24:	08005c65 	.word	0x08005c65
 8005c28:	08005c65 	.word	0x08005c65
 8005c2c:	08005c65 	.word	0x08005c65
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e222      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e21e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e21a      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e216      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e212      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c5c:	2340      	movs	r3, #64	@ 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e20e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e20a      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a69      	ldr	r2, [pc, #420]	@ (8005e18 <UART_SetConfig+0x33c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d130      	bne.n	8005cd8 <UART_SetConfig+0x1fc>
 8005c76:	4b67      	ldr	r3, [pc, #412]	@ (8005e14 <UART_SetConfig+0x338>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d826      	bhi.n	8005cd0 <UART_SetConfig+0x1f4>
 8005c82:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <UART_SetConfig+0x1ac>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005ca1 	.word	0x08005ca1
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e1ec      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e1e8      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e1e4      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e1e0      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e1dc      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cc8:	2340      	movs	r3, #64	@ 0x40
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e1d8      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e1d4      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8005e1c <UART_SetConfig+0x340>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d130      	bne.n	8005d44 <UART_SetConfig+0x268>
 8005ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8005e14 <UART_SetConfig+0x338>)
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d826      	bhi.n	8005d3c <UART_SetConfig+0x260>
 8005cee:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <UART_SetConfig+0x218>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d1d 	.word	0x08005d1d
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1b6      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e1b2      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e1ae      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e1aa      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e1a6      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e1a2      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e19e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a35      	ldr	r2, [pc, #212]	@ (8005e20 <UART_SetConfig+0x344>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d130      	bne.n	8005db0 <UART_SetConfig+0x2d4>
 8005d4e:	4b31      	ldr	r3, [pc, #196]	@ (8005e14 <UART_SetConfig+0x338>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d826      	bhi.n	8005da8 <UART_SetConfig+0x2cc>
 8005d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <UART_SetConfig+0x284>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d89 	.word	0x08005d89
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e180      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e17c      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e178      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e174      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e170      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005da0:	2340      	movs	r3, #64	@ 0x40
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e16c      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005da8:	2380      	movs	r3, #128	@ 0x80
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e168      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <UART_SetConfig+0x348>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d142      	bne.n	8005e40 <UART_SetConfig+0x364>
 8005dba:	4b16      	ldr	r3, [pc, #88]	@ (8005e14 <UART_SetConfig+0x338>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d838      	bhi.n	8005e38 <UART_SetConfig+0x35c>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <UART_SetConfig+0x2f0>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	08005df5 	.word	0x08005df5
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e29 	.word	0x08005e29
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e14a      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e146      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e142      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e13e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005e04:	cfff69f3 	.word	0xcfff69f3
 8005e08:	58000c00 	.word	0x58000c00
 8005e0c:	11fff4ff 	.word	0x11fff4ff
 8005e10:	40011000 	.word	0x40011000
 8005e14:	58024400 	.word	0x58024400
 8005e18:	40004400 	.word	0x40004400
 8005e1c:	40004800 	.word	0x40004800
 8005e20:	40004c00 	.word	0x40004c00
 8005e24:	40005000 	.word	0x40005000
 8005e28:	2320      	movs	r3, #32
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e128      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005e30:	2340      	movs	r3, #64	@ 0x40
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e124      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e120      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4acb      	ldr	r2, [pc, #812]	@ (8006174 <UART_SetConfig+0x698>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d176      	bne.n	8005f38 <UART_SetConfig+0x45c>
 8005e4a:	4bcb      	ldr	r3, [pc, #812]	@ (8006178 <UART_SetConfig+0x69c>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e52:	2b28      	cmp	r3, #40	@ 0x28
 8005e54:	d86c      	bhi.n	8005f30 <UART_SetConfig+0x454>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <UART_SetConfig+0x380>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005f01 	.word	0x08005f01
 8005e60:	08005f31 	.word	0x08005f31
 8005e64:	08005f31 	.word	0x08005f31
 8005e68:	08005f31 	.word	0x08005f31
 8005e6c:	08005f31 	.word	0x08005f31
 8005e70:	08005f31 	.word	0x08005f31
 8005e74:	08005f31 	.word	0x08005f31
 8005e78:	08005f31 	.word	0x08005f31
 8005e7c:	08005f09 	.word	0x08005f09
 8005e80:	08005f31 	.word	0x08005f31
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f31 	.word	0x08005f31
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f31 	.word	0x08005f31
 8005e94:	08005f31 	.word	0x08005f31
 8005e98:	08005f31 	.word	0x08005f31
 8005e9c:	08005f11 	.word	0x08005f11
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f31 	.word	0x08005f31
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f31 	.word	0x08005f31
 8005eb4:	08005f31 	.word	0x08005f31
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f19 	.word	0x08005f19
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f31 	.word	0x08005f31
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e0bc      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e0b8      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e0b4      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e0b0      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f20:	2320      	movs	r3, #32
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e0ac      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f28:	2340      	movs	r3, #64	@ 0x40
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e0a8      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f30:	2380      	movs	r3, #128	@ 0x80
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f36:	e0a4      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a8f      	ldr	r2, [pc, #572]	@ (800617c <UART_SetConfig+0x6a0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d130      	bne.n	8005fa4 <UART_SetConfig+0x4c8>
 8005f42:	4b8d      	ldr	r3, [pc, #564]	@ (8006178 <UART_SetConfig+0x69c>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d826      	bhi.n	8005f9c <UART_SetConfig+0x4c0>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <UART_SetConfig+0x478>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f6d 	.word	0x08005f6d
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e086      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e082      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e07e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e07a      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e076      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f94:	2340      	movs	r3, #64	@ 0x40
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e072      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005f9c:	2380      	movs	r3, #128	@ 0x80
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa2:	e06e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a75      	ldr	r2, [pc, #468]	@ (8006180 <UART_SetConfig+0x6a4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d130      	bne.n	8006010 <UART_SetConfig+0x534>
 8005fae:	4b72      	ldr	r3, [pc, #456]	@ (8006178 <UART_SetConfig+0x69c>)
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d826      	bhi.n	8006008 <UART_SetConfig+0x52c>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <UART_SetConfig+0x4e4>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fd9 	.word	0x08005fd9
 8005fc4:	08005fe1 	.word	0x08005fe1
 8005fc8:	08005fe9 	.word	0x08005fe9
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff9 	.word	0x08005ff9
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e050      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e04c      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005fe8:	2308      	movs	r3, #8
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e048      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e044      	b.n	8006082 <UART_SetConfig+0x5a6>
 8005ff8:	2320      	movs	r3, #32
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e040      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006000:	2340      	movs	r3, #64	@ 0x40
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e03c      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006008:	2380      	movs	r3, #128	@ 0x80
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e038      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5b      	ldr	r2, [pc, #364]	@ (8006184 <UART_SetConfig+0x6a8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d130      	bne.n	800607c <UART_SetConfig+0x5a0>
 800601a:	4b57      	ldr	r3, [pc, #348]	@ (8006178 <UART_SetConfig+0x69c>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b05      	cmp	r3, #5
 8006024:	d826      	bhi.n	8006074 <UART_SetConfig+0x598>
 8006026:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <UART_SetConfig+0x550>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	08006045 	.word	0x08006045
 8006030:	0800604d 	.word	0x0800604d
 8006034:	08006055 	.word	0x08006055
 8006038:	0800605d 	.word	0x0800605d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800606d 	.word	0x0800606d
 8006044:	2302      	movs	r3, #2
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e01a      	b.n	8006082 <UART_SetConfig+0x5a6>
 800604c:	2304      	movs	r3, #4
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e016      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006054:	2308      	movs	r3, #8
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e012      	b.n	8006082 <UART_SetConfig+0x5a6>
 800605c:	2310      	movs	r3, #16
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e00e      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006064:	2320      	movs	r3, #32
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e00a      	b.n	8006082 <UART_SetConfig+0x5a6>
 800606c:	2340      	movs	r3, #64	@ 0x40
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e006      	b.n	8006082 <UART_SetConfig+0x5a6>
 8006074:	2380      	movs	r3, #128	@ 0x80
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e002      	b.n	8006082 <UART_SetConfig+0x5a6>
 800607c:	2380      	movs	r3, #128	@ 0x80
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3f      	ldr	r2, [pc, #252]	@ (8006184 <UART_SetConfig+0x6a8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	f040 80f8 	bne.w	800627e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800608e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006092:	2b20      	cmp	r3, #32
 8006094:	dc46      	bgt.n	8006124 <UART_SetConfig+0x648>
 8006096:	2b02      	cmp	r3, #2
 8006098:	f2c0 8082 	blt.w	80061a0 <UART_SetConfig+0x6c4>
 800609c:	3b02      	subs	r3, #2
 800609e:	2b1e      	cmp	r3, #30
 80060a0:	d87e      	bhi.n	80061a0 <UART_SetConfig+0x6c4>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x5cc>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	0800612b 	.word	0x0800612b
 80060ac:	080061a1 	.word	0x080061a1
 80060b0:	08006133 	.word	0x08006133
 80060b4:	080061a1 	.word	0x080061a1
 80060b8:	080061a1 	.word	0x080061a1
 80060bc:	080061a1 	.word	0x080061a1
 80060c0:	08006143 	.word	0x08006143
 80060c4:	080061a1 	.word	0x080061a1
 80060c8:	080061a1 	.word	0x080061a1
 80060cc:	080061a1 	.word	0x080061a1
 80060d0:	080061a1 	.word	0x080061a1
 80060d4:	080061a1 	.word	0x080061a1
 80060d8:	080061a1 	.word	0x080061a1
 80060dc:	080061a1 	.word	0x080061a1
 80060e0:	08006153 	.word	0x08006153
 80060e4:	080061a1 	.word	0x080061a1
 80060e8:	080061a1 	.word	0x080061a1
 80060ec:	080061a1 	.word	0x080061a1
 80060f0:	080061a1 	.word	0x080061a1
 80060f4:	080061a1 	.word	0x080061a1
 80060f8:	080061a1 	.word	0x080061a1
 80060fc:	080061a1 	.word	0x080061a1
 8006100:	080061a1 	.word	0x080061a1
 8006104:	080061a1 	.word	0x080061a1
 8006108:	080061a1 	.word	0x080061a1
 800610c:	080061a1 	.word	0x080061a1
 8006110:	080061a1 	.word	0x080061a1
 8006114:	080061a1 	.word	0x080061a1
 8006118:	080061a1 	.word	0x080061a1
 800611c:	080061a1 	.word	0x080061a1
 8006120:	08006193 	.word	0x08006193
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d037      	beq.n	8006198 <UART_SetConfig+0x6bc>
 8006128:	e03a      	b.n	80061a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800612a:	f7fe fd09 	bl	8004b40 <HAL_RCCEx_GetD3PCLK1Freq>
 800612e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006130:	e03c      	b.n	80061ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fd18 	bl	8004b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006140:	e034      	b.n	80061ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006142:	f107 0318 	add.w	r3, r7, #24
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fe64 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006150:	e02c      	b.n	80061ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006152:	4b09      	ldr	r3, [pc, #36]	@ (8006178 <UART_SetConfig+0x69c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800615e:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <UART_SetConfig+0x69c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	4a07      	ldr	r2, [pc, #28]	@ (8006188 <UART_SetConfig+0x6ac>)
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006170:	e01c      	b.n	80061ac <UART_SetConfig+0x6d0>
 8006172:	bf00      	nop
 8006174:	40011400 	.word	0x40011400
 8006178:	58024400 	.word	0x58024400
 800617c:	40007800 	.word	0x40007800
 8006180:	40007c00 	.word	0x40007c00
 8006184:	58000c00 	.word	0x58000c00
 8006188:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800618c:	4b9d      	ldr	r3, [pc, #628]	@ (8006404 <UART_SetConfig+0x928>)
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e00c      	b.n	80061ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006192:	4b9d      	ldr	r3, [pc, #628]	@ (8006408 <UART_SetConfig+0x92c>)
 8006194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006196:	e009      	b.n	80061ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619e:	e005      	b.n	80061ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 81de 	beq.w	8006570 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	4a94      	ldr	r2, [pc, #592]	@ (800640c <UART_SetConfig+0x930>)
 80061ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061be:	461a      	mov	r2, r3
 80061c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d305      	bcc.n	80061e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061ea:	e1c1      	b.n	8006570 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ee:	2200      	movs	r2, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	60fa      	str	r2, [r7, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	4a84      	ldr	r2, [pc, #528]	@ (800640c <UART_SetConfig+0x930>)
 80061fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2200      	movs	r2, #0
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800620e:	f7fa f867 	bl	80002e0 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	020b      	lsls	r3, r1, #8
 8006224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006228:	0202      	lsls	r2, r0, #8
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	6849      	ldr	r1, [r1, #4]
 800622e:	0849      	lsrs	r1, r1, #1
 8006230:	2000      	movs	r0, #0
 8006232:	460c      	mov	r4, r1
 8006234:	4605      	mov	r5, r0
 8006236:	eb12 0804 	adds.w	r8, r2, r4
 800623a:	eb43 0905 	adc.w	r9, r3, r5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	469a      	mov	sl, r3
 8006246:	4693      	mov	fp, r2
 8006248:	4652      	mov	r2, sl
 800624a:	465b      	mov	r3, fp
 800624c:	4640      	mov	r0, r8
 800624e:	4649      	mov	r1, r9
 8006250:	f7fa f846 	bl	80002e0 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006262:	d308      	bcc.n	8006276 <UART_SetConfig+0x79a>
 8006264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626a:	d204      	bcs.n	8006276 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e17c      	b.n	8006570 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800627c:	e178      	b.n	8006570 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006286:	f040 80c5 	bne.w	8006414 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800628a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800628e:	2b20      	cmp	r3, #32
 8006290:	dc48      	bgt.n	8006324 <UART_SetConfig+0x848>
 8006292:	2b00      	cmp	r3, #0
 8006294:	db7b      	blt.n	800638e <UART_SetConfig+0x8b2>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d879      	bhi.n	800638e <UART_SetConfig+0x8b2>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x7c4>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	0800632b 	.word	0x0800632b
 80062a4:	08006333 	.word	0x08006333
 80062a8:	0800638f 	.word	0x0800638f
 80062ac:	0800638f 	.word	0x0800638f
 80062b0:	0800633b 	.word	0x0800633b
 80062b4:	0800638f 	.word	0x0800638f
 80062b8:	0800638f 	.word	0x0800638f
 80062bc:	0800638f 	.word	0x0800638f
 80062c0:	0800634b 	.word	0x0800634b
 80062c4:	0800638f 	.word	0x0800638f
 80062c8:	0800638f 	.word	0x0800638f
 80062cc:	0800638f 	.word	0x0800638f
 80062d0:	0800638f 	.word	0x0800638f
 80062d4:	0800638f 	.word	0x0800638f
 80062d8:	0800638f 	.word	0x0800638f
 80062dc:	0800638f 	.word	0x0800638f
 80062e0:	0800635b 	.word	0x0800635b
 80062e4:	0800638f 	.word	0x0800638f
 80062e8:	0800638f 	.word	0x0800638f
 80062ec:	0800638f 	.word	0x0800638f
 80062f0:	0800638f 	.word	0x0800638f
 80062f4:	0800638f 	.word	0x0800638f
 80062f8:	0800638f 	.word	0x0800638f
 80062fc:	0800638f 	.word	0x0800638f
 8006300:	0800638f 	.word	0x0800638f
 8006304:	0800638f 	.word	0x0800638f
 8006308:	0800638f 	.word	0x0800638f
 800630c:	0800638f 	.word	0x0800638f
 8006310:	0800638f 	.word	0x0800638f
 8006314:	0800638f 	.word	0x0800638f
 8006318:	0800638f 	.word	0x0800638f
 800631c:	0800638f 	.word	0x0800638f
 8006320:	08006381 	.word	0x08006381
 8006324:	2b40      	cmp	r3, #64	@ 0x40
 8006326:	d02e      	beq.n	8006386 <UART_SetConfig+0x8aa>
 8006328:	e031      	b.n	800638e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632a:	f7fd f991 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 800632e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006330:	e033      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006332:	f7fd f9a3 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8006336:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006338:	e02f      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800633a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fc14 	bl	8004b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006348:	e027      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634a:	f107 0318 	add.w	r3, r7, #24
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fd60 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006358:	e01f      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635a:	4b2d      	ldr	r3, [pc, #180]	@ (8006410 <UART_SetConfig+0x934>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006366:	4b2a      	ldr	r3, [pc, #168]	@ (8006410 <UART_SetConfig+0x934>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	4a24      	ldr	r2, [pc, #144]	@ (8006404 <UART_SetConfig+0x928>)
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006378:	e00f      	b.n	800639a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800637a:	4b22      	ldr	r3, [pc, #136]	@ (8006404 <UART_SetConfig+0x928>)
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637e:	e00c      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006380:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <UART_SetConfig+0x92c>)
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e009      	b.n	800639a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e005      	b.n	800639a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80e7 	beq.w	8006570 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	4a19      	ldr	r2, [pc, #100]	@ (800640c <UART_SetConfig+0x930>)
 80063a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b4:	005a      	lsls	r2, r3, #1
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	441a      	add	r2, r3
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	2b0f      	cmp	r3, #15
 80063cc:	d916      	bls.n	80063fc <UART_SetConfig+0x920>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d4:	d212      	bcs.n	80063fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f023 030f 	bic.w	r3, r3, #15
 80063de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063ee:	4313      	orrs	r3, r2
 80063f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e0b9      	b.n	8006570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006402:	e0b5      	b.n	8006570 <UART_SetConfig+0xa94>
 8006404:	03d09000 	.word	0x03d09000
 8006408:	003d0900 	.word	0x003d0900
 800640c:	0800a148 	.word	0x0800a148
 8006410:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006414:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006418:	2b20      	cmp	r3, #32
 800641a:	dc49      	bgt.n	80064b0 <UART_SetConfig+0x9d4>
 800641c:	2b00      	cmp	r3, #0
 800641e:	db7c      	blt.n	800651a <UART_SetConfig+0xa3e>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d87a      	bhi.n	800651a <UART_SetConfig+0xa3e>
 8006424:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <UART_SetConfig+0x950>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	080064b7 	.word	0x080064b7
 8006430:	080064bf 	.word	0x080064bf
 8006434:	0800651b 	.word	0x0800651b
 8006438:	0800651b 	.word	0x0800651b
 800643c:	080064c7 	.word	0x080064c7
 8006440:	0800651b 	.word	0x0800651b
 8006444:	0800651b 	.word	0x0800651b
 8006448:	0800651b 	.word	0x0800651b
 800644c:	080064d7 	.word	0x080064d7
 8006450:	0800651b 	.word	0x0800651b
 8006454:	0800651b 	.word	0x0800651b
 8006458:	0800651b 	.word	0x0800651b
 800645c:	0800651b 	.word	0x0800651b
 8006460:	0800651b 	.word	0x0800651b
 8006464:	0800651b 	.word	0x0800651b
 8006468:	0800651b 	.word	0x0800651b
 800646c:	080064e7 	.word	0x080064e7
 8006470:	0800651b 	.word	0x0800651b
 8006474:	0800651b 	.word	0x0800651b
 8006478:	0800651b 	.word	0x0800651b
 800647c:	0800651b 	.word	0x0800651b
 8006480:	0800651b 	.word	0x0800651b
 8006484:	0800651b 	.word	0x0800651b
 8006488:	0800651b 	.word	0x0800651b
 800648c:	0800651b 	.word	0x0800651b
 8006490:	0800651b 	.word	0x0800651b
 8006494:	0800651b 	.word	0x0800651b
 8006498:	0800651b 	.word	0x0800651b
 800649c:	0800651b 	.word	0x0800651b
 80064a0:	0800651b 	.word	0x0800651b
 80064a4:	0800651b 	.word	0x0800651b
 80064a8:	0800651b 	.word	0x0800651b
 80064ac:	0800650d 	.word	0x0800650d
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d02e      	beq.n	8006512 <UART_SetConfig+0xa36>
 80064b4:	e031      	b.n	800651a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b6:	f7fd f8cb 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 80064ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064bc:	e033      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064be:	f7fd f8dd 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 80064c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064c4:	e02f      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fb4e 	bl	8004b6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d4:	e027      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d6:	f107 0318 	add.w	r3, r7, #24
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fc9a 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e4:	e01f      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e6:	4b2d      	ldr	r3, [pc, #180]	@ (800659c <UART_SetConfig+0xac0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064f2:	4b2a      	ldr	r3, [pc, #168]	@ (800659c <UART_SetConfig+0xac0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	4a28      	ldr	r2, [pc, #160]	@ (80065a0 <UART_SetConfig+0xac4>)
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006504:	e00f      	b.n	8006526 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006506:	4b26      	ldr	r3, [pc, #152]	@ (80065a0 <UART_SetConfig+0xac4>)
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650a:	e00c      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800650c:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <UART_SetConfig+0xac8>)
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	e009      	b.n	8006526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006518:	e005      	b.n	8006526 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006524:	bf00      	nop
    }

    if (pclk != 0U)
 8006526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d021      	beq.n	8006570 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	4a1d      	ldr	r2, [pc, #116]	@ (80065a8 <UART_SetConfig+0xacc>)
 8006532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006536:	461a      	mov	r2, r3
 8006538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653a:	fbb3 f2f2 	udiv	r2, r3, r2
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	441a      	add	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d909      	bls.n	800656a <UART_SetConfig+0xa8e>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655c:	d205      	bcs.n	800656a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	b29a      	uxth	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e002      	b.n	8006570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2201      	movs	r2, #1
 8006574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800658c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006590:	4618      	mov	r0, r3
 8006592:	3748      	adds	r7, #72	@ 0x48
 8006594:	46bd      	mov	sp, r7
 8006596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659a:	bf00      	nop
 800659c:	58024400 	.word	0x58024400
 80065a0:	03d09000 	.word	0x03d09000
 80065a4:	003d0900 	.word	0x003d0900
 80065a8:	0800a148 	.word	0x0800a148

080065ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01a      	beq.n	80066c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066aa:	d10a      	bne.n	80066c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]
  }
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b098      	sub	sp, #96	@ 0x60
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006700:	f7fa ff44 	bl	800158c <HAL_GetTick>
 8006704:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b08      	cmp	r3, #8
 8006712:	d12f      	bne.n	8006774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671c:	2200      	movs	r2, #0
 800671e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f88e 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d022      	beq.n	8006774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800673c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006742:	653b      	str	r3, [r7, #80]	@ 0x50
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800674c:	647b      	str	r3, [r7, #68]	@ 0x44
 800674e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800675a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e063      	b.n	800683c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b04      	cmp	r3, #4
 8006780:	d149      	bne.n	8006816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006782:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678a:	2200      	movs	r2, #0
 800678c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f857 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d03c      	beq.n	8006816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	623b      	str	r3, [r7, #32]
   return(result);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80067bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e6      	bne.n	800679c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ee:	61fa      	str	r2, [r7, #28]
 80067f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	617b      	str	r3, [r7, #20]
   return(result);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e012      	b.n	800683c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3758      	adds	r7, #88	@ 0x58
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006854:	e04f      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800685c:	d04b      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fa fe95 	bl	800158c <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <UART_WaitOnFlagUntilTimeout+0x30>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e04e      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d037      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b80      	cmp	r3, #128	@ 0x80
 800688a:	d034      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b40      	cmp	r3, #64	@ 0x40
 8006890:	d031      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b08      	cmp	r3, #8
 800689e:	d110      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2208      	movs	r2, #8
 80068a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f839 	bl	8006920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2208      	movs	r2, #8
 80068b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e029      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d0:	d111      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f81f 	bl	8006920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e00f      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69da      	ldr	r2, [r3, #28]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4013      	ands	r3, r2
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	429a      	cmp	r2, r3
 8006912:	d0a0      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b095      	sub	sp, #84	@ 0x54
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800693c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006946:	643b      	str	r3, [r7, #64]	@ 0x40
 8006948:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800694c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	61fb      	str	r3, [r7, #28]
   return(result);
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	4b1e      	ldr	r3, [pc, #120]	@ (80069e8 <UART_EndRxTransfer+0xc8>)
 800696e:	4013      	ands	r3, r2
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800697a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800697c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d118      	bne.n	80069c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6979      	ldr	r1, [r7, #20]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	613b      	str	r3, [r7, #16]
   return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069dc:	bf00      	nop
 80069de:	3754      	adds	r7, #84	@ 0x54
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	effffffe 	.word	0xeffffffe

080069ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e027      	b.n	8006a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2224      	movs	r2, #36	@ 0x24
 8006a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e02d      	b.n	8006ad2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2224      	movs	r2, #36	@ 0x24
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f850 	bl	8006b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e02d      	b.n	8006b4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2224      	movs	r2, #36	@ 0x24
 8006afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0201 	bic.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f812 	bl	8006b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b78:	e031      	b.n	8006bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b7e:	2310      	movs	r3, #16
 8006b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	0e5b      	lsrs	r3, r3, #25
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	0f5b      	lsrs	r3, r3, #29
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	7b3a      	ldrb	r2, [r7, #12]
 8006ba6:	4911      	ldr	r1, [pc, #68]	@ (8006bec <UARTEx_SetNbDataToProcess+0x94>)
 8006ba8:	5c8a      	ldrb	r2, [r1, r2]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bae:	7b3a      	ldrb	r2, [r7, #12]
 8006bb0:	490f      	ldr	r1, [pc, #60]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	7b7a      	ldrb	r2, [r7, #13]
 8006bc4:	4909      	ldr	r1, [pc, #36]	@ (8006bec <UARTEx_SetNbDataToProcess+0x94>)
 8006bc6:	5c8a      	ldrb	r2, [r1, r2]
 8006bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bcc:	7b7a      	ldrb	r2, [r7, #13]
 8006bce:	4908      	ldr	r1, [pc, #32]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	0800a160 	.word	0x0800a160
 8006bf0:	0800a168 	.word	0x0800a168

08006bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	f107 001c 	add.w	r0, r7, #28
 8006c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d121      	bne.n	8006c52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd0 <USB_CoreInit+0xdc>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 faaa 	bl	80071a0 <USB_CoreReset>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
 8006c50:	e01b      	b.n	8006c8a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa9e 	bl	80071a0 <USB_CoreReset>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c7c:	e005      	b.n	8006c8a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c8a:	7fbb      	ldrb	r3, [r7, #30]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d116      	bne.n	8006cbe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <USB_CoreInit+0xe0>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f043 0206 	orr.w	r2, r3, #6
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cca:	b004      	add	sp, #16
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	ffbdffbf 	.word	0xffbdffbf
 8006cd4:	03ee0000 	.word	0x03ee0000

08006cd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f023 0201 	bic.w	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d115      	bne.n	8006d48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d28:	200a      	movs	r0, #10
 8006d2a:	f7fa fc3b 	bl	80015a4 <HAL_Delay>
      ms += 10U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	330a      	adds	r3, #10
 8006d32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa25 	bl	8007184 <USB_GetMode>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d01e      	beq.n	8006d7e <USB_SetCurrentMode+0x84>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d44:	d9f0      	bls.n	8006d28 <USB_SetCurrentMode+0x2e>
 8006d46:	e01a      	b.n	8006d7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d115      	bne.n	8006d7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d5a:	200a      	movs	r0, #10
 8006d5c:	f7fa fc22 	bl	80015a4 <HAL_Delay>
      ms += 10U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	330a      	adds	r3, #10
 8006d64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa0c 	bl	8007184 <USB_GetMode>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <USB_SetCurrentMode+0x84>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d76:	d9f0      	bls.n	8006d5a <USB_SetCurrentMode+0x60>
 8006d78:	e001      	b.n	8006d7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e005      	b.n	8006d8a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d82:	d101      	bne.n	8006d88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d94:	b084      	sub	sp, #16
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e009      	b.n	8006dc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3340      	adds	r3, #64	@ 0x40
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b0e      	cmp	r3, #14
 8006dcc:	d9f2      	bls.n	8006db4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11c      	bne.n	8006e10 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e005      	b.n	8006e1c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e22:	461a      	mov	r2, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10d      	bne.n	8006e4c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e38:	2100      	movs	r1, #0
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f968 	bl	8007110 <USB_SetDevSpeed>
 8006e40:	e008      	b.n	8006e54 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f963 	bl	8007110 <USB_SetDevSpeed>
 8006e4a:	e003      	b.n	8006e54 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e4c:	2103      	movs	r1, #3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f95e 	bl	8007110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e54:	2110      	movs	r1, #16
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8fa 	bl	8007050 <USB_FlushTxFifo>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f924 	bl	80070b4 <USB_FlushRxFifo>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e043      	b.n	8006f28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eb6:	d118      	bne.n	8006eea <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e013      	b.n	8006efc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e008      	b.n	8006efc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3301      	adds	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d3b5      	bcc.n	8006ea0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	e043      	b.n	8006fc2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f50:	d118      	bne.n	8006f84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	e013      	b.n	8006f96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e008      	b.n	8006f96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d3b5      	bcc.n	8006f3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f043 0210 	orr.w	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	4b0f      	ldr	r3, [pc, #60]	@ (8007048 <USB_DevInit+0x2b4>)
 800700a:	4313      	orrs	r3, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007010:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f043 0208 	orr.w	r2, r3, #8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007024:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007028:	2b01      	cmp	r3, #1
 800702a:	d105      	bne.n	8007038 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699a      	ldr	r2, [r3, #24]
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <USB_DevInit+0x2b8>)
 8007032:	4313      	orrs	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007044:	b004      	add	sp, #16
 8007046:	4770      	bx	lr
 8007048:	803c3800 	.word	0x803c3800
 800704c:	40000004 	.word	0x40000004

08007050 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800706a:	d901      	bls.n	8007070 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e01b      	b.n	80070a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	daf2      	bge.n	800705e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	019b      	lsls	r3, r3, #6
 8007080:	f043 0220 	orr.w	r2, r3, #32
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007094:	d901      	bls.n	800709a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e006      	b.n	80070a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d0f0      	beq.n	8007088 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070cc:	d901      	bls.n	80070d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e018      	b.n	8007104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	daf2      	bge.n	80070c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2210      	movs	r2, #16
 80070e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f0:	d901      	bls.n	80070f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e006      	b.n	8007104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d0f0      	beq.n	80070e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007130:	4313      	orrs	r3, r2
 8007132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800715c:	f023 0303 	bic.w	r3, r3, #3
 8007160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f003 0301 	and.w	r3, r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b8:	d901      	bls.n	80071be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e01b      	b.n	80071f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	daf2      	bge.n	80071ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f043 0201 	orr.w	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071e2:	d901      	bls.n	80071e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e006      	b.n	80071f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d0f0      	beq.n	80071d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <__NVIC_SetPriority>:
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	db0a      	blt.n	800722e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	490c      	ldr	r1, [pc, #48]	@ (8007250 <__NVIC_SetPriority+0x4c>)
 800721e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007222:	0112      	lsls	r2, r2, #4
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	440b      	add	r3, r1
 8007228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800722c:	e00a      	b.n	8007244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	4908      	ldr	r1, [pc, #32]	@ (8007254 <__NVIC_SetPriority+0x50>)
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	3b04      	subs	r3, #4
 800723c:	0112      	lsls	r2, r2, #4
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	440b      	add	r3, r1
 8007242:	761a      	strb	r2, [r3, #24]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	e000e100 	.word	0xe000e100
 8007254:	e000ed00 	.word	0xe000ed00

08007258 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <SysTick_Handler+0x1c>)
 800725e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007260:	f001 fd9e 	bl	8008da0 <xTaskGetSchedulerState>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	d001      	beq.n	800726e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800726a:	f002 fb95 	bl	8009998 <xPortSysTickHandler>
  }
}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	e000e010 	.word	0xe000e010

08007278 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800727c:	2100      	movs	r1, #0
 800727e:	f06f 0004 	mvn.w	r0, #4
 8007282:	f7ff ffbf 	bl	8007204 <__NVIC_SetPriority>
#endif
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	603b      	str	r3, [r7, #0]
  return(result);
 8007298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800729e:	f06f 0305 	mvn.w	r3, #5
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e00c      	b.n	80072c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072a6:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <osKernelInitialize+0x44>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072ae:	4b08      	ldr	r3, [pc, #32]	@ (80072d0 <osKernelInitialize+0x44>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	607b      	str	r3, [r7, #4]
 80072b8:	e002      	b.n	80072c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072c0:	687b      	ldr	r3, [r7, #4]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	24000800 	.word	0x24000800

080072d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072da:	f3ef 8305 	mrs	r3, IPSR
 80072de:	603b      	str	r3, [r7, #0]
  return(result);
 80072e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80072e6:	f06f 0305 	mvn.w	r3, #5
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	e010      	b.n	8007310 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <osKernelStart+0x48>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d109      	bne.n	800730a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072f6:	f7ff ffbf 	bl	8007278 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072fa:	4b08      	ldr	r3, [pc, #32]	@ (800731c <osKernelStart+0x48>)
 80072fc:	2202      	movs	r2, #2
 80072fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007300:	f001 f8ea 	bl	80084d8 <vTaskStartScheduler>
      stat = osOK;
 8007304:	2300      	movs	r3, #0
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	e002      	b.n	8007310 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800730e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007310:	687b      	ldr	r3, [r7, #4]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	24000800 	.word	0x24000800

08007320 <osKernelLock>:

int32_t osKernelLock (void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007326:	f3ef 8305 	mrs	r3, IPSR
 800732a:	603b      	str	r3, [r7, #0]
  return(result);
 800732c:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 8007332:	f06f 0305 	mvn.w	r3, #5
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	e013      	b.n	8007362 <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800733a:	f001 fd31 	bl	8008da0 <xTaskGetSchedulerState>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <osKernelLock+0x2a>
 8007344:	2b02      	cmp	r3, #2
 8007346:	d003      	beq.n	8007350 <osKernelLock+0x30>
 8007348:	e007      	b.n	800735a <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
        break;
 800734e:	e008      	b.n	8007362 <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8007350:	f001 f932 	bl	80085b8 <vTaskSuspendAll>
        lock = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	607b      	str	r3, [r7, #4]
        break;
 8007358:	e003      	b.n	8007362 <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800735e:	607b      	str	r3, [r7, #4]
        break;
 8007360:	bf00      	nop
    }
  }

  return (lock);
 8007362:	687b      	ldr	r3, [r7, #4]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007372:	f3ef 8305 	mrs	r3, IPSR
 8007376:	603b      	str	r3, [r7, #0]
  return(result);
 8007378:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800737e:	f06f 0305 	mvn.w	r3, #5
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	e01f      	b.n	80073c6 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007386:	f001 fd0b 	bl	8008da0 <xTaskGetSchedulerState>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <osKernelUnlock+0x2a>
 8007390:	2b02      	cmp	r3, #2
 8007392:	d010      	beq.n	80073b6 <osKernelUnlock+0x4a>
 8007394:	e012      	b.n	80073bc <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 800739a:	f001 f91b 	bl	80085d4 <xTaskResumeAll>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d00f      	beq.n	80073c4 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 80073a4:	f001 fcfc 	bl	8008da0 <xTaskGetSchedulerState>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073b2:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 80073b4:	e006      	b.n	80073c4 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
        break;
 80073ba:	e004      	b.n	80073c6 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073c0:	607b      	str	r3, [r7, #4]
        break;
 80073c2:	e000      	b.n	80073c6 <osKernelUnlock+0x5a>
        break;
 80073c4:	bf00      	nop
    }
  }

  return (lock);
 80073c6:	687b      	ldr	r3, [r7, #4]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	@ 0x38
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e0:	f3ef 8305 	mrs	r3, IPSR
 80073e4:	617b      	str	r3, [r7, #20]
  return(result);
 80073e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d17e      	bne.n	80074ea <osThreadNew+0x11a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d07b      	beq.n	80074ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073f2:	2380      	movs	r3, #128	@ 0x80
 80073f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073f6:	2318      	movs	r3, #24
 80073f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007402:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d045      	beq.n	8007496 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <osThreadNew+0x48>
        name = attr->name;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <osThreadNew+0x6e>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b38      	cmp	r3, #56	@ 0x38
 8007430:	d805      	bhi.n	800743e <osThreadNew+0x6e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <osThreadNew+0x72>
        return (NULL);
 800743e:	2300      	movs	r3, #0
 8007440:	e054      	b.n	80074ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	089b      	lsrs	r3, r3, #2
 8007450:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00e      	beq.n	8007478 <osThreadNew+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007460:	d90a      	bls.n	8007478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <osThreadNew+0xa8>
        mem = 1;
 8007472:	2301      	movs	r3, #1
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	e010      	b.n	800749a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <osThreadNew+0xca>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d108      	bne.n	800749a <osThreadNew+0xca>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <osThreadNew+0xca>
          mem = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e001      	b.n	800749a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d110      	bne.n	80074c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074a8:	9202      	str	r2, [sp, #8]
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 fe1a 	bl	80080f0 <xTaskCreateStatic>
 80074bc:	4603      	mov	r3, r0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	e013      	b.n	80074ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d110      	bne.n	80074ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fe68 	bl	80081b0 <xTaskCreate>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d001      	beq.n	80074ea <osThreadNew+0x11a>
            hTask = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074ea:	693b      	ldr	r3, [r7, #16]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	@ 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fc:	f3ef 8305 	mrs	r3, IPSR
 8007500:	60bb      	str	r3, [r7, #8]
  return(result);
 8007502:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <osDelay+0x1c>
    stat = osErrorISR;
 8007508:	f06f 0305 	mvn.w	r3, #5
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e007      	b.n	8007520 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <osDelay+0x2c>
      vTaskDelay(ticks);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 ffa6 	bl	800846c <vTaskDelay>
    }
  }

  return (stat);
 8007520:	68fb      	ldr	r3, [r7, #12]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a07      	ldr	r2, [pc, #28]	@ (8007558 <vApplicationGetIdleTaskMemory+0x2c>)
 800753c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	4a06      	ldr	r2, [pc, #24]	@ (800755c <vApplicationGetIdleTaskMemory+0x30>)
 8007542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2280      	movs	r2, #128	@ 0x80
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	24000804 	.word	0x24000804
 800755c:	240008ac 	.word	0x240008ac

08007560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a07      	ldr	r2, [pc, #28]	@ (800758c <vApplicationGetTimerTaskMemory+0x2c>)
 8007570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4a06      	ldr	r2, [pc, #24]	@ (8007590 <vApplicationGetTimerTaskMemory+0x30>)
 8007576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800757e:	601a      	str	r2, [r3, #0]
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	24000aac 	.word	0x24000aac
 8007590:	24000b54 	.word	0x24000b54

08007594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f103 0208 	add.w	r2, r3, #8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f103 0208 	add.w	r2, r3, #8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f103 0208 	add.w	r2, r3, #8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800764c:	d103      	bne.n	8007656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e00c      	b.n	8007670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3308      	adds	r3, #8
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e002      	b.n	8007664 <vListInsert+0x2e>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	d2f6      	bcs.n	800765e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6892      	ldr	r2, [r2, #8]
 80076be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6852      	ldr	r2, [r2, #4]
 80076c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d103      	bne.n	80076dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007728:	f002 f8a6 	bl	8009878 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007758:	3b01      	subs	r3, #1
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	441a      	add	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	22ff      	movs	r2, #255	@ 0xff
 800776c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	22ff      	movs	r2, #255	@ 0xff
 8007774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d114      	bne.n	80077a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01a      	beq.n	80077bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3310      	adds	r3, #16
 800778a:	4618      	mov	r0, r3
 800778c:	f001 f942 	bl	8008a14 <xTaskRemoveFromEventList>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d012      	beq.n	80077bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <xQueueGenericReset+0xd0>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	e009      	b.n	80077bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3310      	adds	r3, #16
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fef1 	bl	8007594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3324      	adds	r3, #36	@ 0x24
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff feec 	bl	8007594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077bc:	f002 f88e 	bl	80098dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077c0:	2301      	movs	r3, #1
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	@ 0x38
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10b      	bne.n	800781a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <xQueueGenericCreateStatic+0x56>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <xQueueGenericCreateStatic+0x5a>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueGenericCreateStatic+0x5c>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	623b      	str	r3, [r7, #32]
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <xQueueGenericCreateStatic+0x84>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <xQueueGenericCreateStatic+0x88>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <xQueueGenericCreateStatic+0x8a>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	61fb      	str	r3, [r7, #28]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007876:	2350      	movs	r3, #80	@ 0x50
 8007878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b50      	cmp	r3, #80	@ 0x50
 800787e:	d00b      	beq.n	8007898 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	61bb      	str	r3, [r7, #24]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007898:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00d      	beq.n	80078c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80078b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f805 	bl	80078ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3730      	adds	r7, #48	@ 0x30
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e002      	b.n	80078ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078f8:	2101      	movs	r1, #1
 80078fa:	69b8      	ldr	r0, [r7, #24]
 80078fc:	f7ff fefe 	bl	80076fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	78fa      	ldrb	r2, [r7, #3]
 8007904:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08e      	sub	sp, #56	@ 0x38
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800791e:	2300      	movs	r3, #0
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <xQueueGenericSend+0x34>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x42>
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <xQueueGenericSend+0x46>
 8007952:	2301      	movs	r3, #1
 8007954:	e000      	b.n	8007958 <xQueueGenericSend+0x48>
 8007956:	2300      	movs	r3, #0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10b      	bne.n	8007974 <xQueueGenericSend+0x64>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d103      	bne.n	8007982 <xQueueGenericSend+0x72>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <xQueueGenericSend+0x76>
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <xQueueGenericSend+0x78>
 8007986:	2300      	movs	r3, #0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <xQueueGenericSend+0x94>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	623b      	str	r3, [r7, #32]
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079a4:	f001 f9fc 	bl	8008da0 <xTaskGetSchedulerState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d102      	bne.n	80079b4 <xQueueGenericSend+0xa4>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <xQueueGenericSend+0xa8>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <xQueueGenericSend+0xaa>
 80079b8:	2300      	movs	r3, #0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079d6:	f001 ff4f 	bl	8009878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d302      	bcc.n	80079ec <xQueueGenericSend+0xdc>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d129      	bne.n	8007a40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079f2:	f000 fa0f 	bl	8007e14 <prvCopyDataToQueue>
 80079f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d010      	beq.n	8007a22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	3324      	adds	r3, #36	@ 0x24
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f805 	bl	8008a14 <xTaskRemoveFromEventList>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d013      	beq.n	8007a38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a10:	4b3f      	ldr	r3, [pc, #252]	@ (8007b10 <xQueueGenericSend+0x200>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	e00a      	b.n	8007a38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a28:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <xQueueGenericSend+0x200>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a38:	f001 ff50 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e063      	b.n	8007b08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d103      	bne.n	8007a4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a46:	f001 ff49 	bl	80098dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e05c      	b.n	8007b08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 f83f 	bl	8008adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a62:	f001 ff3b 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a66:	f000 fda7 	bl	80085b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a6a:	f001 ff05 	bl	8009878 <vPortEnterCritical>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a7a:	d103      	bne.n	8007a84 <xQueueGenericSend+0x174>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a8a:	b25b      	sxtb	r3, r3
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a90:	d103      	bne.n	8007a9a <xQueueGenericSend+0x18a>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a9a:	f001 ff1f 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a9e:	1d3a      	adds	r2, r7, #4
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 f82e 	bl	8008b08 <xTaskCheckForTimeOut>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d124      	bne.n	8007afc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ab2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ab4:	f000 faa6 	bl	8008004 <prvIsQueueFull>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d018      	beq.n	8007af0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 ff52 	bl	8008970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ace:	f000 fa31 	bl	8007f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ad2:	f000 fd7f 	bl	80085d4 <xTaskResumeAll>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f47f af7c 	bne.w	80079d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ade:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <xQueueGenericSend+0x200>)
 8007ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	e772      	b.n	80079d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007af2:	f000 fa1f 	bl	8007f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007af6:	f000 fd6d 	bl	80085d4 <xTaskResumeAll>
 8007afa:	e76c      	b.n	80079d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007afe:	f000 fa19 	bl	8007f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b02:	f000 fd67 	bl	80085d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3738      	adds	r7, #56	@ 0x38
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b090      	sub	sp, #64	@ 0x40
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b3e:	bf00      	nop
 8007b40:	bf00      	nop
 8007b42:	e7fd      	b.n	8007b40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <xQueueGenericSendFromISR+0x3e>
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <xQueueGenericSendFromISR+0x42>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGenericSendFromISR+0x44>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10b      	bne.n	8007b74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	e7fd      	b.n	8007b70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d103      	bne.n	8007b82 <xQueueGenericSendFromISR+0x6e>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <xQueueGenericSendFromISR+0x72>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueGenericSendFromISR+0x74>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	623b      	str	r3, [r7, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	e7fd      	b.n	8007ba0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ba4:	f001 ff48 	bl	8009a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ba8:	f3ef 8211 	mrs	r2, BASEPRI
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	61fa      	str	r2, [r7, #28]
 8007bbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <xQueueGenericSendFromISR+0xc2>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d12f      	bne.n	8007c36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bec:	f000 f912 	bl	8007e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bf8:	d112      	bne.n	8007c20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ff04 	bl	8008a14 <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c24:	3301      	adds	r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	b25a      	sxtb	r2, r3
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007c34:	e001      	b.n	8007c3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3740      	adds	r7, #64	@ 0x40
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08c      	sub	sp, #48	@ 0x30
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <xQueueReceive+0x32>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	623b      	str	r3, [r7, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <xQueueReceive+0x40>
 8007c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <xQueueReceive+0x44>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <xQueueReceive+0x46>
 8007c94:	2300      	movs	r3, #0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <xQueueReceive+0x62>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61fb      	str	r3, [r7, #28]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cb2:	f001 f875 	bl	8008da0 <xTaskGetSchedulerState>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <xQueueReceive+0x72>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <xQueueReceive+0x76>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <xQueueReceive+0x78>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10b      	bne.n	8007ce4 <xQueueReceive+0x94>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	61bb      	str	r3, [r7, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ce4:	f001 fdc8 	bl	8009878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01f      	beq.n	8007d34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf8:	f000 f8f6 	bl	8007ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	1e5a      	subs	r2, r3, #1
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00f      	beq.n	8007d2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	3310      	adds	r3, #16
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fe7f 	bl	8008a14 <xTaskRemoveFromEventList>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e10 <xQueueReceive+0x1c0>)
 8007d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d2c:	f001 fdd6 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e069      	b.n	8007e08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d3a:	f001 fdcf 	bl	80098dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e062      	b.n	8007e08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d48:	f107 0310 	add.w	r3, r7, #16
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fec5 	bl	8008adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d56:	f001 fdc1 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d5a:	f000 fc2d 	bl	80085b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d5e:	f001 fd8b 	bl	8009878 <vPortEnterCritical>
 8007d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d68:	b25b      	sxtb	r3, r3
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d6e:	d103      	bne.n	8007d78 <xQueueReceive+0x128>
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d7e:	b25b      	sxtb	r3, r3
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d84:	d103      	bne.n	8007d8e <xQueueReceive+0x13e>
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d8e:	f001 fda5 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d92:	1d3a      	adds	r2, r7, #4
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 feb4 	bl	8008b08 <xTaskCheckForTimeOut>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d123      	bne.n	8007dee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da8:	f000 f916 	bl	8007fd8 <prvIsQueueEmpty>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d017      	beq.n	8007de2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db4:	3324      	adds	r3, #36	@ 0x24
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fdd8 	bl	8008970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc2:	f000 f8b7 	bl	8007f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dc6:	f000 fc05 	bl	80085d4 <xTaskResumeAll>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d189      	bne.n	8007ce4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <xQueueReceive+0x1c0>)
 8007dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	e780      	b.n	8007ce4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de4:	f000 f8a6 	bl	8007f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de8:	f000 fbf4 	bl	80085d4 <xTaskResumeAll>
 8007dec:	e77a      	b.n	8007ce4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007df0:	f000 f8a0 	bl	8007f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007df4:	f000 fbee 	bl	80085d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dfa:	f000 f8ed 	bl	8007fd8 <prvIsQueueEmpty>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f43f af6f 	beq.w	8007ce4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	@ 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d14d      	bne.n	8007ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 ffcc 	bl	8008ddc <xTaskPriorityDisinherit>
 8007e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	609a      	str	r2, [r3, #8]
 8007e4c:	e043      	b.n	8007ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d119      	bne.n	8007e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6858      	ldr	r0, [r3, #4]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	f002 f89e 	bl	8009fa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d32b      	bcc.n	8007ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	e026      	b.n	8007ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68d8      	ldr	r0, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e90:	461a      	mov	r2, r3
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	f002 f884 	bl	8009fa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	441a      	add	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d207      	bcs.n	8007ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	425b      	negs	r3, r3
 8007ebe:	441a      	add	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d105      	bne.n	8007ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ede:	697b      	ldr	r3, [r7, #20]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d018      	beq.n	8007f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	441a      	add	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d303      	bcc.n	8007f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68d9      	ldr	r1, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f24:	461a      	mov	r2, r3
 8007f26:	6838      	ldr	r0, [r7, #0]
 8007f28:	f002 f83a 	bl	8009fa0 <memcpy>
	}
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f3c:	f001 fc9c 	bl	8009878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f48:	e011      	b.n	8007f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d012      	beq.n	8007f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3324      	adds	r3, #36	@ 0x24
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fd5c 	bl	8008a14 <xTaskRemoveFromEventList>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f62:	f000 fe35 	bl	8008bd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dce9      	bgt.n	8007f4a <prvUnlockQueue+0x16>
 8007f76:	e000      	b.n	8007f7a <prvUnlockQueue+0x46>
					break;
 8007f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	22ff      	movs	r2, #255	@ 0xff
 8007f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f82:	f001 fcab 	bl	80098dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f86:	f001 fc77 	bl	8009878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f92:	e011      	b.n	8007fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d012      	beq.n	8007fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fd37 	bl	8008a14 <xTaskRemoveFromEventList>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fac:	f000 fe10 	bl	8008bd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dce9      	bgt.n	8007f94 <prvUnlockQueue+0x60>
 8007fc0:	e000      	b.n	8007fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	22ff      	movs	r2, #255	@ 0xff
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fcc:	f001 fc86 	bl	80098dc <vPortExitCritical>
}
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fe0:	f001 fc4a 	bl	8009878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d102      	bne.n	8007ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e001      	b.n	8007ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ff6:	f001 fc71 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800800c:	f001 fc34 	bl	8009878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008018:	429a      	cmp	r2, r3
 800801a:	d102      	bne.n	8008022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e001      	b.n	8008026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008026:	f001 fc59 	bl	80098dc <vPortExitCritical>

	return xReturn;
 800802a:	68fb      	ldr	r3, [r7, #12]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e014      	b.n	800806e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008044:	4a0f      	ldr	r2, [pc, #60]	@ (8008084 <vQueueAddToRegistry+0x50>)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008050:	490c      	ldr	r1, [pc, #48]	@ (8008084 <vQueueAddToRegistry+0x50>)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800805a:	4a0a      	ldr	r2, [pc, #40]	@ (8008084 <vQueueAddToRegistry+0x50>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008066:	e006      	b.n	8008076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b07      	cmp	r3, #7
 8008072:	d9e7      	bls.n	8008044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	24000f54 	.word	0x24000f54

08008088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008098:	f001 fbee 	bl	8009878 <vPortEnterCritical>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080a8:	d103      	bne.n	80080b2 <vQueueWaitForMessageRestricted+0x2a>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080be:	d103      	bne.n	80080c8 <vQueueWaitForMessageRestricted+0x40>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080c8:	f001 fc08 	bl	80098dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	3324      	adds	r3, #36	@ 0x24
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc6d 	bl	80089bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	f7ff ff26 	bl	8007f34 <prvUnlockQueue>
	}
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	@ 0x38
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10b      	bne.n	800813a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	61fb      	str	r3, [r7, #28]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800813a:	23a8      	movs	r3, #168	@ 0xa8
 800813c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2ba8      	cmp	r3, #168	@ 0xa8
 8008142:	d00b      	beq.n	800815c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	61bb      	str	r3, [r7, #24]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800815c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01e      	beq.n	80081a2 <xTaskCreateStatic+0xb2>
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01b      	beq.n	80081a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008172:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	2202      	movs	r2, #2
 8008178:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800817c:	2300      	movs	r3, #0
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	9302      	str	r3, [sp, #8]
 8008184:	f107 0314 	add.w	r3, r7, #20
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f851 	bl	800823c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800819a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800819c:	f000 f8f6 	bl	800838c <prvAddNewTaskToReadyList>
 80081a0:	e001      	b.n	80081a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081a6:	697b      	ldr	r3, [r7, #20]
	}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3728      	adds	r7, #40	@ 0x28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08c      	sub	sp, #48	@ 0x30
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fc79 	bl	8009abc <pvPortMalloc>
 80081ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081d2:	20a8      	movs	r0, #168	@ 0xa8
 80081d4:	f001 fc72 	bl	8009abc <pvPortMalloc>
 80081d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80081e6:	e005      	b.n	80081f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081e8:	6978      	ldr	r0, [r7, #20]
 80081ea:	f001 fd35 	bl	8009c58 <vPortFree>
 80081ee:	e001      	b.n	80081f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d017      	beq.n	800822a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	2300      	movs	r3, #0
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	9302      	str	r3, [sp, #8]
 800820c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f80f 	bl	800823c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800821e:	69f8      	ldr	r0, [r7, #28]
 8008220:	f000 f8b4 	bl	800838c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	e002      	b.n	8008230 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800822e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008230:	69bb      	ldr	r3, [r7, #24]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3720      	adds	r7, #32
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	461a      	mov	r2, r3
 8008254:	21a5      	movs	r1, #165	@ 0xa5
 8008256:	f001 fe1f 	bl	8009e98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008264:	440b      	add	r3, r1
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f023 0307 	bic.w	r3, r3, #7
 8008272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00b      	beq.n	8008296 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01f      	beq.n	80082dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e012      	b.n	80082c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	7819      	ldrb	r1, [r3, #0]
 80082aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	3334      	adds	r3, #52	@ 0x34
 80082b2:	460a      	mov	r2, r1
 80082b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4413      	add	r3, r2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d006      	beq.n	80082d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	3301      	adds	r3, #1
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d9e9      	bls.n	80082a2 <prvInitialiseNewTask+0x66>
 80082ce:	e000      	b.n	80082d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80082d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082da:	e003      	b.n	80082e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	2b37      	cmp	r3, #55	@ 0x37
 80082e8:	d901      	bls.n	80082ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082ea:	2337      	movs	r3, #55	@ 0x37
 80082ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	2200      	movs	r2, #0
 80082fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff f965 	bl	80075d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	3318      	adds	r3, #24
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f960 	bl	80075d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008318:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008328:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	2200      	movs	r2, #0
 8008336:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	3354      	adds	r3, #84	@ 0x54
 800833e:	224c      	movs	r2, #76	@ 0x4c
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fda8 	bl	8009e98 <memset>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	4a0d      	ldr	r2, [pc, #52]	@ (8008380 <prvInitialiseNewTask+0x144>)
 800834c:	659a      	str	r2, [r3, #88]	@ 0x58
 800834e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008350:	4a0c      	ldr	r2, [pc, #48]	@ (8008384 <prvInitialiseNewTask+0x148>)
 8008352:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	4a0c      	ldr	r2, [pc, #48]	@ (8008388 <prvInitialiseNewTask+0x14c>)
 8008358:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	69b8      	ldr	r0, [r7, #24]
 8008360:	f001 f95a 	bl	8009618 <pxPortInitialiseStack>
 8008364:	4602      	mov	r2, r0
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800836a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008376:	bf00      	nop
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	240051e8 	.word	0x240051e8
 8008384:	24005250 	.word	0x24005250
 8008388:	240052b8 	.word	0x240052b8

0800838c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008394:	f001 fa70 	bl	8009878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008398:	4b2d      	ldr	r3, [pc, #180]	@ (8008450 <prvAddNewTaskToReadyList+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	4a2c      	ldr	r2, [pc, #176]	@ (8008450 <prvAddNewTaskToReadyList+0xc4>)
 80083a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008454 <prvAddNewTaskToReadyList+0xc8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008454 <prvAddNewTaskToReadyList+0xc8>)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083b0:	4b27      	ldr	r3, [pc, #156]	@ (8008450 <prvAddNewTaskToReadyList+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d110      	bne.n	80083da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083b8:	f000 fc2e 	bl	8008c18 <prvInitialiseTaskLists>
 80083bc:	e00d      	b.n	80083da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083be:	4b26      	ldr	r3, [pc, #152]	@ (8008458 <prvAddNewTaskToReadyList+0xcc>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083c6:	4b23      	ldr	r3, [pc, #140]	@ (8008454 <prvAddNewTaskToReadyList+0xc8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d802      	bhi.n	80083da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008454 <prvAddNewTaskToReadyList+0xc8>)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083da:	4b20      	ldr	r3, [pc, #128]	@ (800845c <prvAddNewTaskToReadyList+0xd0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <prvAddNewTaskToReadyList+0xd0>)
 80083e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083e4:	4b1d      	ldr	r3, [pc, #116]	@ (800845c <prvAddNewTaskToReadyList+0xd0>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008460 <prvAddNewTaskToReadyList+0xd4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d903      	bls.n	8008400 <prvAddNewTaskToReadyList+0x74>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	4a18      	ldr	r2, [pc, #96]	@ (8008460 <prvAddNewTaskToReadyList+0xd4>)
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4a15      	ldr	r2, [pc, #84]	@ (8008464 <prvAddNewTaskToReadyList+0xd8>)
 800840e:	441a      	add	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7ff f8e9 	bl	80075ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800841c:	f001 fa5e 	bl	80098dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008420:	4b0d      	ldr	r3, [pc, #52]	@ (8008458 <prvAddNewTaskToReadyList+0xcc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008428:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <prvAddNewTaskToReadyList+0xc8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	429a      	cmp	r2, r3
 8008434:	d207      	bcs.n	8008446 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008436:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <prvAddNewTaskToReadyList+0xdc>)
 8008438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	24001468 	.word	0x24001468
 8008454:	24000f94 	.word	0x24000f94
 8008458:	24001474 	.word	0x24001474
 800845c:	24001484 	.word	0x24001484
 8008460:	24001470 	.word	0x24001470
 8008464:	24000f98 	.word	0x24000f98
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d018      	beq.n	80084b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800847e:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <vTaskDelay+0x64>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <vTaskDelay+0x32>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60bb      	str	r3, [r7, #8]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800849e:	f000 f88b 	bl	80085b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fd09 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084aa:	f000 f893 	bl	80085d4 <xTaskResumeAll>
 80084ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d107      	bne.n	80084c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80084b6:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <vTaskDelay+0x68>)
 80084b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	24001490 	.word	0x24001490
 80084d4:	e000ed04 	.word	0xe000ed04

080084d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	@ 0x28
 80084dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084e6:	463a      	mov	r2, r7
 80084e8:	1d39      	adds	r1, r7, #4
 80084ea:	f107 0308 	add.w	r3, r7, #8
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff f81c 	bl	800752c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	9202      	str	r2, [sp, #8]
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	2300      	movs	r3, #0
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	460a      	mov	r2, r1
 8008506:	4924      	ldr	r1, [pc, #144]	@ (8008598 <vTaskStartScheduler+0xc0>)
 8008508:	4824      	ldr	r0, [pc, #144]	@ (800859c <vTaskStartScheduler+0xc4>)
 800850a:	f7ff fdf1 	bl	80080f0 <xTaskCreateStatic>
 800850e:	4603      	mov	r3, r0
 8008510:	4a23      	ldr	r2, [pc, #140]	@ (80085a0 <vTaskStartScheduler+0xc8>)
 8008512:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008514:	4b22      	ldr	r3, [pc, #136]	@ (80085a0 <vTaskStartScheduler+0xc8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e001      	b.n	8008526 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d102      	bne.n	8008532 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800852c:	f000 fd1a 	bl	8008f64 <xTimerCreateTimerTask>
 8008530:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11b      	bne.n	8008570 <vTaskStartScheduler+0x98>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	613b      	str	r3, [r7, #16]
}
 800854a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800854c:	4b15      	ldr	r3, [pc, #84]	@ (80085a4 <vTaskStartScheduler+0xcc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3354      	adds	r3, #84	@ 0x54
 8008552:	4a15      	ldr	r2, [pc, #84]	@ (80085a8 <vTaskStartScheduler+0xd0>)
 8008554:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008556:	4b15      	ldr	r3, [pc, #84]	@ (80085ac <vTaskStartScheduler+0xd4>)
 8008558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800855c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800855e:	4b14      	ldr	r3, [pc, #80]	@ (80085b0 <vTaskStartScheduler+0xd8>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008564:	4b13      	ldr	r3, [pc, #76]	@ (80085b4 <vTaskStartScheduler+0xdc>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800856a:	f001 f8e1 	bl	8009730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800856e:	e00f      	b.n	8008590 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008576:	d10b      	bne.n	8008590 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	60fb      	str	r3, [r7, #12]
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	e7fd      	b.n	800858c <vTaskStartScheduler+0xb4>
}
 8008590:	bf00      	nop
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	0800a0d8 	.word	0x0800a0d8
 800859c:	08008be9 	.word	0x08008be9
 80085a0:	2400148c 	.word	0x2400148c
 80085a4:	24000f94 	.word	0x24000f94
 80085a8:	24000014 	.word	0x24000014
 80085ac:	24001488 	.word	0x24001488
 80085b0:	24001474 	.word	0x24001474
 80085b4:	2400146c 	.word	0x2400146c

080085b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085bc:	4b04      	ldr	r3, [pc, #16]	@ (80085d0 <vTaskSuspendAll+0x18>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3301      	adds	r3, #1
 80085c2:	4a03      	ldr	r2, [pc, #12]	@ (80085d0 <vTaskSuspendAll+0x18>)
 80085c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	24001490 	.word	0x24001490

080085d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085e2:	4b42      	ldr	r3, [pc, #264]	@ (80086ec <xTaskResumeAll+0x118>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <xTaskResumeAll+0x2e>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	603b      	str	r3, [r7, #0]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008602:	f001 f939 	bl	8009878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008606:	4b39      	ldr	r3, [pc, #228]	@ (80086ec <xTaskResumeAll+0x118>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a37      	ldr	r2, [pc, #220]	@ (80086ec <xTaskResumeAll+0x118>)
 800860e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008610:	4b36      	ldr	r3, [pc, #216]	@ (80086ec <xTaskResumeAll+0x118>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d162      	bne.n	80086de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008618:	4b35      	ldr	r3, [pc, #212]	@ (80086f0 <xTaskResumeAll+0x11c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05e      	beq.n	80086de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008620:	e02f      	b.n	8008682 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008622:	4b34      	ldr	r3, [pc, #208]	@ (80086f4 <xTaskResumeAll+0x120>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3318      	adds	r3, #24
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff f83a 	bl	80076a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3304      	adds	r3, #4
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff f835 	bl	80076a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008642:	4b2d      	ldr	r3, [pc, #180]	@ (80086f8 <xTaskResumeAll+0x124>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d903      	bls.n	8008652 <xTaskResumeAll+0x7e>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864e:	4a2a      	ldr	r2, [pc, #168]	@ (80086f8 <xTaskResumeAll+0x124>)
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4a27      	ldr	r2, [pc, #156]	@ (80086fc <xTaskResumeAll+0x128>)
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe ffc0 	bl	80075ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008672:	4b23      	ldr	r3, [pc, #140]	@ (8008700 <xTaskResumeAll+0x12c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	429a      	cmp	r2, r3
 800867a:	d302      	bcc.n	8008682 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800867c:	4b21      	ldr	r3, [pc, #132]	@ (8008704 <xTaskResumeAll+0x130>)
 800867e:	2201      	movs	r2, #1
 8008680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008682:	4b1c      	ldr	r3, [pc, #112]	@ (80086f4 <xTaskResumeAll+0x120>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1cb      	bne.n	8008622 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008690:	f000 fb66 	bl	8008d60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008694:	4b1c      	ldr	r3, [pc, #112]	@ (8008708 <xTaskResumeAll+0x134>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086a0:	f000 f846 	bl	8008730 <xTaskIncrementTick>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80086aa:	4b16      	ldr	r3, [pc, #88]	@ (8008704 <xTaskResumeAll+0x130>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f1      	bne.n	80086a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <xTaskResumeAll+0x134>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086c2:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <xTaskResumeAll+0x130>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086ca:	2301      	movs	r3, #1
 80086cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ce:	4b0f      	ldr	r3, [pc, #60]	@ (800870c <xTaskResumeAll+0x138>)
 80086d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086de:	f001 f8fd 	bl	80098dc <vPortExitCritical>

	return xAlreadyYielded;
 80086e2:	68bb      	ldr	r3, [r7, #8]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	24001490 	.word	0x24001490
 80086f0:	24001468 	.word	0x24001468
 80086f4:	24001428 	.word	0x24001428
 80086f8:	24001470 	.word	0x24001470
 80086fc:	24000f98 	.word	0x24000f98
 8008700:	24000f94 	.word	0x24000f94
 8008704:	2400147c 	.word	0x2400147c
 8008708:	24001478 	.word	0x24001478
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008716:	4b05      	ldr	r3, [pc, #20]	@ (800872c <xTaskGetTickCount+0x1c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800871c:	687b      	ldr	r3, [r7, #4]
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	2400146c 	.word	0x2400146c

08008730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873a:	4b4f      	ldr	r3, [pc, #316]	@ (8008878 <xTaskIncrementTick+0x148>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 8090 	bne.w	8008864 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008744:	4b4d      	ldr	r3, [pc, #308]	@ (800887c <xTaskIncrementTick+0x14c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800874c:	4a4b      	ldr	r2, [pc, #300]	@ (800887c <xTaskIncrementTick+0x14c>)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d121      	bne.n	800879c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008758:	4b49      	ldr	r3, [pc, #292]	@ (8008880 <xTaskIncrementTick+0x150>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	603b      	str	r3, [r7, #0]
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	e7fd      	b.n	8008776 <xTaskIncrementTick+0x46>
 800877a:	4b41      	ldr	r3, [pc, #260]	@ (8008880 <xTaskIncrementTick+0x150>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	4b40      	ldr	r3, [pc, #256]	@ (8008884 <xTaskIncrementTick+0x154>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a3e      	ldr	r2, [pc, #248]	@ (8008880 <xTaskIncrementTick+0x150>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4a3e      	ldr	r2, [pc, #248]	@ (8008884 <xTaskIncrementTick+0x154>)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b3e      	ldr	r3, [pc, #248]	@ (8008888 <xTaskIncrementTick+0x158>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	4a3c      	ldr	r2, [pc, #240]	@ (8008888 <xTaskIncrementTick+0x158>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	f000 fae2 	bl	8008d60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800879c:	4b3b      	ldr	r3, [pc, #236]	@ (800888c <xTaskIncrementTick+0x15c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d349      	bcc.n	800883a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a6:	4b36      	ldr	r3, [pc, #216]	@ (8008880 <xTaskIncrementTick+0x150>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b0:	4b36      	ldr	r3, [pc, #216]	@ (800888c <xTaskIncrementTick+0x15c>)
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087b6:	601a      	str	r2, [r3, #0]
					break;
 80087b8:	e03f      	b.n	800883a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ba:	4b31      	ldr	r3, [pc, #196]	@ (8008880 <xTaskIncrementTick+0x150>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d203      	bcs.n	80087da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087d2:	4a2e      	ldr	r2, [pc, #184]	@ (800888c <xTaskIncrementTick+0x15c>)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087d8:	e02f      	b.n	800883a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3304      	adds	r3, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe ff62 	bl	80076a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3318      	adds	r3, #24
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe ff59 	bl	80076a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fa:	4b25      	ldr	r3, [pc, #148]	@ (8008890 <xTaskIncrementTick+0x160>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d903      	bls.n	800880a <xTaskIncrementTick+0xda>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008806:	4a22      	ldr	r2, [pc, #136]	@ (8008890 <xTaskIncrementTick+0x160>)
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4a1f      	ldr	r2, [pc, #124]	@ (8008894 <xTaskIncrementTick+0x164>)
 8008818:	441a      	add	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	3304      	adds	r3, #4
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f7fe fee4 	bl	80075ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882a:	4b1b      	ldr	r3, [pc, #108]	@ (8008898 <xTaskIncrementTick+0x168>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008830:	429a      	cmp	r2, r3
 8008832:	d3b8      	bcc.n	80087a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008838:	e7b5      	b.n	80087a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800883a:	4b17      	ldr	r3, [pc, #92]	@ (8008898 <xTaskIncrementTick+0x168>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008840:	4914      	ldr	r1, [pc, #80]	@ (8008894 <xTaskIncrementTick+0x164>)
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d901      	bls.n	8008856 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008852:	2301      	movs	r3, #1
 8008854:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008856:	4b11      	ldr	r3, [pc, #68]	@ (800889c <xTaskIncrementTick+0x16c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800885e:	2301      	movs	r3, #1
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	e004      	b.n	800886e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008864:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <xTaskIncrementTick+0x170>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	4a0d      	ldr	r2, [pc, #52]	@ (80088a0 <xTaskIncrementTick+0x170>)
 800886c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800886e:	697b      	ldr	r3, [r7, #20]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	24001490 	.word	0x24001490
 800887c:	2400146c 	.word	0x2400146c
 8008880:	24001420 	.word	0x24001420
 8008884:	24001424 	.word	0x24001424
 8008888:	24001480 	.word	0x24001480
 800888c:	24001488 	.word	0x24001488
 8008890:	24001470 	.word	0x24001470
 8008894:	24000f98 	.word	0x24000f98
 8008898:	24000f94 	.word	0x24000f94
 800889c:	2400147c 	.word	0x2400147c
 80088a0:	24001478 	.word	0x24001478

080088a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008958 <vTaskSwitchContext+0xb4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088b2:	4b2a      	ldr	r3, [pc, #168]	@ (800895c <vTaskSwitchContext+0xb8>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088b8:	e047      	b.n	800894a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80088ba:	4b28      	ldr	r3, [pc, #160]	@ (800895c <vTaskSwitchContext+0xb8>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c0:	4b27      	ldr	r3, [pc, #156]	@ (8008960 <vTaskSwitchContext+0xbc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e011      	b.n	80088ec <vTaskSwitchContext+0x48>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <vTaskSwitchContext+0x3e>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	491d      	ldr	r1, [pc, #116]	@ (8008964 <vTaskSwitchContext+0xc0>)
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0e3      	beq.n	80088c8 <vTaskSwitchContext+0x24>
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4a16      	ldr	r2, [pc, #88]	@ (8008964 <vTaskSwitchContext+0xc0>)
 800890c:	4413      	add	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	605a      	str	r2, [r3, #4]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	3308      	adds	r3, #8
 8008922:	429a      	cmp	r2, r3
 8008924:	d104      	bne.n	8008930 <vTaskSwitchContext+0x8c>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	4a0c      	ldr	r2, [pc, #48]	@ (8008968 <vTaskSwitchContext+0xc4>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	4a09      	ldr	r2, [pc, #36]	@ (8008960 <vTaskSwitchContext+0xbc>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008940:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <vTaskSwitchContext+0xc4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3354      	adds	r3, #84	@ 0x54
 8008946:	4a09      	ldr	r2, [pc, #36]	@ (800896c <vTaskSwitchContext+0xc8>)
 8008948:	6013      	str	r3, [r2, #0]
}
 800894a:	bf00      	nop
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	24001490 	.word	0x24001490
 800895c:	2400147c 	.word	0x2400147c
 8008960:	24001470 	.word	0x24001470
 8008964:	24000f98 	.word	0x24000f98
 8008968:	24000f94 	.word	0x24000f94
 800896c:	24000014 	.word	0x24000014

08008970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008998:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <vTaskPlaceOnEventList+0x48>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3318      	adds	r3, #24
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe fe48 	bl	8007636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089a6:	2101      	movs	r1, #1
 80089a8:	6838      	ldr	r0, [r7, #0]
 80089aa:	f000 fa87 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	24000f94 	.word	0x24000f94

080089bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	617b      	str	r3, [r7, #20]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <vTaskPlaceOnEventListRestricted+0x54>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3318      	adds	r3, #24
 80089ec:	4619      	mov	r1, r3
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7fe fdfd 	bl	80075ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	68b8      	ldr	r0, [r7, #8]
 8008a04:	f000 fa5a 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
	}
 8008a08:	bf00      	nop
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	24000f94 	.word	0x24000f94

08008a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	60fb      	str	r3, [r7, #12]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	3318      	adds	r3, #24
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fe2e 	bl	80076a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac4 <xTaskRemoveFromEventList+0xb0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11d      	bne.n	8008a90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe fe25 	bl	80076a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a62:	4b19      	ldr	r3, [pc, #100]	@ (8008ac8 <xTaskRemoveFromEventList+0xb4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d903      	bls.n	8008a72 <xTaskRemoveFromEventList+0x5e>
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <xTaskRemoveFromEventList+0xb4>)
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <xTaskRemoveFromEventList+0xb8>)
 8008a80:	441a      	add	r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f7fe fdb0 	bl	80075ee <vListInsertEnd>
 8008a8e:	e005      	b.n	8008a9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3318      	adds	r3, #24
 8008a94:	4619      	mov	r1, r3
 8008a96:	480e      	ldr	r0, [pc, #56]	@ (8008ad0 <xTaskRemoveFromEventList+0xbc>)
 8008a98:	f7fe fda9 	bl	80075ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <xTaskRemoveFromEventList+0xc0>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d905      	bls.n	8008ab6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <xTaskRemoveFromEventList+0xc4>)
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e001      	b.n	8008aba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008aba:	697b      	ldr	r3, [r7, #20]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	24001490 	.word	0x24001490
 8008ac8:	24001470 	.word	0x24001470
 8008acc:	24000f98 	.word	0x24000f98
 8008ad0:	24001428 	.word	0x24001428
 8008ad4:	24000f94 	.word	0x24000f94
 8008ad8:	2400147c 	.word	0x2400147c

08008adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ae4:	4b06      	ldr	r3, [pc, #24]	@ (8008b00 <vTaskInternalSetTimeOutState+0x24>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aec:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <vTaskInternalSetTimeOutState+0x28>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	605a      	str	r2, [r3, #4]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	24001480 	.word	0x24001480
 8008b04:	2400146c 	.word	0x2400146c

08008b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	613b      	str	r3, [r7, #16]
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10b      	bne.n	8008b4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	60fb      	str	r3, [r7, #12]
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	e7fd      	b.n	8008b4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b4e:	f000 fe93 	bl	8009878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b52:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc8 <xTaskCheckForTimeOut+0xc0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b6a:	d102      	bne.n	8008b72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e023      	b.n	8008bba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b15      	ldr	r3, [pc, #84]	@ (8008bcc <xTaskCheckForTimeOut+0xc4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d007      	beq.n	8008b8e <xTaskCheckForTimeOut+0x86>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e015      	b.n	8008bba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d20b      	bcs.n	8008bb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff ff99 	bl	8008adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	e004      	b.n	8008bba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bba:	f000 fe8f 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	2400146c 	.word	0x2400146c
 8008bcc:	24001480 	.word	0x24001480

08008bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bd4:	4b03      	ldr	r3, [pc, #12]	@ (8008be4 <vTaskMissedYield+0x14>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	2400147c 	.word	0x2400147c

08008be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bf0:	f000 f852 	bl	8008c98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bf4:	4b06      	ldr	r3, [pc, #24]	@ (8008c10 <prvIdleTask+0x28>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d9f9      	bls.n	8008bf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <prvIdleTask+0x2c>)
 8008bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c0c:	e7f0      	b.n	8008bf0 <prvIdleTask+0x8>
 8008c0e:	bf00      	nop
 8008c10:	24000f98 	.word	0x24000f98
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c1e:	2300      	movs	r3, #0
 8008c20:	607b      	str	r3, [r7, #4]
 8008c22:	e00c      	b.n	8008c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4a12      	ldr	r2, [pc, #72]	@ (8008c78 <prvInitialiseTaskLists+0x60>)
 8008c30:	4413      	add	r3, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fcae 	bl	8007594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	607b      	str	r3, [r7, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b37      	cmp	r3, #55	@ 0x37
 8008c42:	d9ef      	bls.n	8008c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c44:	480d      	ldr	r0, [pc, #52]	@ (8008c7c <prvInitialiseTaskLists+0x64>)
 8008c46:	f7fe fca5 	bl	8007594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c4a:	480d      	ldr	r0, [pc, #52]	@ (8008c80 <prvInitialiseTaskLists+0x68>)
 8008c4c:	f7fe fca2 	bl	8007594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c50:	480c      	ldr	r0, [pc, #48]	@ (8008c84 <prvInitialiseTaskLists+0x6c>)
 8008c52:	f7fe fc9f 	bl	8007594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c56:	480c      	ldr	r0, [pc, #48]	@ (8008c88 <prvInitialiseTaskLists+0x70>)
 8008c58:	f7fe fc9c 	bl	8007594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c5c:	480b      	ldr	r0, [pc, #44]	@ (8008c8c <prvInitialiseTaskLists+0x74>)
 8008c5e:	f7fe fc99 	bl	8007594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c62:	4b0b      	ldr	r3, [pc, #44]	@ (8008c90 <prvInitialiseTaskLists+0x78>)
 8008c64:	4a05      	ldr	r2, [pc, #20]	@ (8008c7c <prvInitialiseTaskLists+0x64>)
 8008c66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	@ (8008c94 <prvInitialiseTaskLists+0x7c>)
 8008c6a:	4a05      	ldr	r2, [pc, #20]	@ (8008c80 <prvInitialiseTaskLists+0x68>)
 8008c6c:	601a      	str	r2, [r3, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	24000f98 	.word	0x24000f98
 8008c7c:	240013f8 	.word	0x240013f8
 8008c80:	2400140c 	.word	0x2400140c
 8008c84:	24001428 	.word	0x24001428
 8008c88:	2400143c 	.word	0x2400143c
 8008c8c:	24001454 	.word	0x24001454
 8008c90:	24001420 	.word	0x24001420
 8008c94:	24001424 	.word	0x24001424

08008c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c9e:	e019      	b.n	8008cd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ca0:	f000 fdea 	bl	8009878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <prvCheckTasksWaitingTermination+0x50>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe fcf9 	bl	80076a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cec <prvCheckTasksWaitingTermination+0x54>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8008cec <prvCheckTasksWaitingTermination+0x54>)
 8008cbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf0 <prvCheckTasksWaitingTermination+0x58>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf0 <prvCheckTasksWaitingTermination+0x58>)
 8008cc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cca:	f000 fe07 	bl	80098dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f810 	bl	8008cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cd4:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <prvCheckTasksWaitingTermination+0x58>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e1      	bne.n	8008ca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2400143c 	.word	0x2400143c
 8008cec:	24001468 	.word	0x24001468
 8008cf0:	24001450 	.word	0x24001450

08008cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3354      	adds	r3, #84	@ 0x54
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 f8d1 	bl	8009ea8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d108      	bne.n	8008d22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 ff9f 	bl	8009c58 <vPortFree>
				vPortFree( pxTCB );
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 ff9c 	bl	8009c58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d20:	e019      	b.n	8008d56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d103      	bne.n	8008d34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 ff93 	bl	8009c58 <vPortFree>
	}
 8008d32:	e010      	b.n	8008d56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d00b      	beq.n	8008d56 <prvDeleteTCB+0x62>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	60fb      	str	r3, [r7, #12]
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	e7fd      	b.n	8008d52 <prvDeleteTCB+0x5e>
	}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d66:	4b0c      	ldr	r3, [pc, #48]	@ (8008d98 <prvResetNextTaskUnblockTime+0x38>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d70:	4b0a      	ldr	r3, [pc, #40]	@ (8008d9c <prvResetNextTaskUnblockTime+0x3c>)
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d78:	e008      	b.n	8008d8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7a:	4b07      	ldr	r3, [pc, #28]	@ (8008d98 <prvResetNextTaskUnblockTime+0x38>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a04      	ldr	r2, [pc, #16]	@ (8008d9c <prvResetNextTaskUnblockTime+0x3c>)
 8008d8a:	6013      	str	r3, [r2, #0]
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	24001420 	.word	0x24001420
 8008d9c:	24001488 	.word	0x24001488

08008da0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008da6:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <xTaskGetSchedulerState+0x34>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dae:	2301      	movs	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	e008      	b.n	8008dc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db4:	4b08      	ldr	r3, [pc, #32]	@ (8008dd8 <xTaskGetSchedulerState+0x38>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	e001      	b.n	8008dc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dc6:	687b      	ldr	r3, [r7, #4]
	}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	24001474 	.word	0x24001474
 8008dd8:	24001490 	.word	0x24001490

08008ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d058      	beq.n	8008ea4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008df2:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb0 <xTaskPriorityDisinherit+0xd4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d00b      	beq.n	8008e14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60fb      	str	r3, [r7, #12]
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	e7fd      	b.n	8008e10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60bb      	str	r3, [r7, #8]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d02c      	beq.n	8008ea4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d128      	bne.n	8008ea4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fc26 	bl	80076a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e74:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <xTaskPriorityDisinherit+0xd8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d903      	bls.n	8008e84 <xTaskPriorityDisinherit+0xa8>
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb4 <xTaskPriorityDisinherit+0xd8>)
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4a09      	ldr	r2, [pc, #36]	@ (8008eb8 <xTaskPriorityDisinherit+0xdc>)
 8008e92:	441a      	add	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fe fba7 	bl	80075ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ea4:	697b      	ldr	r3, [r7, #20]
	}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	24000f94 	.word	0x24000f94
 8008eb4:	24001470 	.word	0x24001470
 8008eb8:	24000f98 	.word	0x24000f98

08008ebc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ec6:	4b21      	ldr	r3, [pc, #132]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x90>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ecc:	4b20      	ldr	r3, [pc, #128]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fbe8 	bl	80076a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ede:	d10a      	bne.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4819      	ldr	r0, [pc, #100]	@ (8008f54 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ef0:	f7fe fb7d 	bl	80075ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ef4:	e026      	b.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008efe:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d209      	bcs.n	8008f22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f0e:	4b12      	ldr	r3, [pc, #72]	@ (8008f58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7fe fb8b 	bl	8007636 <vListInsert>
}
 8008f20:	e010      	b.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f22:	4b0e      	ldr	r3, [pc, #56]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	4b0a      	ldr	r3, [pc, #40]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fe fb81 	bl	8007636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f34:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d202      	bcs.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f3e:	4a08      	ldr	r2, [pc, #32]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6013      	str	r3, [r2, #0]
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	2400146c 	.word	0x2400146c
 8008f50:	24000f94 	.word	0x24000f94
 8008f54:	24001454 	.word	0x24001454
 8008f58:	24001424 	.word	0x24001424
 8008f5c:	24001420 	.word	0x24001420
 8008f60:	24001488 	.word	0x24001488

08008f64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	@ 0x28
 8008f68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f6e:	f000 fb13 	bl	8009598 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f72:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe8 <xTimerCreateTimerTask+0x84>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d021      	beq.n	8008fbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f82:	1d3a      	adds	r2, r7, #4
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	f107 030c 	add.w	r3, r7, #12
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fae7 	bl	8007560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	9202      	str	r2, [sp, #8]
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	4911      	ldr	r1, [pc, #68]	@ (8008fec <xTimerCreateTimerTask+0x88>)
 8008fa6:	4812      	ldr	r0, [pc, #72]	@ (8008ff0 <xTimerCreateTimerTask+0x8c>)
 8008fa8:	f7ff f8a2 	bl	80080f0 <xTaskCreateStatic>
 8008fac:	4603      	mov	r3, r0
 8008fae:	4a11      	ldr	r2, [pc, #68]	@ (8008ff4 <xTimerCreateTimerTask+0x90>)
 8008fb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <xTimerCreateTimerTask+0x90>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	613b      	str	r3, [r7, #16]
}
 8008fd6:	bf00      	nop
 8008fd8:	bf00      	nop
 8008fda:	e7fd      	b.n	8008fd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	240014c4 	.word	0x240014c4
 8008fec:	0800a0e0 	.word	0x0800a0e0
 8008ff0:	08009131 	.word	0x08009131
 8008ff4:	240014c8 	.word	0x240014c8

08008ff8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	@ 0x28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <xTimerGenericCommand+0x30>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	623b      	str	r3, [r7, #32]
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009028:	4b19      	ldr	r3, [pc, #100]	@ (8009090 <xTimerGenericCommand+0x98>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02a      	beq.n	8009086 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b05      	cmp	r3, #5
 8009040:	dc18      	bgt.n	8009074 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009042:	f7ff fead 	bl	8008da0 <xTaskGetSchedulerState>
 8009046:	4603      	mov	r3, r0
 8009048:	2b02      	cmp	r3, #2
 800904a:	d109      	bne.n	8009060 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800904c:	4b10      	ldr	r3, [pc, #64]	@ (8009090 <xTimerGenericCommand+0x98>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	f107 0110 	add.w	r1, r7, #16
 8009054:	2300      	movs	r3, #0
 8009056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009058:	f7fe fc5a 	bl	8007910 <xQueueGenericSend>
 800905c:	6278      	str	r0, [r7, #36]	@ 0x24
 800905e:	e012      	b.n	8009086 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009060:	4b0b      	ldr	r3, [pc, #44]	@ (8009090 <xTimerGenericCommand+0x98>)
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	f107 0110 	add.w	r1, r7, #16
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	f7fe fc50 	bl	8007910 <xQueueGenericSend>
 8009070:	6278      	str	r0, [r7, #36]	@ 0x24
 8009072:	e008      	b.n	8009086 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009074:	4b06      	ldr	r3, [pc, #24]	@ (8009090 <xTimerGenericCommand+0x98>)
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	f107 0110 	add.w	r1, r7, #16
 800907c:	2300      	movs	r3, #0
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	f7fe fd48 	bl	8007b14 <xQueueGenericSendFromISR>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009088:	4618      	mov	r0, r3
 800908a:	3728      	adds	r7, #40	@ 0x28
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	240014c4 	.word	0x240014c4

08009094 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909e:	4b23      	ldr	r3, [pc, #140]	@ (800912c <prvProcessExpiredTimer+0x98>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe fafb 	bl	80076a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d023      	beq.n	8009108 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	18d1      	adds	r1, r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	6978      	ldr	r0, [r7, #20]
 80090ce:	f000 f8d5 	bl	800927c <prvInsertTimerInActiveList>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d020      	beq.n	800911a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090d8:	2300      	movs	r3, #0
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	2300      	movs	r3, #0
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f7ff ff88 	bl	8008ff8 <xTimerGenericCommand>
 80090e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d114      	bne.n	800911a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	60fb      	str	r3, [r7, #12]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	4798      	blx	r3
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	240014bc 	.word	0x240014bc

08009130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4618      	mov	r0, r3
 800913e:	f000 f859 	bl	80091f4 <prvGetNextExpireTime>
 8009142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4619      	mov	r1, r3
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f805 	bl	8009158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800914e:	f000 f8d7 	bl	8009300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009152:	bf00      	nop
 8009154:	e7f0      	b.n	8009138 <prvTimerTask+0x8>
	...

08009158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009162:	f7ff fa29 	bl	80085b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f866 	bl	800923c <prvSampleTimeNow>
 8009170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d130      	bne.n	80091da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <prvProcessTimerOrBlockTask+0x3c>
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	429a      	cmp	r2, r3
 8009184:	d806      	bhi.n	8009194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009186:	f7ff fa25 	bl	80085d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ff81 	bl	8009094 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009192:	e024      	b.n	80091de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800919a:	4b13      	ldr	r3, [pc, #76]	@ (80091e8 <prvProcessTimerOrBlockTask+0x90>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <prvProcessTimerOrBlockTask+0x50>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <prvProcessTimerOrBlockTask+0x52>
 80091a8:	2300      	movs	r3, #0
 80091aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091ac:	4b0f      	ldr	r3, [pc, #60]	@ (80091ec <prvProcessTimerOrBlockTask+0x94>)
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f7fe ff65 	bl	8008088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091be:	f7ff fa09 	bl	80085d4 <xTaskResumeAll>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091c8:	4b09      	ldr	r3, [pc, #36]	@ (80091f0 <prvProcessTimerOrBlockTask+0x98>)
 80091ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	f3bf 8f6f 	isb	sy
}
 80091d8:	e001      	b.n	80091de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091da:	f7ff f9fb 	bl	80085d4 <xTaskResumeAll>
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	240014c0 	.word	0x240014c0
 80091ec:	240014c4 	.word	0x240014c4
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009238 <prvGetNextExpireTime+0x44>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <prvGetNextExpireTime+0x16>
 8009206:	2201      	movs	r2, #1
 8009208:	e000      	b.n	800920c <prvGetNextExpireTime+0x18>
 800920a:	2200      	movs	r2, #0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <prvGetNextExpireTime+0x44>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e001      	b.n	8009228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009228:	68fb      	ldr	r3, [r7, #12]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	240014bc 	.word	0x240014bc

0800923c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009244:	f7ff fa64 	bl	8008710 <xTaskGetTickCount>
 8009248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800924a:	4b0b      	ldr	r3, [pc, #44]	@ (8009278 <prvSampleTimeNow+0x3c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	429a      	cmp	r2, r3
 8009252:	d205      	bcs.n	8009260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009254:	f000 f93a 	bl	80094cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e002      	b.n	8009266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009266:	4a04      	ldr	r2, [pc, #16]	@ (8009278 <prvSampleTimeNow+0x3c>)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800926c:	68fb      	ldr	r3, [r7, #12]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	240014cc 	.word	0x240014cc

0800927c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d812      	bhi.n	80092c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	1ad2      	subs	r2, r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d302      	bcc.n	80092b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092b0:	2301      	movs	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	e01b      	b.n	80092ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092b6:	4b10      	ldr	r3, [pc, #64]	@ (80092f8 <prvInsertTimerInActiveList+0x7c>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3304      	adds	r3, #4
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f7fe f9b8 	bl	8007636 <vListInsert>
 80092c6:	e012      	b.n	80092ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d206      	bcs.n	80092de <prvInsertTimerInActiveList+0x62>
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d302      	bcc.n	80092de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e007      	b.n	80092ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092de:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <prvInsertTimerInActiveList+0x80>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f7fe f9a4 	bl	8007636 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ee:	697b      	ldr	r3, [r7, #20]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	240014c0 	.word	0x240014c0
 80092fc:	240014bc 	.word	0x240014bc

08009300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08e      	sub	sp, #56	@ 0x38
 8009304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009306:	e0ce      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	da19      	bge.n	8009342 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800930e:	1d3b      	adds	r3, r7, #4
 8009310:	3304      	adds	r3, #4
 8009312:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	61fb      	str	r3, [r7, #28]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009338:	6850      	ldr	r0, [r2, #4]
 800933a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800933c:	6892      	ldr	r2, [r2, #8]
 800933e:	4611      	mov	r1, r2
 8009340:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f2c0 80ae 	blt.w	80094a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	3304      	adds	r3, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe f9a4 	bl	80076a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009360:	463b      	mov	r3, r7
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff ff6a 	bl	800923c <prvSampleTimeNow>
 8009368:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b09      	cmp	r3, #9
 800936e:	f200 8097 	bhi.w	80094a0 <prvProcessReceivedCommands+0x1a0>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <prvProcessReceivedCommands+0x78>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093a1 	.word	0x080093a1
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093a1 	.word	0x080093a1
 8009384:	08009417 	.word	0x08009417
 8009388:	0800942b 	.word	0x0800942b
 800938c:	08009477 	.word	0x08009477
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093a1 	.word	0x080093a1
 8009398:	08009417 	.word	0x08009417
 800939c:	0800942b 	.word	0x0800942b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	18d1      	adds	r1, r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093c0:	f7ff ff5c 	bl	800927c <prvInsertTimerInActiveList>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d06c      	beq.n	80094a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d061      	beq.n	80094a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	441a      	add	r2, r3
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	2100      	movs	r1, #0
 80093f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093f2:	f7ff fe01 	bl	8008ff8 <xTimerGenericCommand>
 80093f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d152      	bne.n	80094a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	61bb      	str	r3, [r7, #24]
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	e7fd      	b.n	8009412 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800941c:	f023 0301 	bic.w	r3, r3, #1
 8009420:	b2da      	uxtb	r2, r3
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009428:	e03d      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009438:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	617b      	str	r3, [r7, #20]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	18d1      	adds	r1, r2, r3
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800946e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009470:	f7ff ff04 	bl	800927c <prvInsertTimerInActiveList>
					break;
 8009474:	e017      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d103      	bne.n	800948c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009486:	f000 fbe7 	bl	8009c58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800948a:	e00c      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009492:	f023 0301 	bic.w	r3, r3, #1
 8009496:	b2da      	uxtb	r2, r3
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800949e:	e002      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80094a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094a6:	4b08      	ldr	r3, [pc, #32]	@ (80094c8 <prvProcessReceivedCommands+0x1c8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	1d39      	adds	r1, r7, #4
 80094ac:	2200      	movs	r2, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fbce 	bl	8007c50 <xQueueReceive>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f47f af26 	bne.w	8009308 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	3730      	adds	r7, #48	@ 0x30
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	240014c4 	.word	0x240014c4

080094cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094d2:	e049      	b.n	8009568 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094d4:	4b2e      	ldr	r3, [pc, #184]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094de:	4b2c      	ldr	r3, [pc, #176]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe f8db 	bl	80076a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d02f      	beq.n	8009568 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	429a      	cmp	r2, r3
 8009518:	d90e      	bls.n	8009538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009526:	4b1a      	ldr	r3, [pc, #104]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3304      	adds	r3, #4
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f7fe f880 	bl	8007636 <vListInsert>
 8009536:	e017      	b.n	8009568 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009538:	2300      	movs	r3, #0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fd58 	bl	8008ff8 <xTimerGenericCommand>
 8009548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10b      	bne.n	8009568 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	603b      	str	r3, [r7, #0]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009568:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1b0      	bne.n	80094d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009572:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009578:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <prvSwitchTimerLists+0xc8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a04      	ldr	r2, [pc, #16]	@ (8009590 <prvSwitchTimerLists+0xc4>)
 800957e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009580:	4a04      	ldr	r2, [pc, #16]	@ (8009594 <prvSwitchTimerLists+0xc8>)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6013      	str	r3, [r2, #0]
}
 8009586:	bf00      	nop
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	240014bc 	.word	0x240014bc
 8009594:	240014c0 	.word	0x240014c0

08009598 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800959e:	f000 f96b 	bl	8009878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095a2:	4b15      	ldr	r3, [pc, #84]	@ (80095f8 <prvCheckForValidListAndQueue+0x60>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d120      	bne.n	80095ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095aa:	4814      	ldr	r0, [pc, #80]	@ (80095fc <prvCheckForValidListAndQueue+0x64>)
 80095ac:	f7fd fff2 	bl	8007594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095b0:	4813      	ldr	r0, [pc, #76]	@ (8009600 <prvCheckForValidListAndQueue+0x68>)
 80095b2:	f7fd ffef 	bl	8007594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095b6:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <prvCheckForValidListAndQueue+0x6c>)
 80095b8:	4a10      	ldr	r2, [pc, #64]	@ (80095fc <prvCheckForValidListAndQueue+0x64>)
 80095ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095bc:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <prvCheckForValidListAndQueue+0x70>)
 80095be:	4a10      	ldr	r2, [pc, #64]	@ (8009600 <prvCheckForValidListAndQueue+0x68>)
 80095c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095c2:	2300      	movs	r3, #0
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4b11      	ldr	r3, [pc, #68]	@ (800960c <prvCheckForValidListAndQueue+0x74>)
 80095c8:	4a11      	ldr	r2, [pc, #68]	@ (8009610 <prvCheckForValidListAndQueue+0x78>)
 80095ca:	2110      	movs	r1, #16
 80095cc:	200a      	movs	r0, #10
 80095ce:	f7fe f8ff 	bl	80077d0 <xQueueGenericCreateStatic>
 80095d2:	4603      	mov	r3, r0
 80095d4:	4a08      	ldr	r2, [pc, #32]	@ (80095f8 <prvCheckForValidListAndQueue+0x60>)
 80095d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095d8:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <prvCheckForValidListAndQueue+0x60>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095e0:	4b05      	ldr	r3, [pc, #20]	@ (80095f8 <prvCheckForValidListAndQueue+0x60>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	490b      	ldr	r1, [pc, #44]	@ (8009614 <prvCheckForValidListAndQueue+0x7c>)
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fd24 	bl	8008034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095ec:	f000 f976 	bl	80098dc <vPortExitCritical>
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	240014c4 	.word	0x240014c4
 80095fc:	24001494 	.word	0x24001494
 8009600:	240014a8 	.word	0x240014a8
 8009604:	240014bc 	.word	0x240014bc
 8009608:	240014c0 	.word	0x240014c0
 800960c:	24001570 	.word	0x24001570
 8009610:	240014d0 	.word	0x240014d0
 8009614:	0800a0e8 	.word	0x0800a0e8

08009618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3b04      	subs	r3, #4
 8009628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3b04      	subs	r3, #4
 8009636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	f023 0201 	bic.w	r2, r3, #1
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3b04      	subs	r3, #4
 8009646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009648:	4a0c      	ldr	r2, [pc, #48]	@ (800967c <pxPortInitialiseStack+0x64>)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3b14      	subs	r3, #20
 8009652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3b04      	subs	r3, #4
 800965e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f06f 0202 	mvn.w	r2, #2
 8009666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3b20      	subs	r3, #32
 800966c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800966e:	68fb      	ldr	r3, [r7, #12]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	08009681 	.word	0x08009681

08009680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800968a:	4b13      	ldr	r3, [pc, #76]	@ (80096d8 <prvTaskExitError+0x58>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009692:	d00b      	beq.n	80096ac <prvTaskExitError+0x2c>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60fb      	str	r3, [r7, #12]
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	e7fd      	b.n	80096a8 <prvTaskExitError+0x28>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	60bb      	str	r3, [r7, #8]
}
 80096be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096c0:	bf00      	nop
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0fc      	beq.n	80096c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	24000010 	.word	0x24000010
 80096dc:	00000000 	.word	0x00000000

080096e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <pxCurrentTCBConst2>)
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	6808      	ldr	r0, [r1, #0]
 80096e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ea:	f380 8809 	msr	PSP, r0
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	4770      	bx	lr
 80096fc:	f3af 8000 	nop.w

08009700 <pxCurrentTCBConst2>:
 8009700:	24000f94 	.word	0x24000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop

08009708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009708:	4808      	ldr	r0, [pc, #32]	@ (800972c <prvPortStartFirstTask+0x24>)
 800970a:	6800      	ldr	r0, [r0, #0]
 800970c:	6800      	ldr	r0, [r0, #0]
 800970e:	f380 8808 	msr	MSP, r0
 8009712:	f04f 0000 	mov.w	r0, #0
 8009716:	f380 8814 	msr	CONTROL, r0
 800971a:	b662      	cpsie	i
 800971c:	b661      	cpsie	f
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	df00      	svc	0
 8009728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800972a:	bf00      	nop
 800972c:	e000ed08 	.word	0xe000ed08

08009730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009736:	4b47      	ldr	r3, [pc, #284]	@ (8009854 <xPortStartScheduler+0x124>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a47      	ldr	r2, [pc, #284]	@ (8009858 <xPortStartScheduler+0x128>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d10b      	bne.n	8009758 <xPortStartScheduler+0x28>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
}
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	e7fd      	b.n	8009754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009758:	4b3e      	ldr	r3, [pc, #248]	@ (8009854 <xPortStartScheduler+0x124>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a3f      	ldr	r2, [pc, #252]	@ (800985c <xPortStartScheduler+0x12c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d10b      	bne.n	800977a <xPortStartScheduler+0x4a>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60fb      	str	r3, [r7, #12]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800977a:	4b39      	ldr	r3, [pc, #228]	@ (8009860 <xPortStartScheduler+0x130>)
 800977c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	22ff      	movs	r2, #255	@ 0xff
 800978a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800979c:	b2da      	uxtb	r2, r3
 800979e:	4b31      	ldr	r3, [pc, #196]	@ (8009864 <xPortStartScheduler+0x134>)
 80097a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097a2:	4b31      	ldr	r3, [pc, #196]	@ (8009868 <xPortStartScheduler+0x138>)
 80097a4:	2207      	movs	r2, #7
 80097a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097a8:	e009      	b.n	80097be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80097aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009868 <xPortStartScheduler+0x138>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009868 <xPortStartScheduler+0x138>)
 80097b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c6:	2b80      	cmp	r3, #128	@ 0x80
 80097c8:	d0ef      	beq.n	80097aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ca:	4b27      	ldr	r3, [pc, #156]	@ (8009868 <xPortStartScheduler+0x138>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1c3 0307 	rsb	r3, r3, #7
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d00b      	beq.n	80097ee <xPortStartScheduler+0xbe>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60bb      	str	r3, [r7, #8]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009868 <xPortStartScheduler+0x138>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009868 <xPortStartScheduler+0x138>)
 80097f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009868 <xPortStartScheduler+0x138>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009800:	4a19      	ldr	r2, [pc, #100]	@ (8009868 <xPortStartScheduler+0x138>)
 8009802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800980c:	4b17      	ldr	r3, [pc, #92]	@ (800986c <xPortStartScheduler+0x13c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a16      	ldr	r2, [pc, #88]	@ (800986c <xPortStartScheduler+0x13c>)
 8009812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009818:	4b14      	ldr	r3, [pc, #80]	@ (800986c <xPortStartScheduler+0x13c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a13      	ldr	r2, [pc, #76]	@ (800986c <xPortStartScheduler+0x13c>)
 800981e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009824:	f000 f8da 	bl	80099dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009828:	4b11      	ldr	r3, [pc, #68]	@ (8009870 <xPortStartScheduler+0x140>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800982e:	f000 f8f9 	bl	8009a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009832:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <xPortStartScheduler+0x144>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a0f      	ldr	r2, [pc, #60]	@ (8009874 <xPortStartScheduler+0x144>)
 8009838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800983c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800983e:	f7ff ff63 	bl	8009708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009842:	f7ff f82f 	bl	80088a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009846:	f7ff ff1b 	bl	8009680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed00 	.word	0xe000ed00
 8009858:	410fc271 	.word	0x410fc271
 800985c:	410fc270 	.word	0x410fc270
 8009860:	e000e400 	.word	0xe000e400
 8009864:	240015c0 	.word	0x240015c0
 8009868:	240015c4 	.word	0x240015c4
 800986c:	e000ed20 	.word	0xe000ed20
 8009870:	24000010 	.word	0x24000010
 8009874:	e000ef34 	.word	0xe000ef34

08009878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009892:	4b10      	ldr	r3, [pc, #64]	@ (80098d4 <vPortEnterCritical+0x5c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	4a0e      	ldr	r2, [pc, #56]	@ (80098d4 <vPortEnterCritical+0x5c>)
 800989a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800989c:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <vPortEnterCritical+0x5c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d110      	bne.n	80098c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098a4:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <vPortEnterCritical+0x60>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	603b      	str	r3, [r7, #0]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <vPortEnterCritical+0x4a>
	}
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	24000010 	.word	0x24000010
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10b      	bne.n	8009902 <vPortExitCritical+0x26>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	607b      	str	r3, [r7, #4]
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	e7fd      	b.n	80098fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009902:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <vPortExitCritical+0x50>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3b01      	subs	r3, #1
 8009908:	4a08      	ldr	r2, [pc, #32]	@ (800992c <vPortExitCritical+0x50>)
 800990a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800990c:	4b07      	ldr	r3, [pc, #28]	@ (800992c <vPortExitCritical+0x50>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <vPortExitCritical+0x44>
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f383 8811 	msr	BASEPRI, r3
}
 800991e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	24000010 	.word	0x24000010

08009930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009930:	f3ef 8009 	mrs	r0, PSP
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4b15      	ldr	r3, [pc, #84]	@ (8009990 <pxCurrentTCBConst>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	f01e 0f10 	tst.w	lr, #16
 8009940:	bf08      	it	eq
 8009942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	6010      	str	r0, [r2, #0]
 800994c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009954:	f380 8811 	msr	BASEPRI, r0
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f7fe ffa0 	bl	80088a4 <vTaskSwitchContext>
 8009964:	f04f 0000 	mov.w	r0, #0
 8009968:	f380 8811 	msr	BASEPRI, r0
 800996c:	bc09      	pop	{r0, r3}
 800996e:	6819      	ldr	r1, [r3, #0]
 8009970:	6808      	ldr	r0, [r1, #0]
 8009972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009976:	f01e 0f10 	tst.w	lr, #16
 800997a:	bf08      	it	eq
 800997c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009980:	f380 8809 	msr	PSP, r0
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	f3af 8000 	nop.w

08009990 <pxCurrentTCBConst>:
 8009990:	24000f94 	.word	0x24000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop

08009998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	607b      	str	r3, [r7, #4]
}
 80099b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099b2:	f7fe febd 	bl	8008730 <xTaskIncrementTick>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099bc:	4b06      	ldr	r3, [pc, #24]	@ (80099d8 <xPortSysTickHandler+0x40>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f383 8811 	msr	BASEPRI, r3
}
 80099ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a10 <vPortSetupTimerInterrupt+0x34>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <vPortSetupTimerInterrupt+0x38>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <vPortSetupTimerInterrupt+0x3c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	@ (8009a1c <vPortSetupTimerInterrupt+0x40>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	099b      	lsrs	r3, r3, #6
 80099f8:	4a09      	ldr	r2, [pc, #36]	@ (8009a20 <vPortSetupTimerInterrupt+0x44>)
 80099fa:	3b01      	subs	r3, #1
 80099fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099fe:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <vPortSetupTimerInterrupt+0x34>)
 8009a00:	2207      	movs	r2, #7
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	e000e010 	.word	0xe000e010
 8009a14:	e000e018 	.word	0xe000e018
 8009a18:	24000000 	.word	0x24000000
 8009a1c:	10624dd3 	.word	0x10624dd3
 8009a20:	e000e014 	.word	0xe000e014

08009a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a34 <vPortEnableVFP+0x10>
 8009a28:	6801      	ldr	r1, [r0, #0]
 8009a2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a2e:	6001      	str	r1, [r0, #0]
 8009a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a32:	bf00      	nop
 8009a34:	e000ed88 	.word	0xe000ed88

08009a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a3e:	f3ef 8305 	mrs	r3, IPSR
 8009a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	d915      	bls.n	8009a76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a4a:	4a18      	ldr	r2, [pc, #96]	@ (8009aac <vPortValidateInterruptPriority+0x74>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a54:	4b16      	ldr	r3, [pc, #88]	@ (8009ab0 <vPortValidateInterruptPriority+0x78>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	7afa      	ldrb	r2, [r7, #11]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d20b      	bcs.n	8009a76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a76:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <vPortValidateInterruptPriority+0x7c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <vPortValidateInterruptPriority+0x80>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d90b      	bls.n	8009a9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	603b      	str	r3, [r7, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortValidateInterruptPriority+0x62>
	}
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	e000e3f0 	.word	0xe000e3f0
 8009ab0:	240015c0 	.word	0x240015c0
 8009ab4:	e000ed0c 	.word	0xe000ed0c
 8009ab8:	240015c4 	.word	0x240015c4

08009abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	@ 0x28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ac8:	f7fe fd76 	bl	80085b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009acc:	4b5c      	ldr	r3, [pc, #368]	@ (8009c40 <pvPortMalloc+0x184>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ad4:	f000 f924 	bl	8009d20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c44 <pvPortMalloc+0x188>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 8095 	bne.w	8009c10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01e      	beq.n	8009b2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009aec:	2208      	movs	r2, #8
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d015      	beq.n	8009b2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f023 0307 	bic.w	r3, r3, #7
 8009b04:	3308      	adds	r3, #8
 8009b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <pvPortMalloc+0x6e>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	617b      	str	r3, [r7, #20]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d06f      	beq.n	8009c10 <pvPortMalloc+0x154>
 8009b30:	4b45      	ldr	r3, [pc, #276]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d86a      	bhi.n	8009c10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b3a:	4b44      	ldr	r3, [pc, #272]	@ (8009c4c <pvPortMalloc+0x190>)
 8009b3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b3e:	4b43      	ldr	r3, [pc, #268]	@ (8009c4c <pvPortMalloc+0x190>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b44:	e004      	b.n	8009b50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <pvPortMalloc+0xa6>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b62:	4b37      	ldr	r3, [pc, #220]	@ (8009c40 <pvPortMalloc+0x184>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d051      	beq.n	8009c10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2208      	movs	r2, #8
 8009b72:	4413      	add	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	2308      	movs	r3, #8
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d920      	bls.n	8009bd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f000 f90a 	bl	8009de4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	4a1b      	ldr	r2, [pc, #108]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bde:	4b1a      	ldr	r3, [pc, #104]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <pvPortMalloc+0x194>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d203      	bcs.n	8009bf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bea:	4b17      	ldr	r3, [pc, #92]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a18      	ldr	r2, [pc, #96]	@ (8009c50 <pvPortMalloc+0x194>)
 8009bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	4b13      	ldr	r3, [pc, #76]	@ (8009c44 <pvPortMalloc+0x188>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <pvPortMalloc+0x198>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a11      	ldr	r2, [pc, #68]	@ (8009c54 <pvPortMalloc+0x198>)
 8009c0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c10:	f7fe fce0 	bl	80085d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <pvPortMalloc+0x17a>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <pvPortMalloc+0x176>
	return pvReturn;
 8009c36:	69fb      	ldr	r3, [r7, #28]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3728      	adds	r7, #40	@ 0x28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	240051d0 	.word	0x240051d0
 8009c44:	240051e4 	.word	0x240051e4
 8009c48:	240051d4 	.word	0x240051d4
 8009c4c:	240051c8 	.word	0x240051c8
 8009c50:	240051d8 	.word	0x240051d8
 8009c54:	240051dc 	.word	0x240051dc

08009c58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d04f      	beq.n	8009d0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c6a:	2308      	movs	r3, #8
 8009c6c:	425b      	negs	r3, r3
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4413      	add	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b25      	ldr	r3, [pc, #148]	@ (8009d14 <vPortFree+0xbc>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4013      	ands	r3, r2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10b      	bne.n	8009c9e <vPortFree+0x46>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60fb      	str	r3, [r7, #12]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00b      	beq.n	8009cbe <vPortFree+0x66>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60bb      	str	r3, [r7, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	e7fd      	b.n	8009cba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4b14      	ldr	r3, [pc, #80]	@ (8009d14 <vPortFree+0xbc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01e      	beq.n	8009d0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d11a      	bne.n	8009d0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d14 <vPortFree+0xbc>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	401a      	ands	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ce4:	f7fe fc68 	bl	80085b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <vPortFree+0xc0>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	4a09      	ldr	r2, [pc, #36]	@ (8009d18 <vPortFree+0xc0>)
 8009cf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cf6:	6938      	ldr	r0, [r7, #16]
 8009cf8:	f000 f874 	bl	8009de4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cfc:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <vPortFree+0xc4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a06      	ldr	r2, [pc, #24]	@ (8009d1c <vPortFree+0xc4>)
 8009d04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d06:	f7fe fc65 	bl	80085d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d0a:	bf00      	nop
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	240051e4 	.word	0x240051e4
 8009d18:	240051d4 	.word	0x240051d4
 8009d1c:	240051e0 	.word	0x240051e0

08009d20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d2c:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <prvHeapInit+0xac>)
 8009d2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00c      	beq.n	8009d54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dcc <prvHeapInit+0xac>)
 8009d50:	4413      	add	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d58:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd0 <prvHeapInit+0xb0>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009dd0 <prvHeapInit+0xb0>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a15      	ldr	r2, [pc, #84]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d82:	4b14      	ldr	r3, [pc, #80]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d8a:	4b12      	ldr	r3, [pc, #72]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	1ad2      	subs	r2, r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009da0:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd8 <prvHeapInit+0xb8>)
 8009dae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <prvHeapInit+0xbc>)
 8009db6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009db8:	4b09      	ldr	r3, [pc, #36]	@ (8009de0 <prvHeapInit+0xc0>)
 8009dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009dbe:	601a      	str	r2, [r3, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	240015c8 	.word	0x240015c8
 8009dd0:	240051c8 	.word	0x240051c8
 8009dd4:	240051d0 	.word	0x240051d0
 8009dd8:	240051d8 	.word	0x240051d8
 8009ddc:	240051d4 	.word	0x240051d4
 8009de0:	240051e4 	.word	0x240051e4

08009de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dec:	4b28      	ldr	r3, [pc, #160]	@ (8009e90 <prvInsertBlockIntoFreeList+0xac>)
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e002      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x14>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d8f7      	bhi.n	8009df2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d108      	bne.n	8009e26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	441a      	add	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d118      	bne.n	8009e6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b15      	ldr	r3, [pc, #84]	@ (8009e94 <prvInsertBlockIntoFreeList+0xb0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d00d      	beq.n	8009e62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	e008      	b.n	8009e74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e62:	4b0c      	ldr	r3, [pc, #48]	@ (8009e94 <prvInsertBlockIntoFreeList+0xb0>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e003      	b.n	8009e74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d002      	beq.n	8009e82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	240051c8 	.word	0x240051c8
 8009e94:	240051d0 	.word	0x240051d0

08009e98 <memset>:
 8009e98:	4402      	add	r2, r0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d100      	bne.n	8009ea2 <memset+0xa>
 8009ea0:	4770      	bx	lr
 8009ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea6:	e7f9      	b.n	8009e9c <memset+0x4>

08009ea8 <_reclaim_reent>:
 8009ea8:	4b29      	ldr	r3, [pc, #164]	@ (8009f50 <_reclaim_reent+0xa8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4283      	cmp	r3, r0
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	d04b      	beq.n	8009f4c <_reclaim_reent+0xa4>
 8009eb4:	69c3      	ldr	r3, [r0, #28]
 8009eb6:	b1ab      	cbz	r3, 8009ee4 <_reclaim_reent+0x3c>
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	b16b      	cbz	r3, 8009ed8 <_reclaim_reent+0x30>
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	69e3      	ldr	r3, [r4, #28]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	5959      	ldr	r1, [r3, r5]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d13b      	bne.n	8009f40 <_reclaim_reent+0x98>
 8009ec8:	3504      	adds	r5, #4
 8009eca:	2d80      	cmp	r5, #128	@ 0x80
 8009ecc:	d1f7      	bne.n	8009ebe <_reclaim_reent+0x16>
 8009ece:	69e3      	ldr	r3, [r4, #28]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	68d9      	ldr	r1, [r3, #12]
 8009ed4:	f000 f872 	bl	8009fbc <_free_r>
 8009ed8:	69e3      	ldr	r3, [r4, #28]
 8009eda:	6819      	ldr	r1, [r3, #0]
 8009edc:	b111      	cbz	r1, 8009ee4 <_reclaim_reent+0x3c>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f86c 	bl	8009fbc <_free_r>
 8009ee4:	6961      	ldr	r1, [r4, #20]
 8009ee6:	b111      	cbz	r1, 8009eee <_reclaim_reent+0x46>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 f867 	bl	8009fbc <_free_r>
 8009eee:	69e1      	ldr	r1, [r4, #28]
 8009ef0:	b111      	cbz	r1, 8009ef8 <_reclaim_reent+0x50>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f862 	bl	8009fbc <_free_r>
 8009ef8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009efa:	b111      	cbz	r1, 8009f02 <_reclaim_reent+0x5a>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 f85d 	bl	8009fbc <_free_r>
 8009f02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f04:	b111      	cbz	r1, 8009f0c <_reclaim_reent+0x64>
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f858 	bl	8009fbc <_free_r>
 8009f0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f0e:	b111      	cbz	r1, 8009f16 <_reclaim_reent+0x6e>
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f853 	bl	8009fbc <_free_r>
 8009f16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009f18:	b111      	cbz	r1, 8009f20 <_reclaim_reent+0x78>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 f84e 	bl	8009fbc <_free_r>
 8009f20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009f22:	b111      	cbz	r1, 8009f2a <_reclaim_reent+0x82>
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 f849 	bl	8009fbc <_free_r>
 8009f2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f2c:	b111      	cbz	r1, 8009f34 <_reclaim_reent+0x8c>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 f844 	bl	8009fbc <_free_r>
 8009f34:	6a23      	ldr	r3, [r4, #32]
 8009f36:	b14b      	cbz	r3, 8009f4c <_reclaim_reent+0xa4>
 8009f38:	4620      	mov	r0, r4
 8009f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f3e:	4718      	bx	r3
 8009f40:	680e      	ldr	r6, [r1, #0]
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 f83a 	bl	8009fbc <_free_r>
 8009f48:	4631      	mov	r1, r6
 8009f4a:	e7bb      	b.n	8009ec4 <_reclaim_reent+0x1c>
 8009f4c:	bd70      	pop	{r4, r5, r6, pc}
 8009f4e:	bf00      	nop
 8009f50:	24000014 	.word	0x24000014

08009f54 <__libc_init_array>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	4d0d      	ldr	r5, [pc, #52]	@ (8009f8c <__libc_init_array+0x38>)
 8009f58:	4c0d      	ldr	r4, [pc, #52]	@ (8009f90 <__libc_init_array+0x3c>)
 8009f5a:	1b64      	subs	r4, r4, r5
 8009f5c:	10a4      	asrs	r4, r4, #2
 8009f5e:	2600      	movs	r6, #0
 8009f60:	42a6      	cmp	r6, r4
 8009f62:	d109      	bne.n	8009f78 <__libc_init_array+0x24>
 8009f64:	4d0b      	ldr	r5, [pc, #44]	@ (8009f94 <__libc_init_array+0x40>)
 8009f66:	4c0c      	ldr	r4, [pc, #48]	@ (8009f98 <__libc_init_array+0x44>)
 8009f68:	f000 f87e 	bl	800a068 <_init>
 8009f6c:	1b64      	subs	r4, r4, r5
 8009f6e:	10a4      	asrs	r4, r4, #2
 8009f70:	2600      	movs	r6, #0
 8009f72:	42a6      	cmp	r6, r4
 8009f74:	d105      	bne.n	8009f82 <__libc_init_array+0x2e>
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f7c:	4798      	blx	r3
 8009f7e:	3601      	adds	r6, #1
 8009f80:	e7ee      	b.n	8009f60 <__libc_init_array+0xc>
 8009f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f86:	4798      	blx	r3
 8009f88:	3601      	adds	r6, #1
 8009f8a:	e7f2      	b.n	8009f72 <__libc_init_array+0x1e>
 8009f8c:	0800a178 	.word	0x0800a178
 8009f90:	0800a178 	.word	0x0800a178
 8009f94:	0800a178 	.word	0x0800a178
 8009f98:	0800a17c 	.word	0x0800a17c

08009f9c <__retarget_lock_acquire_recursive>:
 8009f9c:	4770      	bx	lr

08009f9e <__retarget_lock_release_recursive>:
 8009f9e:	4770      	bx	lr

08009fa0 <memcpy>:
 8009fa0:	440a      	add	r2, r1
 8009fa2:	4291      	cmp	r1, r2
 8009fa4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009fa8:	d100      	bne.n	8009fac <memcpy+0xc>
 8009faa:	4770      	bx	lr
 8009fac:	b510      	push	{r4, lr}
 8009fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fb6:	4291      	cmp	r1, r2
 8009fb8:	d1f9      	bne.n	8009fae <memcpy+0xe>
 8009fba:	bd10      	pop	{r4, pc}

08009fbc <_free_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	d041      	beq.n	800a048 <_free_r+0x8c>
 8009fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc8:	1f0c      	subs	r4, r1, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfb8      	it	lt
 8009fce:	18e4      	addlt	r4, r4, r3
 8009fd0:	f000 f83e 	bl	800a050 <__malloc_lock>
 8009fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800a04c <_free_r+0x90>)
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	b933      	cbnz	r3, 8009fe8 <_free_r+0x2c>
 8009fda:	6063      	str	r3, [r4, #4]
 8009fdc:	6014      	str	r4, [r2, #0]
 8009fde:	4628      	mov	r0, r5
 8009fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe4:	f000 b83a 	b.w	800a05c <__malloc_unlock>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d908      	bls.n	8009ffe <_free_r+0x42>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf01      	itttt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	1809      	addeq	r1, r1, r0
 8009ffa:	6021      	streq	r1, [r4, #0]
 8009ffc:	e7ed      	b.n	8009fda <_free_r+0x1e>
 8009ffe:	461a      	mov	r2, r3
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	b10b      	cbz	r3, 800a008 <_free_r+0x4c>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d9fa      	bls.n	8009ffe <_free_r+0x42>
 800a008:	6811      	ldr	r1, [r2, #0]
 800a00a:	1850      	adds	r0, r2, r1
 800a00c:	42a0      	cmp	r0, r4
 800a00e:	d10b      	bne.n	800a028 <_free_r+0x6c>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	4401      	add	r1, r0
 800a014:	1850      	adds	r0, r2, r1
 800a016:	4283      	cmp	r3, r0
 800a018:	6011      	str	r1, [r2, #0]
 800a01a:	d1e0      	bne.n	8009fde <_free_r+0x22>
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	6053      	str	r3, [r2, #4]
 800a022:	4408      	add	r0, r1
 800a024:	6010      	str	r0, [r2, #0]
 800a026:	e7da      	b.n	8009fde <_free_r+0x22>
 800a028:	d902      	bls.n	800a030 <_free_r+0x74>
 800a02a:	230c      	movs	r3, #12
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	e7d6      	b.n	8009fde <_free_r+0x22>
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	1821      	adds	r1, r4, r0
 800a034:	428b      	cmp	r3, r1
 800a036:	bf04      	itt	eq
 800a038:	6819      	ldreq	r1, [r3, #0]
 800a03a:	685b      	ldreq	r3, [r3, #4]
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	bf04      	itt	eq
 800a040:	1809      	addeq	r1, r1, r0
 800a042:	6021      	streq	r1, [r4, #0]
 800a044:	6054      	str	r4, [r2, #4]
 800a046:	e7ca      	b.n	8009fde <_free_r+0x22>
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	bf00      	nop
 800a04c:	24005324 	.word	0x24005324

0800a050 <__malloc_lock>:
 800a050:	4801      	ldr	r0, [pc, #4]	@ (800a058 <__malloc_lock+0x8>)
 800a052:	f7ff bfa3 	b.w	8009f9c <__retarget_lock_acquire_recursive>
 800a056:	bf00      	nop
 800a058:	24005320 	.word	0x24005320

0800a05c <__malloc_unlock>:
 800a05c:	4801      	ldr	r0, [pc, #4]	@ (800a064 <__malloc_unlock+0x8>)
 800a05e:	f7ff bf9e 	b.w	8009f9e <__retarget_lock_release_recursive>
 800a062:	bf00      	nop
 800a064:	24005320 	.word	0x24005320

0800a068 <_init>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr

0800a074 <_fini>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	bf00      	nop
 800a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07a:	bc08      	pop	{r3}
 800a07c:	469e      	mov	lr, r3
 800a07e:	4770      	bx	lr
